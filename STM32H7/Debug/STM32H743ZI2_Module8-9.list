
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013dc0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f44  08014060  08014060  00024060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015fa4  08015fa4  00025fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08015fac  08015fac  00025fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08015fb4  08015fb4  00025fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000408  24000000  08015fbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001204  24000408  080163c4  00030408  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400160c  080163c4  0003160c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003eb3d  00000000  00000000  00030436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c06  00000000  00000000  0006ef73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001748  00000000  00000000  00074b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001590  00000000  00000000  000762c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e592  00000000  00000000  00077858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023f72  00000000  00000000  000b5dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016de65  00000000  00000000  000d9d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00247bc1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007364  00000000  00000000  00247c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000408 	.word	0x24000408
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014048 	.word	0x08014048

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400040c 	.word	0x2400040c
 80002dc:	08014048 	.word	0x08014048

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f00d fb24 	bl	800dd28 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f00d fbb1 	bl	800de54 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	765a      	strb	r2, [r3, #25]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e5b      	ldrb	r3, [r3, #25]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000850:	db0b      	blt.n	800086a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <_ZN5AMT216unwarpEv+0xa0>)
 8000864:	4413      	add	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e020      	b.n	80008ac <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000870:	461a      	mov	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc0c      	bgt.n	800089a <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000886:	461a      	mov	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e008      	b.n	80008ac <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	441a      	add	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	615a      	str	r2, [r3, #20]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	ffffc001 	.word	0xffffc001

080008d4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	695b      	ldr	r3, [r3, #20]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	ed87 0a01 	vstr	s0, [r7, #4]
 8000910:	edc7 0a00 	vstr	s1, [r7]
 8000914:	edd7 0a00 	vldr	s1, [r7]
 8000918:	ed97 0a01 	vldr	s0, [r7, #4]
 800091c:	f00f ff00 	bl	8010720 <atan2f>
 8000920:	eef0 7a40 	vmov.f32	s15, s0
 8000924:	eeb0 0a67 	vmov.f32	s0, s15
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	ed87 0a01 	vstr	s0, [r7, #4]
 8000938:	ed97 0a01 	vldr	s0, [r7, #4]
 800093c:	f00f fef2 	bl	8010724 <sqrtf>
 8000940:	eef0 7a40 	vmov.f32	s15, s0
 8000944:	eeb0 0a67 	vmov.f32	s0, s15
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a32      	ldr	r2, [pc, #200]	; (8000a24 <_ZN10RobotJointC1Ev+0xd4>)
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	2002      	movs	r0, #2
 8000966:	eeb0 0a67 	vmov.f32	s0, s15
 800096a:	f000 fecd 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800096e:	eeb0 7b40 	vmov.f64	d7, d0
 8000972:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	edc3 7a01 	vstr	s15, [r3, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	edd3 7a00 	vldr	s15, [r3]
 8000982:	2003      	movs	r0, #3
 8000984:	eeb0 0a67 	vmov.f32	s0, s15
 8000988:	f000 febe 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800098c:	eeb0 7b40 	vmov.f64	d7, d0
 8000990:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	edc3 7a02 	vstr	s15, [r3, #8]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	edd3 7a00 	vldr	s15, [r3]
 80009a0:	2004      	movs	r0, #4
 80009a2:	eeb0 0a67 	vmov.f32	s0, s15
 80009a6:	f000 feaf 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80009aa:	eeb0 7b40 	vmov.f64	d7, d0
 80009ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edc3 7a03 	vstr	s15, [r3, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f04f 0200 	mov.w	r2, #0
 80009be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f04f 0200 	mov.w	r2, #0
 80009c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f04f 0200 	mov.w	r2, #0
 80009dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f04f 0200 	mov.w	r2, #0
 80009f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <_ZN10RobotJointC1Ev+0xd8>)
 8000a0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <_ZN10RobotJointC1Ev+0xdc>)
 8000a14:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	3b03126f 	.word	0x3b03126f
 8000a28:	3dcccccd 	.word	0x3dcccccd
 8000a2c:	3a83126f 	.word	0x3a83126f

08000a30 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

}
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b090      	sub	sp, #64	; 0x40
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8000a50:	ed87 0a08 	vstr	s0, [r7, #32]
 8000a54:	edc7 0a07 	vstr	s1, [r7, #28]
 8000a58:	ed87 1a06 	vstr	s2, [r7, #24]
 8000a5c:	edc7 1a05 	vstr	s3, [r7, #20]
 8000a60:	ed87 2a04 	vstr	s4, [r7, #16]
 8000a64:	edc7 2a03 	vstr	s5, [r7, #12]
 8000a68:	ed87 3a02 	vstr	s6, [r7, #8]
 8000a6c:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)/1000.0);
 8000a70:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a74:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a80:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000a84:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000a88:	eeb0 0b46 	vmov.f64	d0, d6
 8000a8c:	f00f fe00 	bl	8010690 <sin>
 8000a90:	eeb0 7b40 	vmov.f64	d7, d0
 8000a94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a98:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)/1000.0);
 8000a9c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aac:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000ab0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ab4:	eeb0 0b46 	vmov.f64	d0, d6
 8000ab8:	f00f fda2 	bl	8010600 <cos>
 8000abc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3/1000.0);
 8000ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad0:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000ad4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ad8:	eeb0 0b46 	vmov.f64	d0, d6
 8000adc:	f00f fdd8 	bl	8010690 <sin>
 8000ae0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ae4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ae8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1/1000.0);
 8000aec:	edd7 7a08 	vldr	s15, [r7, #32]
 8000af0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af4:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000af8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000afc:	eeb0 0b46 	vmov.f64	d0, d6
 8000b00:	f00f fdc6 	bl	8010690 <sin>
 8000b04:	eeb0 7b40 	vmov.f64	d7, d0
 8000b08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b0c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1/1000.0);
 8000b10:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b18:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000b1c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b20:	eeb0 0b46 	vmov.f64	d0, d6
 8000b24:	f00f fd6c 	bl	8010600 <cos>
 8000b28:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000b34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b38:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b40:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12)) * 1000.0;
 8000b44:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b48:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b50:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b54:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b5c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000b60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b64:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000c8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000b68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b70:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000b7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b82:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000b90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b94:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000b98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ba0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000c94 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000ba4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ba8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000bb0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000bb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc4:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000bc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000bcc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000c8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000bd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000bdc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000be0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000be4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000be8:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000c94 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000bec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000bf0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000bf4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000bf8:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000bfc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000c00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c04:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c08:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000c0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c10:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000c8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000c14:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c18:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000c20:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000c2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c3e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c4e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c52:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c5e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c6a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000c78:	bf00      	nop
 8000c7a:	3740      	adds	r7, #64	; 0x40
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	00000000 	.word	0x00000000
 8000c84:	408f4000 	.word	0x408f4000
 8000c88:	439d8000 	.word	0x439d8000
 8000c8c:	43bfa000 	.word	0x43bfa000
 8000c90:	447a0000 	.word	0x447a0000
 8000c94:	41540000 	.word	0x41540000
 8000c98:	43b90000 	.word	0x43b90000

08000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b091      	sub	sp, #68	; 0x44
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	61f8      	str	r0, [r7, #28]
 8000ca4:	ed87 0a06 	vstr	s0, [r7, #24]
 8000ca8:	edc7 0a05 	vstr	s1, [r7, #20]
 8000cac:	ed87 1a04 	vstr	s2, [r7, #16]
 8000cb0:	edc7 1a03 	vstr	s3, [r7, #12]
 8000cb4:	ed87 2a02 	vstr	s4, [r7, #8]
 8000cb8:	edc7 2a01 	vstr	s5, [r7, #4]
 8000cbc:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000cd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cd4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000ce2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ce6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000cf6:	edd7 6a01 	vldr	s13, [r7, #4]
 8000cfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d0a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000d0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000d12:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000d16:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d1e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000d22:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d26:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000d36:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d3e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000d42:	ed97 7a00 	vldr	s14, [r7]
 8000d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000d52:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d5a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000d5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d66:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000d72:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d82:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d8a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000d8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d92:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d96:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000db2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000db6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000dbe:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000dc2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dca:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dd6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000dda:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000dde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000de2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000de6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dea:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000dee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000df2:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000df6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dfe:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000e02:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000e14:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e1c:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000e20:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e2c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e30:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e38:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000e3c:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000e40:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e44:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e48:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e50:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000e54:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e58:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000e5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000e6e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e76:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000e7a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e86:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e92:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000e96:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000e9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e9e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ea2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ea6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000eaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000eae:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eba:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000ebe:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ec2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ec6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000ed8:	bf00      	nop
 8000eda:	3744      	adds	r7, #68	; 0x44
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	ed2d 8b08 	vpush	{d8-d11}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f02:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f0a:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000f12:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000f1a:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000f22:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f2a:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000f32:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	ed93 7a00 	vldr	s14, [r3]
 8000f3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000f4e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f52:	edd7 7a00 	vldr	s15, [r7]
 8000f56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	edd3 6a00 	vldr	s13, [r3]
 8000f60:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	ed93 7a00 	vldr	s14, [r3]
 8000f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	2004      	movs	r0, #4
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	f000 fbb3 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fa2:	eeb0 7b40 	vmov.f64	d7, d0
 8000fa6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000faa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000fae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb2:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	ed93 7a00 	vldr	s14, [r3]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	edd3 5a00 	vldr	s11, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000fca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fce:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fda:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fde:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edd3 6a00 	vldr	s13, [r3]
 8000ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001000:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001004:	edd7 7a03 	vldr	s15, [r7, #12]
 8001008:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	2004      	movs	r0, #4
 8001014:	eeb0 0a67 	vmov.f32	s0, s15
 8001018:	f000 fb76 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800101c:	eeb0 7b40 	vmov.f64	d7, d0
 8001020:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001024:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001028:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800102c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edd3 5a00 	vldr	s11, [r3]
 800103c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001040:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001044:	edd7 7a06 	vldr	s15, [r7, #24]
 8001048:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800104c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001050:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001054:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001058:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 800105c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001060:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 800106a:	edd7 7a08 	vldr	s15, [r7, #32]
 800106e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001072:	edd7 7a03 	vldr	s15, [r7, #12]
 8001076:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	2003      	movs	r0, #3
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	f000 fb3f 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800108a:	eeb0 7b40 	vmov.f64	d7, d0
 800108e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001092:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001096:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	ed93 7a00 	vldr	s14, [r3]
 80010a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b8:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 80010bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010c0:	edd7 7a00 	vldr	s15, [r7]
 80010c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edd3 5a00 	vldr	s11, [r3]
 80010ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80010d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80010d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010de:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	edd3 6a00 	vldr	s13, [r3]
 80010f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001104:	edd7 7a03 	vldr	s15, [r7, #12]
 8001108:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	2004      	movs	r0, #4
 8001114:	eeb0 0a67 	vmov.f32	s0, s15
 8001118:	f000 faf6 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800111c:	eeb0 7b40 	vmov.f64	d7, d0
 8001120:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001124:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001128:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800112c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 5a00 	vldr	s11, [r3]
 800113c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001140:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001144:	edd7 7a06 	vldr	s15, [r7, #24]
 8001148:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800114c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001150:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001154:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001158:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800115c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001160:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	ed93 7a00 	vldr	s14, [r3]
 8001170:	edd7 7a05 	vldr	s15, [r7, #20]
 8001174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001178:	edd7 7a07 	vldr	s15, [r7, #28]
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001184:	edd7 7a03 	vldr	s15, [r7, #12]
 8001188:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	2004      	movs	r0, #4
 8001194:	eeb0 0a67 	vmov.f32	s0, s15
 8001198:	f000 fab6 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800119c:	eeb0 7b40 	vmov.f64	d7, d0
 80011a0:	ee29 6b07 	vmul.f64	d6, d9, d7
 80011a4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ac:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 5a00 	vldr	s11, [r3]
 80011bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80011c8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d4:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edd3 6a00 	vldr	s13, [r3]
 80011ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fe:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	2004      	movs	r0, #4
 800120a:	eeb0 0a67 	vmov.f32	s0, s15
 800120e:	f000 fa7b 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001212:	eeb0 7b40 	vmov.f64	d7, d0
 8001216:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800121a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800121e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001222:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	edd3 5a00 	vldr	s11, [r3]
 8001232:	edd7 7a04 	vldr	s15, [r7, #16]
 8001236:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800123a:	edd7 7a06 	vldr	s15, [r7, #24]
 800123e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800124a:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800124e:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001252:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001256:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800125a:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	edd7 7a05 	vldr	s15, [r7, #20]
 8001268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001274:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001278:	edd7 7a03 	vldr	s15, [r7, #12]
 800127c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	2004      	movs	r0, #4
 8001288:	eeb0 0a67 	vmov.f32	s0, s15
 800128c:	f000 fa3c 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001290:	eeb0 7b40 	vmov.f64	d7, d0
 8001294:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001298:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800129c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012a0:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 5a00 	vldr	s11, [r3]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012bc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012c8:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80012d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	ed93 7a00 	vldr	s14, [r3]
 80012e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80012f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	2004      	movs	r0, #4
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	f000 f9fe 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800130c:	eeb0 7b40 	vmov.f64	d7, d0
 8001310:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001314:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001318:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800131c:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edd3 5a00 	vldr	s11, [r3]
 800132c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001330:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001334:	edd7 7a06 	vldr	s15, [r7, #24]
 8001338:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001344:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001348:	ed97 7a07 	vldr	s14, [r7, #28]
 800134c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 6a00 	vldr	s13, [r3]
 800135a:	edd7 7a05 	vldr	s15, [r7, #20]
 800135e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800136a:	edd7 7a03 	vldr	s15, [r7, #12]
 800136e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	2004      	movs	r0, #4
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	f000 f9c3 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001382:	eeb0 7b40 	vmov.f64	d7, d0
 8001386:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800138a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800138e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001392:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	edd3 5a00 	vldr	s11, [r3]
 80013a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ae:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ba:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013be:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80013c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013c6:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013ca:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	2003      	movs	r0, #3
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	f000 f991 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013e6:	eeb0 7b40 	vmov.f64	d7, d0
 80013ea:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80013f2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	ed93 7a00 	vldr	s14, [r3]
 80013fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001408:	ee36 6b07 	vadd.f64	d6, d6, d7
 800140c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001410:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001414:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001418:	ee28 7b07 	vmul.f64	d7, d8, d7
 800141c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001434:	edd7 7a05 	vldr	s15, [r7, #20]
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001440:	edd7 7a03 	vldr	s15, [r7, #12]
 8001444:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	2003      	movs	r0, #3
 8001450:	eeb0 0a67 	vmov.f32	s0, s15
 8001454:	f000 f958 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001458:	eeb0 7b40 	vmov.f64	d7, d0
 800145c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001460:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001464:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001468:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800146c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001470:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	2003      	movs	r0, #3
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	f000 f942 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001484:	eeb0 7b40 	vmov.f64	d7, d0
 8001488:	ee29 7b07 	vmul.f64	d7, d9, d7
 800148c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001490:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	edd7 7a04 	vldr	s15, [r7, #16]
 800149e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b2:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80014d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	2004      	movs	r0, #4
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	f000 f910 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014e8:	eeb0 7b40 	vmov.f64	d7, d0
 80014ec:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80014f0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80014f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014f8:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	ed93 7a00 	vldr	s14, [r3]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	edd3 5a00 	vldr	s11, [r3]
 8001508:	edd7 7a04 	vldr	s15, [r7, #16]
 800150c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001510:	edd7 7a06 	vldr	s15, [r7, #24]
 8001514:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001524:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001528:	ed97 7a07 	vldr	s14, [r7, #28]
 800152c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	edd3 6a00 	vldr	s13, [r3]
 800153a:	edd7 7a05 	vldr	s15, [r7, #20]
 800153e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	2004      	movs	r0, #4
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	f000 f8d3 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001562:	eeb0 7b40 	vmov.f64	d7, d0
 8001566:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800156a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800156e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001572:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	ed93 7a00 	vldr	s14, [r3]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 5a00 	vldr	s11, [r3]
 8001582:	edd7 7a04 	vldr	s15, [r7, #16]
 8001586:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800158a:	edd7 7a06 	vldr	s15, [r7, #24]
 800158e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001596:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800159a:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800159e:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80015a2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80015a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80015b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015b4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80015b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015bc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	2002      	movs	r0, #2
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	f000 f89c 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015d0:	eeb0 7b40 	vmov.f64	d7, d0
 80015d4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015d8:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80015dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	2003      	movs	r0, #3
 80015ec:	eeb0 0a67 	vmov.f32	s0, s15
 80015f0:	f000 f88a 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015f4:	eeb0 7b40 	vmov.f64	d7, d0
 80015f8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001600:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	edd7 7a04 	vldr	s15, [r7, #16]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001616:	ee36 6b07 	vadd.f64	d6, d6, d7
 800161a:	edd7 7a06 	vldr	s15, [r7, #24]
 800161e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001622:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 8001626:	edd7 7a03 	vldr	s15, [r7, #12]
 800162a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	2003      	movs	r0, #3
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	f000 f865 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800163e:	eeb0 7b40 	vmov.f64	d7, d0
 8001642:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001646:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800164a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	edd7 7a04 	vldr	s15, [r7, #16]
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001660:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001664:	edd7 7a05 	vldr	s15, [r7, #20]
 8001668:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800166c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001670:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001674:	ed97 7a07 	vldr	s14, [r7, #28]
 8001678:	edd7 7a02 	vldr	s15, [r7, #8]
 800167c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 6a00 	vldr	s13, [r3]
 8001686:	edd7 7a05 	vldr	s15, [r7, #20]
 800168a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001696:	edd7 7a03 	vldr	s15, [r7, #12]
 800169a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	2004      	movs	r0, #4
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	f000 f82d 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016ae:	eeb0 7b40 	vmov.f64	d7, d0
 80016b2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80016b6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80016ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016be:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	edd3 5a00 	vldr	s11, [r3]
 80016ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016da:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80016de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e6:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80016ea:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80016ee:	ee38 7b47 	vsub.f64	d7, d8, d7
 80016f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	ecbd 8b08 	vpop	{d8-d11}
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001712:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8001714:	edd7 7a01 	vldr	s15, [r7, #4]
 8001718:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	ee06 3a90 	vmov	s13, r3
 8001722:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001726:	eeb0 1b46 	vmov.f64	d1, d6
 800172a:	eeb0 0b47 	vmov.f64	d0, d7
 800172e:	f00e fca3 	bl	8010078 <pow>
 8001732:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001736:	eeb0 0b47 	vmov.f64	d0, d7
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a01 	vstr	s0, [r7, #4]
 800174a:	edd7 7a01 	vldr	s15, [r7, #4]
 800174e:	fefb 7a67 	vrintm.f32	s15, s15
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
 800176a:	edd7 7a01 	vldr	s15, [r7, #4]
 800176e:	fef8 7a67 	vrinta.f32	s15, s15
 8001772:	eeb0 0a67 	vmov.f32	s0, s15
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	22b4      	movs	r2, #180	; 0xb4
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	761a      	strb	r2, [r3, #24]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	22ef      	movs	r2, #239	; 0xef
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
}
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f00b f87d 	bl	800c908 <HAL_TIM_PWM_Start>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af02      	add	r7, sp, #8
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d13f      	bne.n	80018aa <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691c      	ldr	r4, [r3, #16]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	3301      	adds	r3, #1
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001844:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184c:	eeb0 0a67 	vmov.f32	s0, s15
 8001850:	f7ff ff86 	bl	8001760 <_ZSt5roundf>
 8001854:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	3301      	adds	r3, #1
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001872:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	f7ff ff5f 	bl	8001740 <_ZSt5floorf>
 8001882:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	9600      	str	r6, [sp, #0]
 8001892:	462b      	mov	r3, r5
 8001894:	4622      	mov	r2, r4
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f9cf 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 800189e:	4602      	mov	r2, r0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80018a8:	e176      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d13f      	bne.n	8001932 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691c      	ldr	r4, [r3, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	3301      	adds	r3, #1
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	f7ff ff42 	bl	8001760 <_ZSt5roundf>
 80018dc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80018e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	3301      	adds	r3, #1
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fa:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	f7ff ff1b 	bl	8001740 <_ZSt5floorf>
 800190a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 800190e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001912:	ee17 3a90 	vmov	r3, s15
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	9600      	str	r6, [sp, #0]
 800191a:	462b      	mov	r3, r5
 800191c:	4622      	mov	r2, r4
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f98b 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001926:	4602      	mov	r2, r0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001930:	e132      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b08      	cmp	r3, #8
 8001938:	d13f      	bne.n	80019ba <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691c      	ldr	r4, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	3301      	adds	r3, #1
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001954:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	f7ff fefe 	bl	8001760 <_ZSt5roundf>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	3301      	adds	r3, #1
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001982:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	f7ff fed7 	bl	8001740 <_ZSt5floorf>
 8001992:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199a:	ee17 3a90 	vmov	r3, s15
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	9600      	str	r6, [sp, #0]
 80019a2:	462b      	mov	r3, r5
 80019a4:	4622      	mov	r2, r4
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f947 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 80019ae:	4602      	mov	r2, r0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019b8:	e0ee      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d13f      	bne.n	8001a42 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691c      	ldr	r4, [r3, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	3301      	adds	r3, #1
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019dc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e4:	eeb0 0a67 	vmov.f32	s0, s15
 80019e8:	f7ff feba 	bl	8001760 <_ZSt5roundf>
 80019ec:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80019f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	3301      	adds	r3, #1
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a12:	eeb0 0a67 	vmov.f32	s0, s15
 8001a16:	f7ff fe93 	bl	8001740 <_ZSt5floorf>
 8001a1a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a22:	ee17 3a90 	vmov	r3, s15
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	9600      	str	r6, [sp, #0]
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f903 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001a36:	4602      	mov	r2, r0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a40:	e0aa      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d144      	bne.n	8001ad4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691c      	ldr	r4, [r3, #16]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a64:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	f7ff fe76 	bl	8001760 <_ZSt5roundf>
 8001a74:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	3301      	adds	r3, #1
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a92:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	f7ff fe4f 	bl	8001740 <_ZSt5floorf>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	9600      	str	r6, [sp, #0]
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	4622      	mov	r2, r4
 8001ab6:	6839      	ldr	r1, [r7, #0]
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8bf 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ac8:	e066      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001aca:	bf00      	nop
 8001acc:	3d4ccccd 	.word	0x3d4ccccd
 8001ad0:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b14      	cmp	r3, #20
 8001ada:	d13f      	bne.n	8001b5c <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691c      	ldr	r4, [r3, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	3301      	adds	r3, #1
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afe:	eeb0 0a67 	vmov.f32	s0, s15
 8001b02:	f7ff fe2d 	bl	8001760 <_ZSt5roundf>
 8001b06:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0e:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b30:	f7ff fe06 	bl	8001740 <_ZSt5floorf>
 8001b34:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3c:	ee17 3a90 	vmov	r3, s15
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	9600      	str	r6, [sp, #0]
 8001b44:	462b      	mov	r3, r5
 8001b46:	4622      	mov	r2, r4
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f876 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001b50:	4602      	mov	r2, r0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b5a:	e01d      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2200      	movs	r2, #0
 8001b78:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ba0 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	761a      	strb	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	765a      	strb	r2, [r3, #25]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e5b      	ldrb	r3, [r3, #25]
 8001bf0:	f083 0301 	eor.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fe09 	bl	8001818 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001c06:	e000      	b.n	8001c0a <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001c08:	bf00      	nop
}
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7e1b      	ldrb	r3, [r3, #24]
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff fdf3 	bl	8001818 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001c32:	e000      	b.n	8001c36 <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001c34:	bf00      	nop
}
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	69f9      	ldr	r1, [r7, #28]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	1a8a      	subs	r2, r1, r2
 8001c56:	fb02 f203 	mul.w	r2, r2, r3
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1acb      	subs	r3, r1, r3
 8001c60:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	4413      	add	r3, r2
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c82:	eef0 7ae7 	vabs.f32	s15, s15
 8001c86:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001ca6:	615a      	str	r2, [r3, #20]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001cac:	619a      	str	r2, [r3, #24]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cb4:	61da      	str	r2, [r3, #28]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001cba:	621a      	str	r2, [r3, #32]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	22c7      	movs	r2, #199	; 0xc7
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ce0:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001ce6:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001ce8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001d14 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f82f 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	60da      	str	r2, [r3, #12]
}
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	41a00000 	.word	0x41a00000
 8001d0c:	469c4000 	.word	0x469c4000
 8001d10:	43480000 	.word	0x43480000
 8001d14:	00000000 	.word	0x00000000

08001d18 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
}
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f00a fde1 	bl	800c908 <HAL_TIM_PWM_Start>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	ed2d 8b02 	vpush	{d8}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d70:	f7ff ff80 	bl	8001c74 <_ZSt4fabsf>
 8001d74:	eeb0 7a40 	vmov.f32	s14, s0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	bf94      	ite	ls
 8001d88:	2301      	movls	r3, #1
 8001d8a:	2300      	movhi	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e01b      	b.n	8001dd2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001da0:	eeb0 0a67 	vmov.f32	s0, s15
 8001da4:	f7ff ff66 	bl	8001c74 <_ZSt4fabsf>
 8001da8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	edd3 7a06 	vldr	s15, [r3, #24]
 8001db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	bfac      	ite	ge
 8001dbc:	2301      	movge	r3, #1
 8001dbe:	2300      	movlt	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e001      	b.n	8001dd2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dd8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002074 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	f2c0 80db 	blt.w	8001f9e <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6898      	ldr	r0, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	4619      	mov	r1, r3
 8001df6:	f007 ff7f 	bl	8009cf8 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	3301      	adds	r3, #1
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e14:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002078 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	f7ff fc9a 	bl	8001760 <_ZSt5roundf>
 8001e2c:	eef0 7a40 	vmov.f32	s15, s0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3a:	ee17 2a90 	vmov	r2, s15
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d113      	bne.n	8001e70 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fa5b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e68:	ee17 2a90 	vmov	r2, s15
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001e6e:	e1e0      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d113      	bne.n	8001ea0 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fa43 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e98:	ee17 2a90 	vmov	r2, s15
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e9e:	e1c8      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d113      	bne.n	8001ed0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fa2b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001eba:	eeb0 7b40 	vmov.f64	d7, d0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ec8:	ee17 2a90 	vmov	r2, s15
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ece:	e1b0      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d113      	bne.n	8001f00 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fa13 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001eea:	eeb0 7b40 	vmov.f64	d7, d0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ef8:	ee17 2a90 	vmov	r2, s15
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001efe:	e198      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d113      	bne.n	8001f30 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f9fb 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f28:	ee17 2a90 	vmov	r2, s15
 8001f2c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f2e:	e180      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b14      	cmp	r3, #20
 8001f36:	d113      	bne.n	8001f60 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f9e3 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f58:	ee17 2a90 	vmov	r2, s15
 8001f5c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f5e:	e168      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2200      	movs	r2, #0
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f9c:	e149      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fa4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800207c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	f200 80e5 	bhi.w	800217e <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6898      	ldr	r0, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f007 fe99 	bl	8009cf8 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	3301      	adds	r3, #1
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001fd8:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fdc:	f7ff fe4a 	bl	8001c74 <_ZSt4fabsf>
 8001fe0:	eef0 7a40 	vmov.f32	s15, s0
 8001fe4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001fe8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002078 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffc:	f7ff fbb0 	bl	8001760 <_ZSt5roundf>
 8002000:	eef0 7a40 	vmov.f32	s15, s0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800200e:	ee17 2a90 	vmov	r2, s15
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d113      	bne.n	8002044 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f971 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800202e:	eeb0 7b40 	vmov.f64	d7, d0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800203c:	ee17 2a90 	vmov	r2, s15
 8002040:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002042:	e0f6      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d119      	bne.n	8002080 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f959 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800205e:	eeb0 7b40 	vmov.f64	d7, d0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800206c:	ee17 2a90 	vmov	r2, s15
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002072:	e0de      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8002074:	3a83126f 	.word	0x3a83126f
 8002078:	4d64e1c0 	.word	0x4d64e1c0
 800207c:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d113      	bne.n	80020b0 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f93b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800209a:	eeb0 7b40 	vmov.f64	d7, d0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020a8:	ee17 2a90 	vmov	r2, s15
 80020ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020ae:	e0c0      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d113      	bne.n	80020e0 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f923 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020ca:	eeb0 7b40 	vmov.f64	d7, d0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020d8:	ee17 2a90 	vmov	r2, s15
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020de:	e0a8      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d113      	bne.n	8002110 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f90b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020fa:	eeb0 7b40 	vmov.f64	d7, d0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002108:	ee17 2a90 	vmov	r2, s15
 800210c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800210e:	e090      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b14      	cmp	r3, #20
 8002116:	d113      	bne.n	8002140 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f8f3 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800212a:	eeb0 7b40 	vmov.f64	d7, d0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002138:	ee17 2a90 	vmov	r2, s15
 800213c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800213e:	e078      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800217c:	e059      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2200      	movs	r2, #0
 800218e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002190:	e04f      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b04      	cmp	r3, #4
 8002198:	d105      	bne.n	80021a6 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021a4:	e045      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d105      	bne.n	80021ba <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021b8:	e03b      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d105      	bne.n	80021ce <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021cc:	e031      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d105      	bne.n	80021e2 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	659a      	str	r2, [r3, #88]	; 0x58
}
 80021e0:	e027      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b14      	cmp	r3, #20
 80021e8:	d105      	bne.n	80021f6 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2200      	movs	r2, #0
 80021f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80021f4:	e01d      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	ecbd 8b02 	vpop	{d8}
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop

08002240 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 800224c:	ed97 0a00 	vldr	s0, [r7]
 8002250:	f7ff fd10 	bl	8001c74 <_ZSt4fabsf>
 8002254:	eef0 7a40 	vmov.f32	s15, s0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800227a:	eeb0 0b47 	vmov.f64	d0, d7
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ffe5 	bl	8002266 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800229c:	eeb0 7b40 	vmov.f64	d7, d0
 80022a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	0000      	movs	r0, r0
 80022b4:	0000      	movs	r0, r0
	...

080022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	ed93 7a07 	vldr	s14, [r3, #28]
 80022ca:	edd7 7a00 	vldr	s15, [r7]
 80022ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	edd3 7a08 	vldr	s15, [r3, #32]
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 80022ea:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002308 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 80022ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 80022f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022f6:	eeb0 0a67 	vmov.f32	s0, s15
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fd28 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	704a95d1 	.word	0x704a95d1
 800230c:	40b88b2f 	.word	0x40b88b2f

08002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002322:	eeb0 0b47 	vmov.f64	d0, d7
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <MX_CRC_Init+0x54>)
 8002336:	4a14      	ldr	r2, [pc, #80]	; (8002388 <MX_CRC_Init+0x58>)
 8002338:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <MX_CRC_Init+0x54>)
 800233c:	2201      	movs	r2, #1
 800233e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_CRC_Init+0x54>)
 8002342:	2201      	movs	r2, #1
 8002344:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_CRC_Init+0x54>)
 8002348:	f248 0205 	movw	r2, #32773	; 0x8005
 800234c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <MX_CRC_Init+0x54>)
 8002350:	2208      	movs	r2, #8
 8002352:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_CRC_Init+0x54>)
 8002356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800235a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_CRC_Init+0x54>)
 800235e:	2220      	movs	r2, #32
 8002360:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_CRC_Init+0x54>)
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_CRC_Init+0x54>)
 800236a:	2201      	movs	r2, #1
 800236c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_CRC_Init+0x54>)
 8002370:	f004 fada 	bl	8006928 <HAL_CRC_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 800237a:	f002 f9fb 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	24000be8 	.word	0x24000be8
 8002388:	58024c00 	.word	0x58024c00

0800238c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_CRC_MspInit+0x3c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10e      	bne.n	80023bc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_CRC_MspInit+0x40>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a4:	4a09      	ldr	r2, [pc, #36]	; (80023cc <HAL_CRC_MspInit+0x40>)
 80023a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_CRC_MspInit+0x40>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	58024c00 	.word	0x58024c00
 80023cc:	58024400 	.word	0x58024400

080023d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <MX_DMA_Init+0x9c>)
 80023d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023dc:	4a23      	ldr	r2, [pc, #140]	; (800246c <MX_DMA_Init+0x9c>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023e6:	4b21      	ldr	r3, [pc, #132]	; (800246c <MX_DMA_Init+0x9c>)
 80023e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	200b      	movs	r0, #11
 80023fa:	f004 fa54 	bl	80068a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023fe:	200b      	movs	r0, #11
 8002400:	f004 fa6b 	bl	80068da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	200c      	movs	r0, #12
 800240a:	f004 fa4c 	bl	80068a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800240e:	200c      	movs	r0, #12
 8002410:	f004 fa63 	bl	80068da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	200d      	movs	r0, #13
 800241a:	f004 fa44 	bl	80068a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800241e:	200d      	movs	r0, #13
 8002420:	f004 fa5b 	bl	80068da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	200e      	movs	r0, #14
 800242a:	f004 fa3c 	bl	80068a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800242e:	200e      	movs	r0, #14
 8002430:	f004 fa53 	bl	80068da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	200f      	movs	r0, #15
 800243a:	f004 fa34 	bl	80068a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800243e:	200f      	movs	r0, #15
 8002440:	f004 fa4b 	bl	80068da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	2010      	movs	r0, #16
 800244a:	f004 fa2c 	bl	80068a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800244e:	2010      	movs	r0, #16
 8002450:	f004 fa43 	bl	80068da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	2011      	movs	r0, #17
 800245a:	f004 fa24 	bl	80068a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800245e:	2011      	movs	r0, #17
 8002460:	f004 fa3b 	bl	80068da <HAL_NVIC_EnableIRQ>

}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	58024400 	.word	0x58024400

08002470 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	f107 031c 	add.w	r3, r7, #28
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002486:	4b87      	ldr	r3, [pc, #540]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248c:	4a85      	ldr	r2, [pc, #532]	; (80026a4 <MX_GPIO_Init+0x234>)
 800248e:	f043 0310 	orr.w	r3, r3, #16
 8002492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002496:	4b83      	ldr	r3, [pc, #524]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a4:	4b7f      	ldr	r3, [pc, #508]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024aa:	4a7e      	ldr	r2, [pc, #504]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b4:	4b7b      	ldr	r3, [pc, #492]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024c2:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c8:	4a76      	ldr	r2, [pc, #472]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d2:	4b74      	ldr	r3, [pc, #464]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	4b70      	ldr	r3, [pc, #448]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e6:	4a6f      	ldr	r2, [pc, #444]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f0:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <MX_GPIO_Init+0x234>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	4b69      	ldr	r3, [pc, #420]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002504:	4a67      	ldr	r2, [pc, #412]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002506:	f043 0302 	orr.w	r3, r3, #2
 800250a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800251c:	4b61      	ldr	r3, [pc, #388]	; (80026a4 <MX_GPIO_Init+0x234>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002522:	4a60      	ldr	r2, [pc, #384]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800252c:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <MX_GPIO_Init+0x234>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800253a:	4b5a      	ldr	r3, [pc, #360]	; (80026a4 <MX_GPIO_Init+0x234>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002540:	4a58      	ldr	r2, [pc, #352]	; (80026a4 <MX_GPIO_Init+0x234>)
 8002542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254a:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <MX_GPIO_Init+0x234>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002558:	2200      	movs	r2, #0
 800255a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800255e:	4852      	ldr	r0, [pc, #328]	; (80026a8 <MX_GPIO_Init+0x238>)
 8002560:	f007 fbca 	bl	8009cf8 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002564:	2200      	movs	r2, #0
 8002566:	f24c 0102 	movw	r1, #49154	; 0xc002
 800256a:	4850      	ldr	r0, [pc, #320]	; (80026ac <MX_GPIO_Init+0x23c>)
 800256c:	f007 fbc4 	bl	8009cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002576:	484e      	ldr	r0, [pc, #312]	; (80026b0 <MX_GPIO_Init+0x240>)
 8002578:	f007 fbbe 	bl	8009cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800257c:	2200      	movs	r2, #0
 800257e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002582:	484c      	ldr	r0, [pc, #304]	; (80026b4 <MX_GPIO_Init+0x244>)
 8002584:	f007 fbb8 	bl	8009cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258e:	484a      	ldr	r0, [pc, #296]	; (80026b8 <MX_GPIO_Init+0x248>)
 8002590:	f007 fbb2 	bl	8009cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002594:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002598:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2301      	movs	r3, #1
 800259c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	483e      	ldr	r0, [pc, #248]	; (80026a8 <MX_GPIO_Init+0x238>)
 80025ae:	f007 f9f3 	bl	8009998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 80025b2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80025b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	4619      	mov	r1, r3
 80025c8:	4838      	ldr	r0, [pc, #224]	; (80026ac <MX_GPIO_Init+0x23c>)
 80025ca:	f007 f9e5 	bl	8009998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80025ce:	f24c 0302 	movw	r3, #49154	; 0xc002
 80025d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	4619      	mov	r1, r3
 80025e6:	4831      	ldr	r0, [pc, #196]	; (80026ac <MX_GPIO_Init+0x23c>)
 80025e8:	f007 f9d6 	bl	8009998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80025ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80025fe:	f107 031c 	add.w	r3, r7, #28
 8002602:	4619      	mov	r1, r3
 8002604:	482a      	ldr	r0, [pc, #168]	; (80026b0 <MX_GPIO_Init+0x240>)
 8002606:	f007 f9c7 	bl	8009998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800260a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800260e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002610:	2301      	movs	r3, #1
 8002612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	4619      	mov	r1, r3
 8002622:	4824      	ldr	r0, [pc, #144]	; (80026b4 <MX_GPIO_Init+0x244>)
 8002624:	f007 f9b8 	bl	8009998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	481d      	ldr	r0, [pc, #116]	; (80026b8 <MX_GPIO_Init+0x248>)
 8002642:	f007 f9a9 	bl	8009998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 8002646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800264a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800264c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	4619      	mov	r1, r3
 800265c:	4817      	ldr	r0, [pc, #92]	; (80026bc <MX_GPIO_Init+0x24c>)
 800265e:	f007 f99b 	bl	8009998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002666:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800266a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	480c      	ldr	r0, [pc, #48]	; (80026a8 <MX_GPIO_Init+0x238>)
 8002678:	f007 f98e 	bl	8009998 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	2100      	movs	r1, #0
 8002680:	2017      	movs	r0, #23
 8002682:	f004 f910 	bl	80068a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002686:	2017      	movs	r0, #23
 8002688:	f004 f927 	bl	80068da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	2028      	movs	r0, #40	; 0x28
 8002692:	f004 f908 	bl	80068a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002696:	2028      	movs	r0, #40	; 0x28
 8002698:	f004 f91f 	bl	80068da <HAL_NVIC_EnableIRQ>

}
 800269c:	bf00      	nop
 800269e:	3730      	adds	r7, #48	; 0x30
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	58024400 	.word	0x58024400
 80026a8:	58020400 	.word	0x58020400
 80026ac:	58021000 	.word	0x58021000
 80026b0:	58020c00 	.word	0x58020c00
 80026b4:	58020800 	.word	0x58020800
 80026b8:	58020000 	.word	0x58020000
 80026bc:	58021800 	.word	0x58021800

080026c0 <_Z12Insert_queueii>:

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
    if (bot == LIMIT - 1)
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <_Z12Insert_queueii+0x6c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b13      	cmp	r3, #19
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <_Z12Insert_queueii+0x20>
    {
        return false;
 80026dc:	2300      	movs	r3, #0
 80026de:	e01e      	b.n	800271e <_Z12Insert_queueii+0x5e>
    }
    else
    {
        if (first == - 1)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_Z12Insert_queueii+0x70>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	bf0c      	ite	eq
 80026ea:	2301      	moveq	r3, #1
 80026ec:	2300      	movne	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <_Z12Insert_queueii+0x3a>
        {
            first = 0;
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <_Z12Insert_queueii+0x70>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
        }
		bot++;
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <_Z12Insert_queueii+0x6c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3301      	adds	r3, #1
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <_Z12Insert_queueii+0x6c>)
 8002702:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <_Z12Insert_queueii+0x6c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	490a      	ldr	r1, [pc, #40]	; (8002734 <_Z12Insert_queueii+0x74>)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <_Z12Insert_queueii+0x6c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4908      	ldr	r1, [pc, #32]	; (8002738 <_Z12Insert_queueii+0x78>)
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 800271c:	2301      	movs	r3, #1
    }
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	24000004 	.word	0x24000004
 8002730:	24000000 	.word	0x24000000
 8002734:	24000b04 	.word	0x24000b04
 8002738:	24000b54 	.word	0x24000b54

0800273c <_Z10Call_queuev>:

int Call_queue()
    {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
    int output;
    if (first == - 1 || first > bot)
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <_Z10Call_queuev+0x94>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d005      	beq.n	8002758 <_Z10Call_queuev+0x1c>
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <_Z10Call_queuev+0x94>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <_Z10Call_queuev+0x98>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	dd01      	ble.n	800275c <_Z10Call_queuev+0x20>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <_Z10Call_queuev+0x22>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d026      	beq.n	80027b0 <_Z10Call_queuev+0x74>
    {
        printf("Don't have stack in queue \n");
 8002762:	481d      	ldr	r0, [pc, #116]	; (80027d8 <_Z10Call_queuev+0x9c>)
 8002764:	f00f fc6c 	bl	8012040 <puts>
        for (int num = 0; num <= bot+1; num++)
 8002768:	2300      	movs	r3, #0
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <_Z10Call_queuev+0x98>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	bfd4      	ite	le
 8002778:	2301      	movle	r3, #1
 800277a:	2300      	movgt	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <_Z10Call_queuev+0x58>
        {
        	queue[num] = 0;
 8002782:	4a16      	ldr	r2, [pc, #88]	; (80027dc <_Z10Call_queuev+0xa0>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2100      	movs	r1, #0
 8002788:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int num = 0; num <= bot+1; num++)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	e7eb      	b.n	800276c <_Z10Call_queuev+0x30>
        }
        first = -1;
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <_Z10Call_queuev+0x94>)
 8002796:	f04f 32ff 	mov.w	r2, #4294967295
 800279a:	601a      	str	r2, [r3, #0]
        bot = -1;
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <_Z10Call_queuev+0x98>)
 800279e:	f04f 32ff 	mov.w	r2, #4294967295
 80027a2:	601a      	str	r2, [r3, #0]
        printf("Clear queue \n");
 80027a4:	480e      	ldr	r0, [pc, #56]	; (80027e0 <_Z10Call_queuev+0xa4>)
 80027a6:	f00f fc4b 	bl	8012040 <puts>
        output = 255;
 80027aa:	23ff      	movs	r3, #255	; 0xff
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	e00a      	b.n	80027c6 <_Z10Call_queuev+0x8a>
    }
    else
    {
    	output = queue[first];
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <_Z10Call_queuev+0x94>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a09      	ldr	r2, [pc, #36]	; (80027dc <_Z10Call_queuev+0xa0>)
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	607b      	str	r3, [r7, #4]
        first++;
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <_Z10Call_queuev+0x94>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <_Z10Call_queuev+0x94>)
 80027c4:	6013      	str	r3, [r2, #0]
    }
    return output;
 80027c6:	687b      	ldr	r3, [r7, #4]

}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	24000000 	.word	0x24000000
 80027d4:	24000004 	.word	0x24000004
 80027d8:	08014060 	.word	0x08014060
 80027dc:	24000b04 	.word	0x24000b04
 80027e0:	0801407c 	.word	0x0801407c

080027e4 <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4)/1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y, float gripper_linear_z, float gripper_angular_yaw)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b092      	sub	sp, #72	; 0x48
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80027ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80027f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80027f6:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x/1000.0;
 80027fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80027fe:	eddf 6a76 	vldr	s13, [pc, #472]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 8002802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002806:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y/1000.0;
 800280a:	ed97 7a02 	vldr	s14, [r7, #8]
 800280e:	eddf 6a72 	vldr	s13, [pc, #456]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 8002812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002816:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z/1000.0;
 800281a:	ed97 7a01 	vldr	s14, [r7, #4]
 800281e:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 8002822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002826:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw/1000.0;
 800282a:	ed97 7a00 	vldr	s14, [r7]
 800282e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 8002832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002836:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x*x)+(y*y)-(L12*L12)-(L3*L3)) / (2*L12*L3);
 800283a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800283e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002842:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002846:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800284a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284e:	4b63      	ldr	r3, [pc, #396]	; (80029dc <_Z6fcb_IKffff+0x1f8>)
 8002850:	edd3 6a00 	vldr	s13, [r3]
 8002854:	4b61      	ldr	r3, [pc, #388]	; (80029dc <_Z6fcb_IKffff+0x1f8>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002862:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <_Z6fcb_IKffff+0x1fc>)
 8002864:	edd3 6a00 	vldr	s13, [r3]
 8002868:	4b5d      	ldr	r3, [pc, #372]	; (80029e0 <_Z6fcb_IKffff+0x1fc>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002872:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002876:	4b59      	ldr	r3, [pc, #356]	; (80029dc <_Z6fcb_IKffff+0x1f8>)
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002880:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <_Z6fcb_IKffff+0x1fc>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800288e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1-(C3*C3));
 8002892:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002896:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800289a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800289e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	f7fe f842 	bl	800092e <_ZSt4sqrtf>
 80028aa:	eef0 7a40 	vmov.f32	s15, s0
 80028ae:	eef1 7a67 	vneg.f32	s15, s15
 80028b2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3,C3);
 80028b6:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80028ba:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80028be:	f7fe f822 	bl	8000906 <_ZSt5atan2ff>
 80028c2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3*S3;
 80028c6:	4b46      	ldr	r3, [pc, #280]	; (80029e0 <_Z6fcb_IKffff+0x1fc>)
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80028d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3*C3);
 80028d8:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <_Z6fcb_IKffff+0x1fc>)
 80028da:	ed93 7a00 	vldr	s14, [r3]
 80028de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e6:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <_Z6fcb_IKffff+0x1f8>)
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3*x) + (L123C3*y);
 80028f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028f8:	eeb1 7a67 	vneg.f32	s14, s15
 80028fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002904:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002908:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800290c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002914:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3*y) + (L123C3*x);
 8002918:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800291c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002924:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002928:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800292c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002934:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1,C1);
 8002938:	edd7 0a07 	vldr	s1, [r7, #28]
 800293c:	ed97 0a08 	vldr	s0, [r7, #32]
 8002940:	f7fd ffe1 	bl	8000906 <_ZSt5atan2ff>
 8002944:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002948:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800294c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002950:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002954:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295c:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002960:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <_Z6fcb_IKffff+0x200>)
 8002962:	ed93 7a00 	vldr	s14, [r3]
 8002966:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800296a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296e:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <_Z6fcb_IKffff+0x204>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002978:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <_Z6fcb_IKffff+0x208>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002982:	edc7 7a04 	vstr	s15, [r7, #16]
//	Planning_q1 = q1;
//	Planning_q2 = q2;
//	Planning_q3 = q3;
//	Planning_q4 = q4;

	Planning_q1 = q1*1000.0;
 8002986:	edd7 7a06 	vldr	s15, [r7, #24]
 800298a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 800298e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <_Z6fcb_IKffff+0x20c>)
 8002994:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2*1000.0;
 8002998:	edd7 7a04 	vldr	s15, [r7, #16]
 800299c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 80029a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <_Z6fcb_IKffff+0x210>)
 80029a6:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3*1000.0;
 80029aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 80029b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <_Z6fcb_IKffff+0x214>)
 80029b8:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4*1000.0;
 80029bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80029c0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029d8 <_Z6fcb_IKffff+0x1f4>
 80029c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <_Z6fcb_IKffff+0x218>)
 80029ca:	edc3 7a00 	vstr	s15, [r3]

}
 80029ce:	bf00      	nop
 80029d0:	3748      	adds	r7, #72	; 0x48
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	447a0000 	.word	0x447a0000
 80029dc:	24000210 	.word	0x24000210
 80029e0:	2400020c 	.word	0x2400020c
 80029e4:	2400021c 	.word	0x2400021c
 80029e8:	24000218 	.word	0x24000218
 80029ec:	24000214 	.word	0x24000214
 80029f0:	24000bb8 	.word	0x24000bb8
 80029f4:	24000bbc 	.word	0x24000bbc
 80029f8:	24000bc0 	.word	0x24000bc0
 80029fc:	24000bc4 	.word	0x24000bc4

08002a00 <_Z20Update_State_Machinev>:
float offset_x_new = 0;
float offset_y_new = 0;
int indexy;
float pos_x,pos_y;
void Update_State_Machine()
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	ed2d 8b02 	vpush	{d8}
 8002a06:	af00      	add	r7, sp, #0

    switch (control_state)
 8002a08:	4bcd      	ldr	r3, [pc, #820]	; (8002d40 <_Z20Update_State_Machinev+0x340>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3b29      	subs	r3, #41	; 0x29
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	f200 82e1 	bhi.w	8002fd8 <_Z20Update_State_Machinev+0x5d8>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <_Z20Update_State_Machinev+0x1c>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a5d 	.word	0x08002a5d
 8002a20:	08002c83 	.word	0x08002c83
 8002a24:	08002cd3 	.word	0x08002cd3
 8002a28:	08002fd9 	.word	0x08002fd9
 8002a2c:	08002fd9 	.word	0x08002fd9
 8002a30:	08002fd9 	.word	0x08002fd9
 8002a34:	08002fd9 	.word	0x08002fd9
 8002a38:	08002fd9 	.word	0x08002fd9
 8002a3c:	08002fd9 	.word	0x08002fd9
 8002a40:	08002fd9 	.word	0x08002fd9
 8002a44:	08002fe7 	.word	0x08002fe7
 8002a48:	08002db1 	.word	0x08002db1
 8002a4c:	08002fe7 	.word	0x08002fe7
 8002a50:	08002eaf 	.word	0x08002eaf
 8002a54:	08002fe7 	.word	0x08002fe7
 8002a58:	08002f65 	.word	0x08002f65
    {
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002a5c:	f7ff fe6e 	bl	800273c <_Z10Call_queuev>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4ab8      	ldr	r2, [pc, #736]	; (8002d44 <_Z20Update_State_Machinev+0x344>)
 8002a64:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002a66:	4bb7      	ldr	r3, [pc, #732]	; (8002d44 <_Z20Update_State_Machinev+0x344>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2bff      	cmp	r3, #255	; 0xff
 8002a6c:	f000 8105 	beq.w	8002c7a <_Z20Update_State_Machinev+0x27a>
			{
				test_value_r = radias[indexy];
 8002a70:	4bb4      	ldr	r3, [pc, #720]	; (8002d44 <_Z20Update_State_Machinev+0x344>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4ab4      	ldr	r2, [pc, #720]	; (8002d48 <_Z20Update_State_Machinev+0x348>)
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a82:	ee17 2a90 	vmov	r2, s15
 8002a86:	4bb1      	ldr	r3, [pc, #708]	; (8002d4c <_Z20Update_State_Machinev+0x34c>)
 8002a88:	601a      	str	r2, [r3, #0]
				test_value_theta = theta[indexy];
 8002a8a:	4bae      	ldr	r3, [pc, #696]	; (8002d44 <_Z20Update_State_Machinev+0x344>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4ab0      	ldr	r2, [pc, #704]	; (8002d50 <_Z20Update_State_Machinev+0x350>)
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a9c:	ee17 2a90 	vmov	r2, s15
 8002aa0:	4bac      	ldr	r3, [pc, #688]	; (8002d54 <_Z20Update_State_Machinev+0x354>)
 8002aa2:	601a      	str	r2, [r3, #0]
				offset_x_new = ((0.16075 * (test_value_r*cos(test_value_theta/1000.0))) + 0.02289)/10.0 ;
 8002aa4:	4ba9      	ldr	r3, [pc, #676]	; (8002d4c <_Z20Update_State_Machinev+0x34c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002ab0:	4ba8      	ldr	r3, [pc, #672]	; (8002d54 <_Z20Update_State_Machinev+0x354>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002abc:	ed9f 5b9a 	vldr	d5, [pc, #616]	; 8002d28 <_Z20Update_State_Machinev+0x328>
 8002ac0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ac4:	eeb0 0b46 	vmov.f64	d0, d6
 8002ac8:	f00d fd9a 	bl	8010600 <cos>
 8002acc:	eeb0 7b40 	vmov.f64	d7, d0
 8002ad0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002ad4:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8002d30 <_Z20Update_State_Machinev+0x330>
 8002ad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002adc:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8002d38 <_Z20Update_State_Machinev+0x338>
 8002ae0:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002ae4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002ae8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002aec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002af0:	4b99      	ldr	r3, [pc, #612]	; (8002d58 <_Z20Update_State_Machinev+0x358>)
 8002af2:	edc3 7a00 	vstr	s15, [r3]
//				offset_y_new = ((0.29560 * (test_value_r*sin(test_value_theta/1000.0))) + 1.05911)/10.0 ;
				pos_x = (test_value_r*cos(test_value_theta/1000.0)) + offset_x + offset_x_new;
 8002af6:	4b95      	ldr	r3, [pc, #596]	; (8002d4c <_Z20Update_State_Machinev+0x34c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b02:	4b94      	ldr	r3, [pc, #592]	; (8002d54 <_Z20Update_State_Machinev+0x354>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b0e:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8002d28 <_Z20Update_State_Machinev+0x328>
 8002b12:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b16:	eeb0 0b46 	vmov.f64	d0, d6
 8002b1a:	f00d fd71 	bl	8010600 <cos>
 8002b1e:	eeb0 7b40 	vmov.f64	d7, d0
 8002b22:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002b26:	4b8d      	ldr	r3, [pc, #564]	; (8002d5c <_Z20Update_State_Machinev+0x35c>)
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b30:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b34:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <_Z20Update_State_Machinev+0x358>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b46:	4b86      	ldr	r3, [pc, #536]	; (8002d60 <_Z20Update_State_Machinev+0x360>)
 8002b48:	edc3 7a00 	vstr	s15, [r3]
				pos_y = (test_value_r*sin(test_value_theta/1000.0)) + offset_y + offset_y_new;
 8002b4c:	4b7f      	ldr	r3, [pc, #508]	; (8002d4c <_Z20Update_State_Machinev+0x34c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	ee07 3a90 	vmov	s15, r3
 8002b54:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b58:	4b7e      	ldr	r3, [pc, #504]	; (8002d54 <_Z20Update_State_Machinev+0x354>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b64:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8002d28 <_Z20Update_State_Machinev+0x328>
 8002b68:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b6c:	eeb0 0b46 	vmov.f64	d0, d6
 8002b70:	f00d fd8e 	bl	8010690 <sin>
 8002b74:	eeb0 7b40 	vmov.f64	d7, d0
 8002b78:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002b7c:	4b79      	ldr	r3, [pc, #484]	; (8002d64 <_Z20Update_State_Machinev+0x364>)
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b86:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b8a:	4b77      	ldr	r3, [pc, #476]	; (8002d68 <_Z20Update_State_Machinev+0x368>)
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b9c:	4b73      	ldr	r3, [pc, #460]	; (8002d6c <_Z20Update_State_Machinev+0x36c>)
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
				fcb_IK(pos_x, pos_y, 0, 0);
 8002ba2:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <_Z20Update_State_Machinev+0x360>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	4b70      	ldr	r3, [pc, #448]	; (8002d6c <_Z20Update_State_Machinev+0x36c>)
 8002baa:	ed93 7a00 	vldr	s14, [r3]
 8002bae:	eddf 1a70 	vldr	s3, [pc, #448]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002bb2:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002bb6:	eef0 0a47 	vmov.f32	s1, s14
 8002bba:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbe:	f7ff fe11 	bl	80027e4 <_Z6fcb_IKffff>
				Max_Time = 5;
 8002bc2:	4b6c      	ldr	r3, [pc, #432]	; (8002d74 <_Z20Update_State_Machinev+0x374>)
 8002bc4:	4a6c      	ldr	r2, [pc, #432]	; (8002d78 <_Z20Update_State_Machinev+0x378>)
 8002bc6:	601a      	str	r2, [r3, #0]
				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002bc8:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <_Z20Update_State_Machinev+0x374>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	4b6b      	ldr	r3, [pc, #428]	; (8002d7c <_Z20Update_State_Machinev+0x37c>)
 8002bd0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	; (8002d80 <_Z20Update_State_Machinev+0x380>)
 8002bd6:	edd3 6a00 	vldr	s13, [r3]
 8002bda:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002bde:	eddf 2a64 	vldr	s5, [pc, #400]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002be2:	ed9f 2a63 	vldr	s4, [pc, #396]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002be6:	eddf 1a62 	vldr	s3, [pc, #392]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002bea:	eeb0 1a66 	vmov.f32	s2, s13
 8002bee:	eef0 0a47 	vmov.f32	s1, s14
 8002bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf6:	4861      	ldr	r0, [pc, #388]	; (8002d7c <_Z20Update_State_Machinev+0x37c>)
 8002bf8:	f7fe f850 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002bfc:	4b5d      	ldr	r3, [pc, #372]	; (8002d74 <_Z20Update_State_Machinev+0x374>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <_Z20Update_State_Machinev+0x384>)
 8002c04:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c08:	4b5f      	ldr	r3, [pc, #380]	; (8002d88 <_Z20Update_State_Machinev+0x388>)
 8002c0a:	edd3 6a00 	vldr	s13, [r3]
 8002c0e:	ed9f 3a58 	vldr	s6, [pc, #352]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002c12:	eddf 2a57 	vldr	s5, [pc, #348]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002c16:	ed9f 2a56 	vldr	s4, [pc, #344]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002c1a:	eddf 1a55 	vldr	s3, [pc, #340]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002c1e:	eeb0 1a66 	vmov.f32	s2, s13
 8002c22:	eef0 0a47 	vmov.f32	s1, s14
 8002c26:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2a:	4856      	ldr	r0, [pc, #344]	; (8002d84 <_Z20Update_State_Machinev+0x384>)
 8002c2c:	f7fe f836 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <_Z20Update_State_Machinev+0x374>)
 8002c32:	edd3 7a00 	vldr	s15, [r3]
 8002c36:	4b55      	ldr	r3, [pc, #340]	; (8002d8c <_Z20Update_State_Machinev+0x38c>)
 8002c38:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c3c:	4b54      	ldr	r3, [pc, #336]	; (8002d90 <_Z20Update_State_Machinev+0x390>)
 8002c3e:	edd3 6a00 	vldr	s13, [r3]
 8002c42:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002c46:	eddf 2a4a 	vldr	s5, [pc, #296]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002c4a:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002c4e:	eddf 1a48 	vldr	s3, [pc, #288]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002c52:	eeb0 1a66 	vmov.f32	s2, s13
 8002c56:	eef0 0a47 	vmov.f32	s1, s14
 8002c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c5e:	484b      	ldr	r0, [pc, #300]	; (8002d8c <_Z20Update_State_Machinev+0x38c>)
 8002c60:	f7fe f81c 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002c64:	4b4b      	ldr	r3, [pc, #300]	; (8002d94 <_Z20Update_State_Machinev+0x394>)
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002c6c:	484a      	ldr	r0, [pc, #296]	; (8002d98 <_Z20Update_State_Machinev+0x398>)
 8002c6e:	f009 fd43 	bl	800c6f8 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002c72:	4b33      	ldr	r3, [pc, #204]	; (8002d40 <_Z20Update_State_Machinev+0x340>)
 8002c74:	2234      	movs	r2, #52	; 0x34
 8002c76:	701a      	strb	r2, [r3, #0]
			}

//		Planning_q1
//		Planning_q3

		break;
 8002c78:	e1b6      	b.n	8002fe8 <_Z20Update_State_Machinev+0x5e8>
				control_state = 0;
 8002c7a:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <_Z20Update_State_Machinev+0x340>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
		break;
 8002c80:	e1b2      	b.n	8002fe8 <_Z20Update_State_Machinev+0x5e8>

	case 42:
		Max_Time = 6;
 8002c82:	4b3c      	ldr	r3, [pc, #240]	; (8002d74 <_Z20Update_State_Machinev+0x374>)
 8002c84:	4a45      	ldr	r2, [pc, #276]	; (8002d9c <_Z20Update_State_Machinev+0x39c>)
 8002c86:	601a      	str	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder, -10200.0, 0.0, 0.0, 0.0, 0.0);
 8002c88:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <_Z20Update_State_Machinev+0x374>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <_Z20Update_State_Machinev+0x3a0>)
 8002c90:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c94:	ed9f 3a36 	vldr	s6, [pc, #216]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002c98:	eddf 2a35 	vldr	s5, [pc, #212]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002c9c:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002ca0:	eddf 1a33 	vldr	s3, [pc, #204]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002ca4:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8002da4 <_Z20Update_State_Machinev+0x3a4>
 8002ca8:	eef0 0a47 	vmov.f32	s1, s14
 8002cac:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb0:	483b      	ldr	r0, [pc, #236]	; (8002da0 <_Z20Update_State_Machinev+0x3a0>)
 8002cb2:	f7fd fff3 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		t = 0;
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <_Z20Update_State_Machinev+0x394>)
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002cbe:	4836      	ldr	r0, [pc, #216]	; (8002d98 <_Z20Update_State_Machinev+0x398>)
 8002cc0:	f009 fd1a 	bl	800c6f8 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <_Z20Update_State_Machinev+0x340>)
 8002cc6:	2236      	movs	r2, #54	; 0x36
 8002cc8:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002cca:	4b37      	ldr	r3, [pc, #220]	; (8002da8 <_Z20Update_State_Machinev+0x3a8>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
		break;
 8002cd0:	e18a      	b.n	8002fe8 <_Z20Update_State_Machinev+0x5e8>

	case 43:
		Max_Time = 6;
 8002cd2:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <_Z20Update_State_Machinev+0x374>)
 8002cd4:	4a31      	ldr	r2, [pc, #196]	; (8002d9c <_Z20Update_State_Machinev+0x39c>)
 8002cd6:	601a      	str	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder, -200.0, 0.0, 0.0, 0.0, 0.0);
 8002cd8:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <_Z20Update_State_Machinev+0x374>)
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <_Z20Update_State_Machinev+0x3a0>)
 8002ce0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002ce4:	ed9f 3a22 	vldr	s6, [pc, #136]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002ce8:	eddf 2a21 	vldr	s5, [pc, #132]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002cec:	ed9f 2a20 	vldr	s4, [pc, #128]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002cf0:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8002d70 <_Z20Update_State_Machinev+0x370>
 8002cf4:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8002dac <_Z20Update_State_Machinev+0x3ac>
 8002cf8:	eef0 0a47 	vmov.f32	s1, s14
 8002cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002d00:	4827      	ldr	r0, [pc, #156]	; (8002da0 <_Z20Update_State_Machinev+0x3a0>)
 8002d02:	f7fd ffcb 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		t = 0;
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <_Z20Update_State_Machinev+0x394>)
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002d0e:	4822      	ldr	r0, [pc, #136]	; (8002d98 <_Z20Update_State_Machinev+0x398>)
 8002d10:	f009 fcf2 	bl	800c6f8 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <_Z20Update_State_Machinev+0x340>)
 8002d16:	2238      	movs	r2, #56	; 0x38
 8002d18:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002d1a:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <_Z20Update_State_Machinev+0x3a8>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
		break;
 8002d20:	e162      	b.n	8002fe8 <_Z20Update_State_Machinev+0x5e8>
 8002d22:	bf00      	nop
 8002d24:	f3af 8000 	nop.w
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	408f4000 	.word	0x408f4000
 8002d30:	bc6a7efa 	.word	0xbc6a7efa
 8002d34:	3fc49374 	.word	0x3fc49374
 8002d38:	e59f2baa 	.word	0xe59f2baa
 8002d3c:	3f977079 	.word	0x3f977079
 8002d40:	24000bac 	.word	0x24000bac
 8002d44:	24000bd0 	.word	0x24000bd0
 8002d48:	24000108 	.word	0x24000108
 8002d4c:	24000ba4 	.word	0x24000ba4
 8002d50:	24000008 	.word	0x24000008
 8002d54:	24000ba8 	.word	0x24000ba8
 8002d58:	24000bc8 	.word	0x24000bc8
 8002d5c:	24000220 	.word	0x24000220
 8002d60:	24000bd4 	.word	0x24000bd4
 8002d64:	24000224 	.word	0x24000224
 8002d68:	24000bcc 	.word	0x24000bcc
 8002d6c:	24000bd8 	.word	0x24000bd8
 8002d70:	00000000 	.word	0x00000000
 8002d74:	24000ab0 	.word	0x24000ab0
 8002d78:	40a00000 	.word	0x40a00000
 8002d7c:	24000534 	.word	0x24000534
 8002d80:	24000bb8 	.word	0x24000bb8
 8002d84:	240006fc 	.word	0x240006fc
 8002d88:	24000bc0 	.word	0x24000bc0
 8002d8c:	240007e0 	.word	0x240007e0
 8002d90:	24000bc4 	.word	0x24000bc4
 8002d94:	24000bb4 	.word	0x24000bb4
 8002d98:	24000f40 	.word	0x24000f40
 8002d9c:	40c00000 	.word	0x40c00000
 8002da0:	24000618 	.word	0x24000618
 8002da4:	c61f6000 	.word	0xc61f6000
 8002da8:	24000aac 	.word	0x24000aac
 8002dac:	c3480000 	.word	0xc3480000

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002db0:	4890      	ldr	r0, [pc, #576]	; (8002ff4 <_Z20Update_State_Machinev+0x5f4>)
 8002db2:	f009 fd19 	bl	800c7e8 <HAL_TIM_Base_Stop_IT>
		fcb_joint1.Goal_Velocity = 0;
 8002db6:	4b90      	ldr	r3, [pc, #576]	; (8002ff8 <_Z20Update_State_Machinev+0x5f8>)
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 8002dbe:	4b8f      	ldr	r3, [pc, #572]	; (8002ffc <_Z20Update_State_Machinev+0x5fc>)
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8002dc6:	4b8e      	ldr	r3, [pc, #568]	; (8003000 <_Z20Update_State_Machinev+0x600>)
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002dce:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8003004 <_Z20Update_State_Machinev+0x604>
 8002dd2:	488d      	ldr	r0, [pc, #564]	; (8003008 <_Z20Update_State_Machinev+0x608>)
 8002dd4:	f7ff fa70 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002dd8:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8003004 <_Z20Update_State_Machinev+0x604>
 8002ddc:	488b      	ldr	r0, [pc, #556]	; (800300c <_Z20Update_State_Machinev+0x60c>)
 8002dde:	f7ff fa6b 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002de2:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8003004 <_Z20Update_State_Machinev+0x604>
 8002de6:	488a      	ldr	r0, [pc, #552]	; (8003010 <_Z20Update_State_Machinev+0x610>)
 8002de8:	f7ff fa66 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.Encoder;
 8002dec:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <_Z20Update_State_Machinev+0x5f8>)
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	4a81      	ldr	r2, [pc, #516]	; (8002ff8 <_Z20Update_State_Machinev+0x5f8>)
 8002df2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.Encoder;
 8002df6:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <_Z20Update_State_Machinev+0x5fc>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	4a80      	ldr	r2, [pc, #512]	; (8002ffc <_Z20Update_State_Machinev+0x5fc>)
 8002dfc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.Encoder;
 8002e00:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <_Z20Update_State_Machinev+0x600>)
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	4a7e      	ldr	r2, [pc, #504]	; (8003000 <_Z20Update_State_Machinev+0x600>)
 8002e06:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.C1 = 0;
 8002e0a:	4b7b      	ldr	r3, [pc, #492]	; (8002ff8 <_Z20Update_State_Machinev+0x5f8>)
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 8002e14:	4b7a      	ldr	r3, [pc, #488]	; (8003000 <_Z20Update_State_Machinev+0x600>)
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 8002e1e:	4b76      	ldr	r3, [pc, #472]	; (8002ff8 <_Z20Update_State_Machinev+0x5f8>)
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 8002e28:	4b75      	ldr	r3, [pc, #468]	; (8003000 <_Z20Update_State_Machinev+0x600>)
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 8002e32:	4b71      	ldr	r3, [pc, #452]	; (8002ff8 <_Z20Update_State_Machinev+0x5f8>)
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 8002e3c:	4b70      	ldr	r3, [pc, #448]	; (8003000 <_Z20Update_State_Machinev+0x600>)
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 8002e46:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <_Z20Update_State_Machinev+0x5f8>)
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 8002e50:	4b6b      	ldr	r3, [pc, #428]	; (8003000 <_Z20Update_State_Machinev+0x600>)
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8002e5a:	4b67      	ldr	r3, [pc, #412]	; (8002ff8 <_Z20Update_State_Machinev+0x5f8>)
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8002e64:	4b66      	ldr	r3, [pc, #408]	; (8003000 <_Z20Update_State_Machinev+0x600>)
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 8002e6e:	4b63      	ldr	r3, [pc, #396]	; (8002ffc <_Z20Update_State_Machinev+0x5fc>)
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8002e78:	4b60      	ldr	r3, [pc, #384]	; (8002ffc <_Z20Update_State_Machinev+0x5fc>)
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 8002e82:	4b5e      	ldr	r3, [pc, #376]	; (8002ffc <_Z20Update_State_Machinev+0x5fc>)
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 8002e8c:	4b5b      	ldr	r3, [pc, #364]	; (8002ffc <_Z20Update_State_Machinev+0x5fc>)
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 8002e96:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <_Z20Update_State_Machinev+0x5fc>)
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 8002ea0:	4b5c      	ldr	r3, [pc, #368]	; (8003014 <_Z20Update_State_Machinev+0x614>)
 8002ea2:	222a      	movs	r2, #42	; 0x2a
 8002ea4:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002ea6:	4b5c      	ldr	r3, [pc, #368]	; (8003018 <_Z20Update_State_Machinev+0x618>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
		break;
 8002eac:	e09c      	b.n	8002fe8 <_Z20Update_State_Machinev+0x5e8>

//		State_FIN = true;
		break;

	case 54:
		fcb_joint2.Goal_Velocity = 0;
 8002eae:	4b5b      	ldr	r3, [pc, #364]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8002eb6:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8003004 <_Z20Update_State_Machinev+0x604>
 8002eba:	4859      	ldr	r0, [pc, #356]	; (8003020 <_Z20Update_State_Machinev+0x620>)
 8002ebc:	f7ff f9fc 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8002ec0:	4b56      	ldr	r3, [pc, #344]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	4a55      	ldr	r2, [pc, #340]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002ec6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		HAL_TIM_Base_Stop_IT(&htim14);
 8002eca:	484a      	ldr	r0, [pc, #296]	; (8002ff4 <_Z20Update_State_Machinev+0x5f4>)
 8002ecc:	f009 fc8c 	bl	800c7e8 <HAL_TIM_Base_Stop_IT>
		if (Gripper_State[first-1] == 1)
 8002ed0:	4b54      	ldr	r3, [pc, #336]	; (8003024 <_Z20Update_State_Machinev+0x624>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	4a54      	ldr	r2, [pc, #336]	; (8003028 <_Z20Update_State_Machinev+0x628>)
 8002ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <_Z20Update_State_Machinev+0x4f2>
		{
			gripper.GripperClose();
 8002eea:	4850      	ldr	r0, [pc, #320]	; (800302c <_Z20Update_State_Machinev+0x62c>)
 8002eec:	f7fe fe7a 	bl	8001be4 <_ZN10ServoMotor12GripperCloseEv>
 8002ef0:	e00f      	b.n	8002f12 <_Z20Update_State_Machinev+0x512>
		}
		else if (Gripper_State[first-1] == 2)
 8002ef2:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <_Z20Update_State_Machinev+0x624>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	4a4b      	ldr	r2, [pc, #300]	; (8003028 <_Z20Update_State_Machinev+0x628>)
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	bf0c      	ite	eq
 8002f02:	2301      	moveq	r3, #1
 8002f04:	2300      	movne	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <_Z20Update_State_Machinev+0x512>
		{
			gripper.GripperOpen();
 8002f0c:	4847      	ldr	r0, [pc, #284]	; (800302c <_Z20Update_State_Machinev+0x62c>)
 8002f0e:	f7fe fe7f 	bl	8001c10 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 8002f12:	4b42      	ldr	r3, [pc, #264]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8002f26:	4b3d      	ldr	r3, [pc, #244]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8002f30:	4b3a      	ldr	r3, [pc, #232]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8002f3a:	4b38      	ldr	r3, [pc, #224]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8002f44:	4b35      	ldr	r3, [pc, #212]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8002f4e:	4b33      	ldr	r3, [pc, #204]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <_Z20Update_State_Machinev+0x614>)
 8002f58:	222b      	movs	r2, #43	; 0x2b
 8002f5a:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f5c:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <_Z20Update_State_Machinev+0x618>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
		break;
 8002f62:	e041      	b.n	8002fe8 <_Z20Update_State_Machinev+0x5e8>
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 8002f64:	4b2d      	ldr	r3, [pc, #180]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8002f6c:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8003004 <_Z20Update_State_Machinev+0x604>
 8002f70:	482b      	ldr	r0, [pc, #172]	; (8003020 <_Z20Update_State_Machinev+0x620>)
 8002f72:	f7ff f9a1 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8002f76:	4b29      	ldr	r3, [pc, #164]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	4a28      	ldr	r2, [pc, #160]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f7c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		HAL_TIM_Base_Stop_IT(&htim14);
 8002f80:	481c      	ldr	r0, [pc, #112]	; (8002ff4 <_Z20Update_State_Machinev+0x5f4>)
 8002f82:	f009 fc31 	bl	800c7e8 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.C0 = 0;
 8002f86:	4b25      	ldr	r3, [pc, #148]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8002f90:	4b22      	ldr	r3, [pc, #136]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8002fb8:	4b18      	ldr	r3, [pc, #96]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <_Z20Update_State_Machinev+0x61c>)
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <_Z20Update_State_Machinev+0x614>)
 8002fcc:	2229      	movs	r2, #41	; 0x29
 8002fce:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002fd0:	4b11      	ldr	r3, [pc, #68]	; (8003018 <_Z20Update_State_Machinev+0x618>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
		break;
 8002fd6:	e007      	b.n	8002fe8 <_Z20Update_State_Machinev+0x5e8>

	default:
		control_state = 0;
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <_Z20Update_State_Machinev+0x614>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <_Z20Update_State_Machinev+0x618>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
		break;
 8002fe4:	e000      	b.n	8002fe8 <_Z20Update_State_Machinev+0x5e8>
		break;
 8002fe6:	bf00      	nop
    }
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	ecbd 8b02 	vpop	{d8}
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	24000f40 	.word	0x24000f40
 8002ff8:	24000534 	.word	0x24000534
 8002ffc:	240007e0 	.word	0x240007e0
 8003000:	240006fc 	.word	0x240006fc
 8003004:	00000000 	.word	0x00000000
 8003008:	24000494 	.word	0x24000494
 800300c:	2400050c 	.word	0x2400050c
 8003010:	240004e4 	.word	0x240004e4
 8003014:	24000bac 	.word	0x24000bac
 8003018:	24000aac 	.word	0x24000aac
 800301c:	24000618 	.word	0x24000618
 8003020:	240004bc 	.word	0x240004bc
 8003024:	24000000 	.word	0x24000000
 8003028:	24000b54 	.word	0x24000b54
 800302c:	24000a8c 	.word	0x24000a8c

08003030 <HAL_UARTEx_RxEventCallback>:

#endif



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a8f      	ldr	r2, [pc, #572]	; (800327c <HAL_UARTEx_RxEventCallback+0x24c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	f040 8188 	bne.w	8003356 <HAL_UARTEx_RxEventCallback+0x326>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8003046:	4a8e      	ldr	r2, [pc, #568]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 8003048:	4b8e      	ldr	r3, [pc, #568]	; (8003284 <HAL_UARTEx_RxEventCallback+0x254>)
 800304a:	4614      	mov	r4, r2
 800304c:	461d      	mov	r5, r3
 800304e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003052:	682b      	ldr	r3, [r5, #0]
 8003054:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8003056:	2214      	movs	r2, #20
 8003058:	2100      	movs	r1, #0
 800305a:	488a      	ldr	r0, [pc, #552]	; (8003284 <HAL_UARTEx_RxEventCallback+0x254>)
 800305c:	f00e fb38 	bl	80116d0 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8003060:	887b      	ldrh	r3, [r7, #2]
 8003062:	2b02      	cmp	r3, #2
 8003064:	f240 8166 	bls.w	8003334 <HAL_UARTEx_RxEventCallback+0x304>
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	2b14      	cmp	r3, #20
 800306c:	f200 8162 	bhi.w	8003334 <HAL_UARTEx_RxEventCallback+0x304>
			cmdDataSize = Size - 2;	// Calculate data length.
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	3b02      	subs	r3, #2
 8003074:	b29a      	uxth	r2, r3
 8003076:	4b84      	ldr	r3, [pc, #528]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 8003078:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 800307a:	4b83      	ldr	r3, [pc, #524]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	497f      	ldr	r1, [pc, #508]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 8003084:	4881      	ldr	r0, [pc, #516]	; (800328c <HAL_UARTEx_RxEventCallback+0x25c>)
 8003086:	f003 fcb3 	bl	80069f0 <HAL_CRC_Calculate>
 800308a:	4603      	mov	r3, r0
 800308c:	b29a      	uxth	r2, r3
 800308e:	4b80      	ldr	r3, [pc, #512]	; (8003290 <HAL_UARTEx_RxEventCallback+0x260>)
 8003090:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8003092:	4b7d      	ldr	r3, [pc, #500]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	4b79      	ldr	r3, [pc, #484]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 80030a0:	b21a      	sxth	r2, r3
 80030a2:	4b79      	ldr	r3, [pc, #484]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	4975      	ldr	r1, [pc, #468]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 80030ac:	5ccb      	ldrb	r3, [r1, r3]
 80030ae:	b21b      	sxth	r3, r3
 80030b0:	4313      	orrs	r3, r2
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80030b6:	4b77      	ldr	r3, [pc, #476]	; (8003294 <HAL_UARTEx_RxEventCallback+0x264>)
 80030b8:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80030ba:	4b75      	ldr	r3, [pc, #468]	; (8003290 <HAL_UARTEx_RxEventCallback+0x260>)
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	b29a      	uxth	r2, r3
 80030c0:	4b74      	ldr	r3, [pc, #464]	; (8003294 <HAL_UARTEx_RxEventCallback+0x264>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	429a      	cmp	r2, r3
 80030c8:	bf0c      	ite	eq
 80030ca:	2301      	moveq	r3, #1
 80030cc:	2300      	movne	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8151 	beq.w	8003378 <HAL_UARTEx_RxEventCallback+0x348>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80030d6:	2201      	movs	r2, #1
 80030d8:	2102      	movs	r1, #2
 80030da:	486f      	ldr	r0, [pc, #444]	; (8003298 <HAL_UARTEx_RxEventCallback+0x268>)
 80030dc:	f006 fe0c 	bl	8009cf8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80030e0:	2200      	movs	r2, #0
 80030e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030e6:	486d      	ldr	r0, [pc, #436]	; (800329c <HAL_UARTEx_RxEventCallback+0x26c>)
 80030e8:	f006 fe06 	bl	8009cf8 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 80030ec:	4b64      	ldr	r3, [pc, #400]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b61      	cmp	r3, #97	; 0x61
 80030f2:	d106      	bne.n	8003102 <HAL_UARTEx_RxEventCallback+0xd2>
 80030f4:	4b64      	ldr	r3, [pc, #400]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	d101      	bne.n	8003102 <HAL_UARTEx_RxEventCallback+0xd2>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_UARTEx_RxEventCallback+0xd4>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d014      	beq.n	8003132 <HAL_UARTEx_RxEventCallback+0x102>
				{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8003108:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	b25a      	sxtb	r2, r3
 800310e:	4b64      	ldr	r3, [pc, #400]	; (80032a0 <HAL_UARTEx_RxEventCallback+0x270>)
 8003110:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8003112:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 8003114:	789b      	ldrb	r3, [r3, #2]
 8003116:	b25a      	sxtb	r2, r3
 8003118:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <HAL_UARTEx_RxEventCallback+0x274>)
 800311a:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 800311c:	4b58      	ldr	r3, [pc, #352]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 800311e:	78db      	ldrb	r3, [r3, #3]
 8003120:	b25a      	sxtb	r2, r3
 8003122:	4b61      	ldr	r3, [pc, #388]	; (80032a8 <HAL_UARTEx_RxEventCallback+0x278>)
 8003124:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8003126:	4b56      	ldr	r3, [pc, #344]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 8003128:	791b      	ldrb	r3, [r3, #4]
 800312a:	b25a      	sxtb	r2, r3
 800312c:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_UARTEx_RxEventCallback+0x27c>)
 800312e:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
					pyaw = Old_Rx_Buffer[7];
				}

			}
 8003130:	e122      	b.n	8003378 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 8003132:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b71      	cmp	r3, #113	; 0x71
 8003138:	d106      	bne.n	8003148 <HAL_UARTEx_RxEventCallback+0x118>
 800313a:	4b53      	ldr	r3, [pc, #332]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b05      	cmp	r3, #5
 8003142:	d101      	bne.n	8003148 <HAL_UARTEx_RxEventCallback+0x118>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_UARTEx_RxEventCallback+0x11a>
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d014      	beq.n	8003178 <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 800314e:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	b25a      	sxtb	r2, r3
 8003154:	4b56      	ldr	r3, [pc, #344]	; (80032b0 <HAL_UARTEx_RxEventCallback+0x280>)
 8003156:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8003158:	4b49      	ldr	r3, [pc, #292]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 800315a:	789b      	ldrb	r3, [r3, #2]
 800315c:	b25a      	sxtb	r2, r3
 800315e:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <HAL_UARTEx_RxEventCallback+0x284>)
 8003160:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 8003164:	78db      	ldrb	r3, [r3, #3]
 8003166:	b25a      	sxtb	r2, r3
 8003168:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <HAL_UARTEx_RxEventCallback+0x288>)
 800316a:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 800316c:	4b44      	ldr	r3, [pc, #272]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 800316e:	791b      	ldrb	r3, [r3, #4]
 8003170:	b25a      	sxtb	r2, r3
 8003172:	4b52      	ldr	r3, [pc, #328]	; (80032bc <HAL_UARTEx_RxEventCallback+0x28c>)
 8003174:	701a      	strb	r2, [r3, #0]
			}
 8003176:	e0ff      	b.n	8003378 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2)
 8003178:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b85      	cmp	r3, #133	; 0x85
 800317e:	d106      	bne.n	800318e <HAL_UARTEx_RxEventCallback+0x15e>
 8003180:	4b41      	ldr	r3, [pc, #260]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d101      	bne.n	800318e <HAL_UARTEx_RxEventCallback+0x15e>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_UARTEx_RxEventCallback+0x160>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 8003194:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_UARTEx_RxEventCallback+0x290>)
 8003196:	2233      	movs	r2, #51	; 0x33
 8003198:	701a      	strb	r2, [r3, #0]
			}
 800319a:	e0ed      	b.n	8003378 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 800319c:	4b38      	ldr	r3, [pc, #224]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b86      	cmp	r3, #134	; 0x86
 80031a2:	d106      	bne.n	80031b2 <HAL_UARTEx_RxEventCallback+0x182>
 80031a4:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d101      	bne.n	80031b2 <HAL_UARTEx_RxEventCallback+0x182>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_UARTEx_RxEventCallback+0x184>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 80031be:	4b30      	ldr	r3, [pc, #192]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 80031c0:	789b      	ldrb	r3, [r3, #2]
 80031c2:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	6938      	ldr	r0, [r7, #16]
 80031c8:	f7ff fa7a 	bl	80026c0 <_Z12Insert_queueii>
			}
 80031cc:	e0d4      	b.n	8003378 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2)
 80031ce:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b87      	cmp	r3, #135	; 0x87
 80031d4:	d106      	bne.n	80031e4 <HAL_UARTEx_RxEventCallback+0x1b4>
 80031d6:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d101      	bne.n	80031e4 <HAL_UARTEx_RxEventCallback+0x1b4>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_UARTEx_RxEventCallback+0x1b6>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 80031ea:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 80031ec:	785b      	ldrb	r3, [r3, #1]
 80031ee:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 80031f0:	4a33      	ldr	r2, [pc, #204]	; (80032c0 <HAL_UARTEx_RxEventCallback+0x290>)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 80031f6:	f7ff fc03 	bl	8002a00 <_Z20Update_State_Machinev>
			}
 80031fa:	e0bd      	b.n	8003378 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2)
 80031fc:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b89      	cmp	r3, #137	; 0x89
 8003202:	d106      	bne.n	8003212 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003204:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d101      	bne.n	8003212 <HAL_UARTEx_RxEventCallback+0x1e2>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_UARTEx_RxEventCallback+0x1e4>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 8003218:	f7ff fbf2 	bl	8002a00 <_Z20Update_State_Machinev>
			}
 800321c:	e0ac      	b.n	8003378 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b81      	cmp	r3, #129	; 0x81
 8003224:	d106      	bne.n	8003234 <HAL_UARTEx_RxEventCallback+0x204>
 8003226:	4b18      	ldr	r3, [pc, #96]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d101      	bne.n	8003234 <HAL_UARTEx_RxEventCallback+0x204>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_UARTEx_RxEventCallback+0x206>
 8003234:	2300      	movs	r3, #0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d015      	beq.n	8003266 <HAL_UARTEx_RxEventCallback+0x236>
					gripperstate = Old_Rx_Buffer[1];
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 800323c:	785b      	ldrb	r3, [r3, #1]
 800323e:	461a      	mov	r2, r3
 8003240:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x294>)
 8003242:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0)
 8003244:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <HAL_UARTEx_RxEventCallback+0x294>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 8003256:	481c      	ldr	r0, [pc, #112]	; (80032c8 <HAL_UARTEx_RxEventCallback+0x298>)
 8003258:	f7fe fcda 	bl	8001c10 <_ZN10ServoMotor11GripperOpenEv>
			}
 800325c:	e08c      	b.n	8003378 <HAL_UARTEx_RxEventCallback+0x348>
						gripper.GripperClose();
 800325e:	481a      	ldr	r0, [pc, #104]	; (80032c8 <HAL_UARTEx_RxEventCallback+0x298>)
 8003260:	f7fe fcc0 	bl	8001be4 <_ZN10ServoMotor12GripperCloseEv>
			}
 8003264:	e088      	b.n	8003378 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8)
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_UARTEx_RxEventCallback+0x250>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b91      	cmp	r3, #145	; 0x91
 800326c:	d12e      	bne.n	80032cc <HAL_UARTEx_RxEventCallback+0x29c>
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_UARTEx_RxEventCallback+0x258>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b08      	cmp	r3, #8
 8003276:	d129      	bne.n	80032cc <HAL_UARTEx_RxEventCallback+0x29c>
 8003278:	2301      	movs	r3, #1
 800327a:	e028      	b.n	80032ce <HAL_UARTEx_RxEventCallback+0x29e>
 800327c:	24001268 	.word	0x24001268
 8003280:	24000ad4 	.word	0x24000ad4
 8003284:	24000ae8 	.word	0x24000ae8
 8003288:	24000afc 	.word	0x24000afc
 800328c:	24000be8 	.word	0x24000be8
 8003290:	24000acc 	.word	0x24000acc
 8003294:	24000ace 	.word	0x24000ace
 8003298:	58021000 	.word	0x58021000
 800329c:	58020400 	.word	0x58020400
 80032a0:	24000ab4 	.word	0x24000ab4
 80032a4:	24000ab5 	.word	0x24000ab5
 80032a8:	24000ab6 	.word	0x24000ab6
 80032ac:	24000ab7 	.word	0x24000ab7
 80032b0:	24000ab8 	.word	0x24000ab8
 80032b4:	24000ab9 	.word	0x24000ab9
 80032b8:	24000aba 	.word	0x24000aba
 80032bc:	24000abb 	.word	0x24000abb
 80032c0:	24000bac 	.word	0x24000bac
 80032c4:	24000ad0 	.word	0x24000ad0
 80032c8:	24000a8c 	.word	0x24000a8c
 80032cc:	2300      	movs	r3, #0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d052      	beq.n	8003378 <HAL_UARTEx_RxEventCallback+0x348>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 80032d2:	4b5f      	ldr	r3, [pc, #380]	; (8003450 <HAL_UARTEx_RxEventCallback+0x420>)
 80032d4:	785b      	ldrb	r3, [r3, #1]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	4a5d      	ldr	r2, [pc, #372]	; (8003450 <HAL_UARTEx_RxEventCallback+0x420>)
 80032da:	7892      	ldrb	r2, [r2, #2]
 80032dc:	4313      	orrs	r3, r2
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e6:	4b5b      	ldr	r3, [pc, #364]	; (8003454 <HAL_UARTEx_RxEventCallback+0x424>)
 80032e8:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 80032ec:	4b58      	ldr	r3, [pc, #352]	; (8003450 <HAL_UARTEx_RxEventCallback+0x420>)
 80032ee:	78db      	ldrb	r3, [r3, #3]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	4a57      	ldr	r2, [pc, #348]	; (8003450 <HAL_UARTEx_RxEventCallback+0x420>)
 80032f4:	7912      	ldrb	r2, [r2, #4]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003300:	4b55      	ldr	r3, [pc, #340]	; (8003458 <HAL_UARTEx_RxEventCallback+0x428>)
 8003302:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 8003306:	4b52      	ldr	r3, [pc, #328]	; (8003450 <HAL_UARTEx_RxEventCallback+0x420>)
 8003308:	795b      	ldrb	r3, [r3, #5]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	4a50      	ldr	r2, [pc, #320]	; (8003450 <HAL_UARTEx_RxEventCallback+0x420>)
 800330e:	7992      	ldrb	r2, [r2, #6]
 8003310:	4313      	orrs	r3, r2
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800331a:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_UARTEx_RxEventCallback+0x42c>)
 800331c:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8003320:	4b4b      	ldr	r3, [pc, #300]	; (8003450 <HAL_UARTEx_RxEventCallback+0x420>)
 8003322:	79db      	ldrb	r3, [r3, #7]
 8003324:	ee07 3a90 	vmov	s15, r3
 8003328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332c:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HAL_UARTEx_RxEventCallback+0x430>)
 800332e:	edc3 7a00 	vstr	s15, [r3]
			}
 8003332:	e021      	b.n	8003378 <HAL_UARTEx_RxEventCallback+0x348>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003334:	2200      	movs	r2, #0
 8003336:	2102      	movs	r1, #2
 8003338:	484a      	ldr	r0, [pc, #296]	; (8003464 <HAL_UARTEx_RxEventCallback+0x434>)
 800333a:	f006 fcdd 	bl	8009cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800333e:	2201      	movs	r2, #1
 8003340:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003344:	4848      	ldr	r0, [pc, #288]	; (8003468 <HAL_UARTEx_RxEventCallback+0x438>)
 8003346:	f006 fcd7 	bl	8009cf8 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 800334a:	220c      	movs	r2, #12
 800334c:	4947      	ldr	r1, [pc, #284]	; (800346c <HAL_UARTEx_RxEventCallback+0x43c>)
 800334e:	4848      	ldr	r0, [pc, #288]	; (8003470 <HAL_UARTEx_RxEventCallback+0x440>)
 8003350:	f00a fe54 	bl	800dffc <HAL_UART_Transmit_DMA>
 8003354:	e011      	b.n	800337a <HAL_UARTEx_RxEventCallback+0x34a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003356:	2200      	movs	r2, #0
 8003358:	2102      	movs	r1, #2
 800335a:	4842      	ldr	r0, [pc, #264]	; (8003464 <HAL_UARTEx_RxEventCallback+0x434>)
 800335c:	f006 fccc 	bl	8009cf8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003360:	2201      	movs	r2, #1
 8003362:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003366:	4840      	ldr	r0, [pc, #256]	; (8003468 <HAL_UARTEx_RxEventCallback+0x438>)
 8003368:	f006 fcc6 	bl	8009cf8 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 800336c:	2215      	movs	r2, #21
 800336e:	4941      	ldr	r1, [pc, #260]	; (8003474 <HAL_UARTEx_RxEventCallback+0x444>)
 8003370:	483f      	ldr	r0, [pc, #252]	; (8003470 <HAL_UARTEx_RxEventCallback+0x440>)
 8003372:	f00a fe43 	bl	800dffc <HAL_UART_Transmit_DMA>
 8003376:	e000      	b.n	800337a <HAL_UARTEx_RxEventCallback+0x34a>
			}
 8003378:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 800337a:	2214      	movs	r2, #20
 800337c:	493e      	ldr	r1, [pc, #248]	; (8003478 <HAL_UARTEx_RxEventCallback+0x448>)
 800337e:	483c      	ldr	r0, [pc, #240]	; (8003470 <HAL_UARTEx_RxEventCallback+0x440>)
 8003380:	f00c fd99 	bl	800feb6 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003384:	4b3d      	ldr	r3, [pc, #244]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a3d      	ldr	r2, [pc, #244]	; (8003480 <HAL_UARTEx_RxEventCallback+0x450>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d04a      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 800338e:	4b3b      	ldr	r3, [pc, #236]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a3c      	ldr	r2, [pc, #240]	; (8003484 <HAL_UARTEx_RxEventCallback+0x454>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d045      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003398:	4b38      	ldr	r3, [pc, #224]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a3a      	ldr	r2, [pc, #232]	; (8003488 <HAL_UARTEx_RxEventCallback+0x458>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d040      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033a2:	4b36      	ldr	r3, [pc, #216]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a39      	ldr	r2, [pc, #228]	; (800348c <HAL_UARTEx_RxEventCallback+0x45c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d03b      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033ac:	4b33      	ldr	r3, [pc, #204]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a37      	ldr	r2, [pc, #220]	; (8003490 <HAL_UARTEx_RxEventCallback+0x460>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d036      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033b6:	4b31      	ldr	r3, [pc, #196]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a36      	ldr	r2, [pc, #216]	; (8003494 <HAL_UARTEx_RxEventCallback+0x464>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d031      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033c0:	4b2e      	ldr	r3, [pc, #184]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a34      	ldr	r2, [pc, #208]	; (8003498 <HAL_UARTEx_RxEventCallback+0x468>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d02c      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033ca:	4b2c      	ldr	r3, [pc, #176]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a33      	ldr	r2, [pc, #204]	; (800349c <HAL_UARTEx_RxEventCallback+0x46c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d027      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033d4:	4b29      	ldr	r3, [pc, #164]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a31      	ldr	r2, [pc, #196]	; (80034a0 <HAL_UARTEx_RxEventCallback+0x470>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d022      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a30      	ldr	r2, [pc, #192]	; (80034a4 <HAL_UARTEx_RxEventCallback+0x474>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d01d      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2e      	ldr	r2, [pc, #184]	; (80034a8 <HAL_UARTEx_RxEventCallback+0x478>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d018      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a2d      	ldr	r2, [pc, #180]	; (80034ac <HAL_UARTEx_RxEventCallback+0x47c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 80033fc:	4b1f      	ldr	r3, [pc, #124]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2b      	ldr	r2, [pc, #172]	; (80034b0 <HAL_UARTEx_RxEventCallback+0x480>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00e      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <HAL_UARTEx_RxEventCallback+0x484>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d009      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a28      	ldr	r2, [pc, #160]	; (80034b8 <HAL_UARTEx_RxEventCallback+0x488>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <HAL_UARTEx_RxEventCallback+0x3f4>
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a27      	ldr	r2, [pc, #156]	; (80034bc <HAL_UARTEx_RxEventCallback+0x48c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d108      	bne.n	8003436 <HAL_UARTEx_RxEventCallback+0x406>
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0208 	bic.w	r2, r2, #8
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e008      	b.n	8003448 <HAL_UARTEx_RxEventCallback+0x418>
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_UARTEx_RxEventCallback+0x44c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0204 	bic.w	r2, r2, #4
 8003444:	601a      	str	r2, [r3, #0]
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bdb0      	pop	{r4, r5, r7, pc}
 8003450:	24000ad4 	.word	0x24000ad4
 8003454:	24000abc 	.word	0x24000abc
 8003458:	24000ac0 	.word	0x24000ac0
 800345c:	24000ac4 	.word	0x24000ac4
 8003460:	24000ac8 	.word	0x24000ac8
 8003464:	58021000 	.word	0x58021000
 8003468:	58020400 	.word	0x58020400
 800346c:	0801408c 	.word	0x0801408c
 8003470:	24001268 	.word	0x24001268
 8003474:	0801409c 	.word	0x0801409c
 8003478:	24000ae8 	.word	0x24000ae8
 800347c:	240011f0 	.word	0x240011f0
 8003480:	40020010 	.word	0x40020010
 8003484:	40020028 	.word	0x40020028
 8003488:	40020040 	.word	0x40020040
 800348c:	40020058 	.word	0x40020058
 8003490:	40020070 	.word	0x40020070
 8003494:	40020088 	.word	0x40020088
 8003498:	400200a0 	.word	0x400200a0
 800349c:	400200b8 	.word	0x400200b8
 80034a0:	40020410 	.word	0x40020410
 80034a4:	40020428 	.word	0x40020428
 80034a8:	40020440 	.word	0x40020440
 80034ac:	40020458 	.word	0x40020458
 80034b0:	40020470 	.word	0x40020470
 80034b4:	40020488 	.word	0x40020488
 80034b8:	400204a0 	.word	0x400204a0
 80034bc:	400204b8 	.word	0x400204b8

080034c0 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4ac9      	ldr	r2, [pc, #804]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	f040 80bc 	bne.w	800364a <HAL_TIM_PeriodElapsedCallback+0x18a>
		encoderJ1.AMT21_Read();
 80034d2:	48c8      	ldr	r0, [pc, #800]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80034d4:	f7fd f8f7 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80034d8:	48c6      	ldr	r0, [pc, #792]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80034da:	f7fd f923 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	4bc5      	ldr	r3, [pc, #788]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80034e4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80034e6:	4bc4      	ldr	r3, [pc, #784]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d110      	bne.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x50>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 80034ee:	48c1      	ldr	r0, [pc, #772]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80034f0:	f7fd f97c 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80034f4:	4603      	mov	r3, r0
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80034fe:	ed9f 5bba 	vldr	d5, [pc, #744]	; 80037e8 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003502:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003506:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800350a:	4bbc      	ldr	r3, [pc, #752]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800350c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003510:	48bb      	ldr	r0, [pc, #748]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003512:	f7fd f8d8 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003516:	48ba      	ldr	r0, [pc, #744]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003518:	f7fd f904 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	4bb8      	ldr	r3, [pc, #736]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003522:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 8003524:	4bb7      	ldr	r3, [pc, #732]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d112      	bne.n	8003552 <HAL_TIM_PeriodElapsedCallback+0x92>
			encoderJ2.unwarp();
 800352c:	48b4      	ldr	r0, [pc, #720]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800352e:	f7fd f97f 	bl	8000830 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
 8003532:	48b3      	ldr	r0, [pc, #716]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003534:	f7fd f9db 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 8003538:	ee07 0a90 	vmov	s15, r0
 800353c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003540:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 80037e8 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003544:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003548:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800354c:	4bae      	ldr	r3, [pc, #696]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800354e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}


		encoderJ3.AMT21_Read();
 8003552:	48ae      	ldr	r0, [pc, #696]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003554:	f7fd f8b7 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003558:	48ac      	ldr	r0, [pc, #688]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800355a:	f7fd f8e3 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	4bab      	ldr	r3, [pc, #684]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003564:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003566:	4baa      	ldr	r3, [pc, #680]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d110      	bne.n	8003590 <HAL_TIM_PeriodElapsedCallback+0xd0>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 800356e:	48a7      	ldr	r0, [pc, #668]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003570:	f7fd f93c 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003574:	4603      	mov	r3, r0
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800357e:	ed9f 5b9a 	vldr	d5, [pc, #616]	; 80037e8 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003582:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003586:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800358a:	4ba2      	ldr	r3, [pc, #648]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800358c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003590:	48a1      	ldr	r0, [pc, #644]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003592:	f7fd f898 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003596:	48a0      	ldr	r0, [pc, #640]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003598:	f7fd f8c4 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	4b9e      	ldr	r3, [pc, #632]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80035a2:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 80035a4:	4b9d      	ldr	r3, [pc, #628]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d110      	bne.n	80035ce <HAL_TIM_PeriodElapsedCallback+0x10e>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 80035ac:	489a      	ldr	r0, [pc, #616]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80035ae:	f7fd f91d 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80035b2:	4603      	mov	r3, r0
 80035b4:	ee07 3a90 	vmov	s15, r3
 80035b8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80035bc:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 80037e8 <HAL_TIM_PeriodElapsedCallback+0x328>
 80035c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80035c8:	4b95      	ldr	r3, [pc, #596]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80035ca:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//			stepperJ2.StepperSetFrequency(dq2*10.0);
//			stepperJ3.StepperSetFrequency(dq3);
//			stepperJ4.StepperSetFrequency(dq4);


			fcb_X.UpdateIVK(fcb_joint1.Encoder , 0.0,fcb_joint3.Encoder, 0.0, dx, dy, dz, 0.0);
 80035ce:	4b8b      	ldr	r3, [pc, #556]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80035d0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80035d4:	4b8f      	ldr	r3, [pc, #572]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80035d6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80035da:	4b92      	ldr	r3, [pc, #584]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b25b      	sxtb	r3, r3
 80035e0:	ee06 3a90 	vmov	s13, r3
 80035e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80035e8:	4b8f      	ldr	r3, [pc, #572]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	ee06 3a10 	vmov	s12, r3
 80035f2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80035f6:	4b8d      	ldr	r3, [pc, #564]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	ee05 3a90 	vmov	s11, r3
 8003600:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003604:	eddf 3a8a 	vldr	s7, [pc, #552]	; 8003830 <HAL_TIM_PeriodElapsedCallback+0x370>
 8003608:	eeb0 3a65 	vmov.f32	s6, s11
 800360c:	eef0 2a46 	vmov.f32	s5, s12
 8003610:	eeb0 2a66 	vmov.f32	s4, s13
 8003614:	eddf 1a86 	vldr	s3, [pc, #536]	; 8003830 <HAL_TIM_PeriodElapsedCallback+0x370>
 8003618:	eeb0 1a47 	vmov.f32	s2, s14
 800361c:	eddf 0a84 	vldr	s1, [pc, #528]	; 8003830 <HAL_TIM_PeriodElapsedCallback+0x370>
 8003620:	eeb0 0a67 	vmov.f32	s0, s15
 8003624:	4883      	ldr	r0, [pc, #524]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8003626:	f7fd fa0f 	bl	8000a48 <_ZN10RobotJoint9UpdateIVKEffffffff>

			stepperJ1.StepperOpenLoopSpeedM(fcb_X.w_q1);
 800362a:	4b82      	ldr	r3, [pc, #520]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800362c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003630:	eeb0 0a67 	vmov.f32	s0, s15
 8003634:	4880      	ldr	r0, [pc, #512]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8003636:	f7fe fe3f 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
			stepperJ3.StepperOpenLoopSpeedM(fcb_X.w_q3);
 800363a:	4b7e      	ldr	r3, [pc, #504]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800363c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003640:	eeb0 0a67 	vmov.f32	s0, s15
 8003644:	487d      	ldr	r0, [pc, #500]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8003646:	f7fe fe37 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
//					stepperJ4.StepperOpenLoopSpeed(u_q4/num);

	}

	if (htim == &htim16)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a7c      	ldr	r2, [pc, #496]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800364e:	4293      	cmp	r3, r2
 8003650:	f040 808f 	bne.w	8003772 <HAL_TIM_PeriodElapsedCallback+0x2b2>
	{
		encoderJ1.AMT21_Read();
 8003654:	4867      	ldr	r0, [pc, #412]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003656:	f7fd f836 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 800365a:	4866      	ldr	r0, [pc, #408]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800365c:	f7fd f862 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	4b64      	ldr	r3, [pc, #400]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003666:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8003668:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d110      	bne.n	8003692 <HAL_TIM_PeriodElapsedCallback+0x1d2>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 8003670:	4860      	ldr	r0, [pc, #384]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003672:	f7fd f8bb 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003676:	4603      	mov	r3, r0
 8003678:	ee07 3a90 	vmov	s15, r3
 800367c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003680:	ed9f 5b59 	vldr	d5, [pc, #356]	; 80037e8 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003684:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003688:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800368c:	4b5b      	ldr	r3, [pc, #364]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800368e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003692:	485b      	ldr	r0, [pc, #364]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003694:	f7fd f817 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003698:	4859      	ldr	r0, [pc, #356]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800369a:	f7fd f843 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800369e:	4603      	mov	r3, r0
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b58      	ldr	r3, [pc, #352]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80036a4:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 80036a6:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d112      	bne.n	80036d4 <HAL_TIM_PeriodElapsedCallback+0x214>
			encoderJ2.unwarp();
 80036ae:	4854      	ldr	r0, [pc, #336]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80036b0:	f7fd f8be 	bl	8000830 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
 80036b4:	4852      	ldr	r0, [pc, #328]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80036b6:	f7fd f91a 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 80036ba:	ee07 0a90 	vmov	s15, r0
 80036be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80036c2:	ed9f 5b49 	vldr	d5, [pc, #292]	; 80037e8 <HAL_TIM_PeriodElapsedCallback+0x328>
 80036c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036ce:	4b4e      	ldr	r3, [pc, #312]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80036d0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}


		encoderJ3.AMT21_Read();
 80036d4:	484d      	ldr	r0, [pc, #308]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80036d6:	f7fc fff6 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80036da:	484c      	ldr	r0, [pc, #304]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80036dc:	f7fd f822 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461a      	mov	r2, r3
 80036e4:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80036e6:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80036e8:	4b49      	ldr	r3, [pc, #292]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d110      	bne.n	8003712 <HAL_TIM_PeriodElapsedCallback+0x252>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 80036f0:	4846      	ldr	r0, [pc, #280]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80036f2:	f7fd f87b 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80036f6:	4603      	mov	r3, r0
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003700:	ed9f 5b39 	vldr	d5, [pc, #228]	; 80037e8 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003704:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003708:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800370c:	4b41      	ldr	r3, [pc, #260]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800370e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003712:	4841      	ldr	r0, [pc, #260]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003714:	f7fc ffd7 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003718:	483f      	ldr	r0, [pc, #252]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800371a:	f7fd f803 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003724:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003726:	4b3d      	ldr	r3, [pc, #244]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d110      	bne.n	8003750 <HAL_TIM_PeriodElapsedCallback+0x290>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 800372e:	483a      	ldr	r0, [pc, #232]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003730:	f7fd f85c 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003734:	4603      	mov	r3, r0
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800373e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80037e8 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003742:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003746:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800374a:	4b35      	ldr	r3, [pc, #212]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800374c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		if (State_FIN)
 8003750:	4b3c      	ldr	r3, [pc, #240]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_TIM_PeriodElapsedCallback+0x2b2>
		 {
			Balloon++;
 800375a:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3301      	adds	r3, #1
 8003760:	4a39      	ldr	r2, [pc, #228]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003762:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 8003764:	f7ff f94c 	bl	8002a00 <_Z20Update_State_Machinev>
			Update_State_Machine();
 8003768:	f7ff f94a 	bl	8002a00 <_Z20Update_State_Machinev>
			State_FIN = false;
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
		 }

	}

	if (htim == &htim14) {
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a35      	ldr	r2, [pc, #212]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	f040 8483 	bne.w	8004082 <HAL_TIM_PeriodElapsedCallback+0xbc2>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 800377c:	4b34      	ldr	r3, [pc, #208]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b33      	ldr	r3, [pc, #204]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float t3 = t * t * t;
 8003790:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003792:	ed93 7a00 	vldr	s14, [r3]
 8003796:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003798:	edd3 7a00 	vldr	s15, [r3]
 800379c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037a0:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80037a2:	edd3 7a00 	vldr	s15, [r3]
 80037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037aa:	edc7 7a08 	vstr	s15, [r7, #32]
		float t4 = t * t * t * t;
 80037ae:	4b28      	ldr	r3, [pc, #160]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80037b0:	ed93 7a00 	vldr	s14, [r3]
 80037b4:	4b26      	ldr	r3, [pc, #152]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c8:	4b21      	ldr	r3, [pc, #132]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d2:	edc7 7a07 	vstr	s15, [r7, #28]
		float t5 = t * t * t * t * t;
 80037d6:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80037d8:	ed93 7a00 	vldr	s14, [r3]
 80037dc:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80037de:	edd3 7a00 	vldr	s15, [r3]
 80037e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037e6:	e035      	b.n	8003854 <HAL_TIM_PeriodElapsedCallback+0x394>
 80037e8:	645a1cac 	.word	0x645a1cac
 80037ec:	4004df3b 	.word	0x4004df3b
 80037f0:	24000d78 	.word	0x24000d78
 80037f4:	24000424 	.word	0x24000424
 80037f8:	24000aa8 	.word	0x24000aa8
 80037fc:	24000534 	.word	0x24000534
 8003800:	24000440 	.word	0x24000440
 8003804:	24000aa9 	.word	0x24000aa9
 8003808:	24000618 	.word	0x24000618
 800380c:	2400045c 	.word	0x2400045c
 8003810:	24000aaa 	.word	0x24000aaa
 8003814:	240006fc 	.word	0x240006fc
 8003818:	24000478 	.word	0x24000478
 800381c:	24000aab 	.word	0x24000aab
 8003820:	240007e0 	.word	0x240007e0
 8003824:	24000ab8 	.word	0x24000ab8
 8003828:	24000ab9 	.word	0x24000ab9
 800382c:	24000aba 	.word	0x24000aba
 8003830:	00000000 	.word	0x00000000
 8003834:	240009a8 	.word	0x240009a8
 8003838:	24000494 	.word	0x24000494
 800383c:	240004e4 	.word	0x240004e4
 8003840:	24000fd8 	.word	0x24000fd8
 8003844:	24000aac 	.word	0x24000aac
 8003848:	24000bb0 	.word	0x24000bb0
 800384c:	24000f40 	.word	0x24000f40
 8003850:	24000bb4 	.word	0x24000bb4
 8003854:	4be2      	ldr	r3, [pc, #904]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800385e:	4be0      	ldr	r3, [pc, #896]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003860:	edd3 7a00 	vldr	s15, [r3]
 8003864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003868:	4bdd      	ldr	r3, [pc, #884]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003872:	edc7 7a06 	vstr	s15, [r7, #24]
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;


		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
 8003876:	4bdb      	ldr	r3, [pc, #876]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003878:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800387c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003880:	4bd8      	ldr	r3, [pc, #864]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003882:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800388a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800388e:	4bd4      	ldr	r3, [pc, #848]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003898:	ee25 7b07 	vmul.f64	d7, d5, d7
 800389c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80038a0:	4bd0      	ldr	r3, [pc, #832]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80038a2:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80038a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038aa:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80038ae:	ee27 5b05 	vmul.f64	d5, d7, d5
 80038b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038ba:	ee25 7b07 	vmul.f64	d7, d5, d7
 80038be:	ee36 6b07 	vadd.f64	d6, d6, d7
 80038c2:	4bc8      	ldr	r3, [pc, #800]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80038c4:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80038c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038cc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80038d0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80038d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80038d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80038e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80038e4:	4bbf      	ldr	r3, [pc, #764]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80038e6:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80038ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038ee:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80038f2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80038f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80038fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003902:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003906:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800390a:	4bb6      	ldr	r3, [pc, #728]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 800390c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
 8003910:	4bb4      	ldr	r3, [pc, #720]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003912:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003916:	4bb3      	ldr	r3, [pc, #716]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003918:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 800391c:	4bb0      	ldr	r3, [pc, #704]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 800391e:	edd3 7a00 	vldr	s15, [r3]
 8003922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800392a:	4bae      	ldr	r3, [pc, #696]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 800392c:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003930:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800393c:	4ba9      	ldr	r3, [pc, #676]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 800393e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003942:	edd7 7a08 	vldr	s15, [r7, #32]
 8003946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800394a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800394e:	4ba5      	ldr	r3, [pc, #660]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003950:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003954:	edd7 7a07 	vldr	s15, [r7, #28]
 8003958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800395c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003960:	4ba0      	ldr	r3, [pc, #640]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003962:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003966:	edd7 7a06 	vldr	s15, [r7, #24]
 800396a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800396e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003972:	4b9c      	ldr	r3, [pc, #624]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003974:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0*fcb_joint2.C2*t) + (3.0*fcb_joint2.C3*t2) + (4.0*fcb_joint2.C4*t3) + (5.0*fcb_joint2.C5*t4);
 8003978:	4b9b      	ldr	r3, [pc, #620]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 800397a:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800397e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003982:	4b99      	ldr	r3, [pc, #612]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003984:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800398c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003990:	4b93      	ldr	r3, [pc, #588]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003992:	edd3 7a00 	vldr	s15, [r3]
 8003996:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800399a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800399e:	ee36 6b07 	vadd.f64	d6, d6, d7
 80039a2:	4b91      	ldr	r3, [pc, #580]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80039a4:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80039a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039ac:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80039b0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80039c4:	4b88      	ldr	r3, [pc, #544]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80039c6:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80039ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039ce:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80039d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80039da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80039e6:	4b80      	ldr	r3, [pc, #512]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80039e8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80039ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039f0:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80039f4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80039fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a0c:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003a0e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1*t) + (fcb_joint2.C2*t2) + (fcb_joint2.C3*t3) + (fcb_joint2.C4*t4) + (fcb_joint2.C5*t5));
 8003a12:	4b75      	ldr	r3, [pc, #468]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003a14:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003a18:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003a1a:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003a1e:	4b70      	ldr	r3, [pc, #448]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a2c:	4b6e      	ldr	r3, [pc, #440]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003a2e:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003a32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a3e:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003a40:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003a44:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a50:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003a52:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003a56:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a62:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003a64:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003a68:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a74:	4b5c      	ldr	r3, [pc, #368]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003a76:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 8003a7a:	4b5c      	ldr	r3, [pc, #368]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003a7c:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003a80:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a84:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003a86:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003a8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a8e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003a92:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a9c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003aa0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003aa4:	4b51      	ldr	r3, [pc, #324]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003aa6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003aaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aae:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ab2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ab6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003aba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003abe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ac2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ac6:	4b49      	ldr	r3, [pc, #292]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003ac8:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ad0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ad4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ad8:	edd7 7a08 	vldr	s15, [r7, #32]
 8003adc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ae0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ae4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ae8:	4b40      	ldr	r3, [pc, #256]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003aea:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003af2:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003af6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003afa:	edd7 7a07 	vldr	s15, [r7, #28]
 8003afe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b02:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b0e:	4b37      	ldr	r3, [pc, #220]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003b10:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 8003b14:	4b35      	ldr	r3, [pc, #212]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003b16:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003b1a:	4b34      	ldr	r3, [pc, #208]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003b1c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003b20:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003b22:	edd3 7a00 	vldr	s15, [r3]
 8003b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b2e:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003b30:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003b34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003b42:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003b46:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b52:	4b26      	ldr	r3, [pc, #152]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003b54:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003b58:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b64:	4b21      	ldr	r3, [pc, #132]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003b66:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003b6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003b78:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0*fcb_joint4.C2*t) + (3.0*fcb_joint4.C3*t2) + (4.0*fcb_joint4.C4*t3) + (5.0*fcb_joint4.C5*t4);
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003b7e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003b82:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b86:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003b88:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b90:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ba2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003ba8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bb0:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003bb4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003bbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bc0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bc4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003bc8:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003bca:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003bce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bd2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003bd6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bda:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bde:	e009      	b.n	8003bf4 <HAL_TIM_PeriodElapsedCallback+0x734>
 8003be0:	24000bb4 	.word	0x24000bb4
 8003be4:	24000534 	.word	0x24000534
 8003be8:	24000618 	.word	0x24000618
 8003bec:	240006fc 	.word	0x240006fc
 8003bf0:	240007e0 	.word	0x240007e0
 8003bf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bf8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bfc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c00:	4bc6      	ldr	r3, [pc, #792]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003c02:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003c06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c0a:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003c0e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003c12:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c1a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c26:	4bbd      	ldr	r3, [pc, #756]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003c28:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1*t) + (fcb_joint4.C2*t2) + (fcb_joint4.C3*t3) + (fcb_joint4.C4*t4) + (fcb_joint4.C5*t5));
 8003c2c:	4bbb      	ldr	r3, [pc, #748]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003c2e:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003c32:	4bba      	ldr	r3, [pc, #744]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003c34:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003c38:	4bb9      	ldr	r3, [pc, #740]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003c3a:	edd3 7a00 	vldr	s15, [r3]
 8003c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c46:	4bb5      	ldr	r3, [pc, #724]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003c48:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003c4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c58:	4bb0      	ldr	r3, [pc, #704]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003c5a:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003c5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c6a:	4bac      	ldr	r3, [pc, #688]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003c6c:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003c70:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c7c:	4ba7      	ldr	r3, [pc, #668]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003c7e:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003c82:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8e:	4ba3      	ldr	r3, [pc, #652]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003c90:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;


		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 8003c94:	4ba3      	ldr	r3, [pc, #652]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003c96:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9e:	48a1      	ldr	r0, [pc, #644]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003ca0:	f7fd f920 	bl	8000ee4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 8003ca4:	4b9f      	ldr	r3, [pc, #636]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003ca6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003caa:	4a9e      	ldr	r2, [pc, #632]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003cac:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 8003cb0:	4b9c      	ldr	r3, [pc, #624]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003cb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cb6:	4a9b      	ldr	r2, [pc, #620]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003cb8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003cbc:	4b9a      	ldr	r3, [pc, #616]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cbe:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc6:	4898      	ldr	r0, [pc, #608]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cc8:	f7fd f90c 	bl	8000ee4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003ccc:	4b96      	ldr	r3, [pc, #600]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cd2:	4a95      	ldr	r2, [pc, #596]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cd4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8003cd8:	4b93      	ldr	r3, [pc, #588]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cde:	4a92      	ldr	r2, [pc, #584]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003ce0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
//		fcb_joint1.Kd_p = 0.0004;
//		fcb_joint3.Kp_p = 0.015; // 0.015
//		fcb_joint3.Ki_p = 0.009; // 0.009
//		fcb_joint3.Kd_p = 0.0015; // 0.0015

		fcb_joint1.Kp_p = 0.2;
 8003ce4:	4b8f      	ldr	r3, [pc, #572]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003ce6:	4a91      	ldr	r2, [pc, #580]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003ce8:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0001;
 8003cea:	4b8e      	ldr	r3, [pc, #568]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003cec:	4a90      	ldr	r2, [pc, #576]	; (8003f30 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8003cee:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0001;
 8003cf0:	4b8c      	ldr	r3, [pc, #560]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003cf2:	4a8f      	ldr	r2, [pc, #572]	; (8003f30 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8003cf4:	669a      	str	r2, [r3, #104]	; 0x68
		fcb_joint3.Kp_p = 0.05;
 8003cf6:	4b8c      	ldr	r3, [pc, #560]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cf8:	4a8e      	ldr	r2, [pc, #568]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8003cfa:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8003cfc:	4b8a      	ldr	r3, [pc, #552]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.01;
 8003d04:	4b88      	ldr	r3, [pc, #544]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d06:	4a8c      	ldr	r2, [pc, #560]	; (8003f38 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8003d08:	669a      	str	r2, [r3, #104]	; 0x68
//		fcb_joint3.Kp_p = 0.0006;
//		fcb_joint3.Ki_p = 0.00001;
//		fcb_joint3.Kd_p = 0.00001;

		fcb_joint1.Kp_v = 0.0;
 8003d0a:	4b86      	ldr	r3, [pc, #536]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 8003d12:	4b84      	ldr	r3, [pc, #528]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8003d1a:	4b82      	ldr	r3, [pc, #520]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	675a      	str	r2, [r3, #116]	; 0x74
		fcb_joint3.Kp_v = 0.0;
 8003d22:	4b81      	ldr	r3, [pc, #516]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 8003d32:	4b7d      	ldr	r3, [pc, #500]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 8003d3a:	4b7a      	ldr	r3, [pc, #488]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d3c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003d40:	4b78      	ldr	r3, [pc, #480]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d42:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d4a:	4b76      	ldr	r3, [pc, #472]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d4c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 8003d50:	4b75      	ldr	r3, [pc, #468]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d52:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003d56:	4b74      	ldr	r3, [pc, #464]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d58:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d60:	4b71      	ldr	r3, [pc, #452]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d62:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8003d66:	4b6f      	ldr	r3, [pc, #444]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d68:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003d6c:	4b6d      	ldr	r3, [pc, #436]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d6e:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d76:	4b6b      	ldr	r3, [pc, #428]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d78:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d7e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003d82:	4b69      	ldr	r3, [pc, #420]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d84:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d8c:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003d8e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003d92:	4b64      	ldr	r3, [pc, #400]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d94:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003d98:	4b62      	ldr	r3, [pc, #392]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003d9a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da2:	4b60      	ldr	r3, [pc, #384]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003da4:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003da8:	4b5f      	ldr	r3, [pc, #380]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003daa:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003dae:	4b5e      	ldr	r3, [pc, #376]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003db0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db8:	4b5b      	ldr	r3, [pc, #364]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003dba:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 8003dbe:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003dc0:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003dc4:	4b57      	ldr	r3, [pc, #348]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003dc6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dce:	4b55      	ldr	r3, [pc, #340]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003dd0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 8003dd4:	4b54      	ldr	r3, [pc, #336]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003dd6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003dda:	4b53      	ldr	r3, [pc, #332]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003ddc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003de4:	4b50      	ldr	r3, [pc, #320]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003de6:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8003dea:	4b4e      	ldr	r3, [pc, #312]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003dec:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 8003df0:	4b4c      	ldr	r3, [pc, #304]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003df2:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003df6:	4b4b      	ldr	r3, [pc, #300]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003df8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8003e00:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 8003e04:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e06:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003e0a:	4b46      	ldr	r3, [pc, #280]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e0c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 8003e14:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8003e18:	4b42      	ldr	r3, [pc, #264]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e1a:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003e1e:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e20:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003e24:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e26:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003e2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 8003e32:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8003e36:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e38:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003e3c:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e3e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8003e46:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8003e4a:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e4c:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003e50:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e52:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003e56:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8003e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v) ) ;
 8003e5e:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e60:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003e64:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e66:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8003e6a:	4b2e      	ldr	r3, [pc, #184]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e6c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003e70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8003e78:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8003e7c:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003e7e:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8003e82:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003e84:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8003e88:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003e8a:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003e90:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8003e98:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8003e9c:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003e9e:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003ea2:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003ea4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8003eac:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003eb2:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003eb8:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003ebc:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003ebe:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003ec2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8003eca:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8003ece:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003ed0:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003ed4:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003ed6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8003ede:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003ee4:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003eea:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8003ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v) ) ;
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003ef8:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003efe:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003f04:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003f08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 8003f10:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003f16:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 8003f1a:	e00f      	b.n	8003f3c <HAL_TIM_PeriodElapsedCallback+0xa7c>
 8003f1c:	240007e0 	.word	0x240007e0
 8003f20:	24000bb4 	.word	0x24000bb4
 8003f24:	24000534 	.word	0x24000534
 8003f28:	240006fc 	.word	0x240006fc
 8003f2c:	3e4ccccd 	.word	0x3e4ccccd
 8003f30:	38d1b717 	.word	0x38d1b717
 8003f34:	3d4ccccd 	.word	0x3d4ccccd
 8003f38:	3c23d70a 	.word	0x3c23d70a
//		stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);

//		stepperJ1.StepperOpenLoopSpeedM(0.0);
//		stepperJ3.StepperOpenLoopSpeedM(0.0);

		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
 8003f3c:	4b97      	ldr	r3, [pc, #604]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f3e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003f42:	eeb0 0a67 	vmov.f32	s0, s15
 8003f46:	4896      	ldr	r0, [pc, #600]	; (80041a0 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 8003f48:	f7fe f9b6 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
		stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Goal_Velocity);
 8003f4c:	4b95      	ldr	r3, [pc, #596]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f4e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003f52:	eeb0 0a67 	vmov.f32	s0, s15
 8003f56:	4894      	ldr	r0, [pc, #592]	; (80041a8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003f58:	f7fe f9ae 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
//
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 8003f5c:	4b93      	ldr	r3, [pc, #588]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8003f5e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003f62:	eeb0 0a67 	vmov.f32	s0, s15
 8003f66:	4892      	ldr	r0, [pc, #584]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 8003f68:	f7fe f9a6 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ3.StepperOpenLoopSpeedM(0);
		stepperJ4.StepperOpenLoopSpeedM(0);
 8003f6c:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80041b4 <HAL_TIM_PeriodElapsedCallback+0xcf4>
 8003f70:	4891      	ldr	r0, [pc, #580]	; (80041b8 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 8003f72:	f7fe f9a1 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8003f76:	4b89      	ldr	r3, [pc, #548]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7a:	4a88      	ldr	r2, [pc, #544]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f7c:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8003f7e:	4b89      	ldr	r3, [pc, #548]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f82:	4a88      	ldr	r2, [pc, #544]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f84:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 8003f86:	4b85      	ldr	r3, [pc, #532]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8c:	4a83      	ldr	r2, [pc, #524]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003f8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 8003f92:	4b84      	ldr	r3, [pc, #528]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f98:	4a82      	ldr	r2, [pc, #520]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003f9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8003f9e:	4b7f      	ldr	r3, [pc, #508]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	4a7e      	ldr	r2, [pc, #504]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 8003fa8:	4b7e      	ldr	r3, [pc, #504]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	4a7d      	ldr	r2, [pc, #500]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 8003fb2:	4b7a      	ldr	r3, [pc, #488]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003fb4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003fb8:	4a78      	ldr	r2, [pc, #480]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003fba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 8003fbe:	4b77      	ldr	r3, [pc, #476]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8003fc0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003fc4:	4a77      	ldr	r2, [pc, #476]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8003fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94


		t = t + sample_time_500;
 8003fca:	4b7c      	ldr	r3, [pc, #496]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8003fcc:	ed93 7a00 	vldr	s14, [r3]
 8003fd0:	4b7b      	ldr	r3, [pc, #492]	; (80041c0 <HAL_TIM_PeriodElapsedCallback+0xd00>)
 8003fd2:	edd3 7a00 	vldr	s15, [r3]
 8003fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fda:	4b78      	ldr	r3, [pc, #480]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8003fdc:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time )
 8003fe0:	4b76      	ldr	r3, [pc, #472]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8003fe2:	ed93 7a00 	vldr	s14, [r3]
 8003fe6:	4b77      	ldr	r3, [pc, #476]	; (80041c4 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8003fe8:	edd3 7a00 	vldr	s15, [r3]
 8003fec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff4:	bfac      	ite	ge
 8003ff6:	2301      	movge	r3, #1
 8003ff8:	2300      	movlt	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d040      	beq.n	8004082 <HAL_TIM_PeriodElapsedCallback+0xbc2>
			{
			t = (int)0;
 8004000:	4b6e      	ldr	r3, [pc, #440]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 8004008:	4b64      	ldr	r3, [pc, #400]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8004012:	4b64      	ldr	r3, [pc, #400]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint1.Sum_Error_v = 0;
 800401c:	4b5f      	ldr	r3, [pc, #380]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 8004026:	4b5f      	ldr	r3, [pc, #380]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint1.Old_Error_p = 0;
 8004030:	4b5a      	ldr	r3, [pc, #360]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 8004038:	4b5a      	ldr	r3, [pc, #360]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint1.Old_Error_v = 0;
 8004040:	4b56      	ldr	r3, [pc, #344]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 800404a:	4b56      	ldr	r3, [pc, #344]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint1.Old_p = 0;
 8004054:	4b51      	ldr	r3, [pc, #324]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 800405e:	4b51      	ldr	r3, [pc, #324]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint1.Old_v = 0;
 8004068:	4b4c      	ldr	r3, [pc, #304]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 8004072:	4b4c      	ldr	r3, [pc, #304]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 800407c:	4b52      	ldr	r3, [pc, #328]	; (80041c8 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
			}


	}
	if(htim == &htim17){
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a51      	ldr	r2, [pc, #324]	; (80041cc <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	f040 8083 	bne.w	8004192 <HAL_TIM_PeriodElapsedCallback+0xcd2>
		uint8_t encoder_state[12] = {
				(uint8_t)(((int16_t)fcb_joint1.Encoder >> 16) & 0xFF),
 800408c:	4b43      	ldr	r3, [pc, #268]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 800408e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004096:	ee17 3a90 	vmov	r3, s15
 800409a:	b21b      	sxth	r3, r3
 800409c:	141b      	asrs	r3, r3, #16
				(uint8_t)(((int16_t)fcb_joint3.Encoder >> 8) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint3.Encoder) & 0xFF),
				(uint8_t)(((int32_t)fcb_joint4.Encoder >> 16) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint4.Encoder >> 8) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint4.Encoder) & 0xFF),
		};
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	733b      	strb	r3, [r7, #12]
				(uint8_t)(((int16_t)fcb_joint1.Encoder >> 8) & 0xFF),
 80040a2:	4b3e      	ldr	r3, [pc, #248]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 80040a4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ac:	ee17 3a90 	vmov	r3, s15
 80040b0:	b21b      	sxth	r3, r3
 80040b2:	121b      	asrs	r3, r3, #8
		};
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	737b      	strb	r3, [r7, #13]
				(uint8_t)(((int16_t)fcb_joint1.Encoder) & 0xFF),
 80040b8:	4b38      	ldr	r3, [pc, #224]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 80040ba:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040c2:	ee17 3a90 	vmov	r3, s15
 80040c6:	b21b      	sxth	r3, r3
		};
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	73bb      	strb	r3, [r7, #14]
				(uint8_t)(((int32_t)fcb_joint2.Encoder >> 16) & 0xFF),
 80040cc:	4b37      	ldr	r3, [pc, #220]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0xcec>)
 80040ce:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040d6:	ee17 3a90 	vmov	r3, s15
 80040da:	141b      	asrs	r3, r3, #16
		};
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	73fb      	strb	r3, [r7, #15]
				(uint8_t)(((int32_t)fcb_joint2.Encoder >> 8) & 0xFF),
 80040e0:	4b32      	ldr	r3, [pc, #200]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0xcec>)
 80040e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ea:	ee17 3a90 	vmov	r3, s15
 80040ee:	121b      	asrs	r3, r3, #8
		};
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	743b      	strb	r3, [r7, #16]
				(uint8_t)(((int32_t)fcb_joint2.Encoder) & 0xFF),
 80040f4:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0xcec>)
 80040f6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fe:	edc7 7a00 	vstr	s15, [r7]
		};
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	747b      	strb	r3, [r7, #17]
				(uint8_t)(((int32_t)fcb_joint3.Encoder >> 16) & 0xFF),
 8004108:	4b26      	ldr	r3, [pc, #152]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800410a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800410e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004112:	ee17 3a90 	vmov	r3, s15
 8004116:	141b      	asrs	r3, r3, #16
		};
 8004118:	b2db      	uxtb	r3, r3
 800411a:	74bb      	strb	r3, [r7, #18]
				(uint8_t)(((int16_t)fcb_joint3.Encoder >> 8) & 0xFF),
 800411c:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800411e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004126:	ee17 3a90 	vmov	r3, s15
 800412a:	b21b      	sxth	r3, r3
 800412c:	121b      	asrs	r3, r3, #8
		};
 800412e:	b2db      	uxtb	r3, r3
 8004130:	74fb      	strb	r3, [r7, #19]
				(uint8_t)(((int16_t)fcb_joint3.Encoder) & 0xFF),
 8004132:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8004134:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800413c:	ee17 3a90 	vmov	r3, s15
 8004140:	b21b      	sxth	r3, r3
		};
 8004142:	b2db      	uxtb	r3, r3
 8004144:	753b      	strb	r3, [r7, #20]
				(uint8_t)(((int32_t)fcb_joint4.Encoder >> 16) & 0xFF),
 8004146:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8004148:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800414c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004150:	ee17 3a90 	vmov	r3, s15
 8004154:	141b      	asrs	r3, r3, #16
		};
 8004156:	b2db      	uxtb	r3, r3
 8004158:	757b      	strb	r3, [r7, #21]
				(uint8_t)(((int16_t)fcb_joint4.Encoder >> 8) & 0xFF),
 800415a:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 800415c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004164:	ee17 3a90 	vmov	r3, s15
 8004168:	b21b      	sxth	r3, r3
 800416a:	121b      	asrs	r3, r3, #8
		};
 800416c:	b2db      	uxtb	r3, r3
 800416e:	75bb      	strb	r3, [r7, #22]
				(uint8_t)(((int16_t)fcb_joint4.Encoder) & 0xFF),
 8004170:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8004172:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800417a:	ee17 3a90 	vmov	r3, s15
 800417e:	b21b      	sxth	r3, r3
		};
 8004180:	b2db      	uxtb	r3, r3
 8004182:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&encoder_state, 12);
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	220c      	movs	r2, #12
 800418a:	4619      	mov	r1, r3
 800418c:	4811      	ldr	r0, [pc, #68]	; (80041d4 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 800418e:	f009 ff35 	bl	800dffc <HAL_UART_Transmit_DMA>
	}
}
 8004192:	bf00      	nop
 8004194:	3728      	adds	r7, #40	; 0x28
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	24000534 	.word	0x24000534
 80041a0:	24000494 	.word	0x24000494
 80041a4:	240006fc 	.word	0x240006fc
 80041a8:	240004e4 	.word	0x240004e4
 80041ac:	24000618 	.word	0x24000618
 80041b0:	240004bc 	.word	0x240004bc
 80041b4:	00000000 	.word	0x00000000
 80041b8:	2400050c 	.word	0x2400050c
 80041bc:	24000bb4 	.word	0x24000bb4
 80041c0:	24000208 	.word	0x24000208
 80041c4:	24000ab0 	.word	0x24000ab0
 80041c8:	24000aac 	.word	0x24000aac
 80041cc:	24000d2c 	.word	0x24000d2c
 80041d0:	240007e0 	.word	0x240007e0
 80041d4:	240014f0 	.word	0x240014f0

080041d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041dc:	f002 f9c6 	bl	800656c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041e0:	f000 fa10 	bl	8004604 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041e4:	f7fe f944 	bl	8002470 <MX_GPIO_Init>
  MX_DMA_Init();
 80041e8:	f7fe f8f2 	bl	80023d0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80041ec:	f001 fe5c 	bl	8005ea8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80041f0:	f000 ff8a 	bl	8005108 <MX_TIM2_Init>
  MX_UART4_Init();
 80041f4:	f001 fd6a 	bl	8005ccc <MX_UART4_Init>
  MX_TIM4_Init();
 80041f8:	f001 f876 	bl	80052e8 <MX_TIM4_Init>
  MX_SPI3_Init();
 80041fc:	f000 fba6 	bl	800494c <MX_SPI3_Init>
  MX_TIM1_Init();
 8004200:	f000 fed4 	bl	8004fac <MX_TIM1_Init>
  MX_TIM3_Init();
 8004204:	f000 fff8 	bl	80051f8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8004208:	f001 f8e6 	bl	80053d8 <MX_TIM5_Init>
  MX_TIM15_Init();
 800420c:	f001 fa20 	bl	8005650 <MX_TIM15_Init>
  MX_CRC_Init();
 8004210:	f7fe f88e 	bl	8002330 <MX_CRC_Init>
  MX_UART7_Init();
 8004214:	f001 fdae 	bl	8005d74 <MX_UART7_Init>
  MX_TIM6_Init();
 8004218:	f001 f92c 	bl	8005474 <MX_TIM6_Init>
  MX_TIM7_Init();
 800421c:	f001 f960 	bl	80054e0 <MX_TIM7_Init>
  MX_TIM12_Init();
 8004220:	f001 f994 	bl	800554c <MX_TIM12_Init>
  MX_TIM13_Init();
 8004224:	f001 f9cc 	bl	80055c0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8004228:	f001 f9ee 	bl	8005608 <MX_TIM14_Init>
  MX_TIM16_Init();
 800422c:	f001 fab4 	bl	8005798 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8004230:	f001 fdee 	bl	8005e10 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8004234:	f001 fad6 	bl	80057e4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8004238:	2214      	movs	r2, #20
 800423a:	496a      	ldr	r1, [pc, #424]	; (80043e4 <main+0x20c>)
 800423c:	486a      	ldr	r0, [pc, #424]	; (80043e8 <main+0x210>)
 800423e:	f00b fe3a 	bl	800feb6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8004242:	4b6a      	ldr	r3, [pc, #424]	; (80043ec <main+0x214>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6a      	ldr	r2, [pc, #424]	; (80043f0 <main+0x218>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d04a      	beq.n	80042e2 <main+0x10a>
 800424c:	4b67      	ldr	r3, [pc, #412]	; (80043ec <main+0x214>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a68      	ldr	r2, [pc, #416]	; (80043f4 <main+0x21c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d045      	beq.n	80042e2 <main+0x10a>
 8004256:	4b65      	ldr	r3, [pc, #404]	; (80043ec <main+0x214>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a67      	ldr	r2, [pc, #412]	; (80043f8 <main+0x220>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d040      	beq.n	80042e2 <main+0x10a>
 8004260:	4b62      	ldr	r3, [pc, #392]	; (80043ec <main+0x214>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a65      	ldr	r2, [pc, #404]	; (80043fc <main+0x224>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d03b      	beq.n	80042e2 <main+0x10a>
 800426a:	4b60      	ldr	r3, [pc, #384]	; (80043ec <main+0x214>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a64      	ldr	r2, [pc, #400]	; (8004400 <main+0x228>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d036      	beq.n	80042e2 <main+0x10a>
 8004274:	4b5d      	ldr	r3, [pc, #372]	; (80043ec <main+0x214>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a62      	ldr	r2, [pc, #392]	; (8004404 <main+0x22c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d031      	beq.n	80042e2 <main+0x10a>
 800427e:	4b5b      	ldr	r3, [pc, #364]	; (80043ec <main+0x214>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a61      	ldr	r2, [pc, #388]	; (8004408 <main+0x230>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d02c      	beq.n	80042e2 <main+0x10a>
 8004288:	4b58      	ldr	r3, [pc, #352]	; (80043ec <main+0x214>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a5f      	ldr	r2, [pc, #380]	; (800440c <main+0x234>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d027      	beq.n	80042e2 <main+0x10a>
 8004292:	4b56      	ldr	r3, [pc, #344]	; (80043ec <main+0x214>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a5e      	ldr	r2, [pc, #376]	; (8004410 <main+0x238>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d022      	beq.n	80042e2 <main+0x10a>
 800429c:	4b53      	ldr	r3, [pc, #332]	; (80043ec <main+0x214>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a5c      	ldr	r2, [pc, #368]	; (8004414 <main+0x23c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d01d      	beq.n	80042e2 <main+0x10a>
 80042a6:	4b51      	ldr	r3, [pc, #324]	; (80043ec <main+0x214>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a5b      	ldr	r2, [pc, #364]	; (8004418 <main+0x240>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d018      	beq.n	80042e2 <main+0x10a>
 80042b0:	4b4e      	ldr	r3, [pc, #312]	; (80043ec <main+0x214>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a59      	ldr	r2, [pc, #356]	; (800441c <main+0x244>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <main+0x10a>
 80042ba:	4b4c      	ldr	r3, [pc, #304]	; (80043ec <main+0x214>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a58      	ldr	r2, [pc, #352]	; (8004420 <main+0x248>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <main+0x10a>
 80042c4:	4b49      	ldr	r3, [pc, #292]	; (80043ec <main+0x214>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a56      	ldr	r2, [pc, #344]	; (8004424 <main+0x24c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d009      	beq.n	80042e2 <main+0x10a>
 80042ce:	4b47      	ldr	r3, [pc, #284]	; (80043ec <main+0x214>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a55      	ldr	r2, [pc, #340]	; (8004428 <main+0x250>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <main+0x10a>
 80042d8:	4b44      	ldr	r3, [pc, #272]	; (80043ec <main+0x214>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a53      	ldr	r2, [pc, #332]	; (800442c <main+0x254>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <main+0x11c>
 80042e2:	4b42      	ldr	r3, [pc, #264]	; (80043ec <main+0x214>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b40      	ldr	r3, [pc, #256]	; (80043ec <main+0x214>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0208 	bic.w	r2, r2, #8
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e007      	b.n	8004304 <main+0x12c>
 80042f4:	4b3d      	ldr	r3, [pc, #244]	; (80043ec <main+0x214>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b3c      	ldr	r3, [pc, #240]	; (80043ec <main+0x214>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0204 	bic.w	r2, r2, #4
 8004302:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8004304:	2201      	movs	r2, #1
 8004306:	2101      	movs	r1, #1
 8004308:	4849      	ldr	r0, [pc, #292]	; (8004430 <main+0x258>)
 800430a:	f005 fcf5 	bl	8009cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800430e:	2201      	movs	r2, #1
 8004310:	2102      	movs	r1, #2
 8004312:	4848      	ldr	r0, [pc, #288]	; (8004434 <main+0x25c>)
 8004314:	f005 fcf0 	bl	8009cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004318:	2200      	movs	r2, #0
 800431a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800431e:	4844      	ldr	r0, [pc, #272]	; (8004430 <main+0x258>)
 8004320:	f005 fcea 	bl	8009cf8 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8004324:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8004458 <main+0x280>
 8004328:	4843      	ldr	r0, [pc, #268]	; (8004438 <main+0x260>)
 800432a:	f7fd fd11 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 800432e:	2108      	movs	r1, #8
 8004330:	4841      	ldr	r0, [pc, #260]	; (8004438 <main+0x260>)
 8004332:	f7fd ffa9 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 8004336:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800443c <main+0x264>
 800433a:	483f      	ldr	r0, [pc, #252]	; (8004438 <main+0x260>)
 800433c:	f7fd ff80 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8004340:	483d      	ldr	r0, [pc, #244]	; (8004438 <main+0x260>)
 8004342:	f7fd fcf4 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 8004346:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8004458 <main+0x280>
 800434a:	483d      	ldr	r0, [pc, #244]	; (8004440 <main+0x268>)
 800434c:	f7fd fd00 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 8004350:	2110      	movs	r1, #16
 8004352:	483b      	ldr	r0, [pc, #236]	; (8004440 <main+0x268>)
 8004354:	f7fd ff98 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 8004358:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800435c:	4838      	ldr	r0, [pc, #224]	; (8004440 <main+0x268>)
 800435e:	f7fd ff6f 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 8004362:	4837      	ldr	r0, [pc, #220]	; (8004440 <main+0x268>)
 8004364:	f7fd fce3 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 8004368:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8004458 <main+0x280>
 800436c:	4835      	ldr	r0, [pc, #212]	; (8004444 <main+0x26c>)
 800436e:	f7fd fcef 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 8004372:	2110      	movs	r1, #16
 8004374:	4833      	ldr	r0, [pc, #204]	; (8004444 <main+0x26c>)
 8004376:	f7fd ff87 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 800437a:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 800437e:	4831      	ldr	r0, [pc, #196]	; (8004444 <main+0x26c>)
 8004380:	f7fd ff5e 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8004384:	482f      	ldr	r0, [pc, #188]	; (8004444 <main+0x26c>)
 8004386:	f7fd fcd2 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 800438a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8004458 <main+0x280>
 800438e:	482e      	ldr	r0, [pc, #184]	; (8004448 <main+0x270>)
 8004390:	f7fd fcde 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(1);
 8004394:	2101      	movs	r1, #1
 8004396:	482c      	ldr	r0, [pc, #176]	; (8004448 <main+0x270>)
 8004398:	f7fd ff76 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 800439c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80043a0:	4829      	ldr	r0, [pc, #164]	; (8004448 <main+0x270>)
 80043a2:	f7fd ff4d 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 80043a6:	4828      	ldr	r0, [pc, #160]	; (8004448 <main+0x270>)
 80043a8:	f7fd fcc1 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 80043ac:	2191      	movs	r1, #145	; 0x91
 80043ae:	4827      	ldr	r0, [pc, #156]	; (800444c <main+0x274>)
 80043b0:	f7fd fc07 	bl	8001bc2 <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 80043b4:	2139      	movs	r1, #57	; 0x39
 80043b6:	4825      	ldr	r0, [pc, #148]	; (800444c <main+0x274>)
 80043b8:	f7fd fbf2 	bl	8001ba0 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 80043bc:	4823      	ldr	r0, [pc, #140]	; (800444c <main+0x274>)
 80043be:	f7fd fa1a 	bl	80017f6 <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 80043c2:	4822      	ldr	r0, [pc, #136]	; (800444c <main+0x274>)
 80043c4:	f7fd fc0e 	bl	8001be4 <_ZN10ServoMotor12GripperCloseEv>
	while(!Limit_sw_Z_Top)
 80043c8:	4b21      	ldr	r3, [pc, #132]	; (8004450 <main+0x278>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	f083 0301 	eor.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d041      	beq.n	800445c <main+0x284>
	{
		stepperJ2.StepperSetFrequency(1200.0f);
 80043d8:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004454 <main+0x27c>
 80043dc:	4818      	ldr	r0, [pc, #96]	; (8004440 <main+0x268>)
 80043de:	f7fd fcb7 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	while(!Limit_sw_Z_Top)
 80043e2:	e7f1      	b.n	80043c8 <main+0x1f0>
 80043e4:	24000ae8 	.word	0x24000ae8
 80043e8:	24001268 	.word	0x24001268
 80043ec:	240011f0 	.word	0x240011f0
 80043f0:	40020010 	.word	0x40020010
 80043f4:	40020028 	.word	0x40020028
 80043f8:	40020040 	.word	0x40020040
 80043fc:	40020058 	.word	0x40020058
 8004400:	40020070 	.word	0x40020070
 8004404:	40020088 	.word	0x40020088
 8004408:	400200a0 	.word	0x400200a0
 800440c:	400200b8 	.word	0x400200b8
 8004410:	40020410 	.word	0x40020410
 8004414:	40020428 	.word	0x40020428
 8004418:	40020440 	.word	0x40020440
 800441c:	40020458 	.word	0x40020458
 8004420:	40020470 	.word	0x40020470
 8004424:	40020488 	.word	0x40020488
 8004428:	400204a0 	.word	0x400204a0
 800442c:	400204b8 	.word	0x400204b8
 8004430:	58020400 	.word	0x58020400
 8004434:	58021000 	.word	0x58021000
 8004438:	24000494 	.word	0x24000494
 800443c:	42280000 	.word	0x42280000
 8004440:	240004bc 	.word	0x240004bc
 8004444:	240004e4 	.word	0x240004e4
 8004448:	2400050c 	.word	0x2400050c
 800444c:	24000a8c 	.word	0x24000a8c
 8004450:	24000aff 	.word	0x24000aff
 8004454:	44960000 	.word	0x44960000
 8004458:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 800445c:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8004458 <main+0x280>
 8004460:	4855      	ldr	r0, [pc, #340]	; (80045b8 <main+0x3e0>)
 8004462:	f7fd fc75 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 8004466:	20c8      	movs	r0, #200	; 0xc8
 8004468:	f002 f912 	bl	8006690 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 800446c:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80045bc <main+0x3e4>
 8004470:	4851      	ldr	r0, [pc, #324]	; (80045b8 <main+0x3e0>)
 8004472:	f7fd fc6d 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 8004476:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800447a:	f002 f909 	bl	8006690 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 800447e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80045c0 <main+0x3e8>
 8004482:	484d      	ldr	r0, [pc, #308]	; (80045b8 <main+0x3e0>)
 8004484:	f7fd fc64 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 8004488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800448c:	f002 f900 	bl	8006690 <HAL_Delay>
	gripper.GripperOpen();
 8004490:	484c      	ldr	r0, [pc, #304]	; (80045c4 <main+0x3ec>)
 8004492:	f7fd fbbd 	bl	8001c10 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 8004496:	4b4c      	ldr	r3, [pc, #304]	; (80045c8 <main+0x3f0>)
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]

	encoderJ1.AMT21_Read();
 800449c:	484b      	ldr	r0, [pc, #300]	; (80045cc <main+0x3f4>)
 800449e:	f7fc f912 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80044a2:	484a      	ldr	r0, [pc, #296]	; (80045cc <main+0x3f4>)
 80044a4:	f7fc f93e 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80044a8:	4603      	mov	r3, r0
 80044aa:	461a      	mov	r2, r3
 80044ac:	4b48      	ldr	r3, [pc, #288]	; (80045d0 <main+0x3f8>)
 80044ae:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 80044b0:	4b47      	ldr	r3, [pc, #284]	; (80045d0 <main+0x3f8>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d110      	bne.n	80044da <main+0x302>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;}
 80044b8:	4844      	ldr	r0, [pc, #272]	; (80045cc <main+0x3f4>)
 80044ba:	f7fc f997 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80044be:	4603      	mov	r3, r0
 80044c0:	ee07 3a90 	vmov	s15, r3
 80044c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80044c8:	ed9f 5b39 	vldr	d5, [pc, #228]	; 80045b0 <main+0x3d8>
 80044cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80044d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80044d4:	4b3f      	ldr	r3, [pc, #252]	; (80045d4 <main+0x3fc>)
 80044d6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ2.AMT21_Read();
 80044da:	483f      	ldr	r0, [pc, #252]	; (80045d8 <main+0x400>)
 80044dc:	f7fc f8f3 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 80044e0:	483d      	ldr	r0, [pc, #244]	; (80045d8 <main+0x400>)
 80044e2:	f7fc f91f 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80044e6:	4603      	mov	r3, r0
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b3c      	ldr	r3, [pc, #240]	; (80045dc <main+0x404>)
 80044ec:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <main+0x404>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d115      	bne.n	8004522 <main+0x34a>
		encoderJ2.unwarp();
 80044f6:	4838      	ldr	r0, [pc, #224]	; (80045d8 <main+0x400>)
 80044f8:	f7fc f99a 	bl	8000830 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 80044fc:	4836      	ldr	r0, [pc, #216]	; (80045d8 <main+0x400>)
 80044fe:	f7fc f9e9 	bl	80008d4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;}
 8004502:	4835      	ldr	r0, [pc, #212]	; (80045d8 <main+0x400>)
 8004504:	f7fc f9f3 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 8004508:	ee07 0a90 	vmov	s15, r0
 800450c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004510:	ed9f 5b27 	vldr	d5, [pc, #156]	; 80045b0 <main+0x3d8>
 8004514:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004518:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800451c:	4b30      	ldr	r3, [pc, #192]	; (80045e0 <main+0x408>)
 800451e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ3.AMT21_Read();
 8004522:	4830      	ldr	r0, [pc, #192]	; (80045e4 <main+0x40c>)
 8004524:	f7fc f8cf 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8004528:	482e      	ldr	r0, [pc, #184]	; (80045e4 <main+0x40c>)
 800452a:	f7fc f8fb 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800452e:	4603      	mov	r3, r0
 8004530:	461a      	mov	r2, r3
 8004532:	4b2d      	ldr	r3, [pc, #180]	; (80045e8 <main+0x410>)
 8004534:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8004536:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <main+0x410>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d110      	bne.n	8004560 <main+0x388>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;}
 800453e:	4829      	ldr	r0, [pc, #164]	; (80045e4 <main+0x40c>)
 8004540:	f7fc f954 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8004544:	4603      	mov	r3, r0
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800454e:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80045b0 <main+0x3d8>
 8004552:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004556:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800455a:	4b24      	ldr	r3, [pc, #144]	; (80045ec <main+0x414>)
 800455c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ4.AMT21_Read();
 8004560:	4823      	ldr	r0, [pc, #140]	; (80045f0 <main+0x418>)
 8004562:	f7fc f8b0 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8004566:	4822      	ldr	r0, [pc, #136]	; (80045f0 <main+0x418>)
 8004568:	f7fc f8dc 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800456c:	4603      	mov	r3, r0
 800456e:	461a      	mov	r2, r3
 8004570:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <main+0x41c>)
 8004572:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8004574:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <main+0x41c>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d110      	bne.n	800459e <main+0x3c6>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;}
 800457c:	481c      	ldr	r0, [pc, #112]	; (80045f0 <main+0x418>)
 800457e:	f7fc f935 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8004582:	4603      	mov	r3, r0
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800458c:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80045b0 <main+0x3d8>
 8004590:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004594:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004598:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <main+0x420>)
 800459a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz
		HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 800459e:	4817      	ldr	r0, [pc, #92]	; (80045fc <main+0x424>)
 80045a0:	f008 f8aa 	bl	800c6f8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 80045a4:	4816      	ldr	r0, [pc, #88]	; (8004600 <main+0x428>)
 80045a6:	f008 f8a7 	bl	800c6f8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 while (1)
 80045aa:	e7fe      	b.n	80045aa <main+0x3d2>
 80045ac:	f3af 8000 	nop.w
 80045b0:	645a1cac 	.word	0x645a1cac
 80045b4:	4004df3b 	.word	0x4004df3b
 80045b8:	240004bc 	.word	0x240004bc
 80045bc:	c4480000 	.word	0xc4480000
 80045c0:	00000000 	.word	0x00000000
 80045c4:	24000a8c 	.word	0x24000a8c
 80045c8:	24000aff 	.word	0x24000aff
 80045cc:	24000424 	.word	0x24000424
 80045d0:	24000aa8 	.word	0x24000aa8
 80045d4:	24000534 	.word	0x24000534
 80045d8:	24000440 	.word	0x24000440
 80045dc:	24000aa9 	.word	0x24000aa9
 80045e0:	24000618 	.word	0x24000618
 80045e4:	2400045c 	.word	0x2400045c
 80045e8:	24000aaa 	.word	0x24000aaa
 80045ec:	240006fc 	.word	0x240006fc
 80045f0:	24000478 	.word	0x24000478
 80045f4:	24000aab 	.word	0x24000aab
 80045f8:	240007e0 	.word	0x240007e0
 80045fc:	24000fd8 	.word	0x24000fd8
 8004600:	24000d2c 	.word	0x24000d2c

08004604 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b09c      	sub	sp, #112	; 0x70
 8004608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800460a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800460e:	224c      	movs	r2, #76	; 0x4c
 8004610:	2100      	movs	r1, #0
 8004612:	4618      	mov	r0, r3
 8004614:	f00d f85c 	bl	80116d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004618:	1d3b      	adds	r3, r7, #4
 800461a:	2220      	movs	r2, #32
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f00d f856 	bl	80116d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004624:	2002      	movs	r0, #2
 8004626:	f005 fb9b 	bl	8009d60 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800462a:	2300      	movs	r3, #0
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	4b38      	ldr	r3, [pc, #224]	; (8004710 <_Z18SystemClock_Configv+0x10c>)
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	4a37      	ldr	r2, [pc, #220]	; (8004710 <_Z18SystemClock_Configv+0x10c>)
 8004634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004638:	6193      	str	r3, [r2, #24]
 800463a:	4b35      	ldr	r3, [pc, #212]	; (8004710 <_Z18SystemClock_Configv+0x10c>)
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4b33      	ldr	r3, [pc, #204]	; (8004714 <_Z18SystemClock_Configv+0x110>)
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4a32      	ldr	r2, [pc, #200]	; (8004714 <_Z18SystemClock_Configv+0x110>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004650:	4b30      	ldr	r3, [pc, #192]	; (8004714 <_Z18SystemClock_Configv+0x110>)
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800465c:	4b2c      	ldr	r3, [pc, #176]	; (8004710 <_Z18SystemClock_Configv+0x10c>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004668:	bf14      	ite	ne
 800466a:	2301      	movne	r3, #1
 800466c:	2300      	moveq	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d000      	beq.n	8004676 <_Z18SystemClock_Configv+0x72>
 8004674:	e7f2      	b.n	800465c <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004676:	2302      	movs	r3, #2
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800467a:	2301      	movs	r3, #1
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800467e:	2340      	movs	r3, #64	; 0x40
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004682:	2302      	movs	r3, #2
 8004684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004686:	2300      	movs	r3, #0
 8004688:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800468a:	2304      	movs	r3, #4
 800468c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800468e:	233c      	movs	r3, #60	; 0x3c
 8004690:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004692:	2302      	movs	r3, #2
 8004694:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8004696:	2306      	movs	r3, #6
 8004698:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800469a:	2302      	movs	r3, #2
 800469c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800469e:	230c      	movs	r3, #12
 80046a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ae:	4618      	mov	r0, r3
 80046b0:	f005 fb90 	bl	8009dd4 <HAL_RCC_OscConfig>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80046c4:	f000 f856 	bl	8004774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046c8:	233f      	movs	r3, #63	; 0x3f
 80046ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046cc:	2303      	movs	r3, #3
 80046ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80046d4:	2308      	movs	r3, #8
 80046d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80046d8:	2340      	movs	r3, #64	; 0x40
 80046da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80046dc:	2340      	movs	r3, #64	; 0x40
 80046de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80046e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80046e6:	2340      	movs	r3, #64	; 0x40
 80046e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	2104      	movs	r1, #4
 80046ee:	4618      	mov	r0, r3
 80046f0:	f005 ff9c 	bl	800a62c <HAL_RCC_ClockConfig>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bf14      	ite	ne
 80046fa:	2301      	movne	r3, #1
 80046fc:	2300      	moveq	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004704:	f000 f836 	bl	8004774 <Error_Handler>
  }
}
 8004708:	bf00      	nop
 800470a:	3770      	adds	r7, #112	; 0x70
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	58024800 	.word	0x58024800
 8004714:	58000400 	.word	0x58000400

08004718 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//
//}
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LM_Z_BOTTOM_Pin){	// Limit Switch Bottom Z-axis
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004728:	d102      	bne.n	8004730 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 800472a:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <HAL_GPIO_EXTI_Callback+0x4c>)
 800472c:	2201      	movs	r2, #1
 800472e:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_Z_TOP_Pin){	// Limit Switch Top Z-axis
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004736:	d102      	bne.n	800473e <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_GPIO_EXTI_Callback+0x50>)
 800473a:	2201      	movs	r2, #1
 800473c:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_SERVO_Pin){	// Limit Switch Servo
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	2b80      	cmp	r3, #128	; 0x80
 8004742:	d102      	bne.n	800474a <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <HAL_GPIO_EXTI_Callback+0x54>)
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_LED_Pin){	// Limit Switch LED on Cabinet
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d102      	bne.n	8004756 <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_GPIO_EXTI_Callback+0x58>)
 8004752:	2201      	movs	r2, #1
 8004754:	701a      	strb	r2, [r3, #0]
	}


}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	24000afe 	.word	0x24000afe
 8004768:	24000aff 	.word	0x24000aff
 800476c:	24000b00 	.word	0x24000b00
 8004770:	24000b01 	.word	0x24000b01

08004774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004778:	2200      	movs	r2, #0
 800477a:	2101      	movs	r1, #1
 800477c:	4808      	ldr	r0, [pc, #32]	; (80047a0 <Error_Handler+0x2c>)
 800477e:	f005 fabb 	bl	8009cf8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004782:	2200      	movs	r2, #0
 8004784:	2102      	movs	r1, #2
 8004786:	4807      	ldr	r0, [pc, #28]	; (80047a4 <Error_Handler+0x30>)
 8004788:	f005 fab6 	bl	8009cf8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800478c:	2201      	movs	r2, #1
 800478e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004792:	4803      	ldr	r0, [pc, #12]	; (80047a0 <Error_Handler+0x2c>)
 8004794:	f005 fab0 	bl	8009cf8 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004798:	b672      	cpsid	i
}
 800479a:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 800479c:	e7fe      	b.n	800479c <Error_Handler+0x28>
 800479e:	bf00      	nop
 80047a0:	58020400 	.word	0x58020400
 80047a4:	58021000 	.word	0x58021000

080047a8 <_Z41__static_initialization_and_destruction_0ii>:
}
  /* USER CODE END Error_Handler_Debug */
}
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d152      	bne.n	800485e <_Z41__static_initialization_and_destruction_0ii+0xb6>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047be:	4293      	cmp	r3, r2
 80047c0:	d14d      	bne.n	800485e <_Z41__static_initialization_and_destruction_0ii+0xb6>
AMT21 encoderJ1(&huart4, 0xD4);
 80047c2:	22d4      	movs	r2, #212	; 0xd4
 80047c4:	4942      	ldr	r1, [pc, #264]	; (80048d0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80047c6:	4843      	ldr	r0, [pc, #268]	; (80048d4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80047c8:	f7fb ff5e 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 80047cc:	22b4      	movs	r2, #180	; 0xb4
 80047ce:	4940      	ldr	r1, [pc, #256]	; (80048d0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80047d0:	4841      	ldr	r0, [pc, #260]	; (80048d8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80047d2:	f7fb ff59 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 80047d6:	22c4      	movs	r2, #196	; 0xc4
 80047d8:	493d      	ldr	r1, [pc, #244]	; (80048d0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80047da:	4840      	ldr	r0, [pc, #256]	; (80048dc <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80047dc:	f7fb ff54 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 80047e0:	22a4      	movs	r2, #164	; 0xa4
 80047e2:	493b      	ldr	r1, [pc, #236]	; (80048d0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80047e4:	483e      	ldr	r0, [pc, #248]	; (80048e0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80047e6:	f7fb ff4f 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80047ea:	2320      	movs	r3, #32
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	493d      	ldr	r1, [pc, #244]	; (80048e8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80047f4:	483d      	ldr	r0, [pc, #244]	; (80048ec <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80047f6:	f7fd fa4d 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80047fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004802:	2204      	movs	r2, #4
 8004804:	493b      	ldr	r1, [pc, #236]	; (80048f4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004806:	483c      	ldr	r0, [pc, #240]	; (80048f8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004808:	f7fd fa44 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 800480c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004814:	2204      	movs	r2, #4
 8004816:	4939      	ldr	r1, [pc, #228]	; (80048fc <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004818:	4839      	ldr	r0, [pc, #228]	; (8004900 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800481a:	f7fd fa3b 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 800481e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004826:	2208      	movs	r2, #8
 8004828:	4936      	ldr	r1, [pc, #216]	; (8004904 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800482a:	4837      	ldr	r0, [pc, #220]	; (8004908 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800482c:	f7fd fa32 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004830:	4836      	ldr	r0, [pc, #216]	; (800490c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004832:	f7fc f88d 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004836:	4836      	ldr	r0, [pc, #216]	; (8004910 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004838:	f7fc f88a 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 800483c:	4835      	ldr	r0, [pc, #212]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800483e:	f7fc f887 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004842:	4835      	ldr	r0, [pc, #212]	; (8004918 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004844:	f7fc f884 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004848:	4834      	ldr	r0, [pc, #208]	; (800491c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800484a:	f7fc f881 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 800484e:	4834      	ldr	r0, [pc, #208]	; (8004920 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004850:	f7fc f87e 	bl	8000950 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004854:	2208      	movs	r2, #8
 8004856:	4933      	ldr	r1, [pc, #204]	; (8004924 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004858:	4833      	ldr	r0, [pc, #204]	; (8004928 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 800485a:	f7fc ff91 	bl	8001780 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d131      	bne.n	80048c8 <_Z41__static_initialization_and_destruction_0ii+0x120>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800486a:	4293      	cmp	r3, r2
 800486c:	d12c      	bne.n	80048c8 <_Z41__static_initialization_and_destruction_0ii+0x120>
 800486e:	482e      	ldr	r0, [pc, #184]	; (8004928 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004870:	f7fc ffb6 	bl	80017e0 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004874:	482a      	ldr	r0, [pc, #168]	; (8004920 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004876:	f7fc f8db 	bl	8000a30 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 800487a:	4828      	ldr	r0, [pc, #160]	; (800491c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800487c:	f7fc f8d8 	bl	8000a30 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8004880:	4825      	ldr	r0, [pc, #148]	; (8004918 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004882:	f7fc f8d5 	bl	8000a30 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8004886:	4823      	ldr	r0, [pc, #140]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004888:	f7fc f8d2 	bl	8000a30 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 800488c:	4820      	ldr	r0, [pc, #128]	; (8004910 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800488e:	f7fc f8cf 	bl	8000a30 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8004892:	481e      	ldr	r0, [pc, #120]	; (800490c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004894:	f7fc f8cc 	bl	8000a30 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004898:	481b      	ldr	r0, [pc, #108]	; (8004908 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800489a:	f7fd fa3d 	bl	8001d18 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 800489e:	4818      	ldr	r0, [pc, #96]	; (8004900 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80048a0:	f7fd fa3a 	bl	8001d18 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80048a4:	4814      	ldr	r0, [pc, #80]	; (80048f8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80048a6:	f7fd fa37 	bl	8001d18 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80048aa:	4810      	ldr	r0, [pc, #64]	; (80048ec <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80048ac:	f7fd fa34 	bl	8001d18 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 80048b0:	480b      	ldr	r0, [pc, #44]	; (80048e0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80048b2:	f7fb fefd 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 80048b6:	4809      	ldr	r0, [pc, #36]	; (80048dc <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80048b8:	f7fb fefa 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 80048bc:	4806      	ldr	r0, [pc, #24]	; (80048d8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80048be:	f7fb fef7 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 80048c2:	4804      	ldr	r0, [pc, #16]	; (80048d4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80048c4:	f7fb fef4 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 80048c8:	bf00      	nop
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	24001460 	.word	0x24001460
 80048d4:	24000424 	.word	0x24000424
 80048d8:	24000440 	.word	0x24000440
 80048dc:	2400045c 	.word	0x2400045c
 80048e0:	24000478 	.word	0x24000478
 80048e4:	58020400 	.word	0x58020400
 80048e8:	24000dc4 	.word	0x24000dc4
 80048ec:	24000494 	.word	0x24000494
 80048f0:	58021000 	.word	0x58021000
 80048f4:	24000ea8 	.word	0x24000ea8
 80048f8:	240004bc 	.word	0x240004bc
 80048fc:	24000ce0 	.word	0x24000ce0
 8004900:	240004e4 	.word	0x240004e4
 8004904:	24000ef4 	.word	0x24000ef4
 8004908:	2400050c 	.word	0x2400050c
 800490c:	24000534 	.word	0x24000534
 8004910:	24000618 	.word	0x24000618
 8004914:	240006fc 	.word	0x240006fc
 8004918:	240007e0 	.word	0x240007e0
 800491c:	240008c4 	.word	0x240008c4
 8004920:	240009a8 	.word	0x240009a8
 8004924:	24000c94 	.word	0x24000c94
 8004928:	24000a8c 	.word	0x24000a8c

0800492c <_GLOBAL__sub_I_TIM_MS>:
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
 8004930:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004934:	2001      	movs	r0, #1
 8004936:	f7ff ff37 	bl	80047a8 <_Z41__static_initialization_and_destruction_0ii>
 800493a:	bd80      	pop	{r7, pc}

0800493c <_GLOBAL__sub_D_TIM_MS>:
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
 8004940:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004944:	2000      	movs	r0, #0
 8004946:	f7ff ff2f 	bl	80047a8 <_Z41__static_initialization_and_destruction_0ii>
 800494a:	bd80      	pop	{r7, pc}

0800494c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004950:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <MX_SPI3_Init+0xa4>)
 8004952:	4a28      	ldr	r2, [pc, #160]	; (80049f4 <MX_SPI3_Init+0xa8>)
 8004954:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004956:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <MX_SPI3_Init+0xa4>)
 8004958:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800495c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800495e:	4b24      	ldr	r3, [pc, #144]	; (80049f0 <MX_SPI3_Init+0xa4>)
 8004960:	2200      	movs	r2, #0
 8004962:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004964:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <MX_SPI3_Init+0xa4>)
 8004966:	2203      	movs	r2, #3
 8004968:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800496a:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <MX_SPI3_Init+0xa4>)
 800496c:	2200      	movs	r2, #0
 800496e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004970:	4b1f      	ldr	r3, [pc, #124]	; (80049f0 <MX_SPI3_Init+0xa4>)
 8004972:	2200      	movs	r2, #0
 8004974:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004976:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <MX_SPI3_Init+0xa4>)
 8004978:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800497c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800497e:	4b1c      	ldr	r3, [pc, #112]	; (80049f0 <MX_SPI3_Init+0xa4>)
 8004980:	2200      	movs	r2, #0
 8004982:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004984:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <MX_SPI3_Init+0xa4>)
 8004986:	2200      	movs	r2, #0
 8004988:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800498a:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <MX_SPI3_Init+0xa4>)
 800498c:	2200      	movs	r2, #0
 800498e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004990:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <MX_SPI3_Init+0xa4>)
 8004992:	2200      	movs	r2, #0
 8004994:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004996:	4b16      	ldr	r3, [pc, #88]	; (80049f0 <MX_SPI3_Init+0xa4>)
 8004998:	2200      	movs	r2, #0
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800499c:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <MX_SPI3_Init+0xa4>)
 800499e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049a2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80049a4:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <MX_SPI3_Init+0xa4>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80049aa:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <MX_SPI3_Init+0xa4>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80049b0:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <MX_SPI3_Init+0xa4>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80049b6:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <MX_SPI3_Init+0xa4>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80049bc:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <MX_SPI3_Init+0xa4>)
 80049be:	2200      	movs	r2, #0
 80049c0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <MX_SPI3_Init+0xa4>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <MX_SPI3_Init+0xa4>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <MX_SPI3_Init+0xa4>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <MX_SPI3_Init+0xa4>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80049da:	4805      	ldr	r0, [pc, #20]	; (80049f0 <MX_SPI3_Init+0xa4>)
 80049dc:	f007 fd14 	bl	800c408 <HAL_SPI_Init>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80049e6:	f7ff fec5 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	24000c0c 	.word	0x24000c0c
 80049f4:	40003c00 	.word	0x40003c00

080049f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b0b8      	sub	sp, #224	; 0xe0
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	60da      	str	r2, [r3, #12]
 8004a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a10:	f107 0310 	add.w	r3, r7, #16
 8004a14:	22bc      	movs	r2, #188	; 0xbc
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f00c fe59 	bl	80116d0 <memset>
  if(spiHandle->Instance==SPI3)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <HAL_SPI_MspInit+0xc0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d142      	bne.n	8004aae <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a32:	f107 0310 	add.w	r3, r7, #16
 8004a36:	4618      	mov	r0, r3
 8004a38:	f006 f984 	bl	800ad44 <HAL_RCCEx_PeriphCLKConfig>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8004a42:	f7ff fe97 	bl	8004774 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <HAL_SPI_MspInit+0xc4>)
 8004a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_SPI_MspInit+0xc4>)
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a56:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_SPI_MspInit+0xc4>)
 8004a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <HAL_SPI_MspInit+0xc4>)
 8004a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a6a:	4a14      	ldr	r2, [pc, #80]	; (8004abc <HAL_SPI_MspInit+0xc4>)
 8004a6c:	f043 0304 	orr.w	r3, r3, #4
 8004a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a74:	4b11      	ldr	r3, [pc, #68]	; (8004abc <HAL_SPI_MspInit+0xc4>)
 8004a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004a82:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004a86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004a9c:	2306      	movs	r3, #6
 8004a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4805      	ldr	r0, [pc, #20]	; (8004ac0 <HAL_SPI_MspInit+0xc8>)
 8004aaa:	f004 ff75 	bl	8009998 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004aae:	bf00      	nop
 8004ab0:	37e0      	adds	r7, #224	; 0xe0
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40003c00 	.word	0x40003c00
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	58020800 	.word	0x58020800

08004ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <HAL_MspInit+0x30>)
 8004acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ad0:	4a08      	ldr	r2, [pc, #32]	; (8004af4 <HAL_MspInit+0x30>)
 8004ad2:	f043 0302 	orr.w	r3, r3, #2
 8004ad6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_MspInit+0x30>)
 8004adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	58024400 	.word	0x58024400

08004af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004afc:	e7fe      	b.n	8004afc <NMI_Handler+0x4>

08004afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b02:	e7fe      	b.n	8004b02 <HardFault_Handler+0x4>

08004b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b08:	e7fe      	b.n	8004b08 <MemManage_Handler+0x4>

08004b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b0e:	e7fe      	b.n	8004b0e <BusFault_Handler+0x4>

08004b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b14:	e7fe      	b.n	8004b14 <UsageFault_Handler+0x4>

08004b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b16:	b480      	push	{r7}
 8004b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b1a:	bf00      	nop
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b32:	b480      	push	{r7}
 8004b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b36:	bf00      	nop
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b44:	f001 fd84 	bl	8006650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004b48:	f001 fee1 	bl	800690e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004b4c:	bf00      	nop
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004b54:	4802      	ldr	r0, [pc, #8]	; (8004b60 <DMA1_Stream0_IRQHandler+0x10>)
 8004b56:	f003 fc0d 	bl	8008374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004b5a:	bf00      	nop
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	24001370 	.word	0x24001370

08004b64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004b68:	4802      	ldr	r0, [pc, #8]	; (8004b74 <DMA1_Stream1_IRQHandler+0x10>)
 8004b6a:	f003 fc03 	bl	8008374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	240011f0 	.word	0x240011f0

08004b78 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004b7c:	4802      	ldr	r0, [pc, #8]	; (8004b88 <DMA1_Stream2_IRQHandler+0x10>)
 8004b7e:	f003 fbf9 	bl	8008374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004b82:	bf00      	nop
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	240012f8 	.word	0x240012f8

08004b8c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004b90:	4802      	ldr	r0, [pc, #8]	; (8004b9c <DMA1_Stream3_IRQHandler+0x10>)
 8004b92:	f003 fbef 	bl	8008374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	24001070 	.word	0x24001070

08004ba0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004ba4:	4802      	ldr	r0, [pc, #8]	; (8004bb0 <DMA1_Stream4_IRQHandler+0x10>)
 8004ba6:	f003 fbe5 	bl	8008374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004baa:	bf00      	nop
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	24001580 	.word	0x24001580

08004bb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004bb8:	4802      	ldr	r0, [pc, #8]	; (8004bc4 <DMA1_Stream5_IRQHandler+0x10>)
 8004bba:	f003 fbdb 	bl	8008374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	240010e8 	.word	0x240010e8

08004bc8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004bcc:	4802      	ldr	r0, [pc, #8]	; (8004bd8 <DMA1_Stream6_IRQHandler+0x10>)
 8004bce:	f003 fbd1 	bl	8008374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	240013e8 	.word	0x240013e8

08004bdc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8004be0:	2040      	movs	r0, #64	; 0x40
 8004be2:	f005 f8a2 	bl	8009d2a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8004be6:	2080      	movs	r0, #128	; 0x80
 8004be8:	f005 f89f 	bl	8009d2a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004bec:	bf00      	nop
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004bf4:	4802      	ldr	r0, [pc, #8]	; (8004c00 <USART2_IRQHandler+0x10>)
 8004bf6:	f009 fa93 	bl	800e120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	240014f0 	.word	0x240014f0

08004c04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004c08:	4802      	ldr	r0, [pc, #8]	; (8004c14 <USART3_IRQHandler+0x10>)
 8004c0a:	f009 fa89 	bl	800e120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004c0e:	bf00      	nop
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	24001268 	.word	0x24001268

08004c18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8004c1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c20:	f005 f883 	bl	8009d2a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8004c24:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c28:	f005 f87f 	bl	8009d2a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 8004c2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c30:	f005 f87b 	bl	8009d2a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8004c34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c38:	f005 f877 	bl	8009d2a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c3c:	bf00      	nop
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004c46:	f007 ff6d 	bl	800cb24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	24000f8c 	.word	0x24000f8c

08004c54 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004c58:	4802      	ldr	r0, [pc, #8]	; (8004c64 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004c5a:	f007 ff63 	bl	800cb24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	24000e10 	.word	0x24000e10

08004c68 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004c6c:	4802      	ldr	r0, [pc, #8]	; (8004c78 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004c6e:	f007 ff59 	bl	800cb24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004c72:	bf00      	nop
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	24000f40 	.word	0x24000f40

08004c7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004c80:	4802      	ldr	r0, [pc, #8]	; (8004c8c <TIM5_IRQHandler+0x10>)
 8004c82:	f007 ff4f 	bl	800cb24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004c86:	bf00      	nop
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	24000d78 	.word	0x24000d78

08004c90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004c94:	4802      	ldr	r0, [pc, #8]	; (8004ca0 <UART4_IRQHandler+0x10>)
 8004c96:	f009 fa43 	bl	800e120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	24001460 	.word	0x24001460

08004ca4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ca8:	4802      	ldr	r0, [pc, #8]	; (8004cb4 <TIM6_DAC_IRQHandler+0x10>)
 8004caa:	f007 ff3b 	bl	800cb24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	24000e5c 	.word	0x24000e5c

08004cb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004cbc:	4802      	ldr	r0, [pc, #8]	; (8004cc8 <TIM7_IRQHandler+0x10>)
 8004cbe:	f007 ff31 	bl	800cb24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	24001024 	.word	0x24001024

08004ccc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004cd0:	4802      	ldr	r0, [pc, #8]	; (8004cdc <UART7_IRQHandler+0x10>)
 8004cd2:	f009 fa25 	bl	800e120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	24001160 	.word	0x24001160

08004ce0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004ce4:	4802      	ldr	r0, [pc, #8]	; (8004cf0 <TIM16_IRQHandler+0x10>)
 8004ce6:	f007 ff1d 	bl	800cb24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	24000fd8 	.word	0x24000fd8

08004cf4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004cf8:	4802      	ldr	r0, [pc, #8]	; (8004d04 <TIM17_IRQHandler+0x10>)
 8004cfa:	f007 ff13 	bl	800cb24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	24000d2c 	.word	0x24000d2c

08004d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
	return 1;
 8004d0c:	2301      	movs	r3, #1
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <_kill>:

int _kill(int pid, int sig)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004d22:	f00c fcab 	bl	801167c <__errno>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2216      	movs	r2, #22
 8004d2a:	601a      	str	r2, [r3, #0]
	return -1;
 8004d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <_exit>:

void _exit (int status)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004d40:	f04f 31ff 	mov.w	r1, #4294967295
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff ffe7 	bl	8004d18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004d4a:	e7fe      	b.n	8004d4a <_exit+0x12>

08004d4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e00a      	b.n	8004d74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d5e:	f3af 8000 	nop.w
 8004d62:	4601      	mov	r1, r0
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	60ba      	str	r2, [r7, #8]
 8004d6a:	b2ca      	uxtb	r2, r1
 8004d6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3301      	adds	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	dbf0      	blt.n	8004d5e <_read+0x12>
	}

return len;
 8004d7c:	687b      	ldr	r3, [r7, #4]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e009      	b.n	8004dac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	60ba      	str	r2, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	3301      	adds	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	dbf1      	blt.n	8004d98 <_write+0x12>
	}
	return len;
 8004db4:	687b      	ldr	r3, [r7, #4]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <_close>:

int _close(int file)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
	return -1;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004de6:	605a      	str	r2, [r3, #4]
	return 0;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <_isatty>:

int _isatty(int file)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
	return 1;
 8004dfe:	2301      	movs	r3, #1
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
	return 0;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e30:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <_sbrk+0x5c>)
 8004e32:	4b15      	ldr	r3, [pc, #84]	; (8004e88 <_sbrk+0x60>)
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <_sbrk+0x64>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e44:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <_sbrk+0x64>)
 8004e46:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <_sbrk+0x68>)
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e4a:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <_sbrk+0x64>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d207      	bcs.n	8004e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e58:	f00c fc10 	bl	801167c <__errno>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	220c      	movs	r2, #12
 8004e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295
 8004e66:	e009      	b.n	8004e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e68:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <_sbrk+0x64>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e6e:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <_sbrk+0x64>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	4a05      	ldr	r2, [pc, #20]	; (8004e8c <_sbrk+0x64>)
 8004e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	24001c10 	.word	0x24001c10
 8004e88:	00000400 	.word	0x00000400
 8004e8c:	24000bdc 	.word	0x24000bdc
 8004e90:	24001610 	.word	0x24001610

08004e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e98:	4b39      	ldr	r3, [pc, #228]	; (8004f80 <SystemInit+0xec>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	4a38      	ldr	r2, [pc, #224]	; (8004f80 <SystemInit+0xec>)
 8004ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ea8:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <SystemInit+0xf0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	2b06      	cmp	r3, #6
 8004eb2:	d807      	bhi.n	8004ec4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004eb4:	4b33      	ldr	r3, [pc, #204]	; (8004f84 <SystemInit+0xf0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 030f 	bic.w	r3, r3, #15
 8004ebc:	4a31      	ldr	r2, [pc, #196]	; (8004f84 <SystemInit+0xf0>)
 8004ebe:	f043 0307 	orr.w	r3, r3, #7
 8004ec2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004ec4:	4b30      	ldr	r3, [pc, #192]	; (8004f88 <SystemInit+0xf4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2f      	ldr	r2, [pc, #188]	; (8004f88 <SystemInit+0xf4>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ed0:	4b2d      	ldr	r3, [pc, #180]	; (8004f88 <SystemInit+0xf4>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004ed6:	4b2c      	ldr	r3, [pc, #176]	; (8004f88 <SystemInit+0xf4>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	492b      	ldr	r1, [pc, #172]	; (8004f88 <SystemInit+0xf4>)
 8004edc:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <SystemInit+0xf8>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ee2:	4b28      	ldr	r3, [pc, #160]	; (8004f84 <SystemInit+0xf0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004eee:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <SystemInit+0xf0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 030f 	bic.w	r3, r3, #15
 8004ef6:	4a23      	ldr	r2, [pc, #140]	; (8004f84 <SystemInit+0xf0>)
 8004ef8:	f043 0307 	orr.w	r3, r3, #7
 8004efc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004efe:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <SystemInit+0xf4>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004f04:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <SystemInit+0xf4>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004f0a:	4b1f      	ldr	r3, [pc, #124]	; (8004f88 <SystemInit+0xf4>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004f10:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <SystemInit+0xf4>)
 8004f12:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <SystemInit+0xfc>)
 8004f14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004f16:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <SystemInit+0xf4>)
 8004f18:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <SystemInit+0x100>)
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <SystemInit+0xf4>)
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <SystemInit+0x104>)
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004f22:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <SystemInit+0xf4>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004f28:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <SystemInit+0xf4>)
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <SystemInit+0x104>)
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004f2e:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <SystemInit+0xf4>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004f34:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <SystemInit+0xf4>)
 8004f36:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <SystemInit+0x104>)
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004f3a:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <SystemInit+0xf4>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f40:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <SystemInit+0xf4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a10      	ldr	r2, [pc, #64]	; (8004f88 <SystemInit+0xf4>)
 8004f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <SystemInit+0xf4>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <SystemInit+0x108>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <SystemInit+0x10c>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f5e:	d202      	bcs.n	8004f66 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004f60:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <SystemInit+0x110>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <SystemInit+0x114>)
 8004f68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <SystemInit+0xec>)
 8004f70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f74:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004f76:	bf00      	nop
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	e000ed00 	.word	0xe000ed00
 8004f84:	52002000 	.word	0x52002000
 8004f88:	58024400 	.word	0x58024400
 8004f8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004f90:	02020200 	.word	0x02020200
 8004f94:	01ff0000 	.word	0x01ff0000
 8004f98:	01010280 	.word	0x01010280
 8004f9c:	5c001000 	.word	0x5c001000
 8004fa0:	ffff0000 	.word	0xffff0000
 8004fa4:	51008108 	.word	0x51008108
 8004fa8:	52004000 	.word	0x52004000

08004fac <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b09a      	sub	sp, #104	; 0x68
 8004fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
 8004fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
 8004fd8:	60da      	str	r2, [r3, #12]
 8004fda:	611a      	str	r2, [r3, #16]
 8004fdc:	615a      	str	r2, [r3, #20]
 8004fde:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004fe0:	1d3b      	adds	r3, r7, #4
 8004fe2:	222c      	movs	r2, #44	; 0x2c
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f00c fb72 	bl	80116d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004fec:	4b44      	ldr	r3, [pc, #272]	; (8005100 <MX_TIM1_Init+0x154>)
 8004fee:	4a45      	ldr	r2, [pc, #276]	; (8005104 <MX_TIM1_Init+0x158>)
 8004ff0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8004ff2:	4b43      	ldr	r3, [pc, #268]	; (8005100 <MX_TIM1_Init+0x154>)
 8004ff4:	22c7      	movs	r2, #199	; 0xc7
 8004ff6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ff8:	4b41      	ldr	r3, [pc, #260]	; (8005100 <MX_TIM1_Init+0x154>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8004ffe:	4b40      	ldr	r3, [pc, #256]	; (8005100 <MX_TIM1_Init+0x154>)
 8005000:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005004:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005006:	4b3e      	ldr	r3, [pc, #248]	; (8005100 <MX_TIM1_Init+0x154>)
 8005008:	2200      	movs	r2, #0
 800500a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800500c:	4b3c      	ldr	r3, [pc, #240]	; (8005100 <MX_TIM1_Init+0x154>)
 800500e:	2200      	movs	r2, #0
 8005010:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005012:	4b3b      	ldr	r3, [pc, #236]	; (8005100 <MX_TIM1_Init+0x154>)
 8005014:	2280      	movs	r2, #128	; 0x80
 8005016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005018:	4839      	ldr	r0, [pc, #228]	; (8005100 <MX_TIM1_Init+0x154>)
 800501a:	f007 fb16 	bl	800c64a <HAL_TIM_Base_Init>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005024:	f7ff fba6 	bl	8004774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800502c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800502e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005032:	4619      	mov	r1, r3
 8005034:	4832      	ldr	r0, [pc, #200]	; (8005100 <MX_TIM1_Init+0x154>)
 8005036:	f007 ffa9 	bl	800cf8c <HAL_TIM_ConfigClockSource>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005040:	f7ff fb98 	bl	8004774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005044:	482e      	ldr	r0, [pc, #184]	; (8005100 <MX_TIM1_Init+0x154>)
 8005046:	f007 fbfe 	bl	800c846 <HAL_TIM_PWM_Init>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005050:	f7ff fb90 	bl	8004774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005054:	2300      	movs	r3, #0
 8005056:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005058:	2300      	movs	r3, #0
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800505c:	2300      	movs	r3, #0
 800505e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005060:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005064:	4619      	mov	r1, r3
 8005066:	4826      	ldr	r0, [pc, #152]	; (8005100 <MX_TIM1_Init+0x154>)
 8005068:	f008 fce4 	bl	800da34 <HAL_TIMEx_MasterConfigSynchronization>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005072:	f7ff fb7f 	bl	8004774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005076:	2360      	movs	r3, #96	; 0x60
 8005078:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800507a:	f240 1339 	movw	r3, #313	; 0x139
 800507e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005080:	2300      	movs	r3, #0
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005084:	2300      	movs	r3, #0
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005088:	2300      	movs	r3, #0
 800508a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800508c:	2300      	movs	r3, #0
 800508e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005090:	2300      	movs	r3, #0
 8005092:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005098:	2204      	movs	r2, #4
 800509a:	4619      	mov	r1, r3
 800509c:	4818      	ldr	r0, [pc, #96]	; (8005100 <MX_TIM1_Init+0x154>)
 800509e:	f007 fe61 	bl	800cd64 <HAL_TIM_PWM_ConfigChannel>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80050a8:	f7ff fb64 	bl	8004774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80050c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80050ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80050d8:	2300      	movs	r3, #0
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80050dc:	1d3b      	adds	r3, r7, #4
 80050de:	4619      	mov	r1, r3
 80050e0:	4807      	ldr	r0, [pc, #28]	; (8005100 <MX_TIM1_Init+0x154>)
 80050e2:	f008 fd35 	bl	800db50 <HAL_TIMEx_ConfigBreakDeadTime>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80050ec:	f7ff fb42 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80050f0:	4803      	ldr	r0, [pc, #12]	; (8005100 <MX_TIM1_Init+0x154>)
 80050f2:	f000 fd0f 	bl	8005b14 <HAL_TIM_MspPostInit>

}
 80050f6:	bf00      	nop
 80050f8:	3768      	adds	r7, #104	; 0x68
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	24000ea8 	.word	0x24000ea8
 8005104:	40010000 	.word	0x40010000

08005108 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08e      	sub	sp, #56	; 0x38
 800510c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800510e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	605a      	str	r2, [r3, #4]
 8005118:	609a      	str	r2, [r3, #8]
 800511a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800511c:	f107 031c 	add.w	r3, r7, #28
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005128:	463b      	mov	r3, r7
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	605a      	str	r2, [r3, #4]
 8005130:	609a      	str	r2, [r3, #8]
 8005132:	60da      	str	r2, [r3, #12]
 8005134:	611a      	str	r2, [r3, #16]
 8005136:	615a      	str	r2, [r3, #20]
 8005138:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800513a:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <MX_TIM2_Init+0xec>)
 800513c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005140:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8005142:	4b2c      	ldr	r3, [pc, #176]	; (80051f4 <MX_TIM2_Init+0xec>)
 8005144:	22c7      	movs	r2, #199	; 0xc7
 8005146:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005148:	4b2a      	ldr	r3, [pc, #168]	; (80051f4 <MX_TIM2_Init+0xec>)
 800514a:	2200      	movs	r2, #0
 800514c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800514e:	4b29      	ldr	r3, [pc, #164]	; (80051f4 <MX_TIM2_Init+0xec>)
 8005150:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005154:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005156:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <MX_TIM2_Init+0xec>)
 8005158:	2200      	movs	r2, #0
 800515a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800515c:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <MX_TIM2_Init+0xec>)
 800515e:	2280      	movs	r2, #128	; 0x80
 8005160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005162:	4824      	ldr	r0, [pc, #144]	; (80051f4 <MX_TIM2_Init+0xec>)
 8005164:	f007 fa71 	bl	800c64a <HAL_TIM_Base_Init>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800516e:	f7ff fb01 	bl	8004774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800517c:	4619      	mov	r1, r3
 800517e:	481d      	ldr	r0, [pc, #116]	; (80051f4 <MX_TIM2_Init+0xec>)
 8005180:	f007 ff04 	bl	800cf8c <HAL_TIM_ConfigClockSource>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800518a:	f7ff faf3 	bl	8004774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800518e:	4819      	ldr	r0, [pc, #100]	; (80051f4 <MX_TIM2_Init+0xec>)
 8005190:	f007 fb59 	bl	800c846 <HAL_TIM_PWM_Init>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800519a:	f7ff faeb 	bl	8004774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80051a6:	f107 031c 	add.w	r3, r7, #28
 80051aa:	4619      	mov	r1, r3
 80051ac:	4811      	ldr	r0, [pc, #68]	; (80051f4 <MX_TIM2_Init+0xec>)
 80051ae:	f008 fc41 	bl	800da34 <HAL_TIMEx_MasterConfigSynchronization>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80051b8:	f7ff fadc 	bl	8004774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051bc:	2360      	movs	r3, #96	; 0x60
 80051be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80051c0:	f240 1339 	movw	r3, #313	; 0x139
 80051c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80051ce:	463b      	mov	r3, r7
 80051d0:	2208      	movs	r2, #8
 80051d2:	4619      	mov	r1, r3
 80051d4:	4807      	ldr	r0, [pc, #28]	; (80051f4 <MX_TIM2_Init+0xec>)
 80051d6:	f007 fdc5 	bl	800cd64 <HAL_TIM_PWM_ConfigChannel>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80051e0:	f7ff fac8 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80051e4:	4803      	ldr	r0, [pc, #12]	; (80051f4 <MX_TIM2_Init+0xec>)
 80051e6:	f000 fc95 	bl	8005b14 <HAL_TIM_MspPostInit>

}
 80051ea:	bf00      	nop
 80051ec:	3738      	adds	r7, #56	; 0x38
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	24000ef4 	.word	0x24000ef4

080051f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08e      	sub	sp, #56	; 0x38
 80051fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	605a      	str	r2, [r3, #4]
 8005208:	609a      	str	r2, [r3, #8]
 800520a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800520c:	f107 031c 	add.w	r3, r7, #28
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005218:	463b      	mov	r3, r7
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	609a      	str	r2, [r3, #8]
 8005222:	60da      	str	r2, [r3, #12]
 8005224:	611a      	str	r2, [r3, #16]
 8005226:	615a      	str	r2, [r3, #20]
 8005228:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800522a:	4b2d      	ldr	r3, [pc, #180]	; (80052e0 <MX_TIM3_Init+0xe8>)
 800522c:	4a2d      	ldr	r2, [pc, #180]	; (80052e4 <MX_TIM3_Init+0xec>)
 800522e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005230:	4b2b      	ldr	r3, [pc, #172]	; (80052e0 <MX_TIM3_Init+0xe8>)
 8005232:	22c7      	movs	r2, #199	; 0xc7
 8005234:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005236:	4b2a      	ldr	r3, [pc, #168]	; (80052e0 <MX_TIM3_Init+0xe8>)
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 800523c:	4b28      	ldr	r3, [pc, #160]	; (80052e0 <MX_TIM3_Init+0xe8>)
 800523e:	f640 125f 	movw	r2, #2399	; 0x95f
 8005242:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005244:	4b26      	ldr	r3, [pc, #152]	; (80052e0 <MX_TIM3_Init+0xe8>)
 8005246:	2200      	movs	r2, #0
 8005248:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800524a:	4b25      	ldr	r3, [pc, #148]	; (80052e0 <MX_TIM3_Init+0xe8>)
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005250:	4823      	ldr	r0, [pc, #140]	; (80052e0 <MX_TIM3_Init+0xe8>)
 8005252:	f007 f9fa 	bl	800c64a <HAL_TIM_Base_Init>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800525c:	f7ff fa8a 	bl	8004774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800526a:	4619      	mov	r1, r3
 800526c:	481c      	ldr	r0, [pc, #112]	; (80052e0 <MX_TIM3_Init+0xe8>)
 800526e:	f007 fe8d 	bl	800cf8c <HAL_TIM_ConfigClockSource>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005278:	f7ff fa7c 	bl	8004774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800527c:	4818      	ldr	r0, [pc, #96]	; (80052e0 <MX_TIM3_Init+0xe8>)
 800527e:	f007 fae2 	bl	800c846 <HAL_TIM_PWM_Init>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005288:	f7ff fa74 	bl	8004774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005290:	2300      	movs	r3, #0
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005294:	f107 031c 	add.w	r3, r7, #28
 8005298:	4619      	mov	r1, r3
 800529a:	4811      	ldr	r0, [pc, #68]	; (80052e0 <MX_TIM3_Init+0xe8>)
 800529c:	f008 fbca 	bl	800da34 <HAL_TIMEx_MasterConfigSynchronization>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80052a6:	f7ff fa65 	bl	8004774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052aa:	2360      	movs	r3, #96	; 0x60
 80052ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052ba:	463b      	mov	r3, r7
 80052bc:	2200      	movs	r2, #0
 80052be:	4619      	mov	r1, r3
 80052c0:	4807      	ldr	r0, [pc, #28]	; (80052e0 <MX_TIM3_Init+0xe8>)
 80052c2:	f007 fd4f 	bl	800cd64 <HAL_TIM_PWM_ConfigChannel>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80052cc:	f7ff fa52 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80052d0:	4803      	ldr	r0, [pc, #12]	; (80052e0 <MX_TIM3_Init+0xe8>)
 80052d2:	f000 fc1f 	bl	8005b14 <HAL_TIM_MspPostInit>

}
 80052d6:	bf00      	nop
 80052d8:	3738      	adds	r7, #56	; 0x38
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	24000dc4 	.word	0x24000dc4
 80052e4:	40000400 	.word	0x40000400

080052e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	609a      	str	r2, [r3, #8]
 80052fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052fc:	f107 031c 	add.w	r3, r7, #28
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005308:	463b      	mov	r3, r7
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	605a      	str	r2, [r3, #4]
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	60da      	str	r2, [r3, #12]
 8005314:	611a      	str	r2, [r3, #16]
 8005316:	615a      	str	r2, [r3, #20]
 8005318:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800531a:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <MX_TIM4_Init+0xe8>)
 800531c:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <MX_TIM4_Init+0xec>)
 800531e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005320:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <MX_TIM4_Init+0xe8>)
 8005322:	22ef      	movs	r2, #239	; 0xef
 8005324:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005326:	4b2a      	ldr	r3, [pc, #168]	; (80053d0 <MX_TIM4_Init+0xe8>)
 8005328:	2200      	movs	r2, #0
 800532a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800532c:	4b28      	ldr	r3, [pc, #160]	; (80053d0 <MX_TIM4_Init+0xe8>)
 800532e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005332:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005334:	4b26      	ldr	r3, [pc, #152]	; (80053d0 <MX_TIM4_Init+0xe8>)
 8005336:	2200      	movs	r2, #0
 8005338:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800533a:	4b25      	ldr	r3, [pc, #148]	; (80053d0 <MX_TIM4_Init+0xe8>)
 800533c:	2280      	movs	r2, #128	; 0x80
 800533e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005340:	4823      	ldr	r0, [pc, #140]	; (80053d0 <MX_TIM4_Init+0xe8>)
 8005342:	f007 f982 	bl	800c64a <HAL_TIM_Base_Init>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800534c:	f7ff fa12 	bl	8004774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800535a:	4619      	mov	r1, r3
 800535c:	481c      	ldr	r0, [pc, #112]	; (80053d0 <MX_TIM4_Init+0xe8>)
 800535e:	f007 fe15 	bl	800cf8c <HAL_TIM_ConfigClockSource>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005368:	f7ff fa04 	bl	8004774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800536c:	4818      	ldr	r0, [pc, #96]	; (80053d0 <MX_TIM4_Init+0xe8>)
 800536e:	f007 fa6a 	bl	800c846 <HAL_TIM_PWM_Init>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005378:	f7ff f9fc 	bl	8004774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005380:	2300      	movs	r3, #0
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005384:	f107 031c 	add.w	r3, r7, #28
 8005388:	4619      	mov	r1, r3
 800538a:	4811      	ldr	r0, [pc, #68]	; (80053d0 <MX_TIM4_Init+0xe8>)
 800538c:	f008 fb52 	bl	800da34 <HAL_TIMEx_MasterConfigSynchronization>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005396:	f7ff f9ed 	bl	8004774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800539a:	2360      	movs	r3, #96	; 0x60
 800539c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80053aa:	463b      	mov	r3, r7
 80053ac:	2208      	movs	r2, #8
 80053ae:	4619      	mov	r1, r3
 80053b0:	4807      	ldr	r0, [pc, #28]	; (80053d0 <MX_TIM4_Init+0xe8>)
 80053b2:	f007 fcd7 	bl	800cd64 <HAL_TIM_PWM_ConfigChannel>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80053bc:	f7ff f9da 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80053c0:	4803      	ldr	r0, [pc, #12]	; (80053d0 <MX_TIM4_Init+0xe8>)
 80053c2:	f000 fba7 	bl	8005b14 <HAL_TIM_MspPostInit>

}
 80053c6:	bf00      	nop
 80053c8:	3738      	adds	r7, #56	; 0x38
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	24000c94 	.word	0x24000c94
 80053d4:	40000800 	.word	0x40000800

080053d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053de:	f107 0310 	add.w	r3, r7, #16
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	609a      	str	r2, [r3, #8]
 80053ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053ec:	1d3b      	adds	r3, r7, #4
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80053f6:	4b1d      	ldr	r3, [pc, #116]	; (800546c <MX_TIM5_Init+0x94>)
 80053f8:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <MX_TIM5_Init+0x98>)
 80053fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <MX_TIM5_Init+0x94>)
 80053fe:	22c7      	movs	r2, #199	; 0xc7
 8005400:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005402:	4b1a      	ldr	r3, [pc, #104]	; (800546c <MX_TIM5_Init+0x94>)
 8005404:	2200      	movs	r2, #0
 8005406:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005408:	4b18      	ldr	r3, [pc, #96]	; (800546c <MX_TIM5_Init+0x94>)
 800540a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800540e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005410:	4b16      	ldr	r3, [pc, #88]	; (800546c <MX_TIM5_Init+0x94>)
 8005412:	2200      	movs	r2, #0
 8005414:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005416:	4b15      	ldr	r3, [pc, #84]	; (800546c <MX_TIM5_Init+0x94>)
 8005418:	2280      	movs	r2, #128	; 0x80
 800541a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800541c:	4813      	ldr	r0, [pc, #76]	; (800546c <MX_TIM5_Init+0x94>)
 800541e:	f007 f914 	bl	800c64a <HAL_TIM_Base_Init>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005428:	f7ff f9a4 	bl	8004774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800542c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005430:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005432:	f107 0310 	add.w	r3, r7, #16
 8005436:	4619      	mov	r1, r3
 8005438:	480c      	ldr	r0, [pc, #48]	; (800546c <MX_TIM5_Init+0x94>)
 800543a:	f007 fda7 	bl	800cf8c <HAL_TIM_ConfigClockSource>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005444:	f7ff f996 	bl	8004774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005448:	2300      	movs	r3, #0
 800544a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005450:	1d3b      	adds	r3, r7, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4805      	ldr	r0, [pc, #20]	; (800546c <MX_TIM5_Init+0x94>)
 8005456:	f008 faed 	bl	800da34 <HAL_TIMEx_MasterConfigSynchronization>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005460:	f7ff f988 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005464:	bf00      	nop
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	24000d78 	.word	0x24000d78
 8005470:	40000c00 	.word	0x40000c00

08005474 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	605a      	str	r2, [r3, #4]
 8005482:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005484:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <MX_TIM6_Init+0x64>)
 8005486:	4a15      	ldr	r2, [pc, #84]	; (80054dc <MX_TIM6_Init+0x68>)
 8005488:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 800548a:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <MX_TIM6_Init+0x64>)
 800548c:	22c7      	movs	r2, #199	; 0xc7
 800548e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <MX_TIM6_Init+0x64>)
 8005492:	2200      	movs	r2, #0
 8005494:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8005496:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <MX_TIM6_Init+0x64>)
 8005498:	f241 726f 	movw	r2, #5999	; 0x176f
 800549c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <MX_TIM6_Init+0x64>)
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80054a4:	480c      	ldr	r0, [pc, #48]	; (80054d8 <MX_TIM6_Init+0x64>)
 80054a6:	f007 f8d0 	bl	800c64a <HAL_TIM_Base_Init>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80054b0:	f7ff f960 	bl	8004774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054b4:	2300      	movs	r3, #0
 80054b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80054bc:	1d3b      	adds	r3, r7, #4
 80054be:	4619      	mov	r1, r3
 80054c0:	4805      	ldr	r0, [pc, #20]	; (80054d8 <MX_TIM6_Init+0x64>)
 80054c2:	f008 fab7 	bl	800da34 <HAL_TIMEx_MasterConfigSynchronization>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80054cc:	f7ff f952 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80054d0:	bf00      	nop
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	24000e5c 	.word	0x24000e5c
 80054dc:	40001000 	.word	0x40001000

080054e0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80054f0:	4b14      	ldr	r3, [pc, #80]	; (8005544 <MX_TIM7_Init+0x64>)
 80054f2:	4a15      	ldr	r2, [pc, #84]	; (8005548 <MX_TIM7_Init+0x68>)
 80054f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 80054f6:	4b13      	ldr	r3, [pc, #76]	; (8005544 <MX_TIM7_Init+0x64>)
 80054f8:	22c7      	movs	r2, #199	; 0xc7
 80054fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054fc:	4b11      	ldr	r3, [pc, #68]	; (8005544 <MX_TIM7_Init+0x64>)
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005502:	4b10      	ldr	r3, [pc, #64]	; (8005544 <MX_TIM7_Init+0x64>)
 8005504:	f240 42af 	movw	r2, #1199	; 0x4af
 8005508:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800550a:	4b0e      	ldr	r3, [pc, #56]	; (8005544 <MX_TIM7_Init+0x64>)
 800550c:	2280      	movs	r2, #128	; 0x80
 800550e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005510:	480c      	ldr	r0, [pc, #48]	; (8005544 <MX_TIM7_Init+0x64>)
 8005512:	f007 f89a 	bl	800c64a <HAL_TIM_Base_Init>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800551c:	f7ff f92a 	bl	8004774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005520:	2300      	movs	r3, #0
 8005522:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005528:	1d3b      	adds	r3, r7, #4
 800552a:	4619      	mov	r1, r3
 800552c:	4805      	ldr	r0, [pc, #20]	; (8005544 <MX_TIM7_Init+0x64>)
 800552e:	f008 fa81 	bl	800da34 <HAL_TIMEx_MasterConfigSynchronization>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005538:	f7ff f91c 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	24001024 	.word	0x24001024
 8005548:	40001400 	.word	0x40001400

0800554c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005552:	463b      	mov	r3, r7
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800555e:	4b16      	ldr	r3, [pc, #88]	; (80055b8 <MX_TIM12_Init+0x6c>)
 8005560:	4a16      	ldr	r2, [pc, #88]	; (80055bc <MX_TIM12_Init+0x70>)
 8005562:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005564:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <MX_TIM12_Init+0x6c>)
 8005566:	22c7      	movs	r2, #199	; 0xc7
 8005568:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800556a:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <MX_TIM12_Init+0x6c>)
 800556c:	2200      	movs	r2, #0
 800556e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005570:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <MX_TIM12_Init+0x6c>)
 8005572:	f240 2257 	movw	r2, #599	; 0x257
 8005576:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005578:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <MX_TIM12_Init+0x6c>)
 800557a:	2200      	movs	r2, #0
 800557c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800557e:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <MX_TIM12_Init+0x6c>)
 8005580:	2280      	movs	r2, #128	; 0x80
 8005582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005584:	480c      	ldr	r0, [pc, #48]	; (80055b8 <MX_TIM12_Init+0x6c>)
 8005586:	f007 f860 	bl	800c64a <HAL_TIM_Base_Init>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005590:	f7ff f8f0 	bl	8004774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005598:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800559a:	463b      	mov	r3, r7
 800559c:	4619      	mov	r1, r3
 800559e:	4806      	ldr	r0, [pc, #24]	; (80055b8 <MX_TIM12_Init+0x6c>)
 80055a0:	f007 fcf4 	bl	800cf8c <HAL_TIM_ConfigClockSource>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80055aa:	f7ff f8e3 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	24000f8c 	.word	0x24000f8c
 80055bc:	40001800 	.word	0x40001800

080055c0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <MX_TIM13_Init+0x40>)
 80055c6:	4a0f      	ldr	r2, [pc, #60]	; (8005604 <MX_TIM13_Init+0x44>)
 80055c8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <MX_TIM13_Init+0x40>)
 80055cc:	22c7      	movs	r2, #199	; 0xc7
 80055ce:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055d0:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <MX_TIM13_Init+0x40>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <MX_TIM13_Init+0x40>)
 80055d8:	f240 2257 	movw	r2, #599	; 0x257
 80055dc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055de:	4b08      	ldr	r3, [pc, #32]	; (8005600 <MX_TIM13_Init+0x40>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <MX_TIM13_Init+0x40>)
 80055e6:	2280      	movs	r2, #128	; 0x80
 80055e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80055ea:	4805      	ldr	r0, [pc, #20]	; (8005600 <MX_TIM13_Init+0x40>)
 80055ec:	f007 f82d 	bl	800c64a <HAL_TIM_Base_Init>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80055f6:	f7ff f8bd 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80055fa:	bf00      	nop
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	24000e10 	.word	0x24000e10
 8005604:	40001c00 	.word	0x40001c00

08005608 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <MX_TIM14_Init+0x40>)
 800560e:	4a0f      	ldr	r2, [pc, #60]	; (800564c <MX_TIM14_Init+0x44>)
 8005610:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <MX_TIM14_Init+0x40>)
 8005614:	22c7      	movs	r2, #199	; 0xc7
 8005616:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005618:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <MX_TIM14_Init+0x40>)
 800561a:	2200      	movs	r2, #0
 800561c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 800561e:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <MX_TIM14_Init+0x40>)
 8005620:	f640 125f 	movw	r2, #2399	; 0x95f
 8005624:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005626:	4b08      	ldr	r3, [pc, #32]	; (8005648 <MX_TIM14_Init+0x40>)
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <MX_TIM14_Init+0x40>)
 800562e:	2280      	movs	r2, #128	; 0x80
 8005630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005632:	4805      	ldr	r0, [pc, #20]	; (8005648 <MX_TIM14_Init+0x40>)
 8005634:	f007 f809 	bl	800c64a <HAL_TIM_Base_Init>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800563e:	f7ff f899 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	24000f40 	.word	0x24000f40
 800564c:	40002000 	.word	0x40002000

08005650 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b09a      	sub	sp, #104	; 0x68
 8005654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005656:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	605a      	str	r2, [r3, #4]
 8005660:	609a      	str	r2, [r3, #8]
 8005662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005664:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	605a      	str	r2, [r3, #4]
 800566e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	605a      	str	r2, [r3, #4]
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	60da      	str	r2, [r3, #12]
 800567e:	611a      	str	r2, [r3, #16]
 8005680:	615a      	str	r2, [r3, #20]
 8005682:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005684:	1d3b      	adds	r3, r7, #4
 8005686:	222c      	movs	r2, #44	; 0x2c
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f00c f820 	bl	80116d0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005690:	4b3f      	ldr	r3, [pc, #252]	; (8005790 <MX_TIM15_Init+0x140>)
 8005692:	4a40      	ldr	r2, [pc, #256]	; (8005794 <MX_TIM15_Init+0x144>)
 8005694:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <MX_TIM15_Init+0x140>)
 8005698:	22ef      	movs	r2, #239	; 0xef
 800569a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800569c:	4b3c      	ldr	r3, [pc, #240]	; (8005790 <MX_TIM15_Init+0x140>)
 800569e:	2200      	movs	r2, #0
 80056a0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80056a2:	4b3b      	ldr	r3, [pc, #236]	; (8005790 <MX_TIM15_Init+0x140>)
 80056a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80056a8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056aa:	4b39      	ldr	r3, [pc, #228]	; (8005790 <MX_TIM15_Init+0x140>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80056b0:	4b37      	ldr	r3, [pc, #220]	; (8005790 <MX_TIM15_Init+0x140>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80056b6:	4b36      	ldr	r3, [pc, #216]	; (8005790 <MX_TIM15_Init+0x140>)
 80056b8:	2280      	movs	r2, #128	; 0x80
 80056ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80056bc:	4834      	ldr	r0, [pc, #208]	; (8005790 <MX_TIM15_Init+0x140>)
 80056be:	f006 ffc4 	bl	800c64a <HAL_TIM_Base_Init>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80056c8:	f7ff f854 	bl	8004774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056d0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80056d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056d6:	4619      	mov	r1, r3
 80056d8:	482d      	ldr	r0, [pc, #180]	; (8005790 <MX_TIM15_Init+0x140>)
 80056da:	f007 fc57 	bl	800cf8c <HAL_TIM_ConfigClockSource>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80056e4:	f7ff f846 	bl	8004774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80056e8:	4829      	ldr	r0, [pc, #164]	; (8005790 <MX_TIM15_Init+0x140>)
 80056ea:	f007 f8ac 	bl	800c846 <HAL_TIM_PWM_Init>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80056f4:	f7ff f83e 	bl	8004774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056f8:	2300      	movs	r3, #0
 80056fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005700:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005704:	4619      	mov	r1, r3
 8005706:	4822      	ldr	r0, [pc, #136]	; (8005790 <MX_TIM15_Init+0x140>)
 8005708:	f008 f994 	bl	800da34 <HAL_TIMEx_MasterConfigSynchronization>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8005712:	f7ff f82f 	bl	8004774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005716:	2360      	movs	r3, #96	; 0x60
 8005718:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800571a:	f240 1339 	movw	r3, #313	; 0x139
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005720:	2300      	movs	r3, #0
 8005722:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005724:	2300      	movs	r3, #0
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005728:	2300      	movs	r3, #0
 800572a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800572c:	2300      	movs	r3, #0
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005730:	2300      	movs	r3, #0
 8005732:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005734:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005738:	2204      	movs	r2, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4814      	ldr	r0, [pc, #80]	; (8005790 <MX_TIM15_Init+0x140>)
 800573e:	f007 fb11 	bl	800cd64 <HAL_TIM_PWM_ConfigChannel>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005748:	f7ff f814 	bl	8004774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800574c:	2300      	movs	r3, #0
 800574e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005750:	2300      	movs	r3, #0
 8005752:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005764:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800576a:	2300      	movs	r3, #0
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4807      	ldr	r0, [pc, #28]	; (8005790 <MX_TIM15_Init+0x140>)
 8005774:	f008 f9ec 	bl	800db50 <HAL_TIMEx_ConfigBreakDeadTime>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800577e:	f7fe fff9 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005782:	4803      	ldr	r0, [pc, #12]	; (8005790 <MX_TIM15_Init+0x140>)
 8005784:	f000 f9c6 	bl	8005b14 <HAL_TIM_MspPostInit>

}
 8005788:	bf00      	nop
 800578a:	3768      	adds	r7, #104	; 0x68
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	24000ce0 	.word	0x24000ce0
 8005794:	40014000 	.word	0x40014000

08005798 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800579c:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <MX_TIM16_Init+0x44>)
 800579e:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <MX_TIM16_Init+0x48>)
 80057a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 80057a2:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <MX_TIM16_Init+0x44>)
 80057a4:	22ef      	movs	r2, #239	; 0xef
 80057a6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <MX_TIM16_Init+0x44>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80057ae:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <MX_TIM16_Init+0x44>)
 80057b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057b4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <MX_TIM16_Init+0x44>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80057bc:	4b07      	ldr	r3, [pc, #28]	; (80057dc <MX_TIM16_Init+0x44>)
 80057be:	2200      	movs	r2, #0
 80057c0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057c2:	4b06      	ldr	r3, [pc, #24]	; (80057dc <MX_TIM16_Init+0x44>)
 80057c4:	2280      	movs	r2, #128	; 0x80
 80057c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80057c8:	4804      	ldr	r0, [pc, #16]	; (80057dc <MX_TIM16_Init+0x44>)
 80057ca:	f006 ff3e 	bl	800c64a <HAL_TIM_Base_Init>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80057d4:	f7fe ffce 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80057d8:	bf00      	nop
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	24000fd8 	.word	0x24000fd8
 80057e0:	40014400 	.word	0x40014400

080057e4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80057e8:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <MX_TIM17_Init+0x44>)
 80057ea:	4a10      	ldr	r2, [pc, #64]	; (800582c <MX_TIM17_Init+0x48>)
 80057ec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 240-1;
 80057ee:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <MX_TIM17_Init+0x44>)
 80057f0:	22ef      	movs	r2, #239	; 0xef
 80057f2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057f4:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <MX_TIM17_Init+0x44>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <MX_TIM17_Init+0x44>)
 80057fc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005800:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <MX_TIM17_Init+0x44>)
 8005804:	2200      	movs	r2, #0
 8005806:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <MX_TIM17_Init+0x44>)
 800580a:	2200      	movs	r2, #0
 800580c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <MX_TIM17_Init+0x44>)
 8005810:	2280      	movs	r2, #128	; 0x80
 8005812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005814:	4804      	ldr	r0, [pc, #16]	; (8005828 <MX_TIM17_Init+0x44>)
 8005816:	f006 ff18 	bl	800c64a <HAL_TIM_Base_Init>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8005820:	f7fe ffa8 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005824:	bf00      	nop
 8005826:	bd80      	pop	{r7, pc}
 8005828:	24000d2c 	.word	0x24000d2c
 800582c:	40014800 	.word	0x40014800

08005830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b090      	sub	sp, #64	; 0x40
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4aa8      	ldr	r2, [pc, #672]	; (8005ae0 <HAL_TIM_Base_MspInit+0x2b0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10f      	bne.n	8005862 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005842:	4ba8      	ldr	r3, [pc, #672]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005848:	4aa6      	ldr	r2, [pc, #664]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005852:	4ba4      	ldr	r3, [pc, #656]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800585e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005860:	e13a      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586a:	d10f      	bne.n	800588c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800586c:	4b9d      	ldr	r3, [pc, #628]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 800586e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005872:	4a9c      	ldr	r2, [pc, #624]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800587c:	4b99      	ldr	r3, [pc, #612]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 800587e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	63bb      	str	r3, [r7, #56]	; 0x38
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800588a:	e125      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a95      	ldr	r2, [pc, #596]	; (8005ae8 <HAL_TIM_Base_MspInit+0x2b8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d10f      	bne.n	80058b6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005896:	4b93      	ldr	r3, [pc, #588]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800589c:	4a91      	ldr	r2, [pc, #580]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 800589e:	f043 0302 	orr.w	r3, r3, #2
 80058a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058a6:	4b8f      	ldr	r3, [pc, #572]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80058a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
 80058b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058b4:	e110      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a8c      	ldr	r2, [pc, #560]	; (8005aec <HAL_TIM_Base_MspInit+0x2bc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10f      	bne.n	80058e0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058c0:	4b88      	ldr	r3, [pc, #544]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80058c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058c6:	4a87      	ldr	r2, [pc, #540]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058d0:	4b84      	ldr	r3, [pc, #528]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80058d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	633b      	str	r3, [r7, #48]	; 0x30
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80058de:	e0fb      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a82      	ldr	r2, [pc, #520]	; (8005af0 <HAL_TIM_Base_MspInit+0x2c0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d117      	bne.n	800591a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80058ea:	4b7e      	ldr	r3, [pc, #504]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80058ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058f0:	4a7c      	ldr	r2, [pc, #496]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80058f2:	f043 0308 	orr.w	r3, r3, #8
 80058f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058fa:	4b7a      	ldr	r3, [pc, #488]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80058fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005908:	2200      	movs	r2, #0
 800590a:	2100      	movs	r1, #0
 800590c:	2032      	movs	r0, #50	; 0x32
 800590e:	f000 ffca 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005912:	2032      	movs	r0, #50	; 0x32
 8005914:	f000 ffe1 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 8005918:	e0de      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a75      	ldr	r2, [pc, #468]	; (8005af4 <HAL_TIM_Base_MspInit+0x2c4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d117      	bne.n	8005954 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005924:	4b6f      	ldr	r3, [pc, #444]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800592a:	4a6e      	ldr	r2, [pc, #440]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 800592c:	f043 0310 	orr.w	r3, r3, #16
 8005930:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005934:	4b6b      	ldr	r3, [pc, #428]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005942:	2200      	movs	r2, #0
 8005944:	2100      	movs	r1, #0
 8005946:	2036      	movs	r0, #54	; 0x36
 8005948:	f000 ffad 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800594c:	2036      	movs	r0, #54	; 0x36
 800594e:	f000 ffc4 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 8005952:	e0c1      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a67      	ldr	r2, [pc, #412]	; (8005af8 <HAL_TIM_Base_MspInit+0x2c8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d117      	bne.n	800598e <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800595e:	4b61      	ldr	r3, [pc, #388]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005964:	4a5f      	ldr	r2, [pc, #380]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005966:	f043 0320 	orr.w	r3, r3, #32
 800596a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800596e:	4b5d      	ldr	r3, [pc, #372]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800597c:	2200      	movs	r2, #0
 800597e:	2100      	movs	r1, #0
 8005980:	2037      	movs	r0, #55	; 0x37
 8005982:	f000 ff90 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005986:	2037      	movs	r0, #55	; 0x37
 8005988:	f000 ffa7 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 800598c:	e0a4      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a5a      	ldr	r2, [pc, #360]	; (8005afc <HAL_TIM_Base_MspInit+0x2cc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d117      	bne.n	80059c8 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005998:	4b52      	ldr	r3, [pc, #328]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 800599a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800599e:	4a51      	ldr	r2, [pc, #324]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80059a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059a8:	4b4e      	ldr	r3, [pc, #312]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80059aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	623b      	str	r3, [r7, #32]
 80059b4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80059b6:	2200      	movs	r2, #0
 80059b8:	2100      	movs	r1, #0
 80059ba:	202b      	movs	r0, #43	; 0x2b
 80059bc:	f000 ff73 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80059c0:	202b      	movs	r0, #43	; 0x2b
 80059c2:	f000 ff8a 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 80059c6:	e087      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a4c      	ldr	r2, [pc, #304]	; (8005b00 <HAL_TIM_Base_MspInit+0x2d0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d117      	bne.n	8005a02 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80059d2:	4b44      	ldr	r3, [pc, #272]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80059d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059d8:	4a42      	ldr	r2, [pc, #264]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80059da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059e2:	4b40      	ldr	r3, [pc, #256]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 80059e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80059f0:	2200      	movs	r2, #0
 80059f2:	2100      	movs	r1, #0
 80059f4:	202c      	movs	r0, #44	; 0x2c
 80059f6:	f000 ff56 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80059fa:	202c      	movs	r0, #44	; 0x2c
 80059fc:	f000 ff6d 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 8005a00:	e06a      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a3f      	ldr	r2, [pc, #252]	; (8005b04 <HAL_TIM_Base_MspInit+0x2d4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d117      	bne.n	8005a3c <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005a0c:	4b35      	ldr	r3, [pc, #212]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a12:	4a34      	ldr	r2, [pc, #208]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a1c:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	61bb      	str	r3, [r7, #24]
 8005a28:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	202d      	movs	r0, #45	; 0x2d
 8005a30:	f000 ff39 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005a34:	202d      	movs	r0, #45	; 0x2d
 8005a36:	f000 ff50 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 8005a3a:	e04d      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a31      	ldr	r2, [pc, #196]	; (8005b08 <HAL_TIM_Base_MspInit+0x2d8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d10f      	bne.n	8005a66 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005a46:	4b27      	ldr	r3, [pc, #156]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a4c:	4a25      	ldr	r2, [pc, #148]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005a56:	4b23      	ldr	r3, [pc, #140]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	697b      	ldr	r3, [r7, #20]
}
 8005a64:	e038      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <HAL_TIM_Base_MspInit+0x2dc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d117      	bne.n	8005aa0 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005a70:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a76:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005a80:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2100      	movs	r1, #0
 8005a92:	2075      	movs	r0, #117	; 0x75
 8005a94:	f000 ff07 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005a98:	2075      	movs	r0, #117	; 0x75
 8005a9a:	f000 ff1e 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 8005a9e:	e01b      	b.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1a      	ldr	r2, [pc, #104]	; (8005b10 <HAL_TIM_Base_MspInit+0x2e0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d116      	bne.n	8005ad8 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005aaa:	4b0e      	ldr	r3, [pc, #56]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ab0:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <HAL_TIM_Base_MspInit+0x2b4>)
 8005abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2100      	movs	r1, #0
 8005acc:	2076      	movs	r0, #118	; 0x76
 8005ace:	f000 feea 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005ad2:	2076      	movs	r0, #118	; 0x76
 8005ad4:	f000 ff01 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 8005ad8:	bf00      	nop
 8005ada:	3740      	adds	r7, #64	; 0x40
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40000c00 	.word	0x40000c00
 8005af4:	40001000 	.word	0x40001000
 8005af8:	40001400 	.word	0x40001400
 8005afc:	40001800 	.word	0x40001800
 8005b00:	40001c00 	.word	0x40001c00
 8005b04:	40002000 	.word	0x40002000
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08c      	sub	sp, #48	; 0x30
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b1c:	f107 031c 	add.w	r3, r7, #28
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	609a      	str	r2, [r3, #8]
 8005b28:	60da      	str	r2, [r3, #12]
 8005b2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a5e      	ldr	r2, [pc, #376]	; (8005cac <HAL_TIM_MspPostInit+0x198>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d120      	bne.n	8005b78 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b36:	4b5e      	ldr	r3, [pc, #376]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b3c:	4a5c      	ldr	r2, [pc, #368]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005b3e:	f043 0310 	orr.w	r3, r3, #16
 8005b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b46:	4b5a      	ldr	r3, [pc, #360]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8005b54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b62:	2300      	movs	r3, #0
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005b66:	2301      	movs	r3, #1
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8005b6a:	f107 031c 	add.w	r3, r7, #28
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4850      	ldr	r0, [pc, #320]	; (8005cb4 <HAL_TIM_MspPostInit+0x1a0>)
 8005b72:	f003 ff11 	bl	8009998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005b76:	e094      	b.n	8005ca2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b80:	d120      	bne.n	8005bc4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b82:	4b4b      	ldr	r3, [pc, #300]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b88:	4a49      	ldr	r2, [pc, #292]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005b8a:	f043 0302 	orr.w	r3, r3, #2
 8005b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b92:	4b47      	ldr	r3, [pc, #284]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8005ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8005bb6:	f107 031c 	add.w	r3, r7, #28
 8005bba:	4619      	mov	r1, r3
 8005bbc:	483e      	ldr	r0, [pc, #248]	; (8005cb8 <HAL_TIM_MspPostInit+0x1a4>)
 8005bbe:	f003 feeb 	bl	8009998 <HAL_GPIO_Init>
}
 8005bc2:	e06e      	b.n	8005ca2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a3c      	ldr	r2, [pc, #240]	; (8005cbc <HAL_TIM_MspPostInit+0x1a8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d11f      	bne.n	8005c0e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bce:	4b38      	ldr	r3, [pc, #224]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bd4:	4a36      	ldr	r2, [pc, #216]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005bde:	4b34      	ldr	r3, [pc, #208]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8005bec:	2340      	movs	r3, #64	; 0x40
 8005bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8005c00:	f107 031c 	add.w	r3, r7, #28
 8005c04:	4619      	mov	r1, r3
 8005c06:	482e      	ldr	r0, [pc, #184]	; (8005cc0 <HAL_TIM_MspPostInit+0x1ac>)
 8005c08:	f003 fec6 	bl	8009998 <HAL_GPIO_Init>
}
 8005c0c:	e049      	b.n	8005ca2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	; (8005cc4 <HAL_TIM_MspPostInit+0x1b0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d120      	bne.n	8005c5a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c1e:	4a24      	ldr	r2, [pc, #144]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005c20:	f043 0302 	orr.w	r3, r3, #2
 8005c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c28:	4b21      	ldr	r3, [pc, #132]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8005c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c44:	2300      	movs	r3, #0
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8005c4c:	f107 031c 	add.w	r3, r7, #28
 8005c50:	4619      	mov	r1, r3
 8005c52:	4819      	ldr	r0, [pc, #100]	; (8005cb8 <HAL_TIM_MspPostInit+0x1a4>)
 8005c54:	f003 fea0 	bl	8009998 <HAL_GPIO_Init>
}
 8005c58:	e023      	b.n	8005ca2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <HAL_TIM_MspPostInit+0x1b4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d11e      	bne.n	8005ca2 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c64:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c6a:	4a11      	ldr	r2, [pc, #68]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005c6c:	f043 0310 	orr.w	r3, r3, #16
 8005c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <HAL_TIM_MspPostInit+0x19c>)
 8005c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8005c82:	2340      	movs	r3, #64	; 0x40
 8005c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c86:	2302      	movs	r3, #2
 8005c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005c92:	2304      	movs	r3, #4
 8005c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8005c96:	f107 031c 	add.w	r3, r7, #28
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4805      	ldr	r0, [pc, #20]	; (8005cb4 <HAL_TIM_MspPostInit+0x1a0>)
 8005c9e:	f003 fe7b 	bl	8009998 <HAL_GPIO_Init>
}
 8005ca2:	bf00      	nop
 8005ca4:	3730      	adds	r7, #48	; 0x30
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40010000 	.word	0x40010000
 8005cb0:	58024400 	.word	0x58024400
 8005cb4:	58021000 	.word	0x58021000
 8005cb8:	58020400 	.word	0x58020400
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	58020000 	.word	0x58020000
 8005cc4:	40000800 	.word	0x40000800
 8005cc8:	40014000 	.word	0x40014000

08005ccc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005cd0:	4b25      	ldr	r3, [pc, #148]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005cd2:	4a26      	ldr	r2, [pc, #152]	; (8005d6c <MX_UART4_Init+0xa0>)
 8005cd4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8005cd6:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005cd8:	4a25      	ldr	r2, [pc, #148]	; (8005d70 <MX_UART4_Init+0xa4>)
 8005cda:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005cdc:	4b22      	ldr	r3, [pc, #136]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005ce2:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005ce8:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005cee:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005cf0:	220c      	movs	r2, #12
 8005cf2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cf4:	4b1c      	ldr	r3, [pc, #112]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cfa:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d00:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d06:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005d0c:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005d0e:	2208      	movs	r2, #8
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005d14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005d1a:	4813      	ldr	r0, [pc, #76]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005d1c:	f007 ffb4 	bl	800dc88 <HAL_UART_Init>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8005d26:	f7fe fd25 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005d2a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005d2e:	480e      	ldr	r0, [pc, #56]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005d30:	f00a f845 	bl	800fdbe <HAL_UARTEx_SetTxFifoThreshold>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8005d3a:	f7fe fd1b 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005d3e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005d42:	4809      	ldr	r0, [pc, #36]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005d44:	f00a f879 	bl	800fe3a <HAL_UARTEx_SetRxFifoThreshold>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8005d4e:	f7fe fd11 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8005d52:	4805      	ldr	r0, [pc, #20]	; (8005d68 <MX_UART4_Init+0x9c>)
 8005d54:	f009 ffbf 	bl	800fcd6 <HAL_UARTEx_EnableFifoMode>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8005d5e:	f7fe fd09 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005d62:	bf00      	nop
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	24001460 	.word	0x24001460
 8005d6c:	40004c00 	.word	0x40004c00
 8005d70:	001e8480 	.word	0x001e8480

08005d74 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005d78:	4b23      	ldr	r3, [pc, #140]	; (8005e08 <MX_UART7_Init+0x94>)
 8005d7a:	4a24      	ldr	r2, [pc, #144]	; (8005e0c <MX_UART7_Init+0x98>)
 8005d7c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005d7e:	4b22      	ldr	r3, [pc, #136]	; (8005e08 <MX_UART7_Init+0x94>)
 8005d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d84:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005d86:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <MX_UART7_Init+0x94>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005d8c:	4b1e      	ldr	r3, [pc, #120]	; (8005e08 <MX_UART7_Init+0x94>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <MX_UART7_Init+0x94>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <MX_UART7_Init+0x94>)
 8005d9a:	220c      	movs	r2, #12
 8005d9c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d9e:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <MX_UART7_Init+0x94>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005da4:	4b18      	ldr	r3, [pc, #96]	; (8005e08 <MX_UART7_Init+0x94>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005daa:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <MX_UART7_Init+0x94>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005db0:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <MX_UART7_Init+0x94>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <MX_UART7_Init+0x94>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005dbc:	4812      	ldr	r0, [pc, #72]	; (8005e08 <MX_UART7_Init+0x94>)
 8005dbe:	f007 ff63 	bl	800dc88 <HAL_UART_Init>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8005dc8:	f7fe fcd4 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005dcc:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005dd0:	480d      	ldr	r0, [pc, #52]	; (8005e08 <MX_UART7_Init+0x94>)
 8005dd2:	f009 fff4 	bl	800fdbe <HAL_UARTEx_SetTxFifoThreshold>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8005ddc:	f7fe fcca 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005de0:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005de4:	4808      	ldr	r0, [pc, #32]	; (8005e08 <MX_UART7_Init+0x94>)
 8005de6:	f00a f828 	bl	800fe3a <HAL_UARTEx_SetRxFifoThreshold>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8005df0:	f7fe fcc0 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8005df4:	4804      	ldr	r0, [pc, #16]	; (8005e08 <MX_UART7_Init+0x94>)
 8005df6:	f009 ff6e 	bl	800fcd6 <HAL_UARTEx_EnableFifoMode>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8005e00:	f7fe fcb8 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005e04:	bf00      	nop
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	24001160 	.word	0x24001160
 8005e0c:	40007800 	.word	0x40007800

08005e10 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e14:	4b22      	ldr	r3, [pc, #136]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e16:	4a23      	ldr	r2, [pc, #140]	; (8005ea4 <MX_USART2_UART_Init+0x94>)
 8005e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005e1a:	4b21      	ldr	r3, [pc, #132]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e22:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005e28:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005e2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005e34:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e36:	220c      	movs	r2, #12
 8005e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e3a:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e40:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e46:	4b16      	ldr	r3, [pc, #88]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005e4c:	4b14      	ldr	r3, [pc, #80]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e52:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e58:	4811      	ldr	r0, [pc, #68]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e5a:	f007 ff15 	bl	800dc88 <HAL_UART_Init>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005e64:	f7fe fc86 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e68:	2100      	movs	r1, #0
 8005e6a:	480d      	ldr	r0, [pc, #52]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e6c:	f009 ffa7 	bl	800fdbe <HAL_UARTEx_SetTxFifoThreshold>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005e76:	f7fe fc7d 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4808      	ldr	r0, [pc, #32]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e7e:	f009 ffdc 	bl	800fe3a <HAL_UARTEx_SetRxFifoThreshold>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005e88:	f7fe fc74 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005e8c:	4804      	ldr	r0, [pc, #16]	; (8005ea0 <MX_USART2_UART_Init+0x90>)
 8005e8e:	f009 ff5d 	bl	800fd4c <HAL_UARTEx_DisableFifoMode>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005e98:	f7fe fc6c 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005e9c:	bf00      	nop
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	240014f0 	.word	0x240014f0
 8005ea4:	40004400 	.word	0x40004400

08005ea8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005eac:	4b22      	ldr	r3, [pc, #136]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005eae:	4a23      	ldr	r2, [pc, #140]	; (8005f3c <MX_USART3_UART_Init+0x94>)
 8005eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005eb2:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005eba:	4b1f      	ldr	r3, [pc, #124]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005ec0:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005ec6:	4b1c      	ldr	r3, [pc, #112]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005ece:	220c      	movs	r2, #12
 8005ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ed2:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ed8:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ede:	4b16      	ldr	r3, [pc, #88]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ee4:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005eea:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ef0:	4811      	ldr	r0, [pc, #68]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005ef2:	f007 fec9 	bl	800dc88 <HAL_UART_Init>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005efc:	f7fe fc3a 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f00:	2100      	movs	r1, #0
 8005f02:	480d      	ldr	r0, [pc, #52]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005f04:	f009 ff5b 	bl	800fdbe <HAL_UARTEx_SetTxFifoThreshold>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005f0e:	f7fe fc31 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f12:	2100      	movs	r1, #0
 8005f14:	4808      	ldr	r0, [pc, #32]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005f16:	f009 ff90 	bl	800fe3a <HAL_UARTEx_SetRxFifoThreshold>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005f20:	f7fe fc28 	bl	8004774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005f24:	4804      	ldr	r0, [pc, #16]	; (8005f38 <MX_USART3_UART_Init+0x90>)
 8005f26:	f009 ff11 	bl	800fd4c <HAL_UARTEx_DisableFifoMode>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005f30:	f7fe fc20 	bl	8004774 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005f34:	bf00      	nop
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	24001268 	.word	0x24001268
 8005f3c:	40004800 	.word	0x40004800

08005f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b0be      	sub	sp, #248	; 0xf8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	605a      	str	r2, [r3, #4]
 8005f52:	609a      	str	r2, [r3, #8]
 8005f54:	60da      	str	r2, [r3, #12]
 8005f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f5c:	22bc      	movs	r2, #188	; 0xbc
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4618      	mov	r0, r3
 8005f62:	f00b fbb5 	bl	80116d0 <memset>
  if(uartHandle->Instance==UART4)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4aa1      	ldr	r2, [pc, #644]	; (80061f0 <HAL_UART_MspInit+0x2b0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	f040 80b7 	bne.w	80060e0 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005f72:	2302      	movs	r3, #2
 8005f74:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005f76:	2300      	movs	r3, #0
 8005f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f80:	4618      	mov	r0, r3
 8005f82:	f004 fedf 	bl	800ad44 <HAL_RCCEx_PeriphCLKConfig>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005f8c:	f7fe fbf2 	bl	8004774 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f90:	4b98      	ldr	r3, [pc, #608]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 8005f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f96:	4a97      	ldr	r2, [pc, #604]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 8005f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005fa0:	4b94      	ldr	r3, [pc, #592]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 8005fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fae:	4b91      	ldr	r3, [pc, #580]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 8005fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fb4:	4a8f      	ldr	r2, [pc, #572]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 8005fb6:	f043 0308 	orr.w	r3, r3, #8
 8005fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fbe:	4b8d      	ldr	r3, [pc, #564]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 8005fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4881      	ldr	r0, [pc, #516]	; (80061f8 <HAL_UART_MspInit+0x2b8>)
 8005ff2:	f003 fcd1 	bl	8009998 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8005ff6:	4b81      	ldr	r3, [pc, #516]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 8005ff8:	4a81      	ldr	r2, [pc, #516]	; (8006200 <HAL_UART_MspInit+0x2c0>)
 8005ffa:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8005ffc:	4b7f      	ldr	r3, [pc, #508]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 8005ffe:	223f      	movs	r2, #63	; 0x3f
 8006000:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006002:	4b7e      	ldr	r3, [pc, #504]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 8006004:	2200      	movs	r2, #0
 8006006:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006008:	4b7c      	ldr	r3, [pc, #496]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 800600a:	2200      	movs	r2, #0
 800600c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800600e:	4b7b      	ldr	r3, [pc, #492]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 8006010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006014:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006016:	4b79      	ldr	r3, [pc, #484]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 8006018:	2200      	movs	r2, #0
 800601a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800601c:	4b77      	ldr	r3, [pc, #476]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 800601e:	2200      	movs	r2, #0
 8006020:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8006022:	4b76      	ldr	r3, [pc, #472]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 8006024:	2200      	movs	r2, #0
 8006026:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006028:	4b74      	ldr	r3, [pc, #464]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 800602a:	2200      	movs	r2, #0
 800602c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800602e:	4b73      	ldr	r3, [pc, #460]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 8006030:	2204      	movs	r2, #4
 8006032:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006034:	4b71      	ldr	r3, [pc, #452]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 8006036:	2203      	movs	r2, #3
 8006038:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800603a:	4b70      	ldr	r3, [pc, #448]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 800603c:	2200      	movs	r2, #0
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006040:	4b6e      	ldr	r3, [pc, #440]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006046:	486d      	ldr	r0, [pc, #436]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 8006048:	f000 fe6c 	bl	8006d24 <HAL_DMA_Init>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8006052:	f7fe fb8f 	bl	8004774 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a68      	ldr	r2, [pc, #416]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 800605a:	67da      	str	r2, [r3, #124]	; 0x7c
 800605c:	4a67      	ldr	r2, [pc, #412]	; (80061fc <HAL_UART_MspInit+0x2bc>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006062:	4b68      	ldr	r3, [pc, #416]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 8006064:	4a68      	ldr	r2, [pc, #416]	; (8006208 <HAL_UART_MspInit+0x2c8>)
 8006066:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006068:	4b66      	ldr	r3, [pc, #408]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 800606a:	2240      	movs	r2, #64	; 0x40
 800606c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800606e:	4b65      	ldr	r3, [pc, #404]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 8006070:	2240      	movs	r2, #64	; 0x40
 8006072:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006074:	4b63      	ldr	r3, [pc, #396]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 8006076:	2200      	movs	r2, #0
 8006078:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800607a:	4b62      	ldr	r3, [pc, #392]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 800607c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006080:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006082:	4b60      	ldr	r3, [pc, #384]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 8006084:	2200      	movs	r2, #0
 8006086:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006088:	4b5e      	ldr	r3, [pc, #376]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 800608a:	2200      	movs	r2, #0
 800608c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800608e:	4b5d      	ldr	r3, [pc, #372]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 8006090:	2200      	movs	r2, #0
 8006092:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006094:	4b5b      	ldr	r3, [pc, #364]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 8006096:	2200      	movs	r2, #0
 8006098:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800609a:	4b5a      	ldr	r3, [pc, #360]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 800609c:	2204      	movs	r2, #4
 800609e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80060a0:	4b58      	ldr	r3, [pc, #352]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 80060a2:	2203      	movs	r2, #3
 80060a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80060a6:	4b57      	ldr	r3, [pc, #348]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80060ac:	4b55      	ldr	r3, [pc, #340]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80060b2:	4854      	ldr	r0, [pc, #336]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 80060b4:	f000 fe36 	bl	8006d24 <HAL_DMA_Init>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 80060be:	f7fe fb59 	bl	8004774 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a4f      	ldr	r2, [pc, #316]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 80060c6:	679a      	str	r2, [r3, #120]	; 0x78
 80060c8:	4a4e      	ldr	r2, [pc, #312]	; (8006204 <HAL_UART_MspInit+0x2c4>)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80060ce:	2200      	movs	r2, #0
 80060d0:	2100      	movs	r1, #0
 80060d2:	2034      	movs	r0, #52	; 0x34
 80060d4:	f000 fbe7 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80060d8:	2034      	movs	r0, #52	; 0x34
 80060da:	f000 fbfe 	bl	80068da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80060de:	e1fe      	b.n	80064de <HAL_UART_MspInit+0x59e>
  else if(uartHandle->Instance==UART7)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a49      	ldr	r2, [pc, #292]	; (800620c <HAL_UART_MspInit+0x2cc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	f040 8098 	bne.w	800621c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80060ec:	2302      	movs	r3, #2
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060fa:	4618      	mov	r0, r3
 80060fc:	f004 fe22 	bl	800ad44 <HAL_RCCEx_PeriphCLKConfig>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8006106:	f7fe fb35 	bl	8004774 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800610a:	4b3a      	ldr	r3, [pc, #232]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 800610c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006110:	4a38      	ldr	r2, [pc, #224]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 8006112:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006116:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800611a:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 800611c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006128:	4b32      	ldr	r3, [pc, #200]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 800612a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800612e:	4a31      	ldr	r2, [pc, #196]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 8006130:	f043 0310 	orr.w	r3, r3, #16
 8006134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006138:	4b2e      	ldr	r3, [pc, #184]	; (80061f4 <HAL_UART_MspInit+0x2b4>)
 800613a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800613e:	f003 0310 	and.w	r3, r3, #16
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006146:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800614a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614e:	2302      	movs	r3, #2
 8006150:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800615a:	2300      	movs	r3, #0
 800615c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006160:	2307      	movs	r3, #7
 8006162:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006166:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800616a:	4619      	mov	r1, r3
 800616c:	4828      	ldr	r0, [pc, #160]	; (8006210 <HAL_UART_MspInit+0x2d0>)
 800616e:	f003 fc13 	bl	8009998 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8006172:	4b28      	ldr	r3, [pc, #160]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 8006174:	4a28      	ldr	r2, [pc, #160]	; (8006218 <HAL_UART_MspInit+0x2d8>)
 8006176:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006178:	4b26      	ldr	r3, [pc, #152]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 800617a:	2250      	movs	r2, #80	; 0x50
 800617c:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800617e:	4b25      	ldr	r3, [pc, #148]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006184:	4b23      	ldr	r3, [pc, #140]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 8006186:	2200      	movs	r2, #0
 8006188:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800618a:	4b22      	ldr	r3, [pc, #136]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 800618c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006190:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006192:	4b20      	ldr	r3, [pc, #128]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 8006194:	2200      	movs	r2, #0
 8006196:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006198:	4b1e      	ldr	r3, [pc, #120]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 800619a:	2200      	movs	r2, #0
 800619c:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800619e:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061a4:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80061aa:	4b1a      	ldr	r3, [pc, #104]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 80061ac:	2204      	movs	r2, #4
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80061b0:	4b18      	ldr	r3, [pc, #96]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 80061b2:	2203      	movs	r2, #3
 80061b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80061b6:	4b17      	ldr	r3, [pc, #92]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80061bc:	4b15      	ldr	r3, [pc, #84]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80061c2:	4814      	ldr	r0, [pc, #80]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 80061c4:	f000 fdae 	bl	8006d24 <HAL_DMA_Init>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_UART_MspInit+0x292>
      Error_Handler();
 80061ce:	f7fe fad1 	bl	8004774 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a0f      	ldr	r2, [pc, #60]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 80061d6:	679a      	str	r2, [r3, #120]	; 0x78
 80061d8:	4a0e      	ldr	r2, [pc, #56]	; (8006214 <HAL_UART_MspInit+0x2d4>)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	2052      	movs	r0, #82	; 0x52
 80061e4:	f000 fb5f 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80061e8:	2052      	movs	r0, #82	; 0x52
 80061ea:	f000 fb76 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 80061ee:	e176      	b.n	80064de <HAL_UART_MspInit+0x59e>
 80061f0:	40004c00 	.word	0x40004c00
 80061f4:	58024400 	.word	0x58024400
 80061f8:	58020c00 	.word	0x58020c00
 80061fc:	24001070 	.word	0x24001070
 8006200:	40020058 	.word	0x40020058
 8006204:	24001580 	.word	0x24001580
 8006208:	40020070 	.word	0x40020070
 800620c:	40007800 	.word	0x40007800
 8006210:	58021000 	.word	0x58021000
 8006214:	24001370 	.word	0x24001370
 8006218:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4ab1      	ldr	r2, [pc, #708]	; (80064e8 <HAL_UART_MspInit+0x5a8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	f040 80a5 	bne.w	8006372 <HAL_UART_MspInit+0x432>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006228:	2302      	movs	r3, #2
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800622c:	2300      	movs	r3, #0
 800622e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006236:	4618      	mov	r0, r3
 8006238:	f004 fd84 	bl	800ad44 <HAL_RCCEx_PeriphCLKConfig>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8006242:	f7fe fa97 	bl	8004774 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006246:	4ba9      	ldr	r3, [pc, #676]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 8006248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800624c:	4aa7      	ldr	r2, [pc, #668]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 800624e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006252:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006256:	4ba5      	ldr	r3, [pc, #660]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 8006258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800625c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006264:	4ba1      	ldr	r3, [pc, #644]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 8006266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800626a:	4aa0      	ldr	r2, [pc, #640]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 800626c:	f043 0308 	orr.w	r3, r3, #8
 8006270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006274:	4b9d      	ldr	r3, [pc, #628]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 8006276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006282:	2360      	movs	r3, #96	; 0x60
 8006284:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006288:	2302      	movs	r3, #2
 800628a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628e:	2300      	movs	r3, #0
 8006290:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006294:	2300      	movs	r3, #0
 8006296:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800629a:	2307      	movs	r3, #7
 800629c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4892      	ldr	r0, [pc, #584]	; (80064f0 <HAL_UART_MspInit+0x5b0>)
 80062a8:	f003 fb76 	bl	8009998 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80062ac:	4b91      	ldr	r3, [pc, #580]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062ae:	4a92      	ldr	r2, [pc, #584]	; (80064f8 <HAL_UART_MspInit+0x5b8>)
 80062b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80062b2:	4b90      	ldr	r3, [pc, #576]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062b4:	222b      	movs	r2, #43	; 0x2b
 80062b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062b8:	4b8e      	ldr	r3, [pc, #568]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062be:	4b8d      	ldr	r3, [pc, #564]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062c4:	4b8b      	ldr	r3, [pc, #556]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062cc:	4b89      	ldr	r3, [pc, #548]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062d2:	4b88      	ldr	r3, [pc, #544]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80062d8:	4b86      	ldr	r3, [pc, #536]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062da:	2200      	movs	r2, #0
 80062dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062de:	4b85      	ldr	r3, [pc, #532]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062e4:	4b83      	ldr	r3, [pc, #524]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80062ea:	4882      	ldr	r0, [pc, #520]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062ec:	f000 fd1a 	bl	8006d24 <HAL_DMA_Init>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 80062f6:	f7fe fa3d 	bl	8004774 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a7d      	ldr	r2, [pc, #500]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 80062fe:	67da      	str	r2, [r3, #124]	; 0x7c
 8006300:	4a7c      	ldr	r2, [pc, #496]	; (80064f4 <HAL_UART_MspInit+0x5b4>)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006306:	4b7d      	ldr	r3, [pc, #500]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 8006308:	4a7d      	ldr	r2, [pc, #500]	; (8006500 <HAL_UART_MspInit+0x5c0>)
 800630a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800630c:	4b7b      	ldr	r3, [pc, #492]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 800630e:	222c      	movs	r2, #44	; 0x2c
 8006310:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006312:	4b7a      	ldr	r3, [pc, #488]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 8006314:	2240      	movs	r2, #64	; 0x40
 8006316:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006318:	4b78      	ldr	r3, [pc, #480]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 800631a:	2200      	movs	r2, #0
 800631c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800631e:	4b77      	ldr	r3, [pc, #476]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 8006320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006324:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006326:	4b75      	ldr	r3, [pc, #468]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 8006328:	2200      	movs	r2, #0
 800632a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800632c:	4b73      	ldr	r3, [pc, #460]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 800632e:	2200      	movs	r2, #0
 8006330:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006332:	4b72      	ldr	r3, [pc, #456]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 8006334:	2200      	movs	r2, #0
 8006336:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006338:	4b70      	ldr	r3, [pc, #448]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 800633a:	2200      	movs	r2, #0
 800633c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800633e:	4b6f      	ldr	r3, [pc, #444]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 8006340:	2200      	movs	r2, #0
 8006342:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006344:	486d      	ldr	r0, [pc, #436]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 8006346:	f000 fced 	bl	8006d24 <HAL_DMA_Init>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_UART_MspInit+0x414>
      Error_Handler();
 8006350:	f7fe fa10 	bl	8004774 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a69      	ldr	r2, [pc, #420]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 8006358:	679a      	str	r2, [r3, #120]	; 0x78
 800635a:	4a68      	ldr	r2, [pc, #416]	; (80064fc <HAL_UART_MspInit+0x5bc>)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006360:	2200      	movs	r2, #0
 8006362:	2100      	movs	r1, #0
 8006364:	2026      	movs	r0, #38	; 0x26
 8006366:	f000 fa9e 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800636a:	2026      	movs	r0, #38	; 0x26
 800636c:	f000 fab5 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 8006370:	e0b5      	b.n	80064de <HAL_UART_MspInit+0x59e>
  else if(uartHandle->Instance==USART3)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a63      	ldr	r2, [pc, #396]	; (8006504 <HAL_UART_MspInit+0x5c4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	f040 80b0 	bne.w	80064de <HAL_UART_MspInit+0x59e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800637e:	2302      	movs	r3, #2
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006382:	2300      	movs	r3, #0
 8006384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800638c:	4618      	mov	r0, r3
 800638e:	f004 fcd9 	bl	800ad44 <HAL_RCCEx_PeriphCLKConfig>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <HAL_UART_MspInit+0x45c>
      Error_Handler();
 8006398:	f7fe f9ec 	bl	8004774 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800639c:	4b53      	ldr	r3, [pc, #332]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 800639e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063a2:	4a52      	ldr	r2, [pc, #328]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 80063a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80063ac:	4b4f      	ldr	r3, [pc, #316]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 80063ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063ba:	4b4c      	ldr	r3, [pc, #304]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 80063bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063c0:	4a4a      	ldr	r2, [pc, #296]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 80063c2:	f043 0308 	orr.w	r3, r3, #8
 80063c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80063ca:	4b48      	ldr	r3, [pc, #288]	; (80064ec <HAL_UART_MspInit+0x5ac>)
 80063cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80063d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e0:	2302      	movs	r3, #2
 80063e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80063f2:	2307      	movs	r3, #7
 80063f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80063fc:	4619      	mov	r1, r3
 80063fe:	483c      	ldr	r0, [pc, #240]	; (80064f0 <HAL_UART_MspInit+0x5b0>)
 8006400:	f003 faca 	bl	8009998 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006404:	4b40      	ldr	r3, [pc, #256]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 8006406:	4a41      	ldr	r2, [pc, #260]	; (800650c <HAL_UART_MspInit+0x5cc>)
 8006408:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800640a:	4b3f      	ldr	r3, [pc, #252]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 800640c:	222d      	movs	r2, #45	; 0x2d
 800640e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006410:	4b3d      	ldr	r3, [pc, #244]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 8006412:	2200      	movs	r2, #0
 8006414:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006416:	4b3c      	ldr	r3, [pc, #240]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 8006418:	2200      	movs	r2, #0
 800641a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800641c:	4b3a      	ldr	r3, [pc, #232]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 800641e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006422:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006424:	4b38      	ldr	r3, [pc, #224]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 8006426:	2200      	movs	r2, #0
 8006428:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800642a:	4b37      	ldr	r3, [pc, #220]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 800642c:	2200      	movs	r2, #0
 800642e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006430:	4b35      	ldr	r3, [pc, #212]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 8006432:	2200      	movs	r2, #0
 8006434:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006436:	4b34      	ldr	r3, [pc, #208]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 8006438:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800643c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800643e:	4b32      	ldr	r3, [pc, #200]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 8006440:	2200      	movs	r2, #0
 8006442:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006444:	4830      	ldr	r0, [pc, #192]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 8006446:	f000 fc6d 	bl	8006d24 <HAL_DMA_Init>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <HAL_UART_MspInit+0x514>
      Error_Handler();
 8006450:	f7fe f990 	bl	8004774 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a2c      	ldr	r2, [pc, #176]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 8006458:	67da      	str	r2, [r3, #124]	; 0x7c
 800645a:	4a2b      	ldr	r2, [pc, #172]	; (8006508 <HAL_UART_MspInit+0x5c8>)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8006460:	4b2b      	ldr	r3, [pc, #172]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 8006462:	4a2c      	ldr	r2, [pc, #176]	; (8006514 <HAL_UART_MspInit+0x5d4>)
 8006464:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006466:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 8006468:	222e      	movs	r2, #46	; 0x2e
 800646a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800646c:	4b28      	ldr	r3, [pc, #160]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 800646e:	2240      	movs	r2, #64	; 0x40
 8006470:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006472:	4b27      	ldr	r3, [pc, #156]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 8006474:	2200      	movs	r2, #0
 8006476:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006478:	4b25      	ldr	r3, [pc, #148]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 800647a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800647e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006480:	4b23      	ldr	r3, [pc, #140]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 8006482:	2200      	movs	r2, #0
 8006484:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006486:	4b22      	ldr	r3, [pc, #136]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 8006488:	2200      	movs	r2, #0
 800648a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800648c:	4b20      	ldr	r3, [pc, #128]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 800648e:	2200      	movs	r2, #0
 8006490:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006492:	4b1f      	ldr	r3, [pc, #124]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 8006494:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006498:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800649a:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 800649c:	2204      	movs	r2, #4
 800649e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80064a0:	4b1b      	ldr	r3, [pc, #108]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 80064a2:	2203      	movs	r2, #3
 80064a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80064a6:	4b1a      	ldr	r3, [pc, #104]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80064ac:	4b18      	ldr	r3, [pc, #96]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80064b2:	4817      	ldr	r0, [pc, #92]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 80064b4:	f000 fc36 	bl	8006d24 <HAL_DMA_Init>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_UART_MspInit+0x582>
      Error_Handler();
 80064be:	f7fe f959 	bl	8004774 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a12      	ldr	r2, [pc, #72]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 80064c6:	679a      	str	r2, [r3, #120]	; 0x78
 80064c8:	4a11      	ldr	r2, [pc, #68]	; (8006510 <HAL_UART_MspInit+0x5d0>)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80064ce:	2200      	movs	r2, #0
 80064d0:	2100      	movs	r1, #0
 80064d2:	2027      	movs	r0, #39	; 0x27
 80064d4:	f000 f9e7 	bl	80068a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80064d8:	2027      	movs	r0, #39	; 0x27
 80064da:	f000 f9fe 	bl	80068da <HAL_NVIC_EnableIRQ>
}
 80064de:	bf00      	nop
 80064e0:	37f8      	adds	r7, #248	; 0xf8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	40004400 	.word	0x40004400
 80064ec:	58024400 	.word	0x58024400
 80064f0:	58020c00 	.word	0x58020c00
 80064f4:	240010e8 	.word	0x240010e8
 80064f8:	40020088 	.word	0x40020088
 80064fc:	240013e8 	.word	0x240013e8
 8006500:	400200a0 	.word	0x400200a0
 8006504:	40004800 	.word	0x40004800
 8006508:	240011f0 	.word	0x240011f0
 800650c:	40020028 	.word	0x40020028
 8006510:	240012f8 	.word	0x240012f8
 8006514:	40020040 	.word	0x40020040

08006518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006550 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800651c:	f7fe fcba 	bl	8004e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006520:	480c      	ldr	r0, [pc, #48]	; (8006554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006522:	490d      	ldr	r1, [pc, #52]	; (8006558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006524:	4a0d      	ldr	r2, [pc, #52]	; (800655c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006528:	e002      	b.n	8006530 <LoopCopyDataInit>

0800652a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800652a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800652c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800652e:	3304      	adds	r3, #4

08006530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006534:	d3f9      	bcc.n	800652a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006536:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006538:	4c0a      	ldr	r4, [pc, #40]	; (8006564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800653a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800653c:	e001      	b.n	8006542 <LoopFillZerobss>

0800653e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800653e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006540:	3204      	adds	r2, #4

08006542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006544:	d3fb      	bcc.n	800653e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006546:	f00b f89f 	bl	8011688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800654a:	f7fd fe45 	bl	80041d8 <main>
  bx  lr
 800654e:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006550:	24001c10 	.word	0x24001c10
  ldr r0, =_sdata
 8006554:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006558:	24000408 	.word	0x24000408
  ldr r2, =_sidata
 800655c:	08015fbc 	.word	0x08015fbc
  ldr r2, =_sbss
 8006560:	24000408 	.word	0x24000408
  ldr r4, =_ebss
 8006564:	2400160c 	.word	0x2400160c

08006568 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006568:	e7fe      	b.n	8006568 <ADC3_IRQHandler>
	...

0800656c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006572:	2003      	movs	r0, #3
 8006574:	f000 f98c 	bl	8006890 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006578:	f004 fa0e 	bl	800a998 <HAL_RCC_GetSysClockFreq>
 800657c:	4602      	mov	r2, r0
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <HAL_Init+0x68>)
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	4913      	ldr	r1, [pc, #76]	; (80065d8 <HAL_Init+0x6c>)
 800658a:	5ccb      	ldrb	r3, [r1, r3]
 800658c:	f003 031f 	and.w	r3, r3, #31
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006596:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <HAL_Init+0x68>)
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	4a0e      	ldr	r2, [pc, #56]	; (80065d8 <HAL_Init+0x6c>)
 80065a0:	5cd3      	ldrb	r3, [r2, r3]
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ac:	4a0b      	ldr	r2, [pc, #44]	; (80065dc <HAL_Init+0x70>)
 80065ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065b0:	4a0b      	ldr	r2, [pc, #44]	; (80065e0 <HAL_Init+0x74>)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065b6:	2000      	movs	r0, #0
 80065b8:	f000 f814 	bl	80065e4 <HAL_InitTick>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e002      	b.n	80065cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80065c6:	f7fe fa7d 	bl	8004ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	58024400 	.word	0x58024400
 80065d8:	080140b4 	.word	0x080140b4
 80065dc:	2400022c 	.word	0x2400022c
 80065e0:	24000228 	.word	0x24000228

080065e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80065ec:	4b15      	ldr	r3, [pc, #84]	; (8006644 <HAL_InitTick+0x60>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e021      	b.n	800663c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80065f8:	4b13      	ldr	r3, [pc, #76]	; (8006648 <HAL_InitTick+0x64>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4b11      	ldr	r3, [pc, #68]	; (8006644 <HAL_InitTick+0x60>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	4619      	mov	r1, r3
 8006602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006606:	fbb3 f3f1 	udiv	r3, r3, r1
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f971 	bl	80068f6 <HAL_SYSTICK_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e00e      	b.n	800663c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b0f      	cmp	r3, #15
 8006622:	d80a      	bhi.n	800663a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006624:	2200      	movs	r2, #0
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	f000 f93b 	bl	80068a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006630:	4a06      	ldr	r2, [pc, #24]	; (800664c <HAL_InitTick+0x68>)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	e000      	b.n	800663c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	24000234 	.word	0x24000234
 8006648:	24000228 	.word	0x24000228
 800664c:	24000230 	.word	0x24000230

08006650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006654:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_IncTick+0x20>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	4b06      	ldr	r3, [pc, #24]	; (8006674 <HAL_IncTick+0x24>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4413      	add	r3, r2
 8006660:	4a04      	ldr	r2, [pc, #16]	; (8006674 <HAL_IncTick+0x24>)
 8006662:	6013      	str	r3, [r2, #0]
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	24000234 	.word	0x24000234
 8006674:	240015f8 	.word	0x240015f8

08006678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  return uwTick;
 800667c:	4b03      	ldr	r3, [pc, #12]	; (800668c <HAL_GetTick+0x14>)
 800667e:	681b      	ldr	r3, [r3, #0]
}
 8006680:	4618      	mov	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	240015f8 	.word	0x240015f8

08006690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006698:	f7ff ffee 	bl	8006678 <HAL_GetTick>
 800669c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d005      	beq.n	80066b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <HAL_Delay+0x44>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80066b6:	bf00      	nop
 80066b8:	f7ff ffde 	bl	8006678 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d8f7      	bhi.n	80066b8 <HAL_Delay+0x28>
  {
  }
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	24000234 	.word	0x24000234

080066d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80066dc:	4b03      	ldr	r3, [pc, #12]	; (80066ec <HAL_GetREVID+0x14>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	0c1b      	lsrs	r3, r3, #16
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	5c001000 	.word	0x5c001000

080066f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006700:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <__NVIC_SetPriorityGrouping+0x40>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800670c:	4013      	ands	r3, r2
 800670e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006718:	4b06      	ldr	r3, [pc, #24]	; (8006734 <__NVIC_SetPriorityGrouping+0x44>)
 800671a:	4313      	orrs	r3, r2
 800671c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800671e:	4a04      	ldr	r2, [pc, #16]	; (8006730 <__NVIC_SetPriorityGrouping+0x40>)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	60d3      	str	r3, [r2, #12]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	e000ed00 	.word	0xe000ed00
 8006734:	05fa0000 	.word	0x05fa0000

08006738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800673c:	4b04      	ldr	r3, [pc, #16]	; (8006750 <__NVIC_GetPriorityGrouping+0x18>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	0a1b      	lsrs	r3, r3, #8
 8006742:	f003 0307 	and.w	r3, r3, #7
}
 8006746:	4618      	mov	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	e000ed00 	.word	0xe000ed00

08006754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800675e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006762:	2b00      	cmp	r3, #0
 8006764:	db0b      	blt.n	800677e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	f003 021f 	and.w	r2, r3, #31
 800676c:	4907      	ldr	r1, [pc, #28]	; (800678c <__NVIC_EnableIRQ+0x38>)
 800676e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	2001      	movs	r0, #1
 8006776:	fa00 f202 	lsl.w	r2, r0, r2
 800677a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	e000e100 	.word	0xe000e100

08006790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	6039      	str	r1, [r7, #0]
 800679a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800679c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	db0a      	blt.n	80067ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	490c      	ldr	r1, [pc, #48]	; (80067dc <__NVIC_SetPriority+0x4c>)
 80067aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067ae:	0112      	lsls	r2, r2, #4
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	440b      	add	r3, r1
 80067b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067b8:	e00a      	b.n	80067d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	4908      	ldr	r1, [pc, #32]	; (80067e0 <__NVIC_SetPriority+0x50>)
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	3b04      	subs	r3, #4
 80067c8:	0112      	lsls	r2, r2, #4
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	440b      	add	r3, r1
 80067ce:	761a      	strb	r2, [r3, #24]
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	e000e100 	.word	0xe000e100
 80067e0:	e000ed00 	.word	0xe000ed00

080067e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b089      	sub	sp, #36	; 0x24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f1c3 0307 	rsb	r3, r3, #7
 80067fe:	2b04      	cmp	r3, #4
 8006800:	bf28      	it	cs
 8006802:	2304      	movcs	r3, #4
 8006804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3304      	adds	r3, #4
 800680a:	2b06      	cmp	r3, #6
 800680c:	d902      	bls.n	8006814 <NVIC_EncodePriority+0x30>
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	3b03      	subs	r3, #3
 8006812:	e000      	b.n	8006816 <NVIC_EncodePriority+0x32>
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006818:	f04f 32ff 	mov.w	r2, #4294967295
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	43da      	mvns	r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	401a      	ands	r2, r3
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800682c:	f04f 31ff 	mov.w	r1, #4294967295
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	fa01 f303 	lsl.w	r3, r1, r3
 8006836:	43d9      	mvns	r1, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800683c:	4313      	orrs	r3, r2
         );
}
 800683e:	4618      	mov	r0, r3
 8006840:	3724      	adds	r7, #36	; 0x24
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
	...

0800684c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3b01      	subs	r3, #1
 8006858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800685c:	d301      	bcc.n	8006862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800685e:	2301      	movs	r3, #1
 8006860:	e00f      	b.n	8006882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006862:	4a0a      	ldr	r2, [pc, #40]	; (800688c <SysTick_Config+0x40>)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3b01      	subs	r3, #1
 8006868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800686a:	210f      	movs	r1, #15
 800686c:	f04f 30ff 	mov.w	r0, #4294967295
 8006870:	f7ff ff8e 	bl	8006790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006874:	4b05      	ldr	r3, [pc, #20]	; (800688c <SysTick_Config+0x40>)
 8006876:	2200      	movs	r2, #0
 8006878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800687a:	4b04      	ldr	r3, [pc, #16]	; (800688c <SysTick_Config+0x40>)
 800687c:	2207      	movs	r2, #7
 800687e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	e000e010 	.word	0xe000e010

08006890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff ff29 	bl	80066f0 <__NVIC_SetPriorityGrouping>
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b086      	sub	sp, #24
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	4603      	mov	r3, r0
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80068b4:	f7ff ff40 	bl	8006738 <__NVIC_GetPriorityGrouping>
 80068b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	6978      	ldr	r0, [r7, #20]
 80068c0:	f7ff ff90 	bl	80067e4 <NVIC_EncodePriority>
 80068c4:	4602      	mov	r2, r0
 80068c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff ff5f 	bl	8006790 <__NVIC_SetPriority>
}
 80068d2:	bf00      	nop
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	4603      	mov	r3, r0
 80068e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff ff33 	bl	8006754 <__NVIC_EnableIRQ>
}
 80068ee:	bf00      	nop
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff ffa4 	bl	800684c <SysTick_Config>
 8006904:	4603      	mov	r3, r0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006912:	f000 f802 	bl	800691a <HAL_SYSTICK_Callback>
}
 8006916:	bf00      	nop
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800691a:	b480      	push	{r7}
 800691c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e054      	b.n	80069e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	7f5b      	ldrb	r3, [r3, #29]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d105      	bne.n	8006950 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fb fd1e 	bl	800238c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	791b      	ldrb	r3, [r3, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10c      	bne.n	8006978 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a22      	ldr	r2, [pc, #136]	; (80069ec <HAL_CRC_Init+0xc4>)
 8006964:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0218 	bic.w	r2, r2, #24
 8006974:	609a      	str	r2, [r3, #8]
 8006976:	e00c      	b.n	8006992 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6899      	ldr	r1, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	461a      	mov	r2, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f948 	bl	8006c18 <HAL_CRCEx_Polynomial_Set>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e028      	b.n	80069e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	795b      	ldrb	r3, [r3, #5]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d105      	bne.n	80069a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f04f 32ff 	mov.w	r2, #4294967295
 80069a2:	611a      	str	r2, [r3, #16]
 80069a4:	e004      	b.n	80069b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6912      	ldr	r2, [r2, #16]
 80069ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695a      	ldr	r2, [r3, #20]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699a      	ldr	r2, [r3, #24]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	04c11db7 	.word	0x04c11db7

080069f0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80069fc:	2300      	movs	r3, #0
 80069fe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2202      	movs	r2, #2
 8006a04:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0201 	orr.w	r2, r2, #1
 8006a14:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d006      	beq.n	8006a2c <HAL_CRC_Calculate+0x3c>
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d829      	bhi.n	8006a76 <HAL_CRC_Calculate+0x86>
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d019      	beq.n	8006a5a <HAL_CRC_Calculate+0x6a>
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d01e      	beq.n	8006a68 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006a2a:	e024      	b.n	8006a76 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	e00a      	b.n	8006a48 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	441a      	add	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	3301      	adds	r3, #1
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d3f0      	bcc.n	8006a32 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	613b      	str	r3, [r7, #16]
      break;
 8006a58:	e00e      	b.n	8006a78 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 f812 	bl	8006a88 <CRC_Handle_8>
 8006a64:	6138      	str	r0, [r7, #16]
      break;
 8006a66:	e007      	b.n	8006a78 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	68b9      	ldr	r1, [r7, #8]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f899 	bl	8006ba4 <CRC_Handle_16>
 8006a72:	6138      	str	r0, [r7, #16]
      break;
 8006a74:	e000      	b.n	8006a78 <HAL_CRC_Calculate+0x88>
      break;
 8006a76:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006a7e:	693b      	ldr	r3, [r7, #16]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b089      	sub	sp, #36	; 0x24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006a94:	2300      	movs	r3, #0
 8006a96:	61fb      	str	r3, [r7, #28]
 8006a98:	e023      	b.n	8006ae2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	3301      	adds	r3, #1
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	440b      	add	r3, r1
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006ab4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	3302      	adds	r3, #2
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	440b      	add	r3, r1
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006ac4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	3303      	adds	r3, #3
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	440b      	add	r3, r1
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006ad8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006ada:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	089b      	lsrs	r3, r3, #2
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d3d6      	bcc.n	8006a9a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d04d      	beq.n	8006b92 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d107      	bne.n	8006b10 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	4413      	add	r3, r2
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d116      	bne.n	8006b48 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	4413      	add	r3, r2
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	b21a      	sxth	r2, r3
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	440b      	add	r3, r1
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	b21b      	sxth	r3, r3
 8006b36:	4313      	orrs	r3, r2
 8006b38:	b21b      	sxth	r3, r3
 8006b3a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	8b7a      	ldrh	r2, [r7, #26]
 8006b46:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d11f      	bne.n	8006b92 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4413      	add	r3, r2
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	b21a      	sxth	r2, r3
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	3301      	adds	r3, #1
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	440b      	add	r3, r1
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b21b      	sxth	r3, r3
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b21b      	sxth	r3, r3
 8006b72:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	8b7a      	ldrh	r2, [r7, #26]
 8006b7e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	3302      	adds	r3, #2
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	4413      	add	r3, r2
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3724      	adds	r7, #36	; 0x24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e013      	b.n	8006bde <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	041a      	lsls	r2, r3, #16
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	3302      	adds	r3, #2
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	440b      	add	r3, r1
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d3e6      	bcc.n	8006bb6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	4413      	add	r3, r2
 8006c00:	881a      	ldrh	r2, [r3, #0]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006c28:	231f      	movs	r3, #31
 8006c2a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006c2c:	bf00      	nop
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1e5a      	subs	r2, r3, #1
 8006c32:	613a      	str	r2, [r7, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d009      	beq.n	8006c4c <HAL_CRCEx_Polynomial_Set+0x34>
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f003 031f 	and.w	r3, r3, #31
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	fa22 f303 	lsr.w	r3, r2, r3
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0f0      	beq.n	8006c2e <HAL_CRCEx_Polynomial_Set+0x16>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b18      	cmp	r3, #24
 8006c50:	d846      	bhi.n	8006ce0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006ce7 	.word	0x08006ce7
 8006c5c:	08006ce1 	.word	0x08006ce1
 8006c60:	08006ce1 	.word	0x08006ce1
 8006c64:	08006ce1 	.word	0x08006ce1
 8006c68:	08006ce1 	.word	0x08006ce1
 8006c6c:	08006ce1 	.word	0x08006ce1
 8006c70:	08006ce1 	.word	0x08006ce1
 8006c74:	08006ce1 	.word	0x08006ce1
 8006c78:	08006cd5 	.word	0x08006cd5
 8006c7c:	08006ce1 	.word	0x08006ce1
 8006c80:	08006ce1 	.word	0x08006ce1
 8006c84:	08006ce1 	.word	0x08006ce1
 8006c88:	08006ce1 	.word	0x08006ce1
 8006c8c:	08006ce1 	.word	0x08006ce1
 8006c90:	08006ce1 	.word	0x08006ce1
 8006c94:	08006ce1 	.word	0x08006ce1
 8006c98:	08006cc9 	.word	0x08006cc9
 8006c9c:	08006ce1 	.word	0x08006ce1
 8006ca0:	08006ce1 	.word	0x08006ce1
 8006ca4:	08006ce1 	.word	0x08006ce1
 8006ca8:	08006ce1 	.word	0x08006ce1
 8006cac:	08006ce1 	.word	0x08006ce1
 8006cb0:	08006ce1 	.word	0x08006ce1
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	08006cbd 	.word	0x08006cbd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	2b06      	cmp	r3, #6
 8006cc0:	d913      	bls.n	8006cea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006cc6:	e010      	b.n	8006cea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b07      	cmp	r3, #7
 8006ccc:	d90f      	bls.n	8006cee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006cd2:	e00c      	b.n	8006cee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b0f      	cmp	r3, #15
 8006cd8:	d90b      	bls.n	8006cf2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006cde:	e008      	b.n	8006cf2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce4:	e006      	b.n	8006cf4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e004      	b.n	8006cf4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cea:	bf00      	nop
 8006cec:	e002      	b.n	8006cf4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cee:	bf00      	nop
 8006cf0:	e000      	b.n	8006cf4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cf2:	bf00      	nop
  }
  if (status == HAL_OK)
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10d      	bne.n	8006d16 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f023 0118 	bic.w	r1, r3, #24
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006d2c:	f7ff fca4 	bl	8006678 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e316      	b.n	800736a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a66      	ldr	r2, [pc, #408]	; (8006edc <HAL_DMA_Init+0x1b8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d04a      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a65      	ldr	r2, [pc, #404]	; (8006ee0 <HAL_DMA_Init+0x1bc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d045      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a63      	ldr	r2, [pc, #396]	; (8006ee4 <HAL_DMA_Init+0x1c0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d040      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a62      	ldr	r2, [pc, #392]	; (8006ee8 <HAL_DMA_Init+0x1c4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d03b      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a60      	ldr	r2, [pc, #384]	; (8006eec <HAL_DMA_Init+0x1c8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d036      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a5f      	ldr	r2, [pc, #380]	; (8006ef0 <HAL_DMA_Init+0x1cc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d031      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a5d      	ldr	r2, [pc, #372]	; (8006ef4 <HAL_DMA_Init+0x1d0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d02c      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a5c      	ldr	r2, [pc, #368]	; (8006ef8 <HAL_DMA_Init+0x1d4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d027      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a5a      	ldr	r2, [pc, #360]	; (8006efc <HAL_DMA_Init+0x1d8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d022      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a59      	ldr	r2, [pc, #356]	; (8006f00 <HAL_DMA_Init+0x1dc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d01d      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a57      	ldr	r2, [pc, #348]	; (8006f04 <HAL_DMA_Init+0x1e0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d018      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a56      	ldr	r2, [pc, #344]	; (8006f08 <HAL_DMA_Init+0x1e4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d013      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a54      	ldr	r2, [pc, #336]	; (8006f0c <HAL_DMA_Init+0x1e8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00e      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a53      	ldr	r2, [pc, #332]	; (8006f10 <HAL_DMA_Init+0x1ec>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d009      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a51      	ldr	r2, [pc, #324]	; (8006f14 <HAL_DMA_Init+0x1f0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <HAL_DMA_Init+0xb8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a50      	ldr	r2, [pc, #320]	; (8006f18 <HAL_DMA_Init+0x1f4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d101      	bne.n	8006de0 <HAL_DMA_Init+0xbc>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <HAL_DMA_Init+0xbe>
 8006de0:	2300      	movs	r3, #0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 813b 	beq.w	800705e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a37      	ldr	r2, [pc, #220]	; (8006edc <HAL_DMA_Init+0x1b8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d04a      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a36      	ldr	r2, [pc, #216]	; (8006ee0 <HAL_DMA_Init+0x1bc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d045      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a34      	ldr	r2, [pc, #208]	; (8006ee4 <HAL_DMA_Init+0x1c0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d040      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a33      	ldr	r2, [pc, #204]	; (8006ee8 <HAL_DMA_Init+0x1c4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d03b      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a31      	ldr	r2, [pc, #196]	; (8006eec <HAL_DMA_Init+0x1c8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d036      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a30      	ldr	r2, [pc, #192]	; (8006ef0 <HAL_DMA_Init+0x1cc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d031      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a2e      	ldr	r2, [pc, #184]	; (8006ef4 <HAL_DMA_Init+0x1d0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d02c      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a2d      	ldr	r2, [pc, #180]	; (8006ef8 <HAL_DMA_Init+0x1d4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d027      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a2b      	ldr	r2, [pc, #172]	; (8006efc <HAL_DMA_Init+0x1d8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d022      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2a      	ldr	r2, [pc, #168]	; (8006f00 <HAL_DMA_Init+0x1dc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d01d      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a28      	ldr	r2, [pc, #160]	; (8006f04 <HAL_DMA_Init+0x1e0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d018      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a27      	ldr	r2, [pc, #156]	; (8006f08 <HAL_DMA_Init+0x1e4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d013      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a25      	ldr	r2, [pc, #148]	; (8006f0c <HAL_DMA_Init+0x1e8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00e      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a24      	ldr	r2, [pc, #144]	; (8006f10 <HAL_DMA_Init+0x1ec>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d009      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <HAL_DMA_Init+0x1f0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <HAL_DMA_Init+0x174>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a21      	ldr	r2, [pc, #132]	; (8006f18 <HAL_DMA_Init+0x1f4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d108      	bne.n	8006eaa <HAL_DMA_Init+0x186>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0201 	bic.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e007      	b.n	8006eba <HAL_DMA_Init+0x196>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006eba:	e02f      	b.n	8006f1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ebc:	f7ff fbdc 	bl	8006678 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b05      	cmp	r3, #5
 8006ec8:	d928      	bls.n	8006f1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2203      	movs	r2, #3
 8006ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e246      	b.n	800736a <HAL_DMA_Init+0x646>
 8006edc:	40020010 	.word	0x40020010
 8006ee0:	40020028 	.word	0x40020028
 8006ee4:	40020040 	.word	0x40020040
 8006ee8:	40020058 	.word	0x40020058
 8006eec:	40020070 	.word	0x40020070
 8006ef0:	40020088 	.word	0x40020088
 8006ef4:	400200a0 	.word	0x400200a0
 8006ef8:	400200b8 	.word	0x400200b8
 8006efc:	40020410 	.word	0x40020410
 8006f00:	40020428 	.word	0x40020428
 8006f04:	40020440 	.word	0x40020440
 8006f08:	40020458 	.word	0x40020458
 8006f0c:	40020470 	.word	0x40020470
 8006f10:	40020488 	.word	0x40020488
 8006f14:	400204a0 	.word	0x400204a0
 8006f18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1c8      	bne.n	8006ebc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4b83      	ldr	r3, [pc, #524]	; (8007144 <HAL_DMA_Init+0x420>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006f42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d107      	bne.n	8006f80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006f80:	4b71      	ldr	r3, [pc, #452]	; (8007148 <HAL_DMA_Init+0x424>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	4b71      	ldr	r3, [pc, #452]	; (800714c <HAL_DMA_Init+0x428>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f8c:	d328      	bcc.n	8006fe0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b28      	cmp	r3, #40	; 0x28
 8006f94:	d903      	bls.n	8006f9e <HAL_DMA_Init+0x27a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f9c:	d917      	bls.n	8006fce <HAL_DMA_Init+0x2aa>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8006fa4:	d903      	bls.n	8006fae <HAL_DMA_Init+0x28a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2b42      	cmp	r3, #66	; 0x42
 8006fac:	d90f      	bls.n	8006fce <HAL_DMA_Init+0x2aa>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b46      	cmp	r3, #70	; 0x46
 8006fb4:	d903      	bls.n	8006fbe <HAL_DMA_Init+0x29a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2b48      	cmp	r3, #72	; 0x48
 8006fbc:	d907      	bls.n	8006fce <HAL_DMA_Init+0x2aa>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b4e      	cmp	r3, #78	; 0x4e
 8006fc4:	d905      	bls.n	8006fd2 <HAL_DMA_Init+0x2ae>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b52      	cmp	r3, #82	; 0x52
 8006fcc:	d801      	bhi.n	8006fd2 <HAL_DMA_Init+0x2ae>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <HAL_DMA_Init+0x2b0>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fde:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0307 	bic.w	r3, r3, #7
 8006ff6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	2b04      	cmp	r3, #4
 8007008:	d117      	bne.n	800703a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	4313      	orrs	r3, r2
 8007012:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f002 fb31 	bl	8009684 <DMA_CheckFifoParam>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2240      	movs	r2, #64	; 0x40
 800702c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e197      	b.n	800736a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f002 fa6c 	bl	8009520 <DMA_CalcBaseAndBitshift>
 8007048:	4603      	mov	r3, r0
 800704a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	223f      	movs	r2, #63	; 0x3f
 8007056:	409a      	lsls	r2, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	609a      	str	r2, [r3, #8]
 800705c:	e0cd      	b.n	80071fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a3b      	ldr	r2, [pc, #236]	; (8007150 <HAL_DMA_Init+0x42c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d022      	beq.n	80070ae <HAL_DMA_Init+0x38a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a39      	ldr	r2, [pc, #228]	; (8007154 <HAL_DMA_Init+0x430>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01d      	beq.n	80070ae <HAL_DMA_Init+0x38a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a38      	ldr	r2, [pc, #224]	; (8007158 <HAL_DMA_Init+0x434>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d018      	beq.n	80070ae <HAL_DMA_Init+0x38a>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a36      	ldr	r2, [pc, #216]	; (800715c <HAL_DMA_Init+0x438>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <HAL_DMA_Init+0x38a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a35      	ldr	r2, [pc, #212]	; (8007160 <HAL_DMA_Init+0x43c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00e      	beq.n	80070ae <HAL_DMA_Init+0x38a>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a33      	ldr	r2, [pc, #204]	; (8007164 <HAL_DMA_Init+0x440>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d009      	beq.n	80070ae <HAL_DMA_Init+0x38a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a32      	ldr	r2, [pc, #200]	; (8007168 <HAL_DMA_Init+0x444>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d004      	beq.n	80070ae <HAL_DMA_Init+0x38a>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a30      	ldr	r2, [pc, #192]	; (800716c <HAL_DMA_Init+0x448>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d101      	bne.n	80070b2 <HAL_DMA_Init+0x38e>
 80070ae:	2301      	movs	r3, #1
 80070b0:	e000      	b.n	80070b4 <HAL_DMA_Init+0x390>
 80070b2:	2300      	movs	r3, #0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8097 	beq.w	80071e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a24      	ldr	r2, [pc, #144]	; (8007150 <HAL_DMA_Init+0x42c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d021      	beq.n	8007108 <HAL_DMA_Init+0x3e4>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a22      	ldr	r2, [pc, #136]	; (8007154 <HAL_DMA_Init+0x430>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01c      	beq.n	8007108 <HAL_DMA_Init+0x3e4>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a21      	ldr	r2, [pc, #132]	; (8007158 <HAL_DMA_Init+0x434>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d017      	beq.n	8007108 <HAL_DMA_Init+0x3e4>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1f      	ldr	r2, [pc, #124]	; (800715c <HAL_DMA_Init+0x438>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d012      	beq.n	8007108 <HAL_DMA_Init+0x3e4>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1e      	ldr	r2, [pc, #120]	; (8007160 <HAL_DMA_Init+0x43c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00d      	beq.n	8007108 <HAL_DMA_Init+0x3e4>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <HAL_DMA_Init+0x440>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d008      	beq.n	8007108 <HAL_DMA_Init+0x3e4>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1b      	ldr	r2, [pc, #108]	; (8007168 <HAL_DMA_Init+0x444>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <HAL_DMA_Init+0x3e4>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a19      	ldr	r2, [pc, #100]	; (800716c <HAL_DMA_Init+0x448>)
 8007106:	4293      	cmp	r3, r2
 8007108:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2202      	movs	r2, #2
 800710e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4b12      	ldr	r3, [pc, #72]	; (8007170 <HAL_DMA_Init+0x44c>)
 8007126:	4013      	ands	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b40      	cmp	r3, #64	; 0x40
 8007130:	d020      	beq.n	8007174 <HAL_DMA_Init+0x450>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	2b80      	cmp	r3, #128	; 0x80
 8007138:	d102      	bne.n	8007140 <HAL_DMA_Init+0x41c>
 800713a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800713e:	e01a      	b.n	8007176 <HAL_DMA_Init+0x452>
 8007140:	2300      	movs	r3, #0
 8007142:	e018      	b.n	8007176 <HAL_DMA_Init+0x452>
 8007144:	fe10803f 	.word	0xfe10803f
 8007148:	5c001000 	.word	0x5c001000
 800714c:	ffff0000 	.word	0xffff0000
 8007150:	58025408 	.word	0x58025408
 8007154:	5802541c 	.word	0x5802541c
 8007158:	58025430 	.word	0x58025430
 800715c:	58025444 	.word	0x58025444
 8007160:	58025458 	.word	0x58025458
 8007164:	5802546c 	.word	0x5802546c
 8007168:	58025480 	.word	0x58025480
 800716c:	58025494 	.word	0x58025494
 8007170:	fffe000f 	.word	0xfffe000f
 8007174:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	68d2      	ldr	r2, [r2, #12]
 800717a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800717c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800718c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800719c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80071a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	4b6e      	ldr	r3, [pc, #440]	; (8007374 <HAL_DMA_Init+0x650>)
 80071bc:	4413      	add	r3, r2
 80071be:	4a6e      	ldr	r2, [pc, #440]	; (8007378 <HAL_DMA_Init+0x654>)
 80071c0:	fba2 2303 	umull	r2, r3, r2, r3
 80071c4:	091b      	lsrs	r3, r3, #4
 80071c6:	009a      	lsls	r2, r3, #2
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f002 f9a7 	bl	8009520 <DMA_CalcBaseAndBitshift>
 80071d2:	4603      	mov	r3, r0
 80071d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	2201      	movs	r2, #1
 80071e0:	409a      	lsls	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	e008      	b.n	80071fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2240      	movs	r2, #64	; 0x40
 80071ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2203      	movs	r2, #3
 80071f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e0b7      	b.n	800736a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a5f      	ldr	r2, [pc, #380]	; (800737c <HAL_DMA_Init+0x658>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d072      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a5d      	ldr	r2, [pc, #372]	; (8007380 <HAL_DMA_Init+0x65c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d06d      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a5c      	ldr	r2, [pc, #368]	; (8007384 <HAL_DMA_Init+0x660>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d068      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a5a      	ldr	r2, [pc, #360]	; (8007388 <HAL_DMA_Init+0x664>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d063      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a59      	ldr	r2, [pc, #356]	; (800738c <HAL_DMA_Init+0x668>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d05e      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a57      	ldr	r2, [pc, #348]	; (8007390 <HAL_DMA_Init+0x66c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d059      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a56      	ldr	r2, [pc, #344]	; (8007394 <HAL_DMA_Init+0x670>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d054      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a54      	ldr	r2, [pc, #336]	; (8007398 <HAL_DMA_Init+0x674>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d04f      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a53      	ldr	r2, [pc, #332]	; (800739c <HAL_DMA_Init+0x678>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d04a      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a51      	ldr	r2, [pc, #324]	; (80073a0 <HAL_DMA_Init+0x67c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d045      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a50      	ldr	r2, [pc, #320]	; (80073a4 <HAL_DMA_Init+0x680>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d040      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a4e      	ldr	r2, [pc, #312]	; (80073a8 <HAL_DMA_Init+0x684>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d03b      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a4d      	ldr	r2, [pc, #308]	; (80073ac <HAL_DMA_Init+0x688>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d036      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a4b      	ldr	r2, [pc, #300]	; (80073b0 <HAL_DMA_Init+0x68c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d031      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a4a      	ldr	r2, [pc, #296]	; (80073b4 <HAL_DMA_Init+0x690>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d02c      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a48      	ldr	r2, [pc, #288]	; (80073b8 <HAL_DMA_Init+0x694>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d027      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a47      	ldr	r2, [pc, #284]	; (80073bc <HAL_DMA_Init+0x698>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d022      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a45      	ldr	r2, [pc, #276]	; (80073c0 <HAL_DMA_Init+0x69c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01d      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a44      	ldr	r2, [pc, #272]	; (80073c4 <HAL_DMA_Init+0x6a0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d018      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a42      	ldr	r2, [pc, #264]	; (80073c8 <HAL_DMA_Init+0x6a4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a41      	ldr	r2, [pc, #260]	; (80073cc <HAL_DMA_Init+0x6a8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00e      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a3f      	ldr	r2, [pc, #252]	; (80073d0 <HAL_DMA_Init+0x6ac>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d009      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a3e      	ldr	r2, [pc, #248]	; (80073d4 <HAL_DMA_Init+0x6b0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <HAL_DMA_Init+0x5c6>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a3c      	ldr	r2, [pc, #240]	; (80073d8 <HAL_DMA_Init+0x6b4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d101      	bne.n	80072ee <HAL_DMA_Init+0x5ca>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <HAL_DMA_Init+0x5cc>
 80072ee:	2300      	movs	r3, #0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d032      	beq.n	800735a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f002 fa41 	bl	800977c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2b80      	cmp	r3, #128	; 0x80
 8007300:	d102      	bne.n	8007308 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800731c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d010      	beq.n	8007348 <HAL_DMA_Init+0x624>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b08      	cmp	r3, #8
 800732c:	d80c      	bhi.n	8007348 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f002 fabe 	bl	80098b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	e008      	b.n	800735a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	a7fdabf8 	.word	0xa7fdabf8
 8007378:	cccccccd 	.word	0xcccccccd
 800737c:	40020010 	.word	0x40020010
 8007380:	40020028 	.word	0x40020028
 8007384:	40020040 	.word	0x40020040
 8007388:	40020058 	.word	0x40020058
 800738c:	40020070 	.word	0x40020070
 8007390:	40020088 	.word	0x40020088
 8007394:	400200a0 	.word	0x400200a0
 8007398:	400200b8 	.word	0x400200b8
 800739c:	40020410 	.word	0x40020410
 80073a0:	40020428 	.word	0x40020428
 80073a4:	40020440 	.word	0x40020440
 80073a8:	40020458 	.word	0x40020458
 80073ac:	40020470 	.word	0x40020470
 80073b0:	40020488 	.word	0x40020488
 80073b4:	400204a0 	.word	0x400204a0
 80073b8:	400204b8 	.word	0x400204b8
 80073bc:	58025408 	.word	0x58025408
 80073c0:	5802541c 	.word	0x5802541c
 80073c4:	58025430 	.word	0x58025430
 80073c8:	58025444 	.word	0x58025444
 80073cc:	58025458 	.word	0x58025458
 80073d0:	5802546c 	.word	0x5802546c
 80073d4:	58025480 	.word	0x58025480
 80073d8:	58025494 	.word	0x58025494

080073dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e226      	b.n	8007846 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <HAL_DMA_Start_IT+0x2a>
 8007402:	2302      	movs	r3, #2
 8007404:	e21f      	b.n	8007846 <HAL_DMA_Start_IT+0x46a>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b01      	cmp	r3, #1
 8007418:	f040 820a 	bne.w	8007830 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a68      	ldr	r2, [pc, #416]	; (80075d0 <HAL_DMA_Start_IT+0x1f4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d04a      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a66      	ldr	r2, [pc, #408]	; (80075d4 <HAL_DMA_Start_IT+0x1f8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d045      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a65      	ldr	r2, [pc, #404]	; (80075d8 <HAL_DMA_Start_IT+0x1fc>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d040      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a63      	ldr	r2, [pc, #396]	; (80075dc <HAL_DMA_Start_IT+0x200>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d03b      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a62      	ldr	r2, [pc, #392]	; (80075e0 <HAL_DMA_Start_IT+0x204>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d036      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a60      	ldr	r2, [pc, #384]	; (80075e4 <HAL_DMA_Start_IT+0x208>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d031      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a5f      	ldr	r2, [pc, #380]	; (80075e8 <HAL_DMA_Start_IT+0x20c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d02c      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a5d      	ldr	r2, [pc, #372]	; (80075ec <HAL_DMA_Start_IT+0x210>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d027      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a5c      	ldr	r2, [pc, #368]	; (80075f0 <HAL_DMA_Start_IT+0x214>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d022      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a5a      	ldr	r2, [pc, #360]	; (80075f4 <HAL_DMA_Start_IT+0x218>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d01d      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a59      	ldr	r2, [pc, #356]	; (80075f8 <HAL_DMA_Start_IT+0x21c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d018      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a57      	ldr	r2, [pc, #348]	; (80075fc <HAL_DMA_Start_IT+0x220>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d013      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a56      	ldr	r2, [pc, #344]	; (8007600 <HAL_DMA_Start_IT+0x224>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00e      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a54      	ldr	r2, [pc, #336]	; (8007604 <HAL_DMA_Start_IT+0x228>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d009      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a53      	ldr	r2, [pc, #332]	; (8007608 <HAL_DMA_Start_IT+0x22c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d004      	beq.n	80074ca <HAL_DMA_Start_IT+0xee>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a51      	ldr	r2, [pc, #324]	; (800760c <HAL_DMA_Start_IT+0x230>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d108      	bne.n	80074dc <HAL_DMA_Start_IT+0x100>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e007      	b.n	80074ec <HAL_DMA_Start_IT+0x110>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0201 	bic.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f001 fe68 	bl	80091c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a34      	ldr	r2, [pc, #208]	; (80075d0 <HAL_DMA_Start_IT+0x1f4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d04a      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a33      	ldr	r2, [pc, #204]	; (80075d4 <HAL_DMA_Start_IT+0x1f8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d045      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a31      	ldr	r2, [pc, #196]	; (80075d8 <HAL_DMA_Start_IT+0x1fc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d040      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a30      	ldr	r2, [pc, #192]	; (80075dc <HAL_DMA_Start_IT+0x200>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d03b      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a2e      	ldr	r2, [pc, #184]	; (80075e0 <HAL_DMA_Start_IT+0x204>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d036      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a2d      	ldr	r2, [pc, #180]	; (80075e4 <HAL_DMA_Start_IT+0x208>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d031      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a2b      	ldr	r2, [pc, #172]	; (80075e8 <HAL_DMA_Start_IT+0x20c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d02c      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a2a      	ldr	r2, [pc, #168]	; (80075ec <HAL_DMA_Start_IT+0x210>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d027      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a28      	ldr	r2, [pc, #160]	; (80075f0 <HAL_DMA_Start_IT+0x214>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d022      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a27      	ldr	r2, [pc, #156]	; (80075f4 <HAL_DMA_Start_IT+0x218>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d01d      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a25      	ldr	r2, [pc, #148]	; (80075f8 <HAL_DMA_Start_IT+0x21c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d018      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a24      	ldr	r2, [pc, #144]	; (80075fc <HAL_DMA_Start_IT+0x220>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a22      	ldr	r2, [pc, #136]	; (8007600 <HAL_DMA_Start_IT+0x224>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00e      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a21      	ldr	r2, [pc, #132]	; (8007604 <HAL_DMA_Start_IT+0x228>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d009      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <HAL_DMA_Start_IT+0x22c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d004      	beq.n	8007598 <HAL_DMA_Start_IT+0x1bc>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1e      	ldr	r2, [pc, #120]	; (800760c <HAL_DMA_Start_IT+0x230>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d101      	bne.n	800759c <HAL_DMA_Start_IT+0x1c0>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <HAL_DMA_Start_IT+0x1c2>
 800759c:	2300      	movs	r3, #0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d036      	beq.n	8007610 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f023 021e 	bic.w	r2, r3, #30
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0216 	orr.w	r2, r2, #22
 80075b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d03e      	beq.n	800763c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0208 	orr.w	r2, r2, #8
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e035      	b.n	800763c <HAL_DMA_Start_IT+0x260>
 80075d0:	40020010 	.word	0x40020010
 80075d4:	40020028 	.word	0x40020028
 80075d8:	40020040 	.word	0x40020040
 80075dc:	40020058 	.word	0x40020058
 80075e0:	40020070 	.word	0x40020070
 80075e4:	40020088 	.word	0x40020088
 80075e8:	400200a0 	.word	0x400200a0
 80075ec:	400200b8 	.word	0x400200b8
 80075f0:	40020410 	.word	0x40020410
 80075f4:	40020428 	.word	0x40020428
 80075f8:	40020440 	.word	0x40020440
 80075fc:	40020458 	.word	0x40020458
 8007600:	40020470 	.word	0x40020470
 8007604:	40020488 	.word	0x40020488
 8007608:	400204a0 	.word	0x400204a0
 800760c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f023 020e 	bic.w	r2, r3, #14
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 020a 	orr.w	r2, r2, #10
 8007622:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0204 	orr.w	r2, r2, #4
 800763a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a83      	ldr	r2, [pc, #524]	; (8007850 <HAL_DMA_Start_IT+0x474>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d072      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a82      	ldr	r2, [pc, #520]	; (8007854 <HAL_DMA_Start_IT+0x478>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d06d      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a80      	ldr	r2, [pc, #512]	; (8007858 <HAL_DMA_Start_IT+0x47c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d068      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a7f      	ldr	r2, [pc, #508]	; (800785c <HAL_DMA_Start_IT+0x480>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d063      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a7d      	ldr	r2, [pc, #500]	; (8007860 <HAL_DMA_Start_IT+0x484>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d05e      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a7c      	ldr	r2, [pc, #496]	; (8007864 <HAL_DMA_Start_IT+0x488>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d059      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a7a      	ldr	r2, [pc, #488]	; (8007868 <HAL_DMA_Start_IT+0x48c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d054      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a79      	ldr	r2, [pc, #484]	; (800786c <HAL_DMA_Start_IT+0x490>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d04f      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a77      	ldr	r2, [pc, #476]	; (8007870 <HAL_DMA_Start_IT+0x494>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d04a      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a76      	ldr	r2, [pc, #472]	; (8007874 <HAL_DMA_Start_IT+0x498>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d045      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a74      	ldr	r2, [pc, #464]	; (8007878 <HAL_DMA_Start_IT+0x49c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d040      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a73      	ldr	r2, [pc, #460]	; (800787c <HAL_DMA_Start_IT+0x4a0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d03b      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a71      	ldr	r2, [pc, #452]	; (8007880 <HAL_DMA_Start_IT+0x4a4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d036      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a70      	ldr	r2, [pc, #448]	; (8007884 <HAL_DMA_Start_IT+0x4a8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d031      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a6e      	ldr	r2, [pc, #440]	; (8007888 <HAL_DMA_Start_IT+0x4ac>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d02c      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a6d      	ldr	r2, [pc, #436]	; (800788c <HAL_DMA_Start_IT+0x4b0>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d027      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a6b      	ldr	r2, [pc, #428]	; (8007890 <HAL_DMA_Start_IT+0x4b4>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d022      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a6a      	ldr	r2, [pc, #424]	; (8007894 <HAL_DMA_Start_IT+0x4b8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d01d      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a68      	ldr	r2, [pc, #416]	; (8007898 <HAL_DMA_Start_IT+0x4bc>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d018      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a67      	ldr	r2, [pc, #412]	; (800789c <HAL_DMA_Start_IT+0x4c0>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a65      	ldr	r2, [pc, #404]	; (80078a0 <HAL_DMA_Start_IT+0x4c4>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00e      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a64      	ldr	r2, [pc, #400]	; (80078a4 <HAL_DMA_Start_IT+0x4c8>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d009      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a62      	ldr	r2, [pc, #392]	; (80078a8 <HAL_DMA_Start_IT+0x4cc>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_DMA_Start_IT+0x350>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a61      	ldr	r2, [pc, #388]	; (80078ac <HAL_DMA_Start_IT+0x4d0>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d101      	bne.n	8007730 <HAL_DMA_Start_IT+0x354>
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <HAL_DMA_Start_IT+0x356>
 8007730:	2300      	movs	r3, #0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d01a      	beq.n	800776c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d007      	beq.n	8007754 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800774e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007752:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d007      	beq.n	800776c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800776a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a37      	ldr	r2, [pc, #220]	; (8007850 <HAL_DMA_Start_IT+0x474>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d04a      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a36      	ldr	r2, [pc, #216]	; (8007854 <HAL_DMA_Start_IT+0x478>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d045      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a34      	ldr	r2, [pc, #208]	; (8007858 <HAL_DMA_Start_IT+0x47c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d040      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a33      	ldr	r2, [pc, #204]	; (800785c <HAL_DMA_Start_IT+0x480>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d03b      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a31      	ldr	r2, [pc, #196]	; (8007860 <HAL_DMA_Start_IT+0x484>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d036      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a30      	ldr	r2, [pc, #192]	; (8007864 <HAL_DMA_Start_IT+0x488>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d031      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a2e      	ldr	r2, [pc, #184]	; (8007868 <HAL_DMA_Start_IT+0x48c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d02c      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a2d      	ldr	r2, [pc, #180]	; (800786c <HAL_DMA_Start_IT+0x490>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d027      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a2b      	ldr	r2, [pc, #172]	; (8007870 <HAL_DMA_Start_IT+0x494>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d022      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <HAL_DMA_Start_IT+0x498>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d01d      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a28      	ldr	r2, [pc, #160]	; (8007878 <HAL_DMA_Start_IT+0x49c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d018      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a27      	ldr	r2, [pc, #156]	; (800787c <HAL_DMA_Start_IT+0x4a0>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d013      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a25      	ldr	r2, [pc, #148]	; (8007880 <HAL_DMA_Start_IT+0x4a4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00e      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a24      	ldr	r2, [pc, #144]	; (8007884 <HAL_DMA_Start_IT+0x4a8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d009      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a22      	ldr	r2, [pc, #136]	; (8007888 <HAL_DMA_Start_IT+0x4ac>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <HAL_DMA_Start_IT+0x430>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a21      	ldr	r2, [pc, #132]	; (800788c <HAL_DMA_Start_IT+0x4b0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d108      	bne.n	800781e <HAL_DMA_Start_IT+0x442>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	e012      	b.n	8007844 <HAL_DMA_Start_IT+0x468>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f042 0201 	orr.w	r2, r2, #1
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	e009      	b.n	8007844 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007836:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	40020010 	.word	0x40020010
 8007854:	40020028 	.word	0x40020028
 8007858:	40020040 	.word	0x40020040
 800785c:	40020058 	.word	0x40020058
 8007860:	40020070 	.word	0x40020070
 8007864:	40020088 	.word	0x40020088
 8007868:	400200a0 	.word	0x400200a0
 800786c:	400200b8 	.word	0x400200b8
 8007870:	40020410 	.word	0x40020410
 8007874:	40020428 	.word	0x40020428
 8007878:	40020440 	.word	0x40020440
 800787c:	40020458 	.word	0x40020458
 8007880:	40020470 	.word	0x40020470
 8007884:	40020488 	.word	0x40020488
 8007888:	400204a0 	.word	0x400204a0
 800788c:	400204b8 	.word	0x400204b8
 8007890:	58025408 	.word	0x58025408
 8007894:	5802541c 	.word	0x5802541c
 8007898:	58025430 	.word	0x58025430
 800789c:	58025444 	.word	0x58025444
 80078a0:	58025458 	.word	0x58025458
 80078a4:	5802546c 	.word	0x5802546c
 80078a8:	58025480 	.word	0x58025480
 80078ac:	58025494 	.word	0x58025494

080078b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80078b8:	f7fe fede 	bl	8006678 <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e2dc      	b.n	8007e82 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d008      	beq.n	80078e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2280      	movs	r2, #128	; 0x80
 80078d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e2cd      	b.n	8007e82 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a76      	ldr	r2, [pc, #472]	; (8007ac4 <HAL_DMA_Abort+0x214>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d04a      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a74      	ldr	r2, [pc, #464]	; (8007ac8 <HAL_DMA_Abort+0x218>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d045      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a73      	ldr	r2, [pc, #460]	; (8007acc <HAL_DMA_Abort+0x21c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d040      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a71      	ldr	r2, [pc, #452]	; (8007ad0 <HAL_DMA_Abort+0x220>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d03b      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a70      	ldr	r2, [pc, #448]	; (8007ad4 <HAL_DMA_Abort+0x224>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d036      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a6e      	ldr	r2, [pc, #440]	; (8007ad8 <HAL_DMA_Abort+0x228>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d031      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a6d      	ldr	r2, [pc, #436]	; (8007adc <HAL_DMA_Abort+0x22c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d02c      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a6b      	ldr	r2, [pc, #428]	; (8007ae0 <HAL_DMA_Abort+0x230>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d027      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a6a      	ldr	r2, [pc, #424]	; (8007ae4 <HAL_DMA_Abort+0x234>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d022      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a68      	ldr	r2, [pc, #416]	; (8007ae8 <HAL_DMA_Abort+0x238>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01d      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a67      	ldr	r2, [pc, #412]	; (8007aec <HAL_DMA_Abort+0x23c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d018      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a65      	ldr	r2, [pc, #404]	; (8007af0 <HAL_DMA_Abort+0x240>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d013      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a64      	ldr	r2, [pc, #400]	; (8007af4 <HAL_DMA_Abort+0x244>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00e      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a62      	ldr	r2, [pc, #392]	; (8007af8 <HAL_DMA_Abort+0x248>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d009      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a61      	ldr	r2, [pc, #388]	; (8007afc <HAL_DMA_Abort+0x24c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d004      	beq.n	8007986 <HAL_DMA_Abort+0xd6>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a5f      	ldr	r2, [pc, #380]	; (8007b00 <HAL_DMA_Abort+0x250>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d101      	bne.n	800798a <HAL_DMA_Abort+0xda>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <HAL_DMA_Abort+0xdc>
 800798a:	2300      	movs	r3, #0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d013      	beq.n	80079b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 021e 	bic.w	r2, r2, #30
 800799e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695a      	ldr	r2, [r3, #20]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	e00a      	b.n	80079ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 020e 	bic.w	r2, r2, #14
 80079c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a3c      	ldr	r2, [pc, #240]	; (8007ac4 <HAL_DMA_Abort+0x214>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d072      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a3a      	ldr	r2, [pc, #232]	; (8007ac8 <HAL_DMA_Abort+0x218>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d06d      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a39      	ldr	r2, [pc, #228]	; (8007acc <HAL_DMA_Abort+0x21c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d068      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a37      	ldr	r2, [pc, #220]	; (8007ad0 <HAL_DMA_Abort+0x220>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d063      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a36      	ldr	r2, [pc, #216]	; (8007ad4 <HAL_DMA_Abort+0x224>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d05e      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a34      	ldr	r2, [pc, #208]	; (8007ad8 <HAL_DMA_Abort+0x228>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d059      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a33      	ldr	r2, [pc, #204]	; (8007adc <HAL_DMA_Abort+0x22c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d054      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a31      	ldr	r2, [pc, #196]	; (8007ae0 <HAL_DMA_Abort+0x230>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d04f      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a30      	ldr	r2, [pc, #192]	; (8007ae4 <HAL_DMA_Abort+0x234>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d04a      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a2e      	ldr	r2, [pc, #184]	; (8007ae8 <HAL_DMA_Abort+0x238>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d045      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a2d      	ldr	r2, [pc, #180]	; (8007aec <HAL_DMA_Abort+0x23c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d040      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a2b      	ldr	r2, [pc, #172]	; (8007af0 <HAL_DMA_Abort+0x240>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d03b      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a2a      	ldr	r2, [pc, #168]	; (8007af4 <HAL_DMA_Abort+0x244>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d036      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a28      	ldr	r2, [pc, #160]	; (8007af8 <HAL_DMA_Abort+0x248>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d031      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a27      	ldr	r2, [pc, #156]	; (8007afc <HAL_DMA_Abort+0x24c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d02c      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a25      	ldr	r2, [pc, #148]	; (8007b00 <HAL_DMA_Abort+0x250>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d027      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a24      	ldr	r2, [pc, #144]	; (8007b04 <HAL_DMA_Abort+0x254>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d022      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a22      	ldr	r2, [pc, #136]	; (8007b08 <HAL_DMA_Abort+0x258>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d01d      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a21      	ldr	r2, [pc, #132]	; (8007b0c <HAL_DMA_Abort+0x25c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d018      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a1f      	ldr	r2, [pc, #124]	; (8007b10 <HAL_DMA_Abort+0x260>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <HAL_DMA_Abort+0x264>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00e      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <HAL_DMA_Abort+0x268>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d009      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <HAL_DMA_Abort+0x26c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d004      	beq.n	8007abe <HAL_DMA_Abort+0x20e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a19      	ldr	r2, [pc, #100]	; (8007b20 <HAL_DMA_Abort+0x270>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d132      	bne.n	8007b24 <HAL_DMA_Abort+0x274>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e031      	b.n	8007b26 <HAL_DMA_Abort+0x276>
 8007ac2:	bf00      	nop
 8007ac4:	40020010 	.word	0x40020010
 8007ac8:	40020028 	.word	0x40020028
 8007acc:	40020040 	.word	0x40020040
 8007ad0:	40020058 	.word	0x40020058
 8007ad4:	40020070 	.word	0x40020070
 8007ad8:	40020088 	.word	0x40020088
 8007adc:	400200a0 	.word	0x400200a0
 8007ae0:	400200b8 	.word	0x400200b8
 8007ae4:	40020410 	.word	0x40020410
 8007ae8:	40020428 	.word	0x40020428
 8007aec:	40020440 	.word	0x40020440
 8007af0:	40020458 	.word	0x40020458
 8007af4:	40020470 	.word	0x40020470
 8007af8:	40020488 	.word	0x40020488
 8007afc:	400204a0 	.word	0x400204a0
 8007b00:	400204b8 	.word	0x400204b8
 8007b04:	58025408 	.word	0x58025408
 8007b08:	5802541c 	.word	0x5802541c
 8007b0c:	58025430 	.word	0x58025430
 8007b10:	58025444 	.word	0x58025444
 8007b14:	58025458 	.word	0x58025458
 8007b18:	5802546c 	.word	0x5802546c
 8007b1c:	58025480 	.word	0x58025480
 8007b20:	58025494 	.word	0x58025494
 8007b24:	2300      	movs	r3, #0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a6d      	ldr	r2, [pc, #436]	; (8007cf4 <HAL_DMA_Abort+0x444>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d04a      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a6b      	ldr	r2, [pc, #428]	; (8007cf8 <HAL_DMA_Abort+0x448>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d045      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a6a      	ldr	r2, [pc, #424]	; (8007cfc <HAL_DMA_Abort+0x44c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d040      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a68      	ldr	r2, [pc, #416]	; (8007d00 <HAL_DMA_Abort+0x450>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d03b      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a67      	ldr	r2, [pc, #412]	; (8007d04 <HAL_DMA_Abort+0x454>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d036      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a65      	ldr	r2, [pc, #404]	; (8007d08 <HAL_DMA_Abort+0x458>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d031      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a64      	ldr	r2, [pc, #400]	; (8007d0c <HAL_DMA_Abort+0x45c>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d02c      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a62      	ldr	r2, [pc, #392]	; (8007d10 <HAL_DMA_Abort+0x460>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d027      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a61      	ldr	r2, [pc, #388]	; (8007d14 <HAL_DMA_Abort+0x464>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d022      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a5f      	ldr	r2, [pc, #380]	; (8007d18 <HAL_DMA_Abort+0x468>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01d      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a5e      	ldr	r2, [pc, #376]	; (8007d1c <HAL_DMA_Abort+0x46c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d018      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a5c      	ldr	r2, [pc, #368]	; (8007d20 <HAL_DMA_Abort+0x470>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a5b      	ldr	r2, [pc, #364]	; (8007d24 <HAL_DMA_Abort+0x474>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00e      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a59      	ldr	r2, [pc, #356]	; (8007d28 <HAL_DMA_Abort+0x478>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d009      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a58      	ldr	r2, [pc, #352]	; (8007d2c <HAL_DMA_Abort+0x47c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d004      	beq.n	8007bda <HAL_DMA_Abort+0x32a>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a56      	ldr	r2, [pc, #344]	; (8007d30 <HAL_DMA_Abort+0x480>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d108      	bne.n	8007bec <HAL_DMA_Abort+0x33c>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 0201 	bic.w	r2, r2, #1
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	e007      	b.n	8007bfc <HAL_DMA_Abort+0x34c>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0201 	bic.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007bfc:	e013      	b.n	8007c26 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bfe:	f7fe fd3b 	bl	8006678 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	2b05      	cmp	r3, #5
 8007c0a:	d90c      	bls.n	8007c26 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2203      	movs	r2, #3
 8007c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e12d      	b.n	8007e82 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e5      	bne.n	8007bfe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a2f      	ldr	r2, [pc, #188]	; (8007cf4 <HAL_DMA_Abort+0x444>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d04a      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a2d      	ldr	r2, [pc, #180]	; (8007cf8 <HAL_DMA_Abort+0x448>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d045      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a2c      	ldr	r2, [pc, #176]	; (8007cfc <HAL_DMA_Abort+0x44c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d040      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a2a      	ldr	r2, [pc, #168]	; (8007d00 <HAL_DMA_Abort+0x450>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d03b      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a29      	ldr	r2, [pc, #164]	; (8007d04 <HAL_DMA_Abort+0x454>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d036      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a27      	ldr	r2, [pc, #156]	; (8007d08 <HAL_DMA_Abort+0x458>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d031      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a26      	ldr	r2, [pc, #152]	; (8007d0c <HAL_DMA_Abort+0x45c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d02c      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a24      	ldr	r2, [pc, #144]	; (8007d10 <HAL_DMA_Abort+0x460>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d027      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a23      	ldr	r2, [pc, #140]	; (8007d14 <HAL_DMA_Abort+0x464>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d022      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a21      	ldr	r2, [pc, #132]	; (8007d18 <HAL_DMA_Abort+0x468>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d01d      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a20      	ldr	r2, [pc, #128]	; (8007d1c <HAL_DMA_Abort+0x46c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d018      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1e      	ldr	r2, [pc, #120]	; (8007d20 <HAL_DMA_Abort+0x470>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d013      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <HAL_DMA_Abort+0x474>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d00e      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a1b      	ldr	r2, [pc, #108]	; (8007d28 <HAL_DMA_Abort+0x478>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d009      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a1a      	ldr	r2, [pc, #104]	; (8007d2c <HAL_DMA_Abort+0x47c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d004      	beq.n	8007cd2 <HAL_DMA_Abort+0x422>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a18      	ldr	r2, [pc, #96]	; (8007d30 <HAL_DMA_Abort+0x480>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d101      	bne.n	8007cd6 <HAL_DMA_Abort+0x426>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <HAL_DMA_Abort+0x428>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d02b      	beq.n	8007d34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce6:	f003 031f 	and.w	r3, r3, #31
 8007cea:	223f      	movs	r2, #63	; 0x3f
 8007cec:	409a      	lsls	r2, r3
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	609a      	str	r2, [r3, #8]
 8007cf2:	e02a      	b.n	8007d4a <HAL_DMA_Abort+0x49a>
 8007cf4:	40020010 	.word	0x40020010
 8007cf8:	40020028 	.word	0x40020028
 8007cfc:	40020040 	.word	0x40020040
 8007d00:	40020058 	.word	0x40020058
 8007d04:	40020070 	.word	0x40020070
 8007d08:	40020088 	.word	0x40020088
 8007d0c:	400200a0 	.word	0x400200a0
 8007d10:	400200b8 	.word	0x400200b8
 8007d14:	40020410 	.word	0x40020410
 8007d18:	40020428 	.word	0x40020428
 8007d1c:	40020440 	.word	0x40020440
 8007d20:	40020458 	.word	0x40020458
 8007d24:	40020470 	.word	0x40020470
 8007d28:	40020488 	.word	0x40020488
 8007d2c:	400204a0 	.word	0x400204a0
 8007d30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3e:	f003 031f 	and.w	r3, r3, #31
 8007d42:	2201      	movs	r2, #1
 8007d44:	409a      	lsls	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a4f      	ldr	r2, [pc, #316]	; (8007e8c <HAL_DMA_Abort+0x5dc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d072      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a4d      	ldr	r2, [pc, #308]	; (8007e90 <HAL_DMA_Abort+0x5e0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d06d      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a4c      	ldr	r2, [pc, #304]	; (8007e94 <HAL_DMA_Abort+0x5e4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d068      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a4a      	ldr	r2, [pc, #296]	; (8007e98 <HAL_DMA_Abort+0x5e8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d063      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a49      	ldr	r2, [pc, #292]	; (8007e9c <HAL_DMA_Abort+0x5ec>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d05e      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a47      	ldr	r2, [pc, #284]	; (8007ea0 <HAL_DMA_Abort+0x5f0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d059      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a46      	ldr	r2, [pc, #280]	; (8007ea4 <HAL_DMA_Abort+0x5f4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d054      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a44      	ldr	r2, [pc, #272]	; (8007ea8 <HAL_DMA_Abort+0x5f8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d04f      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a43      	ldr	r2, [pc, #268]	; (8007eac <HAL_DMA_Abort+0x5fc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d04a      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a41      	ldr	r2, [pc, #260]	; (8007eb0 <HAL_DMA_Abort+0x600>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d045      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a40      	ldr	r2, [pc, #256]	; (8007eb4 <HAL_DMA_Abort+0x604>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d040      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a3e      	ldr	r2, [pc, #248]	; (8007eb8 <HAL_DMA_Abort+0x608>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d03b      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a3d      	ldr	r2, [pc, #244]	; (8007ebc <HAL_DMA_Abort+0x60c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d036      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a3b      	ldr	r2, [pc, #236]	; (8007ec0 <HAL_DMA_Abort+0x610>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d031      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a3a      	ldr	r2, [pc, #232]	; (8007ec4 <HAL_DMA_Abort+0x614>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d02c      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a38      	ldr	r2, [pc, #224]	; (8007ec8 <HAL_DMA_Abort+0x618>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d027      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a37      	ldr	r2, [pc, #220]	; (8007ecc <HAL_DMA_Abort+0x61c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d022      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a35      	ldr	r2, [pc, #212]	; (8007ed0 <HAL_DMA_Abort+0x620>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d01d      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a34      	ldr	r2, [pc, #208]	; (8007ed4 <HAL_DMA_Abort+0x624>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d018      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a32      	ldr	r2, [pc, #200]	; (8007ed8 <HAL_DMA_Abort+0x628>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d013      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a31      	ldr	r2, [pc, #196]	; (8007edc <HAL_DMA_Abort+0x62c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d00e      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a2f      	ldr	r2, [pc, #188]	; (8007ee0 <HAL_DMA_Abort+0x630>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d009      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a2e      	ldr	r2, [pc, #184]	; (8007ee4 <HAL_DMA_Abort+0x634>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d004      	beq.n	8007e3a <HAL_DMA_Abort+0x58a>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a2c      	ldr	r2, [pc, #176]	; (8007ee8 <HAL_DMA_Abort+0x638>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d101      	bne.n	8007e3e <HAL_DMA_Abort+0x58e>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <HAL_DMA_Abort+0x590>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d015      	beq.n	8007e70 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007e4c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00c      	beq.n	8007e70 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e64:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007e6e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	40020010 	.word	0x40020010
 8007e90:	40020028 	.word	0x40020028
 8007e94:	40020040 	.word	0x40020040
 8007e98:	40020058 	.word	0x40020058
 8007e9c:	40020070 	.word	0x40020070
 8007ea0:	40020088 	.word	0x40020088
 8007ea4:	400200a0 	.word	0x400200a0
 8007ea8:	400200b8 	.word	0x400200b8
 8007eac:	40020410 	.word	0x40020410
 8007eb0:	40020428 	.word	0x40020428
 8007eb4:	40020440 	.word	0x40020440
 8007eb8:	40020458 	.word	0x40020458
 8007ebc:	40020470 	.word	0x40020470
 8007ec0:	40020488 	.word	0x40020488
 8007ec4:	400204a0 	.word	0x400204a0
 8007ec8:	400204b8 	.word	0x400204b8
 8007ecc:	58025408 	.word	0x58025408
 8007ed0:	5802541c 	.word	0x5802541c
 8007ed4:	58025430 	.word	0x58025430
 8007ed8:	58025444 	.word	0x58025444
 8007edc:	58025458 	.word	0x58025458
 8007ee0:	5802546c 	.word	0x5802546c
 8007ee4:	58025480 	.word	0x58025480
 8007ee8:	58025494 	.word	0x58025494

08007eec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e205      	b.n	800830a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d004      	beq.n	8007f14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2280      	movs	r2, #128	; 0x80
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e1fa      	b.n	800830a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a8c      	ldr	r2, [pc, #560]	; (800814c <HAL_DMA_Abort_IT+0x260>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d04a      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a8b      	ldr	r2, [pc, #556]	; (8008150 <HAL_DMA_Abort_IT+0x264>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d045      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a89      	ldr	r2, [pc, #548]	; (8008154 <HAL_DMA_Abort_IT+0x268>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d040      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a88      	ldr	r2, [pc, #544]	; (8008158 <HAL_DMA_Abort_IT+0x26c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d03b      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a86      	ldr	r2, [pc, #536]	; (800815c <HAL_DMA_Abort_IT+0x270>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d036      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a85      	ldr	r2, [pc, #532]	; (8008160 <HAL_DMA_Abort_IT+0x274>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d031      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a83      	ldr	r2, [pc, #524]	; (8008164 <HAL_DMA_Abort_IT+0x278>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d02c      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a82      	ldr	r2, [pc, #520]	; (8008168 <HAL_DMA_Abort_IT+0x27c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d027      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a80      	ldr	r2, [pc, #512]	; (800816c <HAL_DMA_Abort_IT+0x280>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d022      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a7f      	ldr	r2, [pc, #508]	; (8008170 <HAL_DMA_Abort_IT+0x284>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d01d      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a7d      	ldr	r2, [pc, #500]	; (8008174 <HAL_DMA_Abort_IT+0x288>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d018      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a7c      	ldr	r2, [pc, #496]	; (8008178 <HAL_DMA_Abort_IT+0x28c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d013      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a7a      	ldr	r2, [pc, #488]	; (800817c <HAL_DMA_Abort_IT+0x290>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00e      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a79      	ldr	r2, [pc, #484]	; (8008180 <HAL_DMA_Abort_IT+0x294>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d009      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a77      	ldr	r2, [pc, #476]	; (8008184 <HAL_DMA_Abort_IT+0x298>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d004      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0xc8>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a76      	ldr	r2, [pc, #472]	; (8008188 <HAL_DMA_Abort_IT+0x29c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d101      	bne.n	8007fb8 <HAL_DMA_Abort_IT+0xcc>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <HAL_DMA_Abort_IT+0xce>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d065      	beq.n	800808a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a60      	ldr	r2, [pc, #384]	; (800814c <HAL_DMA_Abort_IT+0x260>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d04a      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a5e      	ldr	r2, [pc, #376]	; (8008150 <HAL_DMA_Abort_IT+0x264>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d045      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a5d      	ldr	r2, [pc, #372]	; (8008154 <HAL_DMA_Abort_IT+0x268>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d040      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a5b      	ldr	r2, [pc, #364]	; (8008158 <HAL_DMA_Abort_IT+0x26c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d03b      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a5a      	ldr	r2, [pc, #360]	; (800815c <HAL_DMA_Abort_IT+0x270>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d036      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a58      	ldr	r2, [pc, #352]	; (8008160 <HAL_DMA_Abort_IT+0x274>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d031      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a57      	ldr	r2, [pc, #348]	; (8008164 <HAL_DMA_Abort_IT+0x278>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d02c      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a55      	ldr	r2, [pc, #340]	; (8008168 <HAL_DMA_Abort_IT+0x27c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d027      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a54      	ldr	r2, [pc, #336]	; (800816c <HAL_DMA_Abort_IT+0x280>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d022      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a52      	ldr	r2, [pc, #328]	; (8008170 <HAL_DMA_Abort_IT+0x284>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d01d      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a51      	ldr	r2, [pc, #324]	; (8008174 <HAL_DMA_Abort_IT+0x288>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d018      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a4f      	ldr	r2, [pc, #316]	; (8008178 <HAL_DMA_Abort_IT+0x28c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d013      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a4e      	ldr	r2, [pc, #312]	; (800817c <HAL_DMA_Abort_IT+0x290>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00e      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a4c      	ldr	r2, [pc, #304]	; (8008180 <HAL_DMA_Abort_IT+0x294>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d009      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a4b      	ldr	r2, [pc, #300]	; (8008184 <HAL_DMA_Abort_IT+0x298>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d004      	beq.n	8008066 <HAL_DMA_Abort_IT+0x17a>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a49      	ldr	r2, [pc, #292]	; (8008188 <HAL_DMA_Abort_IT+0x29c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d108      	bne.n	8008078 <HAL_DMA_Abort_IT+0x18c>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0201 	bic.w	r2, r2, #1
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	e147      	b.n	8008308 <HAL_DMA_Abort_IT+0x41c>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0201 	bic.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	e13e      	b.n	8008308 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 020e 	bic.w	r2, r2, #14
 8008098:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a2b      	ldr	r2, [pc, #172]	; (800814c <HAL_DMA_Abort_IT+0x260>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d04a      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a29      	ldr	r2, [pc, #164]	; (8008150 <HAL_DMA_Abort_IT+0x264>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d045      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a28      	ldr	r2, [pc, #160]	; (8008154 <HAL_DMA_Abort_IT+0x268>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d040      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a26      	ldr	r2, [pc, #152]	; (8008158 <HAL_DMA_Abort_IT+0x26c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d03b      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a25      	ldr	r2, [pc, #148]	; (800815c <HAL_DMA_Abort_IT+0x270>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d036      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a23      	ldr	r2, [pc, #140]	; (8008160 <HAL_DMA_Abort_IT+0x274>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d031      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a22      	ldr	r2, [pc, #136]	; (8008164 <HAL_DMA_Abort_IT+0x278>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d02c      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a20      	ldr	r2, [pc, #128]	; (8008168 <HAL_DMA_Abort_IT+0x27c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d027      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1f      	ldr	r2, [pc, #124]	; (800816c <HAL_DMA_Abort_IT+0x280>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d022      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1d      	ldr	r2, [pc, #116]	; (8008170 <HAL_DMA_Abort_IT+0x284>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d01d      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1c      	ldr	r2, [pc, #112]	; (8008174 <HAL_DMA_Abort_IT+0x288>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d018      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a1a      	ldr	r2, [pc, #104]	; (8008178 <HAL_DMA_Abort_IT+0x28c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d013      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a19      	ldr	r2, [pc, #100]	; (800817c <HAL_DMA_Abort_IT+0x290>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d00e      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a17      	ldr	r2, [pc, #92]	; (8008180 <HAL_DMA_Abort_IT+0x294>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d009      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a16      	ldr	r2, [pc, #88]	; (8008184 <HAL_DMA_Abort_IT+0x298>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d004      	beq.n	800813a <HAL_DMA_Abort_IT+0x24e>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a14      	ldr	r2, [pc, #80]	; (8008188 <HAL_DMA_Abort_IT+0x29c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d128      	bne.n	800818c <HAL_DMA_Abort_IT+0x2a0>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0201 	bic.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	e027      	b.n	800819c <HAL_DMA_Abort_IT+0x2b0>
 800814c:	40020010 	.word	0x40020010
 8008150:	40020028 	.word	0x40020028
 8008154:	40020040 	.word	0x40020040
 8008158:	40020058 	.word	0x40020058
 800815c:	40020070 	.word	0x40020070
 8008160:	40020088 	.word	0x40020088
 8008164:	400200a0 	.word	0x400200a0
 8008168:	400200b8 	.word	0x400200b8
 800816c:	40020410 	.word	0x40020410
 8008170:	40020428 	.word	0x40020428
 8008174:	40020440 	.word	0x40020440
 8008178:	40020458 	.word	0x40020458
 800817c:	40020470 	.word	0x40020470
 8008180:	40020488 	.word	0x40020488
 8008184:	400204a0 	.word	0x400204a0
 8008188:	400204b8 	.word	0x400204b8
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a5c      	ldr	r2, [pc, #368]	; (8008314 <HAL_DMA_Abort_IT+0x428>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d072      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a5b      	ldr	r2, [pc, #364]	; (8008318 <HAL_DMA_Abort_IT+0x42c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d06d      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a59      	ldr	r2, [pc, #356]	; (800831c <HAL_DMA_Abort_IT+0x430>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d068      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a58      	ldr	r2, [pc, #352]	; (8008320 <HAL_DMA_Abort_IT+0x434>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d063      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a56      	ldr	r2, [pc, #344]	; (8008324 <HAL_DMA_Abort_IT+0x438>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d05e      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a55      	ldr	r2, [pc, #340]	; (8008328 <HAL_DMA_Abort_IT+0x43c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d059      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a53      	ldr	r2, [pc, #332]	; (800832c <HAL_DMA_Abort_IT+0x440>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d054      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a52      	ldr	r2, [pc, #328]	; (8008330 <HAL_DMA_Abort_IT+0x444>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d04f      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a50      	ldr	r2, [pc, #320]	; (8008334 <HAL_DMA_Abort_IT+0x448>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d04a      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a4f      	ldr	r2, [pc, #316]	; (8008338 <HAL_DMA_Abort_IT+0x44c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d045      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a4d      	ldr	r2, [pc, #308]	; (800833c <HAL_DMA_Abort_IT+0x450>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d040      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a4c      	ldr	r2, [pc, #304]	; (8008340 <HAL_DMA_Abort_IT+0x454>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d03b      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a4a      	ldr	r2, [pc, #296]	; (8008344 <HAL_DMA_Abort_IT+0x458>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d036      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a49      	ldr	r2, [pc, #292]	; (8008348 <HAL_DMA_Abort_IT+0x45c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d031      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a47      	ldr	r2, [pc, #284]	; (800834c <HAL_DMA_Abort_IT+0x460>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d02c      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a46      	ldr	r2, [pc, #280]	; (8008350 <HAL_DMA_Abort_IT+0x464>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d027      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a44      	ldr	r2, [pc, #272]	; (8008354 <HAL_DMA_Abort_IT+0x468>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d022      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a43      	ldr	r2, [pc, #268]	; (8008358 <HAL_DMA_Abort_IT+0x46c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d01d      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a41      	ldr	r2, [pc, #260]	; (800835c <HAL_DMA_Abort_IT+0x470>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d018      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a40      	ldr	r2, [pc, #256]	; (8008360 <HAL_DMA_Abort_IT+0x474>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d013      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a3e      	ldr	r2, [pc, #248]	; (8008364 <HAL_DMA_Abort_IT+0x478>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d00e      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a3d      	ldr	r2, [pc, #244]	; (8008368 <HAL_DMA_Abort_IT+0x47c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d009      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a3b      	ldr	r2, [pc, #236]	; (800836c <HAL_DMA_Abort_IT+0x480>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d004      	beq.n	800828c <HAL_DMA_Abort_IT+0x3a0>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a3a      	ldr	r2, [pc, #232]	; (8008370 <HAL_DMA_Abort_IT+0x484>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d101      	bne.n	8008290 <HAL_DMA_Abort_IT+0x3a4>
 800828c:	2301      	movs	r3, #1
 800828e:	e000      	b.n	8008292 <HAL_DMA_Abort_IT+0x3a6>
 8008290:	2300      	movs	r3, #0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d028      	beq.n	80082e8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b0:	f003 031f 	and.w	r3, r3, #31
 80082b4:	2201      	movs	r2, #1
 80082b6:	409a      	lsls	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80082c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00c      	beq.n	80082e8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80082e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	40020010 	.word	0x40020010
 8008318:	40020028 	.word	0x40020028
 800831c:	40020040 	.word	0x40020040
 8008320:	40020058 	.word	0x40020058
 8008324:	40020070 	.word	0x40020070
 8008328:	40020088 	.word	0x40020088
 800832c:	400200a0 	.word	0x400200a0
 8008330:	400200b8 	.word	0x400200b8
 8008334:	40020410 	.word	0x40020410
 8008338:	40020428 	.word	0x40020428
 800833c:	40020440 	.word	0x40020440
 8008340:	40020458 	.word	0x40020458
 8008344:	40020470 	.word	0x40020470
 8008348:	40020488 	.word	0x40020488
 800834c:	400204a0 	.word	0x400204a0
 8008350:	400204b8 	.word	0x400204b8
 8008354:	58025408 	.word	0x58025408
 8008358:	5802541c 	.word	0x5802541c
 800835c:	58025430 	.word	0x58025430
 8008360:	58025444 	.word	0x58025444
 8008364:	58025458 	.word	0x58025458
 8008368:	5802546c 	.word	0x5802546c
 800836c:	58025480 	.word	0x58025480
 8008370:	58025494 	.word	0x58025494

08008374 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08a      	sub	sp, #40	; 0x28
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008380:	4b67      	ldr	r3, [pc, #412]	; (8008520 <HAL_DMA_IRQHandler+0x1ac>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a67      	ldr	r2, [pc, #412]	; (8008524 <HAL_DMA_IRQHandler+0x1b0>)
 8008386:	fba2 2303 	umull	r2, r3, r2, r3
 800838a:	0a9b      	lsrs	r3, r3, #10
 800838c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008392:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008398:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a5f      	ldr	r2, [pc, #380]	; (8008528 <HAL_DMA_IRQHandler+0x1b4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d04a      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a5d      	ldr	r2, [pc, #372]	; (800852c <HAL_DMA_IRQHandler+0x1b8>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d045      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a5c      	ldr	r2, [pc, #368]	; (8008530 <HAL_DMA_IRQHandler+0x1bc>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d040      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a5a      	ldr	r2, [pc, #360]	; (8008534 <HAL_DMA_IRQHandler+0x1c0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d03b      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a59      	ldr	r2, [pc, #356]	; (8008538 <HAL_DMA_IRQHandler+0x1c4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d036      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a57      	ldr	r2, [pc, #348]	; (800853c <HAL_DMA_IRQHandler+0x1c8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d031      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a56      	ldr	r2, [pc, #344]	; (8008540 <HAL_DMA_IRQHandler+0x1cc>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d02c      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a54      	ldr	r2, [pc, #336]	; (8008544 <HAL_DMA_IRQHandler+0x1d0>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d027      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a53      	ldr	r2, [pc, #332]	; (8008548 <HAL_DMA_IRQHandler+0x1d4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d022      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a51      	ldr	r2, [pc, #324]	; (800854c <HAL_DMA_IRQHandler+0x1d8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d01d      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a50      	ldr	r2, [pc, #320]	; (8008550 <HAL_DMA_IRQHandler+0x1dc>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d018      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a4e      	ldr	r2, [pc, #312]	; (8008554 <HAL_DMA_IRQHandler+0x1e0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d013      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a4d      	ldr	r2, [pc, #308]	; (8008558 <HAL_DMA_IRQHandler+0x1e4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00e      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a4b      	ldr	r2, [pc, #300]	; (800855c <HAL_DMA_IRQHandler+0x1e8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d009      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a4a      	ldr	r2, [pc, #296]	; (8008560 <HAL_DMA_IRQHandler+0x1ec>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d004      	beq.n	8008446 <HAL_DMA_IRQHandler+0xd2>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a48      	ldr	r2, [pc, #288]	; (8008564 <HAL_DMA_IRQHandler+0x1f0>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d101      	bne.n	800844a <HAL_DMA_IRQHandler+0xd6>
 8008446:	2301      	movs	r3, #1
 8008448:	e000      	b.n	800844c <HAL_DMA_IRQHandler+0xd8>
 800844a:	2300      	movs	r3, #0
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 842b 	beq.w	8008ca8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008456:	f003 031f 	and.w	r3, r3, #31
 800845a:	2208      	movs	r2, #8
 800845c:	409a      	lsls	r2, r3
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	4013      	ands	r3, r2
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 80a2 	beq.w	80085ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a2e      	ldr	r2, [pc, #184]	; (8008528 <HAL_DMA_IRQHandler+0x1b4>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d04a      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a2d      	ldr	r2, [pc, #180]	; (800852c <HAL_DMA_IRQHandler+0x1b8>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d045      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a2b      	ldr	r2, [pc, #172]	; (8008530 <HAL_DMA_IRQHandler+0x1bc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d040      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a2a      	ldr	r2, [pc, #168]	; (8008534 <HAL_DMA_IRQHandler+0x1c0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d03b      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a28      	ldr	r2, [pc, #160]	; (8008538 <HAL_DMA_IRQHandler+0x1c4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d036      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a27      	ldr	r2, [pc, #156]	; (800853c <HAL_DMA_IRQHandler+0x1c8>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d031      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a25      	ldr	r2, [pc, #148]	; (8008540 <HAL_DMA_IRQHandler+0x1cc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d02c      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a24      	ldr	r2, [pc, #144]	; (8008544 <HAL_DMA_IRQHandler+0x1d0>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d027      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a22      	ldr	r2, [pc, #136]	; (8008548 <HAL_DMA_IRQHandler+0x1d4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d022      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a21      	ldr	r2, [pc, #132]	; (800854c <HAL_DMA_IRQHandler+0x1d8>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d01d      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <HAL_DMA_IRQHandler+0x1dc>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d018      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a1e      	ldr	r2, [pc, #120]	; (8008554 <HAL_DMA_IRQHandler+0x1e0>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d013      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <HAL_DMA_IRQHandler+0x1e4>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00e      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1b      	ldr	r2, [pc, #108]	; (800855c <HAL_DMA_IRQHandler+0x1e8>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d009      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a19      	ldr	r2, [pc, #100]	; (8008560 <HAL_DMA_IRQHandler+0x1ec>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d004      	beq.n	8008508 <HAL_DMA_IRQHandler+0x194>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a18      	ldr	r2, [pc, #96]	; (8008564 <HAL_DMA_IRQHandler+0x1f0>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d12f      	bne.n	8008568 <HAL_DMA_IRQHandler+0x1f4>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	2b00      	cmp	r3, #0
 8008514:	bf14      	ite	ne
 8008516:	2301      	movne	r3, #1
 8008518:	2300      	moveq	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	e02e      	b.n	800857c <HAL_DMA_IRQHandler+0x208>
 800851e:	bf00      	nop
 8008520:	24000228 	.word	0x24000228
 8008524:	1b4e81b5 	.word	0x1b4e81b5
 8008528:	40020010 	.word	0x40020010
 800852c:	40020028 	.word	0x40020028
 8008530:	40020040 	.word	0x40020040
 8008534:	40020058 	.word	0x40020058
 8008538:	40020070 	.word	0x40020070
 800853c:	40020088 	.word	0x40020088
 8008540:	400200a0 	.word	0x400200a0
 8008544:	400200b8 	.word	0x400200b8
 8008548:	40020410 	.word	0x40020410
 800854c:	40020428 	.word	0x40020428
 8008550:	40020440 	.word	0x40020440
 8008554:	40020458 	.word	0x40020458
 8008558:	40020470 	.word	0x40020470
 800855c:	40020488 	.word	0x40020488
 8008560:	400204a0 	.word	0x400204a0
 8008564:	400204b8 	.word	0x400204b8
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0308 	and.w	r3, r3, #8
 8008572:	2b00      	cmp	r3, #0
 8008574:	bf14      	ite	ne
 8008576:	2301      	movne	r3, #1
 8008578:	2300      	moveq	r3, #0
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d015      	beq.n	80085ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0204 	bic.w	r2, r2, #4
 800858e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008594:	f003 031f 	and.w	r3, r3, #31
 8008598:	2208      	movs	r2, #8
 800859a:	409a      	lsls	r2, r3
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a4:	f043 0201 	orr.w	r2, r3, #1
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b0:	f003 031f 	and.w	r3, r3, #31
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d06e      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a69      	ldr	r2, [pc, #420]	; (800876c <HAL_DMA_IRQHandler+0x3f8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d04a      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a67      	ldr	r2, [pc, #412]	; (8008770 <HAL_DMA_IRQHandler+0x3fc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d045      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a66      	ldr	r2, [pc, #408]	; (8008774 <HAL_DMA_IRQHandler+0x400>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d040      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a64      	ldr	r2, [pc, #400]	; (8008778 <HAL_DMA_IRQHandler+0x404>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d03b      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a63      	ldr	r2, [pc, #396]	; (800877c <HAL_DMA_IRQHandler+0x408>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d036      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a61      	ldr	r2, [pc, #388]	; (8008780 <HAL_DMA_IRQHandler+0x40c>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d031      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a60      	ldr	r2, [pc, #384]	; (8008784 <HAL_DMA_IRQHandler+0x410>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d02c      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a5e      	ldr	r2, [pc, #376]	; (8008788 <HAL_DMA_IRQHandler+0x414>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d027      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a5d      	ldr	r2, [pc, #372]	; (800878c <HAL_DMA_IRQHandler+0x418>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d022      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a5b      	ldr	r2, [pc, #364]	; (8008790 <HAL_DMA_IRQHandler+0x41c>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d01d      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a5a      	ldr	r2, [pc, #360]	; (8008794 <HAL_DMA_IRQHandler+0x420>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d018      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a58      	ldr	r2, [pc, #352]	; (8008798 <HAL_DMA_IRQHandler+0x424>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a57      	ldr	r2, [pc, #348]	; (800879c <HAL_DMA_IRQHandler+0x428>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00e      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a55      	ldr	r2, [pc, #340]	; (80087a0 <HAL_DMA_IRQHandler+0x42c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a54      	ldr	r2, [pc, #336]	; (80087a4 <HAL_DMA_IRQHandler+0x430>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <HAL_DMA_IRQHandler+0x2ee>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a52      	ldr	r2, [pc, #328]	; (80087a8 <HAL_DMA_IRQHandler+0x434>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d10a      	bne.n	8008678 <HAL_DMA_IRQHandler+0x304>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866c:	2b00      	cmp	r3, #0
 800866e:	bf14      	ite	ne
 8008670:	2301      	movne	r3, #1
 8008672:	2300      	moveq	r3, #0
 8008674:	b2db      	uxtb	r3, r3
 8008676:	e003      	b.n	8008680 <HAL_DMA_IRQHandler+0x30c>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2300      	movs	r3, #0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00d      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008688:	f003 031f 	and.w	r3, r3, #31
 800868c:	2201      	movs	r2, #1
 800868e:	409a      	lsls	r2, r3
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008698:	f043 0202 	orr.w	r2, r3, #2
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a4:	f003 031f 	and.w	r3, r3, #31
 80086a8:	2204      	movs	r2, #4
 80086aa:	409a      	lsls	r2, r3
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	4013      	ands	r3, r2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 808f 	beq.w	80087d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a2c      	ldr	r2, [pc, #176]	; (800876c <HAL_DMA_IRQHandler+0x3f8>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d04a      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a2a      	ldr	r2, [pc, #168]	; (8008770 <HAL_DMA_IRQHandler+0x3fc>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d045      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a29      	ldr	r2, [pc, #164]	; (8008774 <HAL_DMA_IRQHandler+0x400>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d040      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a27      	ldr	r2, [pc, #156]	; (8008778 <HAL_DMA_IRQHandler+0x404>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d03b      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a26      	ldr	r2, [pc, #152]	; (800877c <HAL_DMA_IRQHandler+0x408>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d036      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a24      	ldr	r2, [pc, #144]	; (8008780 <HAL_DMA_IRQHandler+0x40c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d031      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a23      	ldr	r2, [pc, #140]	; (8008784 <HAL_DMA_IRQHandler+0x410>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d02c      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a21      	ldr	r2, [pc, #132]	; (8008788 <HAL_DMA_IRQHandler+0x414>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d027      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a20      	ldr	r2, [pc, #128]	; (800878c <HAL_DMA_IRQHandler+0x418>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d022      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a1e      	ldr	r2, [pc, #120]	; (8008790 <HAL_DMA_IRQHandler+0x41c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d01d      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a1d      	ldr	r2, [pc, #116]	; (8008794 <HAL_DMA_IRQHandler+0x420>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d018      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a1b      	ldr	r2, [pc, #108]	; (8008798 <HAL_DMA_IRQHandler+0x424>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d013      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a1a      	ldr	r2, [pc, #104]	; (800879c <HAL_DMA_IRQHandler+0x428>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d00e      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a18      	ldr	r2, [pc, #96]	; (80087a0 <HAL_DMA_IRQHandler+0x42c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d009      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a17      	ldr	r2, [pc, #92]	; (80087a4 <HAL_DMA_IRQHandler+0x430>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d004      	beq.n	8008756 <HAL_DMA_IRQHandler+0x3e2>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <HAL_DMA_IRQHandler+0x434>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d12a      	bne.n	80087ac <HAL_DMA_IRQHandler+0x438>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	bf14      	ite	ne
 8008764:	2301      	movne	r3, #1
 8008766:	2300      	moveq	r3, #0
 8008768:	b2db      	uxtb	r3, r3
 800876a:	e023      	b.n	80087b4 <HAL_DMA_IRQHandler+0x440>
 800876c:	40020010 	.word	0x40020010
 8008770:	40020028 	.word	0x40020028
 8008774:	40020040 	.word	0x40020040
 8008778:	40020058 	.word	0x40020058
 800877c:	40020070 	.word	0x40020070
 8008780:	40020088 	.word	0x40020088
 8008784:	400200a0 	.word	0x400200a0
 8008788:	400200b8 	.word	0x400200b8
 800878c:	40020410 	.word	0x40020410
 8008790:	40020428 	.word	0x40020428
 8008794:	40020440 	.word	0x40020440
 8008798:	40020458 	.word	0x40020458
 800879c:	40020470 	.word	0x40020470
 80087a0:	40020488 	.word	0x40020488
 80087a4:	400204a0 	.word	0x400204a0
 80087a8:	400204b8 	.word	0x400204b8
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2300      	movs	r3, #0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00d      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087bc:	f003 031f 	and.w	r3, r3, #31
 80087c0:	2204      	movs	r2, #4
 80087c2:	409a      	lsls	r2, r3
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087cc:	f043 0204 	orr.w	r2, r3, #4
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d8:	f003 031f 	and.w	r3, r3, #31
 80087dc:	2210      	movs	r2, #16
 80087de:	409a      	lsls	r2, r3
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80a6 	beq.w	8008936 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a85      	ldr	r2, [pc, #532]	; (8008a04 <HAL_DMA_IRQHandler+0x690>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d04a      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a83      	ldr	r2, [pc, #524]	; (8008a08 <HAL_DMA_IRQHandler+0x694>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d045      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a82      	ldr	r2, [pc, #520]	; (8008a0c <HAL_DMA_IRQHandler+0x698>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d040      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a80      	ldr	r2, [pc, #512]	; (8008a10 <HAL_DMA_IRQHandler+0x69c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d03b      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a7f      	ldr	r2, [pc, #508]	; (8008a14 <HAL_DMA_IRQHandler+0x6a0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d036      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a7d      	ldr	r2, [pc, #500]	; (8008a18 <HAL_DMA_IRQHandler+0x6a4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d031      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a7c      	ldr	r2, [pc, #496]	; (8008a1c <HAL_DMA_IRQHandler+0x6a8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d02c      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a7a      	ldr	r2, [pc, #488]	; (8008a20 <HAL_DMA_IRQHandler+0x6ac>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d027      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a79      	ldr	r2, [pc, #484]	; (8008a24 <HAL_DMA_IRQHandler+0x6b0>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d022      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a77      	ldr	r2, [pc, #476]	; (8008a28 <HAL_DMA_IRQHandler+0x6b4>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d01d      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a76      	ldr	r2, [pc, #472]	; (8008a2c <HAL_DMA_IRQHandler+0x6b8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d018      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a74      	ldr	r2, [pc, #464]	; (8008a30 <HAL_DMA_IRQHandler+0x6bc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d013      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a73      	ldr	r2, [pc, #460]	; (8008a34 <HAL_DMA_IRQHandler+0x6c0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00e      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a71      	ldr	r2, [pc, #452]	; (8008a38 <HAL_DMA_IRQHandler+0x6c4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d009      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a70      	ldr	r2, [pc, #448]	; (8008a3c <HAL_DMA_IRQHandler+0x6c8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d004      	beq.n	800888a <HAL_DMA_IRQHandler+0x516>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a6e      	ldr	r2, [pc, #440]	; (8008a40 <HAL_DMA_IRQHandler+0x6cc>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d10a      	bne.n	80088a0 <HAL_DMA_IRQHandler+0x52c>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	2b00      	cmp	r3, #0
 8008896:	bf14      	ite	ne
 8008898:	2301      	movne	r3, #1
 800889a:	2300      	moveq	r3, #0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	e009      	b.n	80088b4 <HAL_DMA_IRQHandler+0x540>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bf14      	ite	ne
 80088ae:	2301      	movne	r3, #1
 80088b0:	2300      	moveq	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d03e      	beq.n	8008936 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088bc:	f003 031f 	and.w	r3, r3, #31
 80088c0:	2210      	movs	r2, #16
 80088c2:	409a      	lsls	r2, r3
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d018      	beq.n	8008908 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d108      	bne.n	80088f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d024      	beq.n	8008936 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	4798      	blx	r3
 80088f4:	e01f      	b.n	8008936 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d01b      	beq.n	8008936 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	4798      	blx	r3
 8008906:	e016      	b.n	8008936 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008912:	2b00      	cmp	r3, #0
 8008914:	d107      	bne.n	8008926 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0208 	bic.w	r2, r2, #8
 8008924:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800893a:	f003 031f 	and.w	r3, r3, #31
 800893e:	2220      	movs	r2, #32
 8008940:	409a      	lsls	r2, r3
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	4013      	ands	r3, r2
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 8110 	beq.w	8008b6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a2c      	ldr	r2, [pc, #176]	; (8008a04 <HAL_DMA_IRQHandler+0x690>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d04a      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a2b      	ldr	r2, [pc, #172]	; (8008a08 <HAL_DMA_IRQHandler+0x694>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d045      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a29      	ldr	r2, [pc, #164]	; (8008a0c <HAL_DMA_IRQHandler+0x698>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d040      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a28      	ldr	r2, [pc, #160]	; (8008a10 <HAL_DMA_IRQHandler+0x69c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d03b      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <HAL_DMA_IRQHandler+0x6a0>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d036      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <HAL_DMA_IRQHandler+0x6a4>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d031      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a23      	ldr	r2, [pc, #140]	; (8008a1c <HAL_DMA_IRQHandler+0x6a8>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d02c      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <HAL_DMA_IRQHandler+0x6ac>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d027      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a20      	ldr	r2, [pc, #128]	; (8008a24 <HAL_DMA_IRQHandler+0x6b0>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d022      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <HAL_DMA_IRQHandler+0x6b4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d01d      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1d      	ldr	r2, [pc, #116]	; (8008a2c <HAL_DMA_IRQHandler+0x6b8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d018      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a1c      	ldr	r2, [pc, #112]	; (8008a30 <HAL_DMA_IRQHandler+0x6bc>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d013      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a1a      	ldr	r2, [pc, #104]	; (8008a34 <HAL_DMA_IRQHandler+0x6c0>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d00e      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a19      	ldr	r2, [pc, #100]	; (8008a38 <HAL_DMA_IRQHandler+0x6c4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d009      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a17      	ldr	r2, [pc, #92]	; (8008a3c <HAL_DMA_IRQHandler+0x6c8>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d004      	beq.n	80089ec <HAL_DMA_IRQHandler+0x678>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a16      	ldr	r2, [pc, #88]	; (8008a40 <HAL_DMA_IRQHandler+0x6cc>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d12b      	bne.n	8008a44 <HAL_DMA_IRQHandler+0x6d0>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0310 	and.w	r3, r3, #16
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bf14      	ite	ne
 80089fa:	2301      	movne	r3, #1
 80089fc:	2300      	moveq	r3, #0
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	e02a      	b.n	8008a58 <HAL_DMA_IRQHandler+0x6e4>
 8008a02:	bf00      	nop
 8008a04:	40020010 	.word	0x40020010
 8008a08:	40020028 	.word	0x40020028
 8008a0c:	40020040 	.word	0x40020040
 8008a10:	40020058 	.word	0x40020058
 8008a14:	40020070 	.word	0x40020070
 8008a18:	40020088 	.word	0x40020088
 8008a1c:	400200a0 	.word	0x400200a0
 8008a20:	400200b8 	.word	0x400200b8
 8008a24:	40020410 	.word	0x40020410
 8008a28:	40020428 	.word	0x40020428
 8008a2c:	40020440 	.word	0x40020440
 8008a30:	40020458 	.word	0x40020458
 8008a34:	40020470 	.word	0x40020470
 8008a38:	40020488 	.word	0x40020488
 8008a3c:	400204a0 	.word	0x400204a0
 8008a40:	400204b8 	.word	0x400204b8
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	bf14      	ite	ne
 8008a52:	2301      	movne	r3, #1
 8008a54:	2300      	moveq	r3, #0
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 8087 	beq.w	8008b6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a62:	f003 031f 	and.w	r3, r3, #31
 8008a66:	2220      	movs	r2, #32
 8008a68:	409a      	lsls	r2, r3
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d139      	bne.n	8008aee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0216 	bic.w	r2, r2, #22
 8008a88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d103      	bne.n	8008aaa <HAL_DMA_IRQHandler+0x736>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d007      	beq.n	8008aba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 0208 	bic.w	r2, r2, #8
 8008ab8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008abe:	f003 031f 	and.w	r3, r3, #31
 8008ac2:	223f      	movs	r2, #63	; 0x3f
 8008ac4:	409a      	lsls	r2, r3
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 834a 	beq.w	8009178 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	4798      	blx	r3
          }
          return;
 8008aec:	e344      	b.n	8009178 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d018      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d108      	bne.n	8008b1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d02c      	beq.n	8008b6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
 8008b1a:	e027      	b.n	8008b6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d023      	beq.n	8008b6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	4798      	blx	r3
 8008b2c:	e01e      	b.n	8008b6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10f      	bne.n	8008b5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0210 	bic.w	r2, r2, #16
 8008b4a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 8306 	beq.w	8009182 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 8088 	beq.w	8008c94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2204      	movs	r2, #4
 8008b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a7a      	ldr	r2, [pc, #488]	; (8008d7c <HAL_DMA_IRQHandler+0xa08>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d04a      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a79      	ldr	r2, [pc, #484]	; (8008d80 <HAL_DMA_IRQHandler+0xa0c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d045      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a77      	ldr	r2, [pc, #476]	; (8008d84 <HAL_DMA_IRQHandler+0xa10>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d040      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a76      	ldr	r2, [pc, #472]	; (8008d88 <HAL_DMA_IRQHandler+0xa14>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d03b      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a74      	ldr	r2, [pc, #464]	; (8008d8c <HAL_DMA_IRQHandler+0xa18>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d036      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a73      	ldr	r2, [pc, #460]	; (8008d90 <HAL_DMA_IRQHandler+0xa1c>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d031      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a71      	ldr	r2, [pc, #452]	; (8008d94 <HAL_DMA_IRQHandler+0xa20>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d02c      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a70      	ldr	r2, [pc, #448]	; (8008d98 <HAL_DMA_IRQHandler+0xa24>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d027      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a6e      	ldr	r2, [pc, #440]	; (8008d9c <HAL_DMA_IRQHandler+0xa28>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d022      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a6d      	ldr	r2, [pc, #436]	; (8008da0 <HAL_DMA_IRQHandler+0xa2c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d01d      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a6b      	ldr	r2, [pc, #428]	; (8008da4 <HAL_DMA_IRQHandler+0xa30>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d018      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a6a      	ldr	r2, [pc, #424]	; (8008da8 <HAL_DMA_IRQHandler+0xa34>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d013      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a68      	ldr	r2, [pc, #416]	; (8008dac <HAL_DMA_IRQHandler+0xa38>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d00e      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a67      	ldr	r2, [pc, #412]	; (8008db0 <HAL_DMA_IRQHandler+0xa3c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d009      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a65      	ldr	r2, [pc, #404]	; (8008db4 <HAL_DMA_IRQHandler+0xa40>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d004      	beq.n	8008c2c <HAL_DMA_IRQHandler+0x8b8>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a64      	ldr	r2, [pc, #400]	; (8008db8 <HAL_DMA_IRQHandler+0xa44>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d108      	bne.n	8008c3e <HAL_DMA_IRQHandler+0x8ca>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 0201 	bic.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	e007      	b.n	8008c4e <HAL_DMA_IRQHandler+0x8da>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 0201 	bic.w	r2, r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3301      	adds	r3, #1
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d307      	bcc.n	8008c6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f2      	bne.n	8008c4e <HAL_DMA_IRQHandler+0x8da>
 8008c68:	e000      	b.n	8008c6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008c6a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d004      	beq.n	8008c84 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008c82:	e003      	b.n	8008c8c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 8272 	beq.w	8009182 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
 8008ca6:	e26c      	b.n	8009182 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a43      	ldr	r2, [pc, #268]	; (8008dbc <HAL_DMA_IRQHandler+0xa48>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d022      	beq.n	8008cf8 <HAL_DMA_IRQHandler+0x984>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a42      	ldr	r2, [pc, #264]	; (8008dc0 <HAL_DMA_IRQHandler+0xa4c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d01d      	beq.n	8008cf8 <HAL_DMA_IRQHandler+0x984>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a40      	ldr	r2, [pc, #256]	; (8008dc4 <HAL_DMA_IRQHandler+0xa50>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d018      	beq.n	8008cf8 <HAL_DMA_IRQHandler+0x984>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a3f      	ldr	r2, [pc, #252]	; (8008dc8 <HAL_DMA_IRQHandler+0xa54>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d013      	beq.n	8008cf8 <HAL_DMA_IRQHandler+0x984>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a3d      	ldr	r2, [pc, #244]	; (8008dcc <HAL_DMA_IRQHandler+0xa58>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d00e      	beq.n	8008cf8 <HAL_DMA_IRQHandler+0x984>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a3c      	ldr	r2, [pc, #240]	; (8008dd0 <HAL_DMA_IRQHandler+0xa5c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d009      	beq.n	8008cf8 <HAL_DMA_IRQHandler+0x984>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a3a      	ldr	r2, [pc, #232]	; (8008dd4 <HAL_DMA_IRQHandler+0xa60>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d004      	beq.n	8008cf8 <HAL_DMA_IRQHandler+0x984>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a39      	ldr	r2, [pc, #228]	; (8008dd8 <HAL_DMA_IRQHandler+0xa64>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d101      	bne.n	8008cfc <HAL_DMA_IRQHandler+0x988>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e000      	b.n	8008cfe <HAL_DMA_IRQHandler+0x98a>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 823f 	beq.w	8009182 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d10:	f003 031f 	and.w	r3, r3, #31
 8008d14:	2204      	movs	r2, #4
 8008d16:	409a      	lsls	r2, r3
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 80cd 	beq.w	8008ebc <HAL_DMA_IRQHandler+0xb48>
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 80c7 	beq.w	8008ebc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d32:	f003 031f 	and.w	r3, r3, #31
 8008d36:	2204      	movs	r2, #4
 8008d38:	409a      	lsls	r2, r3
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d049      	beq.n	8008ddc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 8210 	beq.w	800917c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d64:	e20a      	b.n	800917c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 8206 	beq.w	800917c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d78:	e200      	b.n	800917c <HAL_DMA_IRQHandler+0xe08>
 8008d7a:	bf00      	nop
 8008d7c:	40020010 	.word	0x40020010
 8008d80:	40020028 	.word	0x40020028
 8008d84:	40020040 	.word	0x40020040
 8008d88:	40020058 	.word	0x40020058
 8008d8c:	40020070 	.word	0x40020070
 8008d90:	40020088 	.word	0x40020088
 8008d94:	400200a0 	.word	0x400200a0
 8008d98:	400200b8 	.word	0x400200b8
 8008d9c:	40020410 	.word	0x40020410
 8008da0:	40020428 	.word	0x40020428
 8008da4:	40020440 	.word	0x40020440
 8008da8:	40020458 	.word	0x40020458
 8008dac:	40020470 	.word	0x40020470
 8008db0:	40020488 	.word	0x40020488
 8008db4:	400204a0 	.word	0x400204a0
 8008db8:	400204b8 	.word	0x400204b8
 8008dbc:	58025408 	.word	0x58025408
 8008dc0:	5802541c 	.word	0x5802541c
 8008dc4:	58025430 	.word	0x58025430
 8008dc8:	58025444 	.word	0x58025444
 8008dcc:	58025458 	.word	0x58025458
 8008dd0:	5802546c 	.word	0x5802546c
 8008dd4:	58025480 	.word	0x58025480
 8008dd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d160      	bne.n	8008ea8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a8c      	ldr	r2, [pc, #560]	; (800901c <HAL_DMA_IRQHandler+0xca8>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d04a      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a8a      	ldr	r2, [pc, #552]	; (8009020 <HAL_DMA_IRQHandler+0xcac>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d045      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a89      	ldr	r2, [pc, #548]	; (8009024 <HAL_DMA_IRQHandler+0xcb0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d040      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a87      	ldr	r2, [pc, #540]	; (8009028 <HAL_DMA_IRQHandler+0xcb4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d03b      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a86      	ldr	r2, [pc, #536]	; (800902c <HAL_DMA_IRQHandler+0xcb8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d036      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a84      	ldr	r2, [pc, #528]	; (8009030 <HAL_DMA_IRQHandler+0xcbc>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d031      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a83      	ldr	r2, [pc, #524]	; (8009034 <HAL_DMA_IRQHandler+0xcc0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d02c      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a81      	ldr	r2, [pc, #516]	; (8009038 <HAL_DMA_IRQHandler+0xcc4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d027      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a80      	ldr	r2, [pc, #512]	; (800903c <HAL_DMA_IRQHandler+0xcc8>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d022      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a7e      	ldr	r2, [pc, #504]	; (8009040 <HAL_DMA_IRQHandler+0xccc>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d01d      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a7d      	ldr	r2, [pc, #500]	; (8009044 <HAL_DMA_IRQHandler+0xcd0>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d018      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a7b      	ldr	r2, [pc, #492]	; (8009048 <HAL_DMA_IRQHandler+0xcd4>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d013      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a7a      	ldr	r2, [pc, #488]	; (800904c <HAL_DMA_IRQHandler+0xcd8>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00e      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a78      	ldr	r2, [pc, #480]	; (8009050 <HAL_DMA_IRQHandler+0xcdc>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d009      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a77      	ldr	r2, [pc, #476]	; (8009054 <HAL_DMA_IRQHandler+0xce0>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d004      	beq.n	8008e86 <HAL_DMA_IRQHandler+0xb12>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a75      	ldr	r2, [pc, #468]	; (8009058 <HAL_DMA_IRQHandler+0xce4>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d108      	bne.n	8008e98 <HAL_DMA_IRQHandler+0xb24>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0208 	bic.w	r2, r2, #8
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	e007      	b.n	8008ea8 <HAL_DMA_IRQHandler+0xb34>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0204 	bic.w	r2, r2, #4
 8008ea6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 8165 	beq.w	800917c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008eba:	e15f      	b.n	800917c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ec0:	f003 031f 	and.w	r3, r3, #31
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	409a      	lsls	r2, r3
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 80c5 	beq.w	800905c <HAL_DMA_IRQHandler+0xce8>
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80bf 	beq.w	800905c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee2:	f003 031f 	and.w	r3, r3, #31
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	409a      	lsls	r2, r3
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d018      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 813a 	beq.w	8009180 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f14:	e134      	b.n	8009180 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 8130 	beq.w	8009180 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f28:	e12a      	b.n	8009180 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f003 0320 	and.w	r3, r3, #32
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d168      	bne.n	8009006 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a38      	ldr	r2, [pc, #224]	; (800901c <HAL_DMA_IRQHandler+0xca8>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d04a      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a37      	ldr	r2, [pc, #220]	; (8009020 <HAL_DMA_IRQHandler+0xcac>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d045      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a35      	ldr	r2, [pc, #212]	; (8009024 <HAL_DMA_IRQHandler+0xcb0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d040      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a34      	ldr	r2, [pc, #208]	; (8009028 <HAL_DMA_IRQHandler+0xcb4>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d03b      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a32      	ldr	r2, [pc, #200]	; (800902c <HAL_DMA_IRQHandler+0xcb8>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d036      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a31      	ldr	r2, [pc, #196]	; (8009030 <HAL_DMA_IRQHandler+0xcbc>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d031      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a2f      	ldr	r2, [pc, #188]	; (8009034 <HAL_DMA_IRQHandler+0xcc0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d02c      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a2e      	ldr	r2, [pc, #184]	; (8009038 <HAL_DMA_IRQHandler+0xcc4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d027      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a2c      	ldr	r2, [pc, #176]	; (800903c <HAL_DMA_IRQHandler+0xcc8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d022      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a2b      	ldr	r2, [pc, #172]	; (8009040 <HAL_DMA_IRQHandler+0xccc>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d01d      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a29      	ldr	r2, [pc, #164]	; (8009044 <HAL_DMA_IRQHandler+0xcd0>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d018      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a28      	ldr	r2, [pc, #160]	; (8009048 <HAL_DMA_IRQHandler+0xcd4>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d013      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a26      	ldr	r2, [pc, #152]	; (800904c <HAL_DMA_IRQHandler+0xcd8>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00e      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a25      	ldr	r2, [pc, #148]	; (8009050 <HAL_DMA_IRQHandler+0xcdc>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d009      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a23      	ldr	r2, [pc, #140]	; (8009054 <HAL_DMA_IRQHandler+0xce0>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d004      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0xc60>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a22      	ldr	r2, [pc, #136]	; (8009058 <HAL_DMA_IRQHandler+0xce4>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d108      	bne.n	8008fe6 <HAL_DMA_IRQHandler+0xc72>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f022 0214 	bic.w	r2, r2, #20
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	e007      	b.n	8008ff6 <HAL_DMA_IRQHandler+0xc82>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 020a 	bic.w	r2, r2, #10
 8008ff4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 80b8 	beq.w	8009180 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009018:	e0b2      	b.n	8009180 <HAL_DMA_IRQHandler+0xe0c>
 800901a:	bf00      	nop
 800901c:	40020010 	.word	0x40020010
 8009020:	40020028 	.word	0x40020028
 8009024:	40020040 	.word	0x40020040
 8009028:	40020058 	.word	0x40020058
 800902c:	40020070 	.word	0x40020070
 8009030:	40020088 	.word	0x40020088
 8009034:	400200a0 	.word	0x400200a0
 8009038:	400200b8 	.word	0x400200b8
 800903c:	40020410 	.word	0x40020410
 8009040:	40020428 	.word	0x40020428
 8009044:	40020440 	.word	0x40020440
 8009048:	40020458 	.word	0x40020458
 800904c:	40020470 	.word	0x40020470
 8009050:	40020488 	.word	0x40020488
 8009054:	400204a0 	.word	0x400204a0
 8009058:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009060:	f003 031f 	and.w	r3, r3, #31
 8009064:	2208      	movs	r2, #8
 8009066:	409a      	lsls	r2, r3
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	4013      	ands	r3, r2
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 8088 	beq.w	8009182 <HAL_DMA_IRQHandler+0xe0e>
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 8082 	beq.w	8009182 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a41      	ldr	r2, [pc, #260]	; (8009188 <HAL_DMA_IRQHandler+0xe14>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d04a      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a3f      	ldr	r2, [pc, #252]	; (800918c <HAL_DMA_IRQHandler+0xe18>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d045      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a3e      	ldr	r2, [pc, #248]	; (8009190 <HAL_DMA_IRQHandler+0xe1c>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d040      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a3c      	ldr	r2, [pc, #240]	; (8009194 <HAL_DMA_IRQHandler+0xe20>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d03b      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a3b      	ldr	r2, [pc, #236]	; (8009198 <HAL_DMA_IRQHandler+0xe24>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d036      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a39      	ldr	r2, [pc, #228]	; (800919c <HAL_DMA_IRQHandler+0xe28>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d031      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a38      	ldr	r2, [pc, #224]	; (80091a0 <HAL_DMA_IRQHandler+0xe2c>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d02c      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a36      	ldr	r2, [pc, #216]	; (80091a4 <HAL_DMA_IRQHandler+0xe30>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d027      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a35      	ldr	r2, [pc, #212]	; (80091a8 <HAL_DMA_IRQHandler+0xe34>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d022      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a33      	ldr	r2, [pc, #204]	; (80091ac <HAL_DMA_IRQHandler+0xe38>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d01d      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a32      	ldr	r2, [pc, #200]	; (80091b0 <HAL_DMA_IRQHandler+0xe3c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d018      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a30      	ldr	r2, [pc, #192]	; (80091b4 <HAL_DMA_IRQHandler+0xe40>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d013      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a2f      	ldr	r2, [pc, #188]	; (80091b8 <HAL_DMA_IRQHandler+0xe44>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d00e      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a2d      	ldr	r2, [pc, #180]	; (80091bc <HAL_DMA_IRQHandler+0xe48>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d009      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a2c      	ldr	r2, [pc, #176]	; (80091c0 <HAL_DMA_IRQHandler+0xe4c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d004      	beq.n	800911e <HAL_DMA_IRQHandler+0xdaa>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a2a      	ldr	r2, [pc, #168]	; (80091c4 <HAL_DMA_IRQHandler+0xe50>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d108      	bne.n	8009130 <HAL_DMA_IRQHandler+0xdbc>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 021c 	bic.w	r2, r2, #28
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	e007      	b.n	8009140 <HAL_DMA_IRQHandler+0xdcc>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 020e 	bic.w	r2, r2, #14
 800913e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009144:	f003 031f 	and.w	r3, r3, #31
 8009148:	2201      	movs	r2, #1
 800914a:	409a      	lsls	r2, r3
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800916a:	2b00      	cmp	r3, #0
 800916c:	d009      	beq.n	8009182 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
 8009176:	e004      	b.n	8009182 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009178:	bf00      	nop
 800917a:	e002      	b.n	8009182 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800917c:	bf00      	nop
 800917e:	e000      	b.n	8009182 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009180:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009182:	3728      	adds	r7, #40	; 0x28
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	40020010 	.word	0x40020010
 800918c:	40020028 	.word	0x40020028
 8009190:	40020040 	.word	0x40020040
 8009194:	40020058 	.word	0x40020058
 8009198:	40020070 	.word	0x40020070
 800919c:	40020088 	.word	0x40020088
 80091a0:	400200a0 	.word	0x400200a0
 80091a4:	400200b8 	.word	0x400200b8
 80091a8:	40020410 	.word	0x40020410
 80091ac:	40020428 	.word	0x40020428
 80091b0:	40020440 	.word	0x40020440
 80091b4:	40020458 	.word	0x40020458
 80091b8:	40020470 	.word	0x40020470
 80091bc:	40020488 	.word	0x40020488
 80091c0:	400204a0 	.word	0x400204a0
 80091c4:	400204b8 	.word	0x400204b8

080091c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a84      	ldr	r2, [pc, #528]	; (80093f8 <DMA_SetConfig+0x230>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d072      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a82      	ldr	r2, [pc, #520]	; (80093fc <DMA_SetConfig+0x234>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d06d      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a81      	ldr	r2, [pc, #516]	; (8009400 <DMA_SetConfig+0x238>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d068      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a7f      	ldr	r2, [pc, #508]	; (8009404 <DMA_SetConfig+0x23c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d063      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a7e      	ldr	r2, [pc, #504]	; (8009408 <DMA_SetConfig+0x240>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d05e      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a7c      	ldr	r2, [pc, #496]	; (800940c <DMA_SetConfig+0x244>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d059      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a7b      	ldr	r2, [pc, #492]	; (8009410 <DMA_SetConfig+0x248>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d054      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a79      	ldr	r2, [pc, #484]	; (8009414 <DMA_SetConfig+0x24c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d04f      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a78      	ldr	r2, [pc, #480]	; (8009418 <DMA_SetConfig+0x250>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d04a      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a76      	ldr	r2, [pc, #472]	; (800941c <DMA_SetConfig+0x254>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d045      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a75      	ldr	r2, [pc, #468]	; (8009420 <DMA_SetConfig+0x258>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d040      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a73      	ldr	r2, [pc, #460]	; (8009424 <DMA_SetConfig+0x25c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d03b      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a72      	ldr	r2, [pc, #456]	; (8009428 <DMA_SetConfig+0x260>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d036      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a70      	ldr	r2, [pc, #448]	; (800942c <DMA_SetConfig+0x264>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d031      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a6f      	ldr	r2, [pc, #444]	; (8009430 <DMA_SetConfig+0x268>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d02c      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a6d      	ldr	r2, [pc, #436]	; (8009434 <DMA_SetConfig+0x26c>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d027      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a6c      	ldr	r2, [pc, #432]	; (8009438 <DMA_SetConfig+0x270>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d022      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a6a      	ldr	r2, [pc, #424]	; (800943c <DMA_SetConfig+0x274>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d01d      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a69      	ldr	r2, [pc, #420]	; (8009440 <DMA_SetConfig+0x278>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d018      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a67      	ldr	r2, [pc, #412]	; (8009444 <DMA_SetConfig+0x27c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d013      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a66      	ldr	r2, [pc, #408]	; (8009448 <DMA_SetConfig+0x280>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00e      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a64      	ldr	r2, [pc, #400]	; (800944c <DMA_SetConfig+0x284>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d009      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a63      	ldr	r2, [pc, #396]	; (8009450 <DMA_SetConfig+0x288>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d004      	beq.n	80092d2 <DMA_SetConfig+0x10a>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a61      	ldr	r2, [pc, #388]	; (8009454 <DMA_SetConfig+0x28c>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d101      	bne.n	80092d6 <DMA_SetConfig+0x10e>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e000      	b.n	80092d8 <DMA_SetConfig+0x110>
 80092d6:	2300      	movs	r3, #0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00d      	beq.n	80092f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80092e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80092f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a3e      	ldr	r2, [pc, #248]	; (80093f8 <DMA_SetConfig+0x230>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d04a      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a3d      	ldr	r2, [pc, #244]	; (80093fc <DMA_SetConfig+0x234>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d045      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a3b      	ldr	r2, [pc, #236]	; (8009400 <DMA_SetConfig+0x238>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d040      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a3a      	ldr	r2, [pc, #232]	; (8009404 <DMA_SetConfig+0x23c>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d03b      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a38      	ldr	r2, [pc, #224]	; (8009408 <DMA_SetConfig+0x240>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d036      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a37      	ldr	r2, [pc, #220]	; (800940c <DMA_SetConfig+0x244>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d031      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a35      	ldr	r2, [pc, #212]	; (8009410 <DMA_SetConfig+0x248>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d02c      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a34      	ldr	r2, [pc, #208]	; (8009414 <DMA_SetConfig+0x24c>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d027      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a32      	ldr	r2, [pc, #200]	; (8009418 <DMA_SetConfig+0x250>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d022      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a31      	ldr	r2, [pc, #196]	; (800941c <DMA_SetConfig+0x254>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d01d      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a2f      	ldr	r2, [pc, #188]	; (8009420 <DMA_SetConfig+0x258>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d018      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a2e      	ldr	r2, [pc, #184]	; (8009424 <DMA_SetConfig+0x25c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d013      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a2c      	ldr	r2, [pc, #176]	; (8009428 <DMA_SetConfig+0x260>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d00e      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a2b      	ldr	r2, [pc, #172]	; (800942c <DMA_SetConfig+0x264>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d009      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a29      	ldr	r2, [pc, #164]	; (8009430 <DMA_SetConfig+0x268>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d004      	beq.n	8009398 <DMA_SetConfig+0x1d0>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a28      	ldr	r2, [pc, #160]	; (8009434 <DMA_SetConfig+0x26c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d101      	bne.n	800939c <DMA_SetConfig+0x1d4>
 8009398:	2301      	movs	r3, #1
 800939a:	e000      	b.n	800939e <DMA_SetConfig+0x1d6>
 800939c:	2300      	movs	r3, #0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d05a      	beq.n	8009458 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093a6:	f003 031f 	and.w	r3, r3, #31
 80093aa:	223f      	movs	r2, #63	; 0x3f
 80093ac:	409a      	lsls	r2, r3
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80093c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	2b40      	cmp	r3, #64	; 0x40
 80093d0:	d108      	bne.n	80093e4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80093e2:	e087      	b.n	80094f4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	60da      	str	r2, [r3, #12]
}
 80093f4:	e07e      	b.n	80094f4 <DMA_SetConfig+0x32c>
 80093f6:	bf00      	nop
 80093f8:	40020010 	.word	0x40020010
 80093fc:	40020028 	.word	0x40020028
 8009400:	40020040 	.word	0x40020040
 8009404:	40020058 	.word	0x40020058
 8009408:	40020070 	.word	0x40020070
 800940c:	40020088 	.word	0x40020088
 8009410:	400200a0 	.word	0x400200a0
 8009414:	400200b8 	.word	0x400200b8
 8009418:	40020410 	.word	0x40020410
 800941c:	40020428 	.word	0x40020428
 8009420:	40020440 	.word	0x40020440
 8009424:	40020458 	.word	0x40020458
 8009428:	40020470 	.word	0x40020470
 800942c:	40020488 	.word	0x40020488
 8009430:	400204a0 	.word	0x400204a0
 8009434:	400204b8 	.word	0x400204b8
 8009438:	58025408 	.word	0x58025408
 800943c:	5802541c 	.word	0x5802541c
 8009440:	58025430 	.word	0x58025430
 8009444:	58025444 	.word	0x58025444
 8009448:	58025458 	.word	0x58025458
 800944c:	5802546c 	.word	0x5802546c
 8009450:	58025480 	.word	0x58025480
 8009454:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a28      	ldr	r2, [pc, #160]	; (8009500 <DMA_SetConfig+0x338>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d022      	beq.n	80094a8 <DMA_SetConfig+0x2e0>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a27      	ldr	r2, [pc, #156]	; (8009504 <DMA_SetConfig+0x33c>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d01d      	beq.n	80094a8 <DMA_SetConfig+0x2e0>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a25      	ldr	r2, [pc, #148]	; (8009508 <DMA_SetConfig+0x340>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d018      	beq.n	80094a8 <DMA_SetConfig+0x2e0>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a24      	ldr	r2, [pc, #144]	; (800950c <DMA_SetConfig+0x344>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d013      	beq.n	80094a8 <DMA_SetConfig+0x2e0>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a22      	ldr	r2, [pc, #136]	; (8009510 <DMA_SetConfig+0x348>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00e      	beq.n	80094a8 <DMA_SetConfig+0x2e0>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a21      	ldr	r2, [pc, #132]	; (8009514 <DMA_SetConfig+0x34c>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d009      	beq.n	80094a8 <DMA_SetConfig+0x2e0>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a1f      	ldr	r2, [pc, #124]	; (8009518 <DMA_SetConfig+0x350>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d004      	beq.n	80094a8 <DMA_SetConfig+0x2e0>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a1e      	ldr	r2, [pc, #120]	; (800951c <DMA_SetConfig+0x354>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d101      	bne.n	80094ac <DMA_SetConfig+0x2e4>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e000      	b.n	80094ae <DMA_SetConfig+0x2e6>
 80094ac:	2300      	movs	r3, #0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d020      	beq.n	80094f4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b6:	f003 031f 	and.w	r3, r3, #31
 80094ba:	2201      	movs	r2, #1
 80094bc:	409a      	lsls	r2, r3
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	2b40      	cmp	r3, #64	; 0x40
 80094d0:	d108      	bne.n	80094e4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	60da      	str	r2, [r3, #12]
}
 80094e2:	e007      	b.n	80094f4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	60da      	str	r2, [r3, #12]
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	58025408 	.word	0x58025408
 8009504:	5802541c 	.word	0x5802541c
 8009508:	58025430 	.word	0x58025430
 800950c:	58025444 	.word	0x58025444
 8009510:	58025458 	.word	0x58025458
 8009514:	5802546c 	.word	0x5802546c
 8009518:	58025480 	.word	0x58025480
 800951c:	58025494 	.word	0x58025494

08009520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a42      	ldr	r2, [pc, #264]	; (8009638 <DMA_CalcBaseAndBitshift+0x118>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d04a      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a41      	ldr	r2, [pc, #260]	; (800963c <DMA_CalcBaseAndBitshift+0x11c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d045      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a3f      	ldr	r2, [pc, #252]	; (8009640 <DMA_CalcBaseAndBitshift+0x120>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d040      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a3e      	ldr	r2, [pc, #248]	; (8009644 <DMA_CalcBaseAndBitshift+0x124>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d03b      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a3c      	ldr	r2, [pc, #240]	; (8009648 <DMA_CalcBaseAndBitshift+0x128>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d036      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a3b      	ldr	r2, [pc, #236]	; (800964c <DMA_CalcBaseAndBitshift+0x12c>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d031      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a39      	ldr	r2, [pc, #228]	; (8009650 <DMA_CalcBaseAndBitshift+0x130>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d02c      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a38      	ldr	r2, [pc, #224]	; (8009654 <DMA_CalcBaseAndBitshift+0x134>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d027      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a36      	ldr	r2, [pc, #216]	; (8009658 <DMA_CalcBaseAndBitshift+0x138>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d022      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a35      	ldr	r2, [pc, #212]	; (800965c <DMA_CalcBaseAndBitshift+0x13c>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d01d      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a33      	ldr	r2, [pc, #204]	; (8009660 <DMA_CalcBaseAndBitshift+0x140>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d018      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a32      	ldr	r2, [pc, #200]	; (8009664 <DMA_CalcBaseAndBitshift+0x144>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d013      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a30      	ldr	r2, [pc, #192]	; (8009668 <DMA_CalcBaseAndBitshift+0x148>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d00e      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a2f      	ldr	r2, [pc, #188]	; (800966c <DMA_CalcBaseAndBitshift+0x14c>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d009      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a2d      	ldr	r2, [pc, #180]	; (8009670 <DMA_CalcBaseAndBitshift+0x150>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d004      	beq.n	80095c8 <DMA_CalcBaseAndBitshift+0xa8>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a2c      	ldr	r2, [pc, #176]	; (8009674 <DMA_CalcBaseAndBitshift+0x154>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d101      	bne.n	80095cc <DMA_CalcBaseAndBitshift+0xac>
 80095c8:	2301      	movs	r3, #1
 80095ca:	e000      	b.n	80095ce <DMA_CalcBaseAndBitshift+0xae>
 80095cc:	2300      	movs	r3, #0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d024      	beq.n	800961c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	3b10      	subs	r3, #16
 80095da:	4a27      	ldr	r2, [pc, #156]	; (8009678 <DMA_CalcBaseAndBitshift+0x158>)
 80095dc:	fba2 2303 	umull	r2, r3, r2, r3
 80095e0:	091b      	lsrs	r3, r3, #4
 80095e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	4a24      	ldr	r2, [pc, #144]	; (800967c <DMA_CalcBaseAndBitshift+0x15c>)
 80095ec:	5cd3      	ldrb	r3, [r2, r3]
 80095ee:	461a      	mov	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d908      	bls.n	800960c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	461a      	mov	r2, r3
 8009600:	4b1f      	ldr	r3, [pc, #124]	; (8009680 <DMA_CalcBaseAndBitshift+0x160>)
 8009602:	4013      	ands	r3, r2
 8009604:	1d1a      	adds	r2, r3, #4
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	659a      	str	r2, [r3, #88]	; 0x58
 800960a:	e00d      	b.n	8009628 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	4b1b      	ldr	r3, [pc, #108]	; (8009680 <DMA_CalcBaseAndBitshift+0x160>)
 8009614:	4013      	ands	r3, r2
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	6593      	str	r3, [r2, #88]	; 0x58
 800961a:	e005      	b.n	8009628 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	40020010 	.word	0x40020010
 800963c:	40020028 	.word	0x40020028
 8009640:	40020040 	.word	0x40020040
 8009644:	40020058 	.word	0x40020058
 8009648:	40020070 	.word	0x40020070
 800964c:	40020088 	.word	0x40020088
 8009650:	400200a0 	.word	0x400200a0
 8009654:	400200b8 	.word	0x400200b8
 8009658:	40020410 	.word	0x40020410
 800965c:	40020428 	.word	0x40020428
 8009660:	40020440 	.word	0x40020440
 8009664:	40020458 	.word	0x40020458
 8009668:	40020470 	.word	0x40020470
 800966c:	40020488 	.word	0x40020488
 8009670:	400204a0 	.word	0x400204a0
 8009674:	400204b8 	.word	0x400204b8
 8009678:	aaaaaaab 	.word	0xaaaaaaab
 800967c:	080140c4 	.word	0x080140c4
 8009680:	fffffc00 	.word	0xfffffc00

08009684 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d120      	bne.n	80096da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969c:	2b03      	cmp	r3, #3
 800969e:	d858      	bhi.n	8009752 <DMA_CheckFifoParam+0xce>
 80096a0:	a201      	add	r2, pc, #4	; (adr r2, 80096a8 <DMA_CheckFifoParam+0x24>)
 80096a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a6:	bf00      	nop
 80096a8:	080096b9 	.word	0x080096b9
 80096ac:	080096cb 	.word	0x080096cb
 80096b0:	080096b9 	.word	0x080096b9
 80096b4:	08009753 	.word	0x08009753
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d048      	beq.n	8009756 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80096c8:	e045      	b.n	8009756 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80096d2:	d142      	bne.n	800975a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80096d8:	e03f      	b.n	800975a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096e2:	d123      	bne.n	800972c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e8:	2b03      	cmp	r3, #3
 80096ea:	d838      	bhi.n	800975e <DMA_CheckFifoParam+0xda>
 80096ec:	a201      	add	r2, pc, #4	; (adr r2, 80096f4 <DMA_CheckFifoParam+0x70>)
 80096ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f2:	bf00      	nop
 80096f4:	08009705 	.word	0x08009705
 80096f8:	0800970b 	.word	0x0800970b
 80096fc:	08009705 	.word	0x08009705
 8009700:	0800971d 	.word	0x0800971d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	73fb      	strb	r3, [r7, #15]
        break;
 8009708:	e030      	b.n	800976c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d025      	beq.n	8009762 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800971a:	e022      	b.n	8009762 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009720:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009724:	d11f      	bne.n	8009766 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800972a:	e01c      	b.n	8009766 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009730:	2b02      	cmp	r3, #2
 8009732:	d902      	bls.n	800973a <DMA_CheckFifoParam+0xb6>
 8009734:	2b03      	cmp	r3, #3
 8009736:	d003      	beq.n	8009740 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009738:	e018      	b.n	800976c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	73fb      	strb	r3, [r7, #15]
        break;
 800973e:	e015      	b.n	800976c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00e      	beq.n	800976a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	73fb      	strb	r3, [r7, #15]
    break;
 8009750:	e00b      	b.n	800976a <DMA_CheckFifoParam+0xe6>
        break;
 8009752:	bf00      	nop
 8009754:	e00a      	b.n	800976c <DMA_CheckFifoParam+0xe8>
        break;
 8009756:	bf00      	nop
 8009758:	e008      	b.n	800976c <DMA_CheckFifoParam+0xe8>
        break;
 800975a:	bf00      	nop
 800975c:	e006      	b.n	800976c <DMA_CheckFifoParam+0xe8>
        break;
 800975e:	bf00      	nop
 8009760:	e004      	b.n	800976c <DMA_CheckFifoParam+0xe8>
        break;
 8009762:	bf00      	nop
 8009764:	e002      	b.n	800976c <DMA_CheckFifoParam+0xe8>
        break;
 8009766:	bf00      	nop
 8009768:	e000      	b.n	800976c <DMA_CheckFifoParam+0xe8>
    break;
 800976a:	bf00      	nop
    }
  }

  return status;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop

0800977c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a38      	ldr	r2, [pc, #224]	; (8009870 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d022      	beq.n	80097da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a36      	ldr	r2, [pc, #216]	; (8009874 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d01d      	beq.n	80097da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a35      	ldr	r2, [pc, #212]	; (8009878 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d018      	beq.n	80097da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a33      	ldr	r2, [pc, #204]	; (800987c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d013      	beq.n	80097da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a32      	ldr	r2, [pc, #200]	; (8009880 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d00e      	beq.n	80097da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a30      	ldr	r2, [pc, #192]	; (8009884 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d009      	beq.n	80097da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a2f      	ldr	r2, [pc, #188]	; (8009888 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d004      	beq.n	80097da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a2d      	ldr	r2, [pc, #180]	; (800988c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d101      	bne.n	80097de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80097da:	2301      	movs	r3, #1
 80097dc:	e000      	b.n	80097e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80097de:	2300      	movs	r3, #0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d01a      	beq.n	800981a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	3b08      	subs	r3, #8
 80097ec:	4a28      	ldr	r2, [pc, #160]	; (8009890 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80097ee:	fba2 2303 	umull	r2, r3, r2, r3
 80097f2:	091b      	lsrs	r3, r3, #4
 80097f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4b26      	ldr	r3, [pc, #152]	; (8009894 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	461a      	mov	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a24      	ldr	r2, [pc, #144]	; (8009898 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009808:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f003 031f 	and.w	r3, r3, #31
 8009810:	2201      	movs	r2, #1
 8009812:	409a      	lsls	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009818:	e024      	b.n	8009864 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	3b10      	subs	r3, #16
 8009822:	4a1e      	ldr	r2, [pc, #120]	; (800989c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009824:	fba2 2303 	umull	r2, r3, r2, r3
 8009828:	091b      	lsrs	r3, r3, #4
 800982a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	4a1c      	ldr	r2, [pc, #112]	; (80098a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d806      	bhi.n	8009842 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	4a1b      	ldr	r2, [pc, #108]	; (80098a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d902      	bls.n	8009842 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3308      	adds	r3, #8
 8009840:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4b18      	ldr	r3, [pc, #96]	; (80098a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	461a      	mov	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a16      	ldr	r2, [pc, #88]	; (80098ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009854:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f003 031f 	and.w	r3, r3, #31
 800985c:	2201      	movs	r2, #1
 800985e:	409a      	lsls	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009864:	bf00      	nop
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	58025408 	.word	0x58025408
 8009874:	5802541c 	.word	0x5802541c
 8009878:	58025430 	.word	0x58025430
 800987c:	58025444 	.word	0x58025444
 8009880:	58025458 	.word	0x58025458
 8009884:	5802546c 	.word	0x5802546c
 8009888:	58025480 	.word	0x58025480
 800988c:	58025494 	.word	0x58025494
 8009890:	cccccccd 	.word	0xcccccccd
 8009894:	16009600 	.word	0x16009600
 8009898:	58025880 	.word	0x58025880
 800989c:	aaaaaaab 	.word	0xaaaaaaab
 80098a0:	400204b8 	.word	0x400204b8
 80098a4:	4002040f 	.word	0x4002040f
 80098a8:	10008200 	.word	0x10008200
 80098ac:	40020880 	.word	0x40020880

080098b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d04a      	beq.n	800995c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2b08      	cmp	r3, #8
 80098ca:	d847      	bhi.n	800995c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a25      	ldr	r2, [pc, #148]	; (8009968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d022      	beq.n	800991c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a24      	ldr	r2, [pc, #144]	; (800996c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d01d      	beq.n	800991c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a22      	ldr	r2, [pc, #136]	; (8009970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d018      	beq.n	800991c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a21      	ldr	r2, [pc, #132]	; (8009974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d013      	beq.n	800991c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a1f      	ldr	r2, [pc, #124]	; (8009978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d00e      	beq.n	800991c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a1e      	ldr	r2, [pc, #120]	; (800997c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d009      	beq.n	800991c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a1c      	ldr	r2, [pc, #112]	; (8009980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d004      	beq.n	800991c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a1b      	ldr	r2, [pc, #108]	; (8009984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d101      	bne.n	8009920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800991c:	2301      	movs	r3, #1
 800991e:	e000      	b.n	8009922 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009920:	2300      	movs	r3, #0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	4b17      	ldr	r3, [pc, #92]	; (8009988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	461a      	mov	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a15      	ldr	r2, [pc, #84]	; (800998c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009938:	671a      	str	r2, [r3, #112]	; 0x70
 800993a:	e009      	b.n	8009950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4b14      	ldr	r3, [pc, #80]	; (8009990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009940:	4413      	add	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	461a      	mov	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a11      	ldr	r2, [pc, #68]	; (8009994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800994e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	3b01      	subs	r3, #1
 8009954:	2201      	movs	r2, #1
 8009956:	409a      	lsls	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800995c:	bf00      	nop
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	58025408 	.word	0x58025408
 800996c:	5802541c 	.word	0x5802541c
 8009970:	58025430 	.word	0x58025430
 8009974:	58025444 	.word	0x58025444
 8009978:	58025458 	.word	0x58025458
 800997c:	5802546c 	.word	0x5802546c
 8009980:	58025480 	.word	0x58025480
 8009984:	58025494 	.word	0x58025494
 8009988:	1600963f 	.word	0x1600963f
 800998c:	58025940 	.word	0x58025940
 8009990:	1000823f 	.word	0x1000823f
 8009994:	40020940 	.word	0x40020940

08009998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009998:	b480      	push	{r7}
 800999a:	b089      	sub	sp, #36	; 0x24
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80099a6:	4b89      	ldr	r3, [pc, #548]	; (8009bcc <HAL_GPIO_Init+0x234>)
 80099a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80099aa:	e194      	b.n	8009cd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	2101      	movs	r1, #1
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	fa01 f303 	lsl.w	r3, r1, r3
 80099b8:	4013      	ands	r3, r2
 80099ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 8186 	beq.w	8009cd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	f003 0303 	and.w	r3, r3, #3
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d005      	beq.n	80099dc <HAL_GPIO_Init+0x44>
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	f003 0303 	and.w	r3, r3, #3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d130      	bne.n	8009a3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	2203      	movs	r2, #3
 80099e8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ec:	43db      	mvns	r3, r3
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	4013      	ands	r3, r2
 80099f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	69ba      	ldr	r2, [r7, #24]
 8009a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009a12:	2201      	movs	r2, #1
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1a:	43db      	mvns	r3, r3
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	4013      	ands	r3, r2
 8009a20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	091b      	lsrs	r3, r3, #4
 8009a28:	f003 0201 	and.w	r2, r3, #1
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d017      	beq.n	8009a7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	2203      	movs	r2, #3
 8009a56:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5a:	43db      	mvns	r3, r3
 8009a5c:	69ba      	ldr	r2, [r7, #24]
 8009a5e:	4013      	ands	r3, r2
 8009a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	689a      	ldr	r2, [r3, #8]
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	005b      	lsls	r3, r3, #1
 8009a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	69ba      	ldr	r2, [r7, #24]
 8009a78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f003 0303 	and.w	r3, r3, #3
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d123      	bne.n	8009ace <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	08da      	lsrs	r2, r3, #3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	3208      	adds	r2, #8
 8009a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	220f      	movs	r2, #15
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	43db      	mvns	r3, r3
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	f003 0307 	and.w	r3, r3, #7
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	08da      	lsrs	r2, r3, #3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3208      	adds	r2, #8
 8009ac8:	69b9      	ldr	r1, [r7, #24]
 8009aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	2203      	movs	r2, #3
 8009ada:	fa02 f303 	lsl.w	r3, r2, r3
 8009ade:	43db      	mvns	r3, r3
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f003 0203 	and.w	r2, r3, #3
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	fa02 f303 	lsl.w	r3, r2, r3
 8009af6:	69ba      	ldr	r2, [r7, #24]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 80e0 	beq.w	8009cd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b10:	4b2f      	ldr	r3, [pc, #188]	; (8009bd0 <HAL_GPIO_Init+0x238>)
 8009b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b16:	4a2e      	ldr	r2, [pc, #184]	; (8009bd0 <HAL_GPIO_Init+0x238>)
 8009b18:	f043 0302 	orr.w	r3, r3, #2
 8009b1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009b20:	4b2b      	ldr	r3, [pc, #172]	; (8009bd0 <HAL_GPIO_Init+0x238>)
 8009b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b26:	f003 0302 	and.w	r3, r3, #2
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b2e:	4a29      	ldr	r2, [pc, #164]	; (8009bd4 <HAL_GPIO_Init+0x23c>)
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	089b      	lsrs	r3, r3, #2
 8009b34:	3302      	adds	r3, #2
 8009b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	220f      	movs	r2, #15
 8009b46:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4a:	43db      	mvns	r3, r3
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	4013      	ands	r3, r2
 8009b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a20      	ldr	r2, [pc, #128]	; (8009bd8 <HAL_GPIO_Init+0x240>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d052      	beq.n	8009c00 <HAL_GPIO_Init+0x268>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a1f      	ldr	r2, [pc, #124]	; (8009bdc <HAL_GPIO_Init+0x244>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d031      	beq.n	8009bc6 <HAL_GPIO_Init+0x22e>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a1e      	ldr	r2, [pc, #120]	; (8009be0 <HAL_GPIO_Init+0x248>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d02b      	beq.n	8009bc2 <HAL_GPIO_Init+0x22a>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a1d      	ldr	r2, [pc, #116]	; (8009be4 <HAL_GPIO_Init+0x24c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d025      	beq.n	8009bbe <HAL_GPIO_Init+0x226>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a1c      	ldr	r2, [pc, #112]	; (8009be8 <HAL_GPIO_Init+0x250>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d01f      	beq.n	8009bba <HAL_GPIO_Init+0x222>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a1b      	ldr	r2, [pc, #108]	; (8009bec <HAL_GPIO_Init+0x254>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d019      	beq.n	8009bb6 <HAL_GPIO_Init+0x21e>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a1a      	ldr	r2, [pc, #104]	; (8009bf0 <HAL_GPIO_Init+0x258>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d013      	beq.n	8009bb2 <HAL_GPIO_Init+0x21a>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a19      	ldr	r2, [pc, #100]	; (8009bf4 <HAL_GPIO_Init+0x25c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d00d      	beq.n	8009bae <HAL_GPIO_Init+0x216>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a18      	ldr	r2, [pc, #96]	; (8009bf8 <HAL_GPIO_Init+0x260>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d007      	beq.n	8009baa <HAL_GPIO_Init+0x212>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a17      	ldr	r2, [pc, #92]	; (8009bfc <HAL_GPIO_Init+0x264>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d101      	bne.n	8009ba6 <HAL_GPIO_Init+0x20e>
 8009ba2:	2309      	movs	r3, #9
 8009ba4:	e02d      	b.n	8009c02 <HAL_GPIO_Init+0x26a>
 8009ba6:	230a      	movs	r3, #10
 8009ba8:	e02b      	b.n	8009c02 <HAL_GPIO_Init+0x26a>
 8009baa:	2308      	movs	r3, #8
 8009bac:	e029      	b.n	8009c02 <HAL_GPIO_Init+0x26a>
 8009bae:	2307      	movs	r3, #7
 8009bb0:	e027      	b.n	8009c02 <HAL_GPIO_Init+0x26a>
 8009bb2:	2306      	movs	r3, #6
 8009bb4:	e025      	b.n	8009c02 <HAL_GPIO_Init+0x26a>
 8009bb6:	2305      	movs	r3, #5
 8009bb8:	e023      	b.n	8009c02 <HAL_GPIO_Init+0x26a>
 8009bba:	2304      	movs	r3, #4
 8009bbc:	e021      	b.n	8009c02 <HAL_GPIO_Init+0x26a>
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	e01f      	b.n	8009c02 <HAL_GPIO_Init+0x26a>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e01d      	b.n	8009c02 <HAL_GPIO_Init+0x26a>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e01b      	b.n	8009c02 <HAL_GPIO_Init+0x26a>
 8009bca:	bf00      	nop
 8009bcc:	58000080 	.word	0x58000080
 8009bd0:	58024400 	.word	0x58024400
 8009bd4:	58000400 	.word	0x58000400
 8009bd8:	58020000 	.word	0x58020000
 8009bdc:	58020400 	.word	0x58020400
 8009be0:	58020800 	.word	0x58020800
 8009be4:	58020c00 	.word	0x58020c00
 8009be8:	58021000 	.word	0x58021000
 8009bec:	58021400 	.word	0x58021400
 8009bf0:	58021800 	.word	0x58021800
 8009bf4:	58021c00 	.word	0x58021c00
 8009bf8:	58022000 	.word	0x58022000
 8009bfc:	58022400 	.word	0x58022400
 8009c00:	2300      	movs	r3, #0
 8009c02:	69fa      	ldr	r2, [r7, #28]
 8009c04:	f002 0203 	and.w	r2, r2, #3
 8009c08:	0092      	lsls	r2, r2, #2
 8009c0a:	4093      	lsls	r3, r2
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c12:	4938      	ldr	r1, [pc, #224]	; (8009cf4 <HAL_GPIO_Init+0x35c>)
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	089b      	lsrs	r3, r3, #2
 8009c18:	3302      	adds	r3, #2
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	43db      	mvns	r3, r3
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	43db      	mvns	r3, r3
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	43db      	mvns	r3, r3
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	43db      	mvns	r3, r3
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	69ba      	ldr	r2, [r7, #24]
 8009cce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f47f ae63 	bne.w	80099ac <HAL_GPIO_Init+0x14>
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	3724      	adds	r7, #36	; 0x24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	58000400 	.word	0x58000400

08009cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	807b      	strh	r3, [r7, #2]
 8009d04:	4613      	mov	r3, r2
 8009d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d08:	787b      	ldrb	r3, [r7, #1]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d0e:	887a      	ldrh	r2, [r7, #2]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009d14:	e003      	b.n	8009d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009d16:	887b      	ldrh	r3, [r7, #2]
 8009d18:	041a      	lsls	r2, r3, #16
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	619a      	str	r2, [r3, #24]
}
 8009d1e:	bf00      	nop
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	4603      	mov	r3, r0
 8009d32:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009d3c:	88fb      	ldrh	r3, [r7, #6]
 8009d3e:	4013      	ands	r3, r2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d008      	beq.n	8009d56 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d48:	88fb      	ldrh	r3, [r7, #6]
 8009d4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009d4e:	88fb      	ldrh	r3, [r7, #6]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fa fce1 	bl	8004718 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009d56:	bf00      	nop
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d68:	4b19      	ldr	r3, [pc, #100]	; (8009dd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b04      	cmp	r3, #4
 8009d72:	d00a      	beq.n	8009d8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d74:	4b16      	ldr	r3, [pc, #88]	; (8009dd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f003 0307 	and.w	r3, r3, #7
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d001      	beq.n	8009d86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e01f      	b.n	8009dc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	e01d      	b.n	8009dc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009d8a:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	f023 0207 	bic.w	r2, r3, #7
 8009d92:	490f      	ldr	r1, [pc, #60]	; (8009dd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009d9a:	f7fc fc6d 	bl	8006678 <HAL_GetTick>
 8009d9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009da0:	e009      	b.n	8009db6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009da2:	f7fc fc69 	bl	8006678 <HAL_GetTick>
 8009da6:	4602      	mov	r2, r0
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009db0:	d901      	bls.n	8009db6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e007      	b.n	8009dc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009db6:	4b06      	ldr	r3, [pc, #24]	; (8009dd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dc2:	d1ee      	bne.n	8009da2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	58024800 	.word	0x58024800

08009dd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08c      	sub	sp, #48	; 0x30
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d102      	bne.n	8009de8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	f000 bc1c 	b.w	800a620 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 8087 	beq.w	8009f04 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009df6:	4b9e      	ldr	r3, [pc, #632]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e00:	4b9b      	ldr	r3, [pc, #620]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e04:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	2b10      	cmp	r3, #16
 8009e0a:	d007      	beq.n	8009e1c <HAL_RCC_OscConfig+0x48>
 8009e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0e:	2b18      	cmp	r3, #24
 8009e10:	d110      	bne.n	8009e34 <HAL_RCC_OscConfig+0x60>
 8009e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e14:	f003 0303 	and.w	r3, r3, #3
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d10b      	bne.n	8009e34 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e1c:	4b94      	ldr	r3, [pc, #592]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d06c      	beq.n	8009f02 <HAL_RCC_OscConfig+0x12e>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d168      	bne.n	8009f02 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e3f5      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e3c:	d106      	bne.n	8009e4c <HAL_RCC_OscConfig+0x78>
 8009e3e:	4b8c      	ldr	r3, [pc, #560]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a8b      	ldr	r2, [pc, #556]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	e02e      	b.n	8009eaa <HAL_RCC_OscConfig+0xd6>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10c      	bne.n	8009e6e <HAL_RCC_OscConfig+0x9a>
 8009e54:	4b86      	ldr	r3, [pc, #536]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a85      	ldr	r2, [pc, #532]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	4b83      	ldr	r3, [pc, #524]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a82      	ldr	r2, [pc, #520]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	e01d      	b.n	8009eaa <HAL_RCC_OscConfig+0xd6>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e76:	d10c      	bne.n	8009e92 <HAL_RCC_OscConfig+0xbe>
 8009e78:	4b7d      	ldr	r3, [pc, #500]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a7c      	ldr	r2, [pc, #496]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	4b7a      	ldr	r3, [pc, #488]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a79      	ldr	r2, [pc, #484]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	e00b      	b.n	8009eaa <HAL_RCC_OscConfig+0xd6>
 8009e92:	4b77      	ldr	r3, [pc, #476]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a76      	ldr	r2, [pc, #472]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	4b74      	ldr	r3, [pc, #464]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a73      	ldr	r2, [pc, #460]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009ea4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ea8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d013      	beq.n	8009eda <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eb2:	f7fc fbe1 	bl	8006678 <HAL_GetTick>
 8009eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009eb8:	e008      	b.n	8009ecc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009eba:	f7fc fbdd 	bl	8006678 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	2b64      	cmp	r3, #100	; 0x64
 8009ec6:	d901      	bls.n	8009ecc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e3a9      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ecc:	4b68      	ldr	r3, [pc, #416]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0f0      	beq.n	8009eba <HAL_RCC_OscConfig+0xe6>
 8009ed8:	e014      	b.n	8009f04 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eda:	f7fc fbcd 	bl	8006678 <HAL_GetTick>
 8009ede:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ee0:	e008      	b.n	8009ef4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ee2:	f7fc fbc9 	bl	8006678 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	2b64      	cmp	r3, #100	; 0x64
 8009eee:	d901      	bls.n	8009ef4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e395      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ef4:	4b5e      	ldr	r3, [pc, #376]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1f0      	bne.n	8009ee2 <HAL_RCC_OscConfig+0x10e>
 8009f00:	e000      	b.n	8009f04 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f02:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0302 	and.w	r3, r3, #2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80ca 	beq.w	800a0a6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f12:	4b57      	ldr	r3, [pc, #348]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f1a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f1c:	4b54      	ldr	r3, [pc, #336]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f20:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d007      	beq.n	8009f38 <HAL_RCC_OscConfig+0x164>
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	2b18      	cmp	r3, #24
 8009f2c:	d156      	bne.n	8009fdc <HAL_RCC_OscConfig+0x208>
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	f003 0303 	and.w	r3, r3, #3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d151      	bne.n	8009fdc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f38:	4b4d      	ldr	r3, [pc, #308]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d005      	beq.n	8009f50 <HAL_RCC_OscConfig+0x17c>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e367      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f50:	4b47      	ldr	r3, [pc, #284]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f023 0219 	bic.w	r2, r3, #25
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	4944      	ldr	r1, [pc, #272]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f62:	f7fc fb89 	bl	8006678 <HAL_GetTick>
 8009f66:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f68:	e008      	b.n	8009f7c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f6a:	f7fc fb85 	bl	8006678 <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d901      	bls.n	8009f7c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e351      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f7c:	4b3c      	ldr	r3, [pc, #240]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0f0      	beq.n	8009f6a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f88:	f7fc fba6 	bl	80066d8 <HAL_GetREVID>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d817      	bhi.n	8009fc6 <HAL_RCC_OscConfig+0x1f2>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	2b40      	cmp	r3, #64	; 0x40
 8009f9c:	d108      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x1dc>
 8009f9e:	4b34      	ldr	r3, [pc, #208]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009fa6:	4a32      	ldr	r2, [pc, #200]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fae:	e07a      	b.n	800a0a6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fb0:	4b2f      	ldr	r3, [pc, #188]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	031b      	lsls	r3, r3, #12
 8009fbe:	492c      	ldr	r1, [pc, #176]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fc4:	e06f      	b.n	800a0a6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fc6:	4b2a      	ldr	r3, [pc, #168]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	061b      	lsls	r3, r3, #24
 8009fd4:	4926      	ldr	r1, [pc, #152]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fda:	e064      	b.n	800a0a6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d047      	beq.n	800a074 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009fe4:	4b22      	ldr	r3, [pc, #136]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f023 0219 	bic.w	r2, r3, #25
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	491f      	ldr	r1, [pc, #124]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ff6:	f7fc fb3f 	bl	8006678 <HAL_GetTick>
 8009ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ffc:	e008      	b.n	800a010 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ffe:	f7fc fb3b 	bl	8006678 <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d901      	bls.n	800a010 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e307      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a010:	4b17      	ldr	r3, [pc, #92]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0f0      	beq.n	8009ffe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a01c:	f7fc fb5c 	bl	80066d8 <HAL_GetREVID>
 800a020:	4603      	mov	r3, r0
 800a022:	f241 0203 	movw	r2, #4099	; 0x1003
 800a026:	4293      	cmp	r3, r2
 800a028:	d817      	bhi.n	800a05a <HAL_RCC_OscConfig+0x286>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	2b40      	cmp	r3, #64	; 0x40
 800a030:	d108      	bne.n	800a044 <HAL_RCC_OscConfig+0x270>
 800a032:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a03a:	4a0d      	ldr	r2, [pc, #52]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 800a03c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a040:	6053      	str	r3, [r2, #4]
 800a042:	e030      	b.n	800a0a6 <HAL_RCC_OscConfig+0x2d2>
 800a044:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	031b      	lsls	r3, r3, #12
 800a052:	4907      	ldr	r1, [pc, #28]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 800a054:	4313      	orrs	r3, r2
 800a056:	604b      	str	r3, [r1, #4]
 800a058:	e025      	b.n	800a0a6 <HAL_RCC_OscConfig+0x2d2>
 800a05a:	4b05      	ldr	r3, [pc, #20]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	061b      	lsls	r3, r3, #24
 800a068:	4901      	ldr	r1, [pc, #4]	; (800a070 <HAL_RCC_OscConfig+0x29c>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	604b      	str	r3, [r1, #4]
 800a06e:	e01a      	b.n	800a0a6 <HAL_RCC_OscConfig+0x2d2>
 800a070:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a074:	4b9e      	ldr	r3, [pc, #632]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a9d      	ldr	r2, [pc, #628]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a07a:	f023 0301 	bic.w	r3, r3, #1
 800a07e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a080:	f7fc fafa 	bl	8006678 <HAL_GetTick>
 800a084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a086:	e008      	b.n	800a09a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a088:	f7fc faf6 	bl	8006678 <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b02      	cmp	r3, #2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e2c2      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a09a:	4b95      	ldr	r3, [pc, #596]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0304 	and.w	r3, r3, #4
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1f0      	bne.n	800a088 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0310 	and.w	r3, r3, #16
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 80a9 	beq.w	800a206 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0b4:	4b8e      	ldr	r3, [pc, #568]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0be:	4b8c      	ldr	r3, [pc, #560]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	d007      	beq.n	800a0da <HAL_RCC_OscConfig+0x306>
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	2b18      	cmp	r3, #24
 800a0ce:	d13a      	bne.n	800a146 <HAL_RCC_OscConfig+0x372>
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f003 0303 	and.w	r3, r3, #3
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d135      	bne.n	800a146 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0da:	4b85      	ldr	r3, [pc, #532]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d005      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x31e>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	2b80      	cmp	r3, #128	; 0x80
 800a0ec:	d001      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e296      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0f2:	f7fc faf1 	bl	80066d8 <HAL_GetREVID>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d817      	bhi.n	800a130 <HAL_RCC_OscConfig+0x35c>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	2b20      	cmp	r3, #32
 800a106:	d108      	bne.n	800a11a <HAL_RCC_OscConfig+0x346>
 800a108:	4b79      	ldr	r3, [pc, #484]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a110:	4a77      	ldr	r2, [pc, #476]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a112:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a116:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a118:	e075      	b.n	800a206 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a11a:	4b75      	ldr	r3, [pc, #468]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	069b      	lsls	r3, r3, #26
 800a128:	4971      	ldr	r1, [pc, #452]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a12a:	4313      	orrs	r3, r2
 800a12c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a12e:	e06a      	b.n	800a206 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a130:	4b6f      	ldr	r3, [pc, #444]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	061b      	lsls	r3, r3, #24
 800a13e:	496c      	ldr	r1, [pc, #432]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a140:	4313      	orrs	r3, r2
 800a142:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a144:	e05f      	b.n	800a206 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d042      	beq.n	800a1d4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a14e:	4b68      	ldr	r3, [pc, #416]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a67      	ldr	r2, [pc, #412]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a15a:	f7fc fa8d 	bl	8006678 <HAL_GetTick>
 800a15e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a160:	e008      	b.n	800a174 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a162:	f7fc fa89 	bl	8006678 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d901      	bls.n	800a174 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e255      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a174:	4b5e      	ldr	r3, [pc, #376]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0f0      	beq.n	800a162 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a180:	f7fc faaa 	bl	80066d8 <HAL_GetREVID>
 800a184:	4603      	mov	r3, r0
 800a186:	f241 0203 	movw	r2, #4099	; 0x1003
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d817      	bhi.n	800a1be <HAL_RCC_OscConfig+0x3ea>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	2b20      	cmp	r3, #32
 800a194:	d108      	bne.n	800a1a8 <HAL_RCC_OscConfig+0x3d4>
 800a196:	4b56      	ldr	r3, [pc, #344]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a19e:	4a54      	ldr	r2, [pc, #336]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a1a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1a4:	6053      	str	r3, [r2, #4]
 800a1a6:	e02e      	b.n	800a206 <HAL_RCC_OscConfig+0x432>
 800a1a8:	4b51      	ldr	r3, [pc, #324]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a1b      	ldr	r3, [r3, #32]
 800a1b4:	069b      	lsls	r3, r3, #26
 800a1b6:	494e      	ldr	r1, [pc, #312]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	604b      	str	r3, [r1, #4]
 800a1bc:	e023      	b.n	800a206 <HAL_RCC_OscConfig+0x432>
 800a1be:	4b4c      	ldr	r3, [pc, #304]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	061b      	lsls	r3, r3, #24
 800a1cc:	4948      	ldr	r1, [pc, #288]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	60cb      	str	r3, [r1, #12]
 800a1d2:	e018      	b.n	800a206 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1d4:	4b46      	ldr	r3, [pc, #280]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a45      	ldr	r2, [pc, #276]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a1da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1e0:	f7fc fa4a 	bl	8006678 <HAL_GetTick>
 800a1e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1e6:	e008      	b.n	800a1fa <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a1e8:	f7fc fa46 	bl	8006678 <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d901      	bls.n	800a1fa <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e212      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1fa:	4b3d      	ldr	r3, [pc, #244]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1f0      	bne.n	800a1e8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0308 	and.w	r3, r3, #8
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d036      	beq.n	800a280 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d019      	beq.n	800a24e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a21a:	4b35      	ldr	r3, [pc, #212]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a21e:	4a34      	ldr	r2, [pc, #208]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a220:	f043 0301 	orr.w	r3, r3, #1
 800a224:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a226:	f7fc fa27 	bl	8006678 <HAL_GetTick>
 800a22a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a22c:	e008      	b.n	800a240 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a22e:	f7fc fa23 	bl	8006678 <HAL_GetTick>
 800a232:	4602      	mov	r2, r0
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d901      	bls.n	800a240 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	e1ef      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a240:	4b2b      	ldr	r3, [pc, #172]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d0f0      	beq.n	800a22e <HAL_RCC_OscConfig+0x45a>
 800a24c:	e018      	b.n	800a280 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a24e:	4b28      	ldr	r3, [pc, #160]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a252:	4a27      	ldr	r2, [pc, #156]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a254:	f023 0301 	bic.w	r3, r3, #1
 800a258:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a25a:	f7fc fa0d 	bl	8006678 <HAL_GetTick>
 800a25e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a260:	e008      	b.n	800a274 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a262:	f7fc fa09 	bl	8006678 <HAL_GetTick>
 800a266:	4602      	mov	r2, r0
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d901      	bls.n	800a274 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800a270:	2303      	movs	r3, #3
 800a272:	e1d5      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a274:	4b1e      	ldr	r3, [pc, #120]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a278:	f003 0302 	and.w	r3, r3, #2
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1f0      	bne.n	800a262 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0320 	and.w	r3, r3, #32
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d039      	beq.n	800a300 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d019      	beq.n	800a2c8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a294:	4b16      	ldr	r3, [pc, #88]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a15      	ldr	r2, [pc, #84]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a29a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a29e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2a0:	f7fc f9ea 	bl	8006678 <HAL_GetTick>
 800a2a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2a6:	e008      	b.n	800a2ba <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a2a8:	f7fc f9e6 	bl	8006678 <HAL_GetTick>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d901      	bls.n	800a2ba <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	e1b2      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2ba:	4b0d      	ldr	r3, [pc, #52]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d0f0      	beq.n	800a2a8 <HAL_RCC_OscConfig+0x4d4>
 800a2c6:	e01b      	b.n	800a300 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2c8:	4b09      	ldr	r3, [pc, #36]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a08      	ldr	r2, [pc, #32]	; (800a2f0 <HAL_RCC_OscConfig+0x51c>)
 800a2ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2d4:	f7fc f9d0 	bl	8006678 <HAL_GetTick>
 800a2d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2da:	e00b      	b.n	800a2f4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a2dc:	f7fc f9cc 	bl	8006678 <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d904      	bls.n	800a2f4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e198      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
 800a2ee:	bf00      	nop
 800a2f0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2f4:	4ba3      	ldr	r3, [pc, #652]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1ed      	bne.n	800a2dc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 8081 	beq.w	800a410 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a30e:	4b9e      	ldr	r3, [pc, #632]	; (800a588 <HAL_RCC_OscConfig+0x7b4>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a9d      	ldr	r2, [pc, #628]	; (800a588 <HAL_RCC_OscConfig+0x7b4>)
 800a314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a318:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a31a:	f7fc f9ad 	bl	8006678 <HAL_GetTick>
 800a31e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a320:	e008      	b.n	800a334 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a322:	f7fc f9a9 	bl	8006678 <HAL_GetTick>
 800a326:	4602      	mov	r2, r0
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	2b64      	cmp	r3, #100	; 0x64
 800a32e:	d901      	bls.n	800a334 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e175      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a334:	4b94      	ldr	r3, [pc, #592]	; (800a588 <HAL_RCC_OscConfig+0x7b4>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0f0      	beq.n	800a322 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d106      	bne.n	800a356 <HAL_RCC_OscConfig+0x582>
 800a348:	4b8e      	ldr	r3, [pc, #568]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a34a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a34c:	4a8d      	ldr	r2, [pc, #564]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a34e:	f043 0301 	orr.w	r3, r3, #1
 800a352:	6713      	str	r3, [r2, #112]	; 0x70
 800a354:	e02d      	b.n	800a3b2 <HAL_RCC_OscConfig+0x5de>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10c      	bne.n	800a378 <HAL_RCC_OscConfig+0x5a4>
 800a35e:	4b89      	ldr	r3, [pc, #548]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a362:	4a88      	ldr	r2, [pc, #544]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a364:	f023 0301 	bic.w	r3, r3, #1
 800a368:	6713      	str	r3, [r2, #112]	; 0x70
 800a36a:	4b86      	ldr	r3, [pc, #536]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a36e:	4a85      	ldr	r2, [pc, #532]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a370:	f023 0304 	bic.w	r3, r3, #4
 800a374:	6713      	str	r3, [r2, #112]	; 0x70
 800a376:	e01c      	b.n	800a3b2 <HAL_RCC_OscConfig+0x5de>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	2b05      	cmp	r3, #5
 800a37e:	d10c      	bne.n	800a39a <HAL_RCC_OscConfig+0x5c6>
 800a380:	4b80      	ldr	r3, [pc, #512]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a384:	4a7f      	ldr	r2, [pc, #508]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a386:	f043 0304 	orr.w	r3, r3, #4
 800a38a:	6713      	str	r3, [r2, #112]	; 0x70
 800a38c:	4b7d      	ldr	r3, [pc, #500]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a390:	4a7c      	ldr	r2, [pc, #496]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a392:	f043 0301 	orr.w	r3, r3, #1
 800a396:	6713      	str	r3, [r2, #112]	; 0x70
 800a398:	e00b      	b.n	800a3b2 <HAL_RCC_OscConfig+0x5de>
 800a39a:	4b7a      	ldr	r3, [pc, #488]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39e:	4a79      	ldr	r2, [pc, #484]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a3a0:	f023 0301 	bic.w	r3, r3, #1
 800a3a4:	6713      	str	r3, [r2, #112]	; 0x70
 800a3a6:	4b77      	ldr	r3, [pc, #476]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3aa:	4a76      	ldr	r2, [pc, #472]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a3ac:	f023 0304 	bic.w	r3, r3, #4
 800a3b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d015      	beq.n	800a3e6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3ba:	f7fc f95d 	bl	8006678 <HAL_GetTick>
 800a3be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3c0:	e00a      	b.n	800a3d8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3c2:	f7fc f959 	bl	8006678 <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d901      	bls.n	800a3d8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e123      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3d8:	4b6a      	ldr	r3, [pc, #424]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3dc:	f003 0302 	and.w	r3, r3, #2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0ee      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x5ee>
 800a3e4:	e014      	b.n	800a410 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e6:	f7fc f947 	bl	8006678 <HAL_GetTick>
 800a3ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3ec:	e00a      	b.n	800a404 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3ee:	f7fc f943 	bl	8006678 <HAL_GetTick>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d901      	bls.n	800a404 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e10d      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a404:	4b5f      	ldr	r3, [pc, #380]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1ee      	bne.n	800a3ee <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 8102 	beq.w	800a61e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a41a:	4b5a      	ldr	r3, [pc, #360]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a422:	2b18      	cmp	r3, #24
 800a424:	f000 80bd 	beq.w	800a5a2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	f040 8095 	bne.w	800a55c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a432:	4b54      	ldr	r3, [pc, #336]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a53      	ldr	r2, [pc, #332]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a43c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a43e:	f7fc f91b 	bl	8006678 <HAL_GetTick>
 800a442:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a444:	e008      	b.n	800a458 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a446:	f7fc f917 	bl	8006678 <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	2b02      	cmp	r3, #2
 800a452:	d901      	bls.n	800a458 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e0e3      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a458:	4b4a      	ldr	r3, [pc, #296]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1f0      	bne.n	800a446 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a464:	4b47      	ldr	r3, [pc, #284]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a468:	4b48      	ldr	r3, [pc, #288]	; (800a58c <HAL_RCC_OscConfig+0x7b8>)
 800a46a:	4013      	ands	r3, r2
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a474:	0112      	lsls	r2, r2, #4
 800a476:	430a      	orrs	r2, r1
 800a478:	4942      	ldr	r1, [pc, #264]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	628b      	str	r3, [r1, #40]	; 0x28
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	3b01      	subs	r3, #1
 800a484:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a48c:	3b01      	subs	r3, #1
 800a48e:	025b      	lsls	r3, r3, #9
 800a490:	b29b      	uxth	r3, r3
 800a492:	431a      	orrs	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	3b01      	subs	r3, #1
 800a49a:	041b      	lsls	r3, r3, #16
 800a49c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	061b      	lsls	r3, r3, #24
 800a4aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4ae:	4935      	ldr	r1, [pc, #212]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a4b4:	4b33      	ldr	r3, [pc, #204]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b8:	4a32      	ldr	r2, [pc, #200]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4ba:	f023 0301 	bic.w	r3, r3, #1
 800a4be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4c0:	4b30      	ldr	r3, [pc, #192]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4c4:	4b32      	ldr	r3, [pc, #200]	; (800a590 <HAL_RCC_OscConfig+0x7bc>)
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4cc:	00d2      	lsls	r2, r2, #3
 800a4ce:	492d      	ldr	r1, [pc, #180]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4d4:	4b2b      	ldr	r3, [pc, #172]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	f023 020c 	bic.w	r2, r3, #12
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e0:	4928      	ldr	r1, [pc, #160]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a4e6:	4b27      	ldr	r3, [pc, #156]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ea:	f023 0202 	bic.w	r2, r3, #2
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f2:	4924      	ldr	r1, [pc, #144]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a4f8:	4b22      	ldr	r3, [pc, #136]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fc:	4a21      	ldr	r2, [pc, #132]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a4fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a504:	4b1f      	ldr	r3, [pc, #124]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	4a1e      	ldr	r2, [pc, #120]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a50a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a50e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a510:	4b1c      	ldr	r3, [pc, #112]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	4a1b      	ldr	r2, [pc, #108]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a51a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a51c:	4b19      	ldr	r3, [pc, #100]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a520:	4a18      	ldr	r2, [pc, #96]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a522:	f043 0301 	orr.w	r3, r3, #1
 800a526:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a528:	4b16      	ldr	r3, [pc, #88]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a15      	ldr	r2, [pc, #84]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a52e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a534:	f7fc f8a0 	bl	8006678 <HAL_GetTick>
 800a538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a53a:	e008      	b.n	800a54e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a53c:	f7fc f89c 	bl	8006678 <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	2b02      	cmp	r3, #2
 800a548:	d901      	bls.n	800a54e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e068      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a54e:	4b0d      	ldr	r3, [pc, #52]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0f0      	beq.n	800a53c <HAL_RCC_OscConfig+0x768>
 800a55a:	e060      	b.n	800a61e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a55c:	4b09      	ldr	r3, [pc, #36]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a08      	ldr	r2, [pc, #32]	; (800a584 <HAL_RCC_OscConfig+0x7b0>)
 800a562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a568:	f7fc f886 	bl	8006678 <HAL_GetTick>
 800a56c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a56e:	e011      	b.n	800a594 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a570:	f7fc f882 	bl	8006678 <HAL_GetTick>
 800a574:	4602      	mov	r2, r0
 800a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d90a      	bls.n	800a594 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e04e      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
 800a582:	bf00      	nop
 800a584:	58024400 	.word	0x58024400
 800a588:	58024800 	.word	0x58024800
 800a58c:	fffffc0c 	.word	0xfffffc0c
 800a590:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a594:	4b24      	ldr	r3, [pc, #144]	; (800a628 <HAL_RCC_OscConfig+0x854>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1e7      	bne.n	800a570 <HAL_RCC_OscConfig+0x79c>
 800a5a0:	e03d      	b.n	800a61e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a5a2:	4b21      	ldr	r3, [pc, #132]	; (800a628 <HAL_RCC_OscConfig+0x854>)
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5a8:	4b1f      	ldr	r3, [pc, #124]	; (800a628 <HAL_RCC_OscConfig+0x854>)
 800a5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d031      	beq.n	800a61a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f003 0203 	and.w	r2, r3, #3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d12a      	bne.n	800a61a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	091b      	lsrs	r3, r3, #4
 800a5c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d122      	bne.n	800a61a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5de:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d11a      	bne.n	800a61a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	0a5b      	lsrs	r3, r3, #9
 800a5e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d111      	bne.n	800a61a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	0c1b      	lsrs	r3, r3, #16
 800a5fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a602:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a604:	429a      	cmp	r2, r3
 800a606:	d108      	bne.n	800a61a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	0e1b      	lsrs	r3, r3, #24
 800a60c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a614:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a616:	429a      	cmp	r2, r3
 800a618:	d001      	beq.n	800a61e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e000      	b.n	800a620 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3730      	adds	r7, #48	; 0x30
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	58024400 	.word	0x58024400

0800a62c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e19c      	b.n	800a97a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a640:	4b8a      	ldr	r3, [pc, #552]	; (800a86c <HAL_RCC_ClockConfig+0x240>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 030f 	and.w	r3, r3, #15
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d910      	bls.n	800a670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a64e:	4b87      	ldr	r3, [pc, #540]	; (800a86c <HAL_RCC_ClockConfig+0x240>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f023 020f 	bic.w	r2, r3, #15
 800a656:	4985      	ldr	r1, [pc, #532]	; (800a86c <HAL_RCC_ClockConfig+0x240>)
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a65e:	4b83      	ldr	r3, [pc, #524]	; (800a86c <HAL_RCC_ClockConfig+0x240>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 030f 	and.w	r3, r3, #15
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d001      	beq.n	800a670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e184      	b.n	800a97a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0304 	and.w	r3, r3, #4
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d010      	beq.n	800a69e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	691a      	ldr	r2, [r3, #16]
 800a680:	4b7b      	ldr	r3, [pc, #492]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a688:	429a      	cmp	r2, r3
 800a68a:	d908      	bls.n	800a69e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a68c:	4b78      	ldr	r3, [pc, #480]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	4975      	ldr	r1, [pc, #468]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a69a:	4313      	orrs	r3, r2
 800a69c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0308 	and.w	r3, r3, #8
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d010      	beq.n	800a6cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	695a      	ldr	r2, [r3, #20]
 800a6ae:	4b70      	ldr	r3, [pc, #448]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d908      	bls.n	800a6cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a6ba:	4b6d      	ldr	r3, [pc, #436]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a6bc:	69db      	ldr	r3, [r3, #28]
 800a6be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	496a      	ldr	r1, [pc, #424]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0310 	and.w	r3, r3, #16
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d010      	beq.n	800a6fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	699a      	ldr	r2, [r3, #24]
 800a6dc:	4b64      	ldr	r3, [pc, #400]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d908      	bls.n	800a6fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a6e8:	4b61      	ldr	r3, [pc, #388]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	495e      	ldr	r1, [pc, #376]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0320 	and.w	r3, r3, #32
 800a702:	2b00      	cmp	r3, #0
 800a704:	d010      	beq.n	800a728 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	69da      	ldr	r2, [r3, #28]
 800a70a:	4b59      	ldr	r3, [pc, #356]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a712:	429a      	cmp	r2, r3
 800a714:	d908      	bls.n	800a728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a716:	4b56      	ldr	r3, [pc, #344]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	4953      	ldr	r1, [pc, #332]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a724:	4313      	orrs	r3, r2
 800a726:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0302 	and.w	r3, r3, #2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d010      	beq.n	800a756 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	4b4d      	ldr	r3, [pc, #308]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	f003 030f 	and.w	r3, r3, #15
 800a740:	429a      	cmp	r2, r3
 800a742:	d908      	bls.n	800a756 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a744:	4b4a      	ldr	r3, [pc, #296]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	f023 020f 	bic.w	r2, r3, #15
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	4947      	ldr	r1, [pc, #284]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a752:	4313      	orrs	r3, r2
 800a754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d055      	beq.n	800a80e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a762:	4b43      	ldr	r3, [pc, #268]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	4940      	ldr	r1, [pc, #256]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a770:	4313      	orrs	r3, r2
 800a772:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d107      	bne.n	800a78c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a77c:	4b3c      	ldr	r3, [pc, #240]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a784:	2b00      	cmp	r3, #0
 800a786:	d121      	bne.n	800a7cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	e0f6      	b.n	800a97a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	2b03      	cmp	r3, #3
 800a792:	d107      	bne.n	800a7a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a794:	4b36      	ldr	r3, [pc, #216]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d115      	bne.n	800a7cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e0ea      	b.n	800a97a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d107      	bne.n	800a7bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a7ac:	4b30      	ldr	r3, [pc, #192]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d109      	bne.n	800a7cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e0de      	b.n	800a97a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7bc:	4b2c      	ldr	r3, [pc, #176]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e0d6      	b.n	800a97a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a7cc:	4b28      	ldr	r3, [pc, #160]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	f023 0207 	bic.w	r2, r3, #7
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	4925      	ldr	r1, [pc, #148]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7de:	f7fb ff4b 	bl	8006678 <HAL_GetTick>
 800a7e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7e4:	e00a      	b.n	800a7fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7e6:	f7fb ff47 	bl	8006678 <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d901      	bls.n	800a7fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e0be      	b.n	800a97a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7fc:	4b1c      	ldr	r3, [pc, #112]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	00db      	lsls	r3, r3, #3
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d1eb      	bne.n	800a7e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0302 	and.w	r3, r3, #2
 800a816:	2b00      	cmp	r3, #0
 800a818:	d010      	beq.n	800a83c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68da      	ldr	r2, [r3, #12]
 800a81e:	4b14      	ldr	r3, [pc, #80]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	f003 030f 	and.w	r3, r3, #15
 800a826:	429a      	cmp	r2, r3
 800a828:	d208      	bcs.n	800a83c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a82a:	4b11      	ldr	r3, [pc, #68]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	f023 020f 	bic.w	r2, r3, #15
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	490e      	ldr	r1, [pc, #56]	; (800a870 <HAL_RCC_ClockConfig+0x244>)
 800a838:	4313      	orrs	r3, r2
 800a83a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a83c:	4b0b      	ldr	r3, [pc, #44]	; (800a86c <HAL_RCC_ClockConfig+0x240>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 030f 	and.w	r3, r3, #15
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	429a      	cmp	r2, r3
 800a848:	d214      	bcs.n	800a874 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a84a:	4b08      	ldr	r3, [pc, #32]	; (800a86c <HAL_RCC_ClockConfig+0x240>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f023 020f 	bic.w	r2, r3, #15
 800a852:	4906      	ldr	r1, [pc, #24]	; (800a86c <HAL_RCC_ClockConfig+0x240>)
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	4313      	orrs	r3, r2
 800a858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a85a:	4b04      	ldr	r3, [pc, #16]	; (800a86c <HAL_RCC_ClockConfig+0x240>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	429a      	cmp	r2, r3
 800a866:	d005      	beq.n	800a874 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e086      	b.n	800a97a <HAL_RCC_ClockConfig+0x34e>
 800a86c:	52002000 	.word	0x52002000
 800a870:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0304 	and.w	r3, r3, #4
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d010      	beq.n	800a8a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	691a      	ldr	r2, [r3, #16]
 800a884:	4b3f      	ldr	r3, [pc, #252]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d208      	bcs.n	800a8a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a890:	4b3c      	ldr	r3, [pc, #240]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	4939      	ldr	r1, [pc, #228]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0308 	and.w	r3, r3, #8
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d010      	beq.n	800a8d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	695a      	ldr	r2, [r3, #20]
 800a8b2:	4b34      	ldr	r3, [pc, #208]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d208      	bcs.n	800a8d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8be:	4b31      	ldr	r3, [pc, #196]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	492e      	ldr	r1, [pc, #184]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0310 	and.w	r3, r3, #16
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d010      	beq.n	800a8fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	699a      	ldr	r2, [r3, #24]
 800a8e0:	4b28      	ldr	r3, [pc, #160]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d208      	bcs.n	800a8fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a8ec:	4b25      	ldr	r3, [pc, #148]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a8ee:	69db      	ldr	r3, [r3, #28]
 800a8f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	4922      	ldr	r1, [pc, #136]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0320 	and.w	r3, r3, #32
 800a906:	2b00      	cmp	r3, #0
 800a908:	d010      	beq.n	800a92c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	69da      	ldr	r2, [r3, #28]
 800a90e:	4b1d      	ldr	r3, [pc, #116]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a916:	429a      	cmp	r2, r3
 800a918:	d208      	bcs.n	800a92c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a91a:	4b1a      	ldr	r3, [pc, #104]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	4917      	ldr	r1, [pc, #92]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a928:	4313      	orrs	r3, r2
 800a92a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a92c:	f000 f834 	bl	800a998 <HAL_RCC_GetSysClockFreq>
 800a930:	4602      	mov	r2, r0
 800a932:	4b14      	ldr	r3, [pc, #80]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	0a1b      	lsrs	r3, r3, #8
 800a938:	f003 030f 	and.w	r3, r3, #15
 800a93c:	4912      	ldr	r1, [pc, #72]	; (800a988 <HAL_RCC_ClockConfig+0x35c>)
 800a93e:	5ccb      	ldrb	r3, [r1, r3]
 800a940:	f003 031f 	and.w	r3, r3, #31
 800a944:	fa22 f303 	lsr.w	r3, r2, r3
 800a948:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a94a:	4b0e      	ldr	r3, [pc, #56]	; (800a984 <HAL_RCC_ClockConfig+0x358>)
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	f003 030f 	and.w	r3, r3, #15
 800a952:	4a0d      	ldr	r2, [pc, #52]	; (800a988 <HAL_RCC_ClockConfig+0x35c>)
 800a954:	5cd3      	ldrb	r3, [r2, r3]
 800a956:	f003 031f 	and.w	r3, r3, #31
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	fa22 f303 	lsr.w	r3, r2, r3
 800a960:	4a0a      	ldr	r2, [pc, #40]	; (800a98c <HAL_RCC_ClockConfig+0x360>)
 800a962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a964:	4a0a      	ldr	r2, [pc, #40]	; (800a990 <HAL_RCC_ClockConfig+0x364>)
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a96a:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <HAL_RCC_ClockConfig+0x368>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fb fe38 	bl	80065e4 <HAL_InitTick>
 800a974:	4603      	mov	r3, r0
 800a976:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	58024400 	.word	0x58024400
 800a988:	080140b4 	.word	0x080140b4
 800a98c:	2400022c 	.word	0x2400022c
 800a990:	24000228 	.word	0x24000228
 800a994:	24000230 	.word	0x24000230

0800a998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a998:	b480      	push	{r7}
 800a99a:	b089      	sub	sp, #36	; 0x24
 800a99c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a99e:	4bb3      	ldr	r3, [pc, #716]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9a6:	2b18      	cmp	r3, #24
 800a9a8:	f200 8155 	bhi.w	800ac56 <HAL_RCC_GetSysClockFreq+0x2be>
 800a9ac:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b2:	bf00      	nop
 800a9b4:	0800aa19 	.word	0x0800aa19
 800a9b8:	0800ac57 	.word	0x0800ac57
 800a9bc:	0800ac57 	.word	0x0800ac57
 800a9c0:	0800ac57 	.word	0x0800ac57
 800a9c4:	0800ac57 	.word	0x0800ac57
 800a9c8:	0800ac57 	.word	0x0800ac57
 800a9cc:	0800ac57 	.word	0x0800ac57
 800a9d0:	0800ac57 	.word	0x0800ac57
 800a9d4:	0800aa3f 	.word	0x0800aa3f
 800a9d8:	0800ac57 	.word	0x0800ac57
 800a9dc:	0800ac57 	.word	0x0800ac57
 800a9e0:	0800ac57 	.word	0x0800ac57
 800a9e4:	0800ac57 	.word	0x0800ac57
 800a9e8:	0800ac57 	.word	0x0800ac57
 800a9ec:	0800ac57 	.word	0x0800ac57
 800a9f0:	0800ac57 	.word	0x0800ac57
 800a9f4:	0800aa45 	.word	0x0800aa45
 800a9f8:	0800ac57 	.word	0x0800ac57
 800a9fc:	0800ac57 	.word	0x0800ac57
 800aa00:	0800ac57 	.word	0x0800ac57
 800aa04:	0800ac57 	.word	0x0800ac57
 800aa08:	0800ac57 	.word	0x0800ac57
 800aa0c:	0800ac57 	.word	0x0800ac57
 800aa10:	0800ac57 	.word	0x0800ac57
 800aa14:	0800aa4b 	.word	0x0800aa4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa18:	4b94      	ldr	r3, [pc, #592]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 0320 	and.w	r3, r3, #32
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa24:	4b91      	ldr	r3, [pc, #580]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	08db      	lsrs	r3, r3, #3
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	4a90      	ldr	r2, [pc, #576]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
 800aa34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800aa36:	e111      	b.n	800ac5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa38:	4b8d      	ldr	r3, [pc, #564]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa3a:	61bb      	str	r3, [r7, #24]
    break;
 800aa3c:	e10e      	b.n	800ac5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800aa3e:	4b8d      	ldr	r3, [pc, #564]	; (800ac74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa40:	61bb      	str	r3, [r7, #24]
    break;
 800aa42:	e10b      	b.n	800ac5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800aa44:	4b8c      	ldr	r3, [pc, #560]	; (800ac78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aa46:	61bb      	str	r3, [r7, #24]
    break;
 800aa48:	e108      	b.n	800ac5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa4a:	4b88      	ldr	r3, [pc, #544]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4e:	f003 0303 	and.w	r3, r3, #3
 800aa52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800aa54:	4b85      	ldr	r3, [pc, #532]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa58:	091b      	lsrs	r3, r3, #4
 800aa5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aa60:	4b82      	ldr	r3, [pc, #520]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aa6a:	4b80      	ldr	r3, [pc, #512]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa6e:	08db      	lsrs	r3, r3, #3
 800aa70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	fb02 f303 	mul.w	r3, r2, r3
 800aa7a:	ee07 3a90 	vmov	s15, r3
 800aa7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 80e1 	beq.w	800ac50 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	f000 8083 	beq.w	800ab9c <HAL_RCC_GetSysClockFreq+0x204>
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	f200 80a1 	bhi.w	800abe0 <HAL_RCC_GetSysClockFreq+0x248>
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d003      	beq.n	800aaac <HAL_RCC_GetSysClockFreq+0x114>
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d056      	beq.n	800ab58 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aaaa:	e099      	b.n	800abe0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaac:	4b6f      	ldr	r3, [pc, #444]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0320 	and.w	r3, r3, #32
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d02d      	beq.n	800ab14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aab8:	4b6c      	ldr	r3, [pc, #432]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	08db      	lsrs	r3, r3, #3
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	4a6b      	ldr	r2, [pc, #428]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aac4:	fa22 f303 	lsr.w	r3, r2, r3
 800aac8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	ee07 3a90 	vmov	s15, r3
 800aad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae2:	4b62      	ldr	r3, [pc, #392]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaf6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ab12:	e087      	b.n	800ac24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ac80 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab26:	4b51      	ldr	r3, [pc, #324]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab2e:	ee07 3a90 	vmov	s15, r3
 800ab32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab36:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab56:	e065      	b.n	800ac24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab62:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ac84 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab6a:	4b40      	ldr	r3, [pc, #256]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab9a:	e043      	b.n	800ac24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	ee07 3a90 	vmov	s15, r3
 800aba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ac88 <HAL_RCC_GetSysClockFreq+0x2f0>
 800abaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abae:	4b2f      	ldr	r3, [pc, #188]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abbe:	ed97 6a02 	vldr	s12, [r7, #8]
 800abc2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800abc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abde:	e021      	b.n	800ac24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abea:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ac84 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf2:	4b1e      	ldr	r3, [pc, #120]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac02:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ac24:	4b11      	ldr	r3, [pc, #68]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac28:	0a5b      	lsrs	r3, r3, #9
 800ac2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac2e:	3301      	adds	r3, #1
 800ac30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac48:	ee17 3a90 	vmov	r3, s15
 800ac4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ac4e:	e005      	b.n	800ac5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ac50:	2300      	movs	r3, #0
 800ac52:	61bb      	str	r3, [r7, #24]
    break;
 800ac54:	e002      	b.n	800ac5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ac56:	4b07      	ldr	r3, [pc, #28]	; (800ac74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac58:	61bb      	str	r3, [r7, #24]
    break;
 800ac5a:	bf00      	nop
  }

  return sysclockfreq;
 800ac5c:	69bb      	ldr	r3, [r7, #24]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3724      	adds	r7, #36	; 0x24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	58024400 	.word	0x58024400
 800ac70:	03d09000 	.word	0x03d09000
 800ac74:	003d0900 	.word	0x003d0900
 800ac78:	02dc6c00 	.word	0x02dc6c00
 800ac7c:	46000000 	.word	0x46000000
 800ac80:	4c742400 	.word	0x4c742400
 800ac84:	4a742400 	.word	0x4a742400
 800ac88:	4c371b00 	.word	0x4c371b00

0800ac8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac92:	f7ff fe81 	bl	800a998 <HAL_RCC_GetSysClockFreq>
 800ac96:	4602      	mov	r2, r0
 800ac98:	4b10      	ldr	r3, [pc, #64]	; (800acdc <HAL_RCC_GetHCLKFreq+0x50>)
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	0a1b      	lsrs	r3, r3, #8
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	490f      	ldr	r1, [pc, #60]	; (800ace0 <HAL_RCC_GetHCLKFreq+0x54>)
 800aca4:	5ccb      	ldrb	r3, [r1, r3]
 800aca6:	f003 031f 	and.w	r3, r3, #31
 800acaa:	fa22 f303 	lsr.w	r3, r2, r3
 800acae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800acb0:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <HAL_RCC_GetHCLKFreq+0x50>)
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	f003 030f 	and.w	r3, r3, #15
 800acb8:	4a09      	ldr	r2, [pc, #36]	; (800ace0 <HAL_RCC_GetHCLKFreq+0x54>)
 800acba:	5cd3      	ldrb	r3, [r2, r3]
 800acbc:	f003 031f 	and.w	r3, r3, #31
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	fa22 f303 	lsr.w	r3, r2, r3
 800acc6:	4a07      	ldr	r2, [pc, #28]	; (800ace4 <HAL_RCC_GetHCLKFreq+0x58>)
 800acc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800acca:	4a07      	ldr	r2, [pc, #28]	; (800ace8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800acd0:	4b04      	ldr	r3, [pc, #16]	; (800ace4 <HAL_RCC_GetHCLKFreq+0x58>)
 800acd2:	681b      	ldr	r3, [r3, #0]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	58024400 	.word	0x58024400
 800ace0:	080140b4 	.word	0x080140b4
 800ace4:	2400022c 	.word	0x2400022c
 800ace8:	24000228 	.word	0x24000228

0800acec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800acf0:	f7ff ffcc 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800acf4:	4602      	mov	r2, r0
 800acf6:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	091b      	lsrs	r3, r3, #4
 800acfc:	f003 0307 	and.w	r3, r3, #7
 800ad00:	4904      	ldr	r1, [pc, #16]	; (800ad14 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad02:	5ccb      	ldrb	r3, [r1, r3]
 800ad04:	f003 031f 	and.w	r3, r3, #31
 800ad08:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	58024400 	.word	0x58024400
 800ad14:	080140b4 	.word	0x080140b4

0800ad18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad1c:	f7ff ffb6 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800ad20:	4602      	mov	r2, r0
 800ad22:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad24:	69db      	ldr	r3, [r3, #28]
 800ad26:	0a1b      	lsrs	r3, r3, #8
 800ad28:	f003 0307 	and.w	r3, r3, #7
 800ad2c:	4904      	ldr	r1, [pc, #16]	; (800ad40 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad2e:	5ccb      	ldrb	r3, [r1, r3]
 800ad30:	f003 031f 	and.w	r3, r3, #31
 800ad34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	58024400 	.word	0x58024400
 800ad40:	080140b4 	.word	0x080140b4

0800ad44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad50:	2300      	movs	r3, #0
 800ad52:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d03f      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad68:	d02a      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ad6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad6e:	d824      	bhi.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad74:	d018      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad7a:	d81e      	bhi.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ad80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad84:	d007      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ad86:	e018      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad88:	4bab      	ldr	r3, [pc, #684]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8c:	4aaa      	ldr	r2, [pc, #680]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ad94:	e015      	b.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3304      	adds	r3, #4
 800ad9a:	2102      	movs	r1, #2
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f001 f9cf 	bl	800c140 <RCCEx_PLL2_Config>
 800ada2:	4603      	mov	r3, r0
 800ada4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ada6:	e00c      	b.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	3324      	adds	r3, #36	; 0x24
 800adac:	2102      	movs	r1, #2
 800adae:	4618      	mov	r0, r3
 800adb0:	f001 fa78 	bl	800c2a4 <RCCEx_PLL3_Config>
 800adb4:	4603      	mov	r3, r0
 800adb6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800adb8:	e003      	b.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	75fb      	strb	r3, [r7, #23]
      break;
 800adbe:	e000      	b.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800adc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d109      	bne.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800adc8:	4b9b      	ldr	r3, [pc, #620]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800add4:	4998      	ldr	r1, [pc, #608]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800add6:	4313      	orrs	r3, r2
 800add8:	650b      	str	r3, [r1, #80]	; 0x50
 800adda:	e001      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800addc:	7dfb      	ldrb	r3, [r7, #23]
 800adde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d03d      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	d826      	bhi.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800adf4:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800adf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfa:	bf00      	nop
 800adfc:	0800ae11 	.word	0x0800ae11
 800ae00:	0800ae1f 	.word	0x0800ae1f
 800ae04:	0800ae31 	.word	0x0800ae31
 800ae08:	0800ae49 	.word	0x0800ae49
 800ae0c:	0800ae49 	.word	0x0800ae49
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae10:	4b89      	ldr	r3, [pc, #548]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	4a88      	ldr	r2, [pc, #544]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae1c:	e015      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3304      	adds	r3, #4
 800ae22:	2100      	movs	r1, #0
 800ae24:	4618      	mov	r0, r3
 800ae26:	f001 f98b 	bl	800c140 <RCCEx_PLL2_Config>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae2e:	e00c      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	3324      	adds	r3, #36	; 0x24
 800ae34:	2100      	movs	r1, #0
 800ae36:	4618      	mov	r0, r3
 800ae38:	f001 fa34 	bl	800c2a4 <RCCEx_PLL3_Config>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae40:	e003      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	75fb      	strb	r3, [r7, #23]
      break;
 800ae46:	e000      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ae48:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d109      	bne.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae50:	4b79      	ldr	r3, [pc, #484]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae54:	f023 0207 	bic.w	r2, r3, #7
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae5c:	4976      	ldr	r1, [pc, #472]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	650b      	str	r3, [r1, #80]	; 0x50
 800ae62:	e001      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d042      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae7c:	d02b      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ae7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae82:	d825      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ae84:	2bc0      	cmp	r3, #192	; 0xc0
 800ae86:	d028      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ae88:	2bc0      	cmp	r3, #192	; 0xc0
 800ae8a:	d821      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ae8c:	2b80      	cmp	r3, #128	; 0x80
 800ae8e:	d016      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ae90:	2b80      	cmp	r3, #128	; 0x80
 800ae92:	d81d      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ae98:	2b40      	cmp	r3, #64	; 0x40
 800ae9a:	d007      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x168>
 800ae9c:	e018      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae9e:	4b66      	ldr	r3, [pc, #408]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea2:	4a65      	ldr	r2, [pc, #404]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aeaa:	e017      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f001 f944 	bl	800c140 <RCCEx_PLL2_Config>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aebc:	e00e      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3324      	adds	r3, #36	; 0x24
 800aec2:	2100      	movs	r1, #0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 f9ed 	bl	800c2a4 <RCCEx_PLL3_Config>
 800aeca:	4603      	mov	r3, r0
 800aecc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aece:	e005      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	75fb      	strb	r3, [r7, #23]
      break;
 800aed4:	e002      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800aed6:	bf00      	nop
 800aed8:	e000      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800aeda:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aedc:	7dfb      	ldrb	r3, [r7, #23]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d109      	bne.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aee2:	4b55      	ldr	r3, [pc, #340]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeee:	4952      	ldr	r1, [pc, #328]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aef0:	4313      	orrs	r3, r2
 800aef2:	650b      	str	r3, [r1, #80]	; 0x50
 800aef4:	e001      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
 800aef8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af02:	2b00      	cmp	r3, #0
 800af04:	d049      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af10:	d030      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800af12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af16:	d82a      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800af18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af1c:	d02c      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800af1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af22:	d824      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800af24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af28:	d018      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800af2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af2e:	d81e      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800af30:	2b00      	cmp	r3, #0
 800af32:	d003      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800af34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af38:	d007      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800af3a:	e018      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af3c:	4b3e      	ldr	r3, [pc, #248]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af40:	4a3d      	ldr	r2, [pc, #244]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af48:	e017      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	3304      	adds	r3, #4
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f001 f8f5 	bl	800c140 <RCCEx_PLL2_Config>
 800af56:	4603      	mov	r3, r0
 800af58:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800af5a:	e00e      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3324      	adds	r3, #36	; 0x24
 800af60:	2100      	movs	r1, #0
 800af62:	4618      	mov	r0, r3
 800af64:	f001 f99e 	bl	800c2a4 <RCCEx_PLL3_Config>
 800af68:	4603      	mov	r3, r0
 800af6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af6c:	e005      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	75fb      	strb	r3, [r7, #23]
      break;
 800af72:	e002      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800af74:	bf00      	nop
 800af76:	e000      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800af78:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10a      	bne.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800af80:	4b2d      	ldr	r3, [pc, #180]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af84:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af8e:	492a      	ldr	r1, [pc, #168]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af90:	4313      	orrs	r3, r2
 800af92:	658b      	str	r3, [r1, #88]	; 0x58
 800af94:	e001      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af96:	7dfb      	ldrb	r3, [r7, #23]
 800af98:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d04c      	beq.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800afac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afb0:	d030      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800afb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afb6:	d82a      	bhi.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800afb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afbc:	d02c      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800afbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afc2:	d824      	bhi.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800afc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afc8:	d018      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800afca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afce:	d81e      	bhi.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d003      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800afd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800afd8:	d007      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800afda:	e018      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afdc:	4b16      	ldr	r3, [pc, #88]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800afde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe0:	4a15      	ldr	r2, [pc, #84]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800afe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afe6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800afe8:	e017      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	3304      	adds	r3, #4
 800afee:	2100      	movs	r1, #0
 800aff0:	4618      	mov	r0, r3
 800aff2:	f001 f8a5 	bl	800c140 <RCCEx_PLL2_Config>
 800aff6:	4603      	mov	r3, r0
 800aff8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800affa:	e00e      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3324      	adds	r3, #36	; 0x24
 800b000:	2100      	movs	r1, #0
 800b002:	4618      	mov	r0, r3
 800b004:	f001 f94e 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b008:	4603      	mov	r3, r0
 800b00a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b00c:	e005      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	75fb      	strb	r3, [r7, #23]
      break;
 800b012:	e002      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b014:	bf00      	nop
 800b016:	e000      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10d      	bne.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b024:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b02e:	4902      	ldr	r1, [pc, #8]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b030:	4313      	orrs	r3, r2
 800b032:	658b      	str	r3, [r1, #88]	; 0x58
 800b034:	e004      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b036:	bf00      	nop
 800b038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
 800b03e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d032      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b050:	2b30      	cmp	r3, #48	; 0x30
 800b052:	d01c      	beq.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b054:	2b30      	cmp	r3, #48	; 0x30
 800b056:	d817      	bhi.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b058:	2b20      	cmp	r3, #32
 800b05a:	d00c      	beq.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b05c:	2b20      	cmp	r3, #32
 800b05e:	d813      	bhi.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b060:	2b00      	cmp	r3, #0
 800b062:	d016      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b064:	2b10      	cmp	r3, #16
 800b066:	d10f      	bne.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b068:	4baf      	ldr	r3, [pc, #700]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	4aae      	ldr	r2, [pc, #696]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b06e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b074:	e00e      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	3304      	adds	r3, #4
 800b07a:	2102      	movs	r1, #2
 800b07c:	4618      	mov	r0, r3
 800b07e:	f001 f85f 	bl	800c140 <RCCEx_PLL2_Config>
 800b082:	4603      	mov	r3, r0
 800b084:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b086:	e005      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	75fb      	strb	r3, [r7, #23]
      break;
 800b08c:	e002      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b08e:	bf00      	nop
 800b090:	e000      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b092:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d109      	bne.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b09a:	4ba3      	ldr	r3, [pc, #652]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b09e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0a6:	49a0      	ldr	r1, [pc, #640]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b0ac:	e001      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
 800b0b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d047      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0c6:	d030      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b0c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0cc:	d82a      	bhi.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b0ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0d2:	d02c      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b0d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0d8:	d824      	bhi.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b0da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0de:	d018      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b0e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0e4:	d81e      	bhi.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d003      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b0ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0ee:	d007      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b0f0:	e018      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0f2:	4b8d      	ldr	r3, [pc, #564]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f6:	4a8c      	ldr	r2, [pc, #560]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b0fe:	e017      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3304      	adds	r3, #4
 800b104:	2100      	movs	r1, #0
 800b106:	4618      	mov	r0, r3
 800b108:	f001 f81a 	bl	800c140 <RCCEx_PLL2_Config>
 800b10c:	4603      	mov	r3, r0
 800b10e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b110:	e00e      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	3324      	adds	r3, #36	; 0x24
 800b116:	2100      	movs	r1, #0
 800b118:	4618      	mov	r0, r3
 800b11a:	f001 f8c3 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b11e:	4603      	mov	r3, r0
 800b120:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b122:	e005      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	75fb      	strb	r3, [r7, #23]
      break;
 800b128:	e002      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b12a:	bf00      	nop
 800b12c:	e000      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b12e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b130:	7dfb      	ldrb	r3, [r7, #23]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d109      	bne.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b136:	4b7c      	ldr	r3, [pc, #496]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b13a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b142:	4979      	ldr	r1, [pc, #484]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b144:	4313      	orrs	r3, r2
 800b146:	650b      	str	r3, [r1, #80]	; 0x50
 800b148:	e001      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14a:	7dfb      	ldrb	r3, [r7, #23]
 800b14c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d049      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b15e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b162:	d02e      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b168:	d828      	bhi.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b16a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b16e:	d02a      	beq.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b170:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b174:	d822      	bhi.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b176:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b17a:	d026      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b17c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b180:	d81c      	bhi.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b186:	d010      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b18c:	d816      	bhi.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d01d      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b196:	d111      	bne.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3304      	adds	r3, #4
 800b19c:	2101      	movs	r1, #1
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 ffce 	bl	800c140 <RCCEx_PLL2_Config>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b1a8:	e012      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	3324      	adds	r3, #36	; 0x24
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f001 f877 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b1ba:	e009      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	75fb      	strb	r3, [r7, #23]
      break;
 800b1c0:	e006      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b1c2:	bf00      	nop
 800b1c4:	e004      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b1c6:	bf00      	nop
 800b1c8:	e002      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b1ca:	bf00      	nop
 800b1cc:	e000      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b1ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1d0:	7dfb      	ldrb	r3, [r7, #23]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d109      	bne.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b1d6:	4b54      	ldr	r3, [pc, #336]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1da:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1e2:	4951      	ldr	r1, [pc, #324]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	650b      	str	r3, [r1, #80]	; 0x50
 800b1e8:	e001      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
 800b1ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d04b      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b200:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b204:	d02e      	beq.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b20a:	d828      	bhi.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b210:	d02a      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b216:	d822      	bhi.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b218:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b21c:	d026      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b21e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b222:	d81c      	bhi.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b228:	d010      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b22a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b22e:	d816      	bhi.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b230:	2b00      	cmp	r3, #0
 800b232:	d01d      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b238:	d111      	bne.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3304      	adds	r3, #4
 800b23e:	2101      	movs	r1, #1
 800b240:	4618      	mov	r0, r3
 800b242:	f000 ff7d 	bl	800c140 <RCCEx_PLL2_Config>
 800b246:	4603      	mov	r3, r0
 800b248:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b24a:	e012      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3324      	adds	r3, #36	; 0x24
 800b250:	2101      	movs	r1, #1
 800b252:	4618      	mov	r0, r3
 800b254:	f001 f826 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b258:	4603      	mov	r3, r0
 800b25a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b25c:	e009      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	75fb      	strb	r3, [r7, #23]
      break;
 800b262:	e006      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b264:	bf00      	nop
 800b266:	e004      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b268:	bf00      	nop
 800b26a:	e002      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b26c:	bf00      	nop
 800b26e:	e000      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b270:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10a      	bne.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b278:	4b2b      	ldr	r3, [pc, #172]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b27a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b27c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b286:	4928      	ldr	r1, [pc, #160]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b288:	4313      	orrs	r3, r2
 800b28a:	658b      	str	r3, [r1, #88]	; 0x58
 800b28c:	e001      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b28e:	7dfb      	ldrb	r3, [r7, #23]
 800b290:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d02f      	beq.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2a6:	d00e      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b2a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ac:	d814      	bhi.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d015      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b2b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2b6:	d10f      	bne.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2b8:	4b1b      	ldr	r3, [pc, #108]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2bc:	4a1a      	ldr	r2, [pc, #104]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b2be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b2c4:	e00c      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 ff37 	bl	800c140 <RCCEx_PLL2_Config>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b2d6:	e003      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	75fb      	strb	r3, [r7, #23]
      break;
 800b2dc:	e000      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b2de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d109      	bne.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b2e6:	4b10      	ldr	r3, [pc, #64]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2f2:	490d      	ldr	r1, [pc, #52]	; (800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	650b      	str	r3, [r1, #80]	; 0x50
 800b2f8:	e001      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
 800b2fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b306:	2b00      	cmp	r3, #0
 800b308:	d033      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b30e:	2b03      	cmp	r3, #3
 800b310:	d81c      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b312:	a201      	add	r2, pc, #4	; (adr r2, 800b318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b318:	0800b353 	.word	0x0800b353
 800b31c:	0800b32d 	.word	0x0800b32d
 800b320:	0800b33b 	.word	0x0800b33b
 800b324:	0800b353 	.word	0x0800b353
 800b328:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b32c:	4bb8      	ldr	r3, [pc, #736]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	4ab7      	ldr	r2, [pc, #732]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b336:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b338:	e00c      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	3304      	adds	r3, #4
 800b33e:	2102      	movs	r1, #2
 800b340:	4618      	mov	r0, r3
 800b342:	f000 fefd 	bl	800c140 <RCCEx_PLL2_Config>
 800b346:	4603      	mov	r3, r0
 800b348:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b34a:	e003      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	75fb      	strb	r3, [r7, #23]
      break;
 800b350:	e000      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b352:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b354:	7dfb      	ldrb	r3, [r7, #23]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d109      	bne.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b35a:	4bad      	ldr	r3, [pc, #692]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35e:	f023 0203 	bic.w	r2, r3, #3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b366:	49aa      	ldr	r1, [pc, #680]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b368:	4313      	orrs	r3, r2
 800b36a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b36c:	e001      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 8086 	beq.w	800b48c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b380:	4ba4      	ldr	r3, [pc, #656]	; (800b614 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4aa3      	ldr	r2, [pc, #652]	; (800b614 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b38a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b38c:	f7fb f974 	bl	8006678 <HAL_GetTick>
 800b390:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b392:	e009      	b.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b394:	f7fb f970 	bl	8006678 <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	2b64      	cmp	r3, #100	; 0x64
 800b3a0:	d902      	bls.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	75fb      	strb	r3, [r7, #23]
        break;
 800b3a6:	e005      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3a8:	4b9a      	ldr	r3, [pc, #616]	; (800b614 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0ef      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b3b4:	7dfb      	ldrb	r3, [r7, #23]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d166      	bne.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b3ba:	4b95      	ldr	r3, [pc, #596]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3c4:	4053      	eors	r3, r2
 800b3c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d013      	beq.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b3ce:	4b90      	ldr	r3, [pc, #576]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3d6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b3d8:	4b8d      	ldr	r3, [pc, #564]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3dc:	4a8c      	ldr	r2, [pc, #560]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3e2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b3e4:	4b8a      	ldr	r3, [pc, #552]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e8:	4a89      	ldr	r2, [pc, #548]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3ee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b3f0:	4a87      	ldr	r2, [pc, #540]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b400:	d115      	bne.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b402:	f7fb f939 	bl	8006678 <HAL_GetTick>
 800b406:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b408:	e00b      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b40a:	f7fb f935 	bl	8006678 <HAL_GetTick>
 800b40e:	4602      	mov	r2, r0
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	f241 3288 	movw	r2, #5000	; 0x1388
 800b418:	4293      	cmp	r3, r2
 800b41a:	d902      	bls.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	75fb      	strb	r3, [r7, #23]
            break;
 800b420:	e005      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b422:	4b7b      	ldr	r3, [pc, #492]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0ed      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d126      	bne.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b43a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b43e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b442:	d10d      	bne.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b444:	4b72      	ldr	r3, [pc, #456]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b452:	0919      	lsrs	r1, r3, #4
 800b454:	4b70      	ldr	r3, [pc, #448]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b456:	400b      	ands	r3, r1
 800b458:	496d      	ldr	r1, [pc, #436]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b45a:	4313      	orrs	r3, r2
 800b45c:	610b      	str	r3, [r1, #16]
 800b45e:	e005      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b460:	4b6b      	ldr	r3, [pc, #428]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	4a6a      	ldr	r2, [pc, #424]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b466:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b46a:	6113      	str	r3, [r2, #16]
 800b46c:	4b68      	ldr	r3, [pc, #416]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b46e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b47a:	4965      	ldr	r1, [pc, #404]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b47c:	4313      	orrs	r3, r2
 800b47e:	670b      	str	r3, [r1, #112]	; 0x70
 800b480:	e004      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	75bb      	strb	r3, [r7, #22]
 800b486:	e001      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 0301 	and.w	r3, r3, #1
 800b494:	2b00      	cmp	r3, #0
 800b496:	d07e      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b49c:	2b28      	cmp	r3, #40	; 0x28
 800b49e:	d867      	bhi.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b4a0:	a201      	add	r2, pc, #4	; (adr r2, 800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a6:	bf00      	nop
 800b4a8:	0800b577 	.word	0x0800b577
 800b4ac:	0800b571 	.word	0x0800b571
 800b4b0:	0800b571 	.word	0x0800b571
 800b4b4:	0800b571 	.word	0x0800b571
 800b4b8:	0800b571 	.word	0x0800b571
 800b4bc:	0800b571 	.word	0x0800b571
 800b4c0:	0800b571 	.word	0x0800b571
 800b4c4:	0800b571 	.word	0x0800b571
 800b4c8:	0800b54d 	.word	0x0800b54d
 800b4cc:	0800b571 	.word	0x0800b571
 800b4d0:	0800b571 	.word	0x0800b571
 800b4d4:	0800b571 	.word	0x0800b571
 800b4d8:	0800b571 	.word	0x0800b571
 800b4dc:	0800b571 	.word	0x0800b571
 800b4e0:	0800b571 	.word	0x0800b571
 800b4e4:	0800b571 	.word	0x0800b571
 800b4e8:	0800b55f 	.word	0x0800b55f
 800b4ec:	0800b571 	.word	0x0800b571
 800b4f0:	0800b571 	.word	0x0800b571
 800b4f4:	0800b571 	.word	0x0800b571
 800b4f8:	0800b571 	.word	0x0800b571
 800b4fc:	0800b571 	.word	0x0800b571
 800b500:	0800b571 	.word	0x0800b571
 800b504:	0800b571 	.word	0x0800b571
 800b508:	0800b577 	.word	0x0800b577
 800b50c:	0800b571 	.word	0x0800b571
 800b510:	0800b571 	.word	0x0800b571
 800b514:	0800b571 	.word	0x0800b571
 800b518:	0800b571 	.word	0x0800b571
 800b51c:	0800b571 	.word	0x0800b571
 800b520:	0800b571 	.word	0x0800b571
 800b524:	0800b571 	.word	0x0800b571
 800b528:	0800b577 	.word	0x0800b577
 800b52c:	0800b571 	.word	0x0800b571
 800b530:	0800b571 	.word	0x0800b571
 800b534:	0800b571 	.word	0x0800b571
 800b538:	0800b571 	.word	0x0800b571
 800b53c:	0800b571 	.word	0x0800b571
 800b540:	0800b571 	.word	0x0800b571
 800b544:	0800b571 	.word	0x0800b571
 800b548:	0800b577 	.word	0x0800b577
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3304      	adds	r3, #4
 800b550:	2101      	movs	r1, #1
 800b552:	4618      	mov	r0, r3
 800b554:	f000 fdf4 	bl	800c140 <RCCEx_PLL2_Config>
 800b558:	4603      	mov	r3, r0
 800b55a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b55c:	e00c      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	3324      	adds	r3, #36	; 0x24
 800b562:	2101      	movs	r1, #1
 800b564:	4618      	mov	r0, r3
 800b566:	f000 fe9d 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b56a:	4603      	mov	r3, r0
 800b56c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b56e:	e003      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	75fb      	strb	r3, [r7, #23]
      break;
 800b574:	e000      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b576:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b578:	7dfb      	ldrb	r3, [r7, #23]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d109      	bne.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b57e:	4b24      	ldr	r3, [pc, #144]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b582:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b58a:	4921      	ldr	r1, [pc, #132]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	654b      	str	r3, [r1, #84]	; 0x54
 800b590:	e001      	b.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 0302 	and.w	r3, r3, #2
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d03e      	beq.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5a6:	2b05      	cmp	r3, #5
 800b5a8:	d820      	bhi.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b5aa:	a201      	add	r2, pc, #4	; (adr r2, 800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b0:	0800b5f3 	.word	0x0800b5f3
 800b5b4:	0800b5c9 	.word	0x0800b5c9
 800b5b8:	0800b5db 	.word	0x0800b5db
 800b5bc:	0800b5f3 	.word	0x0800b5f3
 800b5c0:	0800b5f3 	.word	0x0800b5f3
 800b5c4:	0800b5f3 	.word	0x0800b5f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 fdb6 	bl	800c140 <RCCEx_PLL2_Config>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b5d8:	e00c      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3324      	adds	r3, #36	; 0x24
 800b5de:	2101      	movs	r1, #1
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 fe5f 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b5ea:	e003      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b5f0:	e000      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b5f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5f4:	7dfb      	ldrb	r3, [r7, #23]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d110      	bne.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b5fa:	4b05      	ldr	r3, [pc, #20]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5fe:	f023 0207 	bic.w	r2, r3, #7
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b606:	4902      	ldr	r1, [pc, #8]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b608:	4313      	orrs	r3, r2
 800b60a:	654b      	str	r3, [r1, #84]	; 0x54
 800b60c:	e008      	b.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b60e:	bf00      	nop
 800b610:	58024400 	.word	0x58024400
 800b614:	58024800 	.word	0x58024800
 800b618:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b61c:	7dfb      	ldrb	r3, [r7, #23]
 800b61e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0304 	and.w	r3, r3, #4
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d039      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b632:	2b05      	cmp	r3, #5
 800b634:	d820      	bhi.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b636:	a201      	add	r2, pc, #4	; (adr r2, 800b63c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63c:	0800b67f 	.word	0x0800b67f
 800b640:	0800b655 	.word	0x0800b655
 800b644:	0800b667 	.word	0x0800b667
 800b648:	0800b67f 	.word	0x0800b67f
 800b64c:	0800b67f 	.word	0x0800b67f
 800b650:	0800b67f 	.word	0x0800b67f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3304      	adds	r3, #4
 800b658:	2101      	movs	r1, #1
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 fd70 	bl	800c140 <RCCEx_PLL2_Config>
 800b660:	4603      	mov	r3, r0
 800b662:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b664:	e00c      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	3324      	adds	r3, #36	; 0x24
 800b66a:	2101      	movs	r1, #1
 800b66c:	4618      	mov	r0, r3
 800b66e:	f000 fe19 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b672:	4603      	mov	r3, r0
 800b674:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b676:	e003      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	75fb      	strb	r3, [r7, #23]
      break;
 800b67c:	e000      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b67e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b680:	7dfb      	ldrb	r3, [r7, #23]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b686:	4bb7      	ldr	r3, [pc, #732]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b68a:	f023 0207 	bic.w	r2, r3, #7
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b694:	49b3      	ldr	r1, [pc, #716]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b696:	4313      	orrs	r3, r2
 800b698:	658b      	str	r3, [r1, #88]	; 0x58
 800b69a:	e001      	b.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
 800b69e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0320 	and.w	r3, r3, #32
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d04b      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6b6:	d02e      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b6b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6bc:	d828      	bhi.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b6be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c2:	d02a      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c8:	d822      	bhi.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b6ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6ce:	d026      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b6d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6d4:	d81c      	bhi.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b6d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6da:	d010      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b6dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6e0:	d816      	bhi.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d01d      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b6e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6ea:	d111      	bne.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 fd24 	bl	800c140 <RCCEx_PLL2_Config>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b6fc:	e012      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3324      	adds	r3, #36	; 0x24
 800b702:	2102      	movs	r1, #2
 800b704:	4618      	mov	r0, r3
 800b706:	f000 fdcd 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b70a:	4603      	mov	r3, r0
 800b70c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b70e:	e009      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	75fb      	strb	r3, [r7, #23]
      break;
 800b714:	e006      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b716:	bf00      	nop
 800b718:	e004      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b71a:	bf00      	nop
 800b71c:	e002      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b71e:	bf00      	nop
 800b720:	e000      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b722:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b72a:	4b8e      	ldr	r3, [pc, #568]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b72e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b738:	498a      	ldr	r1, [pc, #552]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b73a:	4313      	orrs	r3, r2
 800b73c:	654b      	str	r3, [r1, #84]	; 0x54
 800b73e:	e001      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d04b      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b756:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b75a:	d02e      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b75c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b760:	d828      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b766:	d02a      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b76c:	d822      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b76e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b772:	d026      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b778:	d81c      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b77a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b77e:	d010      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b784:	d816      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d01d      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b78a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b78e:	d111      	bne.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	3304      	adds	r3, #4
 800b794:	2100      	movs	r1, #0
 800b796:	4618      	mov	r0, r3
 800b798:	f000 fcd2 	bl	800c140 <RCCEx_PLL2_Config>
 800b79c:	4603      	mov	r3, r0
 800b79e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b7a0:	e012      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3324      	adds	r3, #36	; 0x24
 800b7a6:	2102      	movs	r1, #2
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 fd7b 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b7b2:	e009      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b7b8:	e006      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b7ba:	bf00      	nop
 800b7bc:	e004      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b7be:	bf00      	nop
 800b7c0:	e002      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b7c2:	bf00      	nop
 800b7c4:	e000      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b7c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7c8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10a      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b7ce:	4b65      	ldr	r3, [pc, #404]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b7d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7dc:	4961      	ldr	r1, [pc, #388]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	658b      	str	r3, [r1, #88]	; 0x58
 800b7e2:	e001      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e4:	7dfb      	ldrb	r3, [r7, #23]
 800b7e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d04b      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7fe:	d02e      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b800:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b804:	d828      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b80a:	d02a      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b80c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b810:	d822      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b812:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b816:	d026      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b818:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b81c:	d81c      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b81e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b822:	d010      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b828:	d816      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d01d      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b82e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b832:	d111      	bne.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3304      	adds	r3, #4
 800b838:	2100      	movs	r1, #0
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 fc80 	bl	800c140 <RCCEx_PLL2_Config>
 800b840:	4603      	mov	r3, r0
 800b842:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b844:	e012      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3324      	adds	r3, #36	; 0x24
 800b84a:	2102      	movs	r1, #2
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 fd29 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b852:	4603      	mov	r3, r0
 800b854:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b856:	e009      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	75fb      	strb	r3, [r7, #23]
      break;
 800b85c:	e006      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b85e:	bf00      	nop
 800b860:	e004      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b862:	bf00      	nop
 800b864:	e002      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b866:	bf00      	nop
 800b868:	e000      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b86a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b872:	4b3c      	ldr	r3, [pc, #240]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b880:	4938      	ldr	r1, [pc, #224]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b882:	4313      	orrs	r3, r2
 800b884:	658b      	str	r3, [r1, #88]	; 0x58
 800b886:	e001      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 0308 	and.w	r3, r3, #8
 800b894:	2b00      	cmp	r3, #0
 800b896:	d01a      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b89e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8a2:	d10a      	bne.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3324      	adds	r3, #36	; 0x24
 800b8a8:	2102      	movs	r1, #2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 fcfa 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b8ba:	4b2a      	ldr	r3, [pc, #168]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c8:	4926      	ldr	r1, [pc, #152]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0310 	and.w	r3, r3, #16
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d01a      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8e4:	d10a      	bne.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3324      	adds	r3, #36	; 0x24
 800b8ea:	2102      	movs	r1, #2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 fcd9 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d001      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8fc:	4b19      	ldr	r3, [pc, #100]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b8fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b90a:	4916      	ldr	r1, [pc, #88]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b90c:	4313      	orrs	r3, r2
 800b90e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d036      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b926:	d01f      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b92c:	d817      	bhi.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b936:	d009      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b938:	e011      	b.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3304      	adds	r3, #4
 800b93e:	2100      	movs	r1, #0
 800b940:	4618      	mov	r0, r3
 800b942:	f000 fbfd 	bl	800c140 <RCCEx_PLL2_Config>
 800b946:	4603      	mov	r3, r0
 800b948:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b94a:	e00e      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3324      	adds	r3, #36	; 0x24
 800b950:	2102      	movs	r1, #2
 800b952:	4618      	mov	r0, r3
 800b954:	f000 fca6 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b958:	4603      	mov	r3, r0
 800b95a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b95c:	e005      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	75fb      	strb	r3, [r7, #23]
      break;
 800b962:	e002      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b964:	58024400 	.word	0x58024400
      break;
 800b968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10a      	bne.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b970:	4b93      	ldr	r3, [pc, #588]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b97e:	4990      	ldr	r1, [pc, #576]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b980:	4313      	orrs	r3, r2
 800b982:	658b      	str	r3, [r1, #88]	; 0x58
 800b984:	e001      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b992:	2b00      	cmp	r3, #0
 800b994:	d033      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b99c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9a0:	d01c      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b9a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9a6:	d816      	bhi.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b9a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9ac:	d003      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b9ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9b2:	d007      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b9b4:	e00f      	b.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b6:	4b82      	ldr	r3, [pc, #520]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ba:	4a81      	ldr	r2, [pc, #516]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b9c2:	e00c      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	3324      	adds	r3, #36	; 0x24
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 fc6a 	bl	800c2a4 <RCCEx_PLL3_Config>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b9d4:	e003      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	75fb      	strb	r3, [r7, #23]
      break;
 800b9da:	e000      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b9dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10a      	bne.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b9e4:	4b76      	ldr	r3, [pc, #472]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9f2:	4973      	ldr	r1, [pc, #460]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	654b      	str	r3, [r1, #84]	; 0x54
 800b9f8:	e001      	b.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d029      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d003      	beq.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800ba12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba16:	d007      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800ba18:	e00f      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba1a:	4b69      	ldr	r3, [pc, #420]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1e:	4a68      	ldr	r2, [pc, #416]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ba26:	e00b      	b.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	2102      	movs	r1, #2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 fb86 	bl	800c140 <RCCEx_PLL2_Config>
 800ba34:	4603      	mov	r3, r0
 800ba36:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ba38:	e002      	b.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d109      	bne.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ba46:	4b5e      	ldr	r3, [pc, #376]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba52:	495b      	ldr	r1, [pc, #364]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba54:	4313      	orrs	r3, r2
 800ba56:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ba58:	e001      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba5a:	7dfb      	ldrb	r3, [r7, #23]
 800ba5c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00a      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	3324      	adds	r3, #36	; 0x24
 800ba6e:	2102      	movs	r1, #2
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 fc17 	bl	800c2a4 <RCCEx_PLL3_Config>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d030      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba94:	d017      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800ba96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba9a:	d811      	bhi.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ba9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baa0:	d013      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800baa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baa6:	d80b      	bhi.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d010      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800baac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bab0:	d106      	bne.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bab2:	4b43      	ldr	r3, [pc, #268]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab6:	4a42      	ldr	r2, [pc, #264]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800babc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800babe:	e007      	b.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	75fb      	strb	r3, [r7, #23]
      break;
 800bac4:	e004      	b.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bac6:	bf00      	nop
 800bac8:	e002      	b.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800baca:	bf00      	nop
 800bacc:	e000      	b.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bace:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d109      	bne.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bad6:	4b3a      	ldr	r3, [pc, #232]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bada:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bae2:	4937      	ldr	r1, [pc, #220]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bae4:	4313      	orrs	r3, r2
 800bae6:	654b      	str	r3, [r1, #84]	; 0x54
 800bae8:	e001      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baea:	7dfb      	ldrb	r3, [r7, #23]
 800baec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d008      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bafa:	4b31      	ldr	r3, [pc, #196]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb06:	492e      	ldr	r1, [pc, #184]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d009      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bb18:	4b29      	ldr	r3, [pc, #164]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb26:	4926      	ldr	r1, [pc, #152]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d008      	beq.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb38:	4b21      	ldr	r3, [pc, #132]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb44:	491e      	ldr	r1, [pc, #120]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb46:	4313      	orrs	r3, r2
 800bb48:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00d      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb56:	4b1a      	ldr	r3, [pc, #104]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	4a19      	ldr	r2, [pc, #100]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb60:	6113      	str	r3, [r2, #16]
 800bb62:	4b17      	ldr	r3, [pc, #92]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb64:	691a      	ldr	r2, [r3, #16]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bb6c:	4914      	ldr	r1, [pc, #80]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	da08      	bge.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bb7a:	4b11      	ldr	r3, [pc, #68]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb86:	490e      	ldr	r1, [pc, #56]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d009      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bb98:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bba6:	4906      	ldr	r1, [pc, #24]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bbac:	7dbb      	ldrb	r3, [r7, #22]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e000      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3718      	adds	r7, #24
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	58024400 	.word	0x58024400

0800bbc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bbc8:	f7ff f860 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	4b06      	ldr	r3, [pc, #24]	; (800bbe8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	091b      	lsrs	r3, r3, #4
 800bbd4:	f003 0307 	and.w	r3, r3, #7
 800bbd8:	4904      	ldr	r1, [pc, #16]	; (800bbec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bbda:	5ccb      	ldrb	r3, [r1, r3]
 800bbdc:	f003 031f 	and.w	r3, r3, #31
 800bbe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	58024400 	.word	0x58024400
 800bbec:	080140b4 	.word	0x080140b4

0800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b089      	sub	sp, #36	; 0x24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbf8:	4ba1      	ldr	r3, [pc, #644]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfc:	f003 0303 	and.w	r3, r3, #3
 800bc00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bc02:	4b9f      	ldr	r3, [pc, #636]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc06:	0b1b      	lsrs	r3, r3, #12
 800bc08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bc0e:	4b9c      	ldr	r3, [pc, #624]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc12:	091b      	lsrs	r3, r3, #4
 800bc14:	f003 0301 	and.w	r3, r3, #1
 800bc18:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bc1a:	4b99      	ldr	r3, [pc, #612]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1e:	08db      	lsrs	r3, r3, #3
 800bc20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	fb02 f303 	mul.w	r3, r2, r3
 800bc2a:	ee07 3a90 	vmov	s15, r3
 800bc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 8111 	beq.w	800be60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	f000 8083 	beq.w	800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	f200 80a1 	bhi.w	800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d003      	beq.n	800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d056      	beq.n	800bd08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bc5a:	e099      	b.n	800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc5c:	4b88      	ldr	r3, [pc, #544]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 0320 	and.w	r3, r3, #32
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d02d      	beq.n	800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc68:	4b85      	ldr	r3, [pc, #532]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	08db      	lsrs	r3, r3, #3
 800bc6e:	f003 0303 	and.w	r3, r3, #3
 800bc72:	4a84      	ldr	r2, [pc, #528]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc74:	fa22 f303 	lsr.w	r3, r2, r3
 800bc78:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	ee07 3a90 	vmov	s15, r3
 800bc80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	ee07 3a90 	vmov	s15, r3
 800bc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc92:	4b7b      	ldr	r3, [pc, #492]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc9a:	ee07 3a90 	vmov	s15, r3
 800bc9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bca6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcbe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bcc2:	e087      	b.n	800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	ee07 3a90 	vmov	s15, r3
 800bcca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bcd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcd6:	4b6a      	ldr	r3, [pc, #424]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcde:	ee07 3a90 	vmov	s15, r3
 800bce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcea:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd06:	e065      	b.n	800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	ee07 3a90 	vmov	s15, r3
 800bd0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd1a:	4b59      	ldr	r3, [pc, #356]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd22:	ee07 3a90 	vmov	s15, r3
 800bd26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd4a:	e043      	b.n	800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bd5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd5e:	4b48      	ldr	r3, [pc, #288]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd72:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd8e:	e021      	b.n	800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda2:	4b37      	ldr	r3, [pc, #220]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bdd4:	4b2a      	ldr	r3, [pc, #168]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd8:	0a5b      	lsrs	r3, r3, #9
 800bdda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdee:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdfa:	ee17 2a90 	vmov	r2, s15
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800be02:	4b1f      	ldr	r3, [pc, #124]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	0c1b      	lsrs	r3, r3, #16
 800be08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be0c:	ee07 3a90 	vmov	s15, r3
 800be10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800be20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be28:	ee17 2a90 	vmov	r2, s15
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800be30:	4b13      	ldr	r3, [pc, #76]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be34:	0e1b      	lsrs	r3, r3, #24
 800be36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be56:	ee17 2a90 	vmov	r2, s15
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800be5e:	e008      	b.n	800be72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	609a      	str	r2, [r3, #8]
}
 800be72:	bf00      	nop
 800be74:	3724      	adds	r7, #36	; 0x24
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	58024400 	.word	0x58024400
 800be84:	03d09000 	.word	0x03d09000
 800be88:	46000000 	.word	0x46000000
 800be8c:	4c742400 	.word	0x4c742400
 800be90:	4a742400 	.word	0x4a742400
 800be94:	4c371b00 	.word	0x4c371b00

0800be98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800be98:	b480      	push	{r7}
 800be9a:	b089      	sub	sp, #36	; 0x24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bea0:	4ba1      	ldr	r3, [pc, #644]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea4:	f003 0303 	and.w	r3, r3, #3
 800bea8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800beaa:	4b9f      	ldr	r3, [pc, #636]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beae:	0d1b      	lsrs	r3, r3, #20
 800beb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800beb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800beb6:	4b9c      	ldr	r3, [pc, #624]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	0a1b      	lsrs	r3, r3, #8
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bec2:	4b99      	ldr	r3, [pc, #612]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bec6:	08db      	lsrs	r3, r3, #3
 800bec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800becc:	693a      	ldr	r2, [r7, #16]
 800bece:	fb02 f303 	mul.w	r3, r2, r3
 800bed2:	ee07 3a90 	vmov	s15, r3
 800bed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f000 8111 	beq.w	800c108 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	2b02      	cmp	r3, #2
 800beea:	f000 8083 	beq.w	800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	f200 80a1 	bhi.w	800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d003      	beq.n	800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d056      	beq.n	800bfb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bf02:	e099      	b.n	800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf04:	4b88      	ldr	r3, [pc, #544]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0320 	and.w	r3, r3, #32
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d02d      	beq.n	800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf10:	4b85      	ldr	r3, [pc, #532]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	08db      	lsrs	r3, r3, #3
 800bf16:	f003 0303 	and.w	r3, r3, #3
 800bf1a:	4a84      	ldr	r2, [pc, #528]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bf1c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf20:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	ee07 3a90 	vmov	s15, r3
 800bf28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	ee07 3a90 	vmov	s15, r3
 800bf32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf3a:	4b7b      	ldr	r3, [pc, #492]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf42:	ee07 3a90 	vmov	s15, r3
 800bf46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf66:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bf6a:	e087      	b.n	800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	ee07 3a90 	vmov	s15, r3
 800bf72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c134 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf7e:	4b6a      	ldr	r3, [pc, #424]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf86:	ee07 3a90 	vmov	s15, r3
 800bf8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf92:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfae:	e065      	b.n	800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	ee07 3a90 	vmov	s15, r3
 800bfb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfc2:	4b59      	ldr	r3, [pc, #356]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfca:	ee07 3a90 	vmov	s15, r3
 800bfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bff2:	e043      	b.n	800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c13c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c006:	4b48      	ldr	r3, [pc, #288]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c00e:	ee07 3a90 	vmov	s15, r3
 800c012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c016:	ed97 6a03 	vldr	s12, [r7, #12]
 800c01a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c036:	e021      	b.n	800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	ee07 3a90 	vmov	s15, r3
 800c03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c042:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c04a:	4b37      	ldr	r3, [pc, #220]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c052:	ee07 3a90 	vmov	s15, r3
 800c056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c05a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c05e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c06a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c07a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c07c:	4b2a      	ldr	r3, [pc, #168]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	0a5b      	lsrs	r3, r3, #9
 800c082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c08e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c092:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c096:	edd7 6a07 	vldr	s13, [r7, #28]
 800c09a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c09e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0a2:	ee17 2a90 	vmov	r2, s15
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c0aa:	4b1f      	ldr	r3, [pc, #124]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ae:	0c1b      	lsrs	r3, r3, #16
 800c0b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0b4:	ee07 3a90 	vmov	s15, r3
 800c0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0d0:	ee17 2a90 	vmov	r2, s15
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c0d8:	4b13      	ldr	r3, [pc, #76]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0dc:	0e1b      	lsrs	r3, r3, #24
 800c0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0e2:	ee07 3a90 	vmov	s15, r3
 800c0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0fe:	ee17 2a90 	vmov	r2, s15
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c106:	e008      	b.n	800c11a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	609a      	str	r2, [r3, #8]
}
 800c11a:	bf00      	nop
 800c11c:	3724      	adds	r7, #36	; 0x24
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	58024400 	.word	0x58024400
 800c12c:	03d09000 	.word	0x03d09000
 800c130:	46000000 	.word	0x46000000
 800c134:	4c742400 	.word	0x4c742400
 800c138:	4a742400 	.word	0x4a742400
 800c13c:	4c371b00 	.word	0x4c371b00

0800c140 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c14a:	2300      	movs	r3, #0
 800c14c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c14e:	4b53      	ldr	r3, [pc, #332]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c152:	f003 0303 	and.w	r3, r3, #3
 800c156:	2b03      	cmp	r3, #3
 800c158:	d101      	bne.n	800c15e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c15a:	2301      	movs	r3, #1
 800c15c:	e099      	b.n	800c292 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c15e:	4b4f      	ldr	r3, [pc, #316]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a4e      	ldr	r2, [pc, #312]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c164:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c16a:	f7fa fa85 	bl	8006678 <HAL_GetTick>
 800c16e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c170:	e008      	b.n	800c184 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c172:	f7fa fa81 	bl	8006678 <HAL_GetTick>
 800c176:	4602      	mov	r2, r0
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	1ad3      	subs	r3, r2, r3
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d901      	bls.n	800c184 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c180:	2303      	movs	r3, #3
 800c182:	e086      	b.n	800c292 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c184:	4b45      	ldr	r3, [pc, #276]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1f0      	bne.n	800c172 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c190:	4b42      	ldr	r3, [pc, #264]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c194:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	031b      	lsls	r3, r3, #12
 800c19e:	493f      	ldr	r1, [pc, #252]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	628b      	str	r3, [r1, #40]	; 0x28
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	025b      	lsls	r3, r3, #9
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	431a      	orrs	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	041b      	lsls	r3, r3, #16
 800c1c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	061b      	lsls	r3, r3, #24
 800c1d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c1d4:	4931      	ldr	r1, [pc, #196]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1da:	4b30      	ldr	r3, [pc, #192]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	492d      	ldr	r1, [pc, #180]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c1ec:	4b2b      	ldr	r3, [pc, #172]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	f023 0220 	bic.w	r2, r3, #32
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	4928      	ldr	r1, [pc, #160]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c1fe:	4b27      	ldr	r3, [pc, #156]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c202:	4a26      	ldr	r2, [pc, #152]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c204:	f023 0310 	bic.w	r3, r3, #16
 800c208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c20a:	4b24      	ldr	r3, [pc, #144]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c20c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c20e:	4b24      	ldr	r3, [pc, #144]	; (800c2a0 <RCCEx_PLL2_Config+0x160>)
 800c210:	4013      	ands	r3, r2
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	69d2      	ldr	r2, [r2, #28]
 800c216:	00d2      	lsls	r2, r2, #3
 800c218:	4920      	ldr	r1, [pc, #128]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c21a:	4313      	orrs	r3, r2
 800c21c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c21e:	4b1f      	ldr	r3, [pc, #124]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c222:	4a1e      	ldr	r2, [pc, #120]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c224:	f043 0310 	orr.w	r3, r3, #16
 800c228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d106      	bne.n	800c23e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c230:	4b1a      	ldr	r3, [pc, #104]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c234:	4a19      	ldr	r2, [pc, #100]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c236:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c23a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c23c:	e00f      	b.n	800c25e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d106      	bne.n	800c252 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c244:	4b15      	ldr	r3, [pc, #84]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c248:	4a14      	ldr	r2, [pc, #80]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c24a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c24e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c250:	e005      	b.n	800c25e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c252:	4b12      	ldr	r3, [pc, #72]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c256:	4a11      	ldr	r2, [pc, #68]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c25c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c25e:	4b0f      	ldr	r3, [pc, #60]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a0e      	ldr	r2, [pc, #56]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c26a:	f7fa fa05 	bl	8006678 <HAL_GetTick>
 800c26e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c270:	e008      	b.n	800c284 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c272:	f7fa fa01 	bl	8006678 <HAL_GetTick>
 800c276:	4602      	mov	r2, r0
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d901      	bls.n	800c284 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c280:	2303      	movs	r3, #3
 800c282:	e006      	b.n	800c292 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c284:	4b05      	ldr	r3, [pc, #20]	; (800c29c <RCCEx_PLL2_Config+0x15c>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d0f0      	beq.n	800c272 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c290:	7bfb      	ldrb	r3, [r7, #15]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	58024400 	.word	0x58024400
 800c2a0:	ffff0007 	.word	0xffff0007

0800c2a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2b2:	4b53      	ldr	r3, [pc, #332]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b6:	f003 0303 	and.w	r3, r3, #3
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	d101      	bne.n	800c2c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e099      	b.n	800c3f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c2c2:	4b4f      	ldr	r3, [pc, #316]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a4e      	ldr	r2, [pc, #312]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c2c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2ce:	f7fa f9d3 	bl	8006678 <HAL_GetTick>
 800c2d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2d4:	e008      	b.n	800c2e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c2d6:	f7fa f9cf 	bl	8006678 <HAL_GetTick>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d901      	bls.n	800c2e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e086      	b.n	800c3f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2e8:	4b45      	ldr	r3, [pc, #276]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1f0      	bne.n	800c2d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c2f4:	4b42      	ldr	r3, [pc, #264]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	051b      	lsls	r3, r3, #20
 800c302:	493f      	ldr	r1, [pc, #252]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c304:	4313      	orrs	r3, r2
 800c306:	628b      	str	r3, [r1, #40]	; 0x28
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	3b01      	subs	r3, #1
 800c318:	025b      	lsls	r3, r3, #9
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	431a      	orrs	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	3b01      	subs	r3, #1
 800c324:	041b      	lsls	r3, r3, #16
 800c326:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c32a:	431a      	orrs	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	3b01      	subs	r3, #1
 800c332:	061b      	lsls	r3, r3, #24
 800c334:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c338:	4931      	ldr	r1, [pc, #196]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c33a:	4313      	orrs	r3, r2
 800c33c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c33e:	4b30      	ldr	r3, [pc, #192]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c342:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	695b      	ldr	r3, [r3, #20]
 800c34a:	492d      	ldr	r1, [pc, #180]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c34c:	4313      	orrs	r3, r2
 800c34e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c350:	4b2b      	ldr	r3, [pc, #172]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	4928      	ldr	r1, [pc, #160]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c35e:	4313      	orrs	r3, r2
 800c360:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c362:	4b27      	ldr	r3, [pc, #156]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c366:	4a26      	ldr	r2, [pc, #152]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c36c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c36e:	4b24      	ldr	r3, [pc, #144]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c372:	4b24      	ldr	r3, [pc, #144]	; (800c404 <RCCEx_PLL3_Config+0x160>)
 800c374:	4013      	ands	r3, r2
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	69d2      	ldr	r2, [r2, #28]
 800c37a:	00d2      	lsls	r2, r2, #3
 800c37c:	4920      	ldr	r1, [pc, #128]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c37e:	4313      	orrs	r3, r2
 800c380:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c382:	4b1f      	ldr	r3, [pc, #124]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c386:	4a1e      	ldr	r2, [pc, #120]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c38c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d106      	bne.n	800c3a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c394:	4b1a      	ldr	r3, [pc, #104]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c398:	4a19      	ldr	r2, [pc, #100]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c39a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c39e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3a0:	e00f      	b.n	800c3c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d106      	bne.n	800c3b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c3a8:	4b15      	ldr	r3, [pc, #84]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ac:	4a14      	ldr	r2, [pc, #80]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c3ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c3b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3b4:	e005      	b.n	800c3c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c3b6:	4b12      	ldr	r3, [pc, #72]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ba:	4a11      	ldr	r2, [pc, #68]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c3bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c3c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c3c2:	4b0f      	ldr	r3, [pc, #60]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a0e      	ldr	r2, [pc, #56]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c3c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3ce:	f7fa f953 	bl	8006678 <HAL_GetTick>
 800c3d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3d4:	e008      	b.n	800c3e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c3d6:	f7fa f94f 	bl	8006678 <HAL_GetTick>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d901      	bls.n	800c3e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e006      	b.n	800c3f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <RCCEx_PLL3_Config+0x15c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d0f0      	beq.n	800c3d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	58024400 	.word	0x58024400
 800c404:	ffff0007 	.word	0xffff0007

0800c408 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	e0f1      	b.n	800c5fe <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a78      	ldr	r2, [pc, #480]	; (800c608 <HAL_SPI_Init+0x200>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d00f      	beq.n	800c44a <HAL_SPI_Init+0x42>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a77      	ldr	r2, [pc, #476]	; (800c60c <HAL_SPI_Init+0x204>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d00a      	beq.n	800c44a <HAL_SPI_Init+0x42>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a75      	ldr	r2, [pc, #468]	; (800c610 <HAL_SPI_Init+0x208>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d005      	beq.n	800c44a <HAL_SPI_Init+0x42>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	2b0f      	cmp	r3, #15
 800c444:	d901      	bls.n	800c44a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	e0d9      	b.n	800c5fe <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f8e2 	bl	800c614 <SPI_GetPacketSize>
 800c450:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a6c      	ldr	r2, [pc, #432]	; (800c608 <HAL_SPI_Init+0x200>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d00c      	beq.n	800c476 <HAL_SPI_Init+0x6e>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a6a      	ldr	r2, [pc, #424]	; (800c60c <HAL_SPI_Init+0x204>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d007      	beq.n	800c476 <HAL_SPI_Init+0x6e>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a69      	ldr	r2, [pc, #420]	; (800c610 <HAL_SPI_Init+0x208>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d002      	beq.n	800c476 <HAL_SPI_Init+0x6e>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2b08      	cmp	r3, #8
 800c474:	d811      	bhi.n	800c49a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c47a:	4a63      	ldr	r2, [pc, #396]	; (800c608 <HAL_SPI_Init+0x200>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d009      	beq.n	800c494 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a61      	ldr	r2, [pc, #388]	; (800c60c <HAL_SPI_Init+0x204>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d004      	beq.n	800c494 <HAL_SPI_Init+0x8c>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a60      	ldr	r2, [pc, #384]	; (800c610 <HAL_SPI_Init+0x208>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d104      	bne.n	800c49e <HAL_SPI_Init+0x96>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2b10      	cmp	r3, #16
 800c498:	d901      	bls.n	800c49e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	e0af      	b.n	800c5fe <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d106      	bne.n	800c4b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7f8 faa0 	bl	80049f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2202      	movs	r2, #2
 800c4bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f022 0201 	bic.w	r2, r2, #1
 800c4ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c4da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c4e4:	d119      	bne.n	800c51a <HAL_SPI_Init+0x112>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4ee:	d103      	bne.n	800c4f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d008      	beq.n	800c50a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10c      	bne.n	800c51a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c508:	d107      	bne.n	800c51a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c518:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	69da      	ldr	r2, [r3, #28]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c522:	431a      	orrs	r2, r3
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	431a      	orrs	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c52c:	ea42 0103 	orr.w	r1, r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	68da      	ldr	r2, [r3, #12]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	430a      	orrs	r2, r1
 800c53a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c544:	431a      	orrs	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54a:	431a      	orrs	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	431a      	orrs	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	431a      	orrs	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	695b      	ldr	r3, [r3, #20]
 800c55c:	431a      	orrs	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	431a      	orrs	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	431a      	orrs	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c56e:	431a      	orrs	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	431a      	orrs	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c57a:	ea42 0103 	orr.w	r1, r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	430a      	orrs	r2, r1
 800c588:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d113      	bne.n	800c5ba <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c5b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f022 0201 	bic.w	r2, r2, #1
 800c5c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	430a      	orrs	r2, r1
 800c5ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	40013000 	.word	0x40013000
 800c60c:	40003800 	.word	0x40003800
 800c610:	40003c00 	.word	0x40003c00

0800c614 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c620:	095b      	lsrs	r3, r3, #5
 800c622:	3301      	adds	r3, #1
 800c624:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	3301      	adds	r3, #1
 800c62c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	3307      	adds	r3, #7
 800c632:	08db      	lsrs	r3, r3, #3
 800c634:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e049      	b.n	800c6f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	d106      	bne.n	800c676 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7f9 f8dd 	bl	8005830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2202      	movs	r2, #2
 800c67a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3304      	adds	r3, #4
 800c686:	4619      	mov	r1, r3
 800c688:	4610      	mov	r0, r2
 800c68a:	f000 fd9f 	bl	800d1cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2201      	movs	r2, #1
 800c692:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2201      	movs	r2, #1
 800c69a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c706:	b2db      	uxtb	r3, r3
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d001      	beq.n	800c710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c70c:	2301      	movs	r3, #1
 800c70e:	e054      	b.n	800c7ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2202      	movs	r2, #2
 800c714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68da      	ldr	r2, [r3, #12]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f042 0201 	orr.w	r2, r2, #1
 800c726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a26      	ldr	r2, [pc, #152]	; (800c7c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d022      	beq.n	800c778 <HAL_TIM_Base_Start_IT+0x80>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c73a:	d01d      	beq.n	800c778 <HAL_TIM_Base_Start_IT+0x80>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a22      	ldr	r2, [pc, #136]	; (800c7cc <HAL_TIM_Base_Start_IT+0xd4>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d018      	beq.n	800c778 <HAL_TIM_Base_Start_IT+0x80>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a21      	ldr	r2, [pc, #132]	; (800c7d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d013      	beq.n	800c778 <HAL_TIM_Base_Start_IT+0x80>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a1f      	ldr	r2, [pc, #124]	; (800c7d4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d00e      	beq.n	800c778 <HAL_TIM_Base_Start_IT+0x80>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a1e      	ldr	r2, [pc, #120]	; (800c7d8 <HAL_TIM_Base_Start_IT+0xe0>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d009      	beq.n	800c778 <HAL_TIM_Base_Start_IT+0x80>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a1c      	ldr	r2, [pc, #112]	; (800c7dc <HAL_TIM_Base_Start_IT+0xe4>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d004      	beq.n	800c778 <HAL_TIM_Base_Start_IT+0x80>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a1b      	ldr	r2, [pc, #108]	; (800c7e0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d115      	bne.n	800c7a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	689a      	ldr	r2, [r3, #8]
 800c77e:	4b19      	ldr	r3, [pc, #100]	; (800c7e4 <HAL_TIM_Base_Start_IT+0xec>)
 800c780:	4013      	ands	r3, r2
 800c782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2b06      	cmp	r3, #6
 800c788:	d015      	beq.n	800c7b6 <HAL_TIM_Base_Start_IT+0xbe>
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c790:	d011      	beq.n	800c7b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f042 0201 	orr.w	r2, r2, #1
 800c7a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7a2:	e008      	b.n	800c7b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f042 0201 	orr.w	r2, r2, #1
 800c7b2:	601a      	str	r2, [r3, #0]
 800c7b4:	e000      	b.n	800c7b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	40010000 	.word	0x40010000
 800c7cc:	40000400 	.word	0x40000400
 800c7d0:	40000800 	.word	0x40000800
 800c7d4:	40000c00 	.word	0x40000c00
 800c7d8:	40010400 	.word	0x40010400
 800c7dc:	40001800 	.word	0x40001800
 800c7e0:	40014000 	.word	0x40014000
 800c7e4:	00010007 	.word	0x00010007

0800c7e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68da      	ldr	r2, [r3, #12]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f022 0201 	bic.w	r2, r2, #1
 800c7fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6a1a      	ldr	r2, [r3, #32]
 800c806:	f241 1311 	movw	r3, #4369	; 0x1111
 800c80a:	4013      	ands	r3, r2
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10f      	bne.n	800c830 <HAL_TIM_Base_Stop_IT+0x48>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6a1a      	ldr	r2, [r3, #32]
 800c816:	f240 4344 	movw	r3, #1092	; 0x444
 800c81a:	4013      	ands	r3, r2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d107      	bne.n	800c830 <HAL_TIM_Base_Stop_IT+0x48>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f022 0201 	bic.w	r2, r2, #1
 800c82e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d101      	bne.n	800c858 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	e049      	b.n	800c8ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	2b00      	cmp	r3, #0
 800c862:	d106      	bne.n	800c872 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 f841 	bl	800c8f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2202      	movs	r2, #2
 800c876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	3304      	adds	r3, #4
 800c882:	4619      	mov	r1, r3
 800c884:	4610      	mov	r0, r2
 800c886:	f000 fca1 	bl	800d1cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d109      	bne.n	800c92c <HAL_TIM_PWM_Start+0x24>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b01      	cmp	r3, #1
 800c922:	bf14      	ite	ne
 800c924:	2301      	movne	r3, #1
 800c926:	2300      	moveq	r3, #0
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	e03c      	b.n	800c9a6 <HAL_TIM_PWM_Start+0x9e>
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	2b04      	cmp	r3, #4
 800c930:	d109      	bne.n	800c946 <HAL_TIM_PWM_Start+0x3e>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	bf14      	ite	ne
 800c93e:	2301      	movne	r3, #1
 800c940:	2300      	moveq	r3, #0
 800c942:	b2db      	uxtb	r3, r3
 800c944:	e02f      	b.n	800c9a6 <HAL_TIM_PWM_Start+0x9e>
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	2b08      	cmp	r3, #8
 800c94a:	d109      	bne.n	800c960 <HAL_TIM_PWM_Start+0x58>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c952:	b2db      	uxtb	r3, r3
 800c954:	2b01      	cmp	r3, #1
 800c956:	bf14      	ite	ne
 800c958:	2301      	movne	r3, #1
 800c95a:	2300      	moveq	r3, #0
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	e022      	b.n	800c9a6 <HAL_TIM_PWM_Start+0x9e>
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	2b0c      	cmp	r3, #12
 800c964:	d109      	bne.n	800c97a <HAL_TIM_PWM_Start+0x72>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	2b01      	cmp	r3, #1
 800c970:	bf14      	ite	ne
 800c972:	2301      	movne	r3, #1
 800c974:	2300      	moveq	r3, #0
 800c976:	b2db      	uxtb	r3, r3
 800c978:	e015      	b.n	800c9a6 <HAL_TIM_PWM_Start+0x9e>
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2b10      	cmp	r3, #16
 800c97e:	d109      	bne.n	800c994 <HAL_TIM_PWM_Start+0x8c>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c986:	b2db      	uxtb	r3, r3
 800c988:	2b01      	cmp	r3, #1
 800c98a:	bf14      	ite	ne
 800c98c:	2301      	movne	r3, #1
 800c98e:	2300      	moveq	r3, #0
 800c990:	b2db      	uxtb	r3, r3
 800c992:	e008      	b.n	800c9a6 <HAL_TIM_PWM_Start+0x9e>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	bf14      	ite	ne
 800c9a0:	2301      	movne	r3, #1
 800c9a2:	2300      	moveq	r3, #0
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d001      	beq.n	800c9ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e0a1      	b.n	800caf2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d104      	bne.n	800c9be <HAL_TIM_PWM_Start+0xb6>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2202      	movs	r2, #2
 800c9b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9bc:	e023      	b.n	800ca06 <HAL_TIM_PWM_Start+0xfe>
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	2b04      	cmp	r3, #4
 800c9c2:	d104      	bne.n	800c9ce <HAL_TIM_PWM_Start+0xc6>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2202      	movs	r2, #2
 800c9c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9cc:	e01b      	b.n	800ca06 <HAL_TIM_PWM_Start+0xfe>
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	2b08      	cmp	r3, #8
 800c9d2:	d104      	bne.n	800c9de <HAL_TIM_PWM_Start+0xd6>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2202      	movs	r2, #2
 800c9d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c9dc:	e013      	b.n	800ca06 <HAL_TIM_PWM_Start+0xfe>
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2b0c      	cmp	r3, #12
 800c9e2:	d104      	bne.n	800c9ee <HAL_TIM_PWM_Start+0xe6>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2202      	movs	r2, #2
 800c9e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c9ec:	e00b      	b.n	800ca06 <HAL_TIM_PWM_Start+0xfe>
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2b10      	cmp	r3, #16
 800c9f2:	d104      	bne.n	800c9fe <HAL_TIM_PWM_Start+0xf6>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9fc:	e003      	b.n	800ca06 <HAL_TIM_PWM_Start+0xfe>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2202      	movs	r2, #2
 800ca02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	6839      	ldr	r1, [r7, #0]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f000 ffea 	bl	800d9e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a38      	ldr	r2, [pc, #224]	; (800cafc <HAL_TIM_PWM_Start+0x1f4>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d013      	beq.n	800ca46 <HAL_TIM_PWM_Start+0x13e>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a37      	ldr	r2, [pc, #220]	; (800cb00 <HAL_TIM_PWM_Start+0x1f8>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d00e      	beq.n	800ca46 <HAL_TIM_PWM_Start+0x13e>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a35      	ldr	r2, [pc, #212]	; (800cb04 <HAL_TIM_PWM_Start+0x1fc>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d009      	beq.n	800ca46 <HAL_TIM_PWM_Start+0x13e>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a34      	ldr	r2, [pc, #208]	; (800cb08 <HAL_TIM_PWM_Start+0x200>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d004      	beq.n	800ca46 <HAL_TIM_PWM_Start+0x13e>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a32      	ldr	r2, [pc, #200]	; (800cb0c <HAL_TIM_PWM_Start+0x204>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d101      	bne.n	800ca4a <HAL_TIM_PWM_Start+0x142>
 800ca46:	2301      	movs	r3, #1
 800ca48:	e000      	b.n	800ca4c <HAL_TIM_PWM_Start+0x144>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d007      	beq.n	800ca60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a25      	ldr	r2, [pc, #148]	; (800cafc <HAL_TIM_PWM_Start+0x1f4>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d022      	beq.n	800cab0 <HAL_TIM_PWM_Start+0x1a8>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca72:	d01d      	beq.n	800cab0 <HAL_TIM_PWM_Start+0x1a8>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a25      	ldr	r2, [pc, #148]	; (800cb10 <HAL_TIM_PWM_Start+0x208>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d018      	beq.n	800cab0 <HAL_TIM_PWM_Start+0x1a8>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a24      	ldr	r2, [pc, #144]	; (800cb14 <HAL_TIM_PWM_Start+0x20c>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d013      	beq.n	800cab0 <HAL_TIM_PWM_Start+0x1a8>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a22      	ldr	r2, [pc, #136]	; (800cb18 <HAL_TIM_PWM_Start+0x210>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d00e      	beq.n	800cab0 <HAL_TIM_PWM_Start+0x1a8>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4a1a      	ldr	r2, [pc, #104]	; (800cb00 <HAL_TIM_PWM_Start+0x1f8>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d009      	beq.n	800cab0 <HAL_TIM_PWM_Start+0x1a8>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a1e      	ldr	r2, [pc, #120]	; (800cb1c <HAL_TIM_PWM_Start+0x214>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d004      	beq.n	800cab0 <HAL_TIM_PWM_Start+0x1a8>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a16      	ldr	r2, [pc, #88]	; (800cb04 <HAL_TIM_PWM_Start+0x1fc>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d115      	bne.n	800cadc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	689a      	ldr	r2, [r3, #8]
 800cab6:	4b1a      	ldr	r3, [pc, #104]	; (800cb20 <HAL_TIM_PWM_Start+0x218>)
 800cab8:	4013      	ands	r3, r2
 800caba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b06      	cmp	r3, #6
 800cac0:	d015      	beq.n	800caee <HAL_TIM_PWM_Start+0x1e6>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cac8:	d011      	beq.n	800caee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f042 0201 	orr.w	r2, r2, #1
 800cad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cada:	e008      	b.n	800caee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f042 0201 	orr.w	r2, r2, #1
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	e000      	b.n	800caf0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	40010000 	.word	0x40010000
 800cb00:	40010400 	.word	0x40010400
 800cb04:	40014000 	.word	0x40014000
 800cb08:	40014400 	.word	0x40014400
 800cb0c:	40014800 	.word	0x40014800
 800cb10:	40000400 	.word	0x40000400
 800cb14:	40000800 	.word	0x40000800
 800cb18:	40000c00 	.word	0x40000c00
 800cb1c:	40001800 	.word	0x40001800
 800cb20:	00010007 	.word	0x00010007

0800cb24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	f003 0302 	and.w	r3, r3, #2
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d122      	bne.n	800cb80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	f003 0302 	and.w	r3, r3, #2
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	d11b      	bne.n	800cb80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f06f 0202 	mvn.w	r2, #2
 800cb50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2201      	movs	r2, #1
 800cb56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	f003 0303 	and.w	r3, r3, #3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d003      	beq.n	800cb6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 fb12 	bl	800d190 <HAL_TIM_IC_CaptureCallback>
 800cb6c:	e005      	b.n	800cb7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fb04 	bl	800d17c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fb15 	bl	800d1a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	f003 0304 	and.w	r3, r3, #4
 800cb8a:	2b04      	cmp	r3, #4
 800cb8c:	d122      	bne.n	800cbd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	f003 0304 	and.w	r3, r3, #4
 800cb98:	2b04      	cmp	r3, #4
 800cb9a:	d11b      	bne.n	800cbd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f06f 0204 	mvn.w	r2, #4
 800cba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2202      	movs	r2, #2
 800cbaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	699b      	ldr	r3, [r3, #24]
 800cbb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 fae8 	bl	800d190 <HAL_TIM_IC_CaptureCallback>
 800cbc0:	e005      	b.n	800cbce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 fada 	bl	800d17c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 faeb 	bl	800d1a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	691b      	ldr	r3, [r3, #16]
 800cbda:	f003 0308 	and.w	r3, r3, #8
 800cbde:	2b08      	cmp	r3, #8
 800cbe0:	d122      	bne.n	800cc28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f003 0308 	and.w	r3, r3, #8
 800cbec:	2b08      	cmp	r3, #8
 800cbee:	d11b      	bne.n	800cc28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f06f 0208 	mvn.w	r2, #8
 800cbf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2204      	movs	r2, #4
 800cbfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	69db      	ldr	r3, [r3, #28]
 800cc06:	f003 0303 	and.w	r3, r3, #3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d003      	beq.n	800cc16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fabe 	bl	800d190 <HAL_TIM_IC_CaptureCallback>
 800cc14:	e005      	b.n	800cc22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fab0 	bl	800d17c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 fac1 	bl	800d1a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	f003 0310 	and.w	r3, r3, #16
 800cc32:	2b10      	cmp	r3, #16
 800cc34:	d122      	bne.n	800cc7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	f003 0310 	and.w	r3, r3, #16
 800cc40:	2b10      	cmp	r3, #16
 800cc42:	d11b      	bne.n	800cc7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f06f 0210 	mvn.w	r2, #16
 800cc4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2208      	movs	r2, #8
 800cc52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	69db      	ldr	r3, [r3, #28]
 800cc5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fa94 	bl	800d190 <HAL_TIM_IC_CaptureCallback>
 800cc68:	e005      	b.n	800cc76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 fa86 	bl	800d17c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 fa97 	bl	800d1a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	f003 0301 	and.w	r3, r3, #1
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d10e      	bne.n	800cca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d107      	bne.n	800cca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f06f 0201 	mvn.w	r2, #1
 800cca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7f6 fc0c 	bl	80034c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccb2:	2b80      	cmp	r3, #128	; 0x80
 800ccb4:	d10e      	bne.n	800ccd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccc0:	2b80      	cmp	r3, #128	; 0x80
 800ccc2:	d107      	bne.n	800ccd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 ffc6 	bl	800dc60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cce2:	d10e      	bne.n	800cd02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccee:	2b80      	cmp	r3, #128	; 0x80
 800ccf0:	d107      	bne.n	800cd02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ccfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 ffb9 	bl	800dc74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd0c:	2b40      	cmp	r3, #64	; 0x40
 800cd0e:	d10e      	bne.n	800cd2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd1a:	2b40      	cmp	r3, #64	; 0x40
 800cd1c:	d107      	bne.n	800cd2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 fa45 	bl	800d1b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	f003 0320 	and.w	r3, r3, #32
 800cd38:	2b20      	cmp	r3, #32
 800cd3a:	d10e      	bne.n	800cd5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	f003 0320 	and.w	r3, r3, #32
 800cd46:	2b20      	cmp	r3, #32
 800cd48:	d107      	bne.n	800cd5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f06f 0220 	mvn.w	r2, #32
 800cd52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 ff79 	bl	800dc4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
	...

0800cd64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d101      	bne.n	800cd82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cd7e:	2302      	movs	r3, #2
 800cd80:	e0ff      	b.n	800cf82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b14      	cmp	r3, #20
 800cd8e:	f200 80f0 	bhi.w	800cf72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cd92:	a201      	add	r2, pc, #4	; (adr r2, 800cd98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd98:	0800cded 	.word	0x0800cded
 800cd9c:	0800cf73 	.word	0x0800cf73
 800cda0:	0800cf73 	.word	0x0800cf73
 800cda4:	0800cf73 	.word	0x0800cf73
 800cda8:	0800ce2d 	.word	0x0800ce2d
 800cdac:	0800cf73 	.word	0x0800cf73
 800cdb0:	0800cf73 	.word	0x0800cf73
 800cdb4:	0800cf73 	.word	0x0800cf73
 800cdb8:	0800ce6f 	.word	0x0800ce6f
 800cdbc:	0800cf73 	.word	0x0800cf73
 800cdc0:	0800cf73 	.word	0x0800cf73
 800cdc4:	0800cf73 	.word	0x0800cf73
 800cdc8:	0800ceaf 	.word	0x0800ceaf
 800cdcc:	0800cf73 	.word	0x0800cf73
 800cdd0:	0800cf73 	.word	0x0800cf73
 800cdd4:	0800cf73 	.word	0x0800cf73
 800cdd8:	0800cef1 	.word	0x0800cef1
 800cddc:	0800cf73 	.word	0x0800cf73
 800cde0:	0800cf73 	.word	0x0800cf73
 800cde4:	0800cf73 	.word	0x0800cf73
 800cde8:	0800cf31 	.word	0x0800cf31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	68b9      	ldr	r1, [r7, #8]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 fa84 	bl	800d300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	699a      	ldr	r2, [r3, #24]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f042 0208 	orr.w	r2, r2, #8
 800ce06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	699a      	ldr	r2, [r3, #24]
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f022 0204 	bic.w	r2, r2, #4
 800ce16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	6999      	ldr	r1, [r3, #24]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	691a      	ldr	r2, [r3, #16]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	430a      	orrs	r2, r1
 800ce28:	619a      	str	r2, [r3, #24]
      break;
 800ce2a:	e0a5      	b.n	800cf78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68b9      	ldr	r1, [r7, #8]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f000 faf4 	bl	800d420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	699a      	ldr	r2, [r3, #24]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	699a      	ldr	r2, [r3, #24]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6999      	ldr	r1, [r3, #24]
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	021a      	lsls	r2, r3, #8
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	430a      	orrs	r2, r1
 800ce6a:	619a      	str	r2, [r3, #24]
      break;
 800ce6c:	e084      	b.n	800cf78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	68b9      	ldr	r1, [r7, #8]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f000 fb5d 	bl	800d534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	69da      	ldr	r2, [r3, #28]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f042 0208 	orr.w	r2, r2, #8
 800ce88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	69da      	ldr	r2, [r3, #28]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f022 0204 	bic.w	r2, r2, #4
 800ce98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	69d9      	ldr	r1, [r3, #28]
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	691a      	ldr	r2, [r3, #16]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	430a      	orrs	r2, r1
 800ceaa:	61da      	str	r2, [r3, #28]
      break;
 800ceac:	e064      	b.n	800cf78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68b9      	ldr	r1, [r7, #8]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f000 fbc5 	bl	800d644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	69da      	ldr	r2, [r3, #28]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	69da      	ldr	r2, [r3, #28]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ced8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	69d9      	ldr	r1, [r3, #28]
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	021a      	lsls	r2, r3, #8
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	430a      	orrs	r2, r1
 800ceec:	61da      	str	r2, [r3, #28]
      break;
 800ceee:	e043      	b.n	800cf78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68b9      	ldr	r1, [r7, #8]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f000 fc0e 	bl	800d718 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f042 0208 	orr.w	r2, r2, #8
 800cf0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f022 0204 	bic.w	r2, r2, #4
 800cf1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	691a      	ldr	r2, [r3, #16]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	430a      	orrs	r2, r1
 800cf2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cf2e:	e023      	b.n	800cf78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68b9      	ldr	r1, [r7, #8]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f000 fc52 	bl	800d7e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	021a      	lsls	r2, r3, #8
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	430a      	orrs	r2, r1
 800cf6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cf70:	e002      	b.n	800cf78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	75fb      	strb	r3, [r7, #23]
      break;
 800cf76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3718      	adds	r7, #24
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop

0800cf8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d101      	bne.n	800cfa8 <HAL_TIM_ConfigClockSource+0x1c>
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	e0dc      	b.n	800d162 <HAL_TIM_ConfigClockSource+0x1d6>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	4b6a      	ldr	r3, [pc, #424]	; (800d16c <HAL_TIM_ConfigClockSource+0x1e0>)
 800cfc4:	4013      	ands	r3, r2
 800cfc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cfce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a64      	ldr	r2, [pc, #400]	; (800d170 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	f000 80a9 	beq.w	800d136 <HAL_TIM_ConfigClockSource+0x1aa>
 800cfe4:	4a62      	ldr	r2, [pc, #392]	; (800d170 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	f200 80ae 	bhi.w	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800cfec:	4a61      	ldr	r2, [pc, #388]	; (800d174 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	f000 80a1 	beq.w	800d136 <HAL_TIM_ConfigClockSource+0x1aa>
 800cff4:	4a5f      	ldr	r2, [pc, #380]	; (800d174 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	f200 80a6 	bhi.w	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800cffc:	4a5e      	ldr	r2, [pc, #376]	; (800d178 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	f000 8099 	beq.w	800d136 <HAL_TIM_ConfigClockSource+0x1aa>
 800d004:	4a5c      	ldr	r2, [pc, #368]	; (800d178 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d006:	4293      	cmp	r3, r2
 800d008:	f200 809e 	bhi.w	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d00c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d010:	f000 8091 	beq.w	800d136 <HAL_TIM_ConfigClockSource+0x1aa>
 800d014:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d018:	f200 8096 	bhi.w	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d01c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d020:	f000 8089 	beq.w	800d136 <HAL_TIM_ConfigClockSource+0x1aa>
 800d024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d028:	f200 808e 	bhi.w	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d02c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d030:	d03e      	beq.n	800d0b0 <HAL_TIM_ConfigClockSource+0x124>
 800d032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d036:	f200 8087 	bhi.w	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d03a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d03e:	f000 8086 	beq.w	800d14e <HAL_TIM_ConfigClockSource+0x1c2>
 800d042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d046:	d87f      	bhi.n	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d048:	2b70      	cmp	r3, #112	; 0x70
 800d04a:	d01a      	beq.n	800d082 <HAL_TIM_ConfigClockSource+0xf6>
 800d04c:	2b70      	cmp	r3, #112	; 0x70
 800d04e:	d87b      	bhi.n	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d050:	2b60      	cmp	r3, #96	; 0x60
 800d052:	d050      	beq.n	800d0f6 <HAL_TIM_ConfigClockSource+0x16a>
 800d054:	2b60      	cmp	r3, #96	; 0x60
 800d056:	d877      	bhi.n	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d058:	2b50      	cmp	r3, #80	; 0x50
 800d05a:	d03c      	beq.n	800d0d6 <HAL_TIM_ConfigClockSource+0x14a>
 800d05c:	2b50      	cmp	r3, #80	; 0x50
 800d05e:	d873      	bhi.n	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d060:	2b40      	cmp	r3, #64	; 0x40
 800d062:	d058      	beq.n	800d116 <HAL_TIM_ConfigClockSource+0x18a>
 800d064:	2b40      	cmp	r3, #64	; 0x40
 800d066:	d86f      	bhi.n	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d068:	2b30      	cmp	r3, #48	; 0x30
 800d06a:	d064      	beq.n	800d136 <HAL_TIM_ConfigClockSource+0x1aa>
 800d06c:	2b30      	cmp	r3, #48	; 0x30
 800d06e:	d86b      	bhi.n	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d070:	2b20      	cmp	r3, #32
 800d072:	d060      	beq.n	800d136 <HAL_TIM_ConfigClockSource+0x1aa>
 800d074:	2b20      	cmp	r3, #32
 800d076:	d867      	bhi.n	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d05c      	beq.n	800d136 <HAL_TIM_ConfigClockSource+0x1aa>
 800d07c:	2b10      	cmp	r3, #16
 800d07e:	d05a      	beq.n	800d136 <HAL_TIM_ConfigClockSource+0x1aa>
 800d080:	e062      	b.n	800d148 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6818      	ldr	r0, [r3, #0]
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	6899      	ldr	r1, [r3, #8]
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	f000 fc89 	bl	800d9a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d0a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	609a      	str	r2, [r3, #8]
      break;
 800d0ae:	e04f      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6818      	ldr	r0, [r3, #0]
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	6899      	ldr	r1, [r3, #8]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	685a      	ldr	r2, [r3, #4]
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	f000 fc72 	bl	800d9a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	689a      	ldr	r2, [r3, #8]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0d2:	609a      	str	r2, [r3, #8]
      break;
 800d0d4:	e03c      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6818      	ldr	r0, [r3, #0]
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	6859      	ldr	r1, [r3, #4]
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	f000 fbe2 	bl	800d8ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2150      	movs	r1, #80	; 0x50
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 fc3c 	bl	800d96c <TIM_ITRx_SetConfig>
      break;
 800d0f4:	e02c      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6818      	ldr	r0, [r3, #0]
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	6859      	ldr	r1, [r3, #4]
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	461a      	mov	r2, r3
 800d104:	f000 fc01 	bl	800d90a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2160      	movs	r1, #96	; 0x60
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 fc2c 	bl	800d96c <TIM_ITRx_SetConfig>
      break;
 800d114:	e01c      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6818      	ldr	r0, [r3, #0]
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	6859      	ldr	r1, [r3, #4]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	68db      	ldr	r3, [r3, #12]
 800d122:	461a      	mov	r2, r3
 800d124:	f000 fbc2 	bl	800d8ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2140      	movs	r1, #64	; 0x40
 800d12e:	4618      	mov	r0, r3
 800d130:	f000 fc1c 	bl	800d96c <TIM_ITRx_SetConfig>
      break;
 800d134:	e00c      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4619      	mov	r1, r3
 800d140:	4610      	mov	r0, r2
 800d142:	f000 fc13 	bl	800d96c <TIM_ITRx_SetConfig>
      break;
 800d146:	e003      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	73fb      	strb	r3, [r7, #15]
      break;
 800d14c:	e000      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d14e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d160:	7bfb      	ldrb	r3, [r7, #15]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	ffceff88 	.word	0xffceff88
 800d170:	00100040 	.word	0x00100040
 800d174:	00100030 	.word	0x00100030
 800d178:	00100020 	.word	0x00100020

0800d17c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d184:	bf00      	nop
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d198:	bf00      	nop
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1ac:	bf00      	nop
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1c0:	bf00      	nop
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	4a40      	ldr	r2, [pc, #256]	; (800d2e0 <TIM_Base_SetConfig+0x114>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d013      	beq.n	800d20c <TIM_Base_SetConfig+0x40>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1ea:	d00f      	beq.n	800d20c <TIM_Base_SetConfig+0x40>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4a3d      	ldr	r2, [pc, #244]	; (800d2e4 <TIM_Base_SetConfig+0x118>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d00b      	beq.n	800d20c <TIM_Base_SetConfig+0x40>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4a3c      	ldr	r2, [pc, #240]	; (800d2e8 <TIM_Base_SetConfig+0x11c>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d007      	beq.n	800d20c <TIM_Base_SetConfig+0x40>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4a3b      	ldr	r2, [pc, #236]	; (800d2ec <TIM_Base_SetConfig+0x120>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d003      	beq.n	800d20c <TIM_Base_SetConfig+0x40>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a3a      	ldr	r2, [pc, #232]	; (800d2f0 <TIM_Base_SetConfig+0x124>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d108      	bne.n	800d21e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4a2f      	ldr	r2, [pc, #188]	; (800d2e0 <TIM_Base_SetConfig+0x114>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d01f      	beq.n	800d266 <TIM_Base_SetConfig+0x9a>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d22c:	d01b      	beq.n	800d266 <TIM_Base_SetConfig+0x9a>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4a2c      	ldr	r2, [pc, #176]	; (800d2e4 <TIM_Base_SetConfig+0x118>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d017      	beq.n	800d266 <TIM_Base_SetConfig+0x9a>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4a2b      	ldr	r2, [pc, #172]	; (800d2e8 <TIM_Base_SetConfig+0x11c>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d013      	beq.n	800d266 <TIM_Base_SetConfig+0x9a>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4a2a      	ldr	r2, [pc, #168]	; (800d2ec <TIM_Base_SetConfig+0x120>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d00f      	beq.n	800d266 <TIM_Base_SetConfig+0x9a>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4a29      	ldr	r2, [pc, #164]	; (800d2f0 <TIM_Base_SetConfig+0x124>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d00b      	beq.n	800d266 <TIM_Base_SetConfig+0x9a>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4a28      	ldr	r2, [pc, #160]	; (800d2f4 <TIM_Base_SetConfig+0x128>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d007      	beq.n	800d266 <TIM_Base_SetConfig+0x9a>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4a27      	ldr	r2, [pc, #156]	; (800d2f8 <TIM_Base_SetConfig+0x12c>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d003      	beq.n	800d266 <TIM_Base_SetConfig+0x9a>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4a26      	ldr	r2, [pc, #152]	; (800d2fc <TIM_Base_SetConfig+0x130>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d108      	bne.n	800d278 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d26c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	4313      	orrs	r3, r2
 800d276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	695b      	ldr	r3, [r3, #20]
 800d282:	4313      	orrs	r3, r2
 800d284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	689a      	ldr	r2, [r3, #8]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4a10      	ldr	r2, [pc, #64]	; (800d2e0 <TIM_Base_SetConfig+0x114>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d00f      	beq.n	800d2c4 <TIM_Base_SetConfig+0xf8>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a12      	ldr	r2, [pc, #72]	; (800d2f0 <TIM_Base_SetConfig+0x124>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d00b      	beq.n	800d2c4 <TIM_Base_SetConfig+0xf8>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a11      	ldr	r2, [pc, #68]	; (800d2f4 <TIM_Base_SetConfig+0x128>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d007      	beq.n	800d2c4 <TIM_Base_SetConfig+0xf8>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a10      	ldr	r2, [pc, #64]	; (800d2f8 <TIM_Base_SetConfig+0x12c>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d003      	beq.n	800d2c4 <TIM_Base_SetConfig+0xf8>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a0f      	ldr	r2, [pc, #60]	; (800d2fc <TIM_Base_SetConfig+0x130>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d103      	bne.n	800d2cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	691a      	ldr	r2, [r3, #16]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	615a      	str	r2, [r3, #20]
}
 800d2d2:	bf00      	nop
 800d2d4:	3714      	adds	r7, #20
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	40010000 	.word	0x40010000
 800d2e4:	40000400 	.word	0x40000400
 800d2e8:	40000800 	.word	0x40000800
 800d2ec:	40000c00 	.word	0x40000c00
 800d2f0:	40010400 	.word	0x40010400
 800d2f4:	40014000 	.word	0x40014000
 800d2f8:	40014400 	.word	0x40014400
 800d2fc:	40014800 	.word	0x40014800

0800d300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d300:	b480      	push	{r7}
 800d302:	b087      	sub	sp, #28
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a1b      	ldr	r3, [r3, #32]
 800d30e:	f023 0201 	bic.w	r2, r3, #1
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6a1b      	ldr	r3, [r3, #32]
 800d31a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	699b      	ldr	r3, [r3, #24]
 800d326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	4b37      	ldr	r3, [pc, #220]	; (800d408 <TIM_OC1_SetConfig+0x108>)
 800d32c:	4013      	ands	r3, r2
 800d32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f023 0303 	bic.w	r3, r3, #3
 800d336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	4313      	orrs	r3, r2
 800d340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	f023 0302 	bic.w	r3, r3, #2
 800d348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	4313      	orrs	r3, r2
 800d352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4a2d      	ldr	r2, [pc, #180]	; (800d40c <TIM_OC1_SetConfig+0x10c>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d00f      	beq.n	800d37c <TIM_OC1_SetConfig+0x7c>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a2c      	ldr	r2, [pc, #176]	; (800d410 <TIM_OC1_SetConfig+0x110>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d00b      	beq.n	800d37c <TIM_OC1_SetConfig+0x7c>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a2b      	ldr	r2, [pc, #172]	; (800d414 <TIM_OC1_SetConfig+0x114>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d007      	beq.n	800d37c <TIM_OC1_SetConfig+0x7c>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a2a      	ldr	r2, [pc, #168]	; (800d418 <TIM_OC1_SetConfig+0x118>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d003      	beq.n	800d37c <TIM_OC1_SetConfig+0x7c>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a29      	ldr	r2, [pc, #164]	; (800d41c <TIM_OC1_SetConfig+0x11c>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d10c      	bne.n	800d396 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	f023 0308 	bic.w	r3, r3, #8
 800d382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	697a      	ldr	r2, [r7, #20]
 800d38a:	4313      	orrs	r3, r2
 800d38c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	f023 0304 	bic.w	r3, r3, #4
 800d394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4a1c      	ldr	r2, [pc, #112]	; (800d40c <TIM_OC1_SetConfig+0x10c>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d00f      	beq.n	800d3be <TIM_OC1_SetConfig+0xbe>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4a1b      	ldr	r2, [pc, #108]	; (800d410 <TIM_OC1_SetConfig+0x110>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d00b      	beq.n	800d3be <TIM_OC1_SetConfig+0xbe>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a1a      	ldr	r2, [pc, #104]	; (800d414 <TIM_OC1_SetConfig+0x114>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d007      	beq.n	800d3be <TIM_OC1_SetConfig+0xbe>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4a19      	ldr	r2, [pc, #100]	; (800d418 <TIM_OC1_SetConfig+0x118>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d003      	beq.n	800d3be <TIM_OC1_SetConfig+0xbe>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4a18      	ldr	r2, [pc, #96]	; (800d41c <TIM_OC1_SetConfig+0x11c>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d111      	bne.n	800d3e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	695b      	ldr	r3, [r3, #20]
 800d3d2:	693a      	ldr	r2, [r7, #16]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	699b      	ldr	r3, [r3, #24]
 800d3dc:	693a      	ldr	r2, [r7, #16]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	685a      	ldr	r2, [r3, #4]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	697a      	ldr	r2, [r7, #20]
 800d3fa:	621a      	str	r2, [r3, #32]
}
 800d3fc:	bf00      	nop
 800d3fe:	371c      	adds	r7, #28
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	fffeff8f 	.word	0xfffeff8f
 800d40c:	40010000 	.word	0x40010000
 800d410:	40010400 	.word	0x40010400
 800d414:	40014000 	.word	0x40014000
 800d418:	40014400 	.word	0x40014400
 800d41c:	40014800 	.word	0x40014800

0800d420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d420:	b480      	push	{r7}
 800d422:	b087      	sub	sp, #28
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a1b      	ldr	r3, [r3, #32]
 800d42e:	f023 0210 	bic.w	r2, r3, #16
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a1b      	ldr	r3, [r3, #32]
 800d43a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	699b      	ldr	r3, [r3, #24]
 800d446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	4b34      	ldr	r3, [pc, #208]	; (800d51c <TIM_OC2_SetConfig+0xfc>)
 800d44c:	4013      	ands	r3, r2
 800d44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	021b      	lsls	r3, r3, #8
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	4313      	orrs	r3, r2
 800d462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	f023 0320 	bic.w	r3, r3, #32
 800d46a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	011b      	lsls	r3, r3, #4
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	4313      	orrs	r3, r2
 800d476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a29      	ldr	r2, [pc, #164]	; (800d520 <TIM_OC2_SetConfig+0x100>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d003      	beq.n	800d488 <TIM_OC2_SetConfig+0x68>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a28      	ldr	r2, [pc, #160]	; (800d524 <TIM_OC2_SetConfig+0x104>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d10d      	bne.n	800d4a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d48e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	011b      	lsls	r3, r3, #4
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	4313      	orrs	r3, r2
 800d49a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4a1e      	ldr	r2, [pc, #120]	; (800d520 <TIM_OC2_SetConfig+0x100>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d00f      	beq.n	800d4cc <TIM_OC2_SetConfig+0xac>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4a1d      	ldr	r2, [pc, #116]	; (800d524 <TIM_OC2_SetConfig+0x104>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d00b      	beq.n	800d4cc <TIM_OC2_SetConfig+0xac>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4a1c      	ldr	r2, [pc, #112]	; (800d528 <TIM_OC2_SetConfig+0x108>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d007      	beq.n	800d4cc <TIM_OC2_SetConfig+0xac>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	4a1b      	ldr	r2, [pc, #108]	; (800d52c <TIM_OC2_SetConfig+0x10c>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d003      	beq.n	800d4cc <TIM_OC2_SetConfig+0xac>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	4a1a      	ldr	r2, [pc, #104]	; (800d530 <TIM_OC2_SetConfig+0x110>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d113      	bne.n	800d4f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d4d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d4da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	695b      	ldr	r3, [r3, #20]
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	693a      	ldr	r2, [r7, #16]
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	699b      	ldr	r3, [r3, #24]
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	693a      	ldr	r2, [r7, #16]
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	685a      	ldr	r2, [r3, #4]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	621a      	str	r2, [r3, #32]
}
 800d50e:	bf00      	nop
 800d510:	371c      	adds	r7, #28
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	feff8fff 	.word	0xfeff8fff
 800d520:	40010000 	.word	0x40010000
 800d524:	40010400 	.word	0x40010400
 800d528:	40014000 	.word	0x40014000
 800d52c:	40014400 	.word	0x40014400
 800d530:	40014800 	.word	0x40014800

0800d534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d534:	b480      	push	{r7}
 800d536:	b087      	sub	sp, #28
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6a1b      	ldr	r3, [r3, #32]
 800d542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6a1b      	ldr	r3, [r3, #32]
 800d54e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	69db      	ldr	r3, [r3, #28]
 800d55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	4b33      	ldr	r3, [pc, #204]	; (800d62c <TIM_OC3_SetConfig+0xf8>)
 800d560:	4013      	ands	r3, r2
 800d562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f023 0303 	bic.w	r3, r3, #3
 800d56a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	4313      	orrs	r3, r2
 800d574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d57c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	021b      	lsls	r3, r3, #8
 800d584:	697a      	ldr	r2, [r7, #20]
 800d586:	4313      	orrs	r3, r2
 800d588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	4a28      	ldr	r2, [pc, #160]	; (800d630 <TIM_OC3_SetConfig+0xfc>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d003      	beq.n	800d59a <TIM_OC3_SetConfig+0x66>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4a27      	ldr	r2, [pc, #156]	; (800d634 <TIM_OC3_SetConfig+0x100>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d10d      	bne.n	800d5b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	021b      	lsls	r3, r3, #8
 800d5a8:	697a      	ldr	r2, [r7, #20]
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a1d      	ldr	r2, [pc, #116]	; (800d630 <TIM_OC3_SetConfig+0xfc>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d00f      	beq.n	800d5de <TIM_OC3_SetConfig+0xaa>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a1c      	ldr	r2, [pc, #112]	; (800d634 <TIM_OC3_SetConfig+0x100>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d00b      	beq.n	800d5de <TIM_OC3_SetConfig+0xaa>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4a1b      	ldr	r2, [pc, #108]	; (800d638 <TIM_OC3_SetConfig+0x104>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d007      	beq.n	800d5de <TIM_OC3_SetConfig+0xaa>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4a1a      	ldr	r2, [pc, #104]	; (800d63c <TIM_OC3_SetConfig+0x108>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d003      	beq.n	800d5de <TIM_OC3_SetConfig+0xaa>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a19      	ldr	r2, [pc, #100]	; (800d640 <TIM_OC3_SetConfig+0x10c>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d113      	bne.n	800d606 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d5ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	011b      	lsls	r3, r3, #4
 800d5f4:	693a      	ldr	r2, [r7, #16]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	011b      	lsls	r3, r3, #4
 800d600:	693a      	ldr	r2, [r7, #16]
 800d602:	4313      	orrs	r3, r2
 800d604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	621a      	str	r2, [r3, #32]
}
 800d620:	bf00      	nop
 800d622:	371c      	adds	r7, #28
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr
 800d62c:	fffeff8f 	.word	0xfffeff8f
 800d630:	40010000 	.word	0x40010000
 800d634:	40010400 	.word	0x40010400
 800d638:	40014000 	.word	0x40014000
 800d63c:	40014400 	.word	0x40014400
 800d640:	40014800 	.word	0x40014800

0800d644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d644:	b480      	push	{r7}
 800d646:	b087      	sub	sp, #28
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	69db      	ldr	r3, [r3, #28]
 800d66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d66c:	68fa      	ldr	r2, [r7, #12]
 800d66e:	4b24      	ldr	r3, [pc, #144]	; (800d700 <TIM_OC4_SetConfig+0xbc>)
 800d670:	4013      	ands	r3, r2
 800d672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d67a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	021b      	lsls	r3, r3, #8
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	4313      	orrs	r3, r2
 800d686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d68e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	031b      	lsls	r3, r3, #12
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	4313      	orrs	r3, r2
 800d69a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4a19      	ldr	r2, [pc, #100]	; (800d704 <TIM_OC4_SetConfig+0xc0>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d00f      	beq.n	800d6c4 <TIM_OC4_SetConfig+0x80>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4a18      	ldr	r2, [pc, #96]	; (800d708 <TIM_OC4_SetConfig+0xc4>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d00b      	beq.n	800d6c4 <TIM_OC4_SetConfig+0x80>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a17      	ldr	r2, [pc, #92]	; (800d70c <TIM_OC4_SetConfig+0xc8>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d007      	beq.n	800d6c4 <TIM_OC4_SetConfig+0x80>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a16      	ldr	r2, [pc, #88]	; (800d710 <TIM_OC4_SetConfig+0xcc>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d003      	beq.n	800d6c4 <TIM_OC4_SetConfig+0x80>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a15      	ldr	r2, [pc, #84]	; (800d714 <TIM_OC4_SetConfig+0xd0>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d109      	bne.n	800d6d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	695b      	ldr	r3, [r3, #20]
 800d6d0:	019b      	lsls	r3, r3, #6
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	697a      	ldr	r2, [r7, #20]
 800d6dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	685a      	ldr	r2, [r3, #4]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	621a      	str	r2, [r3, #32]
}
 800d6f2:	bf00      	nop
 800d6f4:	371c      	adds	r7, #28
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	feff8fff 	.word	0xfeff8fff
 800d704:	40010000 	.word	0x40010000
 800d708:	40010400 	.word	0x40010400
 800d70c:	40014000 	.word	0x40014000
 800d710:	40014400 	.word	0x40014400
 800d714:	40014800 	.word	0x40014800

0800d718 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d718:	b480      	push	{r7}
 800d71a:	b087      	sub	sp, #28
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6a1b      	ldr	r3, [r3, #32]
 800d726:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a1b      	ldr	r3, [r3, #32]
 800d732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	4b21      	ldr	r3, [pc, #132]	; (800d7c8 <TIM_OC5_SetConfig+0xb0>)
 800d744:	4013      	ands	r3, r2
 800d746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4313      	orrs	r3, r2
 800d750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	041b      	lsls	r3, r3, #16
 800d760:	693a      	ldr	r2, [r7, #16]
 800d762:	4313      	orrs	r3, r2
 800d764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	4a18      	ldr	r2, [pc, #96]	; (800d7cc <TIM_OC5_SetConfig+0xb4>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d00f      	beq.n	800d78e <TIM_OC5_SetConfig+0x76>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4a17      	ldr	r2, [pc, #92]	; (800d7d0 <TIM_OC5_SetConfig+0xb8>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d00b      	beq.n	800d78e <TIM_OC5_SetConfig+0x76>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4a16      	ldr	r2, [pc, #88]	; (800d7d4 <TIM_OC5_SetConfig+0xbc>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d007      	beq.n	800d78e <TIM_OC5_SetConfig+0x76>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a15      	ldr	r2, [pc, #84]	; (800d7d8 <TIM_OC5_SetConfig+0xc0>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d003      	beq.n	800d78e <TIM_OC5_SetConfig+0x76>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	4a14      	ldr	r2, [pc, #80]	; (800d7dc <TIM_OC5_SetConfig+0xc4>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d109      	bne.n	800d7a2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	695b      	ldr	r3, [r3, #20]
 800d79a:	021b      	lsls	r3, r3, #8
 800d79c:	697a      	ldr	r2, [r7, #20]
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	697a      	ldr	r2, [r7, #20]
 800d7a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	685a      	ldr	r2, [r3, #4]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	693a      	ldr	r2, [r7, #16]
 800d7ba:	621a      	str	r2, [r3, #32]
}
 800d7bc:	bf00      	nop
 800d7be:	371c      	adds	r7, #28
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	fffeff8f 	.word	0xfffeff8f
 800d7cc:	40010000 	.word	0x40010000
 800d7d0:	40010400 	.word	0x40010400
 800d7d4:	40014000 	.word	0x40014000
 800d7d8:	40014400 	.word	0x40014400
 800d7dc:	40014800 	.word	0x40014800

0800d7e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b087      	sub	sp, #28
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a1b      	ldr	r3, [r3, #32]
 800d7ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a1b      	ldr	r3, [r3, #32]
 800d7fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	4b22      	ldr	r3, [pc, #136]	; (800d894 <TIM_OC6_SetConfig+0xb4>)
 800d80c:	4013      	ands	r3, r2
 800d80e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	021b      	lsls	r3, r3, #8
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	4313      	orrs	r3, r2
 800d81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	051b      	lsls	r3, r3, #20
 800d82a:	693a      	ldr	r2, [r7, #16]
 800d82c:	4313      	orrs	r3, r2
 800d82e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	4a19      	ldr	r2, [pc, #100]	; (800d898 <TIM_OC6_SetConfig+0xb8>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d00f      	beq.n	800d858 <TIM_OC6_SetConfig+0x78>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	4a18      	ldr	r2, [pc, #96]	; (800d89c <TIM_OC6_SetConfig+0xbc>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d00b      	beq.n	800d858 <TIM_OC6_SetConfig+0x78>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	4a17      	ldr	r2, [pc, #92]	; (800d8a0 <TIM_OC6_SetConfig+0xc0>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d007      	beq.n	800d858 <TIM_OC6_SetConfig+0x78>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	4a16      	ldr	r2, [pc, #88]	; (800d8a4 <TIM_OC6_SetConfig+0xc4>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d003      	beq.n	800d858 <TIM_OC6_SetConfig+0x78>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	4a15      	ldr	r2, [pc, #84]	; (800d8a8 <TIM_OC6_SetConfig+0xc8>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d109      	bne.n	800d86c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d85e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	695b      	ldr	r3, [r3, #20]
 800d864:	029b      	lsls	r3, r3, #10
 800d866:	697a      	ldr	r2, [r7, #20]
 800d868:	4313      	orrs	r3, r2
 800d86a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	685a      	ldr	r2, [r3, #4]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	693a      	ldr	r2, [r7, #16]
 800d884:	621a      	str	r2, [r3, #32]
}
 800d886:	bf00      	nop
 800d888:	371c      	adds	r7, #28
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	feff8fff 	.word	0xfeff8fff
 800d898:	40010000 	.word	0x40010000
 800d89c:	40010400 	.word	0x40010400
 800d8a0:	40014000 	.word	0x40014000
 800d8a4:	40014400 	.word	0x40014400
 800d8a8:	40014800 	.word	0x40014800

0800d8ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b087      	sub	sp, #28
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6a1b      	ldr	r3, [r3, #32]
 800d8bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	f023 0201 	bic.w	r2, r3, #1
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	011b      	lsls	r3, r3, #4
 800d8dc:	693a      	ldr	r2, [r7, #16]
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f023 030a 	bic.w	r3, r3, #10
 800d8e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	621a      	str	r2, [r3, #32]
}
 800d8fe:	bf00      	nop
 800d900:	371c      	adds	r7, #28
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d90a:	b480      	push	{r7}
 800d90c:	b087      	sub	sp, #28
 800d90e:	af00      	add	r7, sp, #0
 800d910:	60f8      	str	r0, [r7, #12]
 800d912:	60b9      	str	r1, [r7, #8]
 800d914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	6a1b      	ldr	r3, [r3, #32]
 800d91a:	f023 0210 	bic.w	r2, r3, #16
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	699b      	ldr	r3, [r3, #24]
 800d926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6a1b      	ldr	r3, [r3, #32]
 800d92c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	031b      	lsls	r3, r3, #12
 800d93a:	697a      	ldr	r2, [r7, #20]
 800d93c:	4313      	orrs	r3, r2
 800d93e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d946:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	011b      	lsls	r3, r3, #4
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	4313      	orrs	r3, r2
 800d950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	697a      	ldr	r2, [r7, #20]
 800d956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	693a      	ldr	r2, [r7, #16]
 800d95c:	621a      	str	r2, [r3, #32]
}
 800d95e:	bf00      	nop
 800d960:	371c      	adds	r7, #28
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
	...

0800d96c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	4b09      	ldr	r3, [pc, #36]	; (800d9a4 <TIM_ITRx_SetConfig+0x38>)
 800d980:	4013      	ands	r3, r2
 800d982:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d984:	683a      	ldr	r2, [r7, #0]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	4313      	orrs	r3, r2
 800d98a:	f043 0307 	orr.w	r3, r3, #7
 800d98e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	609a      	str	r2, [r3, #8]
}
 800d996:	bf00      	nop
 800d998:	3714      	adds	r7, #20
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	ffcfff8f 	.word	0xffcfff8f

0800d9a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b087      	sub	sp, #28
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	021a      	lsls	r2, r3, #8
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	609a      	str	r2, [r3, #8]
}
 800d9dc:	bf00      	nop
 800d9de:	371c      	adds	r7, #28
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b087      	sub	sp, #28
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	f003 031f 	and.w	r3, r3, #31
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800da00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6a1a      	ldr	r2, [r3, #32]
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	43db      	mvns	r3, r3
 800da0a:	401a      	ands	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	6a1a      	ldr	r2, [r3, #32]
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	f003 031f 	and.w	r3, r3, #31
 800da1a:	6879      	ldr	r1, [r7, #4]
 800da1c:	fa01 f303 	lsl.w	r3, r1, r3
 800da20:	431a      	orrs	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	621a      	str	r2, [r3, #32]
}
 800da26:	bf00      	nop
 800da28:	371c      	adds	r7, #28
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr
	...

0800da34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da34:	b480      	push	{r7}
 800da36:	b085      	sub	sp, #20
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da44:	2b01      	cmp	r3, #1
 800da46:	d101      	bne.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da48:	2302      	movs	r3, #2
 800da4a:	e06d      	b.n	800db28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2202      	movs	r2, #2
 800da58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a30      	ldr	r2, [pc, #192]	; (800db34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d004      	beq.n	800da80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a2f      	ldr	r2, [pc, #188]	; (800db38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d108      	bne.n	800da92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800da86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	4313      	orrs	r3, r2
 800da90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	4313      	orrs	r3, r2
 800daa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a20      	ldr	r2, [pc, #128]	; (800db34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d022      	beq.n	800dafc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dabe:	d01d      	beq.n	800dafc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a1d      	ldr	r2, [pc, #116]	; (800db3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d018      	beq.n	800dafc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a1c      	ldr	r2, [pc, #112]	; (800db40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d013      	beq.n	800dafc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a1a      	ldr	r2, [pc, #104]	; (800db44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d00e      	beq.n	800dafc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a15      	ldr	r2, [pc, #84]	; (800db38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d009      	beq.n	800dafc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a16      	ldr	r2, [pc, #88]	; (800db48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d004      	beq.n	800dafc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a15      	ldr	r2, [pc, #84]	; (800db4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d10c      	bne.n	800db16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2201      	movs	r2, #1
 800db1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3714      	adds	r7, #20
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr
 800db34:	40010000 	.word	0x40010000
 800db38:	40010400 	.word	0x40010400
 800db3c:	40000400 	.word	0x40000400
 800db40:	40000800 	.word	0x40000800
 800db44:	40000c00 	.word	0x40000c00
 800db48:	40001800 	.word	0x40001800
 800db4c:	40014000 	.word	0x40014000

0800db50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800db50:	b480      	push	{r7}
 800db52:	b085      	sub	sp, #20
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800db5a:	2300      	movs	r3, #0
 800db5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db64:	2b01      	cmp	r3, #1
 800db66:	d101      	bne.n	800db6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800db68:	2302      	movs	r3, #2
 800db6a:	e065      	b.n	800dc38 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	4313      	orrs	r3, r2
 800db80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	4313      	orrs	r3, r2
 800db8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	695b      	ldr	r3, [r3, #20]
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	699b      	ldr	r3, [r3, #24]
 800dbe0:	041b      	lsls	r3, r3, #16
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a16      	ldr	r2, [pc, #88]	; (800dc44 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d004      	beq.n	800dbfa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a14      	ldr	r2, [pc, #80]	; (800dc48 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d115      	bne.n	800dc26 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc04:	051b      	lsls	r3, r3, #20
 800dc06:	4313      	orrs	r3, r2
 800dc08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	69db      	ldr	r3, [r3, #28]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	6a1b      	ldr	r3, [r3, #32]
 800dc22:	4313      	orrs	r3, r2
 800dc24:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc36:	2300      	movs	r3, #0
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3714      	adds	r7, #20
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	40010000 	.word	0x40010000
 800dc48:	40010400 	.word	0x40010400

0800dc4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc68:	bf00      	nop
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc7c:	bf00      	nop
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	e042      	b.n	800dd20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d106      	bne.n	800dcb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f7f8 f947 	bl	8005f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2224      	movs	r2, #36	; 0x24
 800dcb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f022 0201 	bic.w	r2, r2, #1
 800dcc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 fdf8 	bl	800e8c0 <UART_SetConfig>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	d101      	bne.n	800dcda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e022      	b.n	800dd20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d002      	beq.n	800dce8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f001 fb4c 	bl	800f380 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	685a      	ldr	r2, [r3, #4]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dcf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	689a      	ldr	r2, [r3, #8]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f042 0201 	orr.w	r2, r2, #1
 800dd16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f001 fbd3 	bl	800f4c4 <UART_CheckIdleState>
 800dd1e:	4603      	mov	r3, r0
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af02      	add	r7, sp, #8
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	603b      	str	r3, [r7, #0]
 800dd34:	4613      	mov	r3, r2
 800dd36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd3e:	2b20      	cmp	r3, #32
 800dd40:	f040 8083 	bne.w	800de4a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d002      	beq.n	800dd50 <HAL_UART_Transmit+0x28>
 800dd4a:	88fb      	ldrh	r3, [r7, #6]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d101      	bne.n	800dd54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dd50:	2301      	movs	r3, #1
 800dd52:	e07b      	b.n	800de4c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d101      	bne.n	800dd62 <HAL_UART_Transmit+0x3a>
 800dd5e:	2302      	movs	r3, #2
 800dd60:	e074      	b.n	800de4c <HAL_UART_Transmit+0x124>
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2221      	movs	r2, #33	; 0x21
 800dd76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dd7a:	f7f8 fc7d 	bl	8006678 <HAL_GetTick>
 800dd7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	88fa      	ldrh	r2, [r7, #6]
 800dd84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	88fa      	ldrh	r2, [r7, #6]
 800dd8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd98:	d108      	bne.n	800ddac <HAL_UART_Transmit+0x84>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d104      	bne.n	800ddac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800dda2:	2300      	movs	r3, #0
 800dda4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	61bb      	str	r3, [r7, #24]
 800ddaa:	e003      	b.n	800ddb4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ddbc:	e02c      	b.n	800de18 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	2180      	movs	r1, #128	; 0x80
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f001 fbc6 	bl	800f55a <UART_WaitOnFlagUntilTimeout>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	e039      	b.n	800de4c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d10b      	bne.n	800ddf6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	461a      	mov	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ddec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	3302      	adds	r3, #2
 800ddf2:	61bb      	str	r3, [r7, #24]
 800ddf4:	e007      	b.n	800de06 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	781a      	ldrb	r2, [r3, #0]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	3301      	adds	r3, #1
 800de04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	3b01      	subs	r3, #1
 800de10:	b29a      	uxth	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de1e:	b29b      	uxth	r3, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1cc      	bne.n	800ddbe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	9300      	str	r3, [sp, #0]
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2200      	movs	r2, #0
 800de2c:	2140      	movs	r1, #64	; 0x40
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	f001 fb93 	bl	800f55a <UART_WaitOnFlagUntilTimeout>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800de3a:	2303      	movs	r3, #3
 800de3c:	e006      	b.n	800de4c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2220      	movs	r2, #32
 800de42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800de46:	2300      	movs	r3, #0
 800de48:	e000      	b.n	800de4c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800de4a:	2302      	movs	r3, #2
  }
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3720      	adds	r7, #32
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b08a      	sub	sp, #40	; 0x28
 800de58:	af02      	add	r7, sp, #8
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	603b      	str	r3, [r7, #0]
 800de60:	4613      	mov	r3, r2
 800de62:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de6a:	2b20      	cmp	r3, #32
 800de6c:	f040 80c0 	bne.w	800dff0 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <HAL_UART_Receive+0x28>
 800de76:	88fb      	ldrh	r3, [r7, #6]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d101      	bne.n	800de80 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800de7c:	2301      	movs	r3, #1
 800de7e:	e0b8      	b.n	800dff2 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de86:	2b01      	cmp	r3, #1
 800de88:	d101      	bne.n	800de8e <HAL_UART_Receive+0x3a>
 800de8a:	2302      	movs	r3, #2
 800de8c:	e0b1      	b.n	800dff2 <HAL_UART_Receive+0x19e>
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2201      	movs	r2, #1
 800de92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2200      	movs	r2, #0
 800de9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2222      	movs	r2, #34	; 0x22
 800dea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800deac:	f7f8 fbe4 	bl	8006678 <HAL_GetTick>
 800deb0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	88fa      	ldrh	r2, [r7, #6]
 800deb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	88fa      	ldrh	r2, [r7, #6]
 800debe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deca:	d10e      	bne.n	800deea <HAL_UART_Receive+0x96>
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	691b      	ldr	r3, [r3, #16]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d105      	bne.n	800dee0 <HAL_UART_Receive+0x8c>
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800deda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dede:	e02d      	b.n	800df3c <HAL_UART_Receive+0xe8>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	22ff      	movs	r2, #255	; 0xff
 800dee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dee8:	e028      	b.n	800df3c <HAL_UART_Receive+0xe8>
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d10d      	bne.n	800df0e <HAL_UART_Receive+0xba>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d104      	bne.n	800df04 <HAL_UART_Receive+0xb0>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	22ff      	movs	r2, #255	; 0xff
 800defe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df02:	e01b      	b.n	800df3c <HAL_UART_Receive+0xe8>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	227f      	movs	r2, #127	; 0x7f
 800df08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df0c:	e016      	b.n	800df3c <HAL_UART_Receive+0xe8>
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df16:	d10d      	bne.n	800df34 <HAL_UART_Receive+0xe0>
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d104      	bne.n	800df2a <HAL_UART_Receive+0xd6>
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	227f      	movs	r2, #127	; 0x7f
 800df24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df28:	e008      	b.n	800df3c <HAL_UART_Receive+0xe8>
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	223f      	movs	r2, #63	; 0x3f
 800df2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df32:	e003      	b.n	800df3c <HAL_UART_Receive+0xe8>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800df42:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df4c:	d108      	bne.n	800df60 <HAL_UART_Receive+0x10c>
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d104      	bne.n	800df60 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800df56:	2300      	movs	r3, #0
 800df58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	61bb      	str	r3, [r7, #24]
 800df5e:	e003      	b.n	800df68 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df64:	2300      	movs	r3, #0
 800df66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2200      	movs	r2, #0
 800df6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800df70:	e032      	b.n	800dfd8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	2200      	movs	r2, #0
 800df7a:	2120      	movs	r1, #32
 800df7c:	68f8      	ldr	r0, [r7, #12]
 800df7e:	f001 faec 	bl	800f55a <UART_WaitOnFlagUntilTimeout>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	d001      	beq.n	800df8c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800df88:	2303      	movs	r3, #3
 800df8a:	e032      	b.n	800dff2 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10c      	bne.n	800dfac <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df98:	b29a      	uxth	r2, r3
 800df9a:	8a7b      	ldrh	r3, [r7, #18]
 800df9c:	4013      	ands	r3, r2
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dfa4:	69bb      	ldr	r3, [r7, #24]
 800dfa6:	3302      	adds	r3, #2
 800dfa8:	61bb      	str	r3, [r7, #24]
 800dfaa:	e00c      	b.n	800dfc6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	8a7b      	ldrh	r3, [r7, #18]
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	4013      	ands	r3, r2
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1c6      	bne.n	800df72 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2220      	movs	r2, #32
 800dfe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dfec:	2300      	movs	r3, #0
 800dfee:	e000      	b.n	800dff2 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800dff0:	2302      	movs	r3, #2
  }
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3720      	adds	r7, #32
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
	...

0800dffc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b08a      	sub	sp, #40	; 0x28
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	4613      	mov	r3, r2
 800e008:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e010:	2b20      	cmp	r3, #32
 800e012:	d17a      	bne.n	800e10a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <HAL_UART_Transmit_DMA+0x24>
 800e01a:	88fb      	ldrh	r3, [r7, #6]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d101      	bne.n	800e024 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e020:	2301      	movs	r3, #1
 800e022:	e073      	b.n	800e10c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d101      	bne.n	800e032 <HAL_UART_Transmit_DMA+0x36>
 800e02e:	2302      	movs	r3, #2
 800e030:	e06c      	b.n	800e10c <HAL_UART_Transmit_DMA+0x110>
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2201      	movs	r2, #1
 800e036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	88fa      	ldrh	r2, [r7, #6]
 800e044:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	88fa      	ldrh	r2, [r7, #6]
 800e04c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2200      	movs	r2, #0
 800e054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2221      	movs	r2, #33	; 0x21
 800e05c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e064:	2b00      	cmp	r3, #0
 800e066:	d02c      	beq.n	800e0c2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e06c:	4a29      	ldr	r2, [pc, #164]	; (800e114 <HAL_UART_Transmit_DMA+0x118>)
 800e06e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e074:	4a28      	ldr	r2, [pc, #160]	; (800e118 <HAL_UART_Transmit_DMA+0x11c>)
 800e076:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e07c:	4a27      	ldr	r2, [pc, #156]	; (800e11c <HAL_UART_Transmit_DMA+0x120>)
 800e07e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e084:	2200      	movs	r2, #0
 800e086:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e090:	4619      	mov	r1, r3
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	3328      	adds	r3, #40	; 0x28
 800e098:	461a      	mov	r2, r3
 800e09a:	88fb      	ldrh	r3, [r7, #6]
 800e09c:	f7f9 f99e 	bl	80073dc <HAL_DMA_Start_IT>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00d      	beq.n	800e0c2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2210      	movs	r2, #16
 800e0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2220      	movs	r2, #32
 800e0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e024      	b.n	800e10c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2240      	movs	r2, #64	; 0x40
 800e0c8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	3308      	adds	r3, #8
 800e0d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	e853 3f00 	ldrex	r3, [r3]
 800e0e0:	613b      	str	r3, [r7, #16]
   return(result);
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	3308      	adds	r3, #8
 800e0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0f2:	623a      	str	r2, [r7, #32]
 800e0f4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0f6:	69f9      	ldr	r1, [r7, #28]
 800e0f8:	6a3a      	ldr	r2, [r7, #32]
 800e0fa:	e841 2300 	strex	r3, r2, [r1]
 800e0fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800e100:	69bb      	ldr	r3, [r7, #24]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1e5      	bne.n	800e0d2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	e000      	b.n	800e10c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800e10a:	2302      	movs	r3, #2
  }
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3728      	adds	r7, #40	; 0x28
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	0800f98d 	.word	0x0800f98d
 800e118:	0800fa23 	.word	0x0800fa23
 800e11c:	0800fb99 	.word	0x0800fb99

0800e120 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b0ba      	sub	sp, #232	; 0xe8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	69db      	ldr	r3, [r3, #28]
 800e12e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e146:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e14a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e14e:	4013      	ands	r3, r2
 800e150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d11b      	bne.n	800e194 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e160:	f003 0320 	and.w	r3, r3, #32
 800e164:	2b00      	cmp	r3, #0
 800e166:	d015      	beq.n	800e194 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e16c:	f003 0320 	and.w	r3, r3, #32
 800e170:	2b00      	cmp	r3, #0
 800e172:	d105      	bne.n	800e180 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d009      	beq.n	800e194 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 835a 	beq.w	800e83e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	4798      	blx	r3
      }
      return;
 800e192:	e354      	b.n	800e83e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f000 811f 	beq.w	800e3dc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e19e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e1a2:	4b8b      	ldr	r3, [pc, #556]	; (800e3d0 <HAL_UART_IRQHandler+0x2b0>)
 800e1a4:	4013      	ands	r3, r2
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d106      	bne.n	800e1b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e1aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e1ae:	4b89      	ldr	r3, [pc, #548]	; (800e3d4 <HAL_UART_IRQHandler+0x2b4>)
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f000 8112 	beq.w	800e3dc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1bc:	f003 0301 	and.w	r3, r3, #1
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d011      	beq.n	800e1e8 <HAL_UART_IRQHandler+0xc8>
 800e1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d00b      	beq.n	800e1e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1de:	f043 0201 	orr.w	r2, r3, #1
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1ec:	f003 0302 	and.w	r3, r3, #2
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d011      	beq.n	800e218 <HAL_UART_IRQHandler+0xf8>
 800e1f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1f8:	f003 0301 	and.w	r3, r3, #1
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00b      	beq.n	800e218 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2202      	movs	r2, #2
 800e206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e20e:	f043 0204 	orr.w	r2, r3, #4
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e21c:	f003 0304 	and.w	r3, r3, #4
 800e220:	2b00      	cmp	r3, #0
 800e222:	d011      	beq.n	800e248 <HAL_UART_IRQHandler+0x128>
 800e224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e228:	f003 0301 	and.w	r3, r3, #1
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00b      	beq.n	800e248 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2204      	movs	r2, #4
 800e236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e23e:	f043 0202 	orr.w	r2, r3, #2
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e24c:	f003 0308 	and.w	r3, r3, #8
 800e250:	2b00      	cmp	r3, #0
 800e252:	d017      	beq.n	800e284 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e258:	f003 0320 	and.w	r3, r3, #32
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d105      	bne.n	800e26c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e260:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e264:	4b5a      	ldr	r3, [pc, #360]	; (800e3d0 <HAL_UART_IRQHandler+0x2b0>)
 800e266:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d00b      	beq.n	800e284 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2208      	movs	r2, #8
 800e272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e27a:	f043 0208 	orr.w	r2, r3, #8
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d012      	beq.n	800e2b6 <HAL_UART_IRQHandler+0x196>
 800e290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d00c      	beq.n	800e2b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2ac:	f043 0220 	orr.w	r2, r3, #32
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f000 82c0 	beq.w	800e842 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2c6:	f003 0320 	and.w	r3, r3, #32
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d013      	beq.n	800e2f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e2ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2d2:	f003 0320 	and.w	r3, r3, #32
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d105      	bne.n	800e2e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e2da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d007      	beq.n	800e2f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d003      	beq.n	800e2f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e30a:	2b40      	cmp	r3, #64	; 0x40
 800e30c:	d005      	beq.n	800e31a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e30e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e312:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e316:	2b00      	cmp	r3, #0
 800e318:	d04f      	beq.n	800e3ba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f001 fad0 	bl	800f8c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e32a:	2b40      	cmp	r3, #64	; 0x40
 800e32c:	d141      	bne.n	800e3b2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	3308      	adds	r3, #8
 800e334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e33c:	e853 3f00 	ldrex	r3, [r3]
 800e340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e34c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3308      	adds	r3, #8
 800e356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e35a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e35e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e36a:	e841 2300 	strex	r3, r2, [r1]
 800e36e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1d9      	bne.n	800e32e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d013      	beq.n	800e3aa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e386:	4a14      	ldr	r2, [pc, #80]	; (800e3d8 <HAL_UART_IRQHandler+0x2b8>)
 800e388:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e38e:	4618      	mov	r0, r3
 800e390:	f7f9 fdac 	bl	8007eec <HAL_DMA_Abort_IT>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d017      	beq.n	800e3ca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e39e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3a0:	687a      	ldr	r2, [r7, #4]
 800e3a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3a8:	e00f      	b.n	800e3ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 fa7e 	bl	800e8ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3b0:	e00b      	b.n	800e3ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fa7a 	bl	800e8ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3b8:	e007      	b.n	800e3ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 fa76 	bl	800e8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e3c8:	e23b      	b.n	800e842 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3ca:	bf00      	nop
    return;
 800e3cc:	e239      	b.n	800e842 <HAL_UART_IRQHandler+0x722>
 800e3ce:	bf00      	nop
 800e3d0:	10000001 	.word	0x10000001
 800e3d4:	04000120 	.word	0x04000120
 800e3d8:	0800fc19 	.word	0x0800fc19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	f040 81ce 	bne.w	800e782 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ea:	f003 0310 	and.w	r3, r3, #16
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f000 81c7 	beq.w	800e782 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3f8:	f003 0310 	and.w	r3, r3, #16
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f000 81c0 	beq.w	800e782 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2210      	movs	r2, #16
 800e408:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e414:	2b40      	cmp	r3, #64	; 0x40
 800e416:	f040 813b 	bne.w	800e690 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a8b      	ldr	r2, [pc, #556]	; (800e650 <HAL_UART_IRQHandler+0x530>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d059      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a89      	ldr	r2, [pc, #548]	; (800e654 <HAL_UART_IRQHandler+0x534>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d053      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4a87      	ldr	r2, [pc, #540]	; (800e658 <HAL_UART_IRQHandler+0x538>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d04d      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a85      	ldr	r2, [pc, #532]	; (800e65c <HAL_UART_IRQHandler+0x53c>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d047      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a83      	ldr	r2, [pc, #524]	; (800e660 <HAL_UART_IRQHandler+0x540>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d041      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4a81      	ldr	r2, [pc, #516]	; (800e664 <HAL_UART_IRQHandler+0x544>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d03b      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4a7f      	ldr	r2, [pc, #508]	; (800e668 <HAL_UART_IRQHandler+0x548>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d035      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a7d      	ldr	r2, [pc, #500]	; (800e66c <HAL_UART_IRQHandler+0x54c>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d02f      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4a7b      	ldr	r2, [pc, #492]	; (800e670 <HAL_UART_IRQHandler+0x550>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d029      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a79      	ldr	r2, [pc, #484]	; (800e674 <HAL_UART_IRQHandler+0x554>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d023      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a77      	ldr	r2, [pc, #476]	; (800e678 <HAL_UART_IRQHandler+0x558>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d01d      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4a75      	ldr	r2, [pc, #468]	; (800e67c <HAL_UART_IRQHandler+0x55c>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d017      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a73      	ldr	r2, [pc, #460]	; (800e680 <HAL_UART_IRQHandler+0x560>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d011      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a71      	ldr	r2, [pc, #452]	; (800e684 <HAL_UART_IRQHandler+0x564>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d00b      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a6f      	ldr	r2, [pc, #444]	; (800e688 <HAL_UART_IRQHandler+0x568>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d005      	beq.n	800e4da <HAL_UART_IRQHandler+0x3ba>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a6d      	ldr	r2, [pc, #436]	; (800e68c <HAL_UART_IRQHandler+0x56c>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d105      	bne.n	800e4e6 <HAL_UART_IRQHandler+0x3c6>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	e004      	b.n	800e4f0 <HAL_UART_IRQHandler+0x3d0>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e4f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f000 81a4 	beq.w	800e846 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e504:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e508:	429a      	cmp	r2, r3
 800e50a:	f080 819c 	bcs.w	800e846 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e51c:	69db      	ldr	r3, [r3, #28]
 800e51e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e522:	f000 8086 	beq.w	800e632 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e532:	e853 3f00 	ldrex	r3, [r3]
 800e536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e53a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e53e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e542:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	461a      	mov	r2, r3
 800e54c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e554:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e558:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e55c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e560:	e841 2300 	strex	r3, r2, [r1]
 800e564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1da      	bne.n	800e526 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	3308      	adds	r3, #8
 800e576:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e57a:	e853 3f00 	ldrex	r3, [r3]
 800e57e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e582:	f023 0301 	bic.w	r3, r3, #1
 800e586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	3308      	adds	r3, #8
 800e590:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e594:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e598:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e59c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e5a0:	e841 2300 	strex	r3, r2, [r1]
 800e5a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e5a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1e1      	bne.n	800e570 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	3308      	adds	r3, #8
 800e5b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5b6:	e853 3f00 	ldrex	r3, [r3]
 800e5ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e5bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	3308      	adds	r3, #8
 800e5cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e5d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e5d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e5d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e5d8:	e841 2300 	strex	r3, r2, [r1]
 800e5dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e5de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d1e3      	bne.n	800e5ac <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2220      	movs	r2, #32
 800e5e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5fa:	e853 3f00 	ldrex	r3, [r3]
 800e5fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e602:	f023 0310 	bic.w	r3, r3, #16
 800e606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	461a      	mov	r2, r3
 800e610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e614:	65bb      	str	r3, [r7, #88]	; 0x58
 800e616:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e618:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e61a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e61c:	e841 2300 	strex	r3, r2, [r1]
 800e620:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e624:	2b00      	cmp	r3, #0
 800e626:	d1e4      	bne.n	800e5f2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7f9 f93f 	bl	80078b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e63e:	b29b      	uxth	r3, r3
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	b29b      	uxth	r3, r3
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7f4 fcf2 	bl	8003030 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e64c:	e0fb      	b.n	800e846 <HAL_UART_IRQHandler+0x726>
 800e64e:	bf00      	nop
 800e650:	40020010 	.word	0x40020010
 800e654:	40020028 	.word	0x40020028
 800e658:	40020040 	.word	0x40020040
 800e65c:	40020058 	.word	0x40020058
 800e660:	40020070 	.word	0x40020070
 800e664:	40020088 	.word	0x40020088
 800e668:	400200a0 	.word	0x400200a0
 800e66c:	400200b8 	.word	0x400200b8
 800e670:	40020410 	.word	0x40020410
 800e674:	40020428 	.word	0x40020428
 800e678:	40020440 	.word	0x40020440
 800e67c:	40020458 	.word	0x40020458
 800e680:	40020470 	.word	0x40020470
 800e684:	40020488 	.word	0x40020488
 800e688:	400204a0 	.word	0x400204a0
 800e68c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	1ad3      	subs	r3, r2, r3
 800e6a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f000 80cc 	beq.w	800e84a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e6b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f000 80c7 	beq.w	800e84a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c4:	e853 3f00 	ldrex	r3, [r3]
 800e6c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e6d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	461a      	mov	r2, r3
 800e6da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6de:	647b      	str	r3, [r7, #68]	; 0x44
 800e6e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6e6:	e841 2300 	strex	r3, r2, [r1]
 800e6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1e4      	bne.n	800e6bc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	3308      	adds	r3, #8
 800e6f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fc:	e853 3f00 	ldrex	r3, [r3]
 800e700:	623b      	str	r3, [r7, #32]
   return(result);
 800e702:	6a3a      	ldr	r2, [r7, #32]
 800e704:	4b54      	ldr	r3, [pc, #336]	; (800e858 <HAL_UART_IRQHandler+0x738>)
 800e706:	4013      	ands	r3, r2
 800e708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3308      	adds	r3, #8
 800e712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e716:	633a      	str	r2, [r7, #48]	; 0x30
 800e718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e71a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e71c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e71e:	e841 2300 	strex	r3, r2, [r1]
 800e722:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1e3      	bne.n	800e6f2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2220      	movs	r2, #32
 800e72e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f023 0310 	bic.w	r3, r3, #16
 800e752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e760:	61fb      	str	r3, [r7, #28]
 800e762:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e764:	69b9      	ldr	r1, [r7, #24]
 800e766:	69fa      	ldr	r2, [r7, #28]
 800e768:	e841 2300 	strex	r3, r2, [r1]
 800e76c:	617b      	str	r3, [r7, #20]
   return(result);
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e4      	bne.n	800e73e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e778:	4619      	mov	r1, r3
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7f4 fc58 	bl	8003030 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e780:	e063      	b.n	800e84a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00e      	beq.n	800e7ac <HAL_UART_IRQHandler+0x68c>
 800e78e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e796:	2b00      	cmp	r3, #0
 800e798:	d008      	beq.n	800e7ac <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e7a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f001 fa78 	bl	800fc9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7aa:	e051      	b.n	800e850 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d014      	beq.n	800e7e2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d105      	bne.n	800e7d0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e7c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d008      	beq.n	800e7e2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d03a      	beq.n	800e84e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	4798      	blx	r3
    }
    return;
 800e7e0:	e035      	b.n	800e84e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d009      	beq.n	800e802 <HAL_UART_IRQHandler+0x6e2>
 800e7ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d003      	beq.n	800e802 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f001 fa22 	bl	800fc44 <UART_EndTransmit_IT>
    return;
 800e800:	e026      	b.n	800e850 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d009      	beq.n	800e822 <HAL_UART_IRQHandler+0x702>
 800e80e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e812:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e816:	2b00      	cmp	r3, #0
 800e818:	d003      	beq.n	800e822 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f001 fa51 	bl	800fcc2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e820:	e016      	b.n	800e850 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d010      	beq.n	800e850 <HAL_UART_IRQHandler+0x730>
 800e82e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e832:	2b00      	cmp	r3, #0
 800e834:	da0c      	bge.n	800e850 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f001 fa39 	bl	800fcae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e83c:	e008      	b.n	800e850 <HAL_UART_IRQHandler+0x730>
      return;
 800e83e:	bf00      	nop
 800e840:	e006      	b.n	800e850 <HAL_UART_IRQHandler+0x730>
    return;
 800e842:	bf00      	nop
 800e844:	e004      	b.n	800e850 <HAL_UART_IRQHandler+0x730>
      return;
 800e846:	bf00      	nop
 800e848:	e002      	b.n	800e850 <HAL_UART_IRQHandler+0x730>
      return;
 800e84a:	bf00      	nop
 800e84c:	e000      	b.n	800e850 <HAL_UART_IRQHandler+0x730>
    return;
 800e84e:	bf00      	nop
  }
}
 800e850:	37e8      	adds	r7, #232	; 0xe8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	effffffe 	.word	0xeffffffe

0800e85c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e864:	bf00      	nop
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e878:	bf00      	nop
 800e87a:	370c      	adds	r7, #12
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e884:	b480      	push	{r7}
 800e886:	b083      	sub	sp, #12
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e88c:	bf00      	nop
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e8a0:	bf00      	nop
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e8b4:	bf00      	nop
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8c0:	b5b0      	push	{r4, r5, r7, lr}
 800e8c2:	b08e      	sub	sp, #56	; 0x38
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	689a      	ldr	r2, [r3, #8]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	431a      	orrs	r2, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	695b      	ldr	r3, [r3, #20]
 800e8dc:	431a      	orrs	r2, r3
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	69db      	ldr	r3, [r3, #28]
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	4bbf      	ldr	r3, [pc, #764]	; (800ebec <UART_SetConfig+0x32c>)
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	6812      	ldr	r2, [r2, #0]
 800e8f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e8f6:	430b      	orrs	r3, r1
 800e8f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	68da      	ldr	r2, [r3, #12]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	430a      	orrs	r2, r1
 800e90e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	699b      	ldr	r3, [r3, #24]
 800e914:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4ab5      	ldr	r2, [pc, #724]	; (800ebf0 <UART_SetConfig+0x330>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d004      	beq.n	800e92a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a1b      	ldr	r3, [r3, #32]
 800e924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e926:	4313      	orrs	r3, r2
 800e928:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	689a      	ldr	r2, [r3, #8]
 800e930:	4bb0      	ldr	r3, [pc, #704]	; (800ebf4 <UART_SetConfig+0x334>)
 800e932:	4013      	ands	r3, r2
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	6812      	ldr	r2, [r2, #0]
 800e938:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e93a:	430b      	orrs	r3, r1
 800e93c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e944:	f023 010f 	bic.w	r1, r3, #15
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	430a      	orrs	r2, r1
 800e952:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4aa7      	ldr	r2, [pc, #668]	; (800ebf8 <UART_SetConfig+0x338>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d176      	bne.n	800ea4c <UART_SetConfig+0x18c>
 800e95e:	4ba7      	ldr	r3, [pc, #668]	; (800ebfc <UART_SetConfig+0x33c>)
 800e960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e966:	2b28      	cmp	r3, #40	; 0x28
 800e968:	d86c      	bhi.n	800ea44 <UART_SetConfig+0x184>
 800e96a:	a201      	add	r2, pc, #4	; (adr r2, 800e970 <UART_SetConfig+0xb0>)
 800e96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e970:	0800ea15 	.word	0x0800ea15
 800e974:	0800ea45 	.word	0x0800ea45
 800e978:	0800ea45 	.word	0x0800ea45
 800e97c:	0800ea45 	.word	0x0800ea45
 800e980:	0800ea45 	.word	0x0800ea45
 800e984:	0800ea45 	.word	0x0800ea45
 800e988:	0800ea45 	.word	0x0800ea45
 800e98c:	0800ea45 	.word	0x0800ea45
 800e990:	0800ea1d 	.word	0x0800ea1d
 800e994:	0800ea45 	.word	0x0800ea45
 800e998:	0800ea45 	.word	0x0800ea45
 800e99c:	0800ea45 	.word	0x0800ea45
 800e9a0:	0800ea45 	.word	0x0800ea45
 800e9a4:	0800ea45 	.word	0x0800ea45
 800e9a8:	0800ea45 	.word	0x0800ea45
 800e9ac:	0800ea45 	.word	0x0800ea45
 800e9b0:	0800ea25 	.word	0x0800ea25
 800e9b4:	0800ea45 	.word	0x0800ea45
 800e9b8:	0800ea45 	.word	0x0800ea45
 800e9bc:	0800ea45 	.word	0x0800ea45
 800e9c0:	0800ea45 	.word	0x0800ea45
 800e9c4:	0800ea45 	.word	0x0800ea45
 800e9c8:	0800ea45 	.word	0x0800ea45
 800e9cc:	0800ea45 	.word	0x0800ea45
 800e9d0:	0800ea2d 	.word	0x0800ea2d
 800e9d4:	0800ea45 	.word	0x0800ea45
 800e9d8:	0800ea45 	.word	0x0800ea45
 800e9dc:	0800ea45 	.word	0x0800ea45
 800e9e0:	0800ea45 	.word	0x0800ea45
 800e9e4:	0800ea45 	.word	0x0800ea45
 800e9e8:	0800ea45 	.word	0x0800ea45
 800e9ec:	0800ea45 	.word	0x0800ea45
 800e9f0:	0800ea35 	.word	0x0800ea35
 800e9f4:	0800ea45 	.word	0x0800ea45
 800e9f8:	0800ea45 	.word	0x0800ea45
 800e9fc:	0800ea45 	.word	0x0800ea45
 800ea00:	0800ea45 	.word	0x0800ea45
 800ea04:	0800ea45 	.word	0x0800ea45
 800ea08:	0800ea45 	.word	0x0800ea45
 800ea0c:	0800ea45 	.word	0x0800ea45
 800ea10:	0800ea3d 	.word	0x0800ea3d
 800ea14:	2301      	movs	r3, #1
 800ea16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea1a:	e222      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ea1c:	2304      	movs	r3, #4
 800ea1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea22:	e21e      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ea24:	2308      	movs	r3, #8
 800ea26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea2a:	e21a      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ea2c:	2310      	movs	r3, #16
 800ea2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea32:	e216      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ea34:	2320      	movs	r3, #32
 800ea36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea3a:	e212      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ea3c:	2340      	movs	r3, #64	; 0x40
 800ea3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea42:	e20e      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ea44:	2380      	movs	r3, #128	; 0x80
 800ea46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea4a:	e20a      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a6b      	ldr	r2, [pc, #428]	; (800ec00 <UART_SetConfig+0x340>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d130      	bne.n	800eab8 <UART_SetConfig+0x1f8>
 800ea56:	4b69      	ldr	r3, [pc, #420]	; (800ebfc <UART_SetConfig+0x33c>)
 800ea58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea5a:	f003 0307 	and.w	r3, r3, #7
 800ea5e:	2b05      	cmp	r3, #5
 800ea60:	d826      	bhi.n	800eab0 <UART_SetConfig+0x1f0>
 800ea62:	a201      	add	r2, pc, #4	; (adr r2, 800ea68 <UART_SetConfig+0x1a8>)
 800ea64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea68:	0800ea81 	.word	0x0800ea81
 800ea6c:	0800ea89 	.word	0x0800ea89
 800ea70:	0800ea91 	.word	0x0800ea91
 800ea74:	0800ea99 	.word	0x0800ea99
 800ea78:	0800eaa1 	.word	0x0800eaa1
 800ea7c:	0800eaa9 	.word	0x0800eaa9
 800ea80:	2300      	movs	r3, #0
 800ea82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea86:	e1ec      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ea88:	2304      	movs	r3, #4
 800ea8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea8e:	e1e8      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ea90:	2308      	movs	r3, #8
 800ea92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea96:	e1e4      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ea98:	2310      	movs	r3, #16
 800ea9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea9e:	e1e0      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eaa0:	2320      	movs	r3, #32
 800eaa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaa6:	e1dc      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eaa8:	2340      	movs	r3, #64	; 0x40
 800eaaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaae:	e1d8      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eab0:	2380      	movs	r3, #128	; 0x80
 800eab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eab6:	e1d4      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4a51      	ldr	r2, [pc, #324]	; (800ec04 <UART_SetConfig+0x344>)
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d130      	bne.n	800eb24 <UART_SetConfig+0x264>
 800eac2:	4b4e      	ldr	r3, [pc, #312]	; (800ebfc <UART_SetConfig+0x33c>)
 800eac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eac6:	f003 0307 	and.w	r3, r3, #7
 800eaca:	2b05      	cmp	r3, #5
 800eacc:	d826      	bhi.n	800eb1c <UART_SetConfig+0x25c>
 800eace:	a201      	add	r2, pc, #4	; (adr r2, 800ead4 <UART_SetConfig+0x214>)
 800ead0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead4:	0800eaed 	.word	0x0800eaed
 800ead8:	0800eaf5 	.word	0x0800eaf5
 800eadc:	0800eafd 	.word	0x0800eafd
 800eae0:	0800eb05 	.word	0x0800eb05
 800eae4:	0800eb0d 	.word	0x0800eb0d
 800eae8:	0800eb15 	.word	0x0800eb15
 800eaec:	2300      	movs	r3, #0
 800eaee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaf2:	e1b6      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eaf4:	2304      	movs	r3, #4
 800eaf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eafa:	e1b2      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eafc:	2308      	movs	r3, #8
 800eafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb02:	e1ae      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb04:	2310      	movs	r3, #16
 800eb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb0a:	e1aa      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb0c:	2320      	movs	r3, #32
 800eb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb12:	e1a6      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb14:	2340      	movs	r3, #64	; 0x40
 800eb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb1a:	e1a2      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb1c:	2380      	movs	r3, #128	; 0x80
 800eb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb22:	e19e      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4a37      	ldr	r2, [pc, #220]	; (800ec08 <UART_SetConfig+0x348>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d130      	bne.n	800eb90 <UART_SetConfig+0x2d0>
 800eb2e:	4b33      	ldr	r3, [pc, #204]	; (800ebfc <UART_SetConfig+0x33c>)
 800eb30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb32:	f003 0307 	and.w	r3, r3, #7
 800eb36:	2b05      	cmp	r3, #5
 800eb38:	d826      	bhi.n	800eb88 <UART_SetConfig+0x2c8>
 800eb3a:	a201      	add	r2, pc, #4	; (adr r2, 800eb40 <UART_SetConfig+0x280>)
 800eb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb40:	0800eb59 	.word	0x0800eb59
 800eb44:	0800eb61 	.word	0x0800eb61
 800eb48:	0800eb69 	.word	0x0800eb69
 800eb4c:	0800eb71 	.word	0x0800eb71
 800eb50:	0800eb79 	.word	0x0800eb79
 800eb54:	0800eb81 	.word	0x0800eb81
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb5e:	e180      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb60:	2304      	movs	r3, #4
 800eb62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb66:	e17c      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb68:	2308      	movs	r3, #8
 800eb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb6e:	e178      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb70:	2310      	movs	r3, #16
 800eb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb76:	e174      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb78:	2320      	movs	r3, #32
 800eb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb7e:	e170      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb80:	2340      	movs	r3, #64	; 0x40
 800eb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb86:	e16c      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb88:	2380      	movs	r3, #128	; 0x80
 800eb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb8e:	e168      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4a1d      	ldr	r2, [pc, #116]	; (800ec0c <UART_SetConfig+0x34c>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d142      	bne.n	800ec20 <UART_SetConfig+0x360>
 800eb9a:	4b18      	ldr	r3, [pc, #96]	; (800ebfc <UART_SetConfig+0x33c>)
 800eb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb9e:	f003 0307 	and.w	r3, r3, #7
 800eba2:	2b05      	cmp	r3, #5
 800eba4:	d838      	bhi.n	800ec18 <UART_SetConfig+0x358>
 800eba6:	a201      	add	r2, pc, #4	; (adr r2, 800ebac <UART_SetConfig+0x2ec>)
 800eba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebac:	0800ebc5 	.word	0x0800ebc5
 800ebb0:	0800ebcd 	.word	0x0800ebcd
 800ebb4:	0800ebd5 	.word	0x0800ebd5
 800ebb8:	0800ebdd 	.word	0x0800ebdd
 800ebbc:	0800ebe5 	.word	0x0800ebe5
 800ebc0:	0800ec11 	.word	0x0800ec11
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebca:	e14a      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ebcc:	2304      	movs	r3, #4
 800ebce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebd2:	e146      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ebd4:	2308      	movs	r3, #8
 800ebd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebda:	e142      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ebdc:	2310      	movs	r3, #16
 800ebde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebe2:	e13e      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ebe4:	2320      	movs	r3, #32
 800ebe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebea:	e13a      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ebec:	cfff69f3 	.word	0xcfff69f3
 800ebf0:	58000c00 	.word	0x58000c00
 800ebf4:	11fff4ff 	.word	0x11fff4ff
 800ebf8:	40011000 	.word	0x40011000
 800ebfc:	58024400 	.word	0x58024400
 800ec00:	40004400 	.word	0x40004400
 800ec04:	40004800 	.word	0x40004800
 800ec08:	40004c00 	.word	0x40004c00
 800ec0c:	40005000 	.word	0x40005000
 800ec10:	2340      	movs	r3, #64	; 0x40
 800ec12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec16:	e124      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ec18:	2380      	movs	r3, #128	; 0x80
 800ec1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec1e:	e120      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4acc      	ldr	r2, [pc, #816]	; (800ef58 <UART_SetConfig+0x698>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d176      	bne.n	800ed18 <UART_SetConfig+0x458>
 800ec2a:	4bcc      	ldr	r3, [pc, #816]	; (800ef5c <UART_SetConfig+0x69c>)
 800ec2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec32:	2b28      	cmp	r3, #40	; 0x28
 800ec34:	d86c      	bhi.n	800ed10 <UART_SetConfig+0x450>
 800ec36:	a201      	add	r2, pc, #4	; (adr r2, 800ec3c <UART_SetConfig+0x37c>)
 800ec38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec3c:	0800ece1 	.word	0x0800ece1
 800ec40:	0800ed11 	.word	0x0800ed11
 800ec44:	0800ed11 	.word	0x0800ed11
 800ec48:	0800ed11 	.word	0x0800ed11
 800ec4c:	0800ed11 	.word	0x0800ed11
 800ec50:	0800ed11 	.word	0x0800ed11
 800ec54:	0800ed11 	.word	0x0800ed11
 800ec58:	0800ed11 	.word	0x0800ed11
 800ec5c:	0800ece9 	.word	0x0800ece9
 800ec60:	0800ed11 	.word	0x0800ed11
 800ec64:	0800ed11 	.word	0x0800ed11
 800ec68:	0800ed11 	.word	0x0800ed11
 800ec6c:	0800ed11 	.word	0x0800ed11
 800ec70:	0800ed11 	.word	0x0800ed11
 800ec74:	0800ed11 	.word	0x0800ed11
 800ec78:	0800ed11 	.word	0x0800ed11
 800ec7c:	0800ecf1 	.word	0x0800ecf1
 800ec80:	0800ed11 	.word	0x0800ed11
 800ec84:	0800ed11 	.word	0x0800ed11
 800ec88:	0800ed11 	.word	0x0800ed11
 800ec8c:	0800ed11 	.word	0x0800ed11
 800ec90:	0800ed11 	.word	0x0800ed11
 800ec94:	0800ed11 	.word	0x0800ed11
 800ec98:	0800ed11 	.word	0x0800ed11
 800ec9c:	0800ecf9 	.word	0x0800ecf9
 800eca0:	0800ed11 	.word	0x0800ed11
 800eca4:	0800ed11 	.word	0x0800ed11
 800eca8:	0800ed11 	.word	0x0800ed11
 800ecac:	0800ed11 	.word	0x0800ed11
 800ecb0:	0800ed11 	.word	0x0800ed11
 800ecb4:	0800ed11 	.word	0x0800ed11
 800ecb8:	0800ed11 	.word	0x0800ed11
 800ecbc:	0800ed01 	.word	0x0800ed01
 800ecc0:	0800ed11 	.word	0x0800ed11
 800ecc4:	0800ed11 	.word	0x0800ed11
 800ecc8:	0800ed11 	.word	0x0800ed11
 800eccc:	0800ed11 	.word	0x0800ed11
 800ecd0:	0800ed11 	.word	0x0800ed11
 800ecd4:	0800ed11 	.word	0x0800ed11
 800ecd8:	0800ed11 	.word	0x0800ed11
 800ecdc:	0800ed09 	.word	0x0800ed09
 800ece0:	2301      	movs	r3, #1
 800ece2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ece6:	e0bc      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ece8:	2304      	movs	r3, #4
 800ecea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecee:	e0b8      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ecf0:	2308      	movs	r3, #8
 800ecf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecf6:	e0b4      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ecf8:	2310      	movs	r3, #16
 800ecfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecfe:	e0b0      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed00:	2320      	movs	r3, #32
 800ed02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed06:	e0ac      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed08:	2340      	movs	r3, #64	; 0x40
 800ed0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed0e:	e0a8      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed10:	2380      	movs	r3, #128	; 0x80
 800ed12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed16:	e0a4      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a90      	ldr	r2, [pc, #576]	; (800ef60 <UART_SetConfig+0x6a0>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d130      	bne.n	800ed84 <UART_SetConfig+0x4c4>
 800ed22:	4b8e      	ldr	r3, [pc, #568]	; (800ef5c <UART_SetConfig+0x69c>)
 800ed24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed26:	f003 0307 	and.w	r3, r3, #7
 800ed2a:	2b05      	cmp	r3, #5
 800ed2c:	d826      	bhi.n	800ed7c <UART_SetConfig+0x4bc>
 800ed2e:	a201      	add	r2, pc, #4	; (adr r2, 800ed34 <UART_SetConfig+0x474>)
 800ed30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed34:	0800ed4d 	.word	0x0800ed4d
 800ed38:	0800ed55 	.word	0x0800ed55
 800ed3c:	0800ed5d 	.word	0x0800ed5d
 800ed40:	0800ed65 	.word	0x0800ed65
 800ed44:	0800ed6d 	.word	0x0800ed6d
 800ed48:	0800ed75 	.word	0x0800ed75
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed52:	e086      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed54:	2304      	movs	r3, #4
 800ed56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed5a:	e082      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed5c:	2308      	movs	r3, #8
 800ed5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed62:	e07e      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed64:	2310      	movs	r3, #16
 800ed66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed6a:	e07a      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed6c:	2320      	movs	r3, #32
 800ed6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed72:	e076      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed74:	2340      	movs	r3, #64	; 0x40
 800ed76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed7a:	e072      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed7c:	2380      	movs	r3, #128	; 0x80
 800ed7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed82:	e06e      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a76      	ldr	r2, [pc, #472]	; (800ef64 <UART_SetConfig+0x6a4>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d130      	bne.n	800edf0 <UART_SetConfig+0x530>
 800ed8e:	4b73      	ldr	r3, [pc, #460]	; (800ef5c <UART_SetConfig+0x69c>)
 800ed90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed92:	f003 0307 	and.w	r3, r3, #7
 800ed96:	2b05      	cmp	r3, #5
 800ed98:	d826      	bhi.n	800ede8 <UART_SetConfig+0x528>
 800ed9a:	a201      	add	r2, pc, #4	; (adr r2, 800eda0 <UART_SetConfig+0x4e0>)
 800ed9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda0:	0800edb9 	.word	0x0800edb9
 800eda4:	0800edc1 	.word	0x0800edc1
 800eda8:	0800edc9 	.word	0x0800edc9
 800edac:	0800edd1 	.word	0x0800edd1
 800edb0:	0800edd9 	.word	0x0800edd9
 800edb4:	0800ede1 	.word	0x0800ede1
 800edb8:	2300      	movs	r3, #0
 800edba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edbe:	e050      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800edc0:	2304      	movs	r3, #4
 800edc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edc6:	e04c      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800edc8:	2308      	movs	r3, #8
 800edca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edce:	e048      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800edd0:	2310      	movs	r3, #16
 800edd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edd6:	e044      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800edd8:	2320      	movs	r3, #32
 800edda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edde:	e040      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ede0:	2340      	movs	r3, #64	; 0x40
 800ede2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ede6:	e03c      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ede8:	2380      	movs	r3, #128	; 0x80
 800edea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edee:	e038      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a5c      	ldr	r2, [pc, #368]	; (800ef68 <UART_SetConfig+0x6a8>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d130      	bne.n	800ee5c <UART_SetConfig+0x59c>
 800edfa:	4b58      	ldr	r3, [pc, #352]	; (800ef5c <UART_SetConfig+0x69c>)
 800edfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edfe:	f003 0307 	and.w	r3, r3, #7
 800ee02:	2b05      	cmp	r3, #5
 800ee04:	d826      	bhi.n	800ee54 <UART_SetConfig+0x594>
 800ee06:	a201      	add	r2, pc, #4	; (adr r2, 800ee0c <UART_SetConfig+0x54c>)
 800ee08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0c:	0800ee25 	.word	0x0800ee25
 800ee10:	0800ee2d 	.word	0x0800ee2d
 800ee14:	0800ee35 	.word	0x0800ee35
 800ee18:	0800ee3d 	.word	0x0800ee3d
 800ee1c:	0800ee45 	.word	0x0800ee45
 800ee20:	0800ee4d 	.word	0x0800ee4d
 800ee24:	2302      	movs	r3, #2
 800ee26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee2a:	e01a      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ee2c:	2304      	movs	r3, #4
 800ee2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee32:	e016      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ee34:	2308      	movs	r3, #8
 800ee36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee3a:	e012      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ee3c:	2310      	movs	r3, #16
 800ee3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee42:	e00e      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ee44:	2320      	movs	r3, #32
 800ee46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee4a:	e00a      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ee4c:	2340      	movs	r3, #64	; 0x40
 800ee4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee52:	e006      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ee54:	2380      	movs	r3, #128	; 0x80
 800ee56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee5a:	e002      	b.n	800ee62 <UART_SetConfig+0x5a2>
 800ee5c:	2380      	movs	r3, #128	; 0x80
 800ee5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a40      	ldr	r2, [pc, #256]	; (800ef68 <UART_SetConfig+0x6a8>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	f040 80ef 	bne.w	800f04c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee72:	2b20      	cmp	r3, #32
 800ee74:	dc46      	bgt.n	800ef04 <UART_SetConfig+0x644>
 800ee76:	2b02      	cmp	r3, #2
 800ee78:	f2c0 8081 	blt.w	800ef7e <UART_SetConfig+0x6be>
 800ee7c:	3b02      	subs	r3, #2
 800ee7e:	2b1e      	cmp	r3, #30
 800ee80:	d87d      	bhi.n	800ef7e <UART_SetConfig+0x6be>
 800ee82:	a201      	add	r2, pc, #4	; (adr r2, 800ee88 <UART_SetConfig+0x5c8>)
 800ee84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee88:	0800ef0b 	.word	0x0800ef0b
 800ee8c:	0800ef7f 	.word	0x0800ef7f
 800ee90:	0800ef13 	.word	0x0800ef13
 800ee94:	0800ef7f 	.word	0x0800ef7f
 800ee98:	0800ef7f 	.word	0x0800ef7f
 800ee9c:	0800ef7f 	.word	0x0800ef7f
 800eea0:	0800ef23 	.word	0x0800ef23
 800eea4:	0800ef7f 	.word	0x0800ef7f
 800eea8:	0800ef7f 	.word	0x0800ef7f
 800eeac:	0800ef7f 	.word	0x0800ef7f
 800eeb0:	0800ef7f 	.word	0x0800ef7f
 800eeb4:	0800ef7f 	.word	0x0800ef7f
 800eeb8:	0800ef7f 	.word	0x0800ef7f
 800eebc:	0800ef7f 	.word	0x0800ef7f
 800eec0:	0800ef33 	.word	0x0800ef33
 800eec4:	0800ef7f 	.word	0x0800ef7f
 800eec8:	0800ef7f 	.word	0x0800ef7f
 800eecc:	0800ef7f 	.word	0x0800ef7f
 800eed0:	0800ef7f 	.word	0x0800ef7f
 800eed4:	0800ef7f 	.word	0x0800ef7f
 800eed8:	0800ef7f 	.word	0x0800ef7f
 800eedc:	0800ef7f 	.word	0x0800ef7f
 800eee0:	0800ef7f 	.word	0x0800ef7f
 800eee4:	0800ef7f 	.word	0x0800ef7f
 800eee8:	0800ef7f 	.word	0x0800ef7f
 800eeec:	0800ef7f 	.word	0x0800ef7f
 800eef0:	0800ef7f 	.word	0x0800ef7f
 800eef4:	0800ef7f 	.word	0x0800ef7f
 800eef8:	0800ef7f 	.word	0x0800ef7f
 800eefc:	0800ef7f 	.word	0x0800ef7f
 800ef00:	0800ef71 	.word	0x0800ef71
 800ef04:	2b40      	cmp	r3, #64	; 0x40
 800ef06:	d036      	beq.n	800ef76 <UART_SetConfig+0x6b6>
 800ef08:	e039      	b.n	800ef7e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ef0a:	f7fc fe5b 	bl	800bbc4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ef0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ef10:	e03b      	b.n	800ef8a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef12:	f107 0314 	add.w	r3, r7, #20
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fc fe6a 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef20:	e033      	b.n	800ef8a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef22:	f107 0308 	add.w	r3, r7, #8
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fc ffb6 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef30:	e02b      	b.n	800ef8a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef32:	4b0a      	ldr	r3, [pc, #40]	; (800ef5c <UART_SetConfig+0x69c>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f003 0320 	and.w	r3, r3, #32
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d009      	beq.n	800ef52 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef3e:	4b07      	ldr	r3, [pc, #28]	; (800ef5c <UART_SetConfig+0x69c>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	08db      	lsrs	r3, r3, #3
 800ef44:	f003 0303 	and.w	r3, r3, #3
 800ef48:	4a08      	ldr	r2, [pc, #32]	; (800ef6c <UART_SetConfig+0x6ac>)
 800ef4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef50:	e01b      	b.n	800ef8a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ef52:	4b06      	ldr	r3, [pc, #24]	; (800ef6c <UART_SetConfig+0x6ac>)
 800ef54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef56:	e018      	b.n	800ef8a <UART_SetConfig+0x6ca>
 800ef58:	40011400 	.word	0x40011400
 800ef5c:	58024400 	.word	0x58024400
 800ef60:	40007800 	.word	0x40007800
 800ef64:	40007c00 	.word	0x40007c00
 800ef68:	58000c00 	.word	0x58000c00
 800ef6c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef70:	4bc4      	ldr	r3, [pc, #784]	; (800f284 <UART_SetConfig+0x9c4>)
 800ef72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef74:	e009      	b.n	800ef8a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef7c:	e005      	b.n	800ef8a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ef82:	2301      	movs	r3, #1
 800ef84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ef88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ef8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f000 81da 	beq.w	800f346 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef96:	4abc      	ldr	r2, [pc, #752]	; (800f288 <UART_SetConfig+0x9c8>)
 800ef98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800efa4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	685a      	ldr	r2, [r3, #4]
 800efaa:	4613      	mov	r3, r2
 800efac:	005b      	lsls	r3, r3, #1
 800efae:	4413      	add	r3, r2
 800efb0:	6a3a      	ldr	r2, [r7, #32]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d305      	bcc.n	800efc2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800efbc:	6a3a      	ldr	r2, [r7, #32]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d903      	bls.n	800efca <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800efc2:	2301      	movs	r3, #1
 800efc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800efc8:	e1bd      	b.n	800f346 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efcc:	4618      	mov	r0, r3
 800efce:	f04f 0100 	mov.w	r1, #0
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd6:	4aac      	ldr	r2, [pc, #688]	; (800f288 <UART_SetConfig+0x9c8>)
 800efd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efdc:	b29a      	uxth	r2, r3
 800efde:	f04f 0300 	mov.w	r3, #0
 800efe2:	f7f1 f9d5 	bl	8000390 <__aeabi_uldivmod>
 800efe6:	4602      	mov	r2, r0
 800efe8:	460b      	mov	r3, r1
 800efea:	4610      	mov	r0, r2
 800efec:	4619      	mov	r1, r3
 800efee:	f04f 0200 	mov.w	r2, #0
 800eff2:	f04f 0300 	mov.w	r3, #0
 800eff6:	020b      	lsls	r3, r1, #8
 800eff8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800effc:	0202      	lsls	r2, r0, #8
 800effe:	6879      	ldr	r1, [r7, #4]
 800f000:	6849      	ldr	r1, [r1, #4]
 800f002:	0849      	lsrs	r1, r1, #1
 800f004:	4608      	mov	r0, r1
 800f006:	f04f 0100 	mov.w	r1, #0
 800f00a:	1814      	adds	r4, r2, r0
 800f00c:	eb43 0501 	adc.w	r5, r3, r1
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	461a      	mov	r2, r3
 800f016:	f04f 0300 	mov.w	r3, #0
 800f01a:	4620      	mov	r0, r4
 800f01c:	4629      	mov	r1, r5
 800f01e:	f7f1 f9b7 	bl	8000390 <__aeabi_uldivmod>
 800f022:	4602      	mov	r2, r0
 800f024:	460b      	mov	r3, r1
 800f026:	4613      	mov	r3, r2
 800f028:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f030:	d308      	bcc.n	800f044 <UART_SetConfig+0x784>
 800f032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f034:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f038:	d204      	bcs.n	800f044 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f040:	60da      	str	r2, [r3, #12]
 800f042:	e180      	b.n	800f346 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800f044:	2301      	movs	r3, #1
 800f046:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f04a:	e17c      	b.n	800f346 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	69db      	ldr	r3, [r3, #28]
 800f050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f054:	f040 80be 	bne.w	800f1d4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800f058:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f05c:	2b20      	cmp	r3, #32
 800f05e:	dc49      	bgt.n	800f0f4 <UART_SetConfig+0x834>
 800f060:	2b00      	cmp	r3, #0
 800f062:	db7c      	blt.n	800f15e <UART_SetConfig+0x89e>
 800f064:	2b20      	cmp	r3, #32
 800f066:	d87a      	bhi.n	800f15e <UART_SetConfig+0x89e>
 800f068:	a201      	add	r2, pc, #4	; (adr r2, 800f070 <UART_SetConfig+0x7b0>)
 800f06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f06e:	bf00      	nop
 800f070:	0800f0fb 	.word	0x0800f0fb
 800f074:	0800f103 	.word	0x0800f103
 800f078:	0800f15f 	.word	0x0800f15f
 800f07c:	0800f15f 	.word	0x0800f15f
 800f080:	0800f10b 	.word	0x0800f10b
 800f084:	0800f15f 	.word	0x0800f15f
 800f088:	0800f15f 	.word	0x0800f15f
 800f08c:	0800f15f 	.word	0x0800f15f
 800f090:	0800f11b 	.word	0x0800f11b
 800f094:	0800f15f 	.word	0x0800f15f
 800f098:	0800f15f 	.word	0x0800f15f
 800f09c:	0800f15f 	.word	0x0800f15f
 800f0a0:	0800f15f 	.word	0x0800f15f
 800f0a4:	0800f15f 	.word	0x0800f15f
 800f0a8:	0800f15f 	.word	0x0800f15f
 800f0ac:	0800f15f 	.word	0x0800f15f
 800f0b0:	0800f12b 	.word	0x0800f12b
 800f0b4:	0800f15f 	.word	0x0800f15f
 800f0b8:	0800f15f 	.word	0x0800f15f
 800f0bc:	0800f15f 	.word	0x0800f15f
 800f0c0:	0800f15f 	.word	0x0800f15f
 800f0c4:	0800f15f 	.word	0x0800f15f
 800f0c8:	0800f15f 	.word	0x0800f15f
 800f0cc:	0800f15f 	.word	0x0800f15f
 800f0d0:	0800f15f 	.word	0x0800f15f
 800f0d4:	0800f15f 	.word	0x0800f15f
 800f0d8:	0800f15f 	.word	0x0800f15f
 800f0dc:	0800f15f 	.word	0x0800f15f
 800f0e0:	0800f15f 	.word	0x0800f15f
 800f0e4:	0800f15f 	.word	0x0800f15f
 800f0e8:	0800f15f 	.word	0x0800f15f
 800f0ec:	0800f15f 	.word	0x0800f15f
 800f0f0:	0800f151 	.word	0x0800f151
 800f0f4:	2b40      	cmp	r3, #64	; 0x40
 800f0f6:	d02e      	beq.n	800f156 <UART_SetConfig+0x896>
 800f0f8:	e031      	b.n	800f15e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0fa:	f7fb fdf7 	bl	800acec <HAL_RCC_GetPCLK1Freq>
 800f0fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f100:	e033      	b.n	800f16a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f102:	f7fb fe09 	bl	800ad18 <HAL_RCC_GetPCLK2Freq>
 800f106:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f108:	e02f      	b.n	800f16a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f10a:	f107 0314 	add.w	r3, r7, #20
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fc fd6e 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f118:	e027      	b.n	800f16a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f11a:	f107 0308 	add.w	r3, r7, #8
 800f11e:	4618      	mov	r0, r3
 800f120:	f7fc feba 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f128:	e01f      	b.n	800f16a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f12a:	4b58      	ldr	r3, [pc, #352]	; (800f28c <UART_SetConfig+0x9cc>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f003 0320 	and.w	r3, r3, #32
 800f132:	2b00      	cmp	r3, #0
 800f134:	d009      	beq.n	800f14a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f136:	4b55      	ldr	r3, [pc, #340]	; (800f28c <UART_SetConfig+0x9cc>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	08db      	lsrs	r3, r3, #3
 800f13c:	f003 0303 	and.w	r3, r3, #3
 800f140:	4a53      	ldr	r2, [pc, #332]	; (800f290 <UART_SetConfig+0x9d0>)
 800f142:	fa22 f303 	lsr.w	r3, r2, r3
 800f146:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f148:	e00f      	b.n	800f16a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800f14a:	4b51      	ldr	r3, [pc, #324]	; (800f290 <UART_SetConfig+0x9d0>)
 800f14c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f14e:	e00c      	b.n	800f16a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f150:	4b4c      	ldr	r3, [pc, #304]	; (800f284 <UART_SetConfig+0x9c4>)
 800f152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f154:	e009      	b.n	800f16a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f15a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f15c:	e005      	b.n	800f16a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800f15e:	2300      	movs	r3, #0
 800f160:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f162:	2301      	movs	r3, #1
 800f164:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f168:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f000 80ea 	beq.w	800f346 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f176:	4a44      	ldr	r2, [pc, #272]	; (800f288 <UART_SetConfig+0x9c8>)
 800f178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f17c:	461a      	mov	r2, r3
 800f17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f180:	fbb3 f3f2 	udiv	r3, r3, r2
 800f184:	005a      	lsls	r2, r3, #1
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	085b      	lsrs	r3, r3, #1
 800f18c:	441a      	add	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	fbb2 f3f3 	udiv	r3, r2, r3
 800f196:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	2b0f      	cmp	r3, #15
 800f19c:	d916      	bls.n	800f1cc <UART_SetConfig+0x90c>
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1a4:	d212      	bcs.n	800f1cc <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	f023 030f 	bic.w	r3, r3, #15
 800f1ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b2:	085b      	lsrs	r3, r3, #1
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	f003 0307 	and.w	r3, r3, #7
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f1c8:	60da      	str	r2, [r3, #12]
 800f1ca:	e0bc      	b.n	800f346 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f1d2:	e0b8      	b.n	800f346 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f1d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f1d8:	2b20      	cmp	r3, #32
 800f1da:	dc4b      	bgt.n	800f274 <UART_SetConfig+0x9b4>
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f2c0 8087 	blt.w	800f2f0 <UART_SetConfig+0xa30>
 800f1e2:	2b20      	cmp	r3, #32
 800f1e4:	f200 8084 	bhi.w	800f2f0 <UART_SetConfig+0xa30>
 800f1e8:	a201      	add	r2, pc, #4	; (adr r2, 800f1f0 <UART_SetConfig+0x930>)
 800f1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ee:	bf00      	nop
 800f1f0:	0800f27b 	.word	0x0800f27b
 800f1f4:	0800f295 	.word	0x0800f295
 800f1f8:	0800f2f1 	.word	0x0800f2f1
 800f1fc:	0800f2f1 	.word	0x0800f2f1
 800f200:	0800f29d 	.word	0x0800f29d
 800f204:	0800f2f1 	.word	0x0800f2f1
 800f208:	0800f2f1 	.word	0x0800f2f1
 800f20c:	0800f2f1 	.word	0x0800f2f1
 800f210:	0800f2ad 	.word	0x0800f2ad
 800f214:	0800f2f1 	.word	0x0800f2f1
 800f218:	0800f2f1 	.word	0x0800f2f1
 800f21c:	0800f2f1 	.word	0x0800f2f1
 800f220:	0800f2f1 	.word	0x0800f2f1
 800f224:	0800f2f1 	.word	0x0800f2f1
 800f228:	0800f2f1 	.word	0x0800f2f1
 800f22c:	0800f2f1 	.word	0x0800f2f1
 800f230:	0800f2bd 	.word	0x0800f2bd
 800f234:	0800f2f1 	.word	0x0800f2f1
 800f238:	0800f2f1 	.word	0x0800f2f1
 800f23c:	0800f2f1 	.word	0x0800f2f1
 800f240:	0800f2f1 	.word	0x0800f2f1
 800f244:	0800f2f1 	.word	0x0800f2f1
 800f248:	0800f2f1 	.word	0x0800f2f1
 800f24c:	0800f2f1 	.word	0x0800f2f1
 800f250:	0800f2f1 	.word	0x0800f2f1
 800f254:	0800f2f1 	.word	0x0800f2f1
 800f258:	0800f2f1 	.word	0x0800f2f1
 800f25c:	0800f2f1 	.word	0x0800f2f1
 800f260:	0800f2f1 	.word	0x0800f2f1
 800f264:	0800f2f1 	.word	0x0800f2f1
 800f268:	0800f2f1 	.word	0x0800f2f1
 800f26c:	0800f2f1 	.word	0x0800f2f1
 800f270:	0800f2e3 	.word	0x0800f2e3
 800f274:	2b40      	cmp	r3, #64	; 0x40
 800f276:	d037      	beq.n	800f2e8 <UART_SetConfig+0xa28>
 800f278:	e03a      	b.n	800f2f0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f27a:	f7fb fd37 	bl	800acec <HAL_RCC_GetPCLK1Freq>
 800f27e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f280:	e03c      	b.n	800f2fc <UART_SetConfig+0xa3c>
 800f282:	bf00      	nop
 800f284:	003d0900 	.word	0x003d0900
 800f288:	080140cc 	.word	0x080140cc
 800f28c:	58024400 	.word	0x58024400
 800f290:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f294:	f7fb fd40 	bl	800ad18 <HAL_RCC_GetPCLK2Freq>
 800f298:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f29a:	e02f      	b.n	800f2fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f29c:	f107 0314 	add.w	r3, r7, #20
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fc fca5 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2aa:	e027      	b.n	800f2fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2ac:	f107 0308 	add.w	r3, r7, #8
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7fc fdf1 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2ba:	e01f      	b.n	800f2fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2bc:	4b2c      	ldr	r3, [pc, #176]	; (800f370 <UART_SetConfig+0xab0>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f003 0320 	and.w	r3, r3, #32
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d009      	beq.n	800f2dc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f2c8:	4b29      	ldr	r3, [pc, #164]	; (800f370 <UART_SetConfig+0xab0>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	08db      	lsrs	r3, r3, #3
 800f2ce:	f003 0303 	and.w	r3, r3, #3
 800f2d2:	4a28      	ldr	r2, [pc, #160]	; (800f374 <UART_SetConfig+0xab4>)
 800f2d4:	fa22 f303 	lsr.w	r3, r2, r3
 800f2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2da:	e00f      	b.n	800f2fc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f2dc:	4b25      	ldr	r3, [pc, #148]	; (800f374 <UART_SetConfig+0xab4>)
 800f2de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2e0:	e00c      	b.n	800f2fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2e2:	4b25      	ldr	r3, [pc, #148]	; (800f378 <UART_SetConfig+0xab8>)
 800f2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2e6:	e009      	b.n	800f2fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2ee:	e005      	b.n	800f2fc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f2fa:	bf00      	nop
    }

    if (pclk != 0U)
 800f2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d021      	beq.n	800f346 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f306:	4a1d      	ldr	r2, [pc, #116]	; (800f37c <UART_SetConfig+0xabc>)
 800f308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f30c:	461a      	mov	r2, r3
 800f30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f310:	fbb3 f2f2 	udiv	r2, r3, r2
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	085b      	lsrs	r3, r3, #1
 800f31a:	441a      	add	r2, r3
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	fbb2 f3f3 	udiv	r3, r2, r3
 800f324:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f328:	2b0f      	cmp	r3, #15
 800f32a:	d909      	bls.n	800f340 <UART_SetConfig+0xa80>
 800f32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f332:	d205      	bcs.n	800f340 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f336:	b29a      	uxth	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	60da      	str	r2, [r3, #12]
 800f33e:	e002      	b.n	800f346 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2201      	movs	r2, #1
 800f34a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2201      	movs	r2, #1
 800f352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f362:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f366:	4618      	mov	r0, r3
 800f368:	3738      	adds	r7, #56	; 0x38
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bdb0      	pop	{r4, r5, r7, pc}
 800f36e:	bf00      	nop
 800f370:	58024400 	.word	0x58024400
 800f374:	03d09000 	.word	0x03d09000
 800f378:	003d0900 	.word	0x003d0900
 800f37c:	080140cc 	.word	0x080140cc

0800f380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f38c:	f003 0301 	and.w	r3, r3, #1
 800f390:	2b00      	cmp	r3, #0
 800f392:	d00a      	beq.n	800f3aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	430a      	orrs	r2, r1
 800f3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ae:	f003 0302 	and.w	r3, r3, #2
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00a      	beq.n	800f3cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	430a      	orrs	r2, r1
 800f3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3d0:	f003 0304 	and.w	r3, r3, #4
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d00a      	beq.n	800f3ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	430a      	orrs	r2, r1
 800f3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3f2:	f003 0308 	and.w	r3, r3, #8
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00a      	beq.n	800f410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	430a      	orrs	r2, r1
 800f40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f414:	f003 0310 	and.w	r3, r3, #16
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00a      	beq.n	800f432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	430a      	orrs	r2, r1
 800f430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f436:	f003 0320 	and.w	r3, r3, #32
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00a      	beq.n	800f454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	430a      	orrs	r2, r1
 800f452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d01a      	beq.n	800f496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	430a      	orrs	r2, r1
 800f474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f47a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f47e:	d10a      	bne.n	800f496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	430a      	orrs	r2, r1
 800f494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d00a      	beq.n	800f4b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	430a      	orrs	r2, r1
 800f4b6:	605a      	str	r2, [r3, #4]
  }
}
 800f4b8:	bf00      	nop
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b086      	sub	sp, #24
 800f4c8:	af02      	add	r7, sp, #8
 800f4ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f4d4:	f7f7 f8d0 	bl	8006678 <HAL_GetTick>
 800f4d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f003 0308 	and.w	r3, r3, #8
 800f4e4:	2b08      	cmp	r3, #8
 800f4e6:	d10e      	bne.n	800f506 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 f82f 	bl	800f55a <UART_WaitOnFlagUntilTimeout>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d001      	beq.n	800f506 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f502:	2303      	movs	r3, #3
 800f504:	e025      	b.n	800f552 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f003 0304 	and.w	r3, r3, #4
 800f510:	2b04      	cmp	r3, #4
 800f512:	d10e      	bne.n	800f532 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2200      	movs	r2, #0
 800f51e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 f819 	bl	800f55a <UART_WaitOnFlagUntilTimeout>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d001      	beq.n	800f532 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f52e:	2303      	movs	r3, #3
 800f530:	e00f      	b.n	800f552 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2220      	movs	r2, #32
 800f536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2220      	movs	r2, #32
 800f53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f550:	2300      	movs	r3, #0
}
 800f552:	4618      	mov	r0, r3
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b09c      	sub	sp, #112	; 0x70
 800f55e:	af00      	add	r7, sp, #0
 800f560:	60f8      	str	r0, [r7, #12]
 800f562:	60b9      	str	r1, [r7, #8]
 800f564:	603b      	str	r3, [r7, #0]
 800f566:	4613      	mov	r3, r2
 800f568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f56a:	e0a9      	b.n	800f6c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f56c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f572:	f000 80a5 	beq.w	800f6c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f576:	f7f7 f87f 	bl	8006678 <HAL_GetTick>
 800f57a:	4602      	mov	r2, r0
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	1ad3      	subs	r3, r2, r3
 800f580:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f582:	429a      	cmp	r2, r3
 800f584:	d302      	bcc.n	800f58c <UART_WaitOnFlagUntilTimeout+0x32>
 800f586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d140      	bne.n	800f60e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f594:	e853 3f00 	ldrex	r3, [r3]
 800f598:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f59c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f5a0:	667b      	str	r3, [r7, #100]	; 0x64
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f5aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f5ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f5b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f5b2:	e841 2300 	strex	r3, r2, [r1]
 800f5b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f5b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1e6      	bne.n	800f58c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	3308      	adds	r3, #8
 800f5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c8:	e853 3f00 	ldrex	r3, [r3]
 800f5cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d0:	f023 0301 	bic.w	r3, r3, #1
 800f5d4:	663b      	str	r3, [r7, #96]	; 0x60
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	3308      	adds	r3, #8
 800f5dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f5de:	64ba      	str	r2, [r7, #72]	; 0x48
 800f5e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5e6:	e841 2300 	strex	r3, r2, [r1]
 800f5ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d1e5      	bne.n	800f5be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2220      	movs	r2, #32
 800f5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2220      	movs	r2, #32
 800f5fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2200      	movs	r2, #0
 800f606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f60a:	2303      	movs	r3, #3
 800f60c:	e069      	b.n	800f6e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f003 0304 	and.w	r3, r3, #4
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d051      	beq.n	800f6c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	69db      	ldr	r3, [r3, #28]
 800f622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f62a:	d149      	bne.n	800f6c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f634:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63e:	e853 3f00 	ldrex	r3, [r3]
 800f642:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f646:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f64a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	461a      	mov	r2, r3
 800f652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f654:	637b      	str	r3, [r7, #52]	; 0x34
 800f656:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f65a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f65c:	e841 2300 	strex	r3, r2, [r1]
 800f660:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f664:	2b00      	cmp	r3, #0
 800f666:	d1e6      	bne.n	800f636 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	3308      	adds	r3, #8
 800f66e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	e853 3f00 	ldrex	r3, [r3]
 800f676:	613b      	str	r3, [r7, #16]
   return(result);
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	f023 0301 	bic.w	r3, r3, #1
 800f67e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	3308      	adds	r3, #8
 800f686:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f688:	623a      	str	r2, [r7, #32]
 800f68a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f68c:	69f9      	ldr	r1, [r7, #28]
 800f68e:	6a3a      	ldr	r2, [r7, #32]
 800f690:	e841 2300 	strex	r3, r2, [r1]
 800f694:	61bb      	str	r3, [r7, #24]
   return(result);
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d1e5      	bne.n	800f668 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2220      	movs	r2, #32
 800f6a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2220      	movs	r2, #32
 800f6a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	2220      	movs	r2, #32
 800f6b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f6bc:	2303      	movs	r3, #3
 800f6be:	e010      	b.n	800f6e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	69da      	ldr	r2, [r3, #28]
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	4013      	ands	r3, r2
 800f6ca:	68ba      	ldr	r2, [r7, #8]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	bf0c      	ite	eq
 800f6d0:	2301      	moveq	r3, #1
 800f6d2:	2300      	movne	r3, #0
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	79fb      	ldrb	r3, [r7, #7]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	f43f af46 	beq.w	800f56c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6e0:	2300      	movs	r3, #0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3770      	adds	r7, #112	; 0x70
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
	...

0800f6ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b096      	sub	sp, #88	; 0x58
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	68ba      	ldr	r2, [r7, #8]
 800f6fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	88fa      	ldrh	r2, [r7, #6]
 800f704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2200      	movs	r2, #0
 800f70c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2222      	movs	r2, #34	; 0x22
 800f714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d02c      	beq.n	800f77a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f724:	4a42      	ldr	r2, [pc, #264]	; (800f830 <UART_Start_Receive_DMA+0x144>)
 800f726:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f72c:	4a41      	ldr	r2, [pc, #260]	; (800f834 <UART_Start_Receive_DMA+0x148>)
 800f72e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f734:	4a40      	ldr	r2, [pc, #256]	; (800f838 <UART_Start_Receive_DMA+0x14c>)
 800f736:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f73c:	2200      	movs	r2, #0
 800f73e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	3324      	adds	r3, #36	; 0x24
 800f74a:	4619      	mov	r1, r3
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f750:	461a      	mov	r2, r3
 800f752:	88fb      	ldrh	r3, [r7, #6]
 800f754:	f7f7 fe42 	bl	80073dc <HAL_DMA_Start_IT>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d00d      	beq.n	800f77a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2210      	movs	r2, #16
 800f762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2200      	movs	r2, #0
 800f76a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2220      	movs	r2, #32
 800f772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f776:	2301      	movs	r3, #1
 800f778:	e055      	b.n	800f826 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2200      	movs	r2, #0
 800f77e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d018      	beq.n	800f7bc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f792:	e853 3f00 	ldrex	r3, [r3]
 800f796:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f79e:	657b      	str	r3, [r7, #84]	; 0x54
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7aa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7b0:	e841 2300 	strex	r3, r2, [r1]
 800f7b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f7b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d1e6      	bne.n	800f78a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	3308      	adds	r3, #8
 800f7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c6:	e853 3f00 	ldrex	r3, [r3]
 800f7ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ce:	f043 0301 	orr.w	r3, r3, #1
 800f7d2:	653b      	str	r3, [r7, #80]	; 0x50
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	3308      	adds	r3, #8
 800f7da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7dc:	637a      	str	r2, [r7, #52]	; 0x34
 800f7de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7e4:	e841 2300 	strex	r3, r2, [r1]
 800f7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d1e5      	bne.n	800f7bc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	3308      	adds	r3, #8
 800f7f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	e853 3f00 	ldrex	r3, [r3]
 800f7fe:	613b      	str	r3, [r7, #16]
   return(result);
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f806:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	3308      	adds	r3, #8
 800f80e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f810:	623a      	str	r2, [r7, #32]
 800f812:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f814:	69f9      	ldr	r1, [r7, #28]
 800f816:	6a3a      	ldr	r2, [r7, #32]
 800f818:	e841 2300 	strex	r3, r2, [r1]
 800f81c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f81e:	69bb      	ldr	r3, [r7, #24]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1e5      	bne.n	800f7f0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f824:	2300      	movs	r3, #0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3758      	adds	r7, #88	; 0x58
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	0800fa3f 	.word	0x0800fa3f
 800f834:	0800fb61 	.word	0x0800fb61
 800f838:	0800fb99 	.word	0x0800fb99

0800f83c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b08f      	sub	sp, #60	; 0x3c
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84a:	6a3b      	ldr	r3, [r7, #32]
 800f84c:	e853 3f00 	ldrex	r3, [r3]
 800f850:	61fb      	str	r3, [r7, #28]
   return(result);
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f858:	637b      	str	r3, [r7, #52]	; 0x34
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	461a      	mov	r2, r3
 800f860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f862:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f864:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f86a:	e841 2300 	strex	r3, r2, [r1]
 800f86e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f872:	2b00      	cmp	r3, #0
 800f874:	d1e6      	bne.n	800f844 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	3308      	adds	r3, #8
 800f87c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	e853 3f00 	ldrex	r3, [r3]
 800f884:	60bb      	str	r3, [r7, #8]
   return(result);
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f88c:	633b      	str	r3, [r7, #48]	; 0x30
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	3308      	adds	r3, #8
 800f894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f896:	61ba      	str	r2, [r7, #24]
 800f898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f89a:	6979      	ldr	r1, [r7, #20]
 800f89c:	69ba      	ldr	r2, [r7, #24]
 800f89e:	e841 2300 	strex	r3, r2, [r1]
 800f8a2:	613b      	str	r3, [r7, #16]
   return(result);
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d1e5      	bne.n	800f876 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2220      	movs	r2, #32
 800f8ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f8b2:	bf00      	nop
 800f8b4:	373c      	adds	r7, #60	; 0x3c
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
	...

0800f8c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b095      	sub	sp, #84	; 0x54
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8d0:	e853 3f00 	ldrex	r3, [r3]
 800f8d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8e6:	643b      	str	r3, [r7, #64]	; 0x40
 800f8e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f8ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8ee:	e841 2300 	strex	r3, r2, [r1]
 800f8f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1e6      	bne.n	800f8c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3308      	adds	r3, #8
 800f900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f902:	6a3b      	ldr	r3, [r7, #32]
 800f904:	e853 3f00 	ldrex	r3, [r3]
 800f908:	61fb      	str	r3, [r7, #28]
   return(result);
 800f90a:	69fa      	ldr	r2, [r7, #28]
 800f90c:	4b1e      	ldr	r3, [pc, #120]	; (800f988 <UART_EndRxTransfer+0xc8>)
 800f90e:	4013      	ands	r3, r2
 800f910:	64bb      	str	r3, [r7, #72]	; 0x48
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	3308      	adds	r3, #8
 800f918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f91a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f91c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f91e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f922:	e841 2300 	strex	r3, r2, [r1]
 800f926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1e5      	bne.n	800f8fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f932:	2b01      	cmp	r3, #1
 800f934:	d118      	bne.n	800f968 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	e853 3f00 	ldrex	r3, [r3]
 800f942:	60bb      	str	r3, [r7, #8]
   return(result);
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	f023 0310 	bic.w	r3, r3, #16
 800f94a:	647b      	str	r3, [r7, #68]	; 0x44
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	461a      	mov	r2, r3
 800f952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f954:	61bb      	str	r3, [r7, #24]
 800f956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f958:	6979      	ldr	r1, [r7, #20]
 800f95a:	69ba      	ldr	r2, [r7, #24]
 800f95c:	e841 2300 	strex	r3, r2, [r1]
 800f960:	613b      	str	r3, [r7, #16]
   return(result);
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d1e6      	bne.n	800f936 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2220      	movs	r2, #32
 800f96c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2200      	movs	r2, #0
 800f974:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f97c:	bf00      	nop
 800f97e:	3754      	adds	r7, #84	; 0x54
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr
 800f988:	effffffe 	.word	0xeffffffe

0800f98c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b090      	sub	sp, #64	; 0x40
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f998:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	69db      	ldr	r3, [r3, #28]
 800f99e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9a2:	d037      	beq.n	800fa14 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800f9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	3308      	adds	r3, #8
 800f9b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b6:	e853 3f00 	ldrex	r3, [r3]
 800f9ba:	623b      	str	r3, [r7, #32]
   return(result);
 800f9bc:	6a3b      	ldr	r3, [r7, #32]
 800f9be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	3308      	adds	r3, #8
 800f9ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9cc:	633a      	str	r2, [r7, #48]	; 0x30
 800f9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9d4:	e841 2300 	strex	r3, r2, [r1]
 800f9d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1e5      	bne.n	800f9ac <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	e853 3f00 	ldrex	r3, [r3]
 800f9ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9f4:	637b      	str	r3, [r7, #52]	; 0x34
 800f9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9fe:	61fb      	str	r3, [r7, #28]
 800fa00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa02:	69b9      	ldr	r1, [r7, #24]
 800fa04:	69fa      	ldr	r2, [r7, #28]
 800fa06:	e841 2300 	strex	r3, r2, [r1]
 800fa0a:	617b      	str	r3, [r7, #20]
   return(result);
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1e6      	bne.n	800f9e0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa12:	e002      	b.n	800fa1a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fa14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa16:	f7fe ff21 	bl	800e85c <HAL_UART_TxCpltCallback>
}
 800fa1a:	bf00      	nop
 800fa1c:	3740      	adds	r7, #64	; 0x40
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b084      	sub	sp, #16
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa2e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	f7fe ff1d 	bl	800e870 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa36:	bf00      	nop
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b09c      	sub	sp, #112	; 0x70
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa4a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	69db      	ldr	r3, [r3, #28]
 800fa50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa54:	d071      	beq.n	800fb3a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fa56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa66:	e853 3f00 	ldrex	r3, [r3]
 800fa6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fa6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa72:	66bb      	str	r3, [r7, #104]	; 0x68
 800fa74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	461a      	mov	r2, r3
 800fa7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa7c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa84:	e841 2300 	strex	r3, r2, [r1]
 800fa88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fa8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d1e6      	bne.n	800fa5e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	3308      	adds	r3, #8
 800fa96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9a:	e853 3f00 	ldrex	r3, [r3]
 800fa9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800faa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa2:	f023 0301 	bic.w	r3, r3, #1
 800faa6:	667b      	str	r3, [r7, #100]	; 0x64
 800faa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	3308      	adds	r3, #8
 800faae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fab0:	647a      	str	r2, [r7, #68]	; 0x44
 800fab2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fab8:	e841 2300 	strex	r3, r2, [r1]
 800fabc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d1e5      	bne.n	800fa90 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	3308      	adds	r3, #8
 800faca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800facc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800face:	e853 3f00 	ldrex	r3, [r3]
 800fad2:	623b      	str	r3, [r7, #32]
   return(result);
 800fad4:	6a3b      	ldr	r3, [r7, #32]
 800fad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fada:	663b      	str	r3, [r7, #96]	; 0x60
 800fadc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	3308      	adds	r3, #8
 800fae2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fae4:	633a      	str	r2, [r7, #48]	; 0x30
 800fae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800faea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faec:	e841 2300 	strex	r3, r2, [r1]
 800faf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800faf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1e5      	bne.n	800fac4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800faf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fafa:	2220      	movs	r2, #32
 800fafc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d118      	bne.n	800fb3a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	e853 3f00 	ldrex	r3, [r3]
 800fb14:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f023 0310 	bic.w	r3, r3, #16
 800fb1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	461a      	mov	r2, r3
 800fb24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb26:	61fb      	str	r3, [r7, #28]
 800fb28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb2a:	69b9      	ldr	r1, [r7, #24]
 800fb2c:	69fa      	ldr	r2, [r7, #28]
 800fb2e:	e841 2300 	strex	r3, r2, [r1]
 800fb32:	617b      	str	r3, [r7, #20]
   return(result);
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d1e6      	bne.n	800fb08 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d107      	bne.n	800fb52 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fb42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb48:	4619      	mov	r1, r3
 800fb4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fb4c:	f7f3 fa70 	bl	8003030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fb50:	e002      	b.n	800fb58 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800fb52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fb54:	f7fe fe96 	bl	800e884 <HAL_UART_RxCpltCallback>
}
 800fb58:	bf00      	nop
 800fb5a:	3770      	adds	r7, #112	; 0x70
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb72:	2b01      	cmp	r3, #1
 800fb74:	d109      	bne.n	800fb8a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb7c:	085b      	lsrs	r3, r3, #1
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	4619      	mov	r1, r3
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f7f3 fa54 	bl	8003030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fb88:	e002      	b.n	800fb90 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f7fe fe84 	bl	800e898 <HAL_UART_RxHalfCpltCallback>
}
 800fb90:	bf00      	nop
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b086      	sub	sp, #24
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbb4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbc0:	2b80      	cmp	r3, #128	; 0x80
 800fbc2:	d109      	bne.n	800fbd8 <UART_DMAError+0x40>
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	2b21      	cmp	r3, #33	; 0x21
 800fbc8:	d106      	bne.n	800fbd8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fbd2:	6978      	ldr	r0, [r7, #20]
 800fbd4:	f7ff fe32 	bl	800f83c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbe2:	2b40      	cmp	r3, #64	; 0x40
 800fbe4:	d109      	bne.n	800fbfa <UART_DMAError+0x62>
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2b22      	cmp	r3, #34	; 0x22
 800fbea:	d106      	bne.n	800fbfa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fbf4:	6978      	ldr	r0, [r7, #20]
 800fbf6:	f7ff fe63 	bl	800f8c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc00:	f043 0210 	orr.w	r2, r3, #16
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc0a:	6978      	ldr	r0, [r7, #20]
 800fc0c:	f7fe fe4e 	bl	800e8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc10:	bf00      	nop
 800fc12:	3718      	adds	r7, #24
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f7fe fe38 	bl	800e8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc3c:	bf00      	nop
 800fc3e:	3710      	adds	r7, #16
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b088      	sub	sp, #32
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	e853 3f00 	ldrex	r3, [r3]
 800fc58:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc60:	61fb      	str	r3, [r7, #28]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	461a      	mov	r2, r3
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	61bb      	str	r3, [r7, #24]
 800fc6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc6e:	6979      	ldr	r1, [r7, #20]
 800fc70:	69ba      	ldr	r2, [r7, #24]
 800fc72:	e841 2300 	strex	r3, r2, [r1]
 800fc76:	613b      	str	r3, [r7, #16]
   return(result);
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d1e6      	bne.n	800fc4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2220      	movs	r2, #32
 800fc82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f7fe fde5 	bl	800e85c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc92:	bf00      	nop
 800fc94:	3720      	adds	r7, #32
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fc9a:	b480      	push	{r7}
 800fc9c:	b083      	sub	sp, #12
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fca2:	bf00      	nop
 800fca4:	370c      	adds	r7, #12
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fcae:	b480      	push	{r7}
 800fcb0:	b083      	sub	sp, #12
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fcb6:	bf00      	nop
 800fcb8:	370c      	adds	r7, #12
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr

0800fcc2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fcc2:	b480      	push	{r7}
 800fcc4:	b083      	sub	sp, #12
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fcca:	bf00      	nop
 800fccc:	370c      	adds	r7, #12
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr

0800fcd6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b084      	sub	sp, #16
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d101      	bne.n	800fcec <HAL_UARTEx_EnableFifoMode+0x16>
 800fce8:	2302      	movs	r3, #2
 800fcea:	e02b      	b.n	800fd44 <HAL_UARTEx_EnableFifoMode+0x6e>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2224      	movs	r2, #36	; 0x24
 800fcf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f022 0201 	bic.w	r2, r2, #1
 800fd12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fd1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800fd22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	68fa      	ldr	r2, [r7, #12]
 800fd2a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 f91f 	bl	800ff70 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2220      	movs	r2, #32
 800fd36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd42:	2300      	movs	r3, #0
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b085      	sub	sp, #20
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d101      	bne.n	800fd62 <HAL_UARTEx_DisableFifoMode+0x16>
 800fd5e:	2302      	movs	r3, #2
 800fd60:	e027      	b.n	800fdb2 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2201      	movs	r2, #1
 800fd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2224      	movs	r2, #36	; 0x24
 800fd6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f022 0201 	bic.w	r2, r2, #1
 800fd88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fd90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2200      	movs	r2, #0
 800fd96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2220      	movs	r2, #32
 800fda4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fdb0:	2300      	movs	r3, #0
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3714      	adds	r7, #20
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr

0800fdbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b084      	sub	sp, #16
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
 800fdc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d101      	bne.n	800fdd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fdd2:	2302      	movs	r3, #2
 800fdd4:	e02d      	b.n	800fe32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2224      	movs	r2, #36	; 0x24
 800fde2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f022 0201 	bic.w	r2, r2, #1
 800fdfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	683a      	ldr	r2, [r7, #0]
 800fe0e:	430a      	orrs	r2, r1
 800fe10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f000 f8ac 	bl	800ff70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	68fa      	ldr	r2, [r7, #12]
 800fe1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2220      	movs	r2, #32
 800fe24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fe30:	2300      	movs	r3, #0
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b084      	sub	sp, #16
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d101      	bne.n	800fe52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe4e:	2302      	movs	r3, #2
 800fe50:	e02d      	b.n	800feae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2201      	movs	r2, #1
 800fe56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2224      	movs	r2, #36	; 0x24
 800fe5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f022 0201 	bic.w	r2, r2, #1
 800fe78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	689b      	ldr	r3, [r3, #8]
 800fe80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	683a      	ldr	r2, [r7, #0]
 800fe8a:	430a      	orrs	r2, r1
 800fe8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 f86e 	bl	800ff70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	68fa      	ldr	r2, [r7, #12]
 800fe9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2220      	movs	r2, #32
 800fea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800feac:	2300      	movs	r3, #0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3710      	adds	r7, #16
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b08c      	sub	sp, #48	; 0x30
 800feba:	af00      	add	r7, sp, #0
 800febc:	60f8      	str	r0, [r7, #12]
 800febe:	60b9      	str	r1, [r7, #8]
 800fec0:	4613      	mov	r3, r2
 800fec2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800feca:	2b20      	cmp	r3, #32
 800fecc:	d14a      	bne.n	800ff64 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d002      	beq.n	800feda <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800fed4:	88fb      	ldrh	r3, [r7, #6]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800feda:	2301      	movs	r3, #1
 800fedc:	e043      	b.n	800ff66 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d101      	bne.n	800feec <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800fee8:	2302      	movs	r3, #2
 800feea:	e03c      	b.n	800ff66 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2201      	movs	r2, #1
 800fef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2201      	movs	r2, #1
 800fef8:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800fefa:	88fb      	ldrh	r3, [r7, #6]
 800fefc:	461a      	mov	r2, r3
 800fefe:	68b9      	ldr	r1, [r7, #8]
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	f7ff fbf3 	bl	800f6ec <UART_Start_Receive_DMA>
 800ff06:	4603      	mov	r3, r0
 800ff08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ff0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d124      	bne.n	800ff5e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d11d      	bne.n	800ff58 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2210      	movs	r2, #16
 800ff22:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff2a:	69bb      	ldr	r3, [r7, #24]
 800ff2c:	e853 3f00 	ldrex	r3, [r3]
 800ff30:	617b      	str	r3, [r7, #20]
   return(result);
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	f043 0310 	orr.w	r3, r3, #16
 800ff38:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	461a      	mov	r2, r3
 800ff40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff42:	627b      	str	r3, [r7, #36]	; 0x24
 800ff44:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff46:	6a39      	ldr	r1, [r7, #32]
 800ff48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff4a:	e841 2300 	strex	r3, r2, [r1]
 800ff4e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d1e6      	bne.n	800ff24 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800ff56:	e002      	b.n	800ff5e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ff58:	2301      	movs	r3, #1
 800ff5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ff5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff62:	e000      	b.n	800ff66 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800ff64:	2302      	movs	r3, #2
  }
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3730      	adds	r7, #48	; 0x30
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
	...

0800ff70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b085      	sub	sp, #20
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d108      	bne.n	800ff92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2201      	movs	r2, #1
 800ff84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ff90:	e031      	b.n	800fff6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ff92:	2310      	movs	r3, #16
 800ff94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ff96:	2310      	movs	r3, #16
 800ff98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	689b      	ldr	r3, [r3, #8]
 800ffa0:	0e5b      	lsrs	r3, r3, #25
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	f003 0307 	and.w	r3, r3, #7
 800ffa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	689b      	ldr	r3, [r3, #8]
 800ffb0:	0f5b      	lsrs	r3, r3, #29
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	f003 0307 	and.w	r3, r3, #7
 800ffb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ffba:	7bbb      	ldrb	r3, [r7, #14]
 800ffbc:	7b3a      	ldrb	r2, [r7, #12]
 800ffbe:	4911      	ldr	r1, [pc, #68]	; (8010004 <UARTEx_SetNbDataToProcess+0x94>)
 800ffc0:	5c8a      	ldrb	r2, [r1, r2]
 800ffc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ffc6:	7b3a      	ldrb	r2, [r7, #12]
 800ffc8:	490f      	ldr	r1, [pc, #60]	; (8010008 <UARTEx_SetNbDataToProcess+0x98>)
 800ffca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ffcc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ffd8:	7bfb      	ldrb	r3, [r7, #15]
 800ffda:	7b7a      	ldrb	r2, [r7, #13]
 800ffdc:	4909      	ldr	r1, [pc, #36]	; (8010004 <UARTEx_SetNbDataToProcess+0x94>)
 800ffde:	5c8a      	ldrb	r2, [r1, r2]
 800ffe0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ffe4:	7b7a      	ldrb	r2, [r7, #13]
 800ffe6:	4908      	ldr	r1, [pc, #32]	; (8010008 <UARTEx_SetNbDataToProcess+0x98>)
 800ffe8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ffea:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffee:	b29a      	uxth	r2, r3
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fff6:	bf00      	nop
 800fff8:	3714      	adds	r7, #20
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop
 8010004:	080140e4 	.word	0x080140e4
 8010008:	080140ec 	.word	0x080140ec

0801000c <checkint>:
 801000c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010010:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010014:	429a      	cmp	r2, r3
 8010016:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010018:	dd2b      	ble.n	8010072 <checkint+0x66>
 801001a:	f240 4333 	movw	r3, #1075	; 0x433
 801001e:	429a      	cmp	r2, r3
 8010020:	dc25      	bgt.n	801006e <checkint+0x62>
 8010022:	1a9b      	subs	r3, r3, r2
 8010024:	f1a3 0620 	sub.w	r6, r3, #32
 8010028:	f04f 32ff 	mov.w	r2, #4294967295
 801002c:	fa02 f606 	lsl.w	r6, r2, r6
 8010030:	fa02 f403 	lsl.w	r4, r2, r3
 8010034:	f1c3 0520 	rsb	r5, r3, #32
 8010038:	4334      	orrs	r4, r6
 801003a:	fa22 f505 	lsr.w	r5, r2, r5
 801003e:	432c      	orrs	r4, r5
 8010040:	409a      	lsls	r2, r3
 8010042:	ea20 0602 	bic.w	r6, r0, r2
 8010046:	ea21 0704 	bic.w	r7, r1, r4
 801004a:	ea56 0207 	orrs.w	r2, r6, r7
 801004e:	f1a3 0420 	sub.w	r4, r3, #32
 8010052:	f1c3 0220 	rsb	r2, r3, #32
 8010056:	d10c      	bne.n	8010072 <checkint+0x66>
 8010058:	40d8      	lsrs	r0, r3
 801005a:	fa01 f302 	lsl.w	r3, r1, r2
 801005e:	4318      	orrs	r0, r3
 8010060:	40e1      	lsrs	r1, r4
 8010062:	4308      	orrs	r0, r1
 8010064:	f000 0301 	and.w	r3, r0, #1
 8010068:	f1c3 0002 	rsb	r0, r3, #2
 801006c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801006e:	2002      	movs	r0, #2
 8010070:	e7fc      	b.n	801006c <checkint+0x60>
 8010072:	2000      	movs	r0, #0
 8010074:	e7fa      	b.n	801006c <checkint+0x60>
	...

08010078 <pow>:
 8010078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801007c:	ed2d 8b0a 	vpush	{d8-d12}
 8010080:	b09b      	sub	sp, #108	; 0x6c
 8010082:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010086:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801008a:	ed8d 1b00 	vstr	d1, [sp]
 801008e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8010092:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010096:	f109 30ff 	add.w	r0, r9, #4294967295
 801009a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 801009e:	4288      	cmp	r0, r1
 80100a0:	46cc      	mov	ip, r9
 80100a2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 80100a6:	d806      	bhi.n	80100b6 <pow+0x3e>
 80100a8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 80100ac:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 80100b0:	297f      	cmp	r1, #127	; 0x7f
 80100b2:	f240 81ab 	bls.w	801040c <pow+0x394>
 80100b6:	19b1      	adds	r1, r6, r6
 80100b8:	9104      	str	r1, [sp, #16]
 80100ba:	eb47 0107 	adc.w	r1, r7, r7
 80100be:	9105      	str	r1, [sp, #20]
 80100c0:	9904      	ldr	r1, [sp, #16]
 80100c2:	f111 31ff 	adds.w	r1, r1, #4294967295
 80100c6:	460a      	mov	r2, r1
 80100c8:	9905      	ldr	r1, [sp, #20]
 80100ca:	f141 31ff 	adc.w	r1, r1, #4294967295
 80100ce:	460b      	mov	r3, r1
 80100d0:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 80100d4:	f06f 0001 	mvn.w	r0, #1
 80100d8:	4299      	cmp	r1, r3
 80100da:	bf08      	it	eq
 80100dc:	4290      	cmpeq	r0, r2
 80100de:	d260      	bcs.n	80101a2 <pow+0x12a>
 80100e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100e4:	4313      	orrs	r3, r2
 80100e6:	d11a      	bne.n	801011e <pow+0xa6>
 80100e8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 80100ec:	1923      	adds	r3, r4, r4
 80100ee:	930c      	str	r3, [sp, #48]	; 0x30
 80100f0:	eb42 0302 	adc.w	r3, r2, r2
 80100f4:	930d      	str	r3, [sp, #52]	; 0x34
 80100f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80100fa:	4bcf      	ldr	r3, [pc, #828]	; (8010438 <pow+0x3c0>)
 80100fc:	2200      	movs	r2, #0
 80100fe:	428b      	cmp	r3, r1
 8010100:	bf08      	it	eq
 8010102:	4282      	cmpeq	r2, r0
 8010104:	f080 8265 	bcs.w	80105d2 <pow+0x55a>
 8010108:	ed9d 7b02 	vldr	d7, [sp, #8]
 801010c:	ed9d 6b00 	vldr	d6, [sp]
 8010110:	ee37 0b06 	vadd.f64	d0, d7, d6
 8010114:	b01b      	add	sp, #108	; 0x6c
 8010116:	ecbd 8b0a 	vpop	{d8-d12}
 801011a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801011e:	49c7      	ldr	r1, [pc, #796]	; (801043c <pow+0x3c4>)
 8010120:	2000      	movs	r0, #0
 8010122:	428d      	cmp	r5, r1
 8010124:	bf08      	it	eq
 8010126:	4284      	cmpeq	r4, r0
 8010128:	d10b      	bne.n	8010142 <pow+0xca>
 801012a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801012e:	19b3      	adds	r3, r6, r6
 8010130:	930e      	str	r3, [sp, #56]	; 0x38
 8010132:	eb42 0302 	adc.w	r3, r2, r2
 8010136:	930f      	str	r3, [sp, #60]	; 0x3c
 8010138:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801013c:	4bbe      	ldr	r3, [pc, #760]	; (8010438 <pow+0x3c0>)
 801013e:	2200      	movs	r2, #0
 8010140:	e7dd      	b.n	80100fe <pow+0x86>
 8010142:	1921      	adds	r1, r4, r4
 8010144:	9106      	str	r1, [sp, #24]
 8010146:	eb45 0105 	adc.w	r1, r5, r5
 801014a:	9107      	str	r1, [sp, #28]
 801014c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8010150:	49bb      	ldr	r1, [pc, #748]	; (8010440 <pow+0x3c8>)
 8010152:	2000      	movs	r0, #0
 8010154:	42a1      	cmp	r1, r4
 8010156:	bf08      	it	eq
 8010158:	4298      	cmpeq	r0, r3
 801015a:	d3d5      	bcc.n	8010108 <pow+0x90>
 801015c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010160:	428c      	cmp	r4, r1
 8010162:	bf08      	it	eq
 8010164:	4283      	cmpeq	r3, r0
 8010166:	d1cf      	bne.n	8010108 <pow+0x90>
 8010168:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801016c:	49b5      	ldr	r1, [pc, #724]	; (8010444 <pow+0x3cc>)
 801016e:	2000      	movs	r0, #0
 8010170:	428c      	cmp	r4, r1
 8010172:	bf08      	it	eq
 8010174:	4283      	cmpeq	r3, r0
 8010176:	f000 822c 	beq.w	80105d2 <pow+0x55a>
 801017a:	49b3      	ldr	r1, [pc, #716]	; (8010448 <pow+0x3d0>)
 801017c:	f04f 30ff 	mov.w	r0, #4294967295
 8010180:	42a1      	cmp	r1, r4
 8010182:	bf08      	it	eq
 8010184:	4298      	cmpeq	r0, r3
 8010186:	ea6f 0307 	mvn.w	r3, r7
 801018a:	bf34      	ite	cc
 801018c:	2201      	movcc	r2, #1
 801018e:	2200      	movcs	r2, #0
 8010190:	0fdb      	lsrs	r3, r3, #31
 8010192:	429a      	cmp	r2, r3
 8010194:	f040 821a 	bne.w	80105cc <pow+0x554>
 8010198:	ed9d 7b00 	vldr	d7, [sp]
 801019c:	ee27 0b07 	vmul.f64	d0, d7, d7
 80101a0:	e7b8      	b.n	8010114 <pow+0x9c>
 80101a2:	1923      	adds	r3, r4, r4
 80101a4:	9308      	str	r3, [sp, #32]
 80101a6:	eb45 0305 	adc.w	r3, r5, r5
 80101aa:	9309      	str	r3, [sp, #36]	; 0x24
 80101ac:	9b08      	ldr	r3, [sp, #32]
 80101ae:	f113 33ff 	adds.w	r3, r3, #4294967295
 80101b2:	9310      	str	r3, [sp, #64]	; 0x40
 80101b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101b6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80101ba:	9311      	str	r3, [sp, #68]	; 0x44
 80101bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80101c0:	4299      	cmp	r1, r3
 80101c2:	bf08      	it	eq
 80101c4:	4290      	cmpeq	r0, r2
 80101c6:	d22d      	bcs.n	8010224 <pow+0x1ac>
 80101c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101cc:	2c00      	cmp	r4, #0
 80101ce:	f175 0300 	sbcs.w	r3, r5, #0
 80101d2:	ee27 0b07 	vmul.f64	d0, d7, d7
 80101d6:	da16      	bge.n	8010206 <pow+0x18e>
 80101d8:	4630      	mov	r0, r6
 80101da:	4639      	mov	r1, r7
 80101dc:	f7ff ff16 	bl	801000c <checkint>
 80101e0:	2801      	cmp	r0, #1
 80101e2:	d110      	bne.n	8010206 <pow+0x18e>
 80101e4:	eeb1 0b40 	vneg.f64	d0, d0
 80101e8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80101ec:	4323      	orrs	r3, r4
 80101ee:	d10c      	bne.n	801020a <pow+0x192>
 80101f0:	2e00      	cmp	r6, #0
 80101f2:	f177 0300 	sbcs.w	r3, r7, #0
 80101f6:	da8d      	bge.n	8010114 <pow+0x9c>
 80101f8:	b01b      	add	sp, #108	; 0x6c
 80101fa:	ecbd 8b0a 	vpop	{d8-d12}
 80101fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010202:	f001 b809 	b.w	8011218 <__math_divzero>
 8010206:	2000      	movs	r0, #0
 8010208:	e7ee      	b.n	80101e8 <pow+0x170>
 801020a:	2e00      	cmp	r6, #0
 801020c:	f177 0300 	sbcs.w	r3, r7, #0
 8010210:	da80      	bge.n	8010114 <pow+0x9c>
 8010212:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010216:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801021a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801021e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8010222:	e777      	b.n	8010114 <pow+0x9c>
 8010224:	2c00      	cmp	r4, #0
 8010226:	f175 0300 	sbcs.w	r3, r5, #0
 801022a:	da35      	bge.n	8010298 <pow+0x220>
 801022c:	4630      	mov	r0, r6
 801022e:	4639      	mov	r1, r7
 8010230:	f7ff feec 	bl	801000c <checkint>
 8010234:	b940      	cbnz	r0, 8010248 <pow+0x1d0>
 8010236:	ed9d 0b02 	vldr	d0, [sp, #8]
 801023a:	b01b      	add	sp, #108	; 0x6c
 801023c:	ecbd 8b0a 	vpop	{d8-d12}
 8010240:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010244:	f001 b800 	b.w	8011248 <__math_invalid>
 8010248:	2801      	cmp	r0, #1
 801024a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801024e:	bf14      	ite	ne
 8010250:	2000      	movne	r0, #0
 8010252:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010256:	461d      	mov	r5, r3
 8010258:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 801025c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8010260:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8010264:	2a7f      	cmp	r2, #127	; 0x7f
 8010266:	d933      	bls.n	80102d0 <pow+0x258>
 8010268:	4974      	ldr	r1, [pc, #464]	; (801043c <pow+0x3c4>)
 801026a:	2000      	movs	r0, #0
 801026c:	428d      	cmp	r5, r1
 801026e:	bf08      	it	eq
 8010270:	4284      	cmpeq	r4, r0
 8010272:	f000 81ae 	beq.w	80105d2 <pow+0x55a>
 8010276:	f240 32bd 	movw	r2, #957	; 0x3bd
 801027a:	4293      	cmp	r3, r2
 801027c:	d80e      	bhi.n	801029c <pow+0x224>
 801027e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010282:	ed9d 7b00 	vldr	d7, [sp]
 8010286:	42a9      	cmp	r1, r5
 8010288:	bf08      	it	eq
 801028a:	42a0      	cmpeq	r0, r4
 801028c:	bf34      	ite	cc
 801028e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8010292:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8010296:	e73d      	b.n	8010114 <pow+0x9c>
 8010298:	2000      	movs	r0, #0
 801029a:	e7df      	b.n	801025c <pow+0x1e4>
 801029c:	42a9      	cmp	r1, r5
 801029e:	bf08      	it	eq
 80102a0:	42a0      	cmpeq	r0, r4
 80102a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80102a6:	bf2c      	ite	cs
 80102a8:	2301      	movcs	r3, #1
 80102aa:	2300      	movcc	r3, #0
 80102ac:	4590      	cmp	r8, r2
 80102ae:	bf8c      	ite	hi
 80102b0:	f04f 0800 	movhi.w	r8, #0
 80102b4:	f04f 0801 	movls.w	r8, #1
 80102b8:	4543      	cmp	r3, r8
 80102ba:	f04f 0000 	mov.w	r0, #0
 80102be:	f000 80af 	beq.w	8010420 <pow+0x3a8>
 80102c2:	b01b      	add	sp, #108	; 0x6c
 80102c4:	ecbd 8b0a 	vpop	{d8-d12}
 80102c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	f000 bf9c 	b.w	8011208 <__math_oflow>
 80102d0:	f1bc 0f00 	cmp.w	ip, #0
 80102d4:	d10e      	bne.n	80102f4 <pow+0x27c>
 80102d6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010430 <pow+0x3b8>
 80102da:	ed9d 6b02 	vldr	d6, [sp, #8]
 80102de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80102e2:	ec57 6b17 	vmov	r6, r7, d7
 80102e6:	4b59      	ldr	r3, [pc, #356]	; (801044c <pow+0x3d4>)
 80102e8:	2100      	movs	r1, #0
 80102ea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80102ee:	1874      	adds	r4, r6, r1
 80102f0:	eb42 0503 	adc.w	r5, r2, r3
 80102f4:	2300      	movs	r3, #0
 80102f6:	18e3      	adds	r3, r4, r3
 80102f8:	4b55      	ldr	r3, [pc, #340]	; (8010450 <pow+0x3d8>)
 80102fa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80102fe:	eb45 0303 	adc.w	r3, r5, r3
 8010302:	1519      	asrs	r1, r3, #20
 8010304:	ee03 1a10 	vmov	s6, r1
 8010308:	0d1e      	lsrs	r6, r3, #20
 801030a:	2100      	movs	r1, #0
 801030c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010310:	0536      	lsls	r6, r6, #20
 8010312:	1a63      	subs	r3, r4, r1
 8010314:	9312      	str	r3, [sp, #72]	; 0x48
 8010316:	eb65 0306 	sbc.w	r3, r5, r6
 801031a:	9313      	str	r3, [sp, #76]	; 0x4c
 801031c:	4b4d      	ldr	r3, [pc, #308]	; (8010454 <pow+0x3dc>)
 801031e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8010322:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010326:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 801032a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801032e:	ed93 7b00 	vldr	d7, [r3]
 8010332:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8010336:	ed93 4b02 	vldr	d4, [r3, #8]
 801033a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801033e:	eea3 5b07 	vfma.f64	d5, d3, d7
 8010342:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8010346:	ee36 9b05 	vadd.f64	d9, d6, d5
 801034a:	ee35 5b49 	vsub.f64	d5, d5, d9
 801034e:	eea3 7b04 	vfma.f64	d7, d3, d4
 8010352:	ed93 4b04 	vldr	d4, [r3, #16]
 8010356:	ee35 5b06 	vadd.f64	d5, d5, d6
 801035a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801035e:	ee26 4b04 	vmul.f64	d4, d6, d4
 8010362:	ed93 3b08 	vldr	d3, [r3, #32]
 8010366:	ee26 0b04 	vmul.f64	d0, d6, d4
 801036a:	eeb0 8b40 	vmov.f64	d8, d0
 801036e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8010372:	ed93 4b06 	vldr	d4, [r3, #24]
 8010376:	ee26 ab00 	vmul.f64	d10, d6, d0
 801037a:	ee39 1b00 	vadd.f64	d1, d9, d0
 801037e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8010382:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010386:	ee39 9b41 	vsub.f64	d9, d9, d1
 801038a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 801038e:	ee37 8b08 	vadd.f64	d8, d7, d8
 8010392:	ee39 9b00 	vadd.f64	d9, d9, d0
 8010396:	eea6 3b02 	vfma.f64	d3, d6, d2
 801039a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801039e:	ee38 9b09 	vadd.f64	d9, d8, d9
 80103a2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 80103a6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 80103aa:	ed9d 6b00 	vldr	d6, [sp]
 80103ae:	eea0 3b02 	vfma.f64	d3, d0, d2
 80103b2:	eea0 4b03 	vfma.f64	d4, d0, d3
 80103b6:	eeaa 9b04 	vfma.f64	d9, d10, d4
 80103ba:	ee31 7b09 	vadd.f64	d7, d1, d9
 80103be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80103c2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80103c6:	eeb0 3b46 	vmov.f64	d3, d6
 80103ca:	ee31 1b47 	vsub.f64	d1, d1, d7
 80103ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80103d2:	ee31 9b09 	vadd.f64	d9, d1, d9
 80103d6:	ed9d 6b00 	vldr	d6, [sp]
 80103da:	f3c3 570a 	ubfx	r7, r3, #20, #11
 80103de:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 80103e2:	193c      	adds	r4, r7, r4
 80103e4:	2c3e      	cmp	r4, #62	; 0x3e
 80103e6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 80103ea:	eea6 3b09 	vfma.f64	d3, d6, d9
 80103ee:	d934      	bls.n	801045a <pow+0x3e2>
 80103f0:	428c      	cmp	r4, r1
 80103f2:	da0d      	bge.n	8010410 <pow+0x398>
 80103f4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80103f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103fc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010400:	2800      	cmp	r0, #0
 8010402:	f43f ae87 	beq.w	8010114 <pow+0x9c>
 8010406:	eeb1 0b40 	vneg.f64	d0, d0
 801040a:	e683      	b.n	8010114 <pow+0x9c>
 801040c:	2000      	movs	r0, #0
 801040e:	e771      	b.n	80102f4 <pow+0x27c>
 8010410:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8010414:	d920      	bls.n	8010458 <pow+0x3e0>
 8010416:	2a00      	cmp	r2, #0
 8010418:	f173 0300 	sbcs.w	r3, r3, #0
 801041c:	f6bf af51 	bge.w	80102c2 <pow+0x24a>
 8010420:	b01b      	add	sp, #108	; 0x6c
 8010422:	ecbd 8b0a 	vpop	{d8-d12}
 8010426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801042a:	f000 bee5 	b.w	80111f8 <__math_uflow>
 801042e:	bf00      	nop
 8010430:	00000000 	.word	0x00000000
 8010434:	43300000 	.word	0x43300000
 8010438:	fff00000 	.word	0xfff00000
 801043c:	3ff00000 	.word	0x3ff00000
 8010440:	ffe00000 	.word	0xffe00000
 8010444:	7fe00000 	.word	0x7fe00000
 8010448:	7fdfffff 	.word	0x7fdfffff
 801044c:	fcc00000 	.word	0xfcc00000
 8010450:	c0196aab 	.word	0xc0196aab
 8010454:	080140f8 	.word	0x080140f8
 8010458:	460f      	mov	r7, r1
 801045a:	4e65      	ldr	r6, [pc, #404]	; (80105f0 <pow+0x578>)
 801045c:	ed9d 4b02 	vldr	d4, [sp, #8]
 8010460:	ed96 6b02 	vldr	d6, [r6, #8]
 8010464:	ed96 7b00 	vldr	d7, [r6]
 8010468:	eeb0 5b46 	vmov.f64	d5, d6
 801046c:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010470:	ed8d 5b00 	vstr	d5, [sp]
 8010474:	ee35 6b46 	vsub.f64	d6, d5, d6
 8010478:	eeb0 5b44 	vmov.f64	d5, d4
 801047c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010480:	ed96 7b04 	vldr	d7, [r6, #16]
 8010484:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8010488:	eea6 5b07 	vfma.f64	d5, d6, d7
 801048c:	eeb0 7b45 	vmov.f64	d7, d5
 8010490:	ed96 5b06 	vldr	d5, [r6, #24]
 8010494:	1849      	adds	r1, r1, r1
 8010496:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 801049a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801049e:	eea6 7b05 	vfma.f64	d7, d6, d5
 80104a2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 80104a6:	ee33 3b07 	vadd.f64	d3, d3, d7
 80104aa:	ee23 6b03 	vmul.f64	d6, d3, d3
 80104ae:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 80104b2:	ed96 5b08 	vldr	d5, [r6, #32]
 80104b6:	ee33 7b07 	vadd.f64	d7, d3, d7
 80104ba:	1814      	adds	r4, r2, r0
 80104bc:	0365      	lsls	r5, r4, #13
 80104be:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 80104c2:	eea3 5b04 	vfma.f64	d5, d3, d4
 80104c6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80104ca:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 80104ce:	ee26 6b06 	vmul.f64	d6, d6, d6
 80104d2:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 80104d6:	2000      	movs	r0, #0
 80104d8:	eb10 0a04 	adds.w	sl, r0, r4
 80104dc:	eea3 5b04 	vfma.f64	d5, d3, d4
 80104e0:	eb45 0b0c 	adc.w	fp, r5, ip
 80104e4:	eea6 7b05 	vfma.f64	d7, d6, d5
 80104e8:	2f00      	cmp	r7, #0
 80104ea:	d16a      	bne.n	80105c2 <pow+0x54a>
 80104ec:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 80104f0:	4639      	mov	r1, r7
 80104f2:	ea50 0301 	orrs.w	r3, r0, r1
 80104f6:	f04f 0300 	mov.w	r3, #0
 80104fa:	d115      	bne.n	8010528 <pow+0x4b0>
 80104fc:	eb1a 0303 	adds.w	r3, sl, r3
 8010500:	ee0b 3a10 	vmov	s22, r3
 8010504:	4b3b      	ldr	r3, [pc, #236]	; (80105f4 <pow+0x57c>)
 8010506:	ed9f 0b34 	vldr	d0, [pc, #208]	; 80105d8 <pow+0x560>
 801050a:	eb4b 0303 	adc.w	r3, fp, r3
 801050e:	ee0b 3a90 	vmov	s23, r3
 8010512:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8010516:	ee2b 0b00 	vmul.f64	d0, d11, d0
 801051a:	b01b      	add	sp, #108	; 0x6c
 801051c:	ecbd 8b0a 	vpop	{d8-d12}
 8010520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010524:	f000 bea8 	b.w	8011278 <__math_check_oflow>
 8010528:	eb1a 0303 	adds.w	r3, sl, r3
 801052c:	930a      	str	r3, [sp, #40]	; 0x28
 801052e:	4b32      	ldr	r3, [pc, #200]	; (80105f8 <pow+0x580>)
 8010530:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010534:	eb4b 0303 	adc.w	r3, fp, r3
 8010538:	930b      	str	r3, [sp, #44]	; 0x2c
 801053a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801053e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010542:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010546:	eeb0 3bc7 	vabs.f64	d3, d7
 801054a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801054e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010552:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80105e0 <pow+0x568>
 8010556:	d52b      	bpl.n	80105b0 <pow+0x538>
 8010558:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801055c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010564:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010568:	ee35 6b06 	vadd.f64	d6, d5, d6
 801056c:	bf48      	it	mi
 801056e:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010572:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010576:	ee34 5b43 	vsub.f64	d5, d4, d3
 801057a:	ee35 7b07 	vadd.f64	d7, d5, d7
 801057e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010582:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010586:	ee37 7b44 	vsub.f64	d7, d7, d4
 801058a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801058e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010592:	d105      	bne.n	80105a0 <pow+0x528>
 8010594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010596:	463a      	mov	r2, r7
 8010598:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801059c:	ec43 2b17 	vmov	d7, r2, r3
 80105a0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 80105a4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 80105a8:	ee26 6b00 	vmul.f64	d6, d6, d0
 80105ac:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 80105b0:	ee27 0b00 	vmul.f64	d0, d7, d0
 80105b4:	b01b      	add	sp, #108	; 0x6c
 80105b6:	ecbd 8b0a 	vpop	{d8-d12}
 80105ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105be:	f000 be52 	b.w	8011266 <__math_check_uflow>
 80105c2:	ec4b ab10 	vmov	d0, sl, fp
 80105c6:	eea7 0b00 	vfma.f64	d0, d7, d0
 80105ca:	e5a3      	b.n	8010114 <pow+0x9c>
 80105cc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80105e8 <pow+0x570>
 80105d0:	e5a0      	b.n	8010114 <pow+0x9c>
 80105d2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80105d6:	e59d      	b.n	8010114 <pow+0x9c>
 80105d8:	00000000 	.word	0x00000000
 80105dc:	7f000000 	.word	0x7f000000
 80105e0:	00000000 	.word	0x00000000
 80105e4:	00100000 	.word	0x00100000
	...
 80105f0:	080152e0 	.word	0x080152e0
 80105f4:	c0f00000 	.word	0xc0f00000
 80105f8:	3fe00000 	.word	0x3fe00000
 80105fc:	00000000 	.word	0x00000000

08010600 <cos>:
 8010600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010602:	eeb0 7b40 	vmov.f64	d7, d0
 8010606:	ee17 3a90 	vmov	r3, s15
 801060a:	4a1f      	ldr	r2, [pc, #124]	; (8010688 <cos+0x88>)
 801060c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010610:	4293      	cmp	r3, r2
 8010612:	dc04      	bgt.n	801061e <cos+0x1e>
 8010614:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010680 <cos+0x80>
 8010618:	f000 fa8e 	bl	8010b38 <__kernel_cos>
 801061c:	e004      	b.n	8010628 <cos+0x28>
 801061e:	4a1b      	ldr	r2, [pc, #108]	; (801068c <cos+0x8c>)
 8010620:	4293      	cmp	r3, r2
 8010622:	dd04      	ble.n	801062e <cos+0x2e>
 8010624:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010628:	b005      	add	sp, #20
 801062a:	f85d fb04 	ldr.w	pc, [sp], #4
 801062e:	4668      	mov	r0, sp
 8010630:	f000 f89e 	bl	8010770 <__ieee754_rem_pio2>
 8010634:	f000 0003 	and.w	r0, r0, #3
 8010638:	2801      	cmp	r0, #1
 801063a:	d007      	beq.n	801064c <cos+0x4c>
 801063c:	2802      	cmp	r0, #2
 801063e:	d00e      	beq.n	801065e <cos+0x5e>
 8010640:	b9a0      	cbnz	r0, 801066c <cos+0x6c>
 8010642:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010646:	ed9d 0b00 	vldr	d0, [sp]
 801064a:	e7e5      	b.n	8010618 <cos+0x18>
 801064c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010650:	ed9d 0b00 	vldr	d0, [sp]
 8010654:	f000 fd5c 	bl	8011110 <__kernel_sin>
 8010658:	eeb1 0b40 	vneg.f64	d0, d0
 801065c:	e7e4      	b.n	8010628 <cos+0x28>
 801065e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010662:	ed9d 0b00 	vldr	d0, [sp]
 8010666:	f000 fa67 	bl	8010b38 <__kernel_cos>
 801066a:	e7f5      	b.n	8010658 <cos+0x58>
 801066c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010670:	ed9d 0b00 	vldr	d0, [sp]
 8010674:	2001      	movs	r0, #1
 8010676:	f000 fd4b 	bl	8011110 <__kernel_sin>
 801067a:	e7d5      	b.n	8010628 <cos+0x28>
 801067c:	f3af 8000 	nop.w
	...
 8010688:	3fe921fb 	.word	0x3fe921fb
 801068c:	7fefffff 	.word	0x7fefffff

08010690 <sin>:
 8010690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010692:	eeb0 7b40 	vmov.f64	d7, d0
 8010696:	ee17 3a90 	vmov	r3, s15
 801069a:	4a1f      	ldr	r2, [pc, #124]	; (8010718 <sin+0x88>)
 801069c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80106a0:	4293      	cmp	r3, r2
 80106a2:	dc05      	bgt.n	80106b0 <sin+0x20>
 80106a4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010710 <sin+0x80>
 80106a8:	2000      	movs	r0, #0
 80106aa:	f000 fd31 	bl	8011110 <__kernel_sin>
 80106ae:	e004      	b.n	80106ba <sin+0x2a>
 80106b0:	4a1a      	ldr	r2, [pc, #104]	; (801071c <sin+0x8c>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	dd04      	ble.n	80106c0 <sin+0x30>
 80106b6:	ee30 0b40 	vsub.f64	d0, d0, d0
 80106ba:	b005      	add	sp, #20
 80106bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80106c0:	4668      	mov	r0, sp
 80106c2:	f000 f855 	bl	8010770 <__ieee754_rem_pio2>
 80106c6:	f000 0003 	and.w	r0, r0, #3
 80106ca:	2801      	cmp	r0, #1
 80106cc:	d008      	beq.n	80106e0 <sin+0x50>
 80106ce:	2802      	cmp	r0, #2
 80106d0:	d00d      	beq.n	80106ee <sin+0x5e>
 80106d2:	b9b0      	cbnz	r0, 8010702 <sin+0x72>
 80106d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106d8:	ed9d 0b00 	vldr	d0, [sp]
 80106dc:	2001      	movs	r0, #1
 80106de:	e7e4      	b.n	80106aa <sin+0x1a>
 80106e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106e4:	ed9d 0b00 	vldr	d0, [sp]
 80106e8:	f000 fa26 	bl	8010b38 <__kernel_cos>
 80106ec:	e7e5      	b.n	80106ba <sin+0x2a>
 80106ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106f2:	ed9d 0b00 	vldr	d0, [sp]
 80106f6:	2001      	movs	r0, #1
 80106f8:	f000 fd0a 	bl	8011110 <__kernel_sin>
 80106fc:	eeb1 0b40 	vneg.f64	d0, d0
 8010700:	e7db      	b.n	80106ba <sin+0x2a>
 8010702:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010706:	ed9d 0b00 	vldr	d0, [sp]
 801070a:	f000 fa15 	bl	8010b38 <__kernel_cos>
 801070e:	e7f5      	b.n	80106fc <sin+0x6c>
	...
 8010718:	3fe921fb 	.word	0x3fe921fb
 801071c:	7fefffff 	.word	0x7fefffff

08010720 <atan2f>:
 8010720:	f000 b966 	b.w	80109f0 <__ieee754_atan2f>

08010724 <sqrtf>:
 8010724:	b508      	push	{r3, lr}
 8010726:	ed2d 8b02 	vpush	{d8}
 801072a:	eeb0 8a40 	vmov.f32	s16, s0
 801072e:	f000 f9fd 	bl	8010b2c <__ieee754_sqrtf>
 8010732:	4b0d      	ldr	r3, [pc, #52]	; (8010768 <sqrtf+0x44>)
 8010734:	f993 3000 	ldrsb.w	r3, [r3]
 8010738:	3301      	adds	r3, #1
 801073a:	d011      	beq.n	8010760 <sqrtf+0x3c>
 801073c:	eeb4 8a48 	vcmp.f32	s16, s16
 8010740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010744:	d60c      	bvs.n	8010760 <sqrtf+0x3c>
 8010746:	eddf 8a09 	vldr	s17, [pc, #36]	; 801076c <sqrtf+0x48>
 801074a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801074e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010752:	d505      	bpl.n	8010760 <sqrtf+0x3c>
 8010754:	f000 ff92 	bl	801167c <__errno>
 8010758:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801075c:	2321      	movs	r3, #33	; 0x21
 801075e:	6003      	str	r3, [r0, #0]
 8010760:	ecbd 8b02 	vpop	{d8}
 8010764:	bd08      	pop	{r3, pc}
 8010766:	bf00      	nop
 8010768:	24000235 	.word	0x24000235
 801076c:	00000000 	.word	0x00000000

08010770 <__ieee754_rem_pio2>:
 8010770:	b570      	push	{r4, r5, r6, lr}
 8010772:	eeb0 7b40 	vmov.f64	d7, d0
 8010776:	ee17 5a90 	vmov	r5, s15
 801077a:	4b97      	ldr	r3, [pc, #604]	; (80109d8 <__ieee754_rem_pio2+0x268>)
 801077c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010780:	429e      	cmp	r6, r3
 8010782:	b088      	sub	sp, #32
 8010784:	4604      	mov	r4, r0
 8010786:	dc07      	bgt.n	8010798 <__ieee754_rem_pio2+0x28>
 8010788:	2200      	movs	r2, #0
 801078a:	2300      	movs	r3, #0
 801078c:	ed84 0b00 	vstr	d0, [r4]
 8010790:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010794:	2000      	movs	r0, #0
 8010796:	e01b      	b.n	80107d0 <__ieee754_rem_pio2+0x60>
 8010798:	4b90      	ldr	r3, [pc, #576]	; (80109dc <__ieee754_rem_pio2+0x26c>)
 801079a:	429e      	cmp	r6, r3
 801079c:	dc3b      	bgt.n	8010816 <__ieee754_rem_pio2+0xa6>
 801079e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80107a2:	2d00      	cmp	r5, #0
 80107a4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010998 <__ieee754_rem_pio2+0x228>
 80107a8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80107ac:	dd19      	ble.n	80107e2 <__ieee754_rem_pio2+0x72>
 80107ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 80107b2:	429e      	cmp	r6, r3
 80107b4:	d00e      	beq.n	80107d4 <__ieee754_rem_pio2+0x64>
 80107b6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80109a0 <__ieee754_rem_pio2+0x230>
 80107ba:	ee37 5b46 	vsub.f64	d5, d7, d6
 80107be:	ee37 7b45 	vsub.f64	d7, d7, d5
 80107c2:	ed84 5b00 	vstr	d5, [r4]
 80107c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80107ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80107ce:	2001      	movs	r0, #1
 80107d0:	b008      	add	sp, #32
 80107d2:	bd70      	pop	{r4, r5, r6, pc}
 80107d4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80109a8 <__ieee754_rem_pio2+0x238>
 80107d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80107dc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80109b0 <__ieee754_rem_pio2+0x240>
 80107e0:	e7eb      	b.n	80107ba <__ieee754_rem_pio2+0x4a>
 80107e2:	429e      	cmp	r6, r3
 80107e4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80107e8:	d00e      	beq.n	8010808 <__ieee754_rem_pio2+0x98>
 80107ea:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80109a0 <__ieee754_rem_pio2+0x230>
 80107ee:	ee37 5b06 	vadd.f64	d5, d7, d6
 80107f2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80107f6:	ed84 5b00 	vstr	d5, [r4]
 80107fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80107fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010802:	ed84 7b02 	vstr	d7, [r4, #8]
 8010806:	e7e3      	b.n	80107d0 <__ieee754_rem_pio2+0x60>
 8010808:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80109a8 <__ieee754_rem_pio2+0x238>
 801080c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010810:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80109b0 <__ieee754_rem_pio2+0x240>
 8010814:	e7eb      	b.n	80107ee <__ieee754_rem_pio2+0x7e>
 8010816:	4b72      	ldr	r3, [pc, #456]	; (80109e0 <__ieee754_rem_pio2+0x270>)
 8010818:	429e      	cmp	r6, r3
 801081a:	dc6e      	bgt.n	80108fa <__ieee754_rem_pio2+0x18a>
 801081c:	f000 fd40 	bl	80112a0 <fabs>
 8010820:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010824:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80109b8 <__ieee754_rem_pio2+0x248>
 8010828:	eea0 7b06 	vfma.f64	d7, d0, d6
 801082c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010830:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010834:	ee17 0a90 	vmov	r0, s15
 8010838:	eeb1 4b45 	vneg.f64	d4, d5
 801083c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010998 <__ieee754_rem_pio2+0x228>
 8010840:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010844:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80109a0 <__ieee754_rem_pio2+0x230>
 8010848:	281f      	cmp	r0, #31
 801084a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801084e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010852:	dc08      	bgt.n	8010866 <__ieee754_rem_pio2+0xf6>
 8010854:	4b63      	ldr	r3, [pc, #396]	; (80109e4 <__ieee754_rem_pio2+0x274>)
 8010856:	1e42      	subs	r2, r0, #1
 8010858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801085c:	42b3      	cmp	r3, r6
 801085e:	d002      	beq.n	8010866 <__ieee754_rem_pio2+0xf6>
 8010860:	ed84 6b00 	vstr	d6, [r4]
 8010864:	e024      	b.n	80108b0 <__ieee754_rem_pio2+0x140>
 8010866:	ee16 3a90 	vmov	r3, s13
 801086a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801086e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8010872:	2b10      	cmp	r3, #16
 8010874:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010878:	ddf2      	ble.n	8010860 <__ieee754_rem_pio2+0xf0>
 801087a:	eeb0 6b40 	vmov.f64	d6, d0
 801087e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80109a8 <__ieee754_rem_pio2+0x238>
 8010882:	eea4 6b03 	vfma.f64	d6, d4, d3
 8010886:	ee30 7b46 	vsub.f64	d7, d0, d6
 801088a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801088e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80109b0 <__ieee754_rem_pio2+0x240>
 8010892:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010896:	ee36 3b47 	vsub.f64	d3, d6, d7
 801089a:	ee13 3a90 	vmov	r3, s7
 801089e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	2b31      	cmp	r3, #49	; 0x31
 80108a6:	dc17      	bgt.n	80108d8 <__ieee754_rem_pio2+0x168>
 80108a8:	eeb0 0b46 	vmov.f64	d0, d6
 80108ac:	ed84 3b00 	vstr	d3, [r4]
 80108b0:	ed94 6b00 	vldr	d6, [r4]
 80108b4:	2d00      	cmp	r5, #0
 80108b6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80108ba:	ee30 7b47 	vsub.f64	d7, d0, d7
 80108be:	ed84 7b02 	vstr	d7, [r4, #8]
 80108c2:	da85      	bge.n	80107d0 <__ieee754_rem_pio2+0x60>
 80108c4:	eeb1 6b46 	vneg.f64	d6, d6
 80108c8:	ed84 6b00 	vstr	d6, [r4]
 80108cc:	eeb1 7b47 	vneg.f64	d7, d7
 80108d0:	4240      	negs	r0, r0
 80108d2:	ed84 7b02 	vstr	d7, [r4, #8]
 80108d6:	e77b      	b.n	80107d0 <__ieee754_rem_pio2+0x60>
 80108d8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80109c0 <__ieee754_rem_pio2+0x250>
 80108dc:	eeb0 0b46 	vmov.f64	d0, d6
 80108e0:	eea4 0b03 	vfma.f64	d0, d4, d3
 80108e4:	ee36 7b40 	vsub.f64	d7, d6, d0
 80108e8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80109c8 <__ieee754_rem_pio2+0x258>
 80108ec:	eea4 7b03 	vfma.f64	d7, d4, d3
 80108f0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80108f4:	ee30 6b47 	vsub.f64	d6, d0, d7
 80108f8:	e7b2      	b.n	8010860 <__ieee754_rem_pio2+0xf0>
 80108fa:	4b3b      	ldr	r3, [pc, #236]	; (80109e8 <__ieee754_rem_pio2+0x278>)
 80108fc:	429e      	cmp	r6, r3
 80108fe:	dd06      	ble.n	801090e <__ieee754_rem_pio2+0x19e>
 8010900:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010904:	ed80 7b02 	vstr	d7, [r0, #8]
 8010908:	ed80 7b00 	vstr	d7, [r0]
 801090c:	e742      	b.n	8010794 <__ieee754_rem_pio2+0x24>
 801090e:	1532      	asrs	r2, r6, #20
 8010910:	ee10 0a10 	vmov	r0, s0
 8010914:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010918:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801091c:	ec41 0b17 	vmov	d7, r0, r1
 8010920:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010924:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80109d0 <__ieee754_rem_pio2+0x260>
 8010928:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801092c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010930:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010934:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010938:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801093c:	a902      	add	r1, sp, #8
 801093e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010942:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010946:	ed8d 6b04 	vstr	d6, [sp, #16]
 801094a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801094e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010952:	2603      	movs	r6, #3
 8010954:	4608      	mov	r0, r1
 8010956:	ed91 7b04 	vldr	d7, [r1, #16]
 801095a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010962:	4633      	mov	r3, r6
 8010964:	f1a1 0108 	sub.w	r1, r1, #8
 8010968:	f106 36ff 	add.w	r6, r6, #4294967295
 801096c:	d0f3      	beq.n	8010956 <__ieee754_rem_pio2+0x1e6>
 801096e:	491f      	ldr	r1, [pc, #124]	; (80109ec <__ieee754_rem_pio2+0x27c>)
 8010970:	9101      	str	r1, [sp, #4]
 8010972:	2102      	movs	r1, #2
 8010974:	9100      	str	r1, [sp, #0]
 8010976:	4621      	mov	r1, r4
 8010978:	f000 f94a 	bl	8010c10 <__kernel_rem_pio2>
 801097c:	2d00      	cmp	r5, #0
 801097e:	f6bf af27 	bge.w	80107d0 <__ieee754_rem_pio2+0x60>
 8010982:	ed94 7b00 	vldr	d7, [r4]
 8010986:	eeb1 7b47 	vneg.f64	d7, d7
 801098a:	ed84 7b00 	vstr	d7, [r4]
 801098e:	ed94 7b02 	vldr	d7, [r4, #8]
 8010992:	e79b      	b.n	80108cc <__ieee754_rem_pio2+0x15c>
 8010994:	f3af 8000 	nop.w
 8010998:	54400000 	.word	0x54400000
 801099c:	3ff921fb 	.word	0x3ff921fb
 80109a0:	1a626331 	.word	0x1a626331
 80109a4:	3dd0b461 	.word	0x3dd0b461
 80109a8:	1a600000 	.word	0x1a600000
 80109ac:	3dd0b461 	.word	0x3dd0b461
 80109b0:	2e037073 	.word	0x2e037073
 80109b4:	3ba3198a 	.word	0x3ba3198a
 80109b8:	6dc9c883 	.word	0x6dc9c883
 80109bc:	3fe45f30 	.word	0x3fe45f30
 80109c0:	2e000000 	.word	0x2e000000
 80109c4:	3ba3198a 	.word	0x3ba3198a
 80109c8:	252049c1 	.word	0x252049c1
 80109cc:	397b839a 	.word	0x397b839a
 80109d0:	00000000 	.word	0x00000000
 80109d4:	41700000 	.word	0x41700000
 80109d8:	3fe921fb 	.word	0x3fe921fb
 80109dc:	4002d97b 	.word	0x4002d97b
 80109e0:	413921fb 	.word	0x413921fb
 80109e4:	08015140 	.word	0x08015140
 80109e8:	7fefffff 	.word	0x7fefffff
 80109ec:	080151c0 	.word	0x080151c0

080109f0 <__ieee754_atan2f>:
 80109f0:	ee10 2a90 	vmov	r2, s1
 80109f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80109f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80109fc:	b510      	push	{r4, lr}
 80109fe:	eef0 7a40 	vmov.f32	s15, s0
 8010a02:	dc06      	bgt.n	8010a12 <__ieee754_atan2f+0x22>
 8010a04:	ee10 0a10 	vmov	r0, s0
 8010a08:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010a0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010a10:	dd04      	ble.n	8010a1c <__ieee754_atan2f+0x2c>
 8010a12:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010a16:	eeb0 0a67 	vmov.f32	s0, s15
 8010a1a:	bd10      	pop	{r4, pc}
 8010a1c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010a20:	d103      	bne.n	8010a2a <__ieee754_atan2f+0x3a>
 8010a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a26:	f000 bd4d 	b.w	80114c4 <atanf>
 8010a2a:	1794      	asrs	r4, r2, #30
 8010a2c:	f004 0402 	and.w	r4, r4, #2
 8010a30:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010a34:	b93b      	cbnz	r3, 8010a46 <__ieee754_atan2f+0x56>
 8010a36:	2c02      	cmp	r4, #2
 8010a38:	d05c      	beq.n	8010af4 <__ieee754_atan2f+0x104>
 8010a3a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010b08 <__ieee754_atan2f+0x118>
 8010a3e:	2c03      	cmp	r4, #3
 8010a40:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8010a44:	e7e7      	b.n	8010a16 <__ieee754_atan2f+0x26>
 8010a46:	b939      	cbnz	r1, 8010a58 <__ieee754_atan2f+0x68>
 8010a48:	eddf 7a30 	vldr	s15, [pc, #192]	; 8010b0c <__ieee754_atan2f+0x11c>
 8010a4c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8010b10 <__ieee754_atan2f+0x120>
 8010a50:	2800      	cmp	r0, #0
 8010a52:	fe67 7a80 	vselge.f32	s15, s15, s0
 8010a56:	e7de      	b.n	8010a16 <__ieee754_atan2f+0x26>
 8010a58:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010a5c:	d110      	bne.n	8010a80 <__ieee754_atan2f+0x90>
 8010a5e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010a62:	f104 34ff 	add.w	r4, r4, #4294967295
 8010a66:	d107      	bne.n	8010a78 <__ieee754_atan2f+0x88>
 8010a68:	2c02      	cmp	r4, #2
 8010a6a:	d846      	bhi.n	8010afa <__ieee754_atan2f+0x10a>
 8010a6c:	4b29      	ldr	r3, [pc, #164]	; (8010b14 <__ieee754_atan2f+0x124>)
 8010a6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a72:	edd4 7a00 	vldr	s15, [r4]
 8010a76:	e7ce      	b.n	8010a16 <__ieee754_atan2f+0x26>
 8010a78:	2c02      	cmp	r4, #2
 8010a7a:	d841      	bhi.n	8010b00 <__ieee754_atan2f+0x110>
 8010a7c:	4b26      	ldr	r3, [pc, #152]	; (8010b18 <__ieee754_atan2f+0x128>)
 8010a7e:	e7f6      	b.n	8010a6e <__ieee754_atan2f+0x7e>
 8010a80:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010a84:	d0e0      	beq.n	8010a48 <__ieee754_atan2f+0x58>
 8010a86:	1a5b      	subs	r3, r3, r1
 8010a88:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8010a8c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010a90:	da1a      	bge.n	8010ac8 <__ieee754_atan2f+0xd8>
 8010a92:	2a00      	cmp	r2, #0
 8010a94:	da01      	bge.n	8010a9a <__ieee754_atan2f+0xaa>
 8010a96:	313c      	adds	r1, #60	; 0x3c
 8010a98:	db19      	blt.n	8010ace <__ieee754_atan2f+0xde>
 8010a9a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010a9e:	f000 fde5 	bl	801166c <fabsf>
 8010aa2:	f000 fd0f 	bl	80114c4 <atanf>
 8010aa6:	eef0 7a40 	vmov.f32	s15, s0
 8010aaa:	2c01      	cmp	r4, #1
 8010aac:	d012      	beq.n	8010ad4 <__ieee754_atan2f+0xe4>
 8010aae:	2c02      	cmp	r4, #2
 8010ab0:	d017      	beq.n	8010ae2 <__ieee754_atan2f+0xf2>
 8010ab2:	2c00      	cmp	r4, #0
 8010ab4:	d0af      	beq.n	8010a16 <__ieee754_atan2f+0x26>
 8010ab6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8010b1c <__ieee754_atan2f+0x12c>
 8010aba:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010abe:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8010b20 <__ieee754_atan2f+0x130>
 8010ac2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010ac6:	e7a6      	b.n	8010a16 <__ieee754_atan2f+0x26>
 8010ac8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8010b0c <__ieee754_atan2f+0x11c>
 8010acc:	e7ed      	b.n	8010aaa <__ieee754_atan2f+0xba>
 8010ace:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010b24 <__ieee754_atan2f+0x134>
 8010ad2:	e7ea      	b.n	8010aaa <__ieee754_atan2f+0xba>
 8010ad4:	ee17 3a90 	vmov	r3, s15
 8010ad8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010adc:	ee07 3a90 	vmov	s15, r3
 8010ae0:	e799      	b.n	8010a16 <__ieee754_atan2f+0x26>
 8010ae2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010b1c <__ieee754_atan2f+0x12c>
 8010ae6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010aea:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8010b20 <__ieee754_atan2f+0x130>
 8010aee:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010af2:	e790      	b.n	8010a16 <__ieee754_atan2f+0x26>
 8010af4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010b20 <__ieee754_atan2f+0x130>
 8010af8:	e78d      	b.n	8010a16 <__ieee754_atan2f+0x26>
 8010afa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010b28 <__ieee754_atan2f+0x138>
 8010afe:	e78a      	b.n	8010a16 <__ieee754_atan2f+0x26>
 8010b00:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010b24 <__ieee754_atan2f+0x134>
 8010b04:	e787      	b.n	8010a16 <__ieee754_atan2f+0x26>
 8010b06:	bf00      	nop
 8010b08:	c0490fdb 	.word	0xc0490fdb
 8010b0c:	3fc90fdb 	.word	0x3fc90fdb
 8010b10:	bfc90fdb 	.word	0xbfc90fdb
 8010b14:	080152c8 	.word	0x080152c8
 8010b18:	080152d4 	.word	0x080152d4
 8010b1c:	33bbbd2e 	.word	0x33bbbd2e
 8010b20:	40490fdb 	.word	0x40490fdb
 8010b24:	00000000 	.word	0x00000000
 8010b28:	3f490fdb 	.word	0x3f490fdb

08010b2c <__ieee754_sqrtf>:
 8010b2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010b30:	4770      	bx	lr
 8010b32:	0000      	movs	r0, r0
 8010b34:	0000      	movs	r0, r0
	...

08010b38 <__kernel_cos>:
 8010b38:	ee10 1a90 	vmov	r1, s1
 8010b3c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010b40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010b44:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010b48:	da05      	bge.n	8010b56 <__kernel_cos+0x1e>
 8010b4a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010b4e:	ee17 3a90 	vmov	r3, s15
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d03d      	beq.n	8010bd2 <__kernel_cos+0x9a>
 8010b56:	ee20 3b00 	vmul.f64	d3, d0, d0
 8010b5a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010bd8 <__kernel_cos+0xa0>
 8010b5e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010be0 <__kernel_cos+0xa8>
 8010b62:	eea3 6b07 	vfma.f64	d6, d3, d7
 8010b66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010be8 <__kernel_cos+0xb0>
 8010b6a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010b6e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010bf0 <__kernel_cos+0xb8>
 8010b72:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010b76:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010bf8 <__kernel_cos+0xc0>
 8010b7a:	4b23      	ldr	r3, [pc, #140]	; (8010c08 <__kernel_cos+0xd0>)
 8010b7c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010b80:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010c00 <__kernel_cos+0xc8>
 8010b84:	4299      	cmp	r1, r3
 8010b86:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010b8a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010b8e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010b92:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010b96:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8010b9a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010b9e:	dc04      	bgt.n	8010baa <__kernel_cos+0x72>
 8010ba0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010ba4:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010ba8:	4770      	bx	lr
 8010baa:	4b18      	ldr	r3, [pc, #96]	; (8010c0c <__kernel_cos+0xd4>)
 8010bac:	4299      	cmp	r1, r3
 8010bae:	dc0d      	bgt.n	8010bcc <__kernel_cos+0x94>
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010bb6:	ec43 2b15 	vmov	d5, r2, r3
 8010bba:	ee34 0b45 	vsub.f64	d0, d4, d5
 8010bbe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010bc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010bc6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010bca:	4770      	bx	lr
 8010bcc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010bd0:	e7f3      	b.n	8010bba <__kernel_cos+0x82>
 8010bd2:	eeb0 0b44 	vmov.f64	d0, d4
 8010bd6:	4770      	bx	lr
 8010bd8:	be8838d4 	.word	0xbe8838d4
 8010bdc:	bda8fae9 	.word	0xbda8fae9
 8010be0:	bdb4b1c4 	.word	0xbdb4b1c4
 8010be4:	3e21ee9e 	.word	0x3e21ee9e
 8010be8:	809c52ad 	.word	0x809c52ad
 8010bec:	be927e4f 	.word	0xbe927e4f
 8010bf0:	19cb1590 	.word	0x19cb1590
 8010bf4:	3efa01a0 	.word	0x3efa01a0
 8010bf8:	16c15177 	.word	0x16c15177
 8010bfc:	bf56c16c 	.word	0xbf56c16c
 8010c00:	5555554c 	.word	0x5555554c
 8010c04:	3fa55555 	.word	0x3fa55555
 8010c08:	3fd33332 	.word	0x3fd33332
 8010c0c:	3fe90000 	.word	0x3fe90000

08010c10 <__kernel_rem_pio2>:
 8010c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c14:	ed2d 8b06 	vpush	{d8-d10}
 8010c18:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8010c1c:	469b      	mov	fp, r3
 8010c1e:	460f      	mov	r7, r1
 8010c20:	4bcf      	ldr	r3, [pc, #828]	; (8010f60 <__kernel_rem_pio2+0x350>)
 8010c22:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8010c24:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8010c28:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8010c2c:	9000      	str	r0, [sp, #0]
 8010c2e:	f112 0f14 	cmn.w	r2, #20
 8010c32:	bfa8      	it	ge
 8010c34:	2318      	movge	r3, #24
 8010c36:	f10b 31ff 	add.w	r1, fp, #4294967295
 8010c3a:	bfb8      	it	lt
 8010c3c:	2300      	movlt	r3, #0
 8010c3e:	f06f 0417 	mvn.w	r4, #23
 8010c42:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010f48 <__kernel_rem_pio2+0x338>
 8010c46:	bfa4      	itt	ge
 8010c48:	f1a2 0a03 	subge.w	sl, r2, #3
 8010c4c:	fb9a f3f3 	sdivge	r3, sl, r3
 8010c50:	fb03 4404 	mla	r4, r3, r4, r4
 8010c54:	1a5d      	subs	r5, r3, r1
 8010c56:	4414      	add	r4, r2
 8010c58:	eb09 0601 	add.w	r6, r9, r1
 8010c5c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8010c60:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8010c64:	2200      	movs	r2, #0
 8010c66:	42b2      	cmp	r2, r6
 8010c68:	dd12      	ble.n	8010c90 <__kernel_rem_pio2+0x80>
 8010c6a:	aa18      	add	r2, sp, #96	; 0x60
 8010c6c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010c70:	460e      	mov	r6, r1
 8010c72:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8010c76:	f1cb 0a01 	rsb	sl, fp, #1
 8010c7a:	eb0a 0006 	add.w	r0, sl, r6
 8010c7e:	4581      	cmp	r9, r0
 8010c80:	db25      	blt.n	8010cce <__kernel_rem_pio2+0xbe>
 8010c82:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010f48 <__kernel_rem_pio2+0x338>
 8010c86:	f8dd e000 	ldr.w	lr, [sp]
 8010c8a:	4615      	mov	r5, r2
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	e015      	b.n	8010cbc <__kernel_rem_pio2+0xac>
 8010c90:	42d5      	cmn	r5, r2
 8010c92:	d409      	bmi.n	8010ca8 <__kernel_rem_pio2+0x98>
 8010c94:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010c98:	ee07 0a90 	vmov	s15, r0
 8010c9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010ca0:	eca8 7b02 	vstmia	r8!, {d7}
 8010ca4:	3201      	adds	r2, #1
 8010ca6:	e7de      	b.n	8010c66 <__kernel_rem_pio2+0x56>
 8010ca8:	eeb0 7b46 	vmov.f64	d7, d6
 8010cac:	e7f8      	b.n	8010ca0 <__kernel_rem_pio2+0x90>
 8010cae:	ecbe 5b02 	vldmia	lr!, {d5}
 8010cb2:	ed95 6b00 	vldr	d6, [r5]
 8010cb6:	3001      	adds	r0, #1
 8010cb8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010cbc:	4288      	cmp	r0, r1
 8010cbe:	f1a5 0508 	sub.w	r5, r5, #8
 8010cc2:	ddf4      	ble.n	8010cae <__kernel_rem_pio2+0x9e>
 8010cc4:	eca8 7b02 	vstmia	r8!, {d7}
 8010cc8:	3208      	adds	r2, #8
 8010cca:	3601      	adds	r6, #1
 8010ccc:	e7d5      	b.n	8010c7a <__kernel_rem_pio2+0x6a>
 8010cce:	aa04      	add	r2, sp, #16
 8010cd0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010f50 <__kernel_rem_pio2+0x340>
 8010cd4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010f58 <__kernel_rem_pio2+0x348>
 8010cd8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010cdc:	9201      	str	r2, [sp, #4]
 8010cde:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8010ce2:	464e      	mov	r6, r9
 8010ce4:	ab90      	add	r3, sp, #576	; 0x240
 8010ce6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010cea:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8010cee:	ab04      	add	r3, sp, #16
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	4632      	mov	r2, r6
 8010cf4:	2a00      	cmp	r2, #0
 8010cf6:	dc4e      	bgt.n	8010d96 <__kernel_rem_pio2+0x186>
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8010cfe:	f000 fb4f 	bl	80113a0 <scalbn>
 8010d02:	eeb0 8b40 	vmov.f64	d8, d0
 8010d06:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010d0a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010d0e:	f000 fad3 	bl	80112b8 <floor>
 8010d12:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010d16:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010d1a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010d1e:	2c00      	cmp	r4, #0
 8010d20:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010d24:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8010d28:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010d2c:	ee17 8a90 	vmov	r8, s15
 8010d30:	dd46      	ble.n	8010dc0 <__kernel_rem_pio2+0x1b0>
 8010d32:	1e70      	subs	r0, r6, #1
 8010d34:	aa04      	add	r2, sp, #16
 8010d36:	f1c4 0c18 	rsb	ip, r4, #24
 8010d3a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8010d3e:	fa45 f20c 	asr.w	r2, r5, ip
 8010d42:	4490      	add	r8, r2
 8010d44:	fa02 f20c 	lsl.w	r2, r2, ip
 8010d48:	1aad      	subs	r5, r5, r2
 8010d4a:	aa04      	add	r2, sp, #16
 8010d4c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010d50:	f1c4 0217 	rsb	r2, r4, #23
 8010d54:	4115      	asrs	r5, r2
 8010d56:	2d00      	cmp	r5, #0
 8010d58:	dd41      	ble.n	8010dde <__kernel_rem_pio2+0x1ce>
 8010d5a:	f04f 0c00 	mov.w	ip, #0
 8010d5e:	f108 0801 	add.w	r8, r8, #1
 8010d62:	4660      	mov	r0, ip
 8010d64:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010d68:	4566      	cmp	r6, ip
 8010d6a:	dc69      	bgt.n	8010e40 <__kernel_rem_pio2+0x230>
 8010d6c:	2c00      	cmp	r4, #0
 8010d6e:	dd03      	ble.n	8010d78 <__kernel_rem_pio2+0x168>
 8010d70:	2c01      	cmp	r4, #1
 8010d72:	d076      	beq.n	8010e62 <__kernel_rem_pio2+0x252>
 8010d74:	2c02      	cmp	r4, #2
 8010d76:	d07f      	beq.n	8010e78 <__kernel_rem_pio2+0x268>
 8010d78:	2d02      	cmp	r5, #2
 8010d7a:	d130      	bne.n	8010dde <__kernel_rem_pio2+0x1ce>
 8010d7c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010d80:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010d84:	b358      	cbz	r0, 8010dde <__kernel_rem_pio2+0x1ce>
 8010d86:	4620      	mov	r0, r4
 8010d88:	9102      	str	r1, [sp, #8]
 8010d8a:	f000 fb09 	bl	80113a0 <scalbn>
 8010d8e:	9902      	ldr	r1, [sp, #8]
 8010d90:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010d94:	e023      	b.n	8010dde <__kernel_rem_pio2+0x1ce>
 8010d96:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010d9a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010d9e:	3a01      	subs	r2, #1
 8010da0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010da4:	ad68      	add	r5, sp, #416	; 0x1a0
 8010da6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010daa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010dae:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010db2:	eca0 0a01 	vstmia	r0!, {s0}
 8010db6:	ed95 0b00 	vldr	d0, [r5]
 8010dba:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010dbe:	e799      	b.n	8010cf4 <__kernel_rem_pio2+0xe4>
 8010dc0:	d105      	bne.n	8010dce <__kernel_rem_pio2+0x1be>
 8010dc2:	1e72      	subs	r2, r6, #1
 8010dc4:	a804      	add	r0, sp, #16
 8010dc6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8010dca:	15ed      	asrs	r5, r5, #23
 8010dcc:	e7c3      	b.n	8010d56 <__kernel_rem_pio2+0x146>
 8010dce:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010dd2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dda:	da2f      	bge.n	8010e3c <__kernel_rem_pio2+0x22c>
 8010ddc:	2500      	movs	r5, #0
 8010dde:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de6:	f040 8087 	bne.w	8010ef8 <__kernel_rem_pio2+0x2e8>
 8010dea:	1e73      	subs	r3, r6, #1
 8010dec:	4618      	mov	r0, r3
 8010dee:	f04f 0c00 	mov.w	ip, #0
 8010df2:	4548      	cmp	r0, r9
 8010df4:	da47      	bge.n	8010e86 <__kernel_rem_pio2+0x276>
 8010df6:	f1bc 0f00 	cmp.w	ip, #0
 8010dfa:	d070      	beq.n	8010ede <__kernel_rem_pio2+0x2ce>
 8010dfc:	aa04      	add	r2, sp, #16
 8010dfe:	3c18      	subs	r4, #24
 8010e00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010e04:	2a00      	cmp	r2, #0
 8010e06:	d075      	beq.n	8010ef4 <__kernel_rem_pio2+0x2e4>
 8010e08:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	f000 fac6 	bl	80113a0 <scalbn>
 8010e14:	9b00      	ldr	r3, [sp, #0]
 8010e16:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010f50 <__kernel_rem_pio2+0x340>
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	2a00      	cmp	r2, #0
 8010e1e:	f280 80ac 	bge.w	8010f7a <__kernel_rem_pio2+0x36a>
 8010e22:	4619      	mov	r1, r3
 8010e24:	2000      	movs	r0, #0
 8010e26:	2900      	cmp	r1, #0
 8010e28:	f2c0 80cd 	blt.w	8010fc6 <__kernel_rem_pio2+0x3b6>
 8010e2c:	aa68      	add	r2, sp, #416	; 0x1a0
 8010e2e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8010e32:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010f48 <__kernel_rem_pio2+0x338>
 8010e36:	4e4b      	ldr	r6, [pc, #300]	; (8010f64 <__kernel_rem_pio2+0x354>)
 8010e38:	2200      	movs	r2, #0
 8010e3a:	e0b8      	b.n	8010fae <__kernel_rem_pio2+0x39e>
 8010e3c:	2502      	movs	r5, #2
 8010e3e:	e78c      	b.n	8010d5a <__kernel_rem_pio2+0x14a>
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	b948      	cbnz	r0, 8010e58 <__kernel_rem_pio2+0x248>
 8010e44:	b11a      	cbz	r2, 8010e4e <__kernel_rem_pio2+0x23e>
 8010e46:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010e4a:	601a      	str	r2, [r3, #0]
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	f10c 0c01 	add.w	ip, ip, #1
 8010e52:	3304      	adds	r3, #4
 8010e54:	4610      	mov	r0, r2
 8010e56:	e787      	b.n	8010d68 <__kernel_rem_pio2+0x158>
 8010e58:	ebae 0202 	sub.w	r2, lr, r2
 8010e5c:	601a      	str	r2, [r3, #0]
 8010e5e:	4602      	mov	r2, r0
 8010e60:	e7f5      	b.n	8010e4e <__kernel_rem_pio2+0x23e>
 8010e62:	1e72      	subs	r2, r6, #1
 8010e64:	ab04      	add	r3, sp, #16
 8010e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010e6e:	f10d 0c10 	add.w	ip, sp, #16
 8010e72:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8010e76:	e77f      	b.n	8010d78 <__kernel_rem_pio2+0x168>
 8010e78:	1e72      	subs	r2, r6, #1
 8010e7a:	ab04      	add	r3, sp, #16
 8010e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010e84:	e7f3      	b.n	8010e6e <__kernel_rem_pio2+0x25e>
 8010e86:	aa04      	add	r2, sp, #16
 8010e88:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010e8c:	3801      	subs	r0, #1
 8010e8e:	ea4c 0c02 	orr.w	ip, ip, r2
 8010e92:	e7ae      	b.n	8010df2 <__kernel_rem_pio2+0x1e2>
 8010e94:	3001      	adds	r0, #1
 8010e96:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010e9a:	2a00      	cmp	r2, #0
 8010e9c:	d0fa      	beq.n	8010e94 <__kernel_rem_pio2+0x284>
 8010e9e:	eb06 020b 	add.w	r2, r6, fp
 8010ea2:	ad18      	add	r5, sp, #96	; 0x60
 8010ea4:	1c73      	adds	r3, r6, #1
 8010ea6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010eaa:	4406      	add	r6, r0
 8010eac:	429e      	cmp	r6, r3
 8010eae:	f6ff af19 	blt.w	8010ce4 <__kernel_rem_pio2+0xd4>
 8010eb2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010eb6:	9d00      	ldr	r5, [sp, #0]
 8010eb8:	ee07 0a90 	vmov	s15, r0
 8010ebc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	eca2 7b02 	vstmia	r2!, {d7}
 8010ec6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010f48 <__kernel_rem_pio2+0x338>
 8010eca:	4694      	mov	ip, r2
 8010ecc:	4288      	cmp	r0, r1
 8010ece:	dd09      	ble.n	8010ee4 <__kernel_rem_pio2+0x2d4>
 8010ed0:	a868      	add	r0, sp, #416	; 0x1a0
 8010ed2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8010ed6:	ed80 7b00 	vstr	d7, [r0]
 8010eda:	3301      	adds	r3, #1
 8010edc:	e7e6      	b.n	8010eac <__kernel_rem_pio2+0x29c>
 8010ede:	9b01      	ldr	r3, [sp, #4]
 8010ee0:	2001      	movs	r0, #1
 8010ee2:	e7d8      	b.n	8010e96 <__kernel_rem_pio2+0x286>
 8010ee4:	ecb5 5b02 	vldmia	r5!, {d5}
 8010ee8:	ed3c 6b02 	vldmdb	ip!, {d6}
 8010eec:	3001      	adds	r0, #1
 8010eee:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010ef2:	e7eb      	b.n	8010ecc <__kernel_rem_pio2+0x2bc>
 8010ef4:	3b01      	subs	r3, #1
 8010ef6:	e781      	b.n	8010dfc <__kernel_rem_pio2+0x1ec>
 8010ef8:	4260      	negs	r0, r4
 8010efa:	eeb0 0b48 	vmov.f64	d0, d8
 8010efe:	f000 fa4f 	bl	80113a0 <scalbn>
 8010f02:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010f58 <__kernel_rem_pio2+0x348>
 8010f06:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0e:	db2b      	blt.n	8010f68 <__kernel_rem_pio2+0x358>
 8010f10:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010f50 <__kernel_rem_pio2+0x340>
 8010f14:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010f18:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010f1c:	aa04      	add	r2, sp, #16
 8010f1e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010f22:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010f26:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010f2a:	a904      	add	r1, sp, #16
 8010f2c:	ee10 3a10 	vmov	r3, s0
 8010f30:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010f34:	ee17 2a10 	vmov	r2, s14
 8010f38:	1c73      	adds	r3, r6, #1
 8010f3a:	3418      	adds	r4, #24
 8010f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010f40:	e762      	b.n	8010e08 <__kernel_rem_pio2+0x1f8>
 8010f42:	bf00      	nop
 8010f44:	f3af 8000 	nop.w
	...
 8010f54:	3e700000 	.word	0x3e700000
 8010f58:	00000000 	.word	0x00000000
 8010f5c:	41700000 	.word	0x41700000
 8010f60:	08015b90 	.word	0x08015b90
 8010f64:	08015b50 	.word	0x08015b50
 8010f68:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010f6c:	aa04      	add	r2, sp, #16
 8010f6e:	ee10 3a10 	vmov	r3, s0
 8010f72:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010f76:	4633      	mov	r3, r6
 8010f78:	e746      	b.n	8010e08 <__kernel_rem_pio2+0x1f8>
 8010f7a:	a804      	add	r0, sp, #16
 8010f7c:	a968      	add	r1, sp, #416	; 0x1a0
 8010f7e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010f82:	9000      	str	r0, [sp, #0]
 8010f84:	ee07 0a90 	vmov	s15, r0
 8010f88:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010f8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010f90:	3a01      	subs	r2, #1
 8010f92:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010f96:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010f9a:	ed81 7b00 	vstr	d7, [r1]
 8010f9e:	e73d      	b.n	8010e1c <__kernel_rem_pio2+0x20c>
 8010fa0:	ecb6 5b02 	vldmia	r6!, {d5}
 8010fa4:	ecb4 6b02 	vldmia	r4!, {d6}
 8010fa8:	3201      	adds	r2, #1
 8010faa:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010fae:	454a      	cmp	r2, r9
 8010fb0:	dc01      	bgt.n	8010fb6 <__kernel_rem_pio2+0x3a6>
 8010fb2:	4290      	cmp	r0, r2
 8010fb4:	daf4      	bge.n	8010fa0 <__kernel_rem_pio2+0x390>
 8010fb6:	aa40      	add	r2, sp, #256	; 0x100
 8010fb8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010fbc:	ed82 7b00 	vstr	d7, [r2]
 8010fc0:	3901      	subs	r1, #1
 8010fc2:	3001      	adds	r0, #1
 8010fc4:	e72f      	b.n	8010e26 <__kernel_rem_pio2+0x216>
 8010fc6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010fc8:	2a02      	cmp	r2, #2
 8010fca:	dc0a      	bgt.n	8010fe2 <__kernel_rem_pio2+0x3d2>
 8010fcc:	2a00      	cmp	r2, #0
 8010fce:	dc5a      	bgt.n	8011086 <__kernel_rem_pio2+0x476>
 8010fd0:	d039      	beq.n	8011046 <__kernel_rem_pio2+0x436>
 8010fd2:	f008 0007 	and.w	r0, r8, #7
 8010fd6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8010fda:	ecbd 8b06 	vpop	{d8-d10}
 8010fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010fe4:	2a03      	cmp	r2, #3
 8010fe6:	d1f4      	bne.n	8010fd2 <__kernel_rem_pio2+0x3c2>
 8010fe8:	aa40      	add	r2, sp, #256	; 0x100
 8010fea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010fee:	4611      	mov	r1, r2
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	f1a1 0108 	sub.w	r1, r1, #8
 8010ff8:	dc52      	bgt.n	80110a0 <__kernel_rem_pio2+0x490>
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	2901      	cmp	r1, #1
 8010ffe:	f1a2 0208 	sub.w	r2, r2, #8
 8011002:	dc5d      	bgt.n	80110c0 <__kernel_rem_pio2+0x4b0>
 8011004:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8011108 <__kernel_rem_pio2+0x4f8>
 8011008:	2b01      	cmp	r3, #1
 801100a:	dc69      	bgt.n	80110e0 <__kernel_rem_pio2+0x4d0>
 801100c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8011010:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8011014:	2d00      	cmp	r5, #0
 8011016:	d16c      	bne.n	80110f2 <__kernel_rem_pio2+0x4e2>
 8011018:	ed87 5b00 	vstr	d5, [r7]
 801101c:	ed87 6b02 	vstr	d6, [r7, #8]
 8011020:	ed87 7b04 	vstr	d7, [r7, #16]
 8011024:	e7d5      	b.n	8010fd2 <__kernel_rem_pio2+0x3c2>
 8011026:	aa40      	add	r2, sp, #256	; 0x100
 8011028:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801102c:	ed92 6b00 	vldr	d6, [r2]
 8011030:	3b01      	subs	r3, #1
 8011032:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011036:	2b00      	cmp	r3, #0
 8011038:	daf5      	bge.n	8011026 <__kernel_rem_pio2+0x416>
 801103a:	b10d      	cbz	r5, 8011040 <__kernel_rem_pio2+0x430>
 801103c:	eeb1 7b47 	vneg.f64	d7, d7
 8011040:	ed87 7b00 	vstr	d7, [r7]
 8011044:	e7c5      	b.n	8010fd2 <__kernel_rem_pio2+0x3c2>
 8011046:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011108 <__kernel_rem_pio2+0x4f8>
 801104a:	e7f4      	b.n	8011036 <__kernel_rem_pio2+0x426>
 801104c:	a940      	add	r1, sp, #256	; 0x100
 801104e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011052:	ed91 7b00 	vldr	d7, [r1]
 8011056:	3a01      	subs	r2, #1
 8011058:	ee36 6b07 	vadd.f64	d6, d6, d7
 801105c:	2a00      	cmp	r2, #0
 801105e:	daf5      	bge.n	801104c <__kernel_rem_pio2+0x43c>
 8011060:	b1ad      	cbz	r5, 801108e <__kernel_rem_pio2+0x47e>
 8011062:	eeb1 7b46 	vneg.f64	d7, d6
 8011066:	ed87 7b00 	vstr	d7, [r7]
 801106a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 801106e:	a942      	add	r1, sp, #264	; 0x108
 8011070:	2201      	movs	r2, #1
 8011072:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011076:	4293      	cmp	r3, r2
 8011078:	da0c      	bge.n	8011094 <__kernel_rem_pio2+0x484>
 801107a:	b10d      	cbz	r5, 8011080 <__kernel_rem_pio2+0x470>
 801107c:	eeb1 7b47 	vneg.f64	d7, d7
 8011080:	ed87 7b02 	vstr	d7, [r7, #8]
 8011084:	e7a5      	b.n	8010fd2 <__kernel_rem_pio2+0x3c2>
 8011086:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011108 <__kernel_rem_pio2+0x4f8>
 801108a:	461a      	mov	r2, r3
 801108c:	e7e6      	b.n	801105c <__kernel_rem_pio2+0x44c>
 801108e:	eeb0 7b46 	vmov.f64	d7, d6
 8011092:	e7e8      	b.n	8011066 <__kernel_rem_pio2+0x456>
 8011094:	ecb1 6b02 	vldmia	r1!, {d6}
 8011098:	3201      	adds	r2, #1
 801109a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801109e:	e7ea      	b.n	8011076 <__kernel_rem_pio2+0x466>
 80110a0:	ed91 7b00 	vldr	d7, [r1]
 80110a4:	ed91 5b02 	vldr	d5, [r1, #8]
 80110a8:	3801      	subs	r0, #1
 80110aa:	ee37 6b05 	vadd.f64	d6, d7, d5
 80110ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110b2:	ed81 6b00 	vstr	d6, [r1]
 80110b6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80110ba:	ed81 7b02 	vstr	d7, [r1, #8]
 80110be:	e798      	b.n	8010ff2 <__kernel_rem_pio2+0x3e2>
 80110c0:	ed92 7b00 	vldr	d7, [r2]
 80110c4:	ed92 5b02 	vldr	d5, [r2, #8]
 80110c8:	3901      	subs	r1, #1
 80110ca:	ee37 6b05 	vadd.f64	d6, d7, d5
 80110ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110d2:	ed82 6b00 	vstr	d6, [r2]
 80110d6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80110da:	ed82 7b02 	vstr	d7, [r2, #8]
 80110de:	e78d      	b.n	8010ffc <__kernel_rem_pio2+0x3ec>
 80110e0:	aa40      	add	r2, sp, #256	; 0x100
 80110e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80110e6:	ed92 6b00 	vldr	d6, [r2]
 80110ea:	3b01      	subs	r3, #1
 80110ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80110f0:	e78a      	b.n	8011008 <__kernel_rem_pio2+0x3f8>
 80110f2:	eeb1 5b45 	vneg.f64	d5, d5
 80110f6:	eeb1 6b46 	vneg.f64	d6, d6
 80110fa:	ed87 5b00 	vstr	d5, [r7]
 80110fe:	eeb1 7b47 	vneg.f64	d7, d7
 8011102:	ed87 6b02 	vstr	d6, [r7, #8]
 8011106:	e78b      	b.n	8011020 <__kernel_rem_pio2+0x410>
	...

08011110 <__kernel_sin>:
 8011110:	ee10 3a90 	vmov	r3, s1
 8011114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011118:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801111c:	da04      	bge.n	8011128 <__kernel_sin+0x18>
 801111e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011122:	ee17 3a90 	vmov	r3, s15
 8011126:	b35b      	cbz	r3, 8011180 <__kernel_sin+0x70>
 8011128:	ee20 6b00 	vmul.f64	d6, d0, d0
 801112c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011130:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011188 <__kernel_sin+0x78>
 8011134:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011190 <__kernel_sin+0x80>
 8011138:	eea6 4b07 	vfma.f64	d4, d6, d7
 801113c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011198 <__kernel_sin+0x88>
 8011140:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011144:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80111a0 <__kernel_sin+0x90>
 8011148:	eea7 4b06 	vfma.f64	d4, d7, d6
 801114c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80111a8 <__kernel_sin+0x98>
 8011150:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011154:	b930      	cbnz	r0, 8011164 <__kernel_sin+0x54>
 8011156:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80111b0 <__kernel_sin+0xa0>
 801115a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801115e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011162:	4770      	bx	lr
 8011164:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011168:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801116c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011170:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011174:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80111b8 <__kernel_sin+0xa8>
 8011178:	eea5 1b07 	vfma.f64	d1, d5, d7
 801117c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011180:	4770      	bx	lr
 8011182:	bf00      	nop
 8011184:	f3af 8000 	nop.w
 8011188:	5acfd57c 	.word	0x5acfd57c
 801118c:	3de5d93a 	.word	0x3de5d93a
 8011190:	8a2b9ceb 	.word	0x8a2b9ceb
 8011194:	be5ae5e6 	.word	0xbe5ae5e6
 8011198:	57b1fe7d 	.word	0x57b1fe7d
 801119c:	3ec71de3 	.word	0x3ec71de3
 80111a0:	19c161d5 	.word	0x19c161d5
 80111a4:	bf2a01a0 	.word	0xbf2a01a0
 80111a8:	1110f8a6 	.word	0x1110f8a6
 80111ac:	3f811111 	.word	0x3f811111
 80111b0:	55555549 	.word	0x55555549
 80111b4:	bfc55555 	.word	0xbfc55555
 80111b8:	55555549 	.word	0x55555549
 80111bc:	3fc55555 	.word	0x3fc55555

080111c0 <with_errno>:
 80111c0:	b513      	push	{r0, r1, r4, lr}
 80111c2:	4604      	mov	r4, r0
 80111c4:	ed8d 0b00 	vstr	d0, [sp]
 80111c8:	f000 fa58 	bl	801167c <__errno>
 80111cc:	ed9d 0b00 	vldr	d0, [sp]
 80111d0:	6004      	str	r4, [r0, #0]
 80111d2:	b002      	add	sp, #8
 80111d4:	bd10      	pop	{r4, pc}

080111d6 <xflow>:
 80111d6:	b082      	sub	sp, #8
 80111d8:	b158      	cbz	r0, 80111f2 <xflow+0x1c>
 80111da:	eeb1 7b40 	vneg.f64	d7, d0
 80111de:	ed8d 7b00 	vstr	d7, [sp]
 80111e2:	ed9d 7b00 	vldr	d7, [sp]
 80111e6:	2022      	movs	r0, #34	; 0x22
 80111e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80111ec:	b002      	add	sp, #8
 80111ee:	f7ff bfe7 	b.w	80111c0 <with_errno>
 80111f2:	eeb0 7b40 	vmov.f64	d7, d0
 80111f6:	e7f2      	b.n	80111de <xflow+0x8>

080111f8 <__math_uflow>:
 80111f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011200 <__math_uflow+0x8>
 80111fc:	f7ff bfeb 	b.w	80111d6 <xflow>
 8011200:	00000000 	.word	0x00000000
 8011204:	10000000 	.word	0x10000000

08011208 <__math_oflow>:
 8011208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011210 <__math_oflow+0x8>
 801120c:	f7ff bfe3 	b.w	80111d6 <xflow>
 8011210:	00000000 	.word	0x00000000
 8011214:	70000000 	.word	0x70000000

08011218 <__math_divzero>:
 8011218:	b082      	sub	sp, #8
 801121a:	2800      	cmp	r0, #0
 801121c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011220:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011224:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011228:	ed8d 7b00 	vstr	d7, [sp]
 801122c:	ed9d 0b00 	vldr	d0, [sp]
 8011230:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011240 <__math_divzero+0x28>
 8011234:	2022      	movs	r0, #34	; 0x22
 8011236:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801123a:	b002      	add	sp, #8
 801123c:	f7ff bfc0 	b.w	80111c0 <with_errno>
	...

08011248 <__math_invalid>:
 8011248:	eeb0 7b40 	vmov.f64	d7, d0
 801124c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011254:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011258:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801125c:	d602      	bvs.n	8011264 <__math_invalid+0x1c>
 801125e:	2021      	movs	r0, #33	; 0x21
 8011260:	f7ff bfae 	b.w	80111c0 <with_errno>
 8011264:	4770      	bx	lr

08011266 <__math_check_uflow>:
 8011266:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126e:	d102      	bne.n	8011276 <__math_check_uflow+0x10>
 8011270:	2022      	movs	r0, #34	; 0x22
 8011272:	f7ff bfa5 	b.w	80111c0 <with_errno>
 8011276:	4770      	bx	lr

08011278 <__math_check_oflow>:
 8011278:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011298 <__math_check_oflow+0x20>
 801127c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011280:	eeb4 7b46 	vcmp.f64	d7, d6
 8011284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011288:	dd02      	ble.n	8011290 <__math_check_oflow+0x18>
 801128a:	2022      	movs	r0, #34	; 0x22
 801128c:	f7ff bf98 	b.w	80111c0 <with_errno>
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop
 8011294:	f3af 8000 	nop.w
 8011298:	ffffffff 	.word	0xffffffff
 801129c:	7fefffff 	.word	0x7fefffff

080112a0 <fabs>:
 80112a0:	ec51 0b10 	vmov	r0, r1, d0
 80112a4:	ee10 2a10 	vmov	r2, s0
 80112a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80112ac:	ec43 2b10 	vmov	d0, r2, r3
 80112b0:	4770      	bx	lr
 80112b2:	0000      	movs	r0, r0
 80112b4:	0000      	movs	r0, r0
	...

080112b8 <floor>:
 80112b8:	ee10 1a90 	vmov	r1, s1
 80112bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80112c0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80112c4:	2b13      	cmp	r3, #19
 80112c6:	b530      	push	{r4, r5, lr}
 80112c8:	ee10 0a10 	vmov	r0, s0
 80112cc:	ee10 5a10 	vmov	r5, s0
 80112d0:	dc31      	bgt.n	8011336 <floor+0x7e>
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	da15      	bge.n	8011302 <floor+0x4a>
 80112d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011390 <floor+0xd8>
 80112da:	ee30 0b07 	vadd.f64	d0, d0, d7
 80112de:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80112e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e6:	dd07      	ble.n	80112f8 <floor+0x40>
 80112e8:	2900      	cmp	r1, #0
 80112ea:	da4e      	bge.n	801138a <floor+0xd2>
 80112ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80112f0:	4318      	orrs	r0, r3
 80112f2:	d001      	beq.n	80112f8 <floor+0x40>
 80112f4:	4928      	ldr	r1, [pc, #160]	; (8011398 <floor+0xe0>)
 80112f6:	2000      	movs	r0, #0
 80112f8:	460b      	mov	r3, r1
 80112fa:	4602      	mov	r2, r0
 80112fc:	ec43 2b10 	vmov	d0, r2, r3
 8011300:	e020      	b.n	8011344 <floor+0x8c>
 8011302:	4a26      	ldr	r2, [pc, #152]	; (801139c <floor+0xe4>)
 8011304:	411a      	asrs	r2, r3
 8011306:	ea01 0402 	and.w	r4, r1, r2
 801130a:	4304      	orrs	r4, r0
 801130c:	d01a      	beq.n	8011344 <floor+0x8c>
 801130e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011390 <floor+0xd8>
 8011312:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011316:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131e:	ddeb      	ble.n	80112f8 <floor+0x40>
 8011320:	2900      	cmp	r1, #0
 8011322:	bfbe      	ittt	lt
 8011324:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011328:	fa40 f303 	asrlt.w	r3, r0, r3
 801132c:	18c9      	addlt	r1, r1, r3
 801132e:	ea21 0102 	bic.w	r1, r1, r2
 8011332:	2000      	movs	r0, #0
 8011334:	e7e0      	b.n	80112f8 <floor+0x40>
 8011336:	2b33      	cmp	r3, #51	; 0x33
 8011338:	dd05      	ble.n	8011346 <floor+0x8e>
 801133a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801133e:	d101      	bne.n	8011344 <floor+0x8c>
 8011340:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011344:	bd30      	pop	{r4, r5, pc}
 8011346:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801134a:	f04f 32ff 	mov.w	r2, #4294967295
 801134e:	40e2      	lsrs	r2, r4
 8011350:	4202      	tst	r2, r0
 8011352:	d0f7      	beq.n	8011344 <floor+0x8c>
 8011354:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011390 <floor+0xd8>
 8011358:	ee30 0b07 	vadd.f64	d0, d0, d7
 801135c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011364:	ddc8      	ble.n	80112f8 <floor+0x40>
 8011366:	2900      	cmp	r1, #0
 8011368:	da02      	bge.n	8011370 <floor+0xb8>
 801136a:	2b14      	cmp	r3, #20
 801136c:	d103      	bne.n	8011376 <floor+0xbe>
 801136e:	3101      	adds	r1, #1
 8011370:	ea20 0002 	bic.w	r0, r0, r2
 8011374:	e7c0      	b.n	80112f8 <floor+0x40>
 8011376:	2401      	movs	r4, #1
 8011378:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801137c:	fa04 f303 	lsl.w	r3, r4, r3
 8011380:	4418      	add	r0, r3
 8011382:	42a8      	cmp	r0, r5
 8011384:	bf38      	it	cc
 8011386:	1909      	addcc	r1, r1, r4
 8011388:	e7f2      	b.n	8011370 <floor+0xb8>
 801138a:	2000      	movs	r0, #0
 801138c:	4601      	mov	r1, r0
 801138e:	e7b3      	b.n	80112f8 <floor+0x40>
 8011390:	8800759c 	.word	0x8800759c
 8011394:	7e37e43c 	.word	0x7e37e43c
 8011398:	bff00000 	.word	0xbff00000
 801139c:	000fffff 	.word	0x000fffff

080113a0 <scalbn>:
 80113a0:	b082      	sub	sp, #8
 80113a2:	ed8d 0b00 	vstr	d0, [sp]
 80113a6:	9b01      	ldr	r3, [sp, #4]
 80113a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80113ac:	b9a2      	cbnz	r2, 80113d8 <scalbn+0x38>
 80113ae:	9a00      	ldr	r2, [sp, #0]
 80113b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80113b4:	4313      	orrs	r3, r2
 80113b6:	d03a      	beq.n	801142e <scalbn+0x8e>
 80113b8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011490 <scalbn+0xf0>
 80113bc:	4b40      	ldr	r3, [pc, #256]	; (80114c0 <scalbn+0x120>)
 80113be:	ee20 7b07 	vmul.f64	d7, d0, d7
 80113c2:	4298      	cmp	r0, r3
 80113c4:	ed8d 7b00 	vstr	d7, [sp]
 80113c8:	da11      	bge.n	80113ee <scalbn+0x4e>
 80113ca:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011498 <scalbn+0xf8>
 80113ce:	ed9d 6b00 	vldr	d6, [sp]
 80113d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80113d6:	e007      	b.n	80113e8 <scalbn+0x48>
 80113d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80113dc:	428a      	cmp	r2, r1
 80113de:	d10a      	bne.n	80113f6 <scalbn+0x56>
 80113e0:	ed9d 7b00 	vldr	d7, [sp]
 80113e4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80113e8:	ed8d 7b00 	vstr	d7, [sp]
 80113ec:	e01f      	b.n	801142e <scalbn+0x8e>
 80113ee:	9b01      	ldr	r3, [sp, #4]
 80113f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80113f4:	3a36      	subs	r2, #54	; 0x36
 80113f6:	4402      	add	r2, r0
 80113f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80113fc:	428a      	cmp	r2, r1
 80113fe:	dd0a      	ble.n	8011416 <scalbn+0x76>
 8011400:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80114a0 <scalbn+0x100>
 8011404:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80114a8 <scalbn+0x108>
 8011408:	eeb0 6b47 	vmov.f64	d6, d7
 801140c:	9b01      	ldr	r3, [sp, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011414:	e7dd      	b.n	80113d2 <scalbn+0x32>
 8011416:	2a00      	cmp	r2, #0
 8011418:	dd0d      	ble.n	8011436 <scalbn+0x96>
 801141a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801141e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011422:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011426:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801142a:	e9cd 0100 	strd	r0, r1, [sp]
 801142e:	ed9d 0b00 	vldr	d0, [sp]
 8011432:	b002      	add	sp, #8
 8011434:	4770      	bx	lr
 8011436:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801143a:	da18      	bge.n	801146e <scalbn+0xce>
 801143c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011440:	4298      	cmp	r0, r3
 8011442:	9b01      	ldr	r3, [sp, #4]
 8011444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011448:	dd09      	ble.n	801145e <scalbn+0xbe>
 801144a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80114a0 <scalbn+0x100>
 801144e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80114a8 <scalbn+0x108>
 8011452:	eeb0 6b47 	vmov.f64	d6, d7
 8011456:	2b00      	cmp	r3, #0
 8011458:	fe07 7b05 	vseleq.f64	d7, d7, d5
 801145c:	e7b9      	b.n	80113d2 <scalbn+0x32>
 801145e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011498 <scalbn+0xf8>
 8011462:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80114b0 <scalbn+0x110>
 8011466:	eeb0 6b47 	vmov.f64	d6, d7
 801146a:	2b00      	cmp	r3, #0
 801146c:	e7f4      	b.n	8011458 <scalbn+0xb8>
 801146e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011472:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011476:	3236      	adds	r2, #54	; 0x36
 8011478:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801147c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011480:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80114b8 <scalbn+0x118>
 8011484:	ec41 0b17 	vmov	d7, r0, r1
 8011488:	e7a3      	b.n	80113d2 <scalbn+0x32>
 801148a:	bf00      	nop
 801148c:	f3af 8000 	nop.w
 8011490:	00000000 	.word	0x00000000
 8011494:	43500000 	.word	0x43500000
 8011498:	c2f8f359 	.word	0xc2f8f359
 801149c:	01a56e1f 	.word	0x01a56e1f
 80114a0:	8800759c 	.word	0x8800759c
 80114a4:	7e37e43c 	.word	0x7e37e43c
 80114a8:	8800759c 	.word	0x8800759c
 80114ac:	fe37e43c 	.word	0xfe37e43c
 80114b0:	c2f8f359 	.word	0xc2f8f359
 80114b4:	81a56e1f 	.word	0x81a56e1f
 80114b8:	00000000 	.word	0x00000000
 80114bc:	3c900000 	.word	0x3c900000
 80114c0:	ffff3cb0 	.word	0xffff3cb0

080114c4 <atanf>:
 80114c4:	b538      	push	{r3, r4, r5, lr}
 80114c6:	ee10 5a10 	vmov	r5, s0
 80114ca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80114ce:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80114d2:	eef0 7a40 	vmov.f32	s15, s0
 80114d6:	db0f      	blt.n	80114f8 <atanf+0x34>
 80114d8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80114dc:	dd04      	ble.n	80114e8 <atanf+0x24>
 80114de:	ee70 7a00 	vadd.f32	s15, s0, s0
 80114e2:	eeb0 0a67 	vmov.f32	s0, s15
 80114e6:	bd38      	pop	{r3, r4, r5, pc}
 80114e8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011620 <atanf+0x15c>
 80114ec:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8011624 <atanf+0x160>
 80114f0:	2d00      	cmp	r5, #0
 80114f2:	fe77 7a80 	vselgt.f32	s15, s15, s0
 80114f6:	e7f4      	b.n	80114e2 <atanf+0x1e>
 80114f8:	4b4b      	ldr	r3, [pc, #300]	; (8011628 <atanf+0x164>)
 80114fa:	429c      	cmp	r4, r3
 80114fc:	dc10      	bgt.n	8011520 <atanf+0x5c>
 80114fe:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8011502:	da0a      	bge.n	801151a <atanf+0x56>
 8011504:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801162c <atanf+0x168>
 8011508:	ee30 7a07 	vadd.f32	s14, s0, s14
 801150c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011510:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011518:	dce3      	bgt.n	80114e2 <atanf+0x1e>
 801151a:	f04f 33ff 	mov.w	r3, #4294967295
 801151e:	e013      	b.n	8011548 <atanf+0x84>
 8011520:	f000 f8a4 	bl	801166c <fabsf>
 8011524:	4b42      	ldr	r3, [pc, #264]	; (8011630 <atanf+0x16c>)
 8011526:	429c      	cmp	r4, r3
 8011528:	dc4f      	bgt.n	80115ca <atanf+0x106>
 801152a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801152e:	429c      	cmp	r4, r3
 8011530:	dc41      	bgt.n	80115b6 <atanf+0xf2>
 8011532:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011536:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801153a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801153e:	2300      	movs	r3, #0
 8011540:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011544:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011548:	1c5a      	adds	r2, r3, #1
 801154a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801154e:	eddf 5a39 	vldr	s11, [pc, #228]	; 8011634 <atanf+0x170>
 8011552:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8011638 <atanf+0x174>
 8011556:	ed9f 5a39 	vldr	s10, [pc, #228]	; 801163c <atanf+0x178>
 801155a:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8011640 <atanf+0x17c>
 801155e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011562:	eea7 6a25 	vfma.f32	s12, s14, s11
 8011566:	eddf 5a37 	vldr	s11, [pc, #220]	; 8011644 <atanf+0x180>
 801156a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801156e:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8011648 <atanf+0x184>
 8011572:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011576:	eddf 5a35 	vldr	s11, [pc, #212]	; 801164c <atanf+0x188>
 801157a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801157e:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8011650 <atanf+0x18c>
 8011582:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011586:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011654 <atanf+0x190>
 801158a:	eee7 5a05 	vfma.f32	s11, s14, s10
 801158e:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8011658 <atanf+0x194>
 8011592:	eea5 5a87 	vfma.f32	s10, s11, s14
 8011596:	eddf 5a31 	vldr	s11, [pc, #196]	; 801165c <atanf+0x198>
 801159a:	eee5 5a07 	vfma.f32	s11, s10, s14
 801159e:	eea5 0a87 	vfma.f32	s0, s11, s14
 80115a2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80115a6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80115aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80115ae:	d121      	bne.n	80115f4 <atanf+0x130>
 80115b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80115b4:	e795      	b.n	80114e2 <atanf+0x1e>
 80115b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80115ba:	ee30 7a67 	vsub.f32	s14, s0, s15
 80115be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80115c2:	2301      	movs	r3, #1
 80115c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80115c8:	e7be      	b.n	8011548 <atanf+0x84>
 80115ca:	4b25      	ldr	r3, [pc, #148]	; (8011660 <atanf+0x19c>)
 80115cc:	429c      	cmp	r4, r3
 80115ce:	dc0b      	bgt.n	80115e8 <atanf+0x124>
 80115d0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80115d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115d8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80115dc:	2302      	movs	r3, #2
 80115de:	ee70 6a67 	vsub.f32	s13, s0, s15
 80115e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115e6:	e7af      	b.n	8011548 <atanf+0x84>
 80115e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80115ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80115f0:	2303      	movs	r3, #3
 80115f2:	e7a9      	b.n	8011548 <atanf+0x84>
 80115f4:	4a1b      	ldr	r2, [pc, #108]	; (8011664 <atanf+0x1a0>)
 80115f6:	491c      	ldr	r1, [pc, #112]	; (8011668 <atanf+0x1a4>)
 80115f8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80115fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011600:	ed93 7a00 	vldr	s14, [r3]
 8011604:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011608:	2d00      	cmp	r5, #0
 801160a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801160e:	ed92 0a00 	vldr	s0, [r2]
 8011612:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011616:	bfb8      	it	lt
 8011618:	eef1 7a67 	vneglt.f32	s15, s15
 801161c:	e761      	b.n	80114e2 <atanf+0x1e>
 801161e:	bf00      	nop
 8011620:	3fc90fdb 	.word	0x3fc90fdb
 8011624:	bfc90fdb 	.word	0xbfc90fdb
 8011628:	3edfffff 	.word	0x3edfffff
 801162c:	7149f2ca 	.word	0x7149f2ca
 8011630:	3f97ffff 	.word	0x3f97ffff
 8011634:	3c8569d7 	.word	0x3c8569d7
 8011638:	3d4bda59 	.word	0x3d4bda59
 801163c:	bd15a221 	.word	0xbd15a221
 8011640:	be4ccccd 	.word	0xbe4ccccd
 8011644:	3d886b35 	.word	0x3d886b35
 8011648:	3dba2e6e 	.word	0x3dba2e6e
 801164c:	3e124925 	.word	0x3e124925
 8011650:	3eaaaaab 	.word	0x3eaaaaab
 8011654:	bd6ef16b 	.word	0xbd6ef16b
 8011658:	bd9d8795 	.word	0xbd9d8795
 801165c:	bde38e38 	.word	0xbde38e38
 8011660:	401bffff 	.word	0x401bffff
 8011664:	08015ba0 	.word	0x08015ba0
 8011668:	08015bb0 	.word	0x08015bb0

0801166c <fabsf>:
 801166c:	ee10 3a10 	vmov	r3, s0
 8011670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011674:	ee00 3a10 	vmov	s0, r3
 8011678:	4770      	bx	lr
	...

0801167c <__errno>:
 801167c:	4b01      	ldr	r3, [pc, #4]	; (8011684 <__errno+0x8>)
 801167e:	6818      	ldr	r0, [r3, #0]
 8011680:	4770      	bx	lr
 8011682:	bf00      	nop
 8011684:	24000238 	.word	0x24000238

08011688 <__libc_init_array>:
 8011688:	b570      	push	{r4, r5, r6, lr}
 801168a:	4d0d      	ldr	r5, [pc, #52]	; (80116c0 <__libc_init_array+0x38>)
 801168c:	4c0d      	ldr	r4, [pc, #52]	; (80116c4 <__libc_init_array+0x3c>)
 801168e:	1b64      	subs	r4, r4, r5
 8011690:	10a4      	asrs	r4, r4, #2
 8011692:	2600      	movs	r6, #0
 8011694:	42a6      	cmp	r6, r4
 8011696:	d109      	bne.n	80116ac <__libc_init_array+0x24>
 8011698:	4d0b      	ldr	r5, [pc, #44]	; (80116c8 <__libc_init_array+0x40>)
 801169a:	4c0c      	ldr	r4, [pc, #48]	; (80116cc <__libc_init_array+0x44>)
 801169c:	f002 fcd4 	bl	8014048 <_init>
 80116a0:	1b64      	subs	r4, r4, r5
 80116a2:	10a4      	asrs	r4, r4, #2
 80116a4:	2600      	movs	r6, #0
 80116a6:	42a6      	cmp	r6, r4
 80116a8:	d105      	bne.n	80116b6 <__libc_init_array+0x2e>
 80116aa:	bd70      	pop	{r4, r5, r6, pc}
 80116ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80116b0:	4798      	blx	r3
 80116b2:	3601      	adds	r6, #1
 80116b4:	e7ee      	b.n	8011694 <__libc_init_array+0xc>
 80116b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80116ba:	4798      	blx	r3
 80116bc:	3601      	adds	r6, #1
 80116be:	e7f2      	b.n	80116a6 <__libc_init_array+0x1e>
 80116c0:	08015fac 	.word	0x08015fac
 80116c4:	08015fac 	.word	0x08015fac
 80116c8:	08015fac 	.word	0x08015fac
 80116cc:	08015fb4 	.word	0x08015fb4

080116d0 <memset>:
 80116d0:	4402      	add	r2, r0
 80116d2:	4603      	mov	r3, r0
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d100      	bne.n	80116da <memset+0xa>
 80116d8:	4770      	bx	lr
 80116da:	f803 1b01 	strb.w	r1, [r3], #1
 80116de:	e7f9      	b.n	80116d4 <memset+0x4>

080116e0 <__cvt>:
 80116e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116e2:	ed2d 8b02 	vpush	{d8}
 80116e6:	eeb0 8b40 	vmov.f64	d8, d0
 80116ea:	b085      	sub	sp, #20
 80116ec:	4617      	mov	r7, r2
 80116ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80116f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80116f2:	ee18 2a90 	vmov	r2, s17
 80116f6:	f025 0520 	bic.w	r5, r5, #32
 80116fa:	2a00      	cmp	r2, #0
 80116fc:	bfb6      	itet	lt
 80116fe:	222d      	movlt	r2, #45	; 0x2d
 8011700:	2200      	movge	r2, #0
 8011702:	eeb1 8b40 	vneglt.f64	d8, d0
 8011706:	2d46      	cmp	r5, #70	; 0x46
 8011708:	460c      	mov	r4, r1
 801170a:	701a      	strb	r2, [r3, #0]
 801170c:	d004      	beq.n	8011718 <__cvt+0x38>
 801170e:	2d45      	cmp	r5, #69	; 0x45
 8011710:	d100      	bne.n	8011714 <__cvt+0x34>
 8011712:	3401      	adds	r4, #1
 8011714:	2102      	movs	r1, #2
 8011716:	e000      	b.n	801171a <__cvt+0x3a>
 8011718:	2103      	movs	r1, #3
 801171a:	ab03      	add	r3, sp, #12
 801171c:	9301      	str	r3, [sp, #4]
 801171e:	ab02      	add	r3, sp, #8
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	4622      	mov	r2, r4
 8011724:	4633      	mov	r3, r6
 8011726:	eeb0 0b48 	vmov.f64	d0, d8
 801172a:	f000 fddd 	bl	80122e8 <_dtoa_r>
 801172e:	2d47      	cmp	r5, #71	; 0x47
 8011730:	d109      	bne.n	8011746 <__cvt+0x66>
 8011732:	07fb      	lsls	r3, r7, #31
 8011734:	d407      	bmi.n	8011746 <__cvt+0x66>
 8011736:	9b03      	ldr	r3, [sp, #12]
 8011738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801173a:	1a1b      	subs	r3, r3, r0
 801173c:	6013      	str	r3, [r2, #0]
 801173e:	b005      	add	sp, #20
 8011740:	ecbd 8b02 	vpop	{d8}
 8011744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011746:	2d46      	cmp	r5, #70	; 0x46
 8011748:	eb00 0204 	add.w	r2, r0, r4
 801174c:	d10c      	bne.n	8011768 <__cvt+0x88>
 801174e:	7803      	ldrb	r3, [r0, #0]
 8011750:	2b30      	cmp	r3, #48	; 0x30
 8011752:	d107      	bne.n	8011764 <__cvt+0x84>
 8011754:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801175c:	bf1c      	itt	ne
 801175e:	f1c4 0401 	rsbne	r4, r4, #1
 8011762:	6034      	strne	r4, [r6, #0]
 8011764:	6833      	ldr	r3, [r6, #0]
 8011766:	441a      	add	r2, r3
 8011768:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011770:	bf08      	it	eq
 8011772:	9203      	streq	r2, [sp, #12]
 8011774:	2130      	movs	r1, #48	; 0x30
 8011776:	9b03      	ldr	r3, [sp, #12]
 8011778:	4293      	cmp	r3, r2
 801177a:	d2dc      	bcs.n	8011736 <__cvt+0x56>
 801177c:	1c5c      	adds	r4, r3, #1
 801177e:	9403      	str	r4, [sp, #12]
 8011780:	7019      	strb	r1, [r3, #0]
 8011782:	e7f8      	b.n	8011776 <__cvt+0x96>

08011784 <__exponent>:
 8011784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011786:	4603      	mov	r3, r0
 8011788:	2900      	cmp	r1, #0
 801178a:	bfb8      	it	lt
 801178c:	4249      	neglt	r1, r1
 801178e:	f803 2b02 	strb.w	r2, [r3], #2
 8011792:	bfb4      	ite	lt
 8011794:	222d      	movlt	r2, #45	; 0x2d
 8011796:	222b      	movge	r2, #43	; 0x2b
 8011798:	2909      	cmp	r1, #9
 801179a:	7042      	strb	r2, [r0, #1]
 801179c:	dd2a      	ble.n	80117f4 <__exponent+0x70>
 801179e:	f10d 0407 	add.w	r4, sp, #7
 80117a2:	46a4      	mov	ip, r4
 80117a4:	270a      	movs	r7, #10
 80117a6:	46a6      	mov	lr, r4
 80117a8:	460a      	mov	r2, r1
 80117aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80117ae:	fb07 1516 	mls	r5, r7, r6, r1
 80117b2:	3530      	adds	r5, #48	; 0x30
 80117b4:	2a63      	cmp	r2, #99	; 0x63
 80117b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80117ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80117be:	4631      	mov	r1, r6
 80117c0:	dcf1      	bgt.n	80117a6 <__exponent+0x22>
 80117c2:	3130      	adds	r1, #48	; 0x30
 80117c4:	f1ae 0502 	sub.w	r5, lr, #2
 80117c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80117cc:	1c44      	adds	r4, r0, #1
 80117ce:	4629      	mov	r1, r5
 80117d0:	4561      	cmp	r1, ip
 80117d2:	d30a      	bcc.n	80117ea <__exponent+0x66>
 80117d4:	f10d 0209 	add.w	r2, sp, #9
 80117d8:	eba2 020e 	sub.w	r2, r2, lr
 80117dc:	4565      	cmp	r5, ip
 80117de:	bf88      	it	hi
 80117e0:	2200      	movhi	r2, #0
 80117e2:	4413      	add	r3, r2
 80117e4:	1a18      	subs	r0, r3, r0
 80117e6:	b003      	add	sp, #12
 80117e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80117f2:	e7ed      	b.n	80117d0 <__exponent+0x4c>
 80117f4:	2330      	movs	r3, #48	; 0x30
 80117f6:	3130      	adds	r1, #48	; 0x30
 80117f8:	7083      	strb	r3, [r0, #2]
 80117fa:	70c1      	strb	r1, [r0, #3]
 80117fc:	1d03      	adds	r3, r0, #4
 80117fe:	e7f1      	b.n	80117e4 <__exponent+0x60>

08011800 <_printf_float>:
 8011800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011804:	b08b      	sub	sp, #44	; 0x2c
 8011806:	460c      	mov	r4, r1
 8011808:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801180c:	4616      	mov	r6, r2
 801180e:	461f      	mov	r7, r3
 8011810:	4605      	mov	r5, r0
 8011812:	f001 fca3 	bl	801315c <_localeconv_r>
 8011816:	f8d0 b000 	ldr.w	fp, [r0]
 801181a:	4658      	mov	r0, fp
 801181c:	f7ee fd60 	bl	80002e0 <strlen>
 8011820:	2300      	movs	r3, #0
 8011822:	9308      	str	r3, [sp, #32]
 8011824:	f8d8 3000 	ldr.w	r3, [r8]
 8011828:	f894 9018 	ldrb.w	r9, [r4, #24]
 801182c:	6822      	ldr	r2, [r4, #0]
 801182e:	3307      	adds	r3, #7
 8011830:	f023 0307 	bic.w	r3, r3, #7
 8011834:	f103 0108 	add.w	r1, r3, #8
 8011838:	f8c8 1000 	str.w	r1, [r8]
 801183c:	4682      	mov	sl, r0
 801183e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011842:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011846:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011aa8 <_printf_float+0x2a8>
 801184a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801184e:	eeb0 6bc0 	vabs.f64	d6, d0
 8011852:	eeb4 6b47 	vcmp.f64	d6, d7
 8011856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185a:	dd24      	ble.n	80118a6 <_printf_float+0xa6>
 801185c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011864:	d502      	bpl.n	801186c <_printf_float+0x6c>
 8011866:	232d      	movs	r3, #45	; 0x2d
 8011868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801186c:	4b90      	ldr	r3, [pc, #576]	; (8011ab0 <_printf_float+0x2b0>)
 801186e:	4891      	ldr	r0, [pc, #580]	; (8011ab4 <_printf_float+0x2b4>)
 8011870:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011874:	bf94      	ite	ls
 8011876:	4698      	movls	r8, r3
 8011878:	4680      	movhi	r8, r0
 801187a:	2303      	movs	r3, #3
 801187c:	6123      	str	r3, [r4, #16]
 801187e:	f022 0204 	bic.w	r2, r2, #4
 8011882:	2300      	movs	r3, #0
 8011884:	6022      	str	r2, [r4, #0]
 8011886:	9304      	str	r3, [sp, #16]
 8011888:	9700      	str	r7, [sp, #0]
 801188a:	4633      	mov	r3, r6
 801188c:	aa09      	add	r2, sp, #36	; 0x24
 801188e:	4621      	mov	r1, r4
 8011890:	4628      	mov	r0, r5
 8011892:	f000 f9d3 	bl	8011c3c <_printf_common>
 8011896:	3001      	adds	r0, #1
 8011898:	f040 808a 	bne.w	80119b0 <_printf_float+0x1b0>
 801189c:	f04f 30ff 	mov.w	r0, #4294967295
 80118a0:	b00b      	add	sp, #44	; 0x2c
 80118a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a6:	eeb4 0b40 	vcmp.f64	d0, d0
 80118aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ae:	d709      	bvc.n	80118c4 <_printf_float+0xc4>
 80118b0:	ee10 3a90 	vmov	r3, s1
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	bfbc      	itt	lt
 80118b8:	232d      	movlt	r3, #45	; 0x2d
 80118ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80118be:	487e      	ldr	r0, [pc, #504]	; (8011ab8 <_printf_float+0x2b8>)
 80118c0:	4b7e      	ldr	r3, [pc, #504]	; (8011abc <_printf_float+0x2bc>)
 80118c2:	e7d5      	b.n	8011870 <_printf_float+0x70>
 80118c4:	6863      	ldr	r3, [r4, #4]
 80118c6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80118ca:	9104      	str	r1, [sp, #16]
 80118cc:	1c59      	adds	r1, r3, #1
 80118ce:	d13c      	bne.n	801194a <_printf_float+0x14a>
 80118d0:	2306      	movs	r3, #6
 80118d2:	6063      	str	r3, [r4, #4]
 80118d4:	2300      	movs	r3, #0
 80118d6:	9303      	str	r3, [sp, #12]
 80118d8:	ab08      	add	r3, sp, #32
 80118da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80118de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80118e2:	ab07      	add	r3, sp, #28
 80118e4:	6861      	ldr	r1, [r4, #4]
 80118e6:	9300      	str	r3, [sp, #0]
 80118e8:	6022      	str	r2, [r4, #0]
 80118ea:	f10d 031b 	add.w	r3, sp, #27
 80118ee:	4628      	mov	r0, r5
 80118f0:	f7ff fef6 	bl	80116e0 <__cvt>
 80118f4:	9b04      	ldr	r3, [sp, #16]
 80118f6:	9907      	ldr	r1, [sp, #28]
 80118f8:	2b47      	cmp	r3, #71	; 0x47
 80118fa:	4680      	mov	r8, r0
 80118fc:	d108      	bne.n	8011910 <_printf_float+0x110>
 80118fe:	1cc8      	adds	r0, r1, #3
 8011900:	db02      	blt.n	8011908 <_printf_float+0x108>
 8011902:	6863      	ldr	r3, [r4, #4]
 8011904:	4299      	cmp	r1, r3
 8011906:	dd41      	ble.n	801198c <_printf_float+0x18c>
 8011908:	f1a9 0902 	sub.w	r9, r9, #2
 801190c:	fa5f f989 	uxtb.w	r9, r9
 8011910:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011914:	d820      	bhi.n	8011958 <_printf_float+0x158>
 8011916:	3901      	subs	r1, #1
 8011918:	464a      	mov	r2, r9
 801191a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801191e:	9107      	str	r1, [sp, #28]
 8011920:	f7ff ff30 	bl	8011784 <__exponent>
 8011924:	9a08      	ldr	r2, [sp, #32]
 8011926:	9004      	str	r0, [sp, #16]
 8011928:	1813      	adds	r3, r2, r0
 801192a:	2a01      	cmp	r2, #1
 801192c:	6123      	str	r3, [r4, #16]
 801192e:	dc02      	bgt.n	8011936 <_printf_float+0x136>
 8011930:	6822      	ldr	r2, [r4, #0]
 8011932:	07d2      	lsls	r2, r2, #31
 8011934:	d501      	bpl.n	801193a <_printf_float+0x13a>
 8011936:	3301      	adds	r3, #1
 8011938:	6123      	str	r3, [r4, #16]
 801193a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d0a2      	beq.n	8011888 <_printf_float+0x88>
 8011942:	232d      	movs	r3, #45	; 0x2d
 8011944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011948:	e79e      	b.n	8011888 <_printf_float+0x88>
 801194a:	9904      	ldr	r1, [sp, #16]
 801194c:	2947      	cmp	r1, #71	; 0x47
 801194e:	d1c1      	bne.n	80118d4 <_printf_float+0xd4>
 8011950:	2b00      	cmp	r3, #0
 8011952:	d1bf      	bne.n	80118d4 <_printf_float+0xd4>
 8011954:	2301      	movs	r3, #1
 8011956:	e7bc      	b.n	80118d2 <_printf_float+0xd2>
 8011958:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801195c:	d118      	bne.n	8011990 <_printf_float+0x190>
 801195e:	2900      	cmp	r1, #0
 8011960:	6863      	ldr	r3, [r4, #4]
 8011962:	dd0b      	ble.n	801197c <_printf_float+0x17c>
 8011964:	6121      	str	r1, [r4, #16]
 8011966:	b913      	cbnz	r3, 801196e <_printf_float+0x16e>
 8011968:	6822      	ldr	r2, [r4, #0]
 801196a:	07d0      	lsls	r0, r2, #31
 801196c:	d502      	bpl.n	8011974 <_printf_float+0x174>
 801196e:	3301      	adds	r3, #1
 8011970:	440b      	add	r3, r1
 8011972:	6123      	str	r3, [r4, #16]
 8011974:	2300      	movs	r3, #0
 8011976:	65a1      	str	r1, [r4, #88]	; 0x58
 8011978:	9304      	str	r3, [sp, #16]
 801197a:	e7de      	b.n	801193a <_printf_float+0x13a>
 801197c:	b913      	cbnz	r3, 8011984 <_printf_float+0x184>
 801197e:	6822      	ldr	r2, [r4, #0]
 8011980:	07d2      	lsls	r2, r2, #31
 8011982:	d501      	bpl.n	8011988 <_printf_float+0x188>
 8011984:	3302      	adds	r3, #2
 8011986:	e7f4      	b.n	8011972 <_printf_float+0x172>
 8011988:	2301      	movs	r3, #1
 801198a:	e7f2      	b.n	8011972 <_printf_float+0x172>
 801198c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011990:	9b08      	ldr	r3, [sp, #32]
 8011992:	4299      	cmp	r1, r3
 8011994:	db05      	blt.n	80119a2 <_printf_float+0x1a2>
 8011996:	6823      	ldr	r3, [r4, #0]
 8011998:	6121      	str	r1, [r4, #16]
 801199a:	07d8      	lsls	r0, r3, #31
 801199c:	d5ea      	bpl.n	8011974 <_printf_float+0x174>
 801199e:	1c4b      	adds	r3, r1, #1
 80119a0:	e7e7      	b.n	8011972 <_printf_float+0x172>
 80119a2:	2900      	cmp	r1, #0
 80119a4:	bfd4      	ite	le
 80119a6:	f1c1 0202 	rsble	r2, r1, #2
 80119aa:	2201      	movgt	r2, #1
 80119ac:	4413      	add	r3, r2
 80119ae:	e7e0      	b.n	8011972 <_printf_float+0x172>
 80119b0:	6823      	ldr	r3, [r4, #0]
 80119b2:	055a      	lsls	r2, r3, #21
 80119b4:	d407      	bmi.n	80119c6 <_printf_float+0x1c6>
 80119b6:	6923      	ldr	r3, [r4, #16]
 80119b8:	4642      	mov	r2, r8
 80119ba:	4631      	mov	r1, r6
 80119bc:	4628      	mov	r0, r5
 80119be:	47b8      	blx	r7
 80119c0:	3001      	adds	r0, #1
 80119c2:	d12a      	bne.n	8011a1a <_printf_float+0x21a>
 80119c4:	e76a      	b.n	801189c <_printf_float+0x9c>
 80119c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80119ca:	f240 80e2 	bls.w	8011b92 <_printf_float+0x392>
 80119ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80119d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119da:	d133      	bne.n	8011a44 <_printf_float+0x244>
 80119dc:	4a38      	ldr	r2, [pc, #224]	; (8011ac0 <_printf_float+0x2c0>)
 80119de:	2301      	movs	r3, #1
 80119e0:	4631      	mov	r1, r6
 80119e2:	4628      	mov	r0, r5
 80119e4:	47b8      	blx	r7
 80119e6:	3001      	adds	r0, #1
 80119e8:	f43f af58 	beq.w	801189c <_printf_float+0x9c>
 80119ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	db02      	blt.n	80119fa <_printf_float+0x1fa>
 80119f4:	6823      	ldr	r3, [r4, #0]
 80119f6:	07d8      	lsls	r0, r3, #31
 80119f8:	d50f      	bpl.n	8011a1a <_printf_float+0x21a>
 80119fa:	4653      	mov	r3, sl
 80119fc:	465a      	mov	r2, fp
 80119fe:	4631      	mov	r1, r6
 8011a00:	4628      	mov	r0, r5
 8011a02:	47b8      	blx	r7
 8011a04:	3001      	adds	r0, #1
 8011a06:	f43f af49 	beq.w	801189c <_printf_float+0x9c>
 8011a0a:	f04f 0800 	mov.w	r8, #0
 8011a0e:	f104 091a 	add.w	r9, r4, #26
 8011a12:	9b08      	ldr	r3, [sp, #32]
 8011a14:	3b01      	subs	r3, #1
 8011a16:	4543      	cmp	r3, r8
 8011a18:	dc09      	bgt.n	8011a2e <_printf_float+0x22e>
 8011a1a:	6823      	ldr	r3, [r4, #0]
 8011a1c:	079b      	lsls	r3, r3, #30
 8011a1e:	f100 8108 	bmi.w	8011c32 <_printf_float+0x432>
 8011a22:	68e0      	ldr	r0, [r4, #12]
 8011a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a26:	4298      	cmp	r0, r3
 8011a28:	bfb8      	it	lt
 8011a2a:	4618      	movlt	r0, r3
 8011a2c:	e738      	b.n	80118a0 <_printf_float+0xa0>
 8011a2e:	2301      	movs	r3, #1
 8011a30:	464a      	mov	r2, r9
 8011a32:	4631      	mov	r1, r6
 8011a34:	4628      	mov	r0, r5
 8011a36:	47b8      	blx	r7
 8011a38:	3001      	adds	r0, #1
 8011a3a:	f43f af2f 	beq.w	801189c <_printf_float+0x9c>
 8011a3e:	f108 0801 	add.w	r8, r8, #1
 8011a42:	e7e6      	b.n	8011a12 <_printf_float+0x212>
 8011a44:	9b07      	ldr	r3, [sp, #28]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	dc3c      	bgt.n	8011ac4 <_printf_float+0x2c4>
 8011a4a:	4a1d      	ldr	r2, [pc, #116]	; (8011ac0 <_printf_float+0x2c0>)
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	4631      	mov	r1, r6
 8011a50:	4628      	mov	r0, r5
 8011a52:	47b8      	blx	r7
 8011a54:	3001      	adds	r0, #1
 8011a56:	f43f af21 	beq.w	801189c <_printf_float+0x9c>
 8011a5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011a5e:	4313      	orrs	r3, r2
 8011a60:	d102      	bne.n	8011a68 <_printf_float+0x268>
 8011a62:	6823      	ldr	r3, [r4, #0]
 8011a64:	07d9      	lsls	r1, r3, #31
 8011a66:	d5d8      	bpl.n	8011a1a <_printf_float+0x21a>
 8011a68:	4653      	mov	r3, sl
 8011a6a:	465a      	mov	r2, fp
 8011a6c:	4631      	mov	r1, r6
 8011a6e:	4628      	mov	r0, r5
 8011a70:	47b8      	blx	r7
 8011a72:	3001      	adds	r0, #1
 8011a74:	f43f af12 	beq.w	801189c <_printf_float+0x9c>
 8011a78:	f04f 0900 	mov.w	r9, #0
 8011a7c:	f104 0a1a 	add.w	sl, r4, #26
 8011a80:	9b07      	ldr	r3, [sp, #28]
 8011a82:	425b      	negs	r3, r3
 8011a84:	454b      	cmp	r3, r9
 8011a86:	dc01      	bgt.n	8011a8c <_printf_float+0x28c>
 8011a88:	9b08      	ldr	r3, [sp, #32]
 8011a8a:	e795      	b.n	80119b8 <_printf_float+0x1b8>
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	4652      	mov	r2, sl
 8011a90:	4631      	mov	r1, r6
 8011a92:	4628      	mov	r0, r5
 8011a94:	47b8      	blx	r7
 8011a96:	3001      	adds	r0, #1
 8011a98:	f43f af00 	beq.w	801189c <_printf_float+0x9c>
 8011a9c:	f109 0901 	add.w	r9, r9, #1
 8011aa0:	e7ee      	b.n	8011a80 <_printf_float+0x280>
 8011aa2:	bf00      	nop
 8011aa4:	f3af 8000 	nop.w
 8011aa8:	ffffffff 	.word	0xffffffff
 8011aac:	7fefffff 	.word	0x7fefffff
 8011ab0:	08015bc4 	.word	0x08015bc4
 8011ab4:	08015bc8 	.word	0x08015bc8
 8011ab8:	08015bd0 	.word	0x08015bd0
 8011abc:	08015bcc 	.word	0x08015bcc
 8011ac0:	08015bd4 	.word	0x08015bd4
 8011ac4:	9a08      	ldr	r2, [sp, #32]
 8011ac6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	bfa8      	it	ge
 8011acc:	461a      	movge	r2, r3
 8011ace:	2a00      	cmp	r2, #0
 8011ad0:	4691      	mov	r9, r2
 8011ad2:	dc38      	bgt.n	8011b46 <_printf_float+0x346>
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	9305      	str	r3, [sp, #20]
 8011ad8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011adc:	f104 021a 	add.w	r2, r4, #26
 8011ae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ae2:	9905      	ldr	r1, [sp, #20]
 8011ae4:	9304      	str	r3, [sp, #16]
 8011ae6:	eba3 0309 	sub.w	r3, r3, r9
 8011aea:	428b      	cmp	r3, r1
 8011aec:	dc33      	bgt.n	8011b56 <_printf_float+0x356>
 8011aee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	db3c      	blt.n	8011b70 <_printf_float+0x370>
 8011af6:	6823      	ldr	r3, [r4, #0]
 8011af8:	07da      	lsls	r2, r3, #31
 8011afa:	d439      	bmi.n	8011b70 <_printf_float+0x370>
 8011afc:	9a08      	ldr	r2, [sp, #32]
 8011afe:	9b04      	ldr	r3, [sp, #16]
 8011b00:	9907      	ldr	r1, [sp, #28]
 8011b02:	1ad3      	subs	r3, r2, r3
 8011b04:	eba2 0901 	sub.w	r9, r2, r1
 8011b08:	4599      	cmp	r9, r3
 8011b0a:	bfa8      	it	ge
 8011b0c:	4699      	movge	r9, r3
 8011b0e:	f1b9 0f00 	cmp.w	r9, #0
 8011b12:	dc35      	bgt.n	8011b80 <_printf_float+0x380>
 8011b14:	f04f 0800 	mov.w	r8, #0
 8011b18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b1c:	f104 0a1a 	add.w	sl, r4, #26
 8011b20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011b24:	1a9b      	subs	r3, r3, r2
 8011b26:	eba3 0309 	sub.w	r3, r3, r9
 8011b2a:	4543      	cmp	r3, r8
 8011b2c:	f77f af75 	ble.w	8011a1a <_printf_float+0x21a>
 8011b30:	2301      	movs	r3, #1
 8011b32:	4652      	mov	r2, sl
 8011b34:	4631      	mov	r1, r6
 8011b36:	4628      	mov	r0, r5
 8011b38:	47b8      	blx	r7
 8011b3a:	3001      	adds	r0, #1
 8011b3c:	f43f aeae 	beq.w	801189c <_printf_float+0x9c>
 8011b40:	f108 0801 	add.w	r8, r8, #1
 8011b44:	e7ec      	b.n	8011b20 <_printf_float+0x320>
 8011b46:	4613      	mov	r3, r2
 8011b48:	4631      	mov	r1, r6
 8011b4a:	4642      	mov	r2, r8
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	47b8      	blx	r7
 8011b50:	3001      	adds	r0, #1
 8011b52:	d1bf      	bne.n	8011ad4 <_printf_float+0x2d4>
 8011b54:	e6a2      	b.n	801189c <_printf_float+0x9c>
 8011b56:	2301      	movs	r3, #1
 8011b58:	4631      	mov	r1, r6
 8011b5a:	4628      	mov	r0, r5
 8011b5c:	9204      	str	r2, [sp, #16]
 8011b5e:	47b8      	blx	r7
 8011b60:	3001      	adds	r0, #1
 8011b62:	f43f ae9b 	beq.w	801189c <_printf_float+0x9c>
 8011b66:	9b05      	ldr	r3, [sp, #20]
 8011b68:	9a04      	ldr	r2, [sp, #16]
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	9305      	str	r3, [sp, #20]
 8011b6e:	e7b7      	b.n	8011ae0 <_printf_float+0x2e0>
 8011b70:	4653      	mov	r3, sl
 8011b72:	465a      	mov	r2, fp
 8011b74:	4631      	mov	r1, r6
 8011b76:	4628      	mov	r0, r5
 8011b78:	47b8      	blx	r7
 8011b7a:	3001      	adds	r0, #1
 8011b7c:	d1be      	bne.n	8011afc <_printf_float+0x2fc>
 8011b7e:	e68d      	b.n	801189c <_printf_float+0x9c>
 8011b80:	9a04      	ldr	r2, [sp, #16]
 8011b82:	464b      	mov	r3, r9
 8011b84:	4442      	add	r2, r8
 8011b86:	4631      	mov	r1, r6
 8011b88:	4628      	mov	r0, r5
 8011b8a:	47b8      	blx	r7
 8011b8c:	3001      	adds	r0, #1
 8011b8e:	d1c1      	bne.n	8011b14 <_printf_float+0x314>
 8011b90:	e684      	b.n	801189c <_printf_float+0x9c>
 8011b92:	9a08      	ldr	r2, [sp, #32]
 8011b94:	2a01      	cmp	r2, #1
 8011b96:	dc01      	bgt.n	8011b9c <_printf_float+0x39c>
 8011b98:	07db      	lsls	r3, r3, #31
 8011b9a:	d537      	bpl.n	8011c0c <_printf_float+0x40c>
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	4642      	mov	r2, r8
 8011ba0:	4631      	mov	r1, r6
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	47b8      	blx	r7
 8011ba6:	3001      	adds	r0, #1
 8011ba8:	f43f ae78 	beq.w	801189c <_printf_float+0x9c>
 8011bac:	4653      	mov	r3, sl
 8011bae:	465a      	mov	r2, fp
 8011bb0:	4631      	mov	r1, r6
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	47b8      	blx	r7
 8011bb6:	3001      	adds	r0, #1
 8011bb8:	f43f ae70 	beq.w	801189c <_printf_float+0x9c>
 8011bbc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011bc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bc8:	d01b      	beq.n	8011c02 <_printf_float+0x402>
 8011bca:	9b08      	ldr	r3, [sp, #32]
 8011bcc:	f108 0201 	add.w	r2, r8, #1
 8011bd0:	3b01      	subs	r3, #1
 8011bd2:	4631      	mov	r1, r6
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	47b8      	blx	r7
 8011bd8:	3001      	adds	r0, #1
 8011bda:	d10e      	bne.n	8011bfa <_printf_float+0x3fa>
 8011bdc:	e65e      	b.n	801189c <_printf_float+0x9c>
 8011bde:	2301      	movs	r3, #1
 8011be0:	464a      	mov	r2, r9
 8011be2:	4631      	mov	r1, r6
 8011be4:	4628      	mov	r0, r5
 8011be6:	47b8      	blx	r7
 8011be8:	3001      	adds	r0, #1
 8011bea:	f43f ae57 	beq.w	801189c <_printf_float+0x9c>
 8011bee:	f108 0801 	add.w	r8, r8, #1
 8011bf2:	9b08      	ldr	r3, [sp, #32]
 8011bf4:	3b01      	subs	r3, #1
 8011bf6:	4543      	cmp	r3, r8
 8011bf8:	dcf1      	bgt.n	8011bde <_printf_float+0x3de>
 8011bfa:	9b04      	ldr	r3, [sp, #16]
 8011bfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011c00:	e6db      	b.n	80119ba <_printf_float+0x1ba>
 8011c02:	f04f 0800 	mov.w	r8, #0
 8011c06:	f104 091a 	add.w	r9, r4, #26
 8011c0a:	e7f2      	b.n	8011bf2 <_printf_float+0x3f2>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	4642      	mov	r2, r8
 8011c10:	e7df      	b.n	8011bd2 <_printf_float+0x3d2>
 8011c12:	2301      	movs	r3, #1
 8011c14:	464a      	mov	r2, r9
 8011c16:	4631      	mov	r1, r6
 8011c18:	4628      	mov	r0, r5
 8011c1a:	47b8      	blx	r7
 8011c1c:	3001      	adds	r0, #1
 8011c1e:	f43f ae3d 	beq.w	801189c <_printf_float+0x9c>
 8011c22:	f108 0801 	add.w	r8, r8, #1
 8011c26:	68e3      	ldr	r3, [r4, #12]
 8011c28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c2a:	1a5b      	subs	r3, r3, r1
 8011c2c:	4543      	cmp	r3, r8
 8011c2e:	dcf0      	bgt.n	8011c12 <_printf_float+0x412>
 8011c30:	e6f7      	b.n	8011a22 <_printf_float+0x222>
 8011c32:	f04f 0800 	mov.w	r8, #0
 8011c36:	f104 0919 	add.w	r9, r4, #25
 8011c3a:	e7f4      	b.n	8011c26 <_printf_float+0x426>

08011c3c <_printf_common>:
 8011c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c40:	4616      	mov	r6, r2
 8011c42:	4699      	mov	r9, r3
 8011c44:	688a      	ldr	r2, [r1, #8]
 8011c46:	690b      	ldr	r3, [r1, #16]
 8011c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	bfb8      	it	lt
 8011c50:	4613      	movlt	r3, r2
 8011c52:	6033      	str	r3, [r6, #0]
 8011c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c58:	4607      	mov	r7, r0
 8011c5a:	460c      	mov	r4, r1
 8011c5c:	b10a      	cbz	r2, 8011c62 <_printf_common+0x26>
 8011c5e:	3301      	adds	r3, #1
 8011c60:	6033      	str	r3, [r6, #0]
 8011c62:	6823      	ldr	r3, [r4, #0]
 8011c64:	0699      	lsls	r1, r3, #26
 8011c66:	bf42      	ittt	mi
 8011c68:	6833      	ldrmi	r3, [r6, #0]
 8011c6a:	3302      	addmi	r3, #2
 8011c6c:	6033      	strmi	r3, [r6, #0]
 8011c6e:	6825      	ldr	r5, [r4, #0]
 8011c70:	f015 0506 	ands.w	r5, r5, #6
 8011c74:	d106      	bne.n	8011c84 <_printf_common+0x48>
 8011c76:	f104 0a19 	add.w	sl, r4, #25
 8011c7a:	68e3      	ldr	r3, [r4, #12]
 8011c7c:	6832      	ldr	r2, [r6, #0]
 8011c7e:	1a9b      	subs	r3, r3, r2
 8011c80:	42ab      	cmp	r3, r5
 8011c82:	dc26      	bgt.n	8011cd2 <_printf_common+0x96>
 8011c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c88:	1e13      	subs	r3, r2, #0
 8011c8a:	6822      	ldr	r2, [r4, #0]
 8011c8c:	bf18      	it	ne
 8011c8e:	2301      	movne	r3, #1
 8011c90:	0692      	lsls	r2, r2, #26
 8011c92:	d42b      	bmi.n	8011cec <_printf_common+0xb0>
 8011c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c98:	4649      	mov	r1, r9
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	47c0      	blx	r8
 8011c9e:	3001      	adds	r0, #1
 8011ca0:	d01e      	beq.n	8011ce0 <_printf_common+0xa4>
 8011ca2:	6823      	ldr	r3, [r4, #0]
 8011ca4:	68e5      	ldr	r5, [r4, #12]
 8011ca6:	6832      	ldr	r2, [r6, #0]
 8011ca8:	f003 0306 	and.w	r3, r3, #6
 8011cac:	2b04      	cmp	r3, #4
 8011cae:	bf08      	it	eq
 8011cb0:	1aad      	subeq	r5, r5, r2
 8011cb2:	68a3      	ldr	r3, [r4, #8]
 8011cb4:	6922      	ldr	r2, [r4, #16]
 8011cb6:	bf0c      	ite	eq
 8011cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cbc:	2500      	movne	r5, #0
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	bfc4      	itt	gt
 8011cc2:	1a9b      	subgt	r3, r3, r2
 8011cc4:	18ed      	addgt	r5, r5, r3
 8011cc6:	2600      	movs	r6, #0
 8011cc8:	341a      	adds	r4, #26
 8011cca:	42b5      	cmp	r5, r6
 8011ccc:	d11a      	bne.n	8011d04 <_printf_common+0xc8>
 8011cce:	2000      	movs	r0, #0
 8011cd0:	e008      	b.n	8011ce4 <_printf_common+0xa8>
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	4652      	mov	r2, sl
 8011cd6:	4649      	mov	r1, r9
 8011cd8:	4638      	mov	r0, r7
 8011cda:	47c0      	blx	r8
 8011cdc:	3001      	adds	r0, #1
 8011cde:	d103      	bne.n	8011ce8 <_printf_common+0xac>
 8011ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce8:	3501      	adds	r5, #1
 8011cea:	e7c6      	b.n	8011c7a <_printf_common+0x3e>
 8011cec:	18e1      	adds	r1, r4, r3
 8011cee:	1c5a      	adds	r2, r3, #1
 8011cf0:	2030      	movs	r0, #48	; 0x30
 8011cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011cf6:	4422      	add	r2, r4
 8011cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d00:	3302      	adds	r3, #2
 8011d02:	e7c7      	b.n	8011c94 <_printf_common+0x58>
 8011d04:	2301      	movs	r3, #1
 8011d06:	4622      	mov	r2, r4
 8011d08:	4649      	mov	r1, r9
 8011d0a:	4638      	mov	r0, r7
 8011d0c:	47c0      	blx	r8
 8011d0e:	3001      	adds	r0, #1
 8011d10:	d0e6      	beq.n	8011ce0 <_printf_common+0xa4>
 8011d12:	3601      	adds	r6, #1
 8011d14:	e7d9      	b.n	8011cca <_printf_common+0x8e>
	...

08011d18 <_printf_i>:
 8011d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d1c:	460c      	mov	r4, r1
 8011d1e:	4691      	mov	r9, r2
 8011d20:	7e27      	ldrb	r7, [r4, #24]
 8011d22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011d24:	2f78      	cmp	r7, #120	; 0x78
 8011d26:	4680      	mov	r8, r0
 8011d28:	469a      	mov	sl, r3
 8011d2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d2e:	d807      	bhi.n	8011d40 <_printf_i+0x28>
 8011d30:	2f62      	cmp	r7, #98	; 0x62
 8011d32:	d80a      	bhi.n	8011d4a <_printf_i+0x32>
 8011d34:	2f00      	cmp	r7, #0
 8011d36:	f000 80d8 	beq.w	8011eea <_printf_i+0x1d2>
 8011d3a:	2f58      	cmp	r7, #88	; 0x58
 8011d3c:	f000 80a3 	beq.w	8011e86 <_printf_i+0x16e>
 8011d40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011d48:	e03a      	b.n	8011dc0 <_printf_i+0xa8>
 8011d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011d4e:	2b15      	cmp	r3, #21
 8011d50:	d8f6      	bhi.n	8011d40 <_printf_i+0x28>
 8011d52:	a001      	add	r0, pc, #4	; (adr r0, 8011d58 <_printf_i+0x40>)
 8011d54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011d58:	08011db1 	.word	0x08011db1
 8011d5c:	08011dc5 	.word	0x08011dc5
 8011d60:	08011d41 	.word	0x08011d41
 8011d64:	08011d41 	.word	0x08011d41
 8011d68:	08011d41 	.word	0x08011d41
 8011d6c:	08011d41 	.word	0x08011d41
 8011d70:	08011dc5 	.word	0x08011dc5
 8011d74:	08011d41 	.word	0x08011d41
 8011d78:	08011d41 	.word	0x08011d41
 8011d7c:	08011d41 	.word	0x08011d41
 8011d80:	08011d41 	.word	0x08011d41
 8011d84:	08011ed1 	.word	0x08011ed1
 8011d88:	08011df5 	.word	0x08011df5
 8011d8c:	08011eb3 	.word	0x08011eb3
 8011d90:	08011d41 	.word	0x08011d41
 8011d94:	08011d41 	.word	0x08011d41
 8011d98:	08011ef3 	.word	0x08011ef3
 8011d9c:	08011d41 	.word	0x08011d41
 8011da0:	08011df5 	.word	0x08011df5
 8011da4:	08011d41 	.word	0x08011d41
 8011da8:	08011d41 	.word	0x08011d41
 8011dac:	08011ebb 	.word	0x08011ebb
 8011db0:	680b      	ldr	r3, [r1, #0]
 8011db2:	1d1a      	adds	r2, r3, #4
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	600a      	str	r2, [r1, #0]
 8011db8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	e0a3      	b.n	8011f0c <_printf_i+0x1f4>
 8011dc4:	6825      	ldr	r5, [r4, #0]
 8011dc6:	6808      	ldr	r0, [r1, #0]
 8011dc8:	062e      	lsls	r6, r5, #24
 8011dca:	f100 0304 	add.w	r3, r0, #4
 8011dce:	d50a      	bpl.n	8011de6 <_printf_i+0xce>
 8011dd0:	6805      	ldr	r5, [r0, #0]
 8011dd2:	600b      	str	r3, [r1, #0]
 8011dd4:	2d00      	cmp	r5, #0
 8011dd6:	da03      	bge.n	8011de0 <_printf_i+0xc8>
 8011dd8:	232d      	movs	r3, #45	; 0x2d
 8011dda:	426d      	negs	r5, r5
 8011ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011de0:	485e      	ldr	r0, [pc, #376]	; (8011f5c <_printf_i+0x244>)
 8011de2:	230a      	movs	r3, #10
 8011de4:	e019      	b.n	8011e1a <_printf_i+0x102>
 8011de6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011dea:	6805      	ldr	r5, [r0, #0]
 8011dec:	600b      	str	r3, [r1, #0]
 8011dee:	bf18      	it	ne
 8011df0:	b22d      	sxthne	r5, r5
 8011df2:	e7ef      	b.n	8011dd4 <_printf_i+0xbc>
 8011df4:	680b      	ldr	r3, [r1, #0]
 8011df6:	6825      	ldr	r5, [r4, #0]
 8011df8:	1d18      	adds	r0, r3, #4
 8011dfa:	6008      	str	r0, [r1, #0]
 8011dfc:	0628      	lsls	r0, r5, #24
 8011dfe:	d501      	bpl.n	8011e04 <_printf_i+0xec>
 8011e00:	681d      	ldr	r5, [r3, #0]
 8011e02:	e002      	b.n	8011e0a <_printf_i+0xf2>
 8011e04:	0669      	lsls	r1, r5, #25
 8011e06:	d5fb      	bpl.n	8011e00 <_printf_i+0xe8>
 8011e08:	881d      	ldrh	r5, [r3, #0]
 8011e0a:	4854      	ldr	r0, [pc, #336]	; (8011f5c <_printf_i+0x244>)
 8011e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8011e0e:	bf0c      	ite	eq
 8011e10:	2308      	moveq	r3, #8
 8011e12:	230a      	movne	r3, #10
 8011e14:	2100      	movs	r1, #0
 8011e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e1a:	6866      	ldr	r6, [r4, #4]
 8011e1c:	60a6      	str	r6, [r4, #8]
 8011e1e:	2e00      	cmp	r6, #0
 8011e20:	bfa2      	ittt	ge
 8011e22:	6821      	ldrge	r1, [r4, #0]
 8011e24:	f021 0104 	bicge.w	r1, r1, #4
 8011e28:	6021      	strge	r1, [r4, #0]
 8011e2a:	b90d      	cbnz	r5, 8011e30 <_printf_i+0x118>
 8011e2c:	2e00      	cmp	r6, #0
 8011e2e:	d04d      	beq.n	8011ecc <_printf_i+0x1b4>
 8011e30:	4616      	mov	r6, r2
 8011e32:	fbb5 f1f3 	udiv	r1, r5, r3
 8011e36:	fb03 5711 	mls	r7, r3, r1, r5
 8011e3a:	5dc7      	ldrb	r7, [r0, r7]
 8011e3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011e40:	462f      	mov	r7, r5
 8011e42:	42bb      	cmp	r3, r7
 8011e44:	460d      	mov	r5, r1
 8011e46:	d9f4      	bls.n	8011e32 <_printf_i+0x11a>
 8011e48:	2b08      	cmp	r3, #8
 8011e4a:	d10b      	bne.n	8011e64 <_printf_i+0x14c>
 8011e4c:	6823      	ldr	r3, [r4, #0]
 8011e4e:	07df      	lsls	r7, r3, #31
 8011e50:	d508      	bpl.n	8011e64 <_printf_i+0x14c>
 8011e52:	6923      	ldr	r3, [r4, #16]
 8011e54:	6861      	ldr	r1, [r4, #4]
 8011e56:	4299      	cmp	r1, r3
 8011e58:	bfde      	ittt	le
 8011e5a:	2330      	movle	r3, #48	; 0x30
 8011e5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011e60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011e64:	1b92      	subs	r2, r2, r6
 8011e66:	6122      	str	r2, [r4, #16]
 8011e68:	f8cd a000 	str.w	sl, [sp]
 8011e6c:	464b      	mov	r3, r9
 8011e6e:	aa03      	add	r2, sp, #12
 8011e70:	4621      	mov	r1, r4
 8011e72:	4640      	mov	r0, r8
 8011e74:	f7ff fee2 	bl	8011c3c <_printf_common>
 8011e78:	3001      	adds	r0, #1
 8011e7a:	d14c      	bne.n	8011f16 <_printf_i+0x1fe>
 8011e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e80:	b004      	add	sp, #16
 8011e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e86:	4835      	ldr	r0, [pc, #212]	; (8011f5c <_printf_i+0x244>)
 8011e88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011e8c:	6823      	ldr	r3, [r4, #0]
 8011e8e:	680e      	ldr	r6, [r1, #0]
 8011e90:	061f      	lsls	r7, r3, #24
 8011e92:	f856 5b04 	ldr.w	r5, [r6], #4
 8011e96:	600e      	str	r6, [r1, #0]
 8011e98:	d514      	bpl.n	8011ec4 <_printf_i+0x1ac>
 8011e9a:	07d9      	lsls	r1, r3, #31
 8011e9c:	bf44      	itt	mi
 8011e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8011ea2:	6023      	strmi	r3, [r4, #0]
 8011ea4:	b91d      	cbnz	r5, 8011eae <_printf_i+0x196>
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	f023 0320 	bic.w	r3, r3, #32
 8011eac:	6023      	str	r3, [r4, #0]
 8011eae:	2310      	movs	r3, #16
 8011eb0:	e7b0      	b.n	8011e14 <_printf_i+0xfc>
 8011eb2:	6823      	ldr	r3, [r4, #0]
 8011eb4:	f043 0320 	orr.w	r3, r3, #32
 8011eb8:	6023      	str	r3, [r4, #0]
 8011eba:	2378      	movs	r3, #120	; 0x78
 8011ebc:	4828      	ldr	r0, [pc, #160]	; (8011f60 <_printf_i+0x248>)
 8011ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ec2:	e7e3      	b.n	8011e8c <_printf_i+0x174>
 8011ec4:	065e      	lsls	r6, r3, #25
 8011ec6:	bf48      	it	mi
 8011ec8:	b2ad      	uxthmi	r5, r5
 8011eca:	e7e6      	b.n	8011e9a <_printf_i+0x182>
 8011ecc:	4616      	mov	r6, r2
 8011ece:	e7bb      	b.n	8011e48 <_printf_i+0x130>
 8011ed0:	680b      	ldr	r3, [r1, #0]
 8011ed2:	6826      	ldr	r6, [r4, #0]
 8011ed4:	6960      	ldr	r0, [r4, #20]
 8011ed6:	1d1d      	adds	r5, r3, #4
 8011ed8:	600d      	str	r5, [r1, #0]
 8011eda:	0635      	lsls	r5, r6, #24
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	d501      	bpl.n	8011ee4 <_printf_i+0x1cc>
 8011ee0:	6018      	str	r0, [r3, #0]
 8011ee2:	e002      	b.n	8011eea <_printf_i+0x1d2>
 8011ee4:	0671      	lsls	r1, r6, #25
 8011ee6:	d5fb      	bpl.n	8011ee0 <_printf_i+0x1c8>
 8011ee8:	8018      	strh	r0, [r3, #0]
 8011eea:	2300      	movs	r3, #0
 8011eec:	6123      	str	r3, [r4, #16]
 8011eee:	4616      	mov	r6, r2
 8011ef0:	e7ba      	b.n	8011e68 <_printf_i+0x150>
 8011ef2:	680b      	ldr	r3, [r1, #0]
 8011ef4:	1d1a      	adds	r2, r3, #4
 8011ef6:	600a      	str	r2, [r1, #0]
 8011ef8:	681e      	ldr	r6, [r3, #0]
 8011efa:	6862      	ldr	r2, [r4, #4]
 8011efc:	2100      	movs	r1, #0
 8011efe:	4630      	mov	r0, r6
 8011f00:	f7ee f9f6 	bl	80002f0 <memchr>
 8011f04:	b108      	cbz	r0, 8011f0a <_printf_i+0x1f2>
 8011f06:	1b80      	subs	r0, r0, r6
 8011f08:	6060      	str	r0, [r4, #4]
 8011f0a:	6863      	ldr	r3, [r4, #4]
 8011f0c:	6123      	str	r3, [r4, #16]
 8011f0e:	2300      	movs	r3, #0
 8011f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f14:	e7a8      	b.n	8011e68 <_printf_i+0x150>
 8011f16:	6923      	ldr	r3, [r4, #16]
 8011f18:	4632      	mov	r2, r6
 8011f1a:	4649      	mov	r1, r9
 8011f1c:	4640      	mov	r0, r8
 8011f1e:	47d0      	blx	sl
 8011f20:	3001      	adds	r0, #1
 8011f22:	d0ab      	beq.n	8011e7c <_printf_i+0x164>
 8011f24:	6823      	ldr	r3, [r4, #0]
 8011f26:	079b      	lsls	r3, r3, #30
 8011f28:	d413      	bmi.n	8011f52 <_printf_i+0x23a>
 8011f2a:	68e0      	ldr	r0, [r4, #12]
 8011f2c:	9b03      	ldr	r3, [sp, #12]
 8011f2e:	4298      	cmp	r0, r3
 8011f30:	bfb8      	it	lt
 8011f32:	4618      	movlt	r0, r3
 8011f34:	e7a4      	b.n	8011e80 <_printf_i+0x168>
 8011f36:	2301      	movs	r3, #1
 8011f38:	4632      	mov	r2, r6
 8011f3a:	4649      	mov	r1, r9
 8011f3c:	4640      	mov	r0, r8
 8011f3e:	47d0      	blx	sl
 8011f40:	3001      	adds	r0, #1
 8011f42:	d09b      	beq.n	8011e7c <_printf_i+0x164>
 8011f44:	3501      	adds	r5, #1
 8011f46:	68e3      	ldr	r3, [r4, #12]
 8011f48:	9903      	ldr	r1, [sp, #12]
 8011f4a:	1a5b      	subs	r3, r3, r1
 8011f4c:	42ab      	cmp	r3, r5
 8011f4e:	dcf2      	bgt.n	8011f36 <_printf_i+0x21e>
 8011f50:	e7eb      	b.n	8011f2a <_printf_i+0x212>
 8011f52:	2500      	movs	r5, #0
 8011f54:	f104 0619 	add.w	r6, r4, #25
 8011f58:	e7f5      	b.n	8011f46 <_printf_i+0x22e>
 8011f5a:	bf00      	nop
 8011f5c:	08015bd6 	.word	0x08015bd6
 8011f60:	08015be7 	.word	0x08015be7

08011f64 <_puts_r>:
 8011f64:	b570      	push	{r4, r5, r6, lr}
 8011f66:	460e      	mov	r6, r1
 8011f68:	4605      	mov	r5, r0
 8011f6a:	b118      	cbz	r0, 8011f74 <_puts_r+0x10>
 8011f6c:	6983      	ldr	r3, [r0, #24]
 8011f6e:	b90b      	cbnz	r3, 8011f74 <_puts_r+0x10>
 8011f70:	f001 f856 	bl	8013020 <__sinit>
 8011f74:	69ab      	ldr	r3, [r5, #24]
 8011f76:	68ac      	ldr	r4, [r5, #8]
 8011f78:	b913      	cbnz	r3, 8011f80 <_puts_r+0x1c>
 8011f7a:	4628      	mov	r0, r5
 8011f7c:	f001 f850 	bl	8013020 <__sinit>
 8011f80:	4b2c      	ldr	r3, [pc, #176]	; (8012034 <_puts_r+0xd0>)
 8011f82:	429c      	cmp	r4, r3
 8011f84:	d120      	bne.n	8011fc8 <_puts_r+0x64>
 8011f86:	686c      	ldr	r4, [r5, #4]
 8011f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f8a:	07db      	lsls	r3, r3, #31
 8011f8c:	d405      	bmi.n	8011f9a <_puts_r+0x36>
 8011f8e:	89a3      	ldrh	r3, [r4, #12]
 8011f90:	0598      	lsls	r0, r3, #22
 8011f92:	d402      	bmi.n	8011f9a <_puts_r+0x36>
 8011f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f96:	f001 f8e6 	bl	8013166 <__retarget_lock_acquire_recursive>
 8011f9a:	89a3      	ldrh	r3, [r4, #12]
 8011f9c:	0719      	lsls	r1, r3, #28
 8011f9e:	d51d      	bpl.n	8011fdc <_puts_r+0x78>
 8011fa0:	6923      	ldr	r3, [r4, #16]
 8011fa2:	b1db      	cbz	r3, 8011fdc <_puts_r+0x78>
 8011fa4:	3e01      	subs	r6, #1
 8011fa6:	68a3      	ldr	r3, [r4, #8]
 8011fa8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011fac:	3b01      	subs	r3, #1
 8011fae:	60a3      	str	r3, [r4, #8]
 8011fb0:	bb39      	cbnz	r1, 8012002 <_puts_r+0x9e>
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	da38      	bge.n	8012028 <_puts_r+0xc4>
 8011fb6:	4622      	mov	r2, r4
 8011fb8:	210a      	movs	r1, #10
 8011fba:	4628      	mov	r0, r5
 8011fbc:	f000 f848 	bl	8012050 <__swbuf_r>
 8011fc0:	3001      	adds	r0, #1
 8011fc2:	d011      	beq.n	8011fe8 <_puts_r+0x84>
 8011fc4:	250a      	movs	r5, #10
 8011fc6:	e011      	b.n	8011fec <_puts_r+0x88>
 8011fc8:	4b1b      	ldr	r3, [pc, #108]	; (8012038 <_puts_r+0xd4>)
 8011fca:	429c      	cmp	r4, r3
 8011fcc:	d101      	bne.n	8011fd2 <_puts_r+0x6e>
 8011fce:	68ac      	ldr	r4, [r5, #8]
 8011fd0:	e7da      	b.n	8011f88 <_puts_r+0x24>
 8011fd2:	4b1a      	ldr	r3, [pc, #104]	; (801203c <_puts_r+0xd8>)
 8011fd4:	429c      	cmp	r4, r3
 8011fd6:	bf08      	it	eq
 8011fd8:	68ec      	ldreq	r4, [r5, #12]
 8011fda:	e7d5      	b.n	8011f88 <_puts_r+0x24>
 8011fdc:	4621      	mov	r1, r4
 8011fde:	4628      	mov	r0, r5
 8011fe0:	f000 f888 	bl	80120f4 <__swsetup_r>
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d0dd      	beq.n	8011fa4 <_puts_r+0x40>
 8011fe8:	f04f 35ff 	mov.w	r5, #4294967295
 8011fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fee:	07da      	lsls	r2, r3, #31
 8011ff0:	d405      	bmi.n	8011ffe <_puts_r+0x9a>
 8011ff2:	89a3      	ldrh	r3, [r4, #12]
 8011ff4:	059b      	lsls	r3, r3, #22
 8011ff6:	d402      	bmi.n	8011ffe <_puts_r+0x9a>
 8011ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ffa:	f001 f8b5 	bl	8013168 <__retarget_lock_release_recursive>
 8011ffe:	4628      	mov	r0, r5
 8012000:	bd70      	pop	{r4, r5, r6, pc}
 8012002:	2b00      	cmp	r3, #0
 8012004:	da04      	bge.n	8012010 <_puts_r+0xac>
 8012006:	69a2      	ldr	r2, [r4, #24]
 8012008:	429a      	cmp	r2, r3
 801200a:	dc06      	bgt.n	801201a <_puts_r+0xb6>
 801200c:	290a      	cmp	r1, #10
 801200e:	d004      	beq.n	801201a <_puts_r+0xb6>
 8012010:	6823      	ldr	r3, [r4, #0]
 8012012:	1c5a      	adds	r2, r3, #1
 8012014:	6022      	str	r2, [r4, #0]
 8012016:	7019      	strb	r1, [r3, #0]
 8012018:	e7c5      	b.n	8011fa6 <_puts_r+0x42>
 801201a:	4622      	mov	r2, r4
 801201c:	4628      	mov	r0, r5
 801201e:	f000 f817 	bl	8012050 <__swbuf_r>
 8012022:	3001      	adds	r0, #1
 8012024:	d1bf      	bne.n	8011fa6 <_puts_r+0x42>
 8012026:	e7df      	b.n	8011fe8 <_puts_r+0x84>
 8012028:	6823      	ldr	r3, [r4, #0]
 801202a:	250a      	movs	r5, #10
 801202c:	1c5a      	adds	r2, r3, #1
 801202e:	6022      	str	r2, [r4, #0]
 8012030:	701d      	strb	r5, [r3, #0]
 8012032:	e7db      	b.n	8011fec <_puts_r+0x88>
 8012034:	08015cac 	.word	0x08015cac
 8012038:	08015ccc 	.word	0x08015ccc
 801203c:	08015c8c 	.word	0x08015c8c

08012040 <puts>:
 8012040:	4b02      	ldr	r3, [pc, #8]	; (801204c <puts+0xc>)
 8012042:	4601      	mov	r1, r0
 8012044:	6818      	ldr	r0, [r3, #0]
 8012046:	f7ff bf8d 	b.w	8011f64 <_puts_r>
 801204a:	bf00      	nop
 801204c:	24000238 	.word	0x24000238

08012050 <__swbuf_r>:
 8012050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012052:	460e      	mov	r6, r1
 8012054:	4614      	mov	r4, r2
 8012056:	4605      	mov	r5, r0
 8012058:	b118      	cbz	r0, 8012062 <__swbuf_r+0x12>
 801205a:	6983      	ldr	r3, [r0, #24]
 801205c:	b90b      	cbnz	r3, 8012062 <__swbuf_r+0x12>
 801205e:	f000 ffdf 	bl	8013020 <__sinit>
 8012062:	4b21      	ldr	r3, [pc, #132]	; (80120e8 <__swbuf_r+0x98>)
 8012064:	429c      	cmp	r4, r3
 8012066:	d12b      	bne.n	80120c0 <__swbuf_r+0x70>
 8012068:	686c      	ldr	r4, [r5, #4]
 801206a:	69a3      	ldr	r3, [r4, #24]
 801206c:	60a3      	str	r3, [r4, #8]
 801206e:	89a3      	ldrh	r3, [r4, #12]
 8012070:	071a      	lsls	r2, r3, #28
 8012072:	d52f      	bpl.n	80120d4 <__swbuf_r+0x84>
 8012074:	6923      	ldr	r3, [r4, #16]
 8012076:	b36b      	cbz	r3, 80120d4 <__swbuf_r+0x84>
 8012078:	6923      	ldr	r3, [r4, #16]
 801207a:	6820      	ldr	r0, [r4, #0]
 801207c:	1ac0      	subs	r0, r0, r3
 801207e:	6963      	ldr	r3, [r4, #20]
 8012080:	b2f6      	uxtb	r6, r6
 8012082:	4283      	cmp	r3, r0
 8012084:	4637      	mov	r7, r6
 8012086:	dc04      	bgt.n	8012092 <__swbuf_r+0x42>
 8012088:	4621      	mov	r1, r4
 801208a:	4628      	mov	r0, r5
 801208c:	f000 ff34 	bl	8012ef8 <_fflush_r>
 8012090:	bb30      	cbnz	r0, 80120e0 <__swbuf_r+0x90>
 8012092:	68a3      	ldr	r3, [r4, #8]
 8012094:	3b01      	subs	r3, #1
 8012096:	60a3      	str	r3, [r4, #8]
 8012098:	6823      	ldr	r3, [r4, #0]
 801209a:	1c5a      	adds	r2, r3, #1
 801209c:	6022      	str	r2, [r4, #0]
 801209e:	701e      	strb	r6, [r3, #0]
 80120a0:	6963      	ldr	r3, [r4, #20]
 80120a2:	3001      	adds	r0, #1
 80120a4:	4283      	cmp	r3, r0
 80120a6:	d004      	beq.n	80120b2 <__swbuf_r+0x62>
 80120a8:	89a3      	ldrh	r3, [r4, #12]
 80120aa:	07db      	lsls	r3, r3, #31
 80120ac:	d506      	bpl.n	80120bc <__swbuf_r+0x6c>
 80120ae:	2e0a      	cmp	r6, #10
 80120b0:	d104      	bne.n	80120bc <__swbuf_r+0x6c>
 80120b2:	4621      	mov	r1, r4
 80120b4:	4628      	mov	r0, r5
 80120b6:	f000 ff1f 	bl	8012ef8 <_fflush_r>
 80120ba:	b988      	cbnz	r0, 80120e0 <__swbuf_r+0x90>
 80120bc:	4638      	mov	r0, r7
 80120be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120c0:	4b0a      	ldr	r3, [pc, #40]	; (80120ec <__swbuf_r+0x9c>)
 80120c2:	429c      	cmp	r4, r3
 80120c4:	d101      	bne.n	80120ca <__swbuf_r+0x7a>
 80120c6:	68ac      	ldr	r4, [r5, #8]
 80120c8:	e7cf      	b.n	801206a <__swbuf_r+0x1a>
 80120ca:	4b09      	ldr	r3, [pc, #36]	; (80120f0 <__swbuf_r+0xa0>)
 80120cc:	429c      	cmp	r4, r3
 80120ce:	bf08      	it	eq
 80120d0:	68ec      	ldreq	r4, [r5, #12]
 80120d2:	e7ca      	b.n	801206a <__swbuf_r+0x1a>
 80120d4:	4621      	mov	r1, r4
 80120d6:	4628      	mov	r0, r5
 80120d8:	f000 f80c 	bl	80120f4 <__swsetup_r>
 80120dc:	2800      	cmp	r0, #0
 80120de:	d0cb      	beq.n	8012078 <__swbuf_r+0x28>
 80120e0:	f04f 37ff 	mov.w	r7, #4294967295
 80120e4:	e7ea      	b.n	80120bc <__swbuf_r+0x6c>
 80120e6:	bf00      	nop
 80120e8:	08015cac 	.word	0x08015cac
 80120ec:	08015ccc 	.word	0x08015ccc
 80120f0:	08015c8c 	.word	0x08015c8c

080120f4 <__swsetup_r>:
 80120f4:	4b32      	ldr	r3, [pc, #200]	; (80121c0 <__swsetup_r+0xcc>)
 80120f6:	b570      	push	{r4, r5, r6, lr}
 80120f8:	681d      	ldr	r5, [r3, #0]
 80120fa:	4606      	mov	r6, r0
 80120fc:	460c      	mov	r4, r1
 80120fe:	b125      	cbz	r5, 801210a <__swsetup_r+0x16>
 8012100:	69ab      	ldr	r3, [r5, #24]
 8012102:	b913      	cbnz	r3, 801210a <__swsetup_r+0x16>
 8012104:	4628      	mov	r0, r5
 8012106:	f000 ff8b 	bl	8013020 <__sinit>
 801210a:	4b2e      	ldr	r3, [pc, #184]	; (80121c4 <__swsetup_r+0xd0>)
 801210c:	429c      	cmp	r4, r3
 801210e:	d10f      	bne.n	8012130 <__swsetup_r+0x3c>
 8012110:	686c      	ldr	r4, [r5, #4]
 8012112:	89a3      	ldrh	r3, [r4, #12]
 8012114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012118:	0719      	lsls	r1, r3, #28
 801211a:	d42c      	bmi.n	8012176 <__swsetup_r+0x82>
 801211c:	06dd      	lsls	r5, r3, #27
 801211e:	d411      	bmi.n	8012144 <__swsetup_r+0x50>
 8012120:	2309      	movs	r3, #9
 8012122:	6033      	str	r3, [r6, #0]
 8012124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012128:	81a3      	strh	r3, [r4, #12]
 801212a:	f04f 30ff 	mov.w	r0, #4294967295
 801212e:	e03e      	b.n	80121ae <__swsetup_r+0xba>
 8012130:	4b25      	ldr	r3, [pc, #148]	; (80121c8 <__swsetup_r+0xd4>)
 8012132:	429c      	cmp	r4, r3
 8012134:	d101      	bne.n	801213a <__swsetup_r+0x46>
 8012136:	68ac      	ldr	r4, [r5, #8]
 8012138:	e7eb      	b.n	8012112 <__swsetup_r+0x1e>
 801213a:	4b24      	ldr	r3, [pc, #144]	; (80121cc <__swsetup_r+0xd8>)
 801213c:	429c      	cmp	r4, r3
 801213e:	bf08      	it	eq
 8012140:	68ec      	ldreq	r4, [r5, #12]
 8012142:	e7e6      	b.n	8012112 <__swsetup_r+0x1e>
 8012144:	0758      	lsls	r0, r3, #29
 8012146:	d512      	bpl.n	801216e <__swsetup_r+0x7a>
 8012148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801214a:	b141      	cbz	r1, 801215e <__swsetup_r+0x6a>
 801214c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012150:	4299      	cmp	r1, r3
 8012152:	d002      	beq.n	801215a <__swsetup_r+0x66>
 8012154:	4630      	mov	r0, r6
 8012156:	f001 fc11 	bl	801397c <_free_r>
 801215a:	2300      	movs	r3, #0
 801215c:	6363      	str	r3, [r4, #52]	; 0x34
 801215e:	89a3      	ldrh	r3, [r4, #12]
 8012160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012164:	81a3      	strh	r3, [r4, #12]
 8012166:	2300      	movs	r3, #0
 8012168:	6063      	str	r3, [r4, #4]
 801216a:	6923      	ldr	r3, [r4, #16]
 801216c:	6023      	str	r3, [r4, #0]
 801216e:	89a3      	ldrh	r3, [r4, #12]
 8012170:	f043 0308 	orr.w	r3, r3, #8
 8012174:	81a3      	strh	r3, [r4, #12]
 8012176:	6923      	ldr	r3, [r4, #16]
 8012178:	b94b      	cbnz	r3, 801218e <__swsetup_r+0x9a>
 801217a:	89a3      	ldrh	r3, [r4, #12]
 801217c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012184:	d003      	beq.n	801218e <__swsetup_r+0x9a>
 8012186:	4621      	mov	r1, r4
 8012188:	4630      	mov	r0, r6
 801218a:	f001 f813 	bl	80131b4 <__smakebuf_r>
 801218e:	89a0      	ldrh	r0, [r4, #12]
 8012190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012194:	f010 0301 	ands.w	r3, r0, #1
 8012198:	d00a      	beq.n	80121b0 <__swsetup_r+0xbc>
 801219a:	2300      	movs	r3, #0
 801219c:	60a3      	str	r3, [r4, #8]
 801219e:	6963      	ldr	r3, [r4, #20]
 80121a0:	425b      	negs	r3, r3
 80121a2:	61a3      	str	r3, [r4, #24]
 80121a4:	6923      	ldr	r3, [r4, #16]
 80121a6:	b943      	cbnz	r3, 80121ba <__swsetup_r+0xc6>
 80121a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80121ac:	d1ba      	bne.n	8012124 <__swsetup_r+0x30>
 80121ae:	bd70      	pop	{r4, r5, r6, pc}
 80121b0:	0781      	lsls	r1, r0, #30
 80121b2:	bf58      	it	pl
 80121b4:	6963      	ldrpl	r3, [r4, #20]
 80121b6:	60a3      	str	r3, [r4, #8]
 80121b8:	e7f4      	b.n	80121a4 <__swsetup_r+0xb0>
 80121ba:	2000      	movs	r0, #0
 80121bc:	e7f7      	b.n	80121ae <__swsetup_r+0xba>
 80121be:	bf00      	nop
 80121c0:	24000238 	.word	0x24000238
 80121c4:	08015cac 	.word	0x08015cac
 80121c8:	08015ccc 	.word	0x08015ccc
 80121cc:	08015c8c 	.word	0x08015c8c

080121d0 <quorem>:
 80121d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d4:	6903      	ldr	r3, [r0, #16]
 80121d6:	690c      	ldr	r4, [r1, #16]
 80121d8:	42a3      	cmp	r3, r4
 80121da:	4607      	mov	r7, r0
 80121dc:	f2c0 8081 	blt.w	80122e2 <quorem+0x112>
 80121e0:	3c01      	subs	r4, #1
 80121e2:	f101 0814 	add.w	r8, r1, #20
 80121e6:	f100 0514 	add.w	r5, r0, #20
 80121ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80121ee:	9301      	str	r3, [sp, #4]
 80121f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80121f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80121f8:	3301      	adds	r3, #1
 80121fa:	429a      	cmp	r2, r3
 80121fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012200:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012204:	fbb2 f6f3 	udiv	r6, r2, r3
 8012208:	d331      	bcc.n	801226e <quorem+0x9e>
 801220a:	f04f 0e00 	mov.w	lr, #0
 801220e:	4640      	mov	r0, r8
 8012210:	46ac      	mov	ip, r5
 8012212:	46f2      	mov	sl, lr
 8012214:	f850 2b04 	ldr.w	r2, [r0], #4
 8012218:	b293      	uxth	r3, r2
 801221a:	fb06 e303 	mla	r3, r6, r3, lr
 801221e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012222:	b29b      	uxth	r3, r3
 8012224:	ebaa 0303 	sub.w	r3, sl, r3
 8012228:	0c12      	lsrs	r2, r2, #16
 801222a:	f8dc a000 	ldr.w	sl, [ip]
 801222e:	fb06 e202 	mla	r2, r6, r2, lr
 8012232:	fa13 f38a 	uxtah	r3, r3, sl
 8012236:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801223a:	fa1f fa82 	uxth.w	sl, r2
 801223e:	f8dc 2000 	ldr.w	r2, [ip]
 8012242:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012246:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801224a:	b29b      	uxth	r3, r3
 801224c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012250:	4581      	cmp	r9, r0
 8012252:	f84c 3b04 	str.w	r3, [ip], #4
 8012256:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801225a:	d2db      	bcs.n	8012214 <quorem+0x44>
 801225c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012260:	b92b      	cbnz	r3, 801226e <quorem+0x9e>
 8012262:	9b01      	ldr	r3, [sp, #4]
 8012264:	3b04      	subs	r3, #4
 8012266:	429d      	cmp	r5, r3
 8012268:	461a      	mov	r2, r3
 801226a:	d32e      	bcc.n	80122ca <quorem+0xfa>
 801226c:	613c      	str	r4, [r7, #16]
 801226e:	4638      	mov	r0, r7
 8012270:	f001 fa74 	bl	801375c <__mcmp>
 8012274:	2800      	cmp	r0, #0
 8012276:	db24      	blt.n	80122c2 <quorem+0xf2>
 8012278:	3601      	adds	r6, #1
 801227a:	4628      	mov	r0, r5
 801227c:	f04f 0c00 	mov.w	ip, #0
 8012280:	f858 2b04 	ldr.w	r2, [r8], #4
 8012284:	f8d0 e000 	ldr.w	lr, [r0]
 8012288:	b293      	uxth	r3, r2
 801228a:	ebac 0303 	sub.w	r3, ip, r3
 801228e:	0c12      	lsrs	r2, r2, #16
 8012290:	fa13 f38e 	uxtah	r3, r3, lr
 8012294:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801229c:	b29b      	uxth	r3, r3
 801229e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122a2:	45c1      	cmp	r9, r8
 80122a4:	f840 3b04 	str.w	r3, [r0], #4
 80122a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80122ac:	d2e8      	bcs.n	8012280 <quorem+0xb0>
 80122ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80122b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80122b6:	b922      	cbnz	r2, 80122c2 <quorem+0xf2>
 80122b8:	3b04      	subs	r3, #4
 80122ba:	429d      	cmp	r5, r3
 80122bc:	461a      	mov	r2, r3
 80122be:	d30a      	bcc.n	80122d6 <quorem+0x106>
 80122c0:	613c      	str	r4, [r7, #16]
 80122c2:	4630      	mov	r0, r6
 80122c4:	b003      	add	sp, #12
 80122c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ca:	6812      	ldr	r2, [r2, #0]
 80122cc:	3b04      	subs	r3, #4
 80122ce:	2a00      	cmp	r2, #0
 80122d0:	d1cc      	bne.n	801226c <quorem+0x9c>
 80122d2:	3c01      	subs	r4, #1
 80122d4:	e7c7      	b.n	8012266 <quorem+0x96>
 80122d6:	6812      	ldr	r2, [r2, #0]
 80122d8:	3b04      	subs	r3, #4
 80122da:	2a00      	cmp	r2, #0
 80122dc:	d1f0      	bne.n	80122c0 <quorem+0xf0>
 80122de:	3c01      	subs	r4, #1
 80122e0:	e7eb      	b.n	80122ba <quorem+0xea>
 80122e2:	2000      	movs	r0, #0
 80122e4:	e7ee      	b.n	80122c4 <quorem+0xf4>
	...

080122e8 <_dtoa_r>:
 80122e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ec:	ec59 8b10 	vmov	r8, r9, d0
 80122f0:	b095      	sub	sp, #84	; 0x54
 80122f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80122f4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80122f6:	9107      	str	r1, [sp, #28]
 80122f8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80122fc:	4606      	mov	r6, r0
 80122fe:	9209      	str	r2, [sp, #36]	; 0x24
 8012300:	9310      	str	r3, [sp, #64]	; 0x40
 8012302:	b975      	cbnz	r5, 8012322 <_dtoa_r+0x3a>
 8012304:	2010      	movs	r0, #16
 8012306:	f000 ff95 	bl	8013234 <malloc>
 801230a:	4602      	mov	r2, r0
 801230c:	6270      	str	r0, [r6, #36]	; 0x24
 801230e:	b920      	cbnz	r0, 801231a <_dtoa_r+0x32>
 8012310:	4bab      	ldr	r3, [pc, #684]	; (80125c0 <_dtoa_r+0x2d8>)
 8012312:	21ea      	movs	r1, #234	; 0xea
 8012314:	48ab      	ldr	r0, [pc, #684]	; (80125c4 <_dtoa_r+0x2dc>)
 8012316:	f001 fc41 	bl	8013b9c <__assert_func>
 801231a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801231e:	6005      	str	r5, [r0, #0]
 8012320:	60c5      	str	r5, [r0, #12]
 8012322:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012324:	6819      	ldr	r1, [r3, #0]
 8012326:	b151      	cbz	r1, 801233e <_dtoa_r+0x56>
 8012328:	685a      	ldr	r2, [r3, #4]
 801232a:	604a      	str	r2, [r1, #4]
 801232c:	2301      	movs	r3, #1
 801232e:	4093      	lsls	r3, r2
 8012330:	608b      	str	r3, [r1, #8]
 8012332:	4630      	mov	r0, r6
 8012334:	f000 ffd4 	bl	80132e0 <_Bfree>
 8012338:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801233a:	2200      	movs	r2, #0
 801233c:	601a      	str	r2, [r3, #0]
 801233e:	f1b9 0300 	subs.w	r3, r9, #0
 8012342:	bfbb      	ittet	lt
 8012344:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012348:	9303      	strlt	r3, [sp, #12]
 801234a:	2300      	movge	r3, #0
 801234c:	2201      	movlt	r2, #1
 801234e:	bfac      	ite	ge
 8012350:	6023      	strge	r3, [r4, #0]
 8012352:	6022      	strlt	r2, [r4, #0]
 8012354:	4b9c      	ldr	r3, [pc, #624]	; (80125c8 <_dtoa_r+0x2e0>)
 8012356:	9c03      	ldr	r4, [sp, #12]
 8012358:	43a3      	bics	r3, r4
 801235a:	d11a      	bne.n	8012392 <_dtoa_r+0xaa>
 801235c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801235e:	f242 730f 	movw	r3, #9999	; 0x270f
 8012362:	6013      	str	r3, [r2, #0]
 8012364:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012368:	ea53 0308 	orrs.w	r3, r3, r8
 801236c:	f000 8512 	beq.w	8012d94 <_dtoa_r+0xaac>
 8012370:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012372:	b953      	cbnz	r3, 801238a <_dtoa_r+0xa2>
 8012374:	4b95      	ldr	r3, [pc, #596]	; (80125cc <_dtoa_r+0x2e4>)
 8012376:	e01f      	b.n	80123b8 <_dtoa_r+0xd0>
 8012378:	4b95      	ldr	r3, [pc, #596]	; (80125d0 <_dtoa_r+0x2e8>)
 801237a:	9300      	str	r3, [sp, #0]
 801237c:	3308      	adds	r3, #8
 801237e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012380:	6013      	str	r3, [r2, #0]
 8012382:	9800      	ldr	r0, [sp, #0]
 8012384:	b015      	add	sp, #84	; 0x54
 8012386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801238a:	4b90      	ldr	r3, [pc, #576]	; (80125cc <_dtoa_r+0x2e4>)
 801238c:	9300      	str	r3, [sp, #0]
 801238e:	3303      	adds	r3, #3
 8012390:	e7f5      	b.n	801237e <_dtoa_r+0x96>
 8012392:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012396:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801239a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801239e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80123a2:	d10b      	bne.n	80123bc <_dtoa_r+0xd4>
 80123a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80123a6:	2301      	movs	r3, #1
 80123a8:	6013      	str	r3, [r2, #0]
 80123aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f000 84ee 	beq.w	8012d8e <_dtoa_r+0xaa6>
 80123b2:	4888      	ldr	r0, [pc, #544]	; (80125d4 <_dtoa_r+0x2ec>)
 80123b4:	6018      	str	r0, [r3, #0]
 80123b6:	1e43      	subs	r3, r0, #1
 80123b8:	9300      	str	r3, [sp, #0]
 80123ba:	e7e2      	b.n	8012382 <_dtoa_r+0x9a>
 80123bc:	a913      	add	r1, sp, #76	; 0x4c
 80123be:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80123c2:	aa12      	add	r2, sp, #72	; 0x48
 80123c4:	4630      	mov	r0, r6
 80123c6:	f001 fa6d 	bl	80138a4 <__d2b>
 80123ca:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80123ce:	4605      	mov	r5, r0
 80123d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80123d2:	2900      	cmp	r1, #0
 80123d4:	d047      	beq.n	8012466 <_dtoa_r+0x17e>
 80123d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80123d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80123dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80123e0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80123e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80123e8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80123ec:	2400      	movs	r4, #0
 80123ee:	ec43 2b16 	vmov	d6, r2, r3
 80123f2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80123f6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80125a8 <_dtoa_r+0x2c0>
 80123fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80123fe:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80125b0 <_dtoa_r+0x2c8>
 8012402:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012406:	eeb0 7b46 	vmov.f64	d7, d6
 801240a:	ee06 1a90 	vmov	s13, r1
 801240e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8012412:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80125b8 <_dtoa_r+0x2d0>
 8012416:	eea5 7b06 	vfma.f64	d7, d5, d6
 801241a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801241e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012426:	ee16 ba90 	vmov	fp, s13
 801242a:	9411      	str	r4, [sp, #68]	; 0x44
 801242c:	d508      	bpl.n	8012440 <_dtoa_r+0x158>
 801242e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012432:	eeb4 6b47 	vcmp.f64	d6, d7
 8012436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243a:	bf18      	it	ne
 801243c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012440:	f1bb 0f16 	cmp.w	fp, #22
 8012444:	d832      	bhi.n	80124ac <_dtoa_r+0x1c4>
 8012446:	4b64      	ldr	r3, [pc, #400]	; (80125d8 <_dtoa_r+0x2f0>)
 8012448:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801244c:	ed93 7b00 	vldr	d7, [r3]
 8012450:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012454:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245c:	d501      	bpl.n	8012462 <_dtoa_r+0x17a>
 801245e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012462:	2300      	movs	r3, #0
 8012464:	e023      	b.n	80124ae <_dtoa_r+0x1c6>
 8012466:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012468:	4401      	add	r1, r0
 801246a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801246e:	2b20      	cmp	r3, #32
 8012470:	bfc3      	ittte	gt
 8012472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012476:	fa04 f303 	lslgt.w	r3, r4, r3
 801247a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801247e:	f1c3 0320 	rsble	r3, r3, #32
 8012482:	bfc6      	itte	gt
 8012484:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012488:	ea43 0308 	orrgt.w	r3, r3, r8
 801248c:	fa08 f303 	lslle.w	r3, r8, r3
 8012490:	ee07 3a90 	vmov	s15, r3
 8012494:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012498:	3901      	subs	r1, #1
 801249a:	ed8d 7b00 	vstr	d7, [sp]
 801249e:	9c01      	ldr	r4, [sp, #4]
 80124a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80124a8:	2401      	movs	r4, #1
 80124aa:	e7a0      	b.n	80123ee <_dtoa_r+0x106>
 80124ac:	2301      	movs	r3, #1
 80124ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80124b0:	1a43      	subs	r3, r0, r1
 80124b2:	1e5a      	subs	r2, r3, #1
 80124b4:	bf45      	ittet	mi
 80124b6:	f1c3 0301 	rsbmi	r3, r3, #1
 80124ba:	9305      	strmi	r3, [sp, #20]
 80124bc:	2300      	movpl	r3, #0
 80124be:	2300      	movmi	r3, #0
 80124c0:	9206      	str	r2, [sp, #24]
 80124c2:	bf54      	ite	pl
 80124c4:	9305      	strpl	r3, [sp, #20]
 80124c6:	9306      	strmi	r3, [sp, #24]
 80124c8:	f1bb 0f00 	cmp.w	fp, #0
 80124cc:	db18      	blt.n	8012500 <_dtoa_r+0x218>
 80124ce:	9b06      	ldr	r3, [sp, #24]
 80124d0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80124d4:	445b      	add	r3, fp
 80124d6:	9306      	str	r3, [sp, #24]
 80124d8:	2300      	movs	r3, #0
 80124da:	9a07      	ldr	r2, [sp, #28]
 80124dc:	2a09      	cmp	r2, #9
 80124de:	d849      	bhi.n	8012574 <_dtoa_r+0x28c>
 80124e0:	2a05      	cmp	r2, #5
 80124e2:	bfc4      	itt	gt
 80124e4:	3a04      	subgt	r2, #4
 80124e6:	9207      	strgt	r2, [sp, #28]
 80124e8:	9a07      	ldr	r2, [sp, #28]
 80124ea:	f1a2 0202 	sub.w	r2, r2, #2
 80124ee:	bfcc      	ite	gt
 80124f0:	2400      	movgt	r4, #0
 80124f2:	2401      	movle	r4, #1
 80124f4:	2a03      	cmp	r2, #3
 80124f6:	d848      	bhi.n	801258a <_dtoa_r+0x2a2>
 80124f8:	e8df f002 	tbb	[pc, r2]
 80124fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8012500:	9b05      	ldr	r3, [sp, #20]
 8012502:	2200      	movs	r2, #0
 8012504:	eba3 030b 	sub.w	r3, r3, fp
 8012508:	9305      	str	r3, [sp, #20]
 801250a:	920e      	str	r2, [sp, #56]	; 0x38
 801250c:	f1cb 0300 	rsb	r3, fp, #0
 8012510:	e7e3      	b.n	80124da <_dtoa_r+0x1f2>
 8012512:	2200      	movs	r2, #0
 8012514:	9208      	str	r2, [sp, #32]
 8012516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012518:	2a00      	cmp	r2, #0
 801251a:	dc39      	bgt.n	8012590 <_dtoa_r+0x2a8>
 801251c:	f04f 0a01 	mov.w	sl, #1
 8012520:	46d1      	mov	r9, sl
 8012522:	4652      	mov	r2, sl
 8012524:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012528:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801252a:	2100      	movs	r1, #0
 801252c:	6079      	str	r1, [r7, #4]
 801252e:	2004      	movs	r0, #4
 8012530:	f100 0c14 	add.w	ip, r0, #20
 8012534:	4594      	cmp	ip, r2
 8012536:	6879      	ldr	r1, [r7, #4]
 8012538:	d92f      	bls.n	801259a <_dtoa_r+0x2b2>
 801253a:	4630      	mov	r0, r6
 801253c:	930c      	str	r3, [sp, #48]	; 0x30
 801253e:	f000 fe8f 	bl	8013260 <_Balloc>
 8012542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012544:	9000      	str	r0, [sp, #0]
 8012546:	4602      	mov	r2, r0
 8012548:	2800      	cmp	r0, #0
 801254a:	d149      	bne.n	80125e0 <_dtoa_r+0x2f8>
 801254c:	4b23      	ldr	r3, [pc, #140]	; (80125dc <_dtoa_r+0x2f4>)
 801254e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012552:	e6df      	b.n	8012314 <_dtoa_r+0x2c>
 8012554:	2201      	movs	r2, #1
 8012556:	e7dd      	b.n	8012514 <_dtoa_r+0x22c>
 8012558:	2200      	movs	r2, #0
 801255a:	9208      	str	r2, [sp, #32]
 801255c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801255e:	eb0b 0a02 	add.w	sl, fp, r2
 8012562:	f10a 0901 	add.w	r9, sl, #1
 8012566:	464a      	mov	r2, r9
 8012568:	2a01      	cmp	r2, #1
 801256a:	bfb8      	it	lt
 801256c:	2201      	movlt	r2, #1
 801256e:	e7db      	b.n	8012528 <_dtoa_r+0x240>
 8012570:	2201      	movs	r2, #1
 8012572:	e7f2      	b.n	801255a <_dtoa_r+0x272>
 8012574:	2401      	movs	r4, #1
 8012576:	2200      	movs	r2, #0
 8012578:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801257c:	f04f 3aff 	mov.w	sl, #4294967295
 8012580:	2100      	movs	r1, #0
 8012582:	46d1      	mov	r9, sl
 8012584:	2212      	movs	r2, #18
 8012586:	9109      	str	r1, [sp, #36]	; 0x24
 8012588:	e7ce      	b.n	8012528 <_dtoa_r+0x240>
 801258a:	2201      	movs	r2, #1
 801258c:	9208      	str	r2, [sp, #32]
 801258e:	e7f5      	b.n	801257c <_dtoa_r+0x294>
 8012590:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8012594:	46d1      	mov	r9, sl
 8012596:	4652      	mov	r2, sl
 8012598:	e7c6      	b.n	8012528 <_dtoa_r+0x240>
 801259a:	3101      	adds	r1, #1
 801259c:	6079      	str	r1, [r7, #4]
 801259e:	0040      	lsls	r0, r0, #1
 80125a0:	e7c6      	b.n	8012530 <_dtoa_r+0x248>
 80125a2:	bf00      	nop
 80125a4:	f3af 8000 	nop.w
 80125a8:	636f4361 	.word	0x636f4361
 80125ac:	3fd287a7 	.word	0x3fd287a7
 80125b0:	8b60c8b3 	.word	0x8b60c8b3
 80125b4:	3fc68a28 	.word	0x3fc68a28
 80125b8:	509f79fb 	.word	0x509f79fb
 80125bc:	3fd34413 	.word	0x3fd34413
 80125c0:	08015c05 	.word	0x08015c05
 80125c4:	08015c1c 	.word	0x08015c1c
 80125c8:	7ff00000 	.word	0x7ff00000
 80125cc:	08015c01 	.word	0x08015c01
 80125d0:	08015bf8 	.word	0x08015bf8
 80125d4:	08015bd5 	.word	0x08015bd5
 80125d8:	08015d78 	.word	0x08015d78
 80125dc:	08015c7b 	.word	0x08015c7b
 80125e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80125e2:	9900      	ldr	r1, [sp, #0]
 80125e4:	6011      	str	r1, [r2, #0]
 80125e6:	f1b9 0f0e 	cmp.w	r9, #14
 80125ea:	d872      	bhi.n	80126d2 <_dtoa_r+0x3ea>
 80125ec:	2c00      	cmp	r4, #0
 80125ee:	d070      	beq.n	80126d2 <_dtoa_r+0x3ea>
 80125f0:	f1bb 0f00 	cmp.w	fp, #0
 80125f4:	f340 80a6 	ble.w	8012744 <_dtoa_r+0x45c>
 80125f8:	49ca      	ldr	r1, [pc, #808]	; (8012924 <_dtoa_r+0x63c>)
 80125fa:	f00b 020f 	and.w	r2, fp, #15
 80125fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012602:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012606:	ed92 7b00 	vldr	d7, [r2]
 801260a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801260e:	f000 808d 	beq.w	801272c <_dtoa_r+0x444>
 8012612:	4ac5      	ldr	r2, [pc, #788]	; (8012928 <_dtoa_r+0x640>)
 8012614:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012618:	ed92 6b08 	vldr	d6, [r2, #32]
 801261c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012620:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012624:	f001 010f 	and.w	r1, r1, #15
 8012628:	2203      	movs	r2, #3
 801262a:	48bf      	ldr	r0, [pc, #764]	; (8012928 <_dtoa_r+0x640>)
 801262c:	2900      	cmp	r1, #0
 801262e:	d17f      	bne.n	8012730 <_dtoa_r+0x448>
 8012630:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012634:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012638:	ed8d 7b02 	vstr	d7, [sp, #8]
 801263c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801263e:	2900      	cmp	r1, #0
 8012640:	f000 80b2 	beq.w	80127a8 <_dtoa_r+0x4c0>
 8012644:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012648:	ed9d 7b02 	vldr	d7, [sp, #8]
 801264c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012654:	f140 80a8 	bpl.w	80127a8 <_dtoa_r+0x4c0>
 8012658:	f1b9 0f00 	cmp.w	r9, #0
 801265c:	f000 80a4 	beq.w	80127a8 <_dtoa_r+0x4c0>
 8012660:	f1ba 0f00 	cmp.w	sl, #0
 8012664:	dd31      	ble.n	80126ca <_dtoa_r+0x3e2>
 8012666:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801266a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801266e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012672:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012676:	3201      	adds	r2, #1
 8012678:	4650      	mov	r0, sl
 801267a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801267e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012682:	ee07 2a90 	vmov	s15, r2
 8012686:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801268a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801268e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012692:	9c03      	ldr	r4, [sp, #12]
 8012694:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012698:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801269c:	2800      	cmp	r0, #0
 801269e:	f040 8086 	bne.w	80127ae <_dtoa_r+0x4c6>
 80126a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80126a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80126aa:	ec42 1b17 	vmov	d7, r1, r2
 80126ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80126b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b6:	f300 8272 	bgt.w	8012b9e <_dtoa_r+0x8b6>
 80126ba:	eeb1 7b47 	vneg.f64	d7, d7
 80126be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80126c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c6:	f100 8267 	bmi.w	8012b98 <_dtoa_r+0x8b0>
 80126ca:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80126ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80126d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80126d4:	2a00      	cmp	r2, #0
 80126d6:	f2c0 8129 	blt.w	801292c <_dtoa_r+0x644>
 80126da:	f1bb 0f0e 	cmp.w	fp, #14
 80126de:	f300 8125 	bgt.w	801292c <_dtoa_r+0x644>
 80126e2:	4b90      	ldr	r3, [pc, #576]	; (8012924 <_dtoa_r+0x63c>)
 80126e4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80126e8:	ed93 6b00 	vldr	d6, [r3]
 80126ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	f280 80c3 	bge.w	801287a <_dtoa_r+0x592>
 80126f4:	f1b9 0f00 	cmp.w	r9, #0
 80126f8:	f300 80bf 	bgt.w	801287a <_dtoa_r+0x592>
 80126fc:	f040 824c 	bne.w	8012b98 <_dtoa_r+0x8b0>
 8012700:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012704:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012708:	ed9d 7b02 	vldr	d7, [sp, #8]
 801270c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012714:	464c      	mov	r4, r9
 8012716:	464f      	mov	r7, r9
 8012718:	f280 8222 	bge.w	8012b60 <_dtoa_r+0x878>
 801271c:	f8dd 8000 	ldr.w	r8, [sp]
 8012720:	2331      	movs	r3, #49	; 0x31
 8012722:	f808 3b01 	strb.w	r3, [r8], #1
 8012726:	f10b 0b01 	add.w	fp, fp, #1
 801272a:	e21e      	b.n	8012b6a <_dtoa_r+0x882>
 801272c:	2202      	movs	r2, #2
 801272e:	e77c      	b.n	801262a <_dtoa_r+0x342>
 8012730:	07cc      	lsls	r4, r1, #31
 8012732:	d504      	bpl.n	801273e <_dtoa_r+0x456>
 8012734:	ed90 6b00 	vldr	d6, [r0]
 8012738:	3201      	adds	r2, #1
 801273a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801273e:	1049      	asrs	r1, r1, #1
 8012740:	3008      	adds	r0, #8
 8012742:	e773      	b.n	801262c <_dtoa_r+0x344>
 8012744:	d02e      	beq.n	80127a4 <_dtoa_r+0x4bc>
 8012746:	f1cb 0100 	rsb	r1, fp, #0
 801274a:	4a76      	ldr	r2, [pc, #472]	; (8012924 <_dtoa_r+0x63c>)
 801274c:	f001 000f 	and.w	r0, r1, #15
 8012750:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012754:	ed92 7b00 	vldr	d7, [r2]
 8012758:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801275c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012760:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012764:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8012768:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801276c:	486e      	ldr	r0, [pc, #440]	; (8012928 <_dtoa_r+0x640>)
 801276e:	1109      	asrs	r1, r1, #4
 8012770:	2400      	movs	r4, #0
 8012772:	2202      	movs	r2, #2
 8012774:	b939      	cbnz	r1, 8012786 <_dtoa_r+0x49e>
 8012776:	2c00      	cmp	r4, #0
 8012778:	f43f af60 	beq.w	801263c <_dtoa_r+0x354>
 801277c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012784:	e75a      	b.n	801263c <_dtoa_r+0x354>
 8012786:	07cf      	lsls	r7, r1, #31
 8012788:	d509      	bpl.n	801279e <_dtoa_r+0x4b6>
 801278a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801278e:	ed90 7b00 	vldr	d7, [r0]
 8012792:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012796:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801279a:	3201      	adds	r2, #1
 801279c:	2401      	movs	r4, #1
 801279e:	1049      	asrs	r1, r1, #1
 80127a0:	3008      	adds	r0, #8
 80127a2:	e7e7      	b.n	8012774 <_dtoa_r+0x48c>
 80127a4:	2202      	movs	r2, #2
 80127a6:	e749      	b.n	801263c <_dtoa_r+0x354>
 80127a8:	465f      	mov	r7, fp
 80127aa:	4648      	mov	r0, r9
 80127ac:	e765      	b.n	801267a <_dtoa_r+0x392>
 80127ae:	ec42 1b17 	vmov	d7, r1, r2
 80127b2:	4a5c      	ldr	r2, [pc, #368]	; (8012924 <_dtoa_r+0x63c>)
 80127b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80127b8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80127bc:	9a00      	ldr	r2, [sp, #0]
 80127be:	1814      	adds	r4, r2, r0
 80127c0:	9a08      	ldr	r2, [sp, #32]
 80127c2:	b352      	cbz	r2, 801281a <_dtoa_r+0x532>
 80127c4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80127c8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80127cc:	f8dd 8000 	ldr.w	r8, [sp]
 80127d0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80127d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80127d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80127dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80127e0:	ee14 2a90 	vmov	r2, s9
 80127e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80127e8:	3230      	adds	r2, #48	; 0x30
 80127ea:	ee36 6b45 	vsub.f64	d6, d6, d5
 80127ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80127f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f6:	f808 2b01 	strb.w	r2, [r8], #1
 80127fa:	d439      	bmi.n	8012870 <_dtoa_r+0x588>
 80127fc:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012800:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012808:	d472      	bmi.n	80128f0 <_dtoa_r+0x608>
 801280a:	45a0      	cmp	r8, r4
 801280c:	f43f af5d 	beq.w	80126ca <_dtoa_r+0x3e2>
 8012810:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012814:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012818:	e7e0      	b.n	80127dc <_dtoa_r+0x4f4>
 801281a:	f8dd 8000 	ldr.w	r8, [sp]
 801281e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012822:	4621      	mov	r1, r4
 8012824:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012828:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801282c:	ee14 2a90 	vmov	r2, s9
 8012830:	3230      	adds	r2, #48	; 0x30
 8012832:	f808 2b01 	strb.w	r2, [r8], #1
 8012836:	45a0      	cmp	r8, r4
 8012838:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801283c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012840:	d118      	bne.n	8012874 <_dtoa_r+0x58c>
 8012842:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012846:	ee37 4b05 	vadd.f64	d4, d7, d5
 801284a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012852:	dc4d      	bgt.n	80128f0 <_dtoa_r+0x608>
 8012854:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012858:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012860:	f57f af33 	bpl.w	80126ca <_dtoa_r+0x3e2>
 8012864:	4688      	mov	r8, r1
 8012866:	3901      	subs	r1, #1
 8012868:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801286c:	2b30      	cmp	r3, #48	; 0x30
 801286e:	d0f9      	beq.n	8012864 <_dtoa_r+0x57c>
 8012870:	46bb      	mov	fp, r7
 8012872:	e02a      	b.n	80128ca <_dtoa_r+0x5e2>
 8012874:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012878:	e7d6      	b.n	8012828 <_dtoa_r+0x540>
 801287a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801287e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012882:	f8dd 8000 	ldr.w	r8, [sp]
 8012886:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801288a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801288e:	ee15 3a10 	vmov	r3, s10
 8012892:	3330      	adds	r3, #48	; 0x30
 8012894:	f808 3b01 	strb.w	r3, [r8], #1
 8012898:	9b00      	ldr	r3, [sp, #0]
 801289a:	eba8 0303 	sub.w	r3, r8, r3
 801289e:	4599      	cmp	r9, r3
 80128a0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80128a4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80128a8:	d133      	bne.n	8012912 <_dtoa_r+0x62a>
 80128aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80128ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80128b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b6:	dc1a      	bgt.n	80128ee <_dtoa_r+0x606>
 80128b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80128bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c0:	d103      	bne.n	80128ca <_dtoa_r+0x5e2>
 80128c2:	ee15 3a10 	vmov	r3, s10
 80128c6:	07d9      	lsls	r1, r3, #31
 80128c8:	d411      	bmi.n	80128ee <_dtoa_r+0x606>
 80128ca:	4629      	mov	r1, r5
 80128cc:	4630      	mov	r0, r6
 80128ce:	f000 fd07 	bl	80132e0 <_Bfree>
 80128d2:	2300      	movs	r3, #0
 80128d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80128d6:	f888 3000 	strb.w	r3, [r8]
 80128da:	f10b 0301 	add.w	r3, fp, #1
 80128de:	6013      	str	r3, [r2, #0]
 80128e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	f43f ad4d 	beq.w	8012382 <_dtoa_r+0x9a>
 80128e8:	f8c3 8000 	str.w	r8, [r3]
 80128ec:	e549      	b.n	8012382 <_dtoa_r+0x9a>
 80128ee:	465f      	mov	r7, fp
 80128f0:	4643      	mov	r3, r8
 80128f2:	4698      	mov	r8, r3
 80128f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80128f8:	2a39      	cmp	r2, #57	; 0x39
 80128fa:	d106      	bne.n	801290a <_dtoa_r+0x622>
 80128fc:	9a00      	ldr	r2, [sp, #0]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d1f7      	bne.n	80128f2 <_dtoa_r+0x60a>
 8012902:	9900      	ldr	r1, [sp, #0]
 8012904:	2230      	movs	r2, #48	; 0x30
 8012906:	3701      	adds	r7, #1
 8012908:	700a      	strb	r2, [r1, #0]
 801290a:	781a      	ldrb	r2, [r3, #0]
 801290c:	3201      	adds	r2, #1
 801290e:	701a      	strb	r2, [r3, #0]
 8012910:	e7ae      	b.n	8012870 <_dtoa_r+0x588>
 8012912:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012916:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291e:	d1b2      	bne.n	8012886 <_dtoa_r+0x59e>
 8012920:	e7d3      	b.n	80128ca <_dtoa_r+0x5e2>
 8012922:	bf00      	nop
 8012924:	08015d78 	.word	0x08015d78
 8012928:	08015d50 	.word	0x08015d50
 801292c:	9908      	ldr	r1, [sp, #32]
 801292e:	2900      	cmp	r1, #0
 8012930:	f000 80d1 	beq.w	8012ad6 <_dtoa_r+0x7ee>
 8012934:	9907      	ldr	r1, [sp, #28]
 8012936:	2901      	cmp	r1, #1
 8012938:	f300 80b4 	bgt.w	8012aa4 <_dtoa_r+0x7bc>
 801293c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801293e:	2900      	cmp	r1, #0
 8012940:	f000 80ac 	beq.w	8012a9c <_dtoa_r+0x7b4>
 8012944:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012948:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801294c:	461c      	mov	r4, r3
 801294e:	930a      	str	r3, [sp, #40]	; 0x28
 8012950:	9b05      	ldr	r3, [sp, #20]
 8012952:	4413      	add	r3, r2
 8012954:	9305      	str	r3, [sp, #20]
 8012956:	9b06      	ldr	r3, [sp, #24]
 8012958:	2101      	movs	r1, #1
 801295a:	4413      	add	r3, r2
 801295c:	4630      	mov	r0, r6
 801295e:	9306      	str	r3, [sp, #24]
 8012960:	f000 fd7a 	bl	8013458 <__i2b>
 8012964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012966:	4607      	mov	r7, r0
 8012968:	f1b8 0f00 	cmp.w	r8, #0
 801296c:	dd0d      	ble.n	801298a <_dtoa_r+0x6a2>
 801296e:	9a06      	ldr	r2, [sp, #24]
 8012970:	2a00      	cmp	r2, #0
 8012972:	dd0a      	ble.n	801298a <_dtoa_r+0x6a2>
 8012974:	4542      	cmp	r2, r8
 8012976:	9905      	ldr	r1, [sp, #20]
 8012978:	bfa8      	it	ge
 801297a:	4642      	movge	r2, r8
 801297c:	1a89      	subs	r1, r1, r2
 801297e:	9105      	str	r1, [sp, #20]
 8012980:	9906      	ldr	r1, [sp, #24]
 8012982:	eba8 0802 	sub.w	r8, r8, r2
 8012986:	1a8a      	subs	r2, r1, r2
 8012988:	9206      	str	r2, [sp, #24]
 801298a:	b303      	cbz	r3, 80129ce <_dtoa_r+0x6e6>
 801298c:	9a08      	ldr	r2, [sp, #32]
 801298e:	2a00      	cmp	r2, #0
 8012990:	f000 80a6 	beq.w	8012ae0 <_dtoa_r+0x7f8>
 8012994:	2c00      	cmp	r4, #0
 8012996:	dd13      	ble.n	80129c0 <_dtoa_r+0x6d8>
 8012998:	4639      	mov	r1, r7
 801299a:	4622      	mov	r2, r4
 801299c:	4630      	mov	r0, r6
 801299e:	930c      	str	r3, [sp, #48]	; 0x30
 80129a0:	f000 fe16 	bl	80135d0 <__pow5mult>
 80129a4:	462a      	mov	r2, r5
 80129a6:	4601      	mov	r1, r0
 80129a8:	4607      	mov	r7, r0
 80129aa:	4630      	mov	r0, r6
 80129ac:	f000 fd6a 	bl	8013484 <__multiply>
 80129b0:	4629      	mov	r1, r5
 80129b2:	900a      	str	r0, [sp, #40]	; 0x28
 80129b4:	4630      	mov	r0, r6
 80129b6:	f000 fc93 	bl	80132e0 <_Bfree>
 80129ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129be:	4615      	mov	r5, r2
 80129c0:	1b1a      	subs	r2, r3, r4
 80129c2:	d004      	beq.n	80129ce <_dtoa_r+0x6e6>
 80129c4:	4629      	mov	r1, r5
 80129c6:	4630      	mov	r0, r6
 80129c8:	f000 fe02 	bl	80135d0 <__pow5mult>
 80129cc:	4605      	mov	r5, r0
 80129ce:	2101      	movs	r1, #1
 80129d0:	4630      	mov	r0, r6
 80129d2:	f000 fd41 	bl	8013458 <__i2b>
 80129d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129d8:	2b00      	cmp	r3, #0
 80129da:	4604      	mov	r4, r0
 80129dc:	f340 8082 	ble.w	8012ae4 <_dtoa_r+0x7fc>
 80129e0:	461a      	mov	r2, r3
 80129e2:	4601      	mov	r1, r0
 80129e4:	4630      	mov	r0, r6
 80129e6:	f000 fdf3 	bl	80135d0 <__pow5mult>
 80129ea:	9b07      	ldr	r3, [sp, #28]
 80129ec:	2b01      	cmp	r3, #1
 80129ee:	4604      	mov	r4, r0
 80129f0:	dd7b      	ble.n	8012aea <_dtoa_r+0x802>
 80129f2:	2300      	movs	r3, #0
 80129f4:	930a      	str	r3, [sp, #40]	; 0x28
 80129f6:	6922      	ldr	r2, [r4, #16]
 80129f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80129fc:	6910      	ldr	r0, [r2, #16]
 80129fe:	f000 fcdb 	bl	80133b8 <__hi0bits>
 8012a02:	f1c0 0020 	rsb	r0, r0, #32
 8012a06:	9b06      	ldr	r3, [sp, #24]
 8012a08:	4418      	add	r0, r3
 8012a0a:	f010 001f 	ands.w	r0, r0, #31
 8012a0e:	f000 808d 	beq.w	8012b2c <_dtoa_r+0x844>
 8012a12:	f1c0 0220 	rsb	r2, r0, #32
 8012a16:	2a04      	cmp	r2, #4
 8012a18:	f340 8086 	ble.w	8012b28 <_dtoa_r+0x840>
 8012a1c:	f1c0 001c 	rsb	r0, r0, #28
 8012a20:	9b05      	ldr	r3, [sp, #20]
 8012a22:	4403      	add	r3, r0
 8012a24:	9305      	str	r3, [sp, #20]
 8012a26:	9b06      	ldr	r3, [sp, #24]
 8012a28:	4403      	add	r3, r0
 8012a2a:	4480      	add	r8, r0
 8012a2c:	9306      	str	r3, [sp, #24]
 8012a2e:	9b05      	ldr	r3, [sp, #20]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	dd05      	ble.n	8012a40 <_dtoa_r+0x758>
 8012a34:	4629      	mov	r1, r5
 8012a36:	461a      	mov	r2, r3
 8012a38:	4630      	mov	r0, r6
 8012a3a:	f000 fe23 	bl	8013684 <__lshift>
 8012a3e:	4605      	mov	r5, r0
 8012a40:	9b06      	ldr	r3, [sp, #24]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	dd05      	ble.n	8012a52 <_dtoa_r+0x76a>
 8012a46:	4621      	mov	r1, r4
 8012a48:	461a      	mov	r2, r3
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	f000 fe1a 	bl	8013684 <__lshift>
 8012a50:	4604      	mov	r4, r0
 8012a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d06b      	beq.n	8012b30 <_dtoa_r+0x848>
 8012a58:	4621      	mov	r1, r4
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	f000 fe7e 	bl	801375c <__mcmp>
 8012a60:	2800      	cmp	r0, #0
 8012a62:	da65      	bge.n	8012b30 <_dtoa_r+0x848>
 8012a64:	2300      	movs	r3, #0
 8012a66:	4629      	mov	r1, r5
 8012a68:	220a      	movs	r2, #10
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	f000 fc5a 	bl	8013324 <__multadd>
 8012a70:	9b08      	ldr	r3, [sp, #32]
 8012a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012a76:	4605      	mov	r5, r0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 8192 	beq.w	8012da2 <_dtoa_r+0xaba>
 8012a7e:	4639      	mov	r1, r7
 8012a80:	2300      	movs	r3, #0
 8012a82:	220a      	movs	r2, #10
 8012a84:	4630      	mov	r0, r6
 8012a86:	f000 fc4d 	bl	8013324 <__multadd>
 8012a8a:	f1ba 0f00 	cmp.w	sl, #0
 8012a8e:	4607      	mov	r7, r0
 8012a90:	f300 808e 	bgt.w	8012bb0 <_dtoa_r+0x8c8>
 8012a94:	9b07      	ldr	r3, [sp, #28]
 8012a96:	2b02      	cmp	r3, #2
 8012a98:	dc51      	bgt.n	8012b3e <_dtoa_r+0x856>
 8012a9a:	e089      	b.n	8012bb0 <_dtoa_r+0x8c8>
 8012a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012aa2:	e751      	b.n	8012948 <_dtoa_r+0x660>
 8012aa4:	f109 34ff 	add.w	r4, r9, #4294967295
 8012aa8:	42a3      	cmp	r3, r4
 8012aaa:	bfbf      	itttt	lt
 8012aac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8012aae:	1ae3      	sublt	r3, r4, r3
 8012ab0:	18d2      	addlt	r2, r2, r3
 8012ab2:	4613      	movlt	r3, r2
 8012ab4:	bfb7      	itett	lt
 8012ab6:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012ab8:	1b1c      	subge	r4, r3, r4
 8012aba:	4623      	movlt	r3, r4
 8012abc:	2400      	movlt	r4, #0
 8012abe:	f1b9 0f00 	cmp.w	r9, #0
 8012ac2:	bfb5      	itete	lt
 8012ac4:	9a05      	ldrlt	r2, [sp, #20]
 8012ac6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8012aca:	eba2 0809 	sublt.w	r8, r2, r9
 8012ace:	464a      	movge	r2, r9
 8012ad0:	bfb8      	it	lt
 8012ad2:	2200      	movlt	r2, #0
 8012ad4:	e73b      	b.n	801294e <_dtoa_r+0x666>
 8012ad6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012ada:	9f08      	ldr	r7, [sp, #32]
 8012adc:	461c      	mov	r4, r3
 8012ade:	e743      	b.n	8012968 <_dtoa_r+0x680>
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	e76f      	b.n	80129c4 <_dtoa_r+0x6dc>
 8012ae4:	9b07      	ldr	r3, [sp, #28]
 8012ae6:	2b01      	cmp	r3, #1
 8012ae8:	dc18      	bgt.n	8012b1c <_dtoa_r+0x834>
 8012aea:	9b02      	ldr	r3, [sp, #8]
 8012aec:	b9b3      	cbnz	r3, 8012b1c <_dtoa_r+0x834>
 8012aee:	9b03      	ldr	r3, [sp, #12]
 8012af0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012af4:	b9a2      	cbnz	r2, 8012b20 <_dtoa_r+0x838>
 8012af6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012afa:	0d12      	lsrs	r2, r2, #20
 8012afc:	0512      	lsls	r2, r2, #20
 8012afe:	b18a      	cbz	r2, 8012b24 <_dtoa_r+0x83c>
 8012b00:	9b05      	ldr	r3, [sp, #20]
 8012b02:	3301      	adds	r3, #1
 8012b04:	9305      	str	r3, [sp, #20]
 8012b06:	9b06      	ldr	r3, [sp, #24]
 8012b08:	3301      	adds	r3, #1
 8012b0a:	9306      	str	r3, [sp, #24]
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8012b10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	f47f af6f 	bne.w	80129f6 <_dtoa_r+0x70e>
 8012b18:	2001      	movs	r0, #1
 8012b1a:	e774      	b.n	8012a06 <_dtoa_r+0x71e>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	e7f6      	b.n	8012b0e <_dtoa_r+0x826>
 8012b20:	9b02      	ldr	r3, [sp, #8]
 8012b22:	e7f4      	b.n	8012b0e <_dtoa_r+0x826>
 8012b24:	920a      	str	r2, [sp, #40]	; 0x28
 8012b26:	e7f3      	b.n	8012b10 <_dtoa_r+0x828>
 8012b28:	d081      	beq.n	8012a2e <_dtoa_r+0x746>
 8012b2a:	4610      	mov	r0, r2
 8012b2c:	301c      	adds	r0, #28
 8012b2e:	e777      	b.n	8012a20 <_dtoa_r+0x738>
 8012b30:	f1b9 0f00 	cmp.w	r9, #0
 8012b34:	dc37      	bgt.n	8012ba6 <_dtoa_r+0x8be>
 8012b36:	9b07      	ldr	r3, [sp, #28]
 8012b38:	2b02      	cmp	r3, #2
 8012b3a:	dd34      	ble.n	8012ba6 <_dtoa_r+0x8be>
 8012b3c:	46ca      	mov	sl, r9
 8012b3e:	f1ba 0f00 	cmp.w	sl, #0
 8012b42:	d10d      	bne.n	8012b60 <_dtoa_r+0x878>
 8012b44:	4621      	mov	r1, r4
 8012b46:	4653      	mov	r3, sl
 8012b48:	2205      	movs	r2, #5
 8012b4a:	4630      	mov	r0, r6
 8012b4c:	f000 fbea 	bl	8013324 <__multadd>
 8012b50:	4601      	mov	r1, r0
 8012b52:	4604      	mov	r4, r0
 8012b54:	4628      	mov	r0, r5
 8012b56:	f000 fe01 	bl	801375c <__mcmp>
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	f73f adde 	bgt.w	801271c <_dtoa_r+0x434>
 8012b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b62:	f8dd 8000 	ldr.w	r8, [sp]
 8012b66:	ea6f 0b03 	mvn.w	fp, r3
 8012b6a:	f04f 0900 	mov.w	r9, #0
 8012b6e:	4621      	mov	r1, r4
 8012b70:	4630      	mov	r0, r6
 8012b72:	f000 fbb5 	bl	80132e0 <_Bfree>
 8012b76:	2f00      	cmp	r7, #0
 8012b78:	f43f aea7 	beq.w	80128ca <_dtoa_r+0x5e2>
 8012b7c:	f1b9 0f00 	cmp.w	r9, #0
 8012b80:	d005      	beq.n	8012b8e <_dtoa_r+0x8a6>
 8012b82:	45b9      	cmp	r9, r7
 8012b84:	d003      	beq.n	8012b8e <_dtoa_r+0x8a6>
 8012b86:	4649      	mov	r1, r9
 8012b88:	4630      	mov	r0, r6
 8012b8a:	f000 fba9 	bl	80132e0 <_Bfree>
 8012b8e:	4639      	mov	r1, r7
 8012b90:	4630      	mov	r0, r6
 8012b92:	f000 fba5 	bl	80132e0 <_Bfree>
 8012b96:	e698      	b.n	80128ca <_dtoa_r+0x5e2>
 8012b98:	2400      	movs	r4, #0
 8012b9a:	4627      	mov	r7, r4
 8012b9c:	e7e0      	b.n	8012b60 <_dtoa_r+0x878>
 8012b9e:	46bb      	mov	fp, r7
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	4607      	mov	r7, r0
 8012ba4:	e5ba      	b.n	801271c <_dtoa_r+0x434>
 8012ba6:	9b08      	ldr	r3, [sp, #32]
 8012ba8:	46ca      	mov	sl, r9
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	f000 8100 	beq.w	8012db0 <_dtoa_r+0xac8>
 8012bb0:	f1b8 0f00 	cmp.w	r8, #0
 8012bb4:	dd05      	ble.n	8012bc2 <_dtoa_r+0x8da>
 8012bb6:	4639      	mov	r1, r7
 8012bb8:	4642      	mov	r2, r8
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f000 fd62 	bl	8013684 <__lshift>
 8012bc0:	4607      	mov	r7, r0
 8012bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d05d      	beq.n	8012c84 <_dtoa_r+0x99c>
 8012bc8:	6879      	ldr	r1, [r7, #4]
 8012bca:	4630      	mov	r0, r6
 8012bcc:	f000 fb48 	bl	8013260 <_Balloc>
 8012bd0:	4680      	mov	r8, r0
 8012bd2:	b928      	cbnz	r0, 8012be0 <_dtoa_r+0x8f8>
 8012bd4:	4b82      	ldr	r3, [pc, #520]	; (8012de0 <_dtoa_r+0xaf8>)
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012bdc:	f7ff bb9a 	b.w	8012314 <_dtoa_r+0x2c>
 8012be0:	693a      	ldr	r2, [r7, #16]
 8012be2:	3202      	adds	r2, #2
 8012be4:	0092      	lsls	r2, r2, #2
 8012be6:	f107 010c 	add.w	r1, r7, #12
 8012bea:	300c      	adds	r0, #12
 8012bec:	f000 fb2a 	bl	8013244 <memcpy>
 8012bf0:	2201      	movs	r2, #1
 8012bf2:	4641      	mov	r1, r8
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	f000 fd45 	bl	8013684 <__lshift>
 8012bfa:	9b00      	ldr	r3, [sp, #0]
 8012bfc:	3301      	adds	r3, #1
 8012bfe:	9305      	str	r3, [sp, #20]
 8012c00:	9b00      	ldr	r3, [sp, #0]
 8012c02:	4453      	add	r3, sl
 8012c04:	9309      	str	r3, [sp, #36]	; 0x24
 8012c06:	9b02      	ldr	r3, [sp, #8]
 8012c08:	f003 0301 	and.w	r3, r3, #1
 8012c0c:	46b9      	mov	r9, r7
 8012c0e:	9308      	str	r3, [sp, #32]
 8012c10:	4607      	mov	r7, r0
 8012c12:	9b05      	ldr	r3, [sp, #20]
 8012c14:	4621      	mov	r1, r4
 8012c16:	3b01      	subs	r3, #1
 8012c18:	4628      	mov	r0, r5
 8012c1a:	9302      	str	r3, [sp, #8]
 8012c1c:	f7ff fad8 	bl	80121d0 <quorem>
 8012c20:	4603      	mov	r3, r0
 8012c22:	3330      	adds	r3, #48	; 0x30
 8012c24:	9006      	str	r0, [sp, #24]
 8012c26:	4649      	mov	r1, r9
 8012c28:	4628      	mov	r0, r5
 8012c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8012c2c:	f000 fd96 	bl	801375c <__mcmp>
 8012c30:	463a      	mov	r2, r7
 8012c32:	4682      	mov	sl, r0
 8012c34:	4621      	mov	r1, r4
 8012c36:	4630      	mov	r0, r6
 8012c38:	f000 fdac 	bl	8013794 <__mdiff>
 8012c3c:	68c2      	ldr	r2, [r0, #12]
 8012c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c40:	4680      	mov	r8, r0
 8012c42:	bb0a      	cbnz	r2, 8012c88 <_dtoa_r+0x9a0>
 8012c44:	4601      	mov	r1, r0
 8012c46:	4628      	mov	r0, r5
 8012c48:	f000 fd88 	bl	801375c <__mcmp>
 8012c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c4e:	4602      	mov	r2, r0
 8012c50:	4641      	mov	r1, r8
 8012c52:	4630      	mov	r0, r6
 8012c54:	920e      	str	r2, [sp, #56]	; 0x38
 8012c56:	930a      	str	r3, [sp, #40]	; 0x28
 8012c58:	f000 fb42 	bl	80132e0 <_Bfree>
 8012c5c:	9b07      	ldr	r3, [sp, #28]
 8012c5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c60:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012c64:	ea43 0102 	orr.w	r1, r3, r2
 8012c68:	9b08      	ldr	r3, [sp, #32]
 8012c6a:	430b      	orrs	r3, r1
 8012c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c6e:	d10d      	bne.n	8012c8c <_dtoa_r+0x9a4>
 8012c70:	2b39      	cmp	r3, #57	; 0x39
 8012c72:	d029      	beq.n	8012cc8 <_dtoa_r+0x9e0>
 8012c74:	f1ba 0f00 	cmp.w	sl, #0
 8012c78:	dd01      	ble.n	8012c7e <_dtoa_r+0x996>
 8012c7a:	9b06      	ldr	r3, [sp, #24]
 8012c7c:	3331      	adds	r3, #49	; 0x31
 8012c7e:	9a02      	ldr	r2, [sp, #8]
 8012c80:	7013      	strb	r3, [r2, #0]
 8012c82:	e774      	b.n	8012b6e <_dtoa_r+0x886>
 8012c84:	4638      	mov	r0, r7
 8012c86:	e7b8      	b.n	8012bfa <_dtoa_r+0x912>
 8012c88:	2201      	movs	r2, #1
 8012c8a:	e7e1      	b.n	8012c50 <_dtoa_r+0x968>
 8012c8c:	f1ba 0f00 	cmp.w	sl, #0
 8012c90:	db06      	blt.n	8012ca0 <_dtoa_r+0x9b8>
 8012c92:	9907      	ldr	r1, [sp, #28]
 8012c94:	ea41 0a0a 	orr.w	sl, r1, sl
 8012c98:	9908      	ldr	r1, [sp, #32]
 8012c9a:	ea5a 0101 	orrs.w	r1, sl, r1
 8012c9e:	d120      	bne.n	8012ce2 <_dtoa_r+0x9fa>
 8012ca0:	2a00      	cmp	r2, #0
 8012ca2:	ddec      	ble.n	8012c7e <_dtoa_r+0x996>
 8012ca4:	4629      	mov	r1, r5
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	4630      	mov	r0, r6
 8012caa:	9305      	str	r3, [sp, #20]
 8012cac:	f000 fcea 	bl	8013684 <__lshift>
 8012cb0:	4621      	mov	r1, r4
 8012cb2:	4605      	mov	r5, r0
 8012cb4:	f000 fd52 	bl	801375c <__mcmp>
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	9b05      	ldr	r3, [sp, #20]
 8012cbc:	dc02      	bgt.n	8012cc4 <_dtoa_r+0x9dc>
 8012cbe:	d1de      	bne.n	8012c7e <_dtoa_r+0x996>
 8012cc0:	07da      	lsls	r2, r3, #31
 8012cc2:	d5dc      	bpl.n	8012c7e <_dtoa_r+0x996>
 8012cc4:	2b39      	cmp	r3, #57	; 0x39
 8012cc6:	d1d8      	bne.n	8012c7a <_dtoa_r+0x992>
 8012cc8:	9a02      	ldr	r2, [sp, #8]
 8012cca:	2339      	movs	r3, #57	; 0x39
 8012ccc:	7013      	strb	r3, [r2, #0]
 8012cce:	4643      	mov	r3, r8
 8012cd0:	4698      	mov	r8, r3
 8012cd2:	3b01      	subs	r3, #1
 8012cd4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012cd8:	2a39      	cmp	r2, #57	; 0x39
 8012cda:	d051      	beq.n	8012d80 <_dtoa_r+0xa98>
 8012cdc:	3201      	adds	r2, #1
 8012cde:	701a      	strb	r2, [r3, #0]
 8012ce0:	e745      	b.n	8012b6e <_dtoa_r+0x886>
 8012ce2:	2a00      	cmp	r2, #0
 8012ce4:	dd03      	ble.n	8012cee <_dtoa_r+0xa06>
 8012ce6:	2b39      	cmp	r3, #57	; 0x39
 8012ce8:	d0ee      	beq.n	8012cc8 <_dtoa_r+0x9e0>
 8012cea:	3301      	adds	r3, #1
 8012cec:	e7c7      	b.n	8012c7e <_dtoa_r+0x996>
 8012cee:	9a05      	ldr	r2, [sp, #20]
 8012cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012cf2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012cf6:	428a      	cmp	r2, r1
 8012cf8:	d02b      	beq.n	8012d52 <_dtoa_r+0xa6a>
 8012cfa:	4629      	mov	r1, r5
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	220a      	movs	r2, #10
 8012d00:	4630      	mov	r0, r6
 8012d02:	f000 fb0f 	bl	8013324 <__multadd>
 8012d06:	45b9      	cmp	r9, r7
 8012d08:	4605      	mov	r5, r0
 8012d0a:	f04f 0300 	mov.w	r3, #0
 8012d0e:	f04f 020a 	mov.w	r2, #10
 8012d12:	4649      	mov	r1, r9
 8012d14:	4630      	mov	r0, r6
 8012d16:	d107      	bne.n	8012d28 <_dtoa_r+0xa40>
 8012d18:	f000 fb04 	bl	8013324 <__multadd>
 8012d1c:	4681      	mov	r9, r0
 8012d1e:	4607      	mov	r7, r0
 8012d20:	9b05      	ldr	r3, [sp, #20]
 8012d22:	3301      	adds	r3, #1
 8012d24:	9305      	str	r3, [sp, #20]
 8012d26:	e774      	b.n	8012c12 <_dtoa_r+0x92a>
 8012d28:	f000 fafc 	bl	8013324 <__multadd>
 8012d2c:	4639      	mov	r1, r7
 8012d2e:	4681      	mov	r9, r0
 8012d30:	2300      	movs	r3, #0
 8012d32:	220a      	movs	r2, #10
 8012d34:	4630      	mov	r0, r6
 8012d36:	f000 faf5 	bl	8013324 <__multadd>
 8012d3a:	4607      	mov	r7, r0
 8012d3c:	e7f0      	b.n	8012d20 <_dtoa_r+0xa38>
 8012d3e:	f1ba 0f00 	cmp.w	sl, #0
 8012d42:	9a00      	ldr	r2, [sp, #0]
 8012d44:	bfcc      	ite	gt
 8012d46:	46d0      	movgt	r8, sl
 8012d48:	f04f 0801 	movle.w	r8, #1
 8012d4c:	4490      	add	r8, r2
 8012d4e:	f04f 0900 	mov.w	r9, #0
 8012d52:	4629      	mov	r1, r5
 8012d54:	2201      	movs	r2, #1
 8012d56:	4630      	mov	r0, r6
 8012d58:	9302      	str	r3, [sp, #8]
 8012d5a:	f000 fc93 	bl	8013684 <__lshift>
 8012d5e:	4621      	mov	r1, r4
 8012d60:	4605      	mov	r5, r0
 8012d62:	f000 fcfb 	bl	801375c <__mcmp>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	dcb1      	bgt.n	8012cce <_dtoa_r+0x9e6>
 8012d6a:	d102      	bne.n	8012d72 <_dtoa_r+0xa8a>
 8012d6c:	9b02      	ldr	r3, [sp, #8]
 8012d6e:	07db      	lsls	r3, r3, #31
 8012d70:	d4ad      	bmi.n	8012cce <_dtoa_r+0x9e6>
 8012d72:	4643      	mov	r3, r8
 8012d74:	4698      	mov	r8, r3
 8012d76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d7a:	2a30      	cmp	r2, #48	; 0x30
 8012d7c:	d0fa      	beq.n	8012d74 <_dtoa_r+0xa8c>
 8012d7e:	e6f6      	b.n	8012b6e <_dtoa_r+0x886>
 8012d80:	9a00      	ldr	r2, [sp, #0]
 8012d82:	429a      	cmp	r2, r3
 8012d84:	d1a4      	bne.n	8012cd0 <_dtoa_r+0x9e8>
 8012d86:	f10b 0b01 	add.w	fp, fp, #1
 8012d8a:	2331      	movs	r3, #49	; 0x31
 8012d8c:	e778      	b.n	8012c80 <_dtoa_r+0x998>
 8012d8e:	4b15      	ldr	r3, [pc, #84]	; (8012de4 <_dtoa_r+0xafc>)
 8012d90:	f7ff bb12 	b.w	80123b8 <_dtoa_r+0xd0>
 8012d94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	f47f aaee 	bne.w	8012378 <_dtoa_r+0x90>
 8012d9c:	4b12      	ldr	r3, [pc, #72]	; (8012de8 <_dtoa_r+0xb00>)
 8012d9e:	f7ff bb0b 	b.w	80123b8 <_dtoa_r+0xd0>
 8012da2:	f1ba 0f00 	cmp.w	sl, #0
 8012da6:	dc03      	bgt.n	8012db0 <_dtoa_r+0xac8>
 8012da8:	9b07      	ldr	r3, [sp, #28]
 8012daa:	2b02      	cmp	r3, #2
 8012dac:	f73f aec7 	bgt.w	8012b3e <_dtoa_r+0x856>
 8012db0:	f8dd 8000 	ldr.w	r8, [sp]
 8012db4:	4621      	mov	r1, r4
 8012db6:	4628      	mov	r0, r5
 8012db8:	f7ff fa0a 	bl	80121d0 <quorem>
 8012dbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012dc0:	f808 3b01 	strb.w	r3, [r8], #1
 8012dc4:	9a00      	ldr	r2, [sp, #0]
 8012dc6:	eba8 0202 	sub.w	r2, r8, r2
 8012dca:	4592      	cmp	sl, r2
 8012dcc:	ddb7      	ble.n	8012d3e <_dtoa_r+0xa56>
 8012dce:	4629      	mov	r1, r5
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	220a      	movs	r2, #10
 8012dd4:	4630      	mov	r0, r6
 8012dd6:	f000 faa5 	bl	8013324 <__multadd>
 8012dda:	4605      	mov	r5, r0
 8012ddc:	e7ea      	b.n	8012db4 <_dtoa_r+0xacc>
 8012dde:	bf00      	nop
 8012de0:	08015c7b 	.word	0x08015c7b
 8012de4:	08015bd4 	.word	0x08015bd4
 8012de8:	08015bf8 	.word	0x08015bf8

08012dec <__sflush_r>:
 8012dec:	898a      	ldrh	r2, [r1, #12]
 8012dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012df2:	4605      	mov	r5, r0
 8012df4:	0710      	lsls	r0, r2, #28
 8012df6:	460c      	mov	r4, r1
 8012df8:	d458      	bmi.n	8012eac <__sflush_r+0xc0>
 8012dfa:	684b      	ldr	r3, [r1, #4]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	dc05      	bgt.n	8012e0c <__sflush_r+0x20>
 8012e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	dc02      	bgt.n	8012e0c <__sflush_r+0x20>
 8012e06:	2000      	movs	r0, #0
 8012e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e0e:	2e00      	cmp	r6, #0
 8012e10:	d0f9      	beq.n	8012e06 <__sflush_r+0x1a>
 8012e12:	2300      	movs	r3, #0
 8012e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e18:	682f      	ldr	r7, [r5, #0]
 8012e1a:	602b      	str	r3, [r5, #0]
 8012e1c:	d032      	beq.n	8012e84 <__sflush_r+0x98>
 8012e1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e20:	89a3      	ldrh	r3, [r4, #12]
 8012e22:	075a      	lsls	r2, r3, #29
 8012e24:	d505      	bpl.n	8012e32 <__sflush_r+0x46>
 8012e26:	6863      	ldr	r3, [r4, #4]
 8012e28:	1ac0      	subs	r0, r0, r3
 8012e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e2c:	b10b      	cbz	r3, 8012e32 <__sflush_r+0x46>
 8012e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e30:	1ac0      	subs	r0, r0, r3
 8012e32:	2300      	movs	r3, #0
 8012e34:	4602      	mov	r2, r0
 8012e36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e38:	6a21      	ldr	r1, [r4, #32]
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	47b0      	blx	r6
 8012e3e:	1c43      	adds	r3, r0, #1
 8012e40:	89a3      	ldrh	r3, [r4, #12]
 8012e42:	d106      	bne.n	8012e52 <__sflush_r+0x66>
 8012e44:	6829      	ldr	r1, [r5, #0]
 8012e46:	291d      	cmp	r1, #29
 8012e48:	d82c      	bhi.n	8012ea4 <__sflush_r+0xb8>
 8012e4a:	4a2a      	ldr	r2, [pc, #168]	; (8012ef4 <__sflush_r+0x108>)
 8012e4c:	40ca      	lsrs	r2, r1
 8012e4e:	07d6      	lsls	r6, r2, #31
 8012e50:	d528      	bpl.n	8012ea4 <__sflush_r+0xb8>
 8012e52:	2200      	movs	r2, #0
 8012e54:	6062      	str	r2, [r4, #4]
 8012e56:	04d9      	lsls	r1, r3, #19
 8012e58:	6922      	ldr	r2, [r4, #16]
 8012e5a:	6022      	str	r2, [r4, #0]
 8012e5c:	d504      	bpl.n	8012e68 <__sflush_r+0x7c>
 8012e5e:	1c42      	adds	r2, r0, #1
 8012e60:	d101      	bne.n	8012e66 <__sflush_r+0x7a>
 8012e62:	682b      	ldr	r3, [r5, #0]
 8012e64:	b903      	cbnz	r3, 8012e68 <__sflush_r+0x7c>
 8012e66:	6560      	str	r0, [r4, #84]	; 0x54
 8012e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e6a:	602f      	str	r7, [r5, #0]
 8012e6c:	2900      	cmp	r1, #0
 8012e6e:	d0ca      	beq.n	8012e06 <__sflush_r+0x1a>
 8012e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e74:	4299      	cmp	r1, r3
 8012e76:	d002      	beq.n	8012e7e <__sflush_r+0x92>
 8012e78:	4628      	mov	r0, r5
 8012e7a:	f000 fd7f 	bl	801397c <_free_r>
 8012e7e:	2000      	movs	r0, #0
 8012e80:	6360      	str	r0, [r4, #52]	; 0x34
 8012e82:	e7c1      	b.n	8012e08 <__sflush_r+0x1c>
 8012e84:	6a21      	ldr	r1, [r4, #32]
 8012e86:	2301      	movs	r3, #1
 8012e88:	4628      	mov	r0, r5
 8012e8a:	47b0      	blx	r6
 8012e8c:	1c41      	adds	r1, r0, #1
 8012e8e:	d1c7      	bne.n	8012e20 <__sflush_r+0x34>
 8012e90:	682b      	ldr	r3, [r5, #0]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d0c4      	beq.n	8012e20 <__sflush_r+0x34>
 8012e96:	2b1d      	cmp	r3, #29
 8012e98:	d001      	beq.n	8012e9e <__sflush_r+0xb2>
 8012e9a:	2b16      	cmp	r3, #22
 8012e9c:	d101      	bne.n	8012ea2 <__sflush_r+0xb6>
 8012e9e:	602f      	str	r7, [r5, #0]
 8012ea0:	e7b1      	b.n	8012e06 <__sflush_r+0x1a>
 8012ea2:	89a3      	ldrh	r3, [r4, #12]
 8012ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ea8:	81a3      	strh	r3, [r4, #12]
 8012eaa:	e7ad      	b.n	8012e08 <__sflush_r+0x1c>
 8012eac:	690f      	ldr	r7, [r1, #16]
 8012eae:	2f00      	cmp	r7, #0
 8012eb0:	d0a9      	beq.n	8012e06 <__sflush_r+0x1a>
 8012eb2:	0793      	lsls	r3, r2, #30
 8012eb4:	680e      	ldr	r6, [r1, #0]
 8012eb6:	bf08      	it	eq
 8012eb8:	694b      	ldreq	r3, [r1, #20]
 8012eba:	600f      	str	r7, [r1, #0]
 8012ebc:	bf18      	it	ne
 8012ebe:	2300      	movne	r3, #0
 8012ec0:	eba6 0807 	sub.w	r8, r6, r7
 8012ec4:	608b      	str	r3, [r1, #8]
 8012ec6:	f1b8 0f00 	cmp.w	r8, #0
 8012eca:	dd9c      	ble.n	8012e06 <__sflush_r+0x1a>
 8012ecc:	6a21      	ldr	r1, [r4, #32]
 8012ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012ed0:	4643      	mov	r3, r8
 8012ed2:	463a      	mov	r2, r7
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	47b0      	blx	r6
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	dc06      	bgt.n	8012eea <__sflush_r+0xfe>
 8012edc:	89a3      	ldrh	r3, [r4, #12]
 8012ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ee2:	81a3      	strh	r3, [r4, #12]
 8012ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee8:	e78e      	b.n	8012e08 <__sflush_r+0x1c>
 8012eea:	4407      	add	r7, r0
 8012eec:	eba8 0800 	sub.w	r8, r8, r0
 8012ef0:	e7e9      	b.n	8012ec6 <__sflush_r+0xda>
 8012ef2:	bf00      	nop
 8012ef4:	20400001 	.word	0x20400001

08012ef8 <_fflush_r>:
 8012ef8:	b538      	push	{r3, r4, r5, lr}
 8012efa:	690b      	ldr	r3, [r1, #16]
 8012efc:	4605      	mov	r5, r0
 8012efe:	460c      	mov	r4, r1
 8012f00:	b913      	cbnz	r3, 8012f08 <_fflush_r+0x10>
 8012f02:	2500      	movs	r5, #0
 8012f04:	4628      	mov	r0, r5
 8012f06:	bd38      	pop	{r3, r4, r5, pc}
 8012f08:	b118      	cbz	r0, 8012f12 <_fflush_r+0x1a>
 8012f0a:	6983      	ldr	r3, [r0, #24]
 8012f0c:	b90b      	cbnz	r3, 8012f12 <_fflush_r+0x1a>
 8012f0e:	f000 f887 	bl	8013020 <__sinit>
 8012f12:	4b14      	ldr	r3, [pc, #80]	; (8012f64 <_fflush_r+0x6c>)
 8012f14:	429c      	cmp	r4, r3
 8012f16:	d11b      	bne.n	8012f50 <_fflush_r+0x58>
 8012f18:	686c      	ldr	r4, [r5, #4]
 8012f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d0ef      	beq.n	8012f02 <_fflush_r+0xa>
 8012f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f24:	07d0      	lsls	r0, r2, #31
 8012f26:	d404      	bmi.n	8012f32 <_fflush_r+0x3a>
 8012f28:	0599      	lsls	r1, r3, #22
 8012f2a:	d402      	bmi.n	8012f32 <_fflush_r+0x3a>
 8012f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f2e:	f000 f91a 	bl	8013166 <__retarget_lock_acquire_recursive>
 8012f32:	4628      	mov	r0, r5
 8012f34:	4621      	mov	r1, r4
 8012f36:	f7ff ff59 	bl	8012dec <__sflush_r>
 8012f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f3c:	07da      	lsls	r2, r3, #31
 8012f3e:	4605      	mov	r5, r0
 8012f40:	d4e0      	bmi.n	8012f04 <_fflush_r+0xc>
 8012f42:	89a3      	ldrh	r3, [r4, #12]
 8012f44:	059b      	lsls	r3, r3, #22
 8012f46:	d4dd      	bmi.n	8012f04 <_fflush_r+0xc>
 8012f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f4a:	f000 f90d 	bl	8013168 <__retarget_lock_release_recursive>
 8012f4e:	e7d9      	b.n	8012f04 <_fflush_r+0xc>
 8012f50:	4b05      	ldr	r3, [pc, #20]	; (8012f68 <_fflush_r+0x70>)
 8012f52:	429c      	cmp	r4, r3
 8012f54:	d101      	bne.n	8012f5a <_fflush_r+0x62>
 8012f56:	68ac      	ldr	r4, [r5, #8]
 8012f58:	e7df      	b.n	8012f1a <_fflush_r+0x22>
 8012f5a:	4b04      	ldr	r3, [pc, #16]	; (8012f6c <_fflush_r+0x74>)
 8012f5c:	429c      	cmp	r4, r3
 8012f5e:	bf08      	it	eq
 8012f60:	68ec      	ldreq	r4, [r5, #12]
 8012f62:	e7da      	b.n	8012f1a <_fflush_r+0x22>
 8012f64:	08015cac 	.word	0x08015cac
 8012f68:	08015ccc 	.word	0x08015ccc
 8012f6c:	08015c8c 	.word	0x08015c8c

08012f70 <std>:
 8012f70:	2300      	movs	r3, #0
 8012f72:	b510      	push	{r4, lr}
 8012f74:	4604      	mov	r4, r0
 8012f76:	e9c0 3300 	strd	r3, r3, [r0]
 8012f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012f7e:	6083      	str	r3, [r0, #8]
 8012f80:	8181      	strh	r1, [r0, #12]
 8012f82:	6643      	str	r3, [r0, #100]	; 0x64
 8012f84:	81c2      	strh	r2, [r0, #14]
 8012f86:	6183      	str	r3, [r0, #24]
 8012f88:	4619      	mov	r1, r3
 8012f8a:	2208      	movs	r2, #8
 8012f8c:	305c      	adds	r0, #92	; 0x5c
 8012f8e:	f7fe fb9f 	bl	80116d0 <memset>
 8012f92:	4b05      	ldr	r3, [pc, #20]	; (8012fa8 <std+0x38>)
 8012f94:	6263      	str	r3, [r4, #36]	; 0x24
 8012f96:	4b05      	ldr	r3, [pc, #20]	; (8012fac <std+0x3c>)
 8012f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8012f9a:	4b05      	ldr	r3, [pc, #20]	; (8012fb0 <std+0x40>)
 8012f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012f9e:	4b05      	ldr	r3, [pc, #20]	; (8012fb4 <std+0x44>)
 8012fa0:	6224      	str	r4, [r4, #32]
 8012fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8012fa4:	bd10      	pop	{r4, pc}
 8012fa6:	bf00      	nop
 8012fa8:	08013af1 	.word	0x08013af1
 8012fac:	08013b13 	.word	0x08013b13
 8012fb0:	08013b4b 	.word	0x08013b4b
 8012fb4:	08013b6f 	.word	0x08013b6f

08012fb8 <_cleanup_r>:
 8012fb8:	4901      	ldr	r1, [pc, #4]	; (8012fc0 <_cleanup_r+0x8>)
 8012fba:	f000 b8af 	b.w	801311c <_fwalk_reent>
 8012fbe:	bf00      	nop
 8012fc0:	08012ef9 	.word	0x08012ef9

08012fc4 <__sfmoreglue>:
 8012fc4:	b570      	push	{r4, r5, r6, lr}
 8012fc6:	1e4a      	subs	r2, r1, #1
 8012fc8:	2568      	movs	r5, #104	; 0x68
 8012fca:	4355      	muls	r5, r2
 8012fcc:	460e      	mov	r6, r1
 8012fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012fd2:	f000 fd23 	bl	8013a1c <_malloc_r>
 8012fd6:	4604      	mov	r4, r0
 8012fd8:	b140      	cbz	r0, 8012fec <__sfmoreglue+0x28>
 8012fda:	2100      	movs	r1, #0
 8012fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8012fe0:	300c      	adds	r0, #12
 8012fe2:	60a0      	str	r0, [r4, #8]
 8012fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012fe8:	f7fe fb72 	bl	80116d0 <memset>
 8012fec:	4620      	mov	r0, r4
 8012fee:	bd70      	pop	{r4, r5, r6, pc}

08012ff0 <__sfp_lock_acquire>:
 8012ff0:	4801      	ldr	r0, [pc, #4]	; (8012ff8 <__sfp_lock_acquire+0x8>)
 8012ff2:	f000 b8b8 	b.w	8013166 <__retarget_lock_acquire_recursive>
 8012ff6:	bf00      	nop
 8012ff8:	24001604 	.word	0x24001604

08012ffc <__sfp_lock_release>:
 8012ffc:	4801      	ldr	r0, [pc, #4]	; (8013004 <__sfp_lock_release+0x8>)
 8012ffe:	f000 b8b3 	b.w	8013168 <__retarget_lock_release_recursive>
 8013002:	bf00      	nop
 8013004:	24001604 	.word	0x24001604

08013008 <__sinit_lock_acquire>:
 8013008:	4801      	ldr	r0, [pc, #4]	; (8013010 <__sinit_lock_acquire+0x8>)
 801300a:	f000 b8ac 	b.w	8013166 <__retarget_lock_acquire_recursive>
 801300e:	bf00      	nop
 8013010:	240015ff 	.word	0x240015ff

08013014 <__sinit_lock_release>:
 8013014:	4801      	ldr	r0, [pc, #4]	; (801301c <__sinit_lock_release+0x8>)
 8013016:	f000 b8a7 	b.w	8013168 <__retarget_lock_release_recursive>
 801301a:	bf00      	nop
 801301c:	240015ff 	.word	0x240015ff

08013020 <__sinit>:
 8013020:	b510      	push	{r4, lr}
 8013022:	4604      	mov	r4, r0
 8013024:	f7ff fff0 	bl	8013008 <__sinit_lock_acquire>
 8013028:	69a3      	ldr	r3, [r4, #24]
 801302a:	b11b      	cbz	r3, 8013034 <__sinit+0x14>
 801302c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013030:	f7ff bff0 	b.w	8013014 <__sinit_lock_release>
 8013034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013038:	6523      	str	r3, [r4, #80]	; 0x50
 801303a:	4b13      	ldr	r3, [pc, #76]	; (8013088 <__sinit+0x68>)
 801303c:	4a13      	ldr	r2, [pc, #76]	; (801308c <__sinit+0x6c>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	62a2      	str	r2, [r4, #40]	; 0x28
 8013042:	42a3      	cmp	r3, r4
 8013044:	bf04      	itt	eq
 8013046:	2301      	moveq	r3, #1
 8013048:	61a3      	streq	r3, [r4, #24]
 801304a:	4620      	mov	r0, r4
 801304c:	f000 f820 	bl	8013090 <__sfp>
 8013050:	6060      	str	r0, [r4, #4]
 8013052:	4620      	mov	r0, r4
 8013054:	f000 f81c 	bl	8013090 <__sfp>
 8013058:	60a0      	str	r0, [r4, #8]
 801305a:	4620      	mov	r0, r4
 801305c:	f000 f818 	bl	8013090 <__sfp>
 8013060:	2200      	movs	r2, #0
 8013062:	60e0      	str	r0, [r4, #12]
 8013064:	2104      	movs	r1, #4
 8013066:	6860      	ldr	r0, [r4, #4]
 8013068:	f7ff ff82 	bl	8012f70 <std>
 801306c:	68a0      	ldr	r0, [r4, #8]
 801306e:	2201      	movs	r2, #1
 8013070:	2109      	movs	r1, #9
 8013072:	f7ff ff7d 	bl	8012f70 <std>
 8013076:	68e0      	ldr	r0, [r4, #12]
 8013078:	2202      	movs	r2, #2
 801307a:	2112      	movs	r1, #18
 801307c:	f7ff ff78 	bl	8012f70 <std>
 8013080:	2301      	movs	r3, #1
 8013082:	61a3      	str	r3, [r4, #24]
 8013084:	e7d2      	b.n	801302c <__sinit+0xc>
 8013086:	bf00      	nop
 8013088:	08015bc0 	.word	0x08015bc0
 801308c:	08012fb9 	.word	0x08012fb9

08013090 <__sfp>:
 8013090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013092:	4607      	mov	r7, r0
 8013094:	f7ff ffac 	bl	8012ff0 <__sfp_lock_acquire>
 8013098:	4b1e      	ldr	r3, [pc, #120]	; (8013114 <__sfp+0x84>)
 801309a:	681e      	ldr	r6, [r3, #0]
 801309c:	69b3      	ldr	r3, [r6, #24]
 801309e:	b913      	cbnz	r3, 80130a6 <__sfp+0x16>
 80130a0:	4630      	mov	r0, r6
 80130a2:	f7ff ffbd 	bl	8013020 <__sinit>
 80130a6:	3648      	adds	r6, #72	; 0x48
 80130a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80130ac:	3b01      	subs	r3, #1
 80130ae:	d503      	bpl.n	80130b8 <__sfp+0x28>
 80130b0:	6833      	ldr	r3, [r6, #0]
 80130b2:	b30b      	cbz	r3, 80130f8 <__sfp+0x68>
 80130b4:	6836      	ldr	r6, [r6, #0]
 80130b6:	e7f7      	b.n	80130a8 <__sfp+0x18>
 80130b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80130bc:	b9d5      	cbnz	r5, 80130f4 <__sfp+0x64>
 80130be:	4b16      	ldr	r3, [pc, #88]	; (8013118 <__sfp+0x88>)
 80130c0:	60e3      	str	r3, [r4, #12]
 80130c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80130c6:	6665      	str	r5, [r4, #100]	; 0x64
 80130c8:	f000 f84c 	bl	8013164 <__retarget_lock_init_recursive>
 80130cc:	f7ff ff96 	bl	8012ffc <__sfp_lock_release>
 80130d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80130d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80130d8:	6025      	str	r5, [r4, #0]
 80130da:	61a5      	str	r5, [r4, #24]
 80130dc:	2208      	movs	r2, #8
 80130de:	4629      	mov	r1, r5
 80130e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80130e4:	f7fe faf4 	bl	80116d0 <memset>
 80130e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80130ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80130f0:	4620      	mov	r0, r4
 80130f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130f4:	3468      	adds	r4, #104	; 0x68
 80130f6:	e7d9      	b.n	80130ac <__sfp+0x1c>
 80130f8:	2104      	movs	r1, #4
 80130fa:	4638      	mov	r0, r7
 80130fc:	f7ff ff62 	bl	8012fc4 <__sfmoreglue>
 8013100:	4604      	mov	r4, r0
 8013102:	6030      	str	r0, [r6, #0]
 8013104:	2800      	cmp	r0, #0
 8013106:	d1d5      	bne.n	80130b4 <__sfp+0x24>
 8013108:	f7ff ff78 	bl	8012ffc <__sfp_lock_release>
 801310c:	230c      	movs	r3, #12
 801310e:	603b      	str	r3, [r7, #0]
 8013110:	e7ee      	b.n	80130f0 <__sfp+0x60>
 8013112:	bf00      	nop
 8013114:	08015bc0 	.word	0x08015bc0
 8013118:	ffff0001 	.word	0xffff0001

0801311c <_fwalk_reent>:
 801311c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013120:	4606      	mov	r6, r0
 8013122:	4688      	mov	r8, r1
 8013124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013128:	2700      	movs	r7, #0
 801312a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801312e:	f1b9 0901 	subs.w	r9, r9, #1
 8013132:	d505      	bpl.n	8013140 <_fwalk_reent+0x24>
 8013134:	6824      	ldr	r4, [r4, #0]
 8013136:	2c00      	cmp	r4, #0
 8013138:	d1f7      	bne.n	801312a <_fwalk_reent+0xe>
 801313a:	4638      	mov	r0, r7
 801313c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013140:	89ab      	ldrh	r3, [r5, #12]
 8013142:	2b01      	cmp	r3, #1
 8013144:	d907      	bls.n	8013156 <_fwalk_reent+0x3a>
 8013146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801314a:	3301      	adds	r3, #1
 801314c:	d003      	beq.n	8013156 <_fwalk_reent+0x3a>
 801314e:	4629      	mov	r1, r5
 8013150:	4630      	mov	r0, r6
 8013152:	47c0      	blx	r8
 8013154:	4307      	orrs	r7, r0
 8013156:	3568      	adds	r5, #104	; 0x68
 8013158:	e7e9      	b.n	801312e <_fwalk_reent+0x12>
	...

0801315c <_localeconv_r>:
 801315c:	4800      	ldr	r0, [pc, #0]	; (8013160 <_localeconv_r+0x4>)
 801315e:	4770      	bx	lr
 8013160:	2400038c 	.word	0x2400038c

08013164 <__retarget_lock_init_recursive>:
 8013164:	4770      	bx	lr

08013166 <__retarget_lock_acquire_recursive>:
 8013166:	4770      	bx	lr

08013168 <__retarget_lock_release_recursive>:
 8013168:	4770      	bx	lr

0801316a <__swhatbuf_r>:
 801316a:	b570      	push	{r4, r5, r6, lr}
 801316c:	460e      	mov	r6, r1
 801316e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013172:	2900      	cmp	r1, #0
 8013174:	b096      	sub	sp, #88	; 0x58
 8013176:	4614      	mov	r4, r2
 8013178:	461d      	mov	r5, r3
 801317a:	da07      	bge.n	801318c <__swhatbuf_r+0x22>
 801317c:	2300      	movs	r3, #0
 801317e:	602b      	str	r3, [r5, #0]
 8013180:	89b3      	ldrh	r3, [r6, #12]
 8013182:	061a      	lsls	r2, r3, #24
 8013184:	d410      	bmi.n	80131a8 <__swhatbuf_r+0x3e>
 8013186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801318a:	e00e      	b.n	80131aa <__swhatbuf_r+0x40>
 801318c:	466a      	mov	r2, sp
 801318e:	f000 fd45 	bl	8013c1c <_fstat_r>
 8013192:	2800      	cmp	r0, #0
 8013194:	dbf2      	blt.n	801317c <__swhatbuf_r+0x12>
 8013196:	9a01      	ldr	r2, [sp, #4]
 8013198:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801319c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80131a0:	425a      	negs	r2, r3
 80131a2:	415a      	adcs	r2, r3
 80131a4:	602a      	str	r2, [r5, #0]
 80131a6:	e7ee      	b.n	8013186 <__swhatbuf_r+0x1c>
 80131a8:	2340      	movs	r3, #64	; 0x40
 80131aa:	2000      	movs	r0, #0
 80131ac:	6023      	str	r3, [r4, #0]
 80131ae:	b016      	add	sp, #88	; 0x58
 80131b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080131b4 <__smakebuf_r>:
 80131b4:	898b      	ldrh	r3, [r1, #12]
 80131b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80131b8:	079d      	lsls	r5, r3, #30
 80131ba:	4606      	mov	r6, r0
 80131bc:	460c      	mov	r4, r1
 80131be:	d507      	bpl.n	80131d0 <__smakebuf_r+0x1c>
 80131c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80131c4:	6023      	str	r3, [r4, #0]
 80131c6:	6123      	str	r3, [r4, #16]
 80131c8:	2301      	movs	r3, #1
 80131ca:	6163      	str	r3, [r4, #20]
 80131cc:	b002      	add	sp, #8
 80131ce:	bd70      	pop	{r4, r5, r6, pc}
 80131d0:	ab01      	add	r3, sp, #4
 80131d2:	466a      	mov	r2, sp
 80131d4:	f7ff ffc9 	bl	801316a <__swhatbuf_r>
 80131d8:	9900      	ldr	r1, [sp, #0]
 80131da:	4605      	mov	r5, r0
 80131dc:	4630      	mov	r0, r6
 80131de:	f000 fc1d 	bl	8013a1c <_malloc_r>
 80131e2:	b948      	cbnz	r0, 80131f8 <__smakebuf_r+0x44>
 80131e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131e8:	059a      	lsls	r2, r3, #22
 80131ea:	d4ef      	bmi.n	80131cc <__smakebuf_r+0x18>
 80131ec:	f023 0303 	bic.w	r3, r3, #3
 80131f0:	f043 0302 	orr.w	r3, r3, #2
 80131f4:	81a3      	strh	r3, [r4, #12]
 80131f6:	e7e3      	b.n	80131c0 <__smakebuf_r+0xc>
 80131f8:	4b0d      	ldr	r3, [pc, #52]	; (8013230 <__smakebuf_r+0x7c>)
 80131fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80131fc:	89a3      	ldrh	r3, [r4, #12]
 80131fe:	6020      	str	r0, [r4, #0]
 8013200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013204:	81a3      	strh	r3, [r4, #12]
 8013206:	9b00      	ldr	r3, [sp, #0]
 8013208:	6163      	str	r3, [r4, #20]
 801320a:	9b01      	ldr	r3, [sp, #4]
 801320c:	6120      	str	r0, [r4, #16]
 801320e:	b15b      	cbz	r3, 8013228 <__smakebuf_r+0x74>
 8013210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013214:	4630      	mov	r0, r6
 8013216:	f000 fd13 	bl	8013c40 <_isatty_r>
 801321a:	b128      	cbz	r0, 8013228 <__smakebuf_r+0x74>
 801321c:	89a3      	ldrh	r3, [r4, #12]
 801321e:	f023 0303 	bic.w	r3, r3, #3
 8013222:	f043 0301 	orr.w	r3, r3, #1
 8013226:	81a3      	strh	r3, [r4, #12]
 8013228:	89a0      	ldrh	r0, [r4, #12]
 801322a:	4305      	orrs	r5, r0
 801322c:	81a5      	strh	r5, [r4, #12]
 801322e:	e7cd      	b.n	80131cc <__smakebuf_r+0x18>
 8013230:	08012fb9 	.word	0x08012fb9

08013234 <malloc>:
 8013234:	4b02      	ldr	r3, [pc, #8]	; (8013240 <malloc+0xc>)
 8013236:	4601      	mov	r1, r0
 8013238:	6818      	ldr	r0, [r3, #0]
 801323a:	f000 bbef 	b.w	8013a1c <_malloc_r>
 801323e:	bf00      	nop
 8013240:	24000238 	.word	0x24000238

08013244 <memcpy>:
 8013244:	440a      	add	r2, r1
 8013246:	4291      	cmp	r1, r2
 8013248:	f100 33ff 	add.w	r3, r0, #4294967295
 801324c:	d100      	bne.n	8013250 <memcpy+0xc>
 801324e:	4770      	bx	lr
 8013250:	b510      	push	{r4, lr}
 8013252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013256:	f803 4f01 	strb.w	r4, [r3, #1]!
 801325a:	4291      	cmp	r1, r2
 801325c:	d1f9      	bne.n	8013252 <memcpy+0xe>
 801325e:	bd10      	pop	{r4, pc}

08013260 <_Balloc>:
 8013260:	b570      	push	{r4, r5, r6, lr}
 8013262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013264:	4604      	mov	r4, r0
 8013266:	460d      	mov	r5, r1
 8013268:	b976      	cbnz	r6, 8013288 <_Balloc+0x28>
 801326a:	2010      	movs	r0, #16
 801326c:	f7ff ffe2 	bl	8013234 <malloc>
 8013270:	4602      	mov	r2, r0
 8013272:	6260      	str	r0, [r4, #36]	; 0x24
 8013274:	b920      	cbnz	r0, 8013280 <_Balloc+0x20>
 8013276:	4b18      	ldr	r3, [pc, #96]	; (80132d8 <_Balloc+0x78>)
 8013278:	4818      	ldr	r0, [pc, #96]	; (80132dc <_Balloc+0x7c>)
 801327a:	2166      	movs	r1, #102	; 0x66
 801327c:	f000 fc8e 	bl	8013b9c <__assert_func>
 8013280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013284:	6006      	str	r6, [r0, #0]
 8013286:	60c6      	str	r6, [r0, #12]
 8013288:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801328a:	68f3      	ldr	r3, [r6, #12]
 801328c:	b183      	cbz	r3, 80132b0 <_Balloc+0x50>
 801328e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013290:	68db      	ldr	r3, [r3, #12]
 8013292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013296:	b9b8      	cbnz	r0, 80132c8 <_Balloc+0x68>
 8013298:	2101      	movs	r1, #1
 801329a:	fa01 f605 	lsl.w	r6, r1, r5
 801329e:	1d72      	adds	r2, r6, #5
 80132a0:	0092      	lsls	r2, r2, #2
 80132a2:	4620      	mov	r0, r4
 80132a4:	f000 fb5a 	bl	801395c <_calloc_r>
 80132a8:	b160      	cbz	r0, 80132c4 <_Balloc+0x64>
 80132aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80132ae:	e00e      	b.n	80132ce <_Balloc+0x6e>
 80132b0:	2221      	movs	r2, #33	; 0x21
 80132b2:	2104      	movs	r1, #4
 80132b4:	4620      	mov	r0, r4
 80132b6:	f000 fb51 	bl	801395c <_calloc_r>
 80132ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132bc:	60f0      	str	r0, [r6, #12]
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d1e4      	bne.n	801328e <_Balloc+0x2e>
 80132c4:	2000      	movs	r0, #0
 80132c6:	bd70      	pop	{r4, r5, r6, pc}
 80132c8:	6802      	ldr	r2, [r0, #0]
 80132ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80132ce:	2300      	movs	r3, #0
 80132d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80132d4:	e7f7      	b.n	80132c6 <_Balloc+0x66>
 80132d6:	bf00      	nop
 80132d8:	08015c05 	.word	0x08015c05
 80132dc:	08015cec 	.word	0x08015cec

080132e0 <_Bfree>:
 80132e0:	b570      	push	{r4, r5, r6, lr}
 80132e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80132e4:	4605      	mov	r5, r0
 80132e6:	460c      	mov	r4, r1
 80132e8:	b976      	cbnz	r6, 8013308 <_Bfree+0x28>
 80132ea:	2010      	movs	r0, #16
 80132ec:	f7ff ffa2 	bl	8013234 <malloc>
 80132f0:	4602      	mov	r2, r0
 80132f2:	6268      	str	r0, [r5, #36]	; 0x24
 80132f4:	b920      	cbnz	r0, 8013300 <_Bfree+0x20>
 80132f6:	4b09      	ldr	r3, [pc, #36]	; (801331c <_Bfree+0x3c>)
 80132f8:	4809      	ldr	r0, [pc, #36]	; (8013320 <_Bfree+0x40>)
 80132fa:	218a      	movs	r1, #138	; 0x8a
 80132fc:	f000 fc4e 	bl	8013b9c <__assert_func>
 8013300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013304:	6006      	str	r6, [r0, #0]
 8013306:	60c6      	str	r6, [r0, #12]
 8013308:	b13c      	cbz	r4, 801331a <_Bfree+0x3a>
 801330a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801330c:	6862      	ldr	r2, [r4, #4]
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013314:	6021      	str	r1, [r4, #0]
 8013316:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801331a:	bd70      	pop	{r4, r5, r6, pc}
 801331c:	08015c05 	.word	0x08015c05
 8013320:	08015cec 	.word	0x08015cec

08013324 <__multadd>:
 8013324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013328:	690e      	ldr	r6, [r1, #16]
 801332a:	4607      	mov	r7, r0
 801332c:	4698      	mov	r8, r3
 801332e:	460c      	mov	r4, r1
 8013330:	f101 0014 	add.w	r0, r1, #20
 8013334:	2300      	movs	r3, #0
 8013336:	6805      	ldr	r5, [r0, #0]
 8013338:	b2a9      	uxth	r1, r5
 801333a:	fb02 8101 	mla	r1, r2, r1, r8
 801333e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013342:	0c2d      	lsrs	r5, r5, #16
 8013344:	fb02 c505 	mla	r5, r2, r5, ip
 8013348:	b289      	uxth	r1, r1
 801334a:	3301      	adds	r3, #1
 801334c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013350:	429e      	cmp	r6, r3
 8013352:	f840 1b04 	str.w	r1, [r0], #4
 8013356:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801335a:	dcec      	bgt.n	8013336 <__multadd+0x12>
 801335c:	f1b8 0f00 	cmp.w	r8, #0
 8013360:	d022      	beq.n	80133a8 <__multadd+0x84>
 8013362:	68a3      	ldr	r3, [r4, #8]
 8013364:	42b3      	cmp	r3, r6
 8013366:	dc19      	bgt.n	801339c <__multadd+0x78>
 8013368:	6861      	ldr	r1, [r4, #4]
 801336a:	4638      	mov	r0, r7
 801336c:	3101      	adds	r1, #1
 801336e:	f7ff ff77 	bl	8013260 <_Balloc>
 8013372:	4605      	mov	r5, r0
 8013374:	b928      	cbnz	r0, 8013382 <__multadd+0x5e>
 8013376:	4602      	mov	r2, r0
 8013378:	4b0d      	ldr	r3, [pc, #52]	; (80133b0 <__multadd+0x8c>)
 801337a:	480e      	ldr	r0, [pc, #56]	; (80133b4 <__multadd+0x90>)
 801337c:	21b5      	movs	r1, #181	; 0xb5
 801337e:	f000 fc0d 	bl	8013b9c <__assert_func>
 8013382:	6922      	ldr	r2, [r4, #16]
 8013384:	3202      	adds	r2, #2
 8013386:	f104 010c 	add.w	r1, r4, #12
 801338a:	0092      	lsls	r2, r2, #2
 801338c:	300c      	adds	r0, #12
 801338e:	f7ff ff59 	bl	8013244 <memcpy>
 8013392:	4621      	mov	r1, r4
 8013394:	4638      	mov	r0, r7
 8013396:	f7ff ffa3 	bl	80132e0 <_Bfree>
 801339a:	462c      	mov	r4, r5
 801339c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80133a0:	3601      	adds	r6, #1
 80133a2:	f8c3 8014 	str.w	r8, [r3, #20]
 80133a6:	6126      	str	r6, [r4, #16]
 80133a8:	4620      	mov	r0, r4
 80133aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ae:	bf00      	nop
 80133b0:	08015c7b 	.word	0x08015c7b
 80133b4:	08015cec 	.word	0x08015cec

080133b8 <__hi0bits>:
 80133b8:	0c03      	lsrs	r3, r0, #16
 80133ba:	041b      	lsls	r3, r3, #16
 80133bc:	b9d3      	cbnz	r3, 80133f4 <__hi0bits+0x3c>
 80133be:	0400      	lsls	r0, r0, #16
 80133c0:	2310      	movs	r3, #16
 80133c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80133c6:	bf04      	itt	eq
 80133c8:	0200      	lsleq	r0, r0, #8
 80133ca:	3308      	addeq	r3, #8
 80133cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80133d0:	bf04      	itt	eq
 80133d2:	0100      	lsleq	r0, r0, #4
 80133d4:	3304      	addeq	r3, #4
 80133d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80133da:	bf04      	itt	eq
 80133dc:	0080      	lsleq	r0, r0, #2
 80133de:	3302      	addeq	r3, #2
 80133e0:	2800      	cmp	r0, #0
 80133e2:	db05      	blt.n	80133f0 <__hi0bits+0x38>
 80133e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80133e8:	f103 0301 	add.w	r3, r3, #1
 80133ec:	bf08      	it	eq
 80133ee:	2320      	moveq	r3, #32
 80133f0:	4618      	mov	r0, r3
 80133f2:	4770      	bx	lr
 80133f4:	2300      	movs	r3, #0
 80133f6:	e7e4      	b.n	80133c2 <__hi0bits+0xa>

080133f8 <__lo0bits>:
 80133f8:	6803      	ldr	r3, [r0, #0]
 80133fa:	f013 0207 	ands.w	r2, r3, #7
 80133fe:	4601      	mov	r1, r0
 8013400:	d00b      	beq.n	801341a <__lo0bits+0x22>
 8013402:	07da      	lsls	r2, r3, #31
 8013404:	d424      	bmi.n	8013450 <__lo0bits+0x58>
 8013406:	0798      	lsls	r0, r3, #30
 8013408:	bf49      	itett	mi
 801340a:	085b      	lsrmi	r3, r3, #1
 801340c:	089b      	lsrpl	r3, r3, #2
 801340e:	2001      	movmi	r0, #1
 8013410:	600b      	strmi	r3, [r1, #0]
 8013412:	bf5c      	itt	pl
 8013414:	600b      	strpl	r3, [r1, #0]
 8013416:	2002      	movpl	r0, #2
 8013418:	4770      	bx	lr
 801341a:	b298      	uxth	r0, r3
 801341c:	b9b0      	cbnz	r0, 801344c <__lo0bits+0x54>
 801341e:	0c1b      	lsrs	r3, r3, #16
 8013420:	2010      	movs	r0, #16
 8013422:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013426:	bf04      	itt	eq
 8013428:	0a1b      	lsreq	r3, r3, #8
 801342a:	3008      	addeq	r0, #8
 801342c:	071a      	lsls	r2, r3, #28
 801342e:	bf04      	itt	eq
 8013430:	091b      	lsreq	r3, r3, #4
 8013432:	3004      	addeq	r0, #4
 8013434:	079a      	lsls	r2, r3, #30
 8013436:	bf04      	itt	eq
 8013438:	089b      	lsreq	r3, r3, #2
 801343a:	3002      	addeq	r0, #2
 801343c:	07da      	lsls	r2, r3, #31
 801343e:	d403      	bmi.n	8013448 <__lo0bits+0x50>
 8013440:	085b      	lsrs	r3, r3, #1
 8013442:	f100 0001 	add.w	r0, r0, #1
 8013446:	d005      	beq.n	8013454 <__lo0bits+0x5c>
 8013448:	600b      	str	r3, [r1, #0]
 801344a:	4770      	bx	lr
 801344c:	4610      	mov	r0, r2
 801344e:	e7e8      	b.n	8013422 <__lo0bits+0x2a>
 8013450:	2000      	movs	r0, #0
 8013452:	4770      	bx	lr
 8013454:	2020      	movs	r0, #32
 8013456:	4770      	bx	lr

08013458 <__i2b>:
 8013458:	b510      	push	{r4, lr}
 801345a:	460c      	mov	r4, r1
 801345c:	2101      	movs	r1, #1
 801345e:	f7ff feff 	bl	8013260 <_Balloc>
 8013462:	4602      	mov	r2, r0
 8013464:	b928      	cbnz	r0, 8013472 <__i2b+0x1a>
 8013466:	4b05      	ldr	r3, [pc, #20]	; (801347c <__i2b+0x24>)
 8013468:	4805      	ldr	r0, [pc, #20]	; (8013480 <__i2b+0x28>)
 801346a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801346e:	f000 fb95 	bl	8013b9c <__assert_func>
 8013472:	2301      	movs	r3, #1
 8013474:	6144      	str	r4, [r0, #20]
 8013476:	6103      	str	r3, [r0, #16]
 8013478:	bd10      	pop	{r4, pc}
 801347a:	bf00      	nop
 801347c:	08015c7b 	.word	0x08015c7b
 8013480:	08015cec 	.word	0x08015cec

08013484 <__multiply>:
 8013484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013488:	4614      	mov	r4, r2
 801348a:	690a      	ldr	r2, [r1, #16]
 801348c:	6923      	ldr	r3, [r4, #16]
 801348e:	429a      	cmp	r2, r3
 8013490:	bfb8      	it	lt
 8013492:	460b      	movlt	r3, r1
 8013494:	460d      	mov	r5, r1
 8013496:	bfbc      	itt	lt
 8013498:	4625      	movlt	r5, r4
 801349a:	461c      	movlt	r4, r3
 801349c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80134a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80134a4:	68ab      	ldr	r3, [r5, #8]
 80134a6:	6869      	ldr	r1, [r5, #4]
 80134a8:	eb0a 0709 	add.w	r7, sl, r9
 80134ac:	42bb      	cmp	r3, r7
 80134ae:	b085      	sub	sp, #20
 80134b0:	bfb8      	it	lt
 80134b2:	3101      	addlt	r1, #1
 80134b4:	f7ff fed4 	bl	8013260 <_Balloc>
 80134b8:	b930      	cbnz	r0, 80134c8 <__multiply+0x44>
 80134ba:	4602      	mov	r2, r0
 80134bc:	4b42      	ldr	r3, [pc, #264]	; (80135c8 <__multiply+0x144>)
 80134be:	4843      	ldr	r0, [pc, #268]	; (80135cc <__multiply+0x148>)
 80134c0:	f240 115d 	movw	r1, #349	; 0x15d
 80134c4:	f000 fb6a 	bl	8013b9c <__assert_func>
 80134c8:	f100 0614 	add.w	r6, r0, #20
 80134cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80134d0:	4633      	mov	r3, r6
 80134d2:	2200      	movs	r2, #0
 80134d4:	4543      	cmp	r3, r8
 80134d6:	d31e      	bcc.n	8013516 <__multiply+0x92>
 80134d8:	f105 0c14 	add.w	ip, r5, #20
 80134dc:	f104 0314 	add.w	r3, r4, #20
 80134e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80134e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80134e8:	9202      	str	r2, [sp, #8]
 80134ea:	ebac 0205 	sub.w	r2, ip, r5
 80134ee:	3a15      	subs	r2, #21
 80134f0:	f022 0203 	bic.w	r2, r2, #3
 80134f4:	3204      	adds	r2, #4
 80134f6:	f105 0115 	add.w	r1, r5, #21
 80134fa:	458c      	cmp	ip, r1
 80134fc:	bf38      	it	cc
 80134fe:	2204      	movcc	r2, #4
 8013500:	9201      	str	r2, [sp, #4]
 8013502:	9a02      	ldr	r2, [sp, #8]
 8013504:	9303      	str	r3, [sp, #12]
 8013506:	429a      	cmp	r2, r3
 8013508:	d808      	bhi.n	801351c <__multiply+0x98>
 801350a:	2f00      	cmp	r7, #0
 801350c:	dc55      	bgt.n	80135ba <__multiply+0x136>
 801350e:	6107      	str	r7, [r0, #16]
 8013510:	b005      	add	sp, #20
 8013512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013516:	f843 2b04 	str.w	r2, [r3], #4
 801351a:	e7db      	b.n	80134d4 <__multiply+0x50>
 801351c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013520:	f1ba 0f00 	cmp.w	sl, #0
 8013524:	d020      	beq.n	8013568 <__multiply+0xe4>
 8013526:	f105 0e14 	add.w	lr, r5, #20
 801352a:	46b1      	mov	r9, r6
 801352c:	2200      	movs	r2, #0
 801352e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013532:	f8d9 b000 	ldr.w	fp, [r9]
 8013536:	b2a1      	uxth	r1, r4
 8013538:	fa1f fb8b 	uxth.w	fp, fp
 801353c:	fb0a b101 	mla	r1, sl, r1, fp
 8013540:	4411      	add	r1, r2
 8013542:	f8d9 2000 	ldr.w	r2, [r9]
 8013546:	0c24      	lsrs	r4, r4, #16
 8013548:	0c12      	lsrs	r2, r2, #16
 801354a:	fb0a 2404 	mla	r4, sl, r4, r2
 801354e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013552:	b289      	uxth	r1, r1
 8013554:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013558:	45f4      	cmp	ip, lr
 801355a:	f849 1b04 	str.w	r1, [r9], #4
 801355e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013562:	d8e4      	bhi.n	801352e <__multiply+0xaa>
 8013564:	9901      	ldr	r1, [sp, #4]
 8013566:	5072      	str	r2, [r6, r1]
 8013568:	9a03      	ldr	r2, [sp, #12]
 801356a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801356e:	3304      	adds	r3, #4
 8013570:	f1b9 0f00 	cmp.w	r9, #0
 8013574:	d01f      	beq.n	80135b6 <__multiply+0x132>
 8013576:	6834      	ldr	r4, [r6, #0]
 8013578:	f105 0114 	add.w	r1, r5, #20
 801357c:	46b6      	mov	lr, r6
 801357e:	f04f 0a00 	mov.w	sl, #0
 8013582:	880a      	ldrh	r2, [r1, #0]
 8013584:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013588:	fb09 b202 	mla	r2, r9, r2, fp
 801358c:	4492      	add	sl, r2
 801358e:	b2a4      	uxth	r4, r4
 8013590:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013594:	f84e 4b04 	str.w	r4, [lr], #4
 8013598:	f851 4b04 	ldr.w	r4, [r1], #4
 801359c:	f8be 2000 	ldrh.w	r2, [lr]
 80135a0:	0c24      	lsrs	r4, r4, #16
 80135a2:	fb09 2404 	mla	r4, r9, r4, r2
 80135a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80135aa:	458c      	cmp	ip, r1
 80135ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80135b0:	d8e7      	bhi.n	8013582 <__multiply+0xfe>
 80135b2:	9a01      	ldr	r2, [sp, #4]
 80135b4:	50b4      	str	r4, [r6, r2]
 80135b6:	3604      	adds	r6, #4
 80135b8:	e7a3      	b.n	8013502 <__multiply+0x7e>
 80135ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d1a5      	bne.n	801350e <__multiply+0x8a>
 80135c2:	3f01      	subs	r7, #1
 80135c4:	e7a1      	b.n	801350a <__multiply+0x86>
 80135c6:	bf00      	nop
 80135c8:	08015c7b 	.word	0x08015c7b
 80135cc:	08015cec 	.word	0x08015cec

080135d0 <__pow5mult>:
 80135d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135d4:	4615      	mov	r5, r2
 80135d6:	f012 0203 	ands.w	r2, r2, #3
 80135da:	4606      	mov	r6, r0
 80135dc:	460f      	mov	r7, r1
 80135de:	d007      	beq.n	80135f0 <__pow5mult+0x20>
 80135e0:	4c25      	ldr	r4, [pc, #148]	; (8013678 <__pow5mult+0xa8>)
 80135e2:	3a01      	subs	r2, #1
 80135e4:	2300      	movs	r3, #0
 80135e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80135ea:	f7ff fe9b 	bl	8013324 <__multadd>
 80135ee:	4607      	mov	r7, r0
 80135f0:	10ad      	asrs	r5, r5, #2
 80135f2:	d03d      	beq.n	8013670 <__pow5mult+0xa0>
 80135f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80135f6:	b97c      	cbnz	r4, 8013618 <__pow5mult+0x48>
 80135f8:	2010      	movs	r0, #16
 80135fa:	f7ff fe1b 	bl	8013234 <malloc>
 80135fe:	4602      	mov	r2, r0
 8013600:	6270      	str	r0, [r6, #36]	; 0x24
 8013602:	b928      	cbnz	r0, 8013610 <__pow5mult+0x40>
 8013604:	4b1d      	ldr	r3, [pc, #116]	; (801367c <__pow5mult+0xac>)
 8013606:	481e      	ldr	r0, [pc, #120]	; (8013680 <__pow5mult+0xb0>)
 8013608:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801360c:	f000 fac6 	bl	8013b9c <__assert_func>
 8013610:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013614:	6004      	str	r4, [r0, #0]
 8013616:	60c4      	str	r4, [r0, #12]
 8013618:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801361c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013620:	b94c      	cbnz	r4, 8013636 <__pow5mult+0x66>
 8013622:	f240 2171 	movw	r1, #625	; 0x271
 8013626:	4630      	mov	r0, r6
 8013628:	f7ff ff16 	bl	8013458 <__i2b>
 801362c:	2300      	movs	r3, #0
 801362e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013632:	4604      	mov	r4, r0
 8013634:	6003      	str	r3, [r0, #0]
 8013636:	f04f 0900 	mov.w	r9, #0
 801363a:	07eb      	lsls	r3, r5, #31
 801363c:	d50a      	bpl.n	8013654 <__pow5mult+0x84>
 801363e:	4639      	mov	r1, r7
 8013640:	4622      	mov	r2, r4
 8013642:	4630      	mov	r0, r6
 8013644:	f7ff ff1e 	bl	8013484 <__multiply>
 8013648:	4639      	mov	r1, r7
 801364a:	4680      	mov	r8, r0
 801364c:	4630      	mov	r0, r6
 801364e:	f7ff fe47 	bl	80132e0 <_Bfree>
 8013652:	4647      	mov	r7, r8
 8013654:	106d      	asrs	r5, r5, #1
 8013656:	d00b      	beq.n	8013670 <__pow5mult+0xa0>
 8013658:	6820      	ldr	r0, [r4, #0]
 801365a:	b938      	cbnz	r0, 801366c <__pow5mult+0x9c>
 801365c:	4622      	mov	r2, r4
 801365e:	4621      	mov	r1, r4
 8013660:	4630      	mov	r0, r6
 8013662:	f7ff ff0f 	bl	8013484 <__multiply>
 8013666:	6020      	str	r0, [r4, #0]
 8013668:	f8c0 9000 	str.w	r9, [r0]
 801366c:	4604      	mov	r4, r0
 801366e:	e7e4      	b.n	801363a <__pow5mult+0x6a>
 8013670:	4638      	mov	r0, r7
 8013672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013676:	bf00      	nop
 8013678:	08015e40 	.word	0x08015e40
 801367c:	08015c05 	.word	0x08015c05
 8013680:	08015cec 	.word	0x08015cec

08013684 <__lshift>:
 8013684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013688:	460c      	mov	r4, r1
 801368a:	6849      	ldr	r1, [r1, #4]
 801368c:	6923      	ldr	r3, [r4, #16]
 801368e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013692:	68a3      	ldr	r3, [r4, #8]
 8013694:	4607      	mov	r7, r0
 8013696:	4691      	mov	r9, r2
 8013698:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801369c:	f108 0601 	add.w	r6, r8, #1
 80136a0:	42b3      	cmp	r3, r6
 80136a2:	db0b      	blt.n	80136bc <__lshift+0x38>
 80136a4:	4638      	mov	r0, r7
 80136a6:	f7ff fddb 	bl	8013260 <_Balloc>
 80136aa:	4605      	mov	r5, r0
 80136ac:	b948      	cbnz	r0, 80136c2 <__lshift+0x3e>
 80136ae:	4602      	mov	r2, r0
 80136b0:	4b28      	ldr	r3, [pc, #160]	; (8013754 <__lshift+0xd0>)
 80136b2:	4829      	ldr	r0, [pc, #164]	; (8013758 <__lshift+0xd4>)
 80136b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80136b8:	f000 fa70 	bl	8013b9c <__assert_func>
 80136bc:	3101      	adds	r1, #1
 80136be:	005b      	lsls	r3, r3, #1
 80136c0:	e7ee      	b.n	80136a0 <__lshift+0x1c>
 80136c2:	2300      	movs	r3, #0
 80136c4:	f100 0114 	add.w	r1, r0, #20
 80136c8:	f100 0210 	add.w	r2, r0, #16
 80136cc:	4618      	mov	r0, r3
 80136ce:	4553      	cmp	r3, sl
 80136d0:	db33      	blt.n	801373a <__lshift+0xb6>
 80136d2:	6920      	ldr	r0, [r4, #16]
 80136d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80136d8:	f104 0314 	add.w	r3, r4, #20
 80136dc:	f019 091f 	ands.w	r9, r9, #31
 80136e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80136e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80136e8:	d02b      	beq.n	8013742 <__lshift+0xbe>
 80136ea:	f1c9 0e20 	rsb	lr, r9, #32
 80136ee:	468a      	mov	sl, r1
 80136f0:	2200      	movs	r2, #0
 80136f2:	6818      	ldr	r0, [r3, #0]
 80136f4:	fa00 f009 	lsl.w	r0, r0, r9
 80136f8:	4302      	orrs	r2, r0
 80136fa:	f84a 2b04 	str.w	r2, [sl], #4
 80136fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013702:	459c      	cmp	ip, r3
 8013704:	fa22 f20e 	lsr.w	r2, r2, lr
 8013708:	d8f3      	bhi.n	80136f2 <__lshift+0x6e>
 801370a:	ebac 0304 	sub.w	r3, ip, r4
 801370e:	3b15      	subs	r3, #21
 8013710:	f023 0303 	bic.w	r3, r3, #3
 8013714:	3304      	adds	r3, #4
 8013716:	f104 0015 	add.w	r0, r4, #21
 801371a:	4584      	cmp	ip, r0
 801371c:	bf38      	it	cc
 801371e:	2304      	movcc	r3, #4
 8013720:	50ca      	str	r2, [r1, r3]
 8013722:	b10a      	cbz	r2, 8013728 <__lshift+0xa4>
 8013724:	f108 0602 	add.w	r6, r8, #2
 8013728:	3e01      	subs	r6, #1
 801372a:	4638      	mov	r0, r7
 801372c:	612e      	str	r6, [r5, #16]
 801372e:	4621      	mov	r1, r4
 8013730:	f7ff fdd6 	bl	80132e0 <_Bfree>
 8013734:	4628      	mov	r0, r5
 8013736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801373a:	f842 0f04 	str.w	r0, [r2, #4]!
 801373e:	3301      	adds	r3, #1
 8013740:	e7c5      	b.n	80136ce <__lshift+0x4a>
 8013742:	3904      	subs	r1, #4
 8013744:	f853 2b04 	ldr.w	r2, [r3], #4
 8013748:	f841 2f04 	str.w	r2, [r1, #4]!
 801374c:	459c      	cmp	ip, r3
 801374e:	d8f9      	bhi.n	8013744 <__lshift+0xc0>
 8013750:	e7ea      	b.n	8013728 <__lshift+0xa4>
 8013752:	bf00      	nop
 8013754:	08015c7b 	.word	0x08015c7b
 8013758:	08015cec 	.word	0x08015cec

0801375c <__mcmp>:
 801375c:	b530      	push	{r4, r5, lr}
 801375e:	6902      	ldr	r2, [r0, #16]
 8013760:	690c      	ldr	r4, [r1, #16]
 8013762:	1b12      	subs	r2, r2, r4
 8013764:	d10e      	bne.n	8013784 <__mcmp+0x28>
 8013766:	f100 0314 	add.w	r3, r0, #20
 801376a:	3114      	adds	r1, #20
 801376c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013770:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013774:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013778:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801377c:	42a5      	cmp	r5, r4
 801377e:	d003      	beq.n	8013788 <__mcmp+0x2c>
 8013780:	d305      	bcc.n	801378e <__mcmp+0x32>
 8013782:	2201      	movs	r2, #1
 8013784:	4610      	mov	r0, r2
 8013786:	bd30      	pop	{r4, r5, pc}
 8013788:	4283      	cmp	r3, r0
 801378a:	d3f3      	bcc.n	8013774 <__mcmp+0x18>
 801378c:	e7fa      	b.n	8013784 <__mcmp+0x28>
 801378e:	f04f 32ff 	mov.w	r2, #4294967295
 8013792:	e7f7      	b.n	8013784 <__mcmp+0x28>

08013794 <__mdiff>:
 8013794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013798:	460c      	mov	r4, r1
 801379a:	4606      	mov	r6, r0
 801379c:	4611      	mov	r1, r2
 801379e:	4620      	mov	r0, r4
 80137a0:	4617      	mov	r7, r2
 80137a2:	f7ff ffdb 	bl	801375c <__mcmp>
 80137a6:	1e05      	subs	r5, r0, #0
 80137a8:	d110      	bne.n	80137cc <__mdiff+0x38>
 80137aa:	4629      	mov	r1, r5
 80137ac:	4630      	mov	r0, r6
 80137ae:	f7ff fd57 	bl	8013260 <_Balloc>
 80137b2:	b930      	cbnz	r0, 80137c2 <__mdiff+0x2e>
 80137b4:	4b39      	ldr	r3, [pc, #228]	; (801389c <__mdiff+0x108>)
 80137b6:	4602      	mov	r2, r0
 80137b8:	f240 2132 	movw	r1, #562	; 0x232
 80137bc:	4838      	ldr	r0, [pc, #224]	; (80138a0 <__mdiff+0x10c>)
 80137be:	f000 f9ed 	bl	8013b9c <__assert_func>
 80137c2:	2301      	movs	r3, #1
 80137c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80137c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137cc:	bfa4      	itt	ge
 80137ce:	463b      	movge	r3, r7
 80137d0:	4627      	movge	r7, r4
 80137d2:	4630      	mov	r0, r6
 80137d4:	6879      	ldr	r1, [r7, #4]
 80137d6:	bfa6      	itte	ge
 80137d8:	461c      	movge	r4, r3
 80137da:	2500      	movge	r5, #0
 80137dc:	2501      	movlt	r5, #1
 80137de:	f7ff fd3f 	bl	8013260 <_Balloc>
 80137e2:	b920      	cbnz	r0, 80137ee <__mdiff+0x5a>
 80137e4:	4b2d      	ldr	r3, [pc, #180]	; (801389c <__mdiff+0x108>)
 80137e6:	4602      	mov	r2, r0
 80137e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80137ec:	e7e6      	b.n	80137bc <__mdiff+0x28>
 80137ee:	693e      	ldr	r6, [r7, #16]
 80137f0:	60c5      	str	r5, [r0, #12]
 80137f2:	6925      	ldr	r5, [r4, #16]
 80137f4:	f107 0114 	add.w	r1, r7, #20
 80137f8:	f104 0914 	add.w	r9, r4, #20
 80137fc:	f100 0e14 	add.w	lr, r0, #20
 8013800:	f107 0210 	add.w	r2, r7, #16
 8013804:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013808:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801380c:	46f2      	mov	sl, lr
 801380e:	2700      	movs	r7, #0
 8013810:	f859 3b04 	ldr.w	r3, [r9], #4
 8013814:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013818:	fa1f f883 	uxth.w	r8, r3
 801381c:	fa17 f78b 	uxtah	r7, r7, fp
 8013820:	0c1b      	lsrs	r3, r3, #16
 8013822:	eba7 0808 	sub.w	r8, r7, r8
 8013826:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801382a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801382e:	fa1f f888 	uxth.w	r8, r8
 8013832:	141f      	asrs	r7, r3, #16
 8013834:	454d      	cmp	r5, r9
 8013836:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801383a:	f84a 3b04 	str.w	r3, [sl], #4
 801383e:	d8e7      	bhi.n	8013810 <__mdiff+0x7c>
 8013840:	1b2b      	subs	r3, r5, r4
 8013842:	3b15      	subs	r3, #21
 8013844:	f023 0303 	bic.w	r3, r3, #3
 8013848:	3304      	adds	r3, #4
 801384a:	3415      	adds	r4, #21
 801384c:	42a5      	cmp	r5, r4
 801384e:	bf38      	it	cc
 8013850:	2304      	movcc	r3, #4
 8013852:	4419      	add	r1, r3
 8013854:	4473      	add	r3, lr
 8013856:	469e      	mov	lr, r3
 8013858:	460d      	mov	r5, r1
 801385a:	4565      	cmp	r5, ip
 801385c:	d30e      	bcc.n	801387c <__mdiff+0xe8>
 801385e:	f10c 0203 	add.w	r2, ip, #3
 8013862:	1a52      	subs	r2, r2, r1
 8013864:	f022 0203 	bic.w	r2, r2, #3
 8013868:	3903      	subs	r1, #3
 801386a:	458c      	cmp	ip, r1
 801386c:	bf38      	it	cc
 801386e:	2200      	movcc	r2, #0
 8013870:	441a      	add	r2, r3
 8013872:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013876:	b17b      	cbz	r3, 8013898 <__mdiff+0x104>
 8013878:	6106      	str	r6, [r0, #16]
 801387a:	e7a5      	b.n	80137c8 <__mdiff+0x34>
 801387c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013880:	fa17 f488 	uxtah	r4, r7, r8
 8013884:	1422      	asrs	r2, r4, #16
 8013886:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801388a:	b2a4      	uxth	r4, r4
 801388c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013890:	f84e 4b04 	str.w	r4, [lr], #4
 8013894:	1417      	asrs	r7, r2, #16
 8013896:	e7e0      	b.n	801385a <__mdiff+0xc6>
 8013898:	3e01      	subs	r6, #1
 801389a:	e7ea      	b.n	8013872 <__mdiff+0xde>
 801389c:	08015c7b 	.word	0x08015c7b
 80138a0:	08015cec 	.word	0x08015cec

080138a4 <__d2b>:
 80138a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80138a8:	4689      	mov	r9, r1
 80138aa:	2101      	movs	r1, #1
 80138ac:	ec57 6b10 	vmov	r6, r7, d0
 80138b0:	4690      	mov	r8, r2
 80138b2:	f7ff fcd5 	bl	8013260 <_Balloc>
 80138b6:	4604      	mov	r4, r0
 80138b8:	b930      	cbnz	r0, 80138c8 <__d2b+0x24>
 80138ba:	4602      	mov	r2, r0
 80138bc:	4b25      	ldr	r3, [pc, #148]	; (8013954 <__d2b+0xb0>)
 80138be:	4826      	ldr	r0, [pc, #152]	; (8013958 <__d2b+0xb4>)
 80138c0:	f240 310a 	movw	r1, #778	; 0x30a
 80138c4:	f000 f96a 	bl	8013b9c <__assert_func>
 80138c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80138cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80138d0:	bb35      	cbnz	r5, 8013920 <__d2b+0x7c>
 80138d2:	2e00      	cmp	r6, #0
 80138d4:	9301      	str	r3, [sp, #4]
 80138d6:	d028      	beq.n	801392a <__d2b+0x86>
 80138d8:	4668      	mov	r0, sp
 80138da:	9600      	str	r6, [sp, #0]
 80138dc:	f7ff fd8c 	bl	80133f8 <__lo0bits>
 80138e0:	9900      	ldr	r1, [sp, #0]
 80138e2:	b300      	cbz	r0, 8013926 <__d2b+0x82>
 80138e4:	9a01      	ldr	r2, [sp, #4]
 80138e6:	f1c0 0320 	rsb	r3, r0, #32
 80138ea:	fa02 f303 	lsl.w	r3, r2, r3
 80138ee:	430b      	orrs	r3, r1
 80138f0:	40c2      	lsrs	r2, r0
 80138f2:	6163      	str	r3, [r4, #20]
 80138f4:	9201      	str	r2, [sp, #4]
 80138f6:	9b01      	ldr	r3, [sp, #4]
 80138f8:	61a3      	str	r3, [r4, #24]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	bf14      	ite	ne
 80138fe:	2202      	movne	r2, #2
 8013900:	2201      	moveq	r2, #1
 8013902:	6122      	str	r2, [r4, #16]
 8013904:	b1d5      	cbz	r5, 801393c <__d2b+0x98>
 8013906:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801390a:	4405      	add	r5, r0
 801390c:	f8c9 5000 	str.w	r5, [r9]
 8013910:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013914:	f8c8 0000 	str.w	r0, [r8]
 8013918:	4620      	mov	r0, r4
 801391a:	b003      	add	sp, #12
 801391c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013924:	e7d5      	b.n	80138d2 <__d2b+0x2e>
 8013926:	6161      	str	r1, [r4, #20]
 8013928:	e7e5      	b.n	80138f6 <__d2b+0x52>
 801392a:	a801      	add	r0, sp, #4
 801392c:	f7ff fd64 	bl	80133f8 <__lo0bits>
 8013930:	9b01      	ldr	r3, [sp, #4]
 8013932:	6163      	str	r3, [r4, #20]
 8013934:	2201      	movs	r2, #1
 8013936:	6122      	str	r2, [r4, #16]
 8013938:	3020      	adds	r0, #32
 801393a:	e7e3      	b.n	8013904 <__d2b+0x60>
 801393c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013940:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013944:	f8c9 0000 	str.w	r0, [r9]
 8013948:	6918      	ldr	r0, [r3, #16]
 801394a:	f7ff fd35 	bl	80133b8 <__hi0bits>
 801394e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013952:	e7df      	b.n	8013914 <__d2b+0x70>
 8013954:	08015c7b 	.word	0x08015c7b
 8013958:	08015cec 	.word	0x08015cec

0801395c <_calloc_r>:
 801395c:	b513      	push	{r0, r1, r4, lr}
 801395e:	434a      	muls	r2, r1
 8013960:	4611      	mov	r1, r2
 8013962:	9201      	str	r2, [sp, #4]
 8013964:	f000 f85a 	bl	8013a1c <_malloc_r>
 8013968:	4604      	mov	r4, r0
 801396a:	b118      	cbz	r0, 8013974 <_calloc_r+0x18>
 801396c:	9a01      	ldr	r2, [sp, #4]
 801396e:	2100      	movs	r1, #0
 8013970:	f7fd feae 	bl	80116d0 <memset>
 8013974:	4620      	mov	r0, r4
 8013976:	b002      	add	sp, #8
 8013978:	bd10      	pop	{r4, pc}
	...

0801397c <_free_r>:
 801397c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801397e:	2900      	cmp	r1, #0
 8013980:	d048      	beq.n	8013a14 <_free_r+0x98>
 8013982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013986:	9001      	str	r0, [sp, #4]
 8013988:	2b00      	cmp	r3, #0
 801398a:	f1a1 0404 	sub.w	r4, r1, #4
 801398e:	bfb8      	it	lt
 8013990:	18e4      	addlt	r4, r4, r3
 8013992:	f000 f989 	bl	8013ca8 <__malloc_lock>
 8013996:	4a20      	ldr	r2, [pc, #128]	; (8013a18 <_free_r+0x9c>)
 8013998:	9801      	ldr	r0, [sp, #4]
 801399a:	6813      	ldr	r3, [r2, #0]
 801399c:	4615      	mov	r5, r2
 801399e:	b933      	cbnz	r3, 80139ae <_free_r+0x32>
 80139a0:	6063      	str	r3, [r4, #4]
 80139a2:	6014      	str	r4, [r2, #0]
 80139a4:	b003      	add	sp, #12
 80139a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139aa:	f000 b983 	b.w	8013cb4 <__malloc_unlock>
 80139ae:	42a3      	cmp	r3, r4
 80139b0:	d90b      	bls.n	80139ca <_free_r+0x4e>
 80139b2:	6821      	ldr	r1, [r4, #0]
 80139b4:	1862      	adds	r2, r4, r1
 80139b6:	4293      	cmp	r3, r2
 80139b8:	bf04      	itt	eq
 80139ba:	681a      	ldreq	r2, [r3, #0]
 80139bc:	685b      	ldreq	r3, [r3, #4]
 80139be:	6063      	str	r3, [r4, #4]
 80139c0:	bf04      	itt	eq
 80139c2:	1852      	addeq	r2, r2, r1
 80139c4:	6022      	streq	r2, [r4, #0]
 80139c6:	602c      	str	r4, [r5, #0]
 80139c8:	e7ec      	b.n	80139a4 <_free_r+0x28>
 80139ca:	461a      	mov	r2, r3
 80139cc:	685b      	ldr	r3, [r3, #4]
 80139ce:	b10b      	cbz	r3, 80139d4 <_free_r+0x58>
 80139d0:	42a3      	cmp	r3, r4
 80139d2:	d9fa      	bls.n	80139ca <_free_r+0x4e>
 80139d4:	6811      	ldr	r1, [r2, #0]
 80139d6:	1855      	adds	r5, r2, r1
 80139d8:	42a5      	cmp	r5, r4
 80139da:	d10b      	bne.n	80139f4 <_free_r+0x78>
 80139dc:	6824      	ldr	r4, [r4, #0]
 80139de:	4421      	add	r1, r4
 80139e0:	1854      	adds	r4, r2, r1
 80139e2:	42a3      	cmp	r3, r4
 80139e4:	6011      	str	r1, [r2, #0]
 80139e6:	d1dd      	bne.n	80139a4 <_free_r+0x28>
 80139e8:	681c      	ldr	r4, [r3, #0]
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	6053      	str	r3, [r2, #4]
 80139ee:	4421      	add	r1, r4
 80139f0:	6011      	str	r1, [r2, #0]
 80139f2:	e7d7      	b.n	80139a4 <_free_r+0x28>
 80139f4:	d902      	bls.n	80139fc <_free_r+0x80>
 80139f6:	230c      	movs	r3, #12
 80139f8:	6003      	str	r3, [r0, #0]
 80139fa:	e7d3      	b.n	80139a4 <_free_r+0x28>
 80139fc:	6825      	ldr	r5, [r4, #0]
 80139fe:	1961      	adds	r1, r4, r5
 8013a00:	428b      	cmp	r3, r1
 8013a02:	bf04      	itt	eq
 8013a04:	6819      	ldreq	r1, [r3, #0]
 8013a06:	685b      	ldreq	r3, [r3, #4]
 8013a08:	6063      	str	r3, [r4, #4]
 8013a0a:	bf04      	itt	eq
 8013a0c:	1949      	addeq	r1, r1, r5
 8013a0e:	6021      	streq	r1, [r4, #0]
 8013a10:	6054      	str	r4, [r2, #4]
 8013a12:	e7c7      	b.n	80139a4 <_free_r+0x28>
 8013a14:	b003      	add	sp, #12
 8013a16:	bd30      	pop	{r4, r5, pc}
 8013a18:	24000be0 	.word	0x24000be0

08013a1c <_malloc_r>:
 8013a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a1e:	1ccd      	adds	r5, r1, #3
 8013a20:	f025 0503 	bic.w	r5, r5, #3
 8013a24:	3508      	adds	r5, #8
 8013a26:	2d0c      	cmp	r5, #12
 8013a28:	bf38      	it	cc
 8013a2a:	250c      	movcc	r5, #12
 8013a2c:	2d00      	cmp	r5, #0
 8013a2e:	4606      	mov	r6, r0
 8013a30:	db01      	blt.n	8013a36 <_malloc_r+0x1a>
 8013a32:	42a9      	cmp	r1, r5
 8013a34:	d903      	bls.n	8013a3e <_malloc_r+0x22>
 8013a36:	230c      	movs	r3, #12
 8013a38:	6033      	str	r3, [r6, #0]
 8013a3a:	2000      	movs	r0, #0
 8013a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a3e:	f000 f933 	bl	8013ca8 <__malloc_lock>
 8013a42:	4921      	ldr	r1, [pc, #132]	; (8013ac8 <_malloc_r+0xac>)
 8013a44:	680a      	ldr	r2, [r1, #0]
 8013a46:	4614      	mov	r4, r2
 8013a48:	b99c      	cbnz	r4, 8013a72 <_malloc_r+0x56>
 8013a4a:	4f20      	ldr	r7, [pc, #128]	; (8013acc <_malloc_r+0xb0>)
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	b923      	cbnz	r3, 8013a5a <_malloc_r+0x3e>
 8013a50:	4621      	mov	r1, r4
 8013a52:	4630      	mov	r0, r6
 8013a54:	f000 f83c 	bl	8013ad0 <_sbrk_r>
 8013a58:	6038      	str	r0, [r7, #0]
 8013a5a:	4629      	mov	r1, r5
 8013a5c:	4630      	mov	r0, r6
 8013a5e:	f000 f837 	bl	8013ad0 <_sbrk_r>
 8013a62:	1c43      	adds	r3, r0, #1
 8013a64:	d123      	bne.n	8013aae <_malloc_r+0x92>
 8013a66:	230c      	movs	r3, #12
 8013a68:	6033      	str	r3, [r6, #0]
 8013a6a:	4630      	mov	r0, r6
 8013a6c:	f000 f922 	bl	8013cb4 <__malloc_unlock>
 8013a70:	e7e3      	b.n	8013a3a <_malloc_r+0x1e>
 8013a72:	6823      	ldr	r3, [r4, #0]
 8013a74:	1b5b      	subs	r3, r3, r5
 8013a76:	d417      	bmi.n	8013aa8 <_malloc_r+0x8c>
 8013a78:	2b0b      	cmp	r3, #11
 8013a7a:	d903      	bls.n	8013a84 <_malloc_r+0x68>
 8013a7c:	6023      	str	r3, [r4, #0]
 8013a7e:	441c      	add	r4, r3
 8013a80:	6025      	str	r5, [r4, #0]
 8013a82:	e004      	b.n	8013a8e <_malloc_r+0x72>
 8013a84:	6863      	ldr	r3, [r4, #4]
 8013a86:	42a2      	cmp	r2, r4
 8013a88:	bf0c      	ite	eq
 8013a8a:	600b      	streq	r3, [r1, #0]
 8013a8c:	6053      	strne	r3, [r2, #4]
 8013a8e:	4630      	mov	r0, r6
 8013a90:	f000 f910 	bl	8013cb4 <__malloc_unlock>
 8013a94:	f104 000b 	add.w	r0, r4, #11
 8013a98:	1d23      	adds	r3, r4, #4
 8013a9a:	f020 0007 	bic.w	r0, r0, #7
 8013a9e:	1ac2      	subs	r2, r0, r3
 8013aa0:	d0cc      	beq.n	8013a3c <_malloc_r+0x20>
 8013aa2:	1a1b      	subs	r3, r3, r0
 8013aa4:	50a3      	str	r3, [r4, r2]
 8013aa6:	e7c9      	b.n	8013a3c <_malloc_r+0x20>
 8013aa8:	4622      	mov	r2, r4
 8013aaa:	6864      	ldr	r4, [r4, #4]
 8013aac:	e7cc      	b.n	8013a48 <_malloc_r+0x2c>
 8013aae:	1cc4      	adds	r4, r0, #3
 8013ab0:	f024 0403 	bic.w	r4, r4, #3
 8013ab4:	42a0      	cmp	r0, r4
 8013ab6:	d0e3      	beq.n	8013a80 <_malloc_r+0x64>
 8013ab8:	1a21      	subs	r1, r4, r0
 8013aba:	4630      	mov	r0, r6
 8013abc:	f000 f808 	bl	8013ad0 <_sbrk_r>
 8013ac0:	3001      	adds	r0, #1
 8013ac2:	d1dd      	bne.n	8013a80 <_malloc_r+0x64>
 8013ac4:	e7cf      	b.n	8013a66 <_malloc_r+0x4a>
 8013ac6:	bf00      	nop
 8013ac8:	24000be0 	.word	0x24000be0
 8013acc:	24000be4 	.word	0x24000be4

08013ad0 <_sbrk_r>:
 8013ad0:	b538      	push	{r3, r4, r5, lr}
 8013ad2:	4d06      	ldr	r5, [pc, #24]	; (8013aec <_sbrk_r+0x1c>)
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	4604      	mov	r4, r0
 8013ad8:	4608      	mov	r0, r1
 8013ada:	602b      	str	r3, [r5, #0]
 8013adc:	f7f1 f9a4 	bl	8004e28 <_sbrk>
 8013ae0:	1c43      	adds	r3, r0, #1
 8013ae2:	d102      	bne.n	8013aea <_sbrk_r+0x1a>
 8013ae4:	682b      	ldr	r3, [r5, #0]
 8013ae6:	b103      	cbz	r3, 8013aea <_sbrk_r+0x1a>
 8013ae8:	6023      	str	r3, [r4, #0]
 8013aea:	bd38      	pop	{r3, r4, r5, pc}
 8013aec:	24001608 	.word	0x24001608

08013af0 <__sread>:
 8013af0:	b510      	push	{r4, lr}
 8013af2:	460c      	mov	r4, r1
 8013af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013af8:	f000 fa3c 	bl	8013f74 <_read_r>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	bfab      	itete	ge
 8013b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b02:	89a3      	ldrhlt	r3, [r4, #12]
 8013b04:	181b      	addge	r3, r3, r0
 8013b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b0a:	bfac      	ite	ge
 8013b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b0e:	81a3      	strhlt	r3, [r4, #12]
 8013b10:	bd10      	pop	{r4, pc}

08013b12 <__swrite>:
 8013b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b16:	461f      	mov	r7, r3
 8013b18:	898b      	ldrh	r3, [r1, #12]
 8013b1a:	05db      	lsls	r3, r3, #23
 8013b1c:	4605      	mov	r5, r0
 8013b1e:	460c      	mov	r4, r1
 8013b20:	4616      	mov	r6, r2
 8013b22:	d505      	bpl.n	8013b30 <__swrite+0x1e>
 8013b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b28:	2302      	movs	r3, #2
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	f000 f898 	bl	8013c60 <_lseek_r>
 8013b30:	89a3      	ldrh	r3, [r4, #12]
 8013b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b3a:	81a3      	strh	r3, [r4, #12]
 8013b3c:	4632      	mov	r2, r6
 8013b3e:	463b      	mov	r3, r7
 8013b40:	4628      	mov	r0, r5
 8013b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b46:	f000 b817 	b.w	8013b78 <_write_r>

08013b4a <__sseek>:
 8013b4a:	b510      	push	{r4, lr}
 8013b4c:	460c      	mov	r4, r1
 8013b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b52:	f000 f885 	bl	8013c60 <_lseek_r>
 8013b56:	1c43      	adds	r3, r0, #1
 8013b58:	89a3      	ldrh	r3, [r4, #12]
 8013b5a:	bf15      	itete	ne
 8013b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b66:	81a3      	strheq	r3, [r4, #12]
 8013b68:	bf18      	it	ne
 8013b6a:	81a3      	strhne	r3, [r4, #12]
 8013b6c:	bd10      	pop	{r4, pc}

08013b6e <__sclose>:
 8013b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b72:	f000 b831 	b.w	8013bd8 <_close_r>
	...

08013b78 <_write_r>:
 8013b78:	b538      	push	{r3, r4, r5, lr}
 8013b7a:	4d07      	ldr	r5, [pc, #28]	; (8013b98 <_write_r+0x20>)
 8013b7c:	4604      	mov	r4, r0
 8013b7e:	4608      	mov	r0, r1
 8013b80:	4611      	mov	r1, r2
 8013b82:	2200      	movs	r2, #0
 8013b84:	602a      	str	r2, [r5, #0]
 8013b86:	461a      	mov	r2, r3
 8013b88:	f7f1 f8fd 	bl	8004d86 <_write>
 8013b8c:	1c43      	adds	r3, r0, #1
 8013b8e:	d102      	bne.n	8013b96 <_write_r+0x1e>
 8013b90:	682b      	ldr	r3, [r5, #0]
 8013b92:	b103      	cbz	r3, 8013b96 <_write_r+0x1e>
 8013b94:	6023      	str	r3, [r4, #0]
 8013b96:	bd38      	pop	{r3, r4, r5, pc}
 8013b98:	24001608 	.word	0x24001608

08013b9c <__assert_func>:
 8013b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b9e:	4614      	mov	r4, r2
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	4b09      	ldr	r3, [pc, #36]	; (8013bc8 <__assert_func+0x2c>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	4605      	mov	r5, r0
 8013ba8:	68d8      	ldr	r0, [r3, #12]
 8013baa:	b14c      	cbz	r4, 8013bc0 <__assert_func+0x24>
 8013bac:	4b07      	ldr	r3, [pc, #28]	; (8013bcc <__assert_func+0x30>)
 8013bae:	9100      	str	r1, [sp, #0]
 8013bb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013bb4:	4906      	ldr	r1, [pc, #24]	; (8013bd0 <__assert_func+0x34>)
 8013bb6:	462b      	mov	r3, r5
 8013bb8:	f000 f81e 	bl	8013bf8 <fiprintf>
 8013bbc:	f000 f9f9 	bl	8013fb2 <abort>
 8013bc0:	4b04      	ldr	r3, [pc, #16]	; (8013bd4 <__assert_func+0x38>)
 8013bc2:	461c      	mov	r4, r3
 8013bc4:	e7f3      	b.n	8013bae <__assert_func+0x12>
 8013bc6:	bf00      	nop
 8013bc8:	24000238 	.word	0x24000238
 8013bcc:	08015e4c 	.word	0x08015e4c
 8013bd0:	08015e59 	.word	0x08015e59
 8013bd4:	08015e87 	.word	0x08015e87

08013bd8 <_close_r>:
 8013bd8:	b538      	push	{r3, r4, r5, lr}
 8013bda:	4d06      	ldr	r5, [pc, #24]	; (8013bf4 <_close_r+0x1c>)
 8013bdc:	2300      	movs	r3, #0
 8013bde:	4604      	mov	r4, r0
 8013be0:	4608      	mov	r0, r1
 8013be2:	602b      	str	r3, [r5, #0]
 8013be4:	f7f1 f8eb 	bl	8004dbe <_close>
 8013be8:	1c43      	adds	r3, r0, #1
 8013bea:	d102      	bne.n	8013bf2 <_close_r+0x1a>
 8013bec:	682b      	ldr	r3, [r5, #0]
 8013bee:	b103      	cbz	r3, 8013bf2 <_close_r+0x1a>
 8013bf0:	6023      	str	r3, [r4, #0]
 8013bf2:	bd38      	pop	{r3, r4, r5, pc}
 8013bf4:	24001608 	.word	0x24001608

08013bf8 <fiprintf>:
 8013bf8:	b40e      	push	{r1, r2, r3}
 8013bfa:	b503      	push	{r0, r1, lr}
 8013bfc:	4601      	mov	r1, r0
 8013bfe:	ab03      	add	r3, sp, #12
 8013c00:	4805      	ldr	r0, [pc, #20]	; (8013c18 <fiprintf+0x20>)
 8013c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c06:	6800      	ldr	r0, [r0, #0]
 8013c08:	9301      	str	r3, [sp, #4]
 8013c0a:	f000 f883 	bl	8013d14 <_vfiprintf_r>
 8013c0e:	b002      	add	sp, #8
 8013c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c14:	b003      	add	sp, #12
 8013c16:	4770      	bx	lr
 8013c18:	24000238 	.word	0x24000238

08013c1c <_fstat_r>:
 8013c1c:	b538      	push	{r3, r4, r5, lr}
 8013c1e:	4d07      	ldr	r5, [pc, #28]	; (8013c3c <_fstat_r+0x20>)
 8013c20:	2300      	movs	r3, #0
 8013c22:	4604      	mov	r4, r0
 8013c24:	4608      	mov	r0, r1
 8013c26:	4611      	mov	r1, r2
 8013c28:	602b      	str	r3, [r5, #0]
 8013c2a:	f7f1 f8d4 	bl	8004dd6 <_fstat>
 8013c2e:	1c43      	adds	r3, r0, #1
 8013c30:	d102      	bne.n	8013c38 <_fstat_r+0x1c>
 8013c32:	682b      	ldr	r3, [r5, #0]
 8013c34:	b103      	cbz	r3, 8013c38 <_fstat_r+0x1c>
 8013c36:	6023      	str	r3, [r4, #0]
 8013c38:	bd38      	pop	{r3, r4, r5, pc}
 8013c3a:	bf00      	nop
 8013c3c:	24001608 	.word	0x24001608

08013c40 <_isatty_r>:
 8013c40:	b538      	push	{r3, r4, r5, lr}
 8013c42:	4d06      	ldr	r5, [pc, #24]	; (8013c5c <_isatty_r+0x1c>)
 8013c44:	2300      	movs	r3, #0
 8013c46:	4604      	mov	r4, r0
 8013c48:	4608      	mov	r0, r1
 8013c4a:	602b      	str	r3, [r5, #0]
 8013c4c:	f7f1 f8d3 	bl	8004df6 <_isatty>
 8013c50:	1c43      	adds	r3, r0, #1
 8013c52:	d102      	bne.n	8013c5a <_isatty_r+0x1a>
 8013c54:	682b      	ldr	r3, [r5, #0]
 8013c56:	b103      	cbz	r3, 8013c5a <_isatty_r+0x1a>
 8013c58:	6023      	str	r3, [r4, #0]
 8013c5a:	bd38      	pop	{r3, r4, r5, pc}
 8013c5c:	24001608 	.word	0x24001608

08013c60 <_lseek_r>:
 8013c60:	b538      	push	{r3, r4, r5, lr}
 8013c62:	4d07      	ldr	r5, [pc, #28]	; (8013c80 <_lseek_r+0x20>)
 8013c64:	4604      	mov	r4, r0
 8013c66:	4608      	mov	r0, r1
 8013c68:	4611      	mov	r1, r2
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	602a      	str	r2, [r5, #0]
 8013c6e:	461a      	mov	r2, r3
 8013c70:	f7f1 f8cc 	bl	8004e0c <_lseek>
 8013c74:	1c43      	adds	r3, r0, #1
 8013c76:	d102      	bne.n	8013c7e <_lseek_r+0x1e>
 8013c78:	682b      	ldr	r3, [r5, #0]
 8013c7a:	b103      	cbz	r3, 8013c7e <_lseek_r+0x1e>
 8013c7c:	6023      	str	r3, [r4, #0]
 8013c7e:	bd38      	pop	{r3, r4, r5, pc}
 8013c80:	24001608 	.word	0x24001608

08013c84 <__ascii_mbtowc>:
 8013c84:	b082      	sub	sp, #8
 8013c86:	b901      	cbnz	r1, 8013c8a <__ascii_mbtowc+0x6>
 8013c88:	a901      	add	r1, sp, #4
 8013c8a:	b142      	cbz	r2, 8013c9e <__ascii_mbtowc+0x1a>
 8013c8c:	b14b      	cbz	r3, 8013ca2 <__ascii_mbtowc+0x1e>
 8013c8e:	7813      	ldrb	r3, [r2, #0]
 8013c90:	600b      	str	r3, [r1, #0]
 8013c92:	7812      	ldrb	r2, [r2, #0]
 8013c94:	1e10      	subs	r0, r2, #0
 8013c96:	bf18      	it	ne
 8013c98:	2001      	movne	r0, #1
 8013c9a:	b002      	add	sp, #8
 8013c9c:	4770      	bx	lr
 8013c9e:	4610      	mov	r0, r2
 8013ca0:	e7fb      	b.n	8013c9a <__ascii_mbtowc+0x16>
 8013ca2:	f06f 0001 	mvn.w	r0, #1
 8013ca6:	e7f8      	b.n	8013c9a <__ascii_mbtowc+0x16>

08013ca8 <__malloc_lock>:
 8013ca8:	4801      	ldr	r0, [pc, #4]	; (8013cb0 <__malloc_lock+0x8>)
 8013caa:	f7ff ba5c 	b.w	8013166 <__retarget_lock_acquire_recursive>
 8013cae:	bf00      	nop
 8013cb0:	24001600 	.word	0x24001600

08013cb4 <__malloc_unlock>:
 8013cb4:	4801      	ldr	r0, [pc, #4]	; (8013cbc <__malloc_unlock+0x8>)
 8013cb6:	f7ff ba57 	b.w	8013168 <__retarget_lock_release_recursive>
 8013cba:	bf00      	nop
 8013cbc:	24001600 	.word	0x24001600

08013cc0 <__sfputc_r>:
 8013cc0:	6893      	ldr	r3, [r2, #8]
 8013cc2:	3b01      	subs	r3, #1
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	b410      	push	{r4}
 8013cc8:	6093      	str	r3, [r2, #8]
 8013cca:	da08      	bge.n	8013cde <__sfputc_r+0x1e>
 8013ccc:	6994      	ldr	r4, [r2, #24]
 8013cce:	42a3      	cmp	r3, r4
 8013cd0:	db01      	blt.n	8013cd6 <__sfputc_r+0x16>
 8013cd2:	290a      	cmp	r1, #10
 8013cd4:	d103      	bne.n	8013cde <__sfputc_r+0x1e>
 8013cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cda:	f7fe b9b9 	b.w	8012050 <__swbuf_r>
 8013cde:	6813      	ldr	r3, [r2, #0]
 8013ce0:	1c58      	adds	r0, r3, #1
 8013ce2:	6010      	str	r0, [r2, #0]
 8013ce4:	7019      	strb	r1, [r3, #0]
 8013ce6:	4608      	mov	r0, r1
 8013ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cec:	4770      	bx	lr

08013cee <__sfputs_r>:
 8013cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cf0:	4606      	mov	r6, r0
 8013cf2:	460f      	mov	r7, r1
 8013cf4:	4614      	mov	r4, r2
 8013cf6:	18d5      	adds	r5, r2, r3
 8013cf8:	42ac      	cmp	r4, r5
 8013cfa:	d101      	bne.n	8013d00 <__sfputs_r+0x12>
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	e007      	b.n	8013d10 <__sfputs_r+0x22>
 8013d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d04:	463a      	mov	r2, r7
 8013d06:	4630      	mov	r0, r6
 8013d08:	f7ff ffda 	bl	8013cc0 <__sfputc_r>
 8013d0c:	1c43      	adds	r3, r0, #1
 8013d0e:	d1f3      	bne.n	8013cf8 <__sfputs_r+0xa>
 8013d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d14 <_vfiprintf_r>:
 8013d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d18:	460d      	mov	r5, r1
 8013d1a:	b09d      	sub	sp, #116	; 0x74
 8013d1c:	4614      	mov	r4, r2
 8013d1e:	4698      	mov	r8, r3
 8013d20:	4606      	mov	r6, r0
 8013d22:	b118      	cbz	r0, 8013d2c <_vfiprintf_r+0x18>
 8013d24:	6983      	ldr	r3, [r0, #24]
 8013d26:	b90b      	cbnz	r3, 8013d2c <_vfiprintf_r+0x18>
 8013d28:	f7ff f97a 	bl	8013020 <__sinit>
 8013d2c:	4b89      	ldr	r3, [pc, #548]	; (8013f54 <_vfiprintf_r+0x240>)
 8013d2e:	429d      	cmp	r5, r3
 8013d30:	d11b      	bne.n	8013d6a <_vfiprintf_r+0x56>
 8013d32:	6875      	ldr	r5, [r6, #4]
 8013d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d36:	07d9      	lsls	r1, r3, #31
 8013d38:	d405      	bmi.n	8013d46 <_vfiprintf_r+0x32>
 8013d3a:	89ab      	ldrh	r3, [r5, #12]
 8013d3c:	059a      	lsls	r2, r3, #22
 8013d3e:	d402      	bmi.n	8013d46 <_vfiprintf_r+0x32>
 8013d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d42:	f7ff fa10 	bl	8013166 <__retarget_lock_acquire_recursive>
 8013d46:	89ab      	ldrh	r3, [r5, #12]
 8013d48:	071b      	lsls	r3, r3, #28
 8013d4a:	d501      	bpl.n	8013d50 <_vfiprintf_r+0x3c>
 8013d4c:	692b      	ldr	r3, [r5, #16]
 8013d4e:	b9eb      	cbnz	r3, 8013d8c <_vfiprintf_r+0x78>
 8013d50:	4629      	mov	r1, r5
 8013d52:	4630      	mov	r0, r6
 8013d54:	f7fe f9ce 	bl	80120f4 <__swsetup_r>
 8013d58:	b1c0      	cbz	r0, 8013d8c <_vfiprintf_r+0x78>
 8013d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d5c:	07dc      	lsls	r4, r3, #31
 8013d5e:	d50e      	bpl.n	8013d7e <_vfiprintf_r+0x6a>
 8013d60:	f04f 30ff 	mov.w	r0, #4294967295
 8013d64:	b01d      	add	sp, #116	; 0x74
 8013d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6a:	4b7b      	ldr	r3, [pc, #492]	; (8013f58 <_vfiprintf_r+0x244>)
 8013d6c:	429d      	cmp	r5, r3
 8013d6e:	d101      	bne.n	8013d74 <_vfiprintf_r+0x60>
 8013d70:	68b5      	ldr	r5, [r6, #8]
 8013d72:	e7df      	b.n	8013d34 <_vfiprintf_r+0x20>
 8013d74:	4b79      	ldr	r3, [pc, #484]	; (8013f5c <_vfiprintf_r+0x248>)
 8013d76:	429d      	cmp	r5, r3
 8013d78:	bf08      	it	eq
 8013d7a:	68f5      	ldreq	r5, [r6, #12]
 8013d7c:	e7da      	b.n	8013d34 <_vfiprintf_r+0x20>
 8013d7e:	89ab      	ldrh	r3, [r5, #12]
 8013d80:	0598      	lsls	r0, r3, #22
 8013d82:	d4ed      	bmi.n	8013d60 <_vfiprintf_r+0x4c>
 8013d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d86:	f7ff f9ef 	bl	8013168 <__retarget_lock_release_recursive>
 8013d8a:	e7e9      	b.n	8013d60 <_vfiprintf_r+0x4c>
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8013d90:	2320      	movs	r3, #32
 8013d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d9a:	2330      	movs	r3, #48	; 0x30
 8013d9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013f60 <_vfiprintf_r+0x24c>
 8013da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013da4:	f04f 0901 	mov.w	r9, #1
 8013da8:	4623      	mov	r3, r4
 8013daa:	469a      	mov	sl, r3
 8013dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013db0:	b10a      	cbz	r2, 8013db6 <_vfiprintf_r+0xa2>
 8013db2:	2a25      	cmp	r2, #37	; 0x25
 8013db4:	d1f9      	bne.n	8013daa <_vfiprintf_r+0x96>
 8013db6:	ebba 0b04 	subs.w	fp, sl, r4
 8013dba:	d00b      	beq.n	8013dd4 <_vfiprintf_r+0xc0>
 8013dbc:	465b      	mov	r3, fp
 8013dbe:	4622      	mov	r2, r4
 8013dc0:	4629      	mov	r1, r5
 8013dc2:	4630      	mov	r0, r6
 8013dc4:	f7ff ff93 	bl	8013cee <__sfputs_r>
 8013dc8:	3001      	adds	r0, #1
 8013dca:	f000 80aa 	beq.w	8013f22 <_vfiprintf_r+0x20e>
 8013dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dd0:	445a      	add	r2, fp
 8013dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8013dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	f000 80a2 	beq.w	8013f22 <_vfiprintf_r+0x20e>
 8013dde:	2300      	movs	r3, #0
 8013de0:	f04f 32ff 	mov.w	r2, #4294967295
 8013de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013de8:	f10a 0a01 	add.w	sl, sl, #1
 8013dec:	9304      	str	r3, [sp, #16]
 8013dee:	9307      	str	r3, [sp, #28]
 8013df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013df4:	931a      	str	r3, [sp, #104]	; 0x68
 8013df6:	4654      	mov	r4, sl
 8013df8:	2205      	movs	r2, #5
 8013dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dfe:	4858      	ldr	r0, [pc, #352]	; (8013f60 <_vfiprintf_r+0x24c>)
 8013e00:	f7ec fa76 	bl	80002f0 <memchr>
 8013e04:	9a04      	ldr	r2, [sp, #16]
 8013e06:	b9d8      	cbnz	r0, 8013e40 <_vfiprintf_r+0x12c>
 8013e08:	06d1      	lsls	r1, r2, #27
 8013e0a:	bf44      	itt	mi
 8013e0c:	2320      	movmi	r3, #32
 8013e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e12:	0713      	lsls	r3, r2, #28
 8013e14:	bf44      	itt	mi
 8013e16:	232b      	movmi	r3, #43	; 0x2b
 8013e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8013e20:	2b2a      	cmp	r3, #42	; 0x2a
 8013e22:	d015      	beq.n	8013e50 <_vfiprintf_r+0x13c>
 8013e24:	9a07      	ldr	r2, [sp, #28]
 8013e26:	4654      	mov	r4, sl
 8013e28:	2000      	movs	r0, #0
 8013e2a:	f04f 0c0a 	mov.w	ip, #10
 8013e2e:	4621      	mov	r1, r4
 8013e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e34:	3b30      	subs	r3, #48	; 0x30
 8013e36:	2b09      	cmp	r3, #9
 8013e38:	d94e      	bls.n	8013ed8 <_vfiprintf_r+0x1c4>
 8013e3a:	b1b0      	cbz	r0, 8013e6a <_vfiprintf_r+0x156>
 8013e3c:	9207      	str	r2, [sp, #28]
 8013e3e:	e014      	b.n	8013e6a <_vfiprintf_r+0x156>
 8013e40:	eba0 0308 	sub.w	r3, r0, r8
 8013e44:	fa09 f303 	lsl.w	r3, r9, r3
 8013e48:	4313      	orrs	r3, r2
 8013e4a:	9304      	str	r3, [sp, #16]
 8013e4c:	46a2      	mov	sl, r4
 8013e4e:	e7d2      	b.n	8013df6 <_vfiprintf_r+0xe2>
 8013e50:	9b03      	ldr	r3, [sp, #12]
 8013e52:	1d19      	adds	r1, r3, #4
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	9103      	str	r1, [sp, #12]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	bfbb      	ittet	lt
 8013e5c:	425b      	neglt	r3, r3
 8013e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8013e62:	9307      	strge	r3, [sp, #28]
 8013e64:	9307      	strlt	r3, [sp, #28]
 8013e66:	bfb8      	it	lt
 8013e68:	9204      	strlt	r2, [sp, #16]
 8013e6a:	7823      	ldrb	r3, [r4, #0]
 8013e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8013e6e:	d10c      	bne.n	8013e8a <_vfiprintf_r+0x176>
 8013e70:	7863      	ldrb	r3, [r4, #1]
 8013e72:	2b2a      	cmp	r3, #42	; 0x2a
 8013e74:	d135      	bne.n	8013ee2 <_vfiprintf_r+0x1ce>
 8013e76:	9b03      	ldr	r3, [sp, #12]
 8013e78:	1d1a      	adds	r2, r3, #4
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	9203      	str	r2, [sp, #12]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	bfb8      	it	lt
 8013e82:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e86:	3402      	adds	r4, #2
 8013e88:	9305      	str	r3, [sp, #20]
 8013e8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013f70 <_vfiprintf_r+0x25c>
 8013e8e:	7821      	ldrb	r1, [r4, #0]
 8013e90:	2203      	movs	r2, #3
 8013e92:	4650      	mov	r0, sl
 8013e94:	f7ec fa2c 	bl	80002f0 <memchr>
 8013e98:	b140      	cbz	r0, 8013eac <_vfiprintf_r+0x198>
 8013e9a:	2340      	movs	r3, #64	; 0x40
 8013e9c:	eba0 000a 	sub.w	r0, r0, sl
 8013ea0:	fa03 f000 	lsl.w	r0, r3, r0
 8013ea4:	9b04      	ldr	r3, [sp, #16]
 8013ea6:	4303      	orrs	r3, r0
 8013ea8:	3401      	adds	r4, #1
 8013eaa:	9304      	str	r3, [sp, #16]
 8013eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eb0:	482c      	ldr	r0, [pc, #176]	; (8013f64 <_vfiprintf_r+0x250>)
 8013eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013eb6:	2206      	movs	r2, #6
 8013eb8:	f7ec fa1a 	bl	80002f0 <memchr>
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d03f      	beq.n	8013f40 <_vfiprintf_r+0x22c>
 8013ec0:	4b29      	ldr	r3, [pc, #164]	; (8013f68 <_vfiprintf_r+0x254>)
 8013ec2:	bb1b      	cbnz	r3, 8013f0c <_vfiprintf_r+0x1f8>
 8013ec4:	9b03      	ldr	r3, [sp, #12]
 8013ec6:	3307      	adds	r3, #7
 8013ec8:	f023 0307 	bic.w	r3, r3, #7
 8013ecc:	3308      	adds	r3, #8
 8013ece:	9303      	str	r3, [sp, #12]
 8013ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ed2:	443b      	add	r3, r7
 8013ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8013ed6:	e767      	b.n	8013da8 <_vfiprintf_r+0x94>
 8013ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013edc:	460c      	mov	r4, r1
 8013ede:	2001      	movs	r0, #1
 8013ee0:	e7a5      	b.n	8013e2e <_vfiprintf_r+0x11a>
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	3401      	adds	r4, #1
 8013ee6:	9305      	str	r3, [sp, #20]
 8013ee8:	4619      	mov	r1, r3
 8013eea:	f04f 0c0a 	mov.w	ip, #10
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ef4:	3a30      	subs	r2, #48	; 0x30
 8013ef6:	2a09      	cmp	r2, #9
 8013ef8:	d903      	bls.n	8013f02 <_vfiprintf_r+0x1ee>
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d0c5      	beq.n	8013e8a <_vfiprintf_r+0x176>
 8013efe:	9105      	str	r1, [sp, #20]
 8013f00:	e7c3      	b.n	8013e8a <_vfiprintf_r+0x176>
 8013f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f06:	4604      	mov	r4, r0
 8013f08:	2301      	movs	r3, #1
 8013f0a:	e7f0      	b.n	8013eee <_vfiprintf_r+0x1da>
 8013f0c:	ab03      	add	r3, sp, #12
 8013f0e:	9300      	str	r3, [sp, #0]
 8013f10:	462a      	mov	r2, r5
 8013f12:	4b16      	ldr	r3, [pc, #88]	; (8013f6c <_vfiprintf_r+0x258>)
 8013f14:	a904      	add	r1, sp, #16
 8013f16:	4630      	mov	r0, r6
 8013f18:	f7fd fc72 	bl	8011800 <_printf_float>
 8013f1c:	4607      	mov	r7, r0
 8013f1e:	1c78      	adds	r0, r7, #1
 8013f20:	d1d6      	bne.n	8013ed0 <_vfiprintf_r+0x1bc>
 8013f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f24:	07d9      	lsls	r1, r3, #31
 8013f26:	d405      	bmi.n	8013f34 <_vfiprintf_r+0x220>
 8013f28:	89ab      	ldrh	r3, [r5, #12]
 8013f2a:	059a      	lsls	r2, r3, #22
 8013f2c:	d402      	bmi.n	8013f34 <_vfiprintf_r+0x220>
 8013f2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f30:	f7ff f91a 	bl	8013168 <__retarget_lock_release_recursive>
 8013f34:	89ab      	ldrh	r3, [r5, #12]
 8013f36:	065b      	lsls	r3, r3, #25
 8013f38:	f53f af12 	bmi.w	8013d60 <_vfiprintf_r+0x4c>
 8013f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f3e:	e711      	b.n	8013d64 <_vfiprintf_r+0x50>
 8013f40:	ab03      	add	r3, sp, #12
 8013f42:	9300      	str	r3, [sp, #0]
 8013f44:	462a      	mov	r2, r5
 8013f46:	4b09      	ldr	r3, [pc, #36]	; (8013f6c <_vfiprintf_r+0x258>)
 8013f48:	a904      	add	r1, sp, #16
 8013f4a:	4630      	mov	r0, r6
 8013f4c:	f7fd fee4 	bl	8011d18 <_printf_i>
 8013f50:	e7e4      	b.n	8013f1c <_vfiprintf_r+0x208>
 8013f52:	bf00      	nop
 8013f54:	08015cac 	.word	0x08015cac
 8013f58:	08015ccc 	.word	0x08015ccc
 8013f5c:	08015c8c 	.word	0x08015c8c
 8013f60:	08015e92 	.word	0x08015e92
 8013f64:	08015e9c 	.word	0x08015e9c
 8013f68:	08011801 	.word	0x08011801
 8013f6c:	08013cef 	.word	0x08013cef
 8013f70:	08015e98 	.word	0x08015e98

08013f74 <_read_r>:
 8013f74:	b538      	push	{r3, r4, r5, lr}
 8013f76:	4d07      	ldr	r5, [pc, #28]	; (8013f94 <_read_r+0x20>)
 8013f78:	4604      	mov	r4, r0
 8013f7a:	4608      	mov	r0, r1
 8013f7c:	4611      	mov	r1, r2
 8013f7e:	2200      	movs	r2, #0
 8013f80:	602a      	str	r2, [r5, #0]
 8013f82:	461a      	mov	r2, r3
 8013f84:	f7f0 fee2 	bl	8004d4c <_read>
 8013f88:	1c43      	adds	r3, r0, #1
 8013f8a:	d102      	bne.n	8013f92 <_read_r+0x1e>
 8013f8c:	682b      	ldr	r3, [r5, #0]
 8013f8e:	b103      	cbz	r3, 8013f92 <_read_r+0x1e>
 8013f90:	6023      	str	r3, [r4, #0]
 8013f92:	bd38      	pop	{r3, r4, r5, pc}
 8013f94:	24001608 	.word	0x24001608

08013f98 <__ascii_wctomb>:
 8013f98:	b149      	cbz	r1, 8013fae <__ascii_wctomb+0x16>
 8013f9a:	2aff      	cmp	r2, #255	; 0xff
 8013f9c:	bf85      	ittet	hi
 8013f9e:	238a      	movhi	r3, #138	; 0x8a
 8013fa0:	6003      	strhi	r3, [r0, #0]
 8013fa2:	700a      	strbls	r2, [r1, #0]
 8013fa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8013fa8:	bf98      	it	ls
 8013faa:	2001      	movls	r0, #1
 8013fac:	4770      	bx	lr
 8013fae:	4608      	mov	r0, r1
 8013fb0:	4770      	bx	lr

08013fb2 <abort>:
 8013fb2:	b508      	push	{r3, lr}
 8013fb4:	2006      	movs	r0, #6
 8013fb6:	f000 f82b 	bl	8014010 <raise>
 8013fba:	2001      	movs	r0, #1
 8013fbc:	f7f0 febc 	bl	8004d38 <_exit>

08013fc0 <_raise_r>:
 8013fc0:	291f      	cmp	r1, #31
 8013fc2:	b538      	push	{r3, r4, r5, lr}
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	460d      	mov	r5, r1
 8013fc8:	d904      	bls.n	8013fd4 <_raise_r+0x14>
 8013fca:	2316      	movs	r3, #22
 8013fcc:	6003      	str	r3, [r0, #0]
 8013fce:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd2:	bd38      	pop	{r3, r4, r5, pc}
 8013fd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013fd6:	b112      	cbz	r2, 8013fde <_raise_r+0x1e>
 8013fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013fdc:	b94b      	cbnz	r3, 8013ff2 <_raise_r+0x32>
 8013fde:	4620      	mov	r0, r4
 8013fe0:	f000 f830 	bl	8014044 <_getpid_r>
 8013fe4:	462a      	mov	r2, r5
 8013fe6:	4601      	mov	r1, r0
 8013fe8:	4620      	mov	r0, r4
 8013fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fee:	f000 b817 	b.w	8014020 <_kill_r>
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	d00a      	beq.n	801400c <_raise_r+0x4c>
 8013ff6:	1c59      	adds	r1, r3, #1
 8013ff8:	d103      	bne.n	8014002 <_raise_r+0x42>
 8013ffa:	2316      	movs	r3, #22
 8013ffc:	6003      	str	r3, [r0, #0]
 8013ffe:	2001      	movs	r0, #1
 8014000:	e7e7      	b.n	8013fd2 <_raise_r+0x12>
 8014002:	2400      	movs	r4, #0
 8014004:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014008:	4628      	mov	r0, r5
 801400a:	4798      	blx	r3
 801400c:	2000      	movs	r0, #0
 801400e:	e7e0      	b.n	8013fd2 <_raise_r+0x12>

08014010 <raise>:
 8014010:	4b02      	ldr	r3, [pc, #8]	; (801401c <raise+0xc>)
 8014012:	4601      	mov	r1, r0
 8014014:	6818      	ldr	r0, [r3, #0]
 8014016:	f7ff bfd3 	b.w	8013fc0 <_raise_r>
 801401a:	bf00      	nop
 801401c:	24000238 	.word	0x24000238

08014020 <_kill_r>:
 8014020:	b538      	push	{r3, r4, r5, lr}
 8014022:	4d07      	ldr	r5, [pc, #28]	; (8014040 <_kill_r+0x20>)
 8014024:	2300      	movs	r3, #0
 8014026:	4604      	mov	r4, r0
 8014028:	4608      	mov	r0, r1
 801402a:	4611      	mov	r1, r2
 801402c:	602b      	str	r3, [r5, #0]
 801402e:	f7f0 fe73 	bl	8004d18 <_kill>
 8014032:	1c43      	adds	r3, r0, #1
 8014034:	d102      	bne.n	801403c <_kill_r+0x1c>
 8014036:	682b      	ldr	r3, [r5, #0]
 8014038:	b103      	cbz	r3, 801403c <_kill_r+0x1c>
 801403a:	6023      	str	r3, [r4, #0]
 801403c:	bd38      	pop	{r3, r4, r5, pc}
 801403e:	bf00      	nop
 8014040:	24001608 	.word	0x24001608

08014044 <_getpid_r>:
 8014044:	f7f0 be60 	b.w	8004d08 <_getpid>

08014048 <_init>:
 8014048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801404a:	bf00      	nop
 801404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801404e:	bc08      	pop	{r3}
 8014050:	469e      	mov	lr, r3
 8014052:	4770      	bx	lr

08014054 <_fini>:
 8014054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014056:	bf00      	nop
 8014058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801405a:	bc08      	pop	{r3}
 801405c:	469e      	mov	lr, r3
 801405e:	4770      	bx	lr
