
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f0c  08014cf8  08014cf8  00024cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016c04  08016c04  00026c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08016c0c  08016c0c  00026c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08016c14  08016c14  00026c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000418  24000000  08016c1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001348  24000418  08017034  00030418  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001760  08017034  00031760  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c5f0  00000000  00000000  00030446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004a0e  00000000  00000000  0005ca36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f0  00000000  00000000  00061448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001628  00000000  00000000  00062c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e55a  00000000  00000000  00064260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024ed3  00000000  00000000  000a27ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016de37  00000000  00000000  000c768d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002354c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007660  00000000  00000000  00235514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000418 	.word	0x24000418
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ce0 	.word	0x08014ce0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400041c 	.word	0x2400041c
 80002dc:	08014ce0 	.word	0x08014ce0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	this->address = _address;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	729a      	strb	r2, [r3, #10]
}
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f103 010a 	add.w	r1, r3, #10
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	f00e f9e0 	bl	800eaac <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 010c 	add.w	r1, r3, #12
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2202      	movs	r2, #2
 80006fa:	f00e fa6d 	bl	800ebd8 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	899b      	ldrh	r3, [r3, #12]
 800071a:	b21b      	sxth	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	0bdb      	lsrs	r3, r3, #15
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	765a      	strb	r2, [r3, #25]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000740:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	737b      	strb	r3, [r7, #13]
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	2b05      	cmp	r3, #5
 8000766:	d821      	bhi.n	80007ac <_ZN5AMT2117AMT21_Check_ValueEv+0x7c>
		this->uart_buf = this->uart_buf >> 2;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b25a      	sxtb	r2, r3
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	4053      	eors	r3, r2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	b29b      	uxth	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079e:	4053      	eors	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	3301      	adds	r3, #1
 80007a8:	737b      	strb	r3, [r7, #13]
 80007aa:	e7da      	b.n	8000762 <_ZN5AMT2117AMT21_Check_ValueEv+0x32>
	}
	k0_check = !k0_check;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf0c      	ite	eq
 80007b2:	2301      	moveq	r3, #1
 80007b4:	2300      	movne	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7e1b      	ldrb	r3, [r3, #24]
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d10a      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7e5b      	ldrb	r3, [r3, #25]
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d105      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
		this->raw_value = raw_value_temp;
 80007dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e003      	b.n	80007f0 <_ZN5AMT2117AMT21_Check_ValueEv+0xc0>
	} else {
		this->raw_value = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
	}
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800080a:	135b      	asrs	r3, r3, #13
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29b      	uxth	r3, r3
			+ (this->raw_value & 0x3FFF)) * -1;
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000824:	b29b      	uxth	r3, r3
 8000826:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800082a:	b29b      	uxth	r3, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	b21b      	sxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	db0b      	blt.n	800087a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000870:	1ad2      	subs	r2, r2, r3
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZN5AMT216unwarpEv+0xa0>)
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e020      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800088e:	dc0c      	bgt.n	80008aa <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e008      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	441a      	add	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	615a      	str	r2, [r3, #20]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	ffffc001 	.word	0xffffc001

080008e4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>:
 *  Created on: Apr 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AS5047UABI.h"

AS5047UABI::AS5047UABI(TIM_HandleTypeDef *_enc_htim, uint32_t _ENC_TIM_CHANNEL1, uint32_t _ENC_TIM_CHANNEL2){
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2204      	movs	r2, #4
 800092e:	735a      	strb	r2, [r3, #13]
	this->enc_htim = _enc_htim;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	601a      	str	r2, [r3, #0]
	this->ENC_TIM_CHANNEL1 = _ENC_TIM_CHANNEL1;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	this->ENC_TIM_CHANNEL2 = _ENC_TIM_CHANNEL2;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	609a      	str	r2, [r3, #8]
}
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_ZN10AS5047UABID1Ev>:
AS5047UABI::~AS5047UABI(){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

}
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_ZN10AS5047UABI17EncoderReadEnableEv>:
void AS5047UABI::EncoderReadEnable(){
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f00c ff07 	bl	800d78c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL2);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f00c feff 	bl	800d78c <HAL_TIM_Encoder_Start>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZN10AS5047UABI7setZeroEv>:
void AS5047UABI::EncoderReadDisable(){
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL1);
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL2);
}
void AS5047UABI::setZero(){
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	this->enc_htim->Instance->CNT = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <_ZN10AS5047UABI11getDegAngleEv>:
uint16_t AS5047UABI::getRawCounter(){
	return this->enc_htim->Instance->CNT;
}
float AS5047UABI::getDegAngle(){
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	int i = this->enc_htim->Instance->CNT ;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	60fb      	str	r3, [r7, #12]
	int x = this->enc_htim->Instance->CNT / 1000;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <_ZN10AS5047UABI11getDegAngleEv+0x3c>)
 80009d0:	fba2 2303 	umull	r2, r3, r2, r3
 80009d4:	099b      	lsrs	r3, r3, #6
 80009d6:	60bb      	str	r3, [r7, #8]
	return (float)i;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	ee07 3a90 	vmov	s15, r3
 80009de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80009e2:	eeb0 0a67 	vmov.f32	s0, s15
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	10624dd3 	.word	0x10624dd3
 80009f4:	00000000 	.word	0x00000000

080009f8 <_ZN10AS5047UABI12getMRadAngleEv>:
	int i = this->enc_htim->Instance->CNT ;
	int x = this->enc_htim->Instance->CNT / 1000;

	return (float)((1-x)*i*0.00314) + (x*(i-1998)*0.003146293);
}
float AS5047UABI::getMRadAngle(){
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	int i = this->enc_htim->Instance->CNT ;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a08:	60fb      	str	r3, [r7, #12]
	int x = this->enc_htim->Instance->CNT / 1000;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a12:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <_ZN10AS5047UABI12getMRadAngleEv+0x90>)
 8000a14:	fba2 2303 	umull	r2, r3, r2, r3
 8000a18:	099b      	lsrs	r3, r3, #6
 8000a1a:	60bb      	str	r3, [r7, #8]
	return (float)((1-x)*i*3.14) + (x*(i-1998)*3.146293);
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	f1c3 0301 	rsb	r3, r3, #1
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	fb02 f303 	mul.w	r3, r2, r3
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a30:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000a78 <_ZN10AS5047UABI12getMRadAngleEv+0x80>
 8000a34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f2a3 73ce 	subw	r3, r3, #1998	; 0x7ce
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a54:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000a80 <_ZN10AS5047UABI12getMRadAngleEv+0x88>
 8000a58:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8000a64:	eeb0 0a67 	vmov.f32	s0, s15
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	f3af 8000 	nop.w
 8000a78:	51eb851f 	.word	0x51eb851f
 8000a7c:	40091eb8 	.word	0x40091eb8
 8000a80:	aa1511e0 	.word	0xaa1511e0
 8000a84:	40092b9b 	.word	0x40092b9b
 8000a88:	10624dd3 	.word	0x10624dd3

08000a8c <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a96:	edc7 0a00 	vstr	s1, [r7]
 8000a9a:	edd7 0a00 	vldr	s1, [r7]
 8000a9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000aa2:	f010 fcbd 	bl	8011420 <atan2f>
 8000aa6:	eef0 7a40 	vmov.f32	s15, s0
 8000aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	ed87 0a01 	vstr	s0, [r7, #4]
 8000abe:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ac2:	f010 fcaf 	bl	8011424 <sqrtf>
 8000ac6:	eef0 7a40 	vmov.f32	s15, s0
 8000aca:	eeb0 0a67 	vmov.f32	s0, s15
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <_ZN10RobotJointC1Ev+0xd4>)
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	edd3 7a00 	vldr	s15, [r3]
 8000ae8:	2002      	movs	r0, #2
 8000aea:	eeb0 0a67 	vmov.f32	s0, s15
 8000aee:	f000 fda0 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000af2:	eeb0 7b40 	vmov.f64	d7, d0
 8000af6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	edc3 7a01 	vstr	s15, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	edd3 7a00 	vldr	s15, [r3]
 8000b06:	2003      	movs	r0, #3
 8000b08:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0c:	f000 fd91 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000b10:	eeb0 7b40 	vmov.f64	d7, d0
 8000b14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	edc3 7a02 	vstr	s15, [r3, #8]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	edd3 7a00 	vldr	s15, [r3]
 8000b24:	2004      	movs	r0, #4
 8000b26:	eeb0 0a67 	vmov.f32	s0, s15
 8000b2a:	f000 fd82 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000b2e:	eeb0 7b40 	vmov.f64	d7, d0
 8000b32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	edc3 7a03 	vstr	s15, [r3, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f04f 0200 	mov.w	r2, #0
 8000b4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b56:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f04f 0200 	mov.w	r2, #0
 8000b60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <_ZN10RobotJointC1Ev+0xd8>)
 8000b90:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <_ZN10RobotJointC1Ev+0xd4>)
 8000b98:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	3a83126f 	.word	0x3a83126f
 8000bac:	3dcccccd 	.word	0x3dcccccd

08000bb0 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

}
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
					/ (L3S3 * this->L12)) * 1000.0;
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
}
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000bc6:	b480      	push	{r7}
 8000bc8:	b091      	sub	sp, #68	; 0x44
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	61f8      	str	r0, [r7, #28]
 8000bce:	ed87 0a06 	vstr	s0, [r7, #24]
 8000bd2:	edc7 0a05 	vstr	s1, [r7, #20]
 8000bd6:	ed87 1a04 	vstr	s2, [r7, #16]
 8000bda:	edc7 1a03 	vstr	s3, [r7, #12]
 8000bde:	ed87 2a02 	vstr	s4, [r7, #8]
 8000be2:	edc7 2a01 	vstr	s5, [r7, #4]
 8000be6:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000bfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bfe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000c0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c18:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000c20:	edd7 6a01 	vldr	s13, [r7, #4]
 8000c24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c34:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000c38:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000c40:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c48:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000c4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c50:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000c60:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000c6c:	ed97 7a00 	vldr	s14, [r7]
 8000c70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c78:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000c7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000c88:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c90:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c98:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000c9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ca0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ca4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cac:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000cb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cbc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000cc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000cdc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000ce8:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000cec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000cf8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000cfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d00:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000d04:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000d08:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d0c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d10:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d1c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d28:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000d2c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000d3e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d46:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000d4a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000d4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d56:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d5a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d62:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000d66:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000d6a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d6e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d72:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d76:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d7a:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000d7e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000d82:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000d98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000da0:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000da4:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000da8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000db4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000db8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dbc:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000dc0:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000dc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000dc8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000dcc:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dd0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000dd4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000dd8:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000ddc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000de0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de4:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000de8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000df0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000e02:	bf00      	nop
 8000e04:	3744      	adds	r7, #68	; 0x44
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	ed2d 8b08 	vpush	{d8-d11}
 8000e14:	b08a      	sub	sp, #40	; 0x28
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e2c:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e34:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000e3c:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000e44:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000e4c:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000e54:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000e5c:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	ed93 7a00 	vldr	s14, [r3]
 8000e64:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e74:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000e78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e7c:	edd7 7a00 	vldr	s15, [r7]
 8000e80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	edd3 6a00 	vldr	s13, [r3]
 8000e8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e96:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	ed93 7a00 	vldr	s14, [r3]
 8000ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ea8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb8:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	2004      	movs	r0, #4
 8000ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec8:	f000 fbb3 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ecc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ed0:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000ed4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000ed8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000edc:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	ed93 7a00 	vldr	s14, [r3]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	edd3 5a00 	vldr	s11, [r3]
 8000eec:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ef0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000ef4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ef8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f04:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f08:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	edd3 6a00 	vldr	s13, [r3]
 8000f1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000f2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f32:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edd3 7a00 	vldr	s15, [r3]
 8000f3c:	2004      	movs	r0, #4
 8000f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f42:	f000 fb76 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f46:	eeb0 7b40 	vmov.f64	d7, d0
 8000f4a:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000f4e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f56:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	ed93 7a00 	vldr	s14, [r3]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edd3 5a00 	vldr	s11, [r3]
 8000f66:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f6a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000f6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f72:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f7e:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f82:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8000f86:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000f8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8000f94:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f98:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8000f9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	2003      	movs	r0, #3
 8000fac:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb0:	f000 fb3f 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fb4:	eeb0 7b40 	vmov.f64	d7, d0
 8000fb8:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000fbc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000fc0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	ed93 7a00 	vldr	s14, [r3]
 8000fca:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fd6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fda:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fe2:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 8000fe6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fea:	edd7 7a00 	vldr	s15, [r7]
 8000fee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 5a00 	vldr	s11, [r3]
 8000ff8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ffc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001004:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001008:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800100c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001010:	edd7 7a02 	vldr	s15, [r7, #8]
 8001014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	edd3 6a00 	vldr	s13, [r3]
 800101e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800102e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001032:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	2004      	movs	r0, #4
 800103e:	eeb0 0a67 	vmov.f32	s0, s15
 8001042:	f000 faf6 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001046:	eeb0 7b40 	vmov.f64	d7, d0
 800104a:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800104e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001052:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001056:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	ed93 7a00 	vldr	s14, [r3]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	edd3 5a00 	vldr	s11, [r3]
 8001066:	edd7 7a04 	vldr	s15, [r7, #16]
 800106a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800106e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001072:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107e:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001082:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001086:	ee38 7b47 	vsub.f64	d7, d8, d7
 800108a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	ed93 7a00 	vldr	s14, [r3]
 800109a:	edd7 7a05 	vldr	s15, [r7, #20]
 800109e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80010a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010aa:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80010ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	2004      	movs	r0, #4
 80010be:	eeb0 0a67 	vmov.f32	s0, s15
 80010c2:	f000 fab6 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010c6:	eeb0 7b40 	vmov.f64	d7, d0
 80010ca:	ee29 6b07 	vmul.f64	d6, d9, d7
 80010ce:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d6:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	ed93 7a00 	vldr	s14, [r3]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edd3 5a00 	vldr	s11, [r3]
 80010e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ea:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f2:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80010f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fe:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001102:	ed97 7a07 	vldr	s14, [r7, #28]
 8001106:	edd7 7a02 	vldr	s15, [r7, #8]
 800110a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	edd3 6a00 	vldr	s13, [r3]
 8001114:	edd7 7a05 	vldr	s15, [r7, #20]
 8001118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001120:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001124:	edd7 7a03 	vldr	s15, [r7, #12]
 8001128:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	2004      	movs	r0, #4
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	f000 fa7b 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800113c:	eeb0 7b40 	vmov.f64	d7, d0
 8001140:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001144:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001148:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800114c:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	ed93 7a00 	vldr	s14, [r3]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	edd3 5a00 	vldr	s11, [r3]
 800115c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001160:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001164:	edd7 7a06 	vldr	s15, [r7, #24]
 8001168:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800116c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001170:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001174:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001178:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800117c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001180:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001184:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	ed93 7a00 	vldr	s14, [r3]
 800118e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001196:	edd7 7a07 	vldr	s15, [r7, #28]
 800119a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	2004      	movs	r0, #4
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	f000 fa3c 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011ba:	eeb0 7b40 	vmov.f64	d7, d0
 80011be:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80011c2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ca:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a00 	vldr	s14, [r3]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	edd3 5a00 	vldr	s11, [r3]
 80011da:	edd7 7a04 	vldr	s15, [r7, #16]
 80011de:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80011e6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f2:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011f6:	ee28 7b07 	vmul.f64	d7, d8, d7
 80011fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	ed93 7a00 	vldr	s14, [r3]
 800120a:	edd7 7a05 	vldr	s15, [r7, #20]
 800120e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001212:	edd7 7a07 	vldr	s15, [r7, #28]
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800121e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001222:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	2004      	movs	r0, #4
 800122e:	eeb0 0a67 	vmov.f32	s0, s15
 8001232:	f000 f9fe 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001236:	eeb0 7b40 	vmov.f64	d7, d0
 800123a:	ee29 6b07 	vmul.f64	d6, d9, d7
 800123e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001242:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001246:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	edd3 5a00 	vldr	s11, [r3]
 8001256:	edd7 7a04 	vldr	s15, [r7, #16]
 800125a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800125e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001262:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800126e:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001272:	ed97 7a07 	vldr	s14, [r7, #28]
 8001276:	edd7 7a02 	vldr	s15, [r7, #8]
 800127a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edd3 6a00 	vldr	s13, [r3]
 8001284:	edd7 7a05 	vldr	s15, [r7, #20]
 8001288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001290:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001294:	edd7 7a03 	vldr	s15, [r7, #12]
 8001298:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	2004      	movs	r0, #4
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	f000 f9c3 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012ac:	eeb0 7b40 	vmov.f64	d7, d0
 80012b0:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80012b4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012bc:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	ed93 7a00 	vldr	s14, [r3]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 5a00 	vldr	s11, [r3]
 80012cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80012d8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e4:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012e8:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80012ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012f0:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012f4:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80012f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	2003      	movs	r0, #3
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	f000 f991 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001310:	eeb0 7b40 	vmov.f64	d7, d0
 8001314:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001318:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800131c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	edd7 7a04 	vldr	s15, [r7, #16]
 800132a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001332:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001336:	edd7 7a06 	vldr	s15, [r7, #24]
 800133a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800133e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001342:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001346:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	ed93 7a00 	vldr	s14, [r3]
 8001356:	edd7 7a04 	vldr	s15, [r7, #16]
 800135a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800136a:	edd7 7a03 	vldr	s15, [r7, #12]
 800136e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	2003      	movs	r0, #3
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	f000 f958 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001382:	eeb0 7b40 	vmov.f64	d7, d0
 8001386:	ee29 6b07 	vmul.f64	d6, d9, d7
 800138a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800138e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001392:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001396:	edd7 7a03 	vldr	s15, [r7, #12]
 800139a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	2003      	movs	r0, #3
 80013a6:	eeb0 0a67 	vmov.f32	s0, s15
 80013aa:	f000 f942 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013ae:	eeb0 7b40 	vmov.f64	d7, d0
 80013b2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80013ba:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	ed93 7a00 	vldr	s14, [r3]
 80013c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013dc:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80013f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80013fe:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	2004      	movs	r0, #4
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	f000 f910 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001412:	eeb0 7b40 	vmov.f64	d7, d0
 8001416:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800141a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800141e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001422:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	edd3 5a00 	vldr	s11, [r3]
 8001432:	edd7 7a04 	vldr	s15, [r7, #16]
 8001436:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800143a:	edd7 7a06 	vldr	s15, [r7, #24]
 800143e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001446:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800144a:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800144e:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001452:	ed97 7a07 	vldr	s14, [r7, #28]
 8001456:	edd7 7a02 	vldr	s15, [r7, #8]
 800145a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	edd3 6a00 	vldr	s13, [r3]
 8001464:	edd7 7a05 	vldr	s15, [r7, #20]
 8001468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001474:	edd7 7a03 	vldr	s15, [r7, #12]
 8001478:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	2004      	movs	r0, #4
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	f000 f8d3 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800148c:	eeb0 7b40 	vmov.f64	d7, d0
 8001490:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001494:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001498:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800149c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	ed93 7a00 	vldr	s14, [r3]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edd3 5a00 	vldr	s11, [r3]
 80014ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80014b0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80014b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014c4:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014c8:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80014cc:	ee38 7b47 	vsub.f64	d7, d8, d7
 80014d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80014da:	edd7 7a04 	vldr	s15, [r7, #16]
 80014de:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80014e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	2002      	movs	r0, #2
 80014f2:	eeb0 0a67 	vmov.f32	s0, s15
 80014f6:	f000 f89c 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014fa:	eeb0 7b40 	vmov.f64	d7, d0
 80014fe:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001502:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001506:	edd7 7a03 	vldr	s15, [r7, #12]
 800150a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	2003      	movs	r0, #3
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	f000 f88a 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800151e:	eeb0 7b40 	vmov.f64	d7, d0
 8001522:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001526:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800152a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	ed93 7a00 	vldr	s14, [r3]
 8001534:	edd7 7a04 	vldr	s15, [r7, #16]
 8001538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001540:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001544:	edd7 7a06 	vldr	s15, [r7, #24]
 8001548:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800154c:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 8001550:	edd7 7a03 	vldr	s15, [r7, #12]
 8001554:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	2003      	movs	r0, #3
 8001560:	eeb0 0a67 	vmov.f32	s0, s15
 8001564:	f000 f865 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001568:	eeb0 7b40 	vmov.f64	d7, d0
 800156c:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001570:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001574:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	ed93 7a00 	vldr	s14, [r3]
 800157e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800158a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800158e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001592:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001596:	ee36 7b07 	vadd.f64	d7, d6, d7
 800159a:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800159e:	ed97 7a07 	vldr	s14, [r7, #28]
 80015a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	edd3 6a00 	vldr	s13, [r3]
 80015b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015bc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80015c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	2004      	movs	r0, #4
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	f000 f82d 	bl	8001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015d8:	eeb0 7b40 	vmov.f64	d7, d0
 80015dc:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80015e0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80015e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015e8:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edd3 5a00 	vldr	s11, [r3]
 80015f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015fc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001600:	edd7 7a06 	vldr	s15, [r7, #24]
 8001604:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001610:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001614:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001618:	ee38 7b47 	vsub.f64	d7, d8, d7
 800161c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	; 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	ecbd 8b08 	vpop	{d8-d11}
 8001630:	bd80      	pop	{r7, pc}

08001632 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	ed87 0a01 	vstr	s0, [r7, #4]
 800163c:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800163e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001642:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	ee06 3a90 	vmov	s13, r3
 800164c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001650:	eeb0 1b46 	vmov.f64	d1, d6
 8001654:	eeb0 0b47 	vmov.f64	d0, d7
 8001658:	f00f fbd6 	bl	8010e08 <pow>
 800165c:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001660:	eeb0 0b47 	vmov.f64	d0, d7
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	ed87 0a01 	vstr	s0, [r7, #4]
 8001674:	edd7 7a01 	vldr	s15, [r7, #4]
 8001678:	fefb 7a67 	vrintm.f32	s15, s15
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	ed87 0a01 	vstr	s0, [r7, #4]
 8001694:	edd7 7a01 	vldr	s15, [r7, #4]
 8001698:	fef8 7a67 	vrinta.f32	s15, s15
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 80016aa:	b480      	push	{r7}
 80016ac:	b085      	sub	sp, #20
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	22b4      	movs	r2, #180	; 0xb4
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	761a      	strb	r2, [r3, #24]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	22ef      	movs	r2, #239	; 0xef
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
}
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4619      	mov	r1, r3
 8001732:	4610      	mov	r0, r2
 8001734:	f00b fe76 	bl	800d424 <HAL_TIM_PWM_Start>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	af02      	add	r7, sp, #8
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d13f      	bne.n	80017d2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691c      	ldr	r4, [r3, #16]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	3301      	adds	r3, #1
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80019f4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	f7ff ff87 	bl	800168a <_ZSt5roundf>
 800177c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001784:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	3301      	adds	r3, #1
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800179a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80019f8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800179e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a2:	eeb0 0a67 	vmov.f32	s0, s15
 80017a6:	f7ff ff60 	bl	800166a <_ZSt5floorf>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80017ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b2:	ee17 3a90 	vmov	r3, s15
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	9600      	str	r6, [sp, #0]
 80017ba:	462b      	mov	r3, r5
 80017bc:	4622      	mov	r2, r4
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f9cf 	bl	8001b64 <_ZN10ServoMotor10GripperMapElllll>
 80017c6:	4602      	mov	r2, r0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80017d0:	e176      	b.n	8001ac0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d13f      	bne.n	800185a <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691c      	ldr	r4, [r3, #16]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	3301      	adds	r3, #1
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80019f4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80017f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001800:	f7ff ff43 	bl	800168a <_ZSt5roundf>
 8001804:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800180c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	3301      	adds	r3, #1
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001822:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80019f8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	f7ff ff1c 	bl	800166a <_ZSt5floorf>
 8001832:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183a:	ee17 3a90 	vmov	r3, s15
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	9600      	str	r6, [sp, #0]
 8001842:	462b      	mov	r3, r5
 8001844:	4622      	mov	r2, r4
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f98b 	bl	8001b64 <_ZN10ServoMotor10GripperMapElllll>
 800184e:	4602      	mov	r2, r0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001858:	e132      	b.n	8001ac0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b08      	cmp	r3, #8
 8001860:	d13f      	bne.n	80018e2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691c      	ldr	r4, [r3, #16]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	3301      	adds	r3, #1
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80019f4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	f7ff feff 	bl	800168a <_ZSt5roundf>
 800188c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001894:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	3301      	adds	r3, #1
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018aa:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80019f8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80018ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b2:	eeb0 0a67 	vmov.f32	s0, s15
 80018b6:	f7ff fed8 	bl	800166a <_ZSt5floorf>
 80018ba:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 80018be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c2:	ee17 3a90 	vmov	r3, s15
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	9600      	str	r6, [sp, #0]
 80018ca:	462b      	mov	r3, r5
 80018cc:	4622      	mov	r2, r4
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f947 	bl	8001b64 <_ZN10ServoMotor10GripperMapElllll>
 80018d6:	4602      	mov	r2, r0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018e0:	e0ee      	b.n	8001ac0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d13f      	bne.n	800196a <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691c      	ldr	r4, [r3, #16]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	3301      	adds	r3, #1
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001904:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80019f4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190c:	eeb0 0a67 	vmov.f32	s0, s15
 8001910:	f7ff febb 	bl	800168a <_ZSt5roundf>
 8001914:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800191c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	3301      	adds	r3, #1
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001932:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80019f8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193a:	eeb0 0a67 	vmov.f32	s0, s15
 800193e:	f7ff fe94 	bl	800166a <_ZSt5floorf>
 8001942:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194a:	ee17 3a90 	vmov	r3, s15
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	9600      	str	r6, [sp, #0]
 8001952:	462b      	mov	r3, r5
 8001954:	4622      	mov	r2, r4
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f903 	bl	8001b64 <_ZN10ServoMotor10GripperMapElllll>
 800195e:	4602      	mov	r2, r0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001968:	e0aa      	b.n	8001ac0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b10      	cmp	r3, #16
 8001970:	d144      	bne.n	80019fc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691c      	ldr	r4, [r3, #16]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	3301      	adds	r3, #1
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800198c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80019f4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	f7ff fe77 	bl	800168a <_ZSt5roundf>
 800199c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 80019a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	3301      	adds	r3, #1
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80019f8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80019be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c2:	eeb0 0a67 	vmov.f32	s0, s15
 80019c6:	f7ff fe50 	bl	800166a <_ZSt5floorf>
 80019ca:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 80019ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d2:	ee17 3a90 	vmov	r3, s15
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9600      	str	r6, [sp, #0]
 80019da:	462b      	mov	r3, r5
 80019dc:	4622      	mov	r2, r4
 80019de:	6839      	ldr	r1, [r7, #0]
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f8bf 	bl	8001b64 <_ZN10ServoMotor10GripperMapElllll>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	659a      	str	r2, [r3, #88]	; 0x58
}
 80019f0:	e066      	b.n	8001ac0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 80019f2:	bf00      	nop
 80019f4:	3d4ccccd 	.word	0x3d4ccccd
 80019f8:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b14      	cmp	r3, #20
 8001a02:	d13f      	bne.n	8001a84 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691c      	ldr	r4, [r3, #16]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	3301      	adds	r3, #1
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1e:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 80019f4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a26:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2a:	f7ff fe2e 	bl	800168a <_ZSt5roundf>
 8001a2e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a36:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	3301      	adds	r3, #1
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4c:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 80019f8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a54:	eeb0 0a67 	vmov.f32	s0, s15
 8001a58:	f7ff fe07 	bl	800166a <_ZSt5floorf>
 8001a5c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a64:	ee17 3a90 	vmov	r3, s15
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	9600      	str	r6, [sp, #0]
 8001a6c:	462b      	mov	r3, r5
 8001a6e:	4622      	mov	r2, r4
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f876 	bl	8001b64 <_ZN10ServoMotor10GripperMapElllll>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a82:	e01d      	b.n	8001ac0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ac8 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	761a      	strb	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	765a      	strb	r2, [r3, #25]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e5b      	ldrb	r3, [r3, #25]
 8001b18:	f083 0301 	eor.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4619      	mov	r1, r3
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff fe09 	bl	8001740 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001b2e:	e000      	b.n	8001b32 <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001b30:	bf00      	nop
}
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7e1b      	ldrb	r3, [r3, #24]
 8001b44:	f083 0301 	eor.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fdf3 	bl	8001740 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001b5a:	e000      	b.n	8001b5e <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001b5c:	bf00      	nop
}
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	69f9      	ldr	r1, [r7, #28]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	1a8a      	subs	r2, r1, r2
 8001b7e:	fb03 f202 	mul.w	r2, r3, r2
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	1acb      	subs	r3, r1, r3
 8001b88:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	4413      	add	r3, r2
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ba6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001baa:	eef0 7ae7 	vabs.f32	s15, s15
 8001bae:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001bd4:	619a      	str	r2, [r3, #24]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bdc:	61da      	str	r2, [r3, #28]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001be2:	621a      	str	r2, [r3, #32]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	22c7      	movs	r2, #199	; 0xc7
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c08:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001c0e:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001c10:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001c3c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f82f 	bl	8001c78 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	60da      	str	r2, [r3, #12]
}
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	41a00000 	.word	0x41a00000
 8001c34:	469c4000 	.word	0x469c4000
 8001c38:	43480000 	.word	0x43480000
 8001c3c:	00000000 	.word	0x00000000

08001c40 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
}
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4610      	mov	r0, r2
 8001c6a:	f00b fbdb 	bl	800d424 <HAL_TIM_PWM_Start>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	ed2d 8b02 	vpush	{d8}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c94:	eeb0 0a67 	vmov.f32	s0, s15
 8001c98:	f7ff ff80 	bl	8001b9c <_ZSt4fabsf>
 8001c9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	bf94      	ite	ls
 8001cb0:	2301      	movls	r3, #1
 8001cb2:	2300      	movhi	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e01b      	b.n	8001cfa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ccc:	f7ff ff66 	bl	8001b9c <_ZSt4fabsf>
 8001cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	bfac      	ite	ge
 8001ce4:	2301      	movge	r3, #1
 8001ce6:	2300      	movlt	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	e001      	b.n	8001cfa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d00:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001f9c <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	f2c0 80db 	blt.w	8001ec6 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6898      	ldr	r0, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f008 faaf 	bl	800a280 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3c:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001fa0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001d44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d50:	f7ff fc9b 	bl	800168a <_ZSt5roundf>
 8001d54:	eef0 7a40 	vmov.f32	s15, s0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d62:	ee17 2a90 	vmov	r2, s15
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d113      	bne.n	8001d98 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fa5b 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d82:	eeb0 7b40 	vmov.f64	d7, d0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d90:	ee17 2a90 	vmov	r2, s15
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001d96:	e1e0      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d113      	bne.n	8001dc8 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fa43 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001db2:	eeb0 7b40 	vmov.f64	d7, d0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dc0:	ee17 2a90 	vmov	r2, s15
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001dc6:	e1c8      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d113      	bne.n	8001df8 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fa2b 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001de2:	eeb0 7b40 	vmov.f64	d7, d0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001df0:	ee17 2a90 	vmov	r2, s15
 8001df4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001df6:	e1b0      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	d113      	bne.n	8001e28 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001e0a:	085b      	lsrs	r3, r3, #1
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fa13 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e12:	eeb0 7b40 	vmov.f64	d7, d0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e20:	ee17 2a90 	vmov	r2, s15
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e26:	e198      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b10      	cmp	r3, #16
 8001e2e:	d113      	bne.n	8001e58 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 f9fb 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e42:	eeb0 7b40 	vmov.f64	d7, d0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e50:	ee17 2a90 	vmov	r2, s15
 8001e54:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001e56:	e180      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b14      	cmp	r3, #20
 8001e5e:	d113      	bne.n	8001e88 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 f9e3 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e72:	eeb0 7b40 	vmov.f64	d7, d0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e80:	ee17 2a90 	vmov	r2, s15
 8001e84:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e86:	e168      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2200      	movs	r2, #0
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ec4:	e149      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ecc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001fa4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	f200 80e5 	bhi.w	80020a6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6898      	ldr	r0, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f008 f9c9 	bl	800a280 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001f00:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f04:	f7ff fe4a 	bl	8001b9c <_ZSt4fabsf>
 8001f08:	eef0 7a40 	vmov.f32	s15, s0
 8001f0c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001f10:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001fa0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f20:	eeb0 0a67 	vmov.f32	s0, s15
 8001f24:	f7ff fbb1 	bl	800168a <_ZSt5roundf>
 8001f28:	eef0 7a40 	vmov.f32	s15, s0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f36:	ee17 2a90 	vmov	r2, s15
 8001f3a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d113      	bne.n	8001f6c <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f971 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f56:	eeb0 7b40 	vmov.f64	d7, d0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f64:	ee17 2a90 	vmov	r2, s15
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f6a:	e0f6      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d119      	bne.n	8001fa8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f959 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f86:	eeb0 7b40 	vmov.f64	d7, d0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f94:	ee17 2a90 	vmov	r2, s15
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f9a:	e0de      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8001f9c:	3a83126f 	.word	0x3a83126f
 8001fa0:	4d64e1c0 	.word	0x4d64e1c0
 8001fa4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d113      	bne.n	8001fd8 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001fba:	085b      	lsrs	r3, r3, #1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 f93b 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fc2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fd0:	ee17 2a90 	vmov	r2, s15
 8001fd4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001fd6:	e0c0      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d113      	bne.n	8002008 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 f923 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001ff2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002000:	ee17 2a90 	vmov	r2, s15
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002006:	e0a8      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b10      	cmp	r3, #16
 800200e:	d113      	bne.n	8002038 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f000 f90b 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002022:	eeb0 7b40 	vmov.f64	d7, d0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002030:	ee17 2a90 	vmov	r2, s15
 8002034:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002036:	e090      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b14      	cmp	r3, #20
 800203e:	d113      	bne.n	8002068 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f8f3 	bl	8002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002052:	eeb0 7b40 	vmov.f64	d7, d0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002060:	ee17 2a90 	vmov	r2, s15
 8002064:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002066:	e078      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2200      	movs	r2, #0
 8002070:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2200      	movs	r2, #0
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2200      	movs	r2, #0
 8002098:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020a4:	e059      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020b8:	e04f      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d105      	bne.n	80020ce <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2200      	movs	r2, #0
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020cc:	e045      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d105      	bne.n	80020e2 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2200      	movs	r2, #0
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020e0:	e03b      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d105      	bne.n	80020f6 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2200      	movs	r2, #0
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020f4:	e031      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d105      	bne.n	800210a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2200      	movs	r2, #0
 8002106:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002108:	e027      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b14      	cmp	r3, #20
 8002110:	d105      	bne.n	800211e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2200      	movs	r2, #0
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800211c:	e01d      	b.n	800215a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2200      	movs	r2, #0
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2200      	movs	r2, #0
 800213a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	ecbd 8b02 	vpop	{d8}
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8002174:	ed97 0a00 	vldr	s0, [r7]
 8002178:	f7ff fd10 	bl	8001b9c <_ZSt4fabsf>
 800217c:	eef0 7a40 	vmov.f32	s15, s0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80021a2:	eeb0 0b47 	vmov.f64	d0, d7
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ffe5 	bl	800218e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021c4:	eeb0 7b40 	vmov.f64	d7, d0
 80021c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	0000      	movs	r0, r0
 80021dc:	0000      	movs	r0, r0
	...

080021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80021f2:	edd7 7a00 	vldr	s15, [r7]
 80021f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	edd3 7a08 	vldr	s15, [r3, #32]
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 8002212:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002230 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 8002216:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800221a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800221e:	eeb0 0a67 	vmov.f32	s0, s15
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fd28 	bl	8001c78 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	704a95d1 	.word	0x704a95d1
 8002234:	40b88b2f 	.word	0x40b88b2f

08002238 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800224a:	eeb0 0b47 	vmov.f64	d0, d7
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <MX_CRC_Init+0x54>)
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <MX_CRC_Init+0x58>)
 8002260:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <MX_CRC_Init+0x54>)
 8002264:	2201      	movs	r2, #1
 8002266:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <MX_CRC_Init+0x54>)
 800226a:	2201      	movs	r2, #1
 800226c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <MX_CRC_Init+0x54>)
 8002270:	f248 0205 	movw	r2, #32773	; 0x8005
 8002274:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <MX_CRC_Init+0x54>)
 8002278:	2208      	movs	r2, #8
 800227a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_CRC_Init+0x54>)
 800227e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002282:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_CRC_Init+0x54>)
 8002286:	2220      	movs	r2, #32
 8002288:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_CRC_Init+0x54>)
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_CRC_Init+0x54>)
 8002292:	2201      	movs	r2, #1
 8002294:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_CRC_Init+0x54>)
 8002298:	f004 fe08 	bl	8006eac <HAL_CRC_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80022a2:	f002 fb9d 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	24000434 	.word	0x24000434
 80022b0:	58024c00 	.word	0x58024c00

080022b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_CRC_MspInit+0x3c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10e      	bne.n	80022e4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_CRC_MspInit+0x40>)
 80022c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022cc:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <HAL_CRC_MspInit+0x40>)
 80022ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d6:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <HAL_CRC_MspInit+0x40>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	58024c00 	.word	0x58024c00
 80022f4:	58024400 	.word	0x58024400

080022f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022fe:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <MX_DMA_Init+0xdc>)
 8002300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002304:	4a33      	ldr	r2, [pc, #204]	; (80023d4 <MX_DMA_Init+0xdc>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800230e:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <MX_DMA_Init+0xdc>)
 8002310:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <MX_DMA_Init+0xdc>)
 800231e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002322:	4a2c      	ldr	r2, [pc, #176]	; (80023d4 <MX_DMA_Init+0xdc>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800232c:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <MX_DMA_Init+0xdc>)
 800232e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	200b      	movs	r0, #11
 8002340:	f004 fd73 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002344:	200b      	movs	r0, #11
 8002346:	f004 fd8a 	bl	8006e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	200c      	movs	r0, #12
 8002350:	f004 fd6b 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002354:	200c      	movs	r0, #12
 8002356:	f004 fd82 	bl	8006e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	200d      	movs	r0, #13
 8002360:	f004 fd63 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002364:	200d      	movs	r0, #13
 8002366:	f004 fd7a 	bl	8006e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	200e      	movs	r0, #14
 8002370:	f004 fd5b 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002374:	200e      	movs	r0, #14
 8002376:	f004 fd72 	bl	8006e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	200f      	movs	r0, #15
 8002380:	f004 fd53 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002384:	200f      	movs	r0, #15
 8002386:	f004 fd6a 	bl	8006e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	2010      	movs	r0, #16
 8002390:	f004 fd4b 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002394:	2010      	movs	r0, #16
 8002396:	f004 fd62 	bl	8006e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2011      	movs	r0, #17
 80023a0:	f004 fd43 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80023a4:	2011      	movs	r0, #17
 80023a6:	f004 fd5a 	bl	8006e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	202f      	movs	r0, #47	; 0x2f
 80023b0:	f004 fd3b 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80023b4:	202f      	movs	r0, #47	; 0x2f
 80023b6:	f004 fd52 	bl	8006e5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	2038      	movs	r0, #56	; 0x38
 80023c0:	f004 fd33 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023c4:	2038      	movs	r0, #56	; 0x38
 80023c6:	f004 fd4a 	bl	8006e5e <HAL_NVIC_EnableIRQ>

}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	58024400 	.word	0x58024400

080023d8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023de:	f107 031c 	add.w	r3, r7, #28
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
 80023ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ee:	4b87      	ldr	r3, [pc, #540]	; (800260c <MX_GPIO_Init+0x234>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f4:	4a85      	ldr	r2, [pc, #532]	; (800260c <MX_GPIO_Init+0x234>)
 80023f6:	f043 0310 	orr.w	r3, r3, #16
 80023fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fe:	4b83      	ldr	r3, [pc, #524]	; (800260c <MX_GPIO_Init+0x234>)
 8002400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	4b7f      	ldr	r3, [pc, #508]	; (800260c <MX_GPIO_Init+0x234>)
 800240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002412:	4a7e      	ldr	r2, [pc, #504]	; (800260c <MX_GPIO_Init+0x234>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241c:	4b7b      	ldr	r3, [pc, #492]	; (800260c <MX_GPIO_Init+0x234>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800242a:	4b78      	ldr	r3, [pc, #480]	; (800260c <MX_GPIO_Init+0x234>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002430:	4a76      	ldr	r2, [pc, #472]	; (800260c <MX_GPIO_Init+0x234>)
 8002432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243a:	4b74      	ldr	r3, [pc, #464]	; (800260c <MX_GPIO_Init+0x234>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002448:	4b70      	ldr	r3, [pc, #448]	; (800260c <MX_GPIO_Init+0x234>)
 800244a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244e:	4a6f      	ldr	r2, [pc, #444]	; (800260c <MX_GPIO_Init+0x234>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002458:	4b6c      	ldr	r3, [pc, #432]	; (800260c <MX_GPIO_Init+0x234>)
 800245a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	4b69      	ldr	r3, [pc, #420]	; (800260c <MX_GPIO_Init+0x234>)
 8002468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246c:	4a67      	ldr	r2, [pc, #412]	; (800260c <MX_GPIO_Init+0x234>)
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002476:	4b65      	ldr	r3, [pc, #404]	; (800260c <MX_GPIO_Init+0x234>)
 8002478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002484:	4b61      	ldr	r3, [pc, #388]	; (800260c <MX_GPIO_Init+0x234>)
 8002486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248a:	4a60      	ldr	r2, [pc, #384]	; (800260c <MX_GPIO_Init+0x234>)
 800248c:	f043 0308 	orr.w	r3, r3, #8
 8002490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002494:	4b5d      	ldr	r3, [pc, #372]	; (800260c <MX_GPIO_Init+0x234>)
 8002496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024a2:	4b5a      	ldr	r3, [pc, #360]	; (800260c <MX_GPIO_Init+0x234>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a8:	4a58      	ldr	r2, [pc, #352]	; (800260c <MX_GPIO_Init+0x234>)
 80024aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b2:	4b56      	ldr	r3, [pc, #344]	; (800260c <MX_GPIO_Init+0x234>)
 80024b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80024c0:	2200      	movs	r2, #0
 80024c2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80024c6:	4852      	ldr	r0, [pc, #328]	; (8002610 <MX_GPIO_Init+0x238>)
 80024c8:	f007 feda 	bl	800a280 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	f24c 0102 	movw	r1, #49154	; 0xc002
 80024d2:	4850      	ldr	r0, [pc, #320]	; (8002614 <MX_GPIO_Init+0x23c>)
 80024d4:	f007 fed4 	bl	800a280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024de:	484e      	ldr	r0, [pc, #312]	; (8002618 <MX_GPIO_Init+0x240>)
 80024e0:	f007 fece 	bl	800a280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ea:	484c      	ldr	r0, [pc, #304]	; (800261c <MX_GPIO_Init+0x244>)
 80024ec:	f007 fec8 	bl	800a280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024f6:	484a      	ldr	r0, [pc, #296]	; (8002620 <MX_GPIO_Init+0x248>)
 80024f8:	f007 fec2 	bl	800a280 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80024fc:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002500:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002502:	2301      	movs	r3, #1
 8002504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4619      	mov	r1, r3
 8002514:	483e      	ldr	r0, [pc, #248]	; (8002610 <MX_GPIO_Init+0x238>)
 8002516:	f007 fd03 	bl	8009f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 800251a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800251e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002520:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800252a:	f107 031c 	add.w	r3, r7, #28
 800252e:	4619      	mov	r1, r3
 8002530:	4838      	ldr	r0, [pc, #224]	; (8002614 <MX_GPIO_Init+0x23c>)
 8002532:	f007 fcf5 	bl	8009f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8002536:	f24c 0302 	movw	r3, #49154	; 0xc002
 800253a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4619      	mov	r1, r3
 800254e:	4831      	ldr	r0, [pc, #196]	; (8002614 <MX_GPIO_Init+0x23c>)
 8002550:	f007 fce6 	bl	8009f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255a:	2301      	movs	r3, #1
 800255c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	4619      	mov	r1, r3
 800256c:	482a      	ldr	r0, [pc, #168]	; (8002618 <MX_GPIO_Init+0x240>)
 800256e:	f007 fcd7 	bl	8009f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002578:	2301      	movs	r3, #1
 800257a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	4824      	ldr	r0, [pc, #144]	; (800261c <MX_GPIO_Init+0x244>)
 800258c:	f007 fcc8 	bl	8009f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002596:	2301      	movs	r3, #1
 8002598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4619      	mov	r1, r3
 80025a8:	481d      	ldr	r0, [pc, #116]	; (8002620 <MX_GPIO_Init+0x248>)
 80025aa:	f007 fcb9 	bl	8009f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 80025ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 80025be:	f107 031c 	add.w	r3, r7, #28
 80025c2:	4619      	mov	r1, r3
 80025c4:	4817      	ldr	r0, [pc, #92]	; (8002624 <MX_GPIO_Init+0x24c>)
 80025c6:	f007 fcab 	bl	8009f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 80025ca:	23c0      	movs	r3, #192	; 0xc0
 80025cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4619      	mov	r1, r3
 80025de:	480c      	ldr	r0, [pc, #48]	; (8002610 <MX_GPIO_Init+0x238>)
 80025e0:	f007 fc9e 	bl	8009f20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2100      	movs	r1, #0
 80025e8:	2017      	movs	r0, #23
 80025ea:	f004 fc1e 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025ee:	2017      	movs	r0, #23
 80025f0:	f004 fc35 	bl	8006e5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	2028      	movs	r0, #40	; 0x28
 80025fa:	f004 fc16 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025fe:	2028      	movs	r0, #40	; 0x28
 8002600:	f004 fc2d 	bl	8006e5e <HAL_NVIC_EnableIRQ>

}
 8002604:	bf00      	nop
 8002606:	3730      	adds	r7, #48	; 0x30
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	58024400 	.word	0x58024400
 8002610:	58020400 	.word	0x58020400
 8002614:	58021000 	.word	0x58021000
 8002618:	58020c00 	.word	0x58020c00
 800261c:	58020800 	.word	0x58020800
 8002620:	58020000 	.word	0x58020000
 8002624:	58021800 	.word	0x58021800

08002628 <_Z12Insert_queueii>:
volatile float u_q4 = 0.0;

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value) {
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
	if (bot == LIMIT - 1) {
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <_Z12Insert_queueii+0x6c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b13      	cmp	r3, #19
 8002638:	bf0c      	ite	eq
 800263a:	2301      	moveq	r3, #1
 800263c:	2300      	movne	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <_Z12Insert_queueii+0x20>
		return false;
 8002644:	2300      	movs	r3, #0
 8002646:	e01e      	b.n	8002686 <_Z12Insert_queueii+0x5e>
	} else {
		if (first == -1) {
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_Z12Insert_queueii+0x70>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <_Z12Insert_queueii+0x3a>
			first = 0;
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <_Z12Insert_queueii+0x70>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
		}
		bot++;
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <_Z12Insert_queueii+0x6c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <_Z12Insert_queueii+0x6c>)
 800266a:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <_Z12Insert_queueii+0x6c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	490a      	ldr	r1, [pc, #40]	; (800269c <_Z12Insert_queueii+0x74>)
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <_Z12Insert_queueii+0x6c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4908      	ldr	r1, [pc, #32]	; (80026a0 <_Z12Insert_queueii+0x78>)
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 8002684:	2301      	movs	r3, #1
	}
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	24000010 	.word	0x24000010
 8002698:	2400000c 	.word	0x2400000c
 800269c:	24000b40 	.word	0x24000b40
 80026a0:	24000b90 	.word	0x24000b90

080026a4 <_Z10Call_queuev>:

int Call_queue() {
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
	int output;
	if (first == -1 || first > bot) {
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <_Z10Call_queuev+0x8c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b2:	d005      	beq.n	80026c0 <_Z10Call_queuev+0x1c>
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <_Z10Call_queuev+0x8c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <_Z10Call_queuev+0x90>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dd01      	ble.n	80026c4 <_Z10Call_queuev+0x20>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <_Z10Call_queuev+0x22>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d020      	beq.n	800270c <_Z10Call_queuev+0x68>
		for (int num = 0; num <= bot + 1; num++) {
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4b19      	ldr	r3, [pc, #100]	; (8002734 <_Z10Call_queuev+0x90>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	bfd4      	ite	le
 80026da:	2301      	movle	r3, #1
 80026dc:	2300      	movgt	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <_Z10Call_queuev+0x52>
			queue[num] = 0;
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <_Z10Call_queuev+0x94>)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2100      	movs	r1, #0
 80026ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int num = 0; num <= bot + 1; num++) {
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	e7eb      	b.n	80026ce <_Z10Call_queuev+0x2a>
		}
		first = -1;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <_Z10Call_queuev+0x8c>)
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026fc:	601a      	str	r2, [r3, #0]
		bot = -1;
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <_Z10Call_queuev+0x90>)
 8002700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002704:	601a      	str	r2, [r3, #0]
		output = 255;
 8002706:	23ff      	movs	r3, #255	; 0xff
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	e00a      	b.n	8002722 <_Z10Call_queuev+0x7e>
	} else {
		output = queue[first];
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <_Z10Call_queuev+0x8c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <_Z10Call_queuev+0x94>)
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002716:	607b      	str	r3, [r7, #4]
		first++;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <_Z10Call_queuev+0x8c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <_Z10Call_queuev+0x8c>)
 8002720:	6013      	str	r3, [r2, #0]
	}
	return output;
 8002722:	687b      	ldr	r3, [r7, #4]

}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	2400000c 	.word	0x2400000c
 8002734:	24000010 	.word	0x24000010
 8002738:	24000b40 	.word	0x24000b40

0800273c <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4) / 1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y,
		float gripper_linear_z, float gripper_angular_yaw) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b092      	sub	sp, #72	; 0x48
 8002740:	af00      	add	r7, sp, #0
 8002742:	ed87 0a03 	vstr	s0, [r7, #12]
 8002746:	edc7 0a02 	vstr	s1, [r7, #8]
 800274a:	ed87 1a01 	vstr	s2, [r7, #4]
 800274e:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x / 1000.0;
 8002752:	ed97 7a03 	vldr	s14, [r7, #12]
 8002756:	eddf 6a78 	vldr	s13, [pc, #480]	; 8002938 <_Z6fcb_IKffff+0x1fc>
 800275a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800275e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y / 1000.0;
 8002762:	ed97 7a02 	vldr	s14, [r7, #8]
 8002766:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002938 <_Z6fcb_IKffff+0x1fc>
 800276a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800276e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z / 1000.0;
 8002772:	ed97 7a01 	vldr	s14, [r7, #4]
 8002776:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002938 <_Z6fcb_IKffff+0x1fc>
 800277a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800277e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw / 1000.0;
 8002782:	ed97 7a00 	vldr	s14, [r7]
 8002786:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002938 <_Z6fcb_IKffff+0x1fc>
 800278a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800278e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x * x) + (y * y) - (L12 * L12) - (L3 * L3)) / (2 * L12 * L3);
 8002792:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002796:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800279a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800279e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80027a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <_Z6fcb_IKffff+0x200>)
 80027a8:	edd3 6a00 	vldr	s13, [r3]
 80027ac:	4b63      	ldr	r3, [pc, #396]	; (800293c <_Z6fcb_IKffff+0x200>)
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ba:	4b61      	ldr	r3, [pc, #388]	; (8002940 <_Z6fcb_IKffff+0x204>)
 80027bc:	edd3 6a00 	vldr	s13, [r3]
 80027c0:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <_Z6fcb_IKffff+0x204>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <_Z6fcb_IKffff+0x200>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80027d8:	4b59      	ldr	r3, [pc, #356]	; (8002940 <_Z6fcb_IKffff+0x204>)
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027e6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1 - (C3 * C3));
 80027ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80027ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80027f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fa:	eeb0 0a67 	vmov.f32	s0, s15
 80027fe:	f7fe f959 	bl	8000ab4 <_ZSt4sqrtf>
 8002802:	eef0 7a40 	vmov.f32	s15, s0
 8002806:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800280a:	eeb1 7b47 	vneg.f64	d7, d7
 800280e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002812:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3, C3);
 8002816:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 800281a:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800281e:	f7fe f935 	bl	8000a8c <_ZSt5atan2ff>
 8002822:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3 * S3;
 8002826:	4b46      	ldr	r3, [pc, #280]	; (8002940 <_Z6fcb_IKffff+0x204>)
 8002828:	edd3 7a00 	vldr	s15, [r3]
 800282c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002834:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3 * C3);
 8002838:	4b41      	ldr	r3, [pc, #260]	; (8002940 <_Z6fcb_IKffff+0x204>)
 800283a:	ed93 7a00 	vldr	s14, [r3]
 800283e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <_Z6fcb_IKffff+0x200>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3 * x) + (L123C3 * y);
 8002854:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002858:	eeb1 7a67 	vneg.f32	s14, s15
 800285c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002864:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002868:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800286c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002874:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3 * y) + (L123C3 * x);
 8002878:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800287c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002884:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002888:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800288c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002894:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1, C1);
 8002898:	edd7 0a07 	vldr	s1, [r7, #28]
 800289c:	ed97 0a08 	vldr	s0, [r7, #32]
 80028a0:	f7fe f8f4 	bl	8000a8c <_ZSt5atan2ff>
 80028a4:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 80028a8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80028ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80028b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028bc:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 80028c0:	4b20      	ldr	r3, [pc, #128]	; (8002944 <_Z6fcb_IKffff+0x208>)
 80028c2:	ed93 7a00 	vldr	s14, [r3]
 80028c6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80028ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <_Z6fcb_IKffff+0x20c>)
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <_Z6fcb_IKffff+0x210>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1 * 1000.0;
 80028e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80028ea:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002938 <_Z6fcb_IKffff+0x1fc>
 80028ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <_Z6fcb_IKffff+0x214>)
 80028f4:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2 * 1000.0;
 80028f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80028fc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002938 <_Z6fcb_IKffff+0x1fc>
 8002900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <_Z6fcb_IKffff+0x218>)
 8002906:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3 * 1000.0;
 800290a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800290e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002938 <_Z6fcb_IKffff+0x1fc>
 8002912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <_Z6fcb_IKffff+0x21c>)
 8002918:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4 * 1000.0;
 800291c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002920:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002938 <_Z6fcb_IKffff+0x1fc>
 8002924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <_Z6fcb_IKffff+0x220>)
 800292a:	edc3 7a00 	vstr	s15, [r3]

}
 800292e:	bf00      	nop
 8002930:	3748      	adds	r7, #72	; 0x48
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	447a0000 	.word	0x447a0000
 800293c:	2400021c 	.word	0x2400021c
 8002940:	24000218 	.word	0x24000218
 8002944:	24000228 	.word	0x24000228
 8002948:	24000224 	.word	0x24000224
 800294c:	24000220 	.word	0x24000220
 8002950:	24000bf4 	.word	0x24000bf4
 8002954:	24000bf8 	.word	0x24000bf8
 8002958:	24000bfc 	.word	0x24000bfc
 800295c:	24000c00 	.word	0x24000c00

08002960 <_Z16Cal_Traj_time_sqii>:
float offset_y_new = 0;
int indexy;
float pos_x, pos_y;
int Traj_time_Cal, current_sq;
int old_sq = 99;
int Cal_Traj_time_sq(int old_sq_f, int current_sq_f){
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
	int p11 = old_sq_f/8 ;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	da00      	bge.n	8002972 <_Z16Cal_Traj_time_sqii+0x12>
 8002970:	3307      	adds	r3, #7
 8002972:	10db      	asrs	r3, r3, #3
 8002974:	617b      	str	r3, [r7, #20]
	int p12 = old_sq_f%8 ;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	425a      	negs	r2, r3
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	f002 0207 	and.w	r2, r2, #7
 8002982:	bf58      	it	pl
 8002984:	4253      	negpl	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
	int p21 = current_sq_f/8 ;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	da00      	bge.n	8002990 <_Z16Cal_Traj_time_sqii+0x30>
 800298e:	3307      	adds	r3, #7
 8002990:	10db      	asrs	r3, r3, #3
 8002992:	60fb      	str	r3, [r7, #12]
	int p22 = current_sq_f%8 ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	425a      	negs	r2, r3
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	f002 0207 	and.w	r2, r2, #7
 80029a0:	bf58      	it	pl
 80029a2:	4253      	negpl	r3, r2
 80029a4:	60bb      	str	r3, [r7, #8]
	if (old_sq_f >= 0 && old_sq_f <= 63)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	db21      	blt.n	80029f0 <_Z16Cal_Traj_time_sqii+0x90>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b3f      	cmp	r3, #63	; 0x3f
 80029b0:	dc1e      	bgt.n	80029f0 <_Z16Cal_Traj_time_sqii+0x90>
	{
		return ((sqrt( ((p11 - p21)*(p11 - p21)) + ((p12 - p22)*(p12 - p22)) )) + 1.0) ;
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	1a8a      	subs	r2, r1, r2
 80029be:	fb03 f202 	mul.w	r2, r3, r2
 80029c2:	6939      	ldr	r1, [r7, #16]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1acb      	subs	r3, r1, r3
 80029c8:	6938      	ldr	r0, [r7, #16]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	1a41      	subs	r1, r0, r1
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 f81d 	bl	8004a14 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80029da:	eeb0 7b40 	vmov.f64	d7, d0
 80029de:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80029e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029e6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80029ea:	ee17 3a90 	vmov	r3, s15
 80029ee:	e000      	b.n	80029f2 <_Z16Cal_Traj_time_sqii+0x92>
	}
	else
	{
		return 7;
 80029f0:	2307      	movs	r3, #7
	}
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	0000      	movs	r0, r0
 80029fc:	0000      	movs	r0, r0
	...

08002a00 <_Z20Update_State_Machinev>:

void Update_State_Machine() {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	ed2d 8b02 	vpush	{d8}
 8002a06:	af00      	add	r7, sp, #0

	switch (control_state) {
 8002a08:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <_Z20Update_State_Machinev+0xc4>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3b29      	subs	r3, #41	; 0x29
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	f200 845f 	bhi.w	80032d4 <_Z20Update_State_Machinev+0x8d4>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <_Z20Update_State_Machinev+0x1c>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a5d 	.word	0x08002a5d
 8002a20:	08002e8d 	.word	0x08002e8d
 8002a24:	08002f53 	.word	0x08002f53
 8002a28:	080032d5 	.word	0x080032d5
 8002a2c:	080032d5 	.word	0x080032d5
 8002a30:	080032d5 	.word	0x080032d5
 8002a34:	080032d5 	.word	0x080032d5
 8002a38:	080032d5 	.word	0x080032d5
 8002a3c:	080032d5 	.word	0x080032d5
 8002a40:	080032d5 	.word	0x080032d5
 8002a44:	080032e3 	.word	0x080032e3
 8002a48:	08002faf 	.word	0x08002faf
 8002a4c:	080032e3 	.word	0x080032e3
 8002a50:	080030d3 	.word	0x080030d3
 8002a54:	080032e3 	.word	0x080032e3
 8002a58:	08003227 	.word	0x08003227
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002a5c:	f7ff fe22 	bl	80026a4 <_Z10Call_queuev>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <_Z20Update_State_Machinev+0xc8>)
 8002a64:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <_Z20Update_State_Machinev+0xc8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2bff      	cmp	r3, #255	; 0xff
 8002a6c:	f000 81ba 	beq.w	8002de4 <_Z20Update_State_Machinev+0x3e4>
		{
			if (indexy == 99)
 8002a70:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <_Z20Update_State_Machinev+0xc8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b63      	cmp	r3, #99	; 0x63
 8002a76:	d110      	bne.n	8002a9a <_Z20Update_State_Machinev+0x9a>
				{
					Max_Time = 7;
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <_Z20Update_State_Machinev+0xcc>)
 8002a7a:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <_Z20Update_State_Machinev+0xd0>)
 8002a7c:	601a      	str	r2, [r3, #0]
					Traj_time_Cal = 7;
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <_Z20Update_State_Machinev+0xd4>)
 8002a80:	2207      	movs	r2, #7
 8002a82:	601a      	str	r2, [r3, #0]
					Planning_q1 = 1900;
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <_Z20Update_State_Machinev+0xd8>)
 8002a86:	4a15      	ldr	r2, [pc, #84]	; (8002adc <_Z20Update_State_Machinev+0xdc>)
 8002a88:	601a      	str	r2, [r3, #0]
					Planning_q3 = -1100;
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <_Z20Update_State_Machinev+0xe0>)
 8002a8c:	4a15      	ldr	r2, [pc, #84]	; (8002ae4 <_Z20Update_State_Machinev+0xe4>)
 8002a8e:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002a90:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <_Z20Update_State_Machinev+0xe8>)
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e144      	b.n	8002d24 <_Z20Update_State_Machinev+0x324>
				}
			else if (indexy == 123)
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <_Z20Update_State_Machinev+0xc8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b7b      	cmp	r3, #123	; 0x7b
 8002aa0:	d128      	bne.n	8002af4 <_Z20Update_State_Machinev+0xf4>
			{
					Max_Time = 7;
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <_Z20Update_State_Machinev+0xcc>)
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <_Z20Update_State_Machinev+0xd0>)
 8002aa6:	601a      	str	r2, [r3, #0]
					Traj_time_Cal = 7;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <_Z20Update_State_Machinev+0xd4>)
 8002aaa:	2207      	movs	r2, #7
 8002aac:	601a      	str	r2, [r3, #0]
					Planning_q1 = 1100;
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <_Z20Update_State_Machinev+0xd8>)
 8002ab0:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <_Z20Update_State_Machinev+0xec>)
 8002ab2:	601a      	str	r2, [r3, #0]
					Planning_q3 = -600;
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <_Z20Update_State_Machinev+0xe0>)
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <_Z20Update_State_Machinev+0xf0>)
 8002ab8:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <_Z20Update_State_Machinev+0xe8>)
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e12f      	b.n	8002d24 <_Z20Update_State_Machinev+0x324>
 8002ac4:	24000be8 	.word	0x24000be8
 8002ac8:	24000c0c 	.word	0x24000c0c
 8002acc:	24000afc 	.word	0x24000afc
 8002ad0:	40e00000 	.word	0x40e00000
 8002ad4:	24000c18 	.word	0x24000c18
 8002ad8:	24000bf4 	.word	0x24000bf4
 8002adc:	44ed8000 	.word	0x44ed8000
 8002ae0:	24000bfc 	.word	0x24000bfc
 8002ae4:	c4898000 	.word	0xc4898000
 8002ae8:	24000c00 	.word	0x24000c00
 8002aec:	44898000 	.word	0x44898000
 8002af0:	c4160000 	.word	0xc4160000
			}
			else if (indexy != 99 && indexy != 123 && indexy != 255)
 8002af4:	4bca      	ldr	r3, [pc, #808]	; (8002e20 <_Z20Update_State_Machinev+0x420>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b63      	cmp	r3, #99	; 0x63
 8002afa:	f000 8113 	beq.w	8002d24 <_Z20Update_State_Machinev+0x324>
 8002afe:	4bc8      	ldr	r3, [pc, #800]	; (8002e20 <_Z20Update_State_Machinev+0x420>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b7b      	cmp	r3, #123	; 0x7b
 8002b04:	f000 810e 	beq.w	8002d24 <_Z20Update_State_Machinev+0x324>
 8002b08:	4bc5      	ldr	r3, [pc, #788]	; (8002e20 <_Z20Update_State_Machinev+0x420>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2bff      	cmp	r3, #255	; 0xff
 8002b0e:	f000 8109 	beq.w	8002d24 <_Z20Update_State_Machinev+0x324>
				{

					current_sq = indexy;
 8002b12:	4bc3      	ldr	r3, [pc, #780]	; (8002e20 <_Z20Update_State_Machinev+0x420>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4ac3      	ldr	r2, [pc, #780]	; (8002e24 <_Z20Update_State_Machinev+0x424>)
 8002b18:	6013      	str	r3, [r2, #0]
					Traj_time_Cal = Cal_Traj_time_sq(old_sq, current_sq);
 8002b1a:	4bc3      	ldr	r3, [pc, #780]	; (8002e28 <_Z20Update_State_Machinev+0x428>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4ac1      	ldr	r2, [pc, #772]	; (8002e24 <_Z20Update_State_Machinev+0x424>)
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff1b 	bl	8002960 <_Z16Cal_Traj_time_sqii>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4abf      	ldr	r2, [pc, #764]	; (8002e2c <_Z20Update_State_Machinev+0x42c>)
 8002b2e:	6013      	str	r3, [r2, #0]
					Max_Time = Traj_time_Cal;
 8002b30:	4bbe      	ldr	r3, [pc, #760]	; (8002e2c <_Z20Update_State_Machinev+0x42c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3c:	4bbc      	ldr	r3, [pc, #752]	; (8002e30 <_Z20Update_State_Machinev+0x430>)
 8002b3e:	edc3 7a00 	vstr	s15, [r3]
					test_value_r = radias[indexy];
 8002b42:	4bb7      	ldr	r3, [pc, #732]	; (8002e20 <_Z20Update_State_Machinev+0x420>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4abb      	ldr	r2, [pc, #748]	; (8002e34 <_Z20Update_State_Machinev+0x434>)
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b54:	ee17 2a90 	vmov	r2, s15
 8002b58:	4bb7      	ldr	r3, [pc, #732]	; (8002e38 <_Z20Update_State_Machinev+0x438>)
 8002b5a:	601a      	str	r2, [r3, #0]
					// + angle_chess
					test_value_theta = theta[indexy];
 8002b5c:	4bb0      	ldr	r3, [pc, #704]	; (8002e20 <_Z20Update_State_Machinev+0x420>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4ab6      	ldr	r2, [pc, #728]	; (8002e3c <_Z20Update_State_Machinev+0x43c>)
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b6e:	ee17 2a90 	vmov	r2, s15
 8002b72:	4bb3      	ldr	r3, [pc, #716]	; (8002e40 <_Z20Update_State_Machinev+0x440>)
 8002b74:	601a      	str	r2, [r3, #0]
					offset_x_new = ((0.16075* (test_value_r * cos((test_value_theta + angle_chess) / 1000.0))) + 0.02289) / 10.0;
 8002b76:	4bb0      	ldr	r3, [pc, #704]	; (8002e38 <_Z20Update_State_Machinev+0x438>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b82:	4baf      	ldr	r3, [pc, #700]	; (8002e40 <_Z20Update_State_Machinev+0x440>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b8e:	4bad      	ldr	r3, [pc, #692]	; (8002e44 <_Z20Update_State_Machinev+0x444>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b9c:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8002df8 <_Z20Update_State_Machinev+0x3f8>
 8002ba0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ba4:	eeb0 0b46 	vmov.f64	d0, d6
 8002ba8:	f00e fb82 	bl	80112b0 <cos>
 8002bac:	eeb0 7b40 	vmov.f64	d7, d0
 8002bb0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002bb4:	ed9f 6b92 	vldr	d6, [pc, #584]	; 8002e00 <_Z20Update_State_Machinev+0x400>
 8002bb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002bbc:	ed9f 6b92 	vldr	d6, [pc, #584]	; 8002e08 <_Z20Update_State_Machinev+0x408>
 8002bc0:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002bc4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002bc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002bcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bd0:	4b9d      	ldr	r3, [pc, #628]	; (8002e48 <_Z20Update_State_Machinev+0x448>)
 8002bd2:	edc3 7a00 	vstr	s15, [r3]
					offset_y_new = ((0.29560* (test_value_r * sin((test_value_theta + angle_chess) / 1000.0))) + 1.05911) / 10.0;
 8002bd6:	4b98      	ldr	r3, [pc, #608]	; (8002e38 <_Z20Update_State_Machinev+0x438>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002be2:	4b97      	ldr	r3, [pc, #604]	; (8002e40 <_Z20Update_State_Machinev+0x440>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bee:	4b95      	ldr	r3, [pc, #596]	; (8002e44 <_Z20Update_State_Machinev+0x444>)
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bfc:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8002df8 <_Z20Update_State_Machinev+0x3f8>
 8002c00:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002c04:	eeb0 0b46 	vmov.f64	d0, d6
 8002c08:	f00e fb9e 	bl	8011348 <sin>
 8002c0c:	eeb0 7b40 	vmov.f64	d7, d0
 8002c10:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002c14:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8002e10 <_Z20Update_State_Machinev+0x410>
 8002c18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c1c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8002e18 <_Z20Update_State_Machinev+0x418>
 8002c20:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002c24:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002c28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c30:	4b86      	ldr	r3, [pc, #536]	; (8002e4c <_Z20Update_State_Machinev+0x44c>)
 8002c32:	edc3 7a00 	vstr	s15, [r3]
					pos_x = (test_value_r * cos((test_value_theta + angle_chess) / 1000.0)) + offset_x + offset_x_new;
 8002c36:	4b80      	ldr	r3, [pc, #512]	; (8002e38 <_Z20Update_State_Machinev+0x438>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002c42:	4b7f      	ldr	r3, [pc, #508]	; (8002e40 <_Z20Update_State_Machinev+0x440>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	4b7d      	ldr	r3, [pc, #500]	; (8002e44 <_Z20Update_State_Machinev+0x444>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c5c:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002df8 <_Z20Update_State_Machinev+0x3f8>
 8002c60:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002c64:	eeb0 0b46 	vmov.f64	d0, d6
 8002c68:	f00e fb22 	bl	80112b0 <cos>
 8002c6c:	eeb0 7b40 	vmov.f64	d7, d0
 8002c70:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002c74:	4b76      	ldr	r3, [pc, #472]	; (8002e50 <_Z20Update_State_Machinev+0x450>)
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c82:	4b71      	ldr	r3, [pc, #452]	; (8002e48 <_Z20Update_State_Machinev+0x448>)
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c94:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <_Z20Update_State_Machinev+0x454>)
 8002c96:	edc3 7a00 	vstr	s15, [r3]
					pos_y = (test_value_r * sin((test_value_theta + angle_chess) / 1000.0)) + offset_y + offset_y_new;
 8002c9a:	4b67      	ldr	r3, [pc, #412]	; (8002e38 <_Z20Update_State_Machinev+0x438>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002ca6:	4b66      	ldr	r3, [pc, #408]	; (8002e40 <_Z20Update_State_Machinev+0x440>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb2:	4b64      	ldr	r3, [pc, #400]	; (8002e44 <_Z20Update_State_Machinev+0x444>)
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
 8002cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cc0:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8002df8 <_Z20Update_State_Machinev+0x3f8>
 8002cc4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002cc8:	eeb0 0b46 	vmov.f64	d0, d6
 8002ccc:	f00e fb3c 	bl	8011348 <sin>
 8002cd0:	eeb0 7b40 	vmov.f64	d7, d0
 8002cd4:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002cd8:	4b5f      	ldr	r3, [pc, #380]	; (8002e58 <_Z20Update_State_Machinev+0x458>)
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ce2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ce6:	4b59      	ldr	r3, [pc, #356]	; (8002e4c <_Z20Update_State_Machinev+0x44c>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cf0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002cf4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cf8:	4b58      	ldr	r3, [pc, #352]	; (8002e5c <_Z20Update_State_Machinev+0x45c>)
 8002cfa:	edc3 7a00 	vstr	s15, [r3]
					fcb_IK(pos_x, pos_y, 0, angle_chess);
 8002cfe:	4b55      	ldr	r3, [pc, #340]	; (8002e54 <_Z20Update_State_Machinev+0x454>)
 8002d00:	edd3 7a00 	vldr	s15, [r3]
 8002d04:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <_Z20Update_State_Machinev+0x45c>)
 8002d06:	ed93 7a00 	vldr	s14, [r3]
 8002d0a:	4b4e      	ldr	r3, [pc, #312]	; (8002e44 <_Z20Update_State_Machinev+0x444>)
 8002d0c:	edd3 6a00 	vldr	s13, [r3]
 8002d10:	eef0 1a66 	vmov.f32	s3, s13
 8002d14:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002d18:	eef0 0a47 	vmov.f32	s1, s14
 8002d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d20:	f7ff fd0c 	bl	800273c <_Z6fcb_IKffff>

				}


				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002d24:	4b42      	ldr	r3, [pc, #264]	; (8002e30 <_Z20Update_State_Machinev+0x430>)
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	4b4e      	ldr	r3, [pc, #312]	; (8002e64 <_Z20Update_State_Machinev+0x464>)
 8002d2c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002d30:	4b4d      	ldr	r3, [pc, #308]	; (8002e68 <_Z20Update_State_Machinev+0x468>)
 8002d32:	edd3 6a00 	vldr	s13, [r3]
 8002d36:	ed9f 3a4a 	vldr	s6, [pc, #296]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002d3a:	eddf 2a49 	vldr	s5, [pc, #292]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002d3e:	ed9f 2a48 	vldr	s4, [pc, #288]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002d42:	eddf 1a47 	vldr	s3, [pc, #284]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002d46:	eeb0 1a66 	vmov.f32	s2, s13
 8002d4a:	eef0 0a47 	vmov.f32	s1, s14
 8002d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d52:	4844      	ldr	r0, [pc, #272]	; (8002e64 <_Z20Update_State_Machinev+0x464>)
 8002d54:	f7fd ff37 	bl	8000bc6 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002d58:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <_Z20Update_State_Machinev+0x430>)
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <_Z20Update_State_Machinev+0x46c>)
 8002d60:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002d64:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <_Z20Update_State_Machinev+0x470>)
 8002d66:	edd3 6a00 	vldr	s13, [r3]
 8002d6a:	ed9f 3a3d 	vldr	s6, [pc, #244]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002d6e:	eddf 2a3c 	vldr	s5, [pc, #240]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002d72:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002d76:	eddf 1a3a 	vldr	s3, [pc, #232]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002d7a:	eeb0 1a66 	vmov.f32	s2, s13
 8002d7e:	eef0 0a47 	vmov.f32	s1, s14
 8002d82:	eeb0 0a67 	vmov.f32	s0, s15
 8002d86:	4839      	ldr	r0, [pc, #228]	; (8002e6c <_Z20Update_State_Machinev+0x46c>)
 8002d88:	f7fd ff1d 	bl	8000bc6 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <_Z20Update_State_Machinev+0x430>)
 8002d8e:	edd3 7a00 	vldr	s15, [r3]
 8002d92:	4b38      	ldr	r3, [pc, #224]	; (8002e74 <_Z20Update_State_Machinev+0x474>)
 8002d94:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002d98:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <_Z20Update_State_Machinev+0x478>)
 8002d9a:	edd3 6a00 	vldr	s13, [r3]
 8002d9e:	ed9f 3a30 	vldr	s6, [pc, #192]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002da2:	eddf 2a2f 	vldr	s5, [pc, #188]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002da6:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002daa:	eddf 1a2d 	vldr	s3, [pc, #180]	; 8002e60 <_Z20Update_State_Machinev+0x460>
 8002dae:	eeb0 1a66 	vmov.f32	s2, s13
 8002db2:	eef0 0a47 	vmov.f32	s1, s14
 8002db6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dba:	482e      	ldr	r0, [pc, #184]	; (8002e74 <_Z20Update_State_Machinev+0x474>)
 8002dbc:	f7fd ff03 	bl	8000bc6 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <_Z20Update_State_Machinev+0x47c>)
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
				joint13_on = true;
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <_Z20Update_State_Machinev+0x480>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002dce:	482d      	ldr	r0, [pc, #180]	; (8002e84 <_Z20Update_State_Machinev+0x484>)
 8002dd0:	f00a fa20 	bl	800d214 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <_Z20Update_State_Machinev+0x488>)
 8002dd6:	2234      	movs	r2, #52	; 0x34
 8002dd8:	701a      	strb	r2, [r3, #0]
				old_sq = indexy;
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <_Z20Update_State_Machinev+0x420>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <_Z20Update_State_Machinev+0x428>)
 8002de0:	6013      	str	r3, [r2, #0]
		else if (indexy == 255)
		{
			control_state = 0;
		}

		break;
 8002de2:	e280      	b.n	80032e6 <_Z20Update_State_Machinev+0x8e6>
		else if (indexy == 255)
 8002de4:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <_Z20Update_State_Machinev+0x420>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2bff      	cmp	r3, #255	; 0xff
 8002dea:	f040 827c 	bne.w	80032e6 <_Z20Update_State_Machinev+0x8e6>
			control_state = 0;
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <_Z20Update_State_Machinev+0x488>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
		break;
 8002df4:	e277      	b.n	80032e6 <_Z20Update_State_Machinev+0x8e6>
 8002df6:	bf00      	nop
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	408f4000 	.word	0x408f4000
 8002e00:	bc6a7efa 	.word	0xbc6a7efa
 8002e04:	3fc49374 	.word	0x3fc49374
 8002e08:	e59f2baa 	.word	0xe59f2baa
 8002e0c:	3f977079 	.word	0x3f977079
 8002e10:	432ca57a 	.word	0x432ca57a
 8002e14:	3fd2eb1c 	.word	0x3fd2eb1c
 8002e18:	53cddd6e 	.word	0x53cddd6e
 8002e1c:	3ff0f21d 	.word	0x3ff0f21d
 8002e20:	24000c0c 	.word	0x24000c0c
 8002e24:	24000c1c 	.word	0x24000c1c
 8002e28:	24000234 	.word	0x24000234
 8002e2c:	24000c18 	.word	0x24000c18
 8002e30:	24000afc 	.word	0x24000afc
 8002e34:	24000114 	.word	0x24000114
 8002e38:	24000be0 	.word	0x24000be0
 8002e3c:	24000014 	.word	0x24000014
 8002e40:	24000be4 	.word	0x24000be4
 8002e44:	24000af0 	.word	0x24000af0
 8002e48:	24000c04 	.word	0x24000c04
 8002e4c:	24000c08 	.word	0x24000c08
 8002e50:	2400022c 	.word	0x2400022c
 8002e54:	24000c10 	.word	0x24000c10
 8002e58:	24000230 	.word	0x24000230
 8002e5c:	24000c14 	.word	0x24000c14
 8002e60:	00000000 	.word	0x00000000
 8002e64:	24000568 	.word	0x24000568
 8002e68:	24000bf4 	.word	0x24000bf4
 8002e6c:	24000730 	.word	0x24000730
 8002e70:	24000bfc 	.word	0x24000bfc
 8002e74:	24000814 	.word	0x24000814
 8002e78:	24000c00 	.word	0x24000c00
 8002e7c:	24000bf0 	.word	0x24000bf0
 8002e80:	24000b3e 	.word	0x24000b3e
 8002e84:	24001094 	.word	0x24001094
 8002e88:	24000be8 	.word	0x24000be8

	case 42:
		Max_Time = 10;
 8002e8c:	4bb3      	ldr	r3, [pc, #716]	; (800315c <_Z20Update_State_Machinev+0x75c>)
 8002e8e:	4ab4      	ldr	r2, [pc, #720]	; (8003160 <_Z20Update_State_Machinev+0x760>)
 8002e90:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002e92:	4bb4      	ldr	r3, [pc, #720]	; (8003164 <_Z20Update_State_Machinev+0x764>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]

		if (Gripper_State[first - 1] == 1) {
 8002e98:	4bb3      	ldr	r3, [pc, #716]	; (8003168 <_Z20Update_State_Machinev+0x768>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	4ab3      	ldr	r2, [pc, #716]	; (800316c <_Z20Update_State_Machinev+0x76c>)
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01a      	beq.n	8002ee8 <_Z20Update_State_Machinev+0x4e8>
			fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002eb2:	4baa      	ldr	r3, [pc, #680]	; (800315c <_Z20Update_State_Machinev+0x75c>)
 8002eb4:	edd3 7a00 	vldr	s15, [r3]
 8002eb8:	4bad      	ldr	r3, [pc, #692]	; (8003170 <_Z20Update_State_Machinev+0x770>)
 8002eba:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002ebe:	4bad      	ldr	r3, [pc, #692]	; (8003174 <_Z20Update_State_Machinev+0x774>)
 8002ec0:	edd3 6a00 	vldr	s13, [r3]
 8002ec4:	ed9f 3aac 	vldr	s6, [pc, #688]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002ec8:	eddf 2aab 	vldr	s5, [pc, #684]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002ecc:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002ed0:	eddf 1aa9 	vldr	s3, [pc, #676]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002ed4:	eeb0 1a66 	vmov.f32	s2, s13
 8002ed8:	eef0 0a47 	vmov.f32	s1, s14
 8002edc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee0:	48a3      	ldr	r0, [pc, #652]	; (8003170 <_Z20Update_State_Machinev+0x770>)
 8002ee2:	f7fd fe70 	bl	8000bc6 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
 8002ee6:	e026      	b.n	8002f36 <_Z20Update_State_Machinev+0x536>
			Setpoint_J2_Down_pick, 0.0, 0.0, 0.0, 0.0);
		} else if (Gripper_State[first - 1] == 2) {
 8002ee8:	4b9f      	ldr	r3, [pc, #636]	; (8003168 <_Z20Update_State_Machinev+0x768>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	4a9f      	ldr	r2, [pc, #636]	; (800316c <_Z20Update_State_Machinev+0x76c>)
 8002ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <_Z20Update_State_Machinev+0x536>
			fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002f02:	4b96      	ldr	r3, [pc, #600]	; (800315c <_Z20Update_State_Machinev+0x75c>)
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	4b99      	ldr	r3, [pc, #612]	; (8003170 <_Z20Update_State_Machinev+0x770>)
 8002f0a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002f0e:	4b9b      	ldr	r3, [pc, #620]	; (800317c <_Z20Update_State_Machinev+0x77c>)
 8002f10:	edd3 6a00 	vldr	s13, [r3]
 8002f14:	ed9f 3a98 	vldr	s6, [pc, #608]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002f18:	eddf 2a97 	vldr	s5, [pc, #604]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002f1c:	ed9f 2a96 	vldr	s4, [pc, #600]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002f20:	eddf 1a95 	vldr	s3, [pc, #596]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002f24:	eeb0 1a66 	vmov.f32	s2, s13
 8002f28:	eef0 0a47 	vmov.f32	s1, s14
 8002f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f30:	488f      	ldr	r0, [pc, #572]	; (8003170 <_Z20Update_State_Machinev+0x770>)
 8002f32:	f7fd fe48 	bl	8000bc6 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
			Setpoint_J2_Down_place, 0.0, 0.0, 0.0, 0.0);
		}


		t = 0;
 8002f36:	4b92      	ldr	r3, [pc, #584]	; (8003180 <_Z20Update_State_Machinev+0x780>)
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002f3e:	4891      	ldr	r0, [pc, #580]	; (8003184 <_Z20Update_State_Machinev+0x784>)
 8002f40:	f00a f968 	bl	800d214 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002f44:	4b90      	ldr	r3, [pc, #576]	; (8003188 <_Z20Update_State_Machinev+0x788>)
 8002f46:	2236      	movs	r2, #54	; 0x36
 8002f48:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f4a:	4b90      	ldr	r3, [pc, #576]	; (800318c <_Z20Update_State_Machinev+0x78c>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
		break;
 8002f50:	e1ca      	b.n	80032e8 <_Z20Update_State_Machinev+0x8e8>

	case 43:
		Max_Time = 10;
 8002f52:	4b82      	ldr	r3, [pc, #520]	; (800315c <_Z20Update_State_Machinev+0x75c>)
 8002f54:	4a82      	ldr	r2, [pc, #520]	; (8003160 <_Z20Update_State_Machinev+0x760>)
 8002f56:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002f58:	4b82      	ldr	r3, [pc, #520]	; (8003164 <_Z20Update_State_Machinev+0x764>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002f5e:	4b7f      	ldr	r3, [pc, #508]	; (800315c <_Z20Update_State_Machinev+0x75c>)
 8002f60:	edd3 7a00 	vldr	s15, [r3]
 8002f64:	4b82      	ldr	r3, [pc, #520]	; (8003170 <_Z20Update_State_Machinev+0x770>)
 8002f66:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002f6a:	4b89      	ldr	r3, [pc, #548]	; (8003190 <_Z20Update_State_Machinev+0x790>)
 8002f6c:	edd3 6a00 	vldr	s13, [r3]
 8002f70:	ed9f 3a81 	vldr	s6, [pc, #516]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002f74:	eddf 2a80 	vldr	s5, [pc, #512]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002f78:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002f7c:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002f80:	eeb0 1a66 	vmov.f32	s2, s13
 8002f84:	eef0 0a47 	vmov.f32	s1, s14
 8002f88:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8c:	4878      	ldr	r0, [pc, #480]	; (8003170 <_Z20Update_State_Machinev+0x770>)
 8002f8e:	f7fd fe1a 	bl	8000bc6 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Up, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8002f92:	4b7b      	ldr	r3, [pc, #492]	; (8003180 <_Z20Update_State_Machinev+0x780>)
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002f9a:	487a      	ldr	r0, [pc, #488]	; (8003184 <_Z20Update_State_Machinev+0x784>)
 8002f9c:	f00a f93a 	bl	800d214 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8002fa0:	4b79      	ldr	r3, [pc, #484]	; (8003188 <_Z20Update_State_Machinev+0x788>)
 8002fa2:	2238      	movs	r2, #56	; 0x38
 8002fa4:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002fa6:	4b79      	ldr	r3, [pc, #484]	; (800318c <_Z20Update_State_Machinev+0x78c>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
		break;
 8002fac:	e19c      	b.n	80032e8 <_Z20Update_State_Machinev+0x8e8>

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002fae:	4875      	ldr	r0, [pc, #468]	; (8003184 <_Z20Update_State_Machinev+0x784>)
 8002fb0:	f00a f9a8 	bl	800d304 <HAL_TIM_Base_Stop_IT>
		t = 0;
 8002fb4:	4b72      	ldr	r3, [pc, #456]	; (8003180 <_Z20Update_State_Machinev+0x780>)
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
		fcb_joint1.Goal_Velocity = 0;
 8002fbc:	4b75      	ldr	r3, [pc, #468]	; (8003194 <_Z20Update_State_Machinev+0x794>)
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 8002fc4:	4b74      	ldr	r3, [pc, #464]	; (8003198 <_Z20Update_State_Machinev+0x798>)
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8002fcc:	4b73      	ldr	r3, [pc, #460]	; (800319c <_Z20Update_State_Machinev+0x79c>)
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 8002fd4:	4b6f      	ldr	r3, [pc, #444]	; (8003194 <_Z20Update_State_Machinev+0x794>)
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8002fde:	4b6f      	ldr	r3, [pc, #444]	; (800319c <_Z20Update_State_Machinev+0x79c>)
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8002fe8:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <_Z20Update_State_Machinev+0x798>)
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002ff2:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8002ff6:	486a      	ldr	r0, [pc, #424]	; (80031a0 <_Z20Update_State_Machinev+0x7a0>)
 8002ff8:	f7ff f8f2 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002ffc:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8003000:	4868      	ldr	r0, [pc, #416]	; (80031a4 <_Z20Update_State_Machinev+0x7a4>)
 8003002:	f7ff f8ed 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8003006:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8003178 <_Z20Update_State_Machinev+0x778>
 800300a:	4867      	ldr	r0, [pc, #412]	; (80031a8 <_Z20Update_State_Machinev+0x7a8>)
 800300c:	f7ff f8e8 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.Encoder;
 8003010:	4b60      	ldr	r3, [pc, #384]	; (8003194 <_Z20Update_State_Machinev+0x794>)
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	4a5f      	ldr	r2, [pc, #380]	; (8003194 <_Z20Update_State_Machinev+0x794>)
 8003016:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.Encoder;
 800301a:	4b5f      	ldr	r3, [pc, #380]	; (8003198 <_Z20Update_State_Machinev+0x798>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4a5e      	ldr	r2, [pc, #376]	; (8003198 <_Z20Update_State_Machinev+0x798>)
 8003020:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.Encoder;
 8003024:	4b5d      	ldr	r3, [pc, #372]	; (800319c <_Z20Update_State_Machinev+0x79c>)
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	4a5c      	ldr	r2, [pc, #368]	; (800319c <_Z20Update_State_Machinev+0x79c>)
 800302a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.C1 = 0;
 800302e:	4b59      	ldr	r3, [pc, #356]	; (8003194 <_Z20Update_State_Machinev+0x794>)
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <_Z20Update_State_Machinev+0x79c>)
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 8003042:	4b54      	ldr	r3, [pc, #336]	; (8003194 <_Z20Update_State_Machinev+0x794>)
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 800304c:	4b53      	ldr	r3, [pc, #332]	; (800319c <_Z20Update_State_Machinev+0x79c>)
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 8003056:	4b4f      	ldr	r3, [pc, #316]	; (8003194 <_Z20Update_State_Machinev+0x794>)
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 8003060:	4b4e      	ldr	r3, [pc, #312]	; (800319c <_Z20Update_State_Machinev+0x79c>)
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 800306a:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <_Z20Update_State_Machinev+0x794>)
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 8003074:	4b49      	ldr	r3, [pc, #292]	; (800319c <_Z20Update_State_Machinev+0x79c>)
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 800307e:	4b45      	ldr	r3, [pc, #276]	; (8003194 <_Z20Update_State_Machinev+0x794>)
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8003088:	4b44      	ldr	r3, [pc, #272]	; (800319c <_Z20Update_State_Machinev+0x79c>)
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <_Z20Update_State_Machinev+0x798>)
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 800309c:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <_Z20Update_State_Machinev+0x798>)
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 80030a6:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <_Z20Update_State_Machinev+0x798>)
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 80030b0:	4b39      	ldr	r3, [pc, #228]	; (8003198 <_Z20Update_State_Machinev+0x798>)
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 80030ba:	4b37      	ldr	r3, [pc, #220]	; (8003198 <_Z20Update_State_Machinev+0x798>)
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 80030c4:	4b30      	ldr	r3, [pc, #192]	; (8003188 <_Z20Update_State_Machinev+0x788>)
 80030c6:	222a      	movs	r2, #42	; 0x2a
 80030c8:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 80030ca:	4b30      	ldr	r3, [pc, #192]	; (800318c <_Z20Update_State_Machinev+0x78c>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
		break;
 80030d0:	e10a      	b.n	80032e8 <_Z20Update_State_Machinev+0x8e8>

//		State_FIN = true;
		break;

	case 54:
		HAL_TIM_Base_Stop_IT(&htim14);
 80030d2:	482c      	ldr	r0, [pc, #176]	; (8003184 <_Z20Update_State_Machinev+0x784>)
 80030d4:	f00a f916 	bl	800d304 <HAL_TIM_Base_Stop_IT>
		t = 0;
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <_Z20Update_State_Machinev+0x780>)
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
		fcb_joint2.Goal_Velocity = 0;
 80030e0:	4b23      	ldr	r3, [pc, #140]	; (8003170 <_Z20Update_State_Machinev+0x770>)
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 80030e8:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8003178 <_Z20Update_State_Machinev+0x778>
 80030ec:	482f      	ldr	r0, [pc, #188]	; (80031ac <_Z20Update_State_Machinev+0x7ac>)
 80030ee:	f7ff f877 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <_Z20Update_State_Machinev+0x770>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	4a1e      	ldr	r2, [pc, #120]	; (8003170 <_Z20Update_State_Machinev+0x770>)
 80030f8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 80030fc:	4b25      	ldr	r3, [pc, #148]	; (8003194 <_Z20Update_State_Machinev+0x794>)
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <_Z20Update_State_Machinev+0x79c>)
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <_Z20Update_State_Machinev+0x798>)
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800311a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003178 <_Z20Update_State_Machinev+0x778>
 800311e:	4820      	ldr	r0, [pc, #128]	; (80031a0 <_Z20Update_State_Machinev+0x7a0>)
 8003120:	f7ff f85e 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8003124:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8003128:	481e      	ldr	r0, [pc, #120]	; (80031a4 <_Z20Update_State_Machinev+0x7a4>)
 800312a:	f7ff f859 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 800312e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003178 <_Z20Update_State_Machinev+0x778>
 8003132:	481d      	ldr	r0, [pc, #116]	; (80031a8 <_Z20Update_State_Machinev+0x7a8>)
 8003134:	f7ff f854 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		if (Gripper_State[first - 1] == 1) {
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <_Z20Update_State_Machinev+0x768>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	4a0b      	ldr	r2, [pc, #44]	; (800316c <_Z20Update_State_Machinev+0x76c>)
 8003140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003144:	2b01      	cmp	r3, #1
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d030      	beq.n	80031b4 <_Z20Update_State_Machinev+0x7b4>
			gripper.GripperClose();
 8003152:	4817      	ldr	r0, [pc, #92]	; (80031b0 <_Z20Update_State_Machinev+0x7b0>)
 8003154:	f7fe fcda 	bl	8001b0c <_ZN10ServoMotor12GripperCloseEv>
 8003158:	e03c      	b.n	80031d4 <_Z20Update_State_Machinev+0x7d4>
 800315a:	bf00      	nop
 800315c:	24000afc 	.word	0x24000afc
 8003160:	41200000 	.word	0x41200000
 8003164:	24000b3e 	.word	0x24000b3e
 8003168:	2400000c 	.word	0x2400000c
 800316c:	24000b90 	.word	0x24000b90
 8003170:	2400064c 	.word	0x2400064c
 8003174:	24000004 	.word	0x24000004
 8003178:	00000000 	.word	0x00000000
 800317c:	24000008 	.word	0x24000008
 8003180:	24000bf0 	.word	0x24000bf0
 8003184:	24001094 	.word	0x24001094
 8003188:	24000be8 	.word	0x24000be8
 800318c:	24000af8 	.word	0x24000af8
 8003190:	24000000 	.word	0x24000000
 8003194:	24000568 	.word	0x24000568
 8003198:	24000814 	.word	0x24000814
 800319c:	24000730 	.word	0x24000730
 80031a0:	240004c8 	.word	0x240004c8
 80031a4:	24000540 	.word	0x24000540
 80031a8:	24000518 	.word	0x24000518
 80031ac:	240004f0 	.word	0x240004f0
 80031b0:	24000ac0 	.word	0x24000ac0
		} else if (Gripper_State[first - 1] == 2) {
 80031b4:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <_Z20Update_State_Machinev+0x8f4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	4a4f      	ldr	r2, [pc, #316]	; (80032f8 <_Z20Update_State_Machinev+0x8f8>)
 80031bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <_Z20Update_State_Machinev+0x7d4>
			gripper.GripperOpen();
 80031ce:	484b      	ldr	r0, [pc, #300]	; (80032fc <_Z20Update_State_Machinev+0x8fc>)
 80031d0:	f7fe fcb2 	bl	8001b38 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 80031d4:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 80031de:	4b48      	ldr	r3, [pc, #288]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 80031e8:	4b45      	ldr	r3, [pc, #276]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 80031f2:	4b43      	ldr	r3, [pc, #268]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 80031fc:	4b40      	ldr	r3, [pc, #256]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8003206:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003210:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <_Z20Update_State_Machinev+0x904>)
 800321a:	222b      	movs	r2, #43	; 0x2b
 800321c:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 800321e:	4b3a      	ldr	r3, [pc, #232]	; (8003308 <_Z20Update_State_Machinev+0x908>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
		break;
 8003224:	e060      	b.n	80032e8 <_Z20Update_State_Machinev+0x8e8>
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 8003226:	4b36      	ldr	r3, [pc, #216]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 800322e:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800330c <_Z20Update_State_Machinev+0x90c>
 8003232:	4837      	ldr	r0, [pc, #220]	; (8003310 <_Z20Update_State_Machinev+0x910>)
 8003234:	f7fe ffd4 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	4a30      	ldr	r2, [pc, #192]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 800323e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 8003242:	4b34      	ldr	r3, [pc, #208]	; (8003314 <_Z20Update_State_Machinev+0x914>)
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <_Z20Update_State_Machinev+0x918>)
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003256:	4b31      	ldr	r3, [pc, #196]	; (800331c <_Z20Update_State_Machinev+0x91c>)
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8003260:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800330c <_Z20Update_State_Machinev+0x90c>
 8003264:	482e      	ldr	r0, [pc, #184]	; (8003320 <_Z20Update_State_Machinev+0x920>)
 8003266:	f7fe ffbb 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 800326a:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800330c <_Z20Update_State_Machinev+0x90c>
 800326e:	482d      	ldr	r0, [pc, #180]	; (8003324 <_Z20Update_State_Machinev+0x924>)
 8003270:	f7fe ffb6 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8003274:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800330c <_Z20Update_State_Machinev+0x90c>
 8003278:	482b      	ldr	r0, [pc, #172]	; (8003328 <_Z20Update_State_Machinev+0x928>)
 800327a:	f7fe ffb1 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 800327e:	482b      	ldr	r0, [pc, #172]	; (800332c <_Z20Update_State_Machinev+0x92c>)
 8003280:	f00a f840 	bl	800d304 <HAL_TIM_Base_Stop_IT>
		t = 0;
 8003284:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <_Z20Update_State_Machinev+0x930>)
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
		fcb_joint2.C1 = 0;
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 80032a0:	4b17      	ldr	r3, [pc, #92]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <_Z20Update_State_Machinev+0x900>)
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 80032c6:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <_Z20Update_State_Machinev+0x904>)
 80032c8:	2229      	movs	r2, #41	; 0x29
 80032ca:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <_Z20Update_State_Machinev+0x908>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
		break;
 80032d2:	e009      	b.n	80032e8 <_Z20Update_State_Machinev+0x8e8>

	default:
		control_state = 0;
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <_Z20Update_State_Machinev+0x904>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <_Z20Update_State_Machinev+0x908>)
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
		break;
 80032e0:	e002      	b.n	80032e8 <_Z20Update_State_Machinev+0x8e8>
		break;
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <_Z20Update_State_Machinev+0x8e8>
		break;
 80032e6:	bf00      	nop
	}
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	ecbd 8b02 	vpop	{d8}
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	2400000c 	.word	0x2400000c
 80032f8:	24000b90 	.word	0x24000b90
 80032fc:	24000ac0 	.word	0x24000ac0
 8003300:	2400064c 	.word	0x2400064c
 8003304:	24000be8 	.word	0x24000be8
 8003308:	24000af8 	.word	0x24000af8
 800330c:	00000000 	.word	0x00000000
 8003310:	240004f0 	.word	0x240004f0
 8003314:	24000568 	.word	0x24000568
 8003318:	24000730 	.word	0x24000730
 800331c:	24000814 	.word	0x24000814
 8003320:	240004c8 	.word	0x240004c8
 8003324:	24000540 	.word	0x24000540
 8003328:	24000518 	.word	0x24000518
 800332c:	24001094 	.word	0x24001094
 8003330:	24000bf0 	.word	0x24000bf0

08003334 <HAL_UARTEx_RxEventCallback>:
float box_q4[30];
float idx, idy;

#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003334:	b5b0      	push	{r4, r5, r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a92      	ldr	r2, [pc, #584]	; (800358c <HAL_UARTEx_RxEventCallback+0x258>)
 8003344:	4293      	cmp	r3, r2
 8003346:	f040 814b 	bne.w	80035e0 <HAL_UARTEx_RxEventCallback+0x2ac>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 800334a:	4a91      	ldr	r2, [pc, #580]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 800334c:	4b91      	ldr	r3, [pc, #580]	; (8003594 <HAL_UARTEx_RxEventCallback+0x260>)
 800334e:	4614      	mov	r4, r2
 8003350:	461d      	mov	r5, r3
 8003352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003356:	682b      	ldr	r3, [r5, #0]
 8003358:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 800335a:	2214      	movs	r2, #20
 800335c:	2100      	movs	r1, #0
 800335e:	488d      	ldr	r0, [pc, #564]	; (8003594 <HAL_UARTEx_RxEventCallback+0x260>)
 8003360:	f00f f846 	bl	80123f0 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	2b02      	cmp	r3, #2
 8003368:	f240 80ff 	bls.w	800356a <HAL_UARTEx_RxEventCallback+0x236>
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	2b14      	cmp	r3, #20
 8003370:	f200 80fb 	bhi.w	800356a <HAL_UARTEx_RxEventCallback+0x236>
			cmdDataSize = Size - 2;	// Calculate data length.
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	3b02      	subs	r3, #2
 8003378:	b29a      	uxth	r2, r3
 800337a:	4b87      	ldr	r3, [pc, #540]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 800337c:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 800337e:	4b86      	ldr	r3, [pc, #536]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	4982      	ldr	r1, [pc, #520]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003388:	4884      	ldr	r0, [pc, #528]	; (800359c <HAL_UARTEx_RxEventCallback+0x268>)
 800338a:	f003 fdf3 	bl	8006f74 <HAL_CRC_Calculate>
 800338e:	4603      	mov	r3, r0
 8003390:	b29a      	uxth	r2, r3
 8003392:	4b83      	ldr	r3, [pc, #524]	; (80035a0 <HAL_UARTEx_RxEventCallback+0x26c>)
 8003394:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8003396:	4b80      	ldr	r3, [pc, #512]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	4b7c      	ldr	r3, [pc, #496]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033a0:	5c9b      	ldrb	r3, [r3, r2]
 80033a2:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 80033a4:	b21a      	sxth	r2, r3
 80033a6:	4b7c      	ldr	r3, [pc, #496]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	4978      	ldr	r1, [pc, #480]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033b0:	5ccb      	ldrb	r3, [r1, r3]
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80033ba:	4b7a      	ldr	r3, [pc, #488]	; (80035a4 <HAL_UARTEx_RxEventCallback+0x270>)
 80033bc:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80033be:	4b78      	ldr	r3, [pc, #480]	; (80035a0 <HAL_UARTEx_RxEventCallback+0x26c>)
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	4b77      	ldr	r3, [pc, #476]	; (80035a4 <HAL_UARTEx_RxEventCallback+0x270>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	429a      	cmp	r2, r3
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8114 	beq.w	8003602 <HAL_UARTEx_RxEventCallback+0x2ce>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80033da:	2201      	movs	r2, #1
 80033dc:	2102      	movs	r1, #2
 80033de:	4872      	ldr	r0, [pc, #456]	; (80035a8 <HAL_UARTEx_RxEventCallback+0x274>)
 80033e0:	f006 ff4e 	bl	800a280 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80033e4:	2200      	movs	r2, #0
 80033e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033ea:	4870      	ldr	r0, [pc, #448]	; (80035ac <HAL_UARTEx_RxEventCallback+0x278>)
 80033ec:	f006 ff48 	bl	800a280 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 80033f0:	4b67      	ldr	r3, [pc, #412]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b61      	cmp	r3, #97	; 0x61
 80033f6:	d106      	bne.n	8003406 <HAL_UARTEx_RxEventCallback+0xd2>
 80033f8:	4b67      	ldr	r3, [pc, #412]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d101      	bne.n	8003406 <HAL_UARTEx_RxEventCallback+0xd2>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_UARTEx_RxEventCallback+0xd4>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d014      	beq.n	8003436 <HAL_UARTEx_RxEventCallback+0x102>
						{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 800340c:	4b60      	ldr	r3, [pc, #384]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 800340e:	785b      	ldrb	r3, [r3, #1]
 8003410:	b25a      	sxtb	r2, r3
 8003412:	4b67      	ldr	r3, [pc, #412]	; (80035b0 <HAL_UARTEx_RxEventCallback+0x27c>)
 8003414:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8003416:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003418:	789b      	ldrb	r3, [r3, #2]
 800341a:	b25a      	sxtb	r2, r3
 800341c:	4b65      	ldr	r3, [pc, #404]	; (80035b4 <HAL_UARTEx_RxEventCallback+0x280>)
 800341e:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8003420:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003422:	78db      	ldrb	r3, [r3, #3]
 8003424:	b25a      	sxtb	r2, r3
 8003426:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_UARTEx_RxEventCallback+0x284>)
 8003428:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 800342a:	4b59      	ldr	r3, [pc, #356]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 800342c:	791b      	ldrb	r3, [r3, #4]
 800342e:	b25a      	sxtb	r2, r3
 8003430:	4b62      	ldr	r3, [pc, #392]	; (80035bc <HAL_UARTEx_RxEventCallback+0x288>)
 8003432:	701a      	strb	r2, [r3, #0]
//					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
//					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
//					pyaw = Old_Rx_Buffer[7];
//				}

			}
 8003434:	e0e5      	b.n	8003602 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 8003436:	4b56      	ldr	r3, [pc, #344]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b71      	cmp	r3, #113	; 0x71
 800343c:	d106      	bne.n	800344c <HAL_UARTEx_RxEventCallback+0x118>
 800343e:	4b56      	ldr	r3, [pc, #344]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b05      	cmp	r3, #5
 8003446:	d101      	bne.n	800344c <HAL_UARTEx_RxEventCallback+0x118>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_UARTEx_RxEventCallback+0x11a>
 800344c:	2300      	movs	r3, #0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d014      	beq.n	800347c <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 8003452:	4b4f      	ldr	r3, [pc, #316]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003454:	785b      	ldrb	r3, [r3, #1]
 8003456:	b25a      	sxtb	r2, r3
 8003458:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_UARTEx_RxEventCallback+0x28c>)
 800345a:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 800345c:	4b4c      	ldr	r3, [pc, #304]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 800345e:	789b      	ldrb	r3, [r3, #2]
 8003460:	b25a      	sxtb	r2, r3
 8003462:	4b58      	ldr	r3, [pc, #352]	; (80035c4 <HAL_UARTEx_RxEventCallback+0x290>)
 8003464:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003468:	78db      	ldrb	r3, [r3, #3]
 800346a:	b25a      	sxtb	r2, r3
 800346c:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <HAL_UARTEx_RxEventCallback+0x294>)
 800346e:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8003470:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003472:	791b      	ldrb	r3, [r3, #4]
 8003474:	b25a      	sxtb	r2, r3
 8003476:	4b55      	ldr	r3, [pc, #340]	; (80035cc <HAL_UARTEx_RxEventCallback+0x298>)
 8003478:	701a      	strb	r2, [r3, #0]
			}
 800347a:	e0c2      	b.n	8003602 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2) {
 800347c:	4b44      	ldr	r3, [pc, #272]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b85      	cmp	r3, #133	; 0x85
 8003482:	d106      	bne.n	8003492 <HAL_UARTEx_RxEventCallback+0x15e>
 8003484:	4b44      	ldr	r3, [pc, #272]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d101      	bne.n	8003492 <HAL_UARTEx_RxEventCallback+0x15e>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_UARTEx_RxEventCallback+0x160>
 8003492:	2300      	movs	r3, #0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 8003498:	4b4d      	ldr	r3, [pc, #308]	; (80035d0 <HAL_UARTEx_RxEventCallback+0x29c>)
 800349a:	2233      	movs	r2, #51	; 0x33
 800349c:	701a      	strb	r2, [r3, #0]
			}
 800349e:	e0b0      	b.n	8003602 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b86      	cmp	r3, #134	; 0x86
 80034a6:	d106      	bne.n	80034b6 <HAL_UARTEx_RxEventCallback+0x182>
 80034a8:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d101      	bne.n	80034b6 <HAL_UARTEx_RxEventCallback+0x182>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_UARTEx_RxEventCallback+0x184>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 80034bc:	4b34      	ldr	r3, [pc, #208]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 80034be:	785b      	ldrb	r3, [r3, #1]
 80034c0:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 80034c2:	4b33      	ldr	r3, [pc, #204]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 80034c4:	789b      	ldrb	r3, [r3, #2]
 80034c6:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 80034c8:	68f9      	ldr	r1, [r7, #12]
 80034ca:	6938      	ldr	r0, [r7, #16]
 80034cc:	f7ff f8ac 	bl	8002628 <_Z12Insert_queueii>
			}
 80034d0:	e097      	b.n	8003602 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2) {
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b87      	cmp	r3, #135	; 0x87
 80034d8:	d106      	bne.n	80034e8 <HAL_UARTEx_RxEventCallback+0x1b4>
 80034da:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d101      	bne.n	80034e8 <HAL_UARTEx_RxEventCallback+0x1b4>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_UARTEx_RxEventCallback+0x1b6>
 80034e8:	2300      	movs	r3, #0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 80034ee:	4b28      	ldr	r3, [pc, #160]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 80034f0:	785b      	ldrb	r3, [r3, #1]
 80034f2:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 80034f4:	4a36      	ldr	r2, [pc, #216]	; (80035d0 <HAL_UARTEx_RxEventCallback+0x29c>)
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 80034fa:	f7ff fa81 	bl	8002a00 <_Z20Update_State_Machinev>
			}
 80034fe:	e080      	b.n	8003602 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2) {
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b89      	cmp	r3, #137	; 0x89
 8003506:	d106      	bne.n	8003516 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d101      	bne.n	8003516 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_UARTEx_RxEventCallback+0x1e4>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 800351c:	f7ff fa70 	bl	8002a00 <_Z20Update_State_Machinev>
			}
 8003520:	e06f      	b.n	8003602 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b81      	cmp	r3, #129	; 0x81
 8003528:	d106      	bne.n	8003538 <HAL_UARTEx_RxEventCallback+0x204>
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_UARTEx_RxEventCallback+0x264>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d101      	bne.n	8003538 <HAL_UARTEx_RxEventCallback+0x204>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_UARTEx_RxEventCallback+0x206>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d061      	beq.n	8003602 <HAL_UARTEx_RxEventCallback+0x2ce>
					gripperstate = Old_Rx_Buffer[1];
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003540:	785b      	ldrb	r3, [r3, #1]
 8003542:	461a      	mov	r2, r3
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <HAL_UARTEx_RxEventCallback+0x2a0>)
 8003546:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 8003548:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_UARTEx_RxEventCallback+0x2a0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 800355a:	481f      	ldr	r0, [pc, #124]	; (80035d8 <HAL_UARTEx_RxEventCallback+0x2a4>)
 800355c:	f7fe faec 	bl	8001b38 <_ZN10ServoMotor11GripperOpenEv>
			}
 8003560:	e04f      	b.n	8003602 <HAL_UARTEx_RxEventCallback+0x2ce>
						gripper.GripperClose();
 8003562:	481d      	ldr	r0, [pc, #116]	; (80035d8 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8003564:	f7fe fad2 	bl	8001b0c <_ZN10ServoMotor12GripperCloseEv>
			}
 8003568:	e04b      	b.n	8003602 <HAL_UARTEx_RxEventCallback+0x2ce>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800356a:	2200      	movs	r2, #0
 800356c:	2102      	movs	r1, #2
 800356e:	480e      	ldr	r0, [pc, #56]	; (80035a8 <HAL_UARTEx_RxEventCallback+0x274>)
 8003570:	f006 fe86 	bl	800a280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003574:	2201      	movs	r2, #1
 8003576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800357a:	480c      	ldr	r0, [pc, #48]	; (80035ac <HAL_UARTEx_RxEventCallback+0x278>)
 800357c:	f006 fe80 	bl	800a280 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 8003580:	220c      	movs	r2, #12
 8003582:	4916      	ldr	r1, [pc, #88]	; (80035dc <HAL_UARTEx_RxEventCallback+0x2a8>)
 8003584:	4801      	ldr	r0, [pc, #4]	; (800358c <HAL_UARTEx_RxEventCallback+0x258>)
 8003586:	f00b fbfb 	bl	800ed80 <HAL_UART_Transmit_DMA>
 800358a:	e03b      	b.n	8003604 <HAL_UARTEx_RxEventCallback+0x2d0>
 800358c:	24001374 	.word	0x24001374
 8003590:	24000b10 	.word	0x24000b10
 8003594:	24000b24 	.word	0x24000b24
 8003598:	24000b38 	.word	0x24000b38
 800359c:	24000434 	.word	0x24000434
 80035a0:	24000b08 	.word	0x24000b08
 80035a4:	24000b0a 	.word	0x24000b0a
 80035a8:	58021000 	.word	0x58021000
 80035ac:	58020400 	.word	0x58020400
 80035b0:	24000b00 	.word	0x24000b00
 80035b4:	24000b01 	.word	0x24000b01
 80035b8:	24000b02 	.word	0x24000b02
 80035bc:	24000b03 	.word	0x24000b03
 80035c0:	24000b04 	.word	0x24000b04
 80035c4:	24000b05 	.word	0x24000b05
 80035c8:	24000b06 	.word	0x24000b06
 80035cc:	24000b07 	.word	0x24000b07
 80035d0:	24000be8 	.word	0x24000be8
 80035d4:	24000b0c 	.word	0x24000b0c
 80035d8:	24000ac0 	.word	0x24000ac0
 80035dc:	08014cf8 	.word	0x08014cf8
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80035e0:	2200      	movs	r2, #0
 80035e2:	2102      	movs	r1, #2
 80035e4:	483d      	ldr	r0, [pc, #244]	; (80036dc <HAL_UARTEx_RxEventCallback+0x3a8>)
 80035e6:	f006 fe4b 	bl	800a280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80035ea:	2201      	movs	r2, #1
 80035ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035f0:	483b      	ldr	r0, [pc, #236]	; (80036e0 <HAL_UARTEx_RxEventCallback+0x3ac>)
 80035f2:	f006 fe45 	bl	800a280 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 80035f6:	2215      	movs	r2, #21
 80035f8:	493a      	ldr	r1, [pc, #232]	; (80036e4 <HAL_UARTEx_RxEventCallback+0x3b0>)
 80035fa:	483b      	ldr	r0, [pc, #236]	; (80036e8 <HAL_UARTEx_RxEventCallback+0x3b4>)
 80035fc:	f00b fbc0 	bl	800ed80 <HAL_UART_Transmit_DMA>
 8003600:	e000      	b.n	8003604 <HAL_UARTEx_RxEventCallback+0x2d0>
			}
 8003602:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8003604:	2214      	movs	r2, #20
 8003606:	4939      	ldr	r1, [pc, #228]	; (80036ec <HAL_UARTEx_RxEventCallback+0x3b8>)
 8003608:	4837      	ldr	r0, [pc, #220]	; (80036e8 <HAL_UARTEx_RxEventCallback+0x3b4>)
 800360a:	f00d fb1e 	bl	8010c4a <HAL_UARTEx_ReceiveToIdle_DMA>
	Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800360e:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a38      	ldr	r2, [pc, #224]	; (80036f4 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d04a      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 8003618:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a36      	ldr	r2, [pc, #216]	; (80036f8 <HAL_UARTEx_RxEventCallback+0x3c4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d045      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 8003622:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a35      	ldr	r2, [pc, #212]	; (80036fc <HAL_UARTEx_RxEventCallback+0x3c8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d040      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 800362c:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a33      	ldr	r2, [pc, #204]	; (8003700 <HAL_UARTEx_RxEventCallback+0x3cc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d03b      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 8003636:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a32      	ldr	r2, [pc, #200]	; (8003704 <HAL_UARTEx_RxEventCallback+0x3d0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d036      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 8003640:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a30      	ldr	r2, [pc, #192]	; (8003708 <HAL_UARTEx_RxEventCallback+0x3d4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d031      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 800364a:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2f      	ldr	r2, [pc, #188]	; (800370c <HAL_UARTEx_RxEventCallback+0x3d8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d02c      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 8003654:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <HAL_UARTEx_RxEventCallback+0x3dc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d027      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <HAL_UARTEx_RxEventCallback+0x3e0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d022      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 8003668:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2a      	ldr	r2, [pc, #168]	; (8003718 <HAL_UARTEx_RxEventCallback+0x3e4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01d      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 8003672:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a29      	ldr	r2, [pc, #164]	; (800371c <HAL_UARTEx_RxEventCallback+0x3e8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 800367c:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <HAL_UARTEx_RxEventCallback+0x3ec>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a26      	ldr	r2, [pc, #152]	; (8003724 <HAL_UARTEx_RxEventCallback+0x3f0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a24      	ldr	r2, [pc, #144]	; (8003728 <HAL_UARTEx_RxEventCallback+0x3f4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a23      	ldr	r2, [pc, #140]	; (800372c <HAL_UARTEx_RxEventCallback+0x3f8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_UARTEx_RxEventCallback+0x37a>
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a21      	ldr	r2, [pc, #132]	; (8003730 <HAL_UARTEx_RxEventCallback+0x3fc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d108      	bne.n	80036c0 <HAL_UARTEx_RxEventCallback+0x38c>
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0208 	bic.w	r2, r2, #8
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e008      	b.n	80036d2 <HAL_UARTEx_RxEventCallback+0x39e>
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0204 	bic.w	r2, r2, #4
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bdb0      	pop	{r4, r5, r7, pc}
 80036da:	bf00      	nop
 80036dc:	58021000 	.word	0x58021000
 80036e0:	58020400 	.word	0x58020400
 80036e4:	08014d08 	.word	0x08014d08
 80036e8:	24001374 	.word	0x24001374
 80036ec:	24000b24 	.word	0x24000b24
 80036f0:	2400165c 	.word	0x2400165c
 80036f4:	40020010 	.word	0x40020010
 80036f8:	40020028 	.word	0x40020028
 80036fc:	40020040 	.word	0x40020040
 8003700:	40020058 	.word	0x40020058
 8003704:	40020070 	.word	0x40020070
 8003708:	40020088 	.word	0x40020088
 800370c:	400200a0 	.word	0x400200a0
 8003710:	400200b8 	.word	0x400200b8
 8003714:	40020410 	.word	0x40020410
 8003718:	40020428 	.word	0x40020428
 800371c:	40020440 	.word	0x40020440
 8003720:	40020458 	.word	0x40020458
 8003724:	40020470 	.word	0x40020470
 8003728:	40020488 	.word	0x40020488
 800372c:	400204a0 	.word	0x400204a0
 8003730:	400204b8 	.word	0x400204b8
 8003734:	00000000 	.word	0x00000000

08003738 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4acb      	ldr	r2, [pc, #812]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d110      	bne.n	800376a <HAL_TIM_PeriodElapsedCallback+0x32>
//
////					stepperJ1.StepperOpenLoopSpeed(u_q1/num);
////					stepperJ2.StepperSetFrequency(u_q2/3.0);
////					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
////					stepperJ4.StepperOpenLoopSpeed(u_q4/num);
		if (State_FIN) {
 8003748:	4bca      	ldr	r3, [pc, #808]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_TIM_PeriodElapsedCallback+0x32>
			Balloon++;
 8003752:	4bc9      	ldr	r3, [pc, #804]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	4ac7      	ldr	r2, [pc, #796]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800375a:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 800375c:	f7ff f950 	bl	8002a00 <_Z20Update_State_Machinev>
			Update_State_Machine();
 8003760:	f7ff f94e 	bl	8002a00 <_Z20Update_State_Machinev>
			State_FIN = false;
 8003764:	4bc3      	ldr	r3, [pc, #780]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
		}

	}

	if (htim == &htim16) {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4ac3      	ldr	r2, [pc, #780]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800376e:	4293      	cmp	r3, r2
 8003770:	f040 80ca 	bne.w	8003908 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		encoderJ1.AMT21_Read();
 8003774:	48c2      	ldr	r0, [pc, #776]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003776:	f7fc ffac 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 800377a:	48c1      	ldr	r0, [pc, #772]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800377c:	f7fc ffd8 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	4bbf      	ldr	r3, [pc, #764]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003786:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8003788:	4bbe      	ldr	r3, [pc, #760]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d110      	bne.n	80037b2 <HAL_TIM_PeriodElapsedCallback+0x7a>
			fcb_joint1.Encoder = (encoderJ1.getAngPos180() / 2.609);
 8003790:	48bb      	ldr	r0, [pc, #748]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003792:	f7fd f833 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003796:	4603      	mov	r3, r0
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80037a0:	ed9f 5baf 	vldr	d5, [pc, #700]	; 8003a60 <HAL_TIM_PeriodElapsedCallback+0x328>
 80037a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80037a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037ac:	4bb6      	ldr	r3, [pc, #728]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80037ae:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 80037b2:	48b6      	ldr	r0, [pc, #728]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x354>)
 80037b4:	f7fc ff8d 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 80037b8:	48b4      	ldr	r0, [pc, #720]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x354>)
 80037ba:	f7fc ffb9 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	4bb3      	ldr	r3, [pc, #716]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80037c4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 80037c6:	4bb2      	ldr	r3, [pc, #712]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d112      	bne.n	80037f4 <HAL_TIM_PeriodElapsedCallback+0xbc>
			encoderJ2.unwarp();
 80037ce:	48af      	ldr	r0, [pc, #700]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x354>)
 80037d0:	f7fd f836 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 80037d4:	48ad      	ldr	r0, [pc, #692]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x354>)
 80037d6:	f7fd f892 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 80037da:	ee07 0a90 	vmov	s15, r0
 80037de:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80037e2:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 8003a60 <HAL_TIM_PeriodElapsedCallback+0x328>
 80037e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80037ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037ee:	4ba9      	ldr	r3, [pc, #676]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80037f0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 80037f4:	48a8      	ldr	r0, [pc, #672]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80037f6:	f7fc ff6c 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80037fa:	48a7      	ldr	r0, [pc, #668]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80037fc:	f7fc ff98 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	4ba5      	ldr	r3, [pc, #660]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003806:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003808:	4ba4      	ldr	r3, [pc, #656]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x364>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d110      	bne.n	8003832 <HAL_TIM_PeriodElapsedCallback+0xfa>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8003810:	48a1      	ldr	r0, [pc, #644]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003812:	f7fc fff3 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003816:	4603      	mov	r3, r0
 8003818:	ee07 3a90 	vmov	s15, r3
 800381c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003820:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 8003a60 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003824:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003828:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800382c:	4b9c      	ldr	r3, [pc, #624]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800382e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003832:	489c      	ldr	r0, [pc, #624]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003834:	f7fc ff4d 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003838:	489a      	ldr	r0, [pc, #616]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800383a:	f7fc ff79 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	4b99      	ldr	r3, [pc, #612]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8003844:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003846:	4b98      	ldr	r3, [pc, #608]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d110      	bne.n	8003870 <HAL_TIM_PeriodElapsedCallback+0x138>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 800384e:	4895      	ldr	r0, [pc, #596]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003850:	f7fc ffd4 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003854:	4603      	mov	r3, r0
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800385e:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8003a68 <HAL_TIM_PeriodElapsedCallback+0x330>
 8003862:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003866:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800386a:	4b90      	ldr	r3, [pc, #576]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x374>)
 800386c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 8003870:	488f      	ldr	r0, [pc, #572]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8003872:	f7fd f8c1 	bl	80009f8 <_ZN10AS5047UABI12getMRadAngleEv>
 8003876:	eef0 7a40 	vmov.f32	s15, s0
 800387a:	4b8e      	ldr	r3, [pc, #568]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800387c:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 8003880:	488b      	ldr	r0, [pc, #556]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8003882:	f7fd f897 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 8003886:	eef0 7a40 	vmov.f32	s15, s0
 800388a:	4b8b      	ldr	r3, [pc, #556]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800388c:	edc3 7a00 	vstr	s15, [r3]
//		current_angle = chessSPIEncoder.getRawRotation();
//		current_angle_map = chessSPIEncoder.read2angle(current_angle);
//		angle = current_angle_map - zero_position_map;
//		angle = chessSPIEncoder.normalize(angle);

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 8003890:	4b7d      	ldr	r3, [pc, #500]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003892:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003896:	eeb0 0a67 	vmov.f32	s0, s15
 800389a:	487b      	ldr	r0, [pc, #492]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800389c:	f7fd fab7 	bl	8000e0e <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 80038a0:	4b79      	ldr	r3, [pc, #484]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80038a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038a6:	4a78      	ldr	r2, [pc, #480]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80038a8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 80038ac:	4b76      	ldr	r3, [pc, #472]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80038ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038b2:	4a75      	ldr	r2, [pc, #468]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80038b4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint2.KalmanFillter(fcb_joint2.Encoder);
 80038b8:	4b76      	ldr	r3, [pc, #472]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80038ba:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80038be:	eeb0 0a67 	vmov.f32	s0, s15
 80038c2:	4874      	ldr	r0, [pc, #464]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80038c4:	f7fd faa3 	bl	8000e0e <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint2.kalman_pos = fcb_joint2.X11;
 80038c8:	4b72      	ldr	r3, [pc, #456]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80038ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038ce:	4a71      	ldr	r2, [pc, #452]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80038d0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint2.kalman_velo = fcb_joint2.X21;
 80038d4:	4b6f      	ldr	r3, [pc, #444]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80038d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038da:	4a6e      	ldr	r2, [pc, #440]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80038dc:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 80038e0:	4b6f      	ldr	r3, [pc, #444]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80038e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80038e6:	eeb0 0a67 	vmov.f32	s0, s15
 80038ea:	486d      	ldr	r0, [pc, #436]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80038ec:	f7fd fa8f 	bl	8000e0e <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 80038f0:	4b6b      	ldr	r3, [pc, #428]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80038f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038f6:	4a6a      	ldr	r2, [pc, #424]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80038f8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 80038fc:	4b68      	ldr	r3, [pc, #416]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80038fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003902:	4a67      	ldr	r2, [pc, #412]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003904:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc


	}

	if (htim == &htim14) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a6c      	ldr	r2, [pc, #432]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x384>)
 800390c:	4293      	cmp	r3, r2
 800390e:	f040 843a 	bne.w	8004186 <HAL_TIM_PeriodElapsedCallback+0xa4e>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 8003912:	4b6b      	ldr	r3, [pc, #428]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003914:	ed93 7a00 	vldr	s14, [r3]
 8003918:	4b69      	ldr	r3, [pc, #420]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	edc7 7a07 	vstr	s15, [r7, #28]
		float t3 = t * t * t;
 8003926:	4b66      	ldr	r3, [pc, #408]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003928:	ed93 7a00 	vldr	s14, [r3]
 800392c:	4b64      	ldr	r3, [pc, #400]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003936:	4b62      	ldr	r3, [pc, #392]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003938:	edd3 7a00 	vldr	s15, [r3]
 800393c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003940:	edc7 7a06 	vstr	s15, [r7, #24]
		float t4 = t * t * t * t;
 8003944:	4b5e      	ldr	r3, [pc, #376]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003946:	ed93 7a00 	vldr	s14, [r3]
 800394a:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800394c:	edd3 7a00 	vldr	s15, [r3]
 8003950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003954:	4b5a      	ldr	r3, [pc, #360]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003956:	edd3 7a00 	vldr	s15, [r3]
 800395a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800395e:	4b58      	ldr	r3, [pc, #352]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003968:	edc7 7a05 	vstr	s15, [r7, #20]
		float t5 = t * t * t * t * t;
 800396c:	4b54      	ldr	r3, [pc, #336]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800396e:	ed93 7a00 	vldr	s14, [r3]
 8003972:	4b53      	ldr	r3, [pc, #332]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003974:	edd3 7a00 	vldr	s15, [r3]
 8003978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800397c:	4b50      	ldr	r3, [pc, #320]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800397e:	edd3 7a00 	vldr	s15, [r3]
 8003982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003986:	4b4e      	ldr	r3, [pc, #312]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003988:	edd3 7a00 	vldr	s15, [r3]
 800398c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003990:	4b4b      	ldr	r3, [pc, #300]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003992:	edd3 7a00 	vldr	s15, [r3]
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a04 	vstr	s15, [r7, #16]
////	fcb_joint1.Goal_Position = fcb_X.q1;
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;

		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 800399e:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80039a0:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80039a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80039a8:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80039aa:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80039ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039b2:	ee37 5b07 	vadd.f64	d5, d7, d7
 80039b6:	4b42      	ldr	r3, [pc, #264]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80039b8:	edd3 7a00 	vldr	s15, [r3]
 80039bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039c4:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint1.C3 * t2) + (4.0 * fcb_joint1.C4 * t3)
 80039c8:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80039ca:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80039ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039d2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80039d6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039da:	edd7 7a07 	vldr	s15, [r7, #28]
 80039de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80039ea:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80039ec:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80039f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039f4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80039f8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a08:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint1.C5 * t4);
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003a0e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003a12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a16:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003a1a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003a1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a26:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003a34:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003a3a:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003a3e:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003a40:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003a44:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003a46:	edd3 7a00 	vldr	s15, [r3]
 8003a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a4e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C2 * t2) + (fcb_joint1.C3 * t3)
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003a54:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003a58:	e034      	b.n	8003ac4 <HAL_TIM_PeriodElapsedCallback+0x38c>
 8003a5a:	bf00      	nop
 8003a5c:	f3af 8000 	nop.w
 8003a60:	645a1cac 	.word	0x645a1cac
 8003a64:	4004df3b 	.word	0x4004df3b
 8003a68:	645a1cac 	.word	0x645a1cac
 8003a6c:	c004df3b 	.word	0xc004df3b
 8003a70:	24000ecc 	.word	0x24000ecc
 8003a74:	24000af8 	.word	0x24000af8
 8003a78:	24000bec 	.word	0x24000bec
 8003a7c:	2400112c 	.word	0x2400112c
 8003a80:	24000458 	.word	0x24000458
 8003a84:	24000adc 	.word	0x24000adc
 8003a88:	24000568 	.word	0x24000568
 8003a8c:	24000474 	.word	0x24000474
 8003a90:	24000add 	.word	0x24000add
 8003a94:	2400064c 	.word	0x2400064c
 8003a98:	24000490 	.word	0x24000490
 8003a9c:	24000ade 	.word	0x24000ade
 8003aa0:	24000730 	.word	0x24000730
 8003aa4:	240004ac 	.word	0x240004ac
 8003aa8:	24000adf 	.word	0x24000adf
 8003aac:	24000814 	.word	0x24000814
 8003ab0:	24000ae0 	.word	0x24000ae0
 8003ab4:	24000af0 	.word	0x24000af0
 8003ab8:	24000af4 	.word	0x24000af4
 8003abc:	24001094 	.word	0x24001094
 8003ac0:	24000bf0 	.word	0x24000bf0
 8003ac4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ad0:	4bdc      	ldr	r3, [pc, #880]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003ad2:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003ad6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ada:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ade:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C4 * t4) + (fcb_joint1.C5 * t5));
 8003ae2:	4bd8      	ldr	r3, [pc, #864]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003ae4:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003ae8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af4:	4bd3      	ldr	r3, [pc, #844]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003af6:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003afa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b02:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003b06:	4bcf      	ldr	r3, [pc, #828]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003b08:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003b0c:	4bce      	ldr	r3, [pc, #824]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b0e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003b12:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b16:	4bcc      	ldr	r3, [pc, #816]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b18:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003b1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b20:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003b24:	4bc9      	ldr	r3, [pc, #804]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b2e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b32:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint2.C3 * t2) + (4.0 * fcb_joint2.C4 * t3)
 8003b36:	4bc4      	ldr	r3, [pc, #784]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b38:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b40:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003b44:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b48:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b50:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b54:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b58:	4bbb      	ldr	r3, [pc, #748]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b5a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003b5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b62:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003b66:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b72:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b76:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint2.C5 * t4);
 8003b7a:	4bb3      	ldr	r3, [pc, #716]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b7c:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003b80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b84:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003b88:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003ba0:	4ba9      	ldr	r3, [pc, #676]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003ba2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003ba6:	4ba8      	ldr	r3, [pc, #672]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003ba8:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003bac:	4ba6      	ldr	r3, [pc, #664]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003bae:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003bb2:	4ba6      	ldr	r3, [pc, #664]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003bb4:	edd3 7a00 	vldr	s15, [r3]
 8003bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C2 * t2) + (fcb_joint2.C3 * t3)
 8003bc0:	4ba1      	ldr	r3, [pc, #644]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003bc2:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003bc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bd2:	4b9d      	ldr	r3, [pc, #628]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003bd4:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003bd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003be0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C4 * t4) + (fcb_joint2.C5 * t5));
 8003be4:	4b98      	ldr	r3, [pc, #608]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003be6:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bf6:	4b94      	ldr	r3, [pc, #592]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003bf8:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003bfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c04:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003c08:	4b8f      	ldr	r3, [pc, #572]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003c0a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003c0e:	4b90      	ldr	r3, [pc, #576]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c10:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003c14:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c18:	4b8d      	ldr	r3, [pc, #564]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c1a:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003c1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c22:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003c26:	4b89      	ldr	r3, [pc, #548]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c34:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint3.C3 * t2) + (4.0 * fcb_joint3.C4 * t3)
 8003c38:	4b85      	ldr	r3, [pc, #532]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c3a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003c3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c42:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003c46:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003c4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c52:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c56:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c5a:	4b7d      	ldr	r3, [pc, #500]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c5c:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003c60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c64:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003c68:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003c6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c74:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c78:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint3.C5 * t4);
 8003c7c:	4b74      	ldr	r3, [pc, #464]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c7e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003c82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c86:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003c8a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003c8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c96:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c9a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003ca2:	4b6b      	ldr	r3, [pc, #428]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003ca4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003ca8:	4b69      	ldr	r3, [pc, #420]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003caa:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003cae:	4b68      	ldr	r3, [pc, #416]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003cb0:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003cb4:	4b65      	ldr	r3, [pc, #404]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C2 * t2) + (fcb_joint3.C3 * t3)
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003cc4:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003cc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cd4:	4b5e      	ldr	r3, [pc, #376]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003cd6:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003cda:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C4 * t4) + (fcb_joint3.C5 * t5));
 8003ce6:	4b5a      	ldr	r3, [pc, #360]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003ce8:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cf8:	4b55      	ldr	r3, [pc, #340]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003cfa:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003cfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d06:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003d0a:	4b51      	ldr	r3, [pc, #324]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003d0c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d12:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003d16:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d1a:	4b4e      	ldr	r3, [pc, #312]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d1c:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003d20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d24:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003d28:	4b48      	ldr	r3, [pc, #288]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003d2a:	edd3 7a00 	vldr	s15, [r3]
 8003d2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d32:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d36:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint4.C3 * t2) + (4.0 * fcb_joint4.C4 * t3)
 8003d3a:	4b46      	ldr	r3, [pc, #280]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d3c:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003d40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d44:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003d48:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003d4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d54:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d58:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003d5c:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d5e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003d62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d66:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003d6a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003d6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d76:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d7a:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint4.C5 * t4);
 8003d7e:	4b35      	ldr	r3, [pc, #212]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d80:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003d84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d88:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003d8c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003d90:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d98:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003da0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003da6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 8003daa:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003dac:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003db0:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003db2:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003db6:	4b25      	ldr	r3, [pc, #148]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003db8:	edd3 7a00 	vldr	s15, [r3]
 8003dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C2 * t2) + (fcb_joint4.C3 * t3)
 8003dc4:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003dc6:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003dca:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dd6:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003dd8:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003ddc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003de4:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C4 * t4) + (fcb_joint4.C5 * t5));
 8003de8:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003dea:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8003df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dfa:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003dfc:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003e00:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e08:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003e0e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint1.Kp_p = 0.4;
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003e14:	4a10      	ldr	r2, [pc, #64]	; (8003e58 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003e16:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint2.Kp_p = 0.03;
 8003e28:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003e2a:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint2.Ki_p = 0.0;
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint2.Kd_p = 0.0;
 8003e36:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint3.Kp_p = 0.15;
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003e40:	e00e      	b.n	8003e60 <HAL_TIM_PeriodElapsedCallback+0x728>
 8003e42:	bf00      	nop
 8003e44:	24000568 	.word	0x24000568
 8003e48:	2400064c 	.word	0x2400064c
 8003e4c:	24000bf0 	.word	0x24000bf0
 8003e50:	24000730 	.word	0x24000730
 8003e54:	24000814 	.word	0x24000814
 8003e58:	3ecccccd 	.word	0x3ecccccd
 8003e5c:	3cf5c28f 	.word	0x3cf5c28f
 8003e60:	4a74      	ldr	r2, [pc, #464]	; (8004034 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003e62:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8003e64:	4b74      	ldr	r3, [pc, #464]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 8003e6c:	4b72      	ldr	r3, [pc, #456]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	669a      	str	r2, [r3, #104]	; 0x68

//		fcb_joint3.Kp_v = 0.0; // 3.2
//		fcb_joint3.Ki_v = 0.0;
//		fcb_joint3.Kd_v = 0.0;

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 8003e74:	4b71      	ldr	r3, [pc, #452]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e76:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003e7a:	4b70      	ldr	r3, [pc, #448]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e7c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e84:	4b6d      	ldr	r3, [pc, #436]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e86:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 8003e8a:	4b6b      	ldr	r3, [pc, #428]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003e8c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003e90:	4b69      	ldr	r3, [pc, #420]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003e92:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e9a:	4b67      	ldr	r3, [pc, #412]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003e9c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
//		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
//		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;

		fcb_joint2.Error_p = fcb_joint2.Goal_Position - fcb_joint2.kalman_pos;
 8003ea0:	4b67      	ldr	r3, [pc, #412]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003ea2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003ea6:	4b66      	ldr	r3, [pc, #408]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003ea8:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb0:	4b63      	ldr	r3, [pc, #396]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003eb2:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
//		fcb_joint2.Error_v = fcb_joint2.Goal_Velocity - fcb_joint2.kalman_velo;

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003eb6:	4b61      	ldr	r3, [pc, #388]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003eb8:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003ebc:	4b5f      	ldr	r3, [pc, #380]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003ebe:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ec6:	4b5d      	ldr	r3, [pc, #372]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003ec8:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003ecc:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003ece:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003ed2:	4b59      	ldr	r3, [pc, #356]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003ed4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003edc:	4b56      	ldr	r3, [pc, #344]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003ede:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
//		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
//		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;

		fcb_joint2.Sum_Error_p += fcb_joint2.Error_p;
 8003ee2:	4b57      	ldr	r3, [pc, #348]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003ee4:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003ee8:	4b55      	ldr	r3, [pc, #340]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003eea:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef2:	4b53      	ldr	r3, [pc, #332]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003ef4:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
//		fcb_joint2.Sum_Error_v += fcb_joint2.Error_v;

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003efa:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint1.Kp_p * fcb_joint1.Error_p)
 8003efe:	4b4f      	ldr	r3, [pc, #316]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003f00:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003f04:	4b4d      	ldr	r3, [pc, #308]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003f06:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p)
 8003f12:	4b4a      	ldr	r3, [pc, #296]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003f14:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003f18:	4b48      	ldr	r3, [pc, #288]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003f1a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f22:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p));
 8003f26:	4b45      	ldr	r3, [pc, #276]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003f28:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003f2c:	4b43      	ldr	r3, [pc, #268]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003f2e:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003f32:	4b42      	ldr	r3, [pc, #264]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003f34:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003f38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f40:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 8003f44:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003f46:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
//				+ (fcb_joint1.Kp_v * fcb_joint1.Error_v)
//				+ (fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v)
//				+ (fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v));

		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8003f4a:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003f4c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint2.Kp_p * fcb_joint2.Error_p)
 8003f50:	4b3b      	ldr	r3, [pc, #236]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003f52:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003f56:	4b3a      	ldr	r3, [pc, #232]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003f58:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f60:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p)
 8003f64:	4b36      	ldr	r3, [pc, #216]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003f66:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003f6a:	4b35      	ldr	r3, [pc, #212]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003f6c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f74:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p));
 8003f78:	4b31      	ldr	r3, [pc, #196]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003f7a:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003f7e:	4b30      	ldr	r3, [pc, #192]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003f80:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003f84:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003f86:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003f8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f92:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8003f96:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003f98:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
//				+ (fcb_joint2.Kp_v * fcb_joint2.Error_v)
//				+ (fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v)
//				+ (fcb_joint2.Kd_v * (fcb_joint2.Error_v - fcb_joint2.Old_v));

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 8003f9c:	4b26      	ldr	r3, [pc, #152]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003f9e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint3.Kp_p * fcb_joint3.Error_p)
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003fa4:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003fa8:	4b23      	ldr	r3, [pc, #140]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003faa:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p)
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003fb8:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003fbe:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p));
 8003fca:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003fcc:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003fd0:	4b19      	ldr	r3, [pc, #100]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003fd2:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003fd6:	4b18      	ldr	r3, [pc, #96]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003fd8:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003fdc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 8003fe8:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003fea:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
//				+ (fcb_joint3.Kp_v * fcb_joint3.Error_v)
//				+ (fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v)
//				+ (fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v));

		if (joint13_on) {
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <HAL_TIM_PeriodElapsedCallback+0x90c>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d033      	beq.n	8004060 <HAL_TIM_PeriodElapsedCallback+0x928>
			stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003ffa:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8004002:	4811      	ldr	r0, [pc, #68]	; (8004048 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8004004:	f7fe f8ec 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(0.0);
 8004008:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800405c <HAL_TIM_PeriodElapsedCallback+0x924>
 800400c:	480f      	ldr	r0, [pc, #60]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x914>)
 800400e:	f7fe f8e7 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8004014:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004018:	eeb0 0a67 	vmov.f32	s0, s15
 800401c:	480c      	ldr	r0, [pc, #48]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800401e:	f7fe f8df 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x91c>)
 8004024:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004028:	eeb0 0a67 	vmov.f32	s0, s15
 800402c:	480a      	ldr	r0, [pc, #40]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800402e:	f7fe f8d7 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
 8004032:	e02c      	b.n	800408e <HAL_TIM_PeriodElapsedCallback+0x956>
 8004034:	3e19999a 	.word	0x3e19999a
 8004038:	24000730 	.word	0x24000730
 800403c:	24000568 	.word	0x24000568
 8004040:	2400064c 	.word	0x2400064c
 8004044:	24000b3e 	.word	0x24000b3e
 8004048:	240004c8 	.word	0x240004c8
 800404c:	240004f0 	.word	0x240004f0
 8004050:	24000518 	.word	0x24000518
 8004054:	24000814 	.word	0x24000814
 8004058:	24000540 	.word	0x24000540
 800405c:	00000000 	.word	0x00000000
		} else {
			stepperJ1.StepperOpenLoopSpeedM(0.0);
 8004060:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 800405c <HAL_TIM_PeriodElapsedCallback+0x924>
 8004064:	4894      	ldr	r0, [pc, #592]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8004066:	f7fe f8bb 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0.0);
 800406a:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80042bc <HAL_TIM_PeriodElapsedCallback+0xb84>
 800406e:	4894      	ldr	r0, [pc, #592]	; (80042c0 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8004070:	f7fe f8b6 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 8004074:	4b93      	ldr	r3, [pc, #588]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8004076:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800407a:	eeb0 0a67 	vmov.f32	s0, s15
 800407e:	4892      	ldr	r0, [pc, #584]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8004080:	f7fe f8ae 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(0.0);
 8004084:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80042bc <HAL_TIM_PeriodElapsedCallback+0xb84>
 8004088:	4890      	ldr	r0, [pc, #576]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0xb94>)
 800408a:	f7fe f8a9 	bl	80021e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(0);


		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 800408e:	4b90      	ldr	r3, [pc, #576]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8004090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004092:	4a8f      	ldr	r2, [pc, #572]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8004094:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint2.Old_Error_p = fcb_joint2.Error_p;
 8004096:	4b8b      	ldr	r3, [pc, #556]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8004098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409a:	4a8a      	ldr	r2, [pc, #552]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 800409c:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 800409e:	4b8d      	ldr	r3, [pc, #564]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80040a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a2:	4a8c      	ldr	r2, [pc, #560]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80040a4:	67d3      	str	r3, [r2, #124]	; 0x7c
//		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
//		fcb_joint2.Old_Error_v = fcb_joint2.Error_v;
//		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 80040a6:	4b8a      	ldr	r3, [pc, #552]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80040a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040ac:	4a88      	ldr	r2, [pc, #544]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80040ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 80040b2:	4b88      	ldr	r3, [pc, #544]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80040b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040b8:	4a86      	ldr	r2, [pc, #536]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80040ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_p = fcb_joint2.kalman_pos;
 80040be:	4b81      	ldr	r3, [pc, #516]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 80040c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040c4:	4a7f      	ldr	r2, [pc, #508]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 80040c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_v = fcb_joint2.kalman_velo;
 80040ca:	4b7e      	ldr	r3, [pc, #504]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 80040cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040d0:	4a7c      	ldr	r2, [pc, #496]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 80040d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 80040d6:	4b7e      	ldr	r3, [pc, #504]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80040d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040dc:	4a7c      	ldr	r2, [pc, #496]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80040de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 80040e2:	4b7b      	ldr	r3, [pc, #492]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80040e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040e8:	4a7a      	ldr	r2, [pc, #488]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80040ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		t = t + sample_time_500;
 80040ee:	4b7a      	ldr	r3, [pc, #488]	; (80042d8 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 80040f0:	ed93 7a00 	vldr	s14, [r3]
 80040f4:	4b79      	ldr	r3, [pc, #484]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xba4>)
 80040f6:	edd3 7a00 	vldr	s15, [r3]
 80040fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fe:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8004100:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time) {
 8004104:	4b74      	ldr	r3, [pc, #464]	; (80042d8 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8004106:	ed93 7a00 	vldr	s14, [r3]
 800410a:	4b75      	ldr	r3, [pc, #468]	; (80042e0 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004118:	bfac      	ite	ge
 800411a:	2301      	movge	r3, #1
 800411c:	2300      	movlt	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d030      	beq.n	8004186 <HAL_TIM_PeriodElapsedCallback+0xa4e>
			t = (int) 0;
 8004124:	4b6c      	ldr	r3, [pc, #432]	; (80042d8 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 800412c:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint2.Sum_Error_p = 0;
 8004136:	4b63      	ldr	r3, [pc, #396]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8004140:	4b64      	ldr	r3, [pc, #400]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

//			fcb_joint1.Sum_Error_v = 0;
//			fcb_joint2.Sum_Error_v = 0;
//			fcb_joint3.Sum_Error_v = 0;

			fcb_joint1.Old_Error_p = 0;
 800414a:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint2.Old_Error_p = 0;
 8004152:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 800415a:	4b5e      	ldr	r3, [pc, #376]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	67da      	str	r2, [r3, #124]	; 0x7c

//			fcb_joint1.Old_Error_v = 0;
//			fcb_joint2.Old_Error_v = 0;
//			fcb_joint3.Old_Error_v = 0;

			fcb_joint1.Old_p = 0;
 8004162:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint2.Old_p = 0;
 800416c:	4b55      	ldr	r3, [pc, #340]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 8004176:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

//			fcb_joint1.Old_v = 0;
//			fcb_joint2.Old_v = 0;
//			fcb_joint3.Old_v = 0;
			State_FIN = true;
 8004180:	4b58      	ldr	r3, [pc, #352]	; (80042e4 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
		}

	}
	if (htim == &htim17) {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a57      	ldr	r2, [pc, #348]	; (80042e8 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	f040 808f 	bne.w	80042ae <HAL_TIM_PeriodElapsedCallback+0xb76>
//				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 16) & 0xFF),
//				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 8) & 0xFF),
//				(uint8_t) (((int32_t) fcb_joint2.Encoder) & 0xFF), };
		uint8_t encoder_state[8] =
				{
				(uint8_t) (((int16_t) (fcb_joint3.Encoder/10.0) >> 8) & 0xFF),
 8004190:	4b50      	ldr	r3, [pc, #320]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8004192:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004196:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800419a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800419e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80041a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80041a6:	ee17 3a90 	vmov	r3, s15
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	121b      	asrs	r3, r3, #8
 80041ae:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0)) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0)) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	723b      	strb	r3, [r7, #8]
				(uint8_t) (((int16_t) (fcb_joint3.Encoder/10.0)) & 0xFF),
 80041b4:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80041b6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80041be:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80041c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80041c6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80041ca:	ee17 3a90 	vmov	r3, s15
 80041ce:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	727b      	strb	r3, [r7, #9]
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0) >> 8) & 0xFF),
 80041d4:	4b45      	ldr	r3, [pc, #276]	; (80042ec <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 80041d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041da:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80041de:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80041e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80041e6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80041ea:	ee17 3a90 	vmov	r3, s15
 80041ee:	b21b      	sxth	r3, r3
 80041f0:	121b      	asrs	r3, r3, #8
 80041f2:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	72bb      	strb	r3, [r7, #10]
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0)) & 0xFF),
 80041f8:	4b3c      	ldr	r3, [pc, #240]	; (80042ec <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 80041fa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041fe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004202:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004206:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800420a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800420e:	ee17 3a90 	vmov	r3, s15
 8004212:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004214:	b2db      	uxtb	r3, r3
 8004216:	72fb      	strb	r3, [r7, #11]
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0) >> 8) & 0xFF),
 8004218:	4b2d      	ldr	r3, [pc, #180]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800421a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800421e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004222:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004226:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800422a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800422e:	ee17 3a90 	vmov	r3, s15
 8004232:	b21b      	sxth	r3, r3
 8004234:	121b      	asrs	r3, r3, #8
 8004236:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004238:	b2db      	uxtb	r3, r3
 800423a:	733b      	strb	r3, [r7, #12]
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0)) & 0xFF),
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800423e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004242:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004246:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800424a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800424e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004252:	ee17 3a90 	vmov	r3, s15
 8004256:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004258:	b2db      	uxtb	r3, r3
 800425a:	737b      	strb	r3, [r7, #13]
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0) >> 8) & 0xFF),
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 800425e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004262:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004266:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800426a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800426e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004272:	ee17 3a90 	vmov	r3, s15
 8004276:	b21b      	sxth	r3, r3
 8004278:	121b      	asrs	r3, r3, #8
 800427a:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 800427c:	b2db      	uxtb	r3, r3
 800427e:	73bb      	strb	r3, [r7, #14]
 8004280:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8004282:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004286:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800428a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800428e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004292:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004296:	ee17 3a90 	vmov	r3, s15
 800429a:	b21b      	sxth	r3, r3
 800429c:	b2db      	uxtb	r3, r3
 800429e:	73fb      	strb	r3, [r7, #15]

		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &encoder_state, 8);
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	2208      	movs	r2, #8
 80042a6:	4619      	mov	r1, r3
 80042a8:	4811      	ldr	r0, [pc, #68]	; (80042f0 <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 80042aa:	f00a fd69 	bl	800ed80 <HAL_UART_Transmit_DMA>
	}
}
 80042ae:	bf00      	nop
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	240004c8 	.word	0x240004c8
 80042bc:	00000000 	.word	0x00000000
 80042c0:	24000518 	.word	0x24000518
 80042c4:	2400064c 	.word	0x2400064c
 80042c8:	240004f0 	.word	0x240004f0
 80042cc:	24000540 	.word	0x24000540
 80042d0:	24000568 	.word	0x24000568
 80042d4:	24000730 	.word	0x24000730
 80042d8:	24000bf0 	.word	0x24000bf0
 80042dc:	24000214 	.word	0x24000214
 80042e0:	24000afc 	.word	0x24000afc
 80042e4:	24000af8 	.word	0x24000af8
 80042e8:	24001178 	.word	0x24001178
 80042ec:	24000814 	.word	0x24000814
 80042f0:	240012e4 	.word	0x240012e4
 80042f4:	00000000 	.word	0x00000000

080042f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042fc:	f002 fbf8 	bl	8006af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004300:	f000 fab6 	bl	8004870 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004304:	f7fe f868 	bl	80023d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004308:	f7fd fff6 	bl	80022f8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800430c:	f002 f88a 	bl	8006424 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004310:	f001 f8f2 	bl	80054f8 <MX_TIM2_Init>
  MX_UART4_Init();
 8004314:	f001 ff98 	bl	8006248 <MX_UART4_Init>
  MX_TIM4_Init();
 8004318:	f001 f9de 	bl	80056d8 <MX_TIM4_Init>
  MX_SPI3_Init();
 800431c:	f000 fc6e 	bl	8004bfc <MX_SPI3_Init>
  MX_TIM1_Init();
 8004320:	f001 f83c 	bl	800539c <MX_TIM1_Init>
  MX_TIM3_Init();
 8004324:	f001 f960 	bl	80055e8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8004328:	f001 fa4e 	bl	80057c8 <MX_TIM5_Init>
  MX_TIM15_Init();
 800432c:	f001 fbe2 	bl	8005af4 <MX_TIM15_Init>
  MX_CRC_Init();
 8004330:	f7fd ff92 	bl	8002258 <MX_CRC_Init>
  MX_UART7_Init();
 8004334:	f001 ffdc 	bl	80062f0 <MX_UART7_Init>
  MX_TIM6_Init();
 8004338:	f001 fa94 	bl	8005864 <MX_TIM6_Init>
  MX_TIM7_Init();
 800433c:	f001 fac8 	bl	80058d0 <MX_TIM7_Init>
  MX_TIM12_Init();
 8004340:	f001 fb56 	bl	80059f0 <MX_TIM12_Init>
  MX_TIM13_Init();
 8004344:	f001 fb8e 	bl	8005a64 <MX_TIM13_Init>
  MX_TIM14_Init();
 8004348:	f001 fbb0 	bl	8005aac <MX_TIM14_Init>
  MX_TIM16_Init();
 800434c:	f001 fc76 	bl	8005c3c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8004350:	f002 f81c 	bl	800638c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8004354:	f001 fc98 	bl	8005c88 <MX_TIM17_Init>
  MX_TIM8_Init();
 8004358:	f001 faf0 	bl	800593c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 800435c:	2214      	movs	r2, #20
 800435e:	496a      	ldr	r1, [pc, #424]	; (8004508 <main+0x210>)
 8004360:	486a      	ldr	r0, [pc, #424]	; (800450c <main+0x214>)
 8004362:	f00c fc72 	bl	8010c4a <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8004366:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <main+0x218>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a6a      	ldr	r2, [pc, #424]	; (8004514 <main+0x21c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d04a      	beq.n	8004406 <main+0x10e>
 8004370:	4b67      	ldr	r3, [pc, #412]	; (8004510 <main+0x218>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a68      	ldr	r2, [pc, #416]	; (8004518 <main+0x220>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d045      	beq.n	8004406 <main+0x10e>
 800437a:	4b65      	ldr	r3, [pc, #404]	; (8004510 <main+0x218>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a67      	ldr	r2, [pc, #412]	; (800451c <main+0x224>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d040      	beq.n	8004406 <main+0x10e>
 8004384:	4b62      	ldr	r3, [pc, #392]	; (8004510 <main+0x218>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a65      	ldr	r2, [pc, #404]	; (8004520 <main+0x228>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d03b      	beq.n	8004406 <main+0x10e>
 800438e:	4b60      	ldr	r3, [pc, #384]	; (8004510 <main+0x218>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a64      	ldr	r2, [pc, #400]	; (8004524 <main+0x22c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d036      	beq.n	8004406 <main+0x10e>
 8004398:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <main+0x218>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a62      	ldr	r2, [pc, #392]	; (8004528 <main+0x230>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d031      	beq.n	8004406 <main+0x10e>
 80043a2:	4b5b      	ldr	r3, [pc, #364]	; (8004510 <main+0x218>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a61      	ldr	r2, [pc, #388]	; (800452c <main+0x234>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d02c      	beq.n	8004406 <main+0x10e>
 80043ac:	4b58      	ldr	r3, [pc, #352]	; (8004510 <main+0x218>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a5f      	ldr	r2, [pc, #380]	; (8004530 <main+0x238>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d027      	beq.n	8004406 <main+0x10e>
 80043b6:	4b56      	ldr	r3, [pc, #344]	; (8004510 <main+0x218>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a5e      	ldr	r2, [pc, #376]	; (8004534 <main+0x23c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d022      	beq.n	8004406 <main+0x10e>
 80043c0:	4b53      	ldr	r3, [pc, #332]	; (8004510 <main+0x218>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a5c      	ldr	r2, [pc, #368]	; (8004538 <main+0x240>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01d      	beq.n	8004406 <main+0x10e>
 80043ca:	4b51      	ldr	r3, [pc, #324]	; (8004510 <main+0x218>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a5b      	ldr	r2, [pc, #364]	; (800453c <main+0x244>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d018      	beq.n	8004406 <main+0x10e>
 80043d4:	4b4e      	ldr	r3, [pc, #312]	; (8004510 <main+0x218>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a59      	ldr	r2, [pc, #356]	; (8004540 <main+0x248>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <main+0x10e>
 80043de:	4b4c      	ldr	r3, [pc, #304]	; (8004510 <main+0x218>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a58      	ldr	r2, [pc, #352]	; (8004544 <main+0x24c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <main+0x10e>
 80043e8:	4b49      	ldr	r3, [pc, #292]	; (8004510 <main+0x218>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a56      	ldr	r2, [pc, #344]	; (8004548 <main+0x250>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <main+0x10e>
 80043f2:	4b47      	ldr	r3, [pc, #284]	; (8004510 <main+0x218>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a55      	ldr	r2, [pc, #340]	; (800454c <main+0x254>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <main+0x10e>
 80043fc:	4b44      	ldr	r3, [pc, #272]	; (8004510 <main+0x218>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a53      	ldr	r2, [pc, #332]	; (8004550 <main+0x258>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d108      	bne.n	8004418 <main+0x120>
 8004406:	4b42      	ldr	r3, [pc, #264]	; (8004510 <main+0x218>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b40      	ldr	r3, [pc, #256]	; (8004510 <main+0x218>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0208 	bic.w	r2, r2, #8
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	e007      	b.n	8004428 <main+0x130>
 8004418:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <main+0x218>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b3c      	ldr	r3, [pc, #240]	; (8004510 <main+0x218>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0204 	bic.w	r2, r2, #4
 8004426:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8004428:	2201      	movs	r2, #1
 800442a:	2101      	movs	r1, #1
 800442c:	4849      	ldr	r0, [pc, #292]	; (8004554 <main+0x25c>)
 800442e:	f005 ff27 	bl	800a280 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8004432:	2201      	movs	r2, #1
 8004434:	2102      	movs	r1, #2
 8004436:	4848      	ldr	r0, [pc, #288]	; (8004558 <main+0x260>)
 8004438:	f005 ff22 	bl	800a280 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800443c:	2200      	movs	r2, #0
 800443e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004442:	4844      	ldr	r0, [pc, #272]	; (8004554 <main+0x25c>)
 8004444:	f005 ff1c 	bl	800a280 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8004448:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800457c <main+0x284>
 800444c:	4843      	ldr	r0, [pc, #268]	; (800455c <main+0x264>)
 800444e:	f7fd fc13 	bl	8001c78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 8004452:	2108      	movs	r1, #8
 8004454:	4841      	ldr	r0, [pc, #260]	; (800455c <main+0x264>)
 8004456:	f7fd feab 	bl	80021b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 800445a:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8004560 <main+0x268>
 800445e:	483f      	ldr	r0, [pc, #252]	; (800455c <main+0x264>)
 8004460:	f7fd fe82 	bl	8002168 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8004464:	483d      	ldr	r0, [pc, #244]	; (800455c <main+0x264>)
 8004466:	f7fd fbf6 	bl	8001c56 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 800446a:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800457c <main+0x284>
 800446e:	483d      	ldr	r0, [pc, #244]	; (8004564 <main+0x26c>)
 8004470:	f7fd fc02 	bl	8001c78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 8004474:	2110      	movs	r1, #16
 8004476:	483b      	ldr	r0, [pc, #236]	; (8004564 <main+0x26c>)
 8004478:	f7fd fe9a 	bl	80021b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 800447c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004480:	4838      	ldr	r0, [pc, #224]	; (8004564 <main+0x26c>)
 8004482:	f7fd fe71 	bl	8002168 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 8004486:	4837      	ldr	r0, [pc, #220]	; (8004564 <main+0x26c>)
 8004488:	f7fd fbe5 	bl	8001c56 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 800448c:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 800457c <main+0x284>
 8004490:	4835      	ldr	r0, [pc, #212]	; (8004568 <main+0x270>)
 8004492:	f7fd fbf1 	bl	8001c78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 8004496:	2110      	movs	r1, #16
 8004498:	4833      	ldr	r0, [pc, #204]	; (8004568 <main+0x270>)
 800449a:	f7fd fe89 	bl	80021b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 800449e:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80044a2:	4831      	ldr	r0, [pc, #196]	; (8004568 <main+0x270>)
 80044a4:	f7fd fe60 	bl	8002168 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80044a8:	482f      	ldr	r0, [pc, #188]	; (8004568 <main+0x270>)
 80044aa:	f7fd fbd4 	bl	8001c56 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 80044ae:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800457c <main+0x284>
 80044b2:	482e      	ldr	r0, [pc, #184]	; (800456c <main+0x274>)
 80044b4:	f7fd fbe0 	bl	8001c78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(16);
 80044b8:	2110      	movs	r1, #16
 80044ba:	482c      	ldr	r0, [pc, #176]	; (800456c <main+0x274>)
 80044bc:	f7fd fe78 	bl	80021b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 80044c0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80044c4:	4829      	ldr	r0, [pc, #164]	; (800456c <main+0x274>)
 80044c6:	f7fd fe4f 	bl	8002168 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 80044ca:	4828      	ldr	r0, [pc, #160]	; (800456c <main+0x274>)
 80044cc:	f7fd fbc3 	bl	8001c56 <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 80044d0:	2191      	movs	r1, #145	; 0x91
 80044d2:	4827      	ldr	r0, [pc, #156]	; (8004570 <main+0x278>)
 80044d4:	f7fd fb09 	bl	8001aea <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 80044d8:	2139      	movs	r1, #57	; 0x39
 80044da:	4825      	ldr	r0, [pc, #148]	; (8004570 <main+0x278>)
 80044dc:	f7fd faf4 	bl	8001ac8 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 80044e0:	4823      	ldr	r0, [pc, #140]	; (8004570 <main+0x278>)
 80044e2:	f7fd f91d 	bl	8001720 <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 80044e6:	4822      	ldr	r0, [pc, #136]	; (8004570 <main+0x278>)
 80044e8:	f7fd fb10 	bl	8001b0c <_ZN10ServoMotor12GripperCloseEv>
	while (!Limit_sw_Z_Top) {
 80044ec:	4b21      	ldr	r3, [pc, #132]	; (8004574 <main+0x27c>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f083 0301 	eor.w	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d041      	beq.n	8004580 <main+0x288>
		stepperJ2.StepperSetFrequency(1200.0f);
 80044fc:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004578 <main+0x280>
 8004500:	4818      	ldr	r0, [pc, #96]	; (8004564 <main+0x26c>)
 8004502:	f7fd fbb9 	bl	8001c78 <_ZN7Stepper19StepperSetFrequencyEf>
	while (!Limit_sw_Z_Top) {
 8004506:	e7f1      	b.n	80044ec <main+0x1f4>
 8004508:	24000b24 	.word	0x24000b24
 800450c:	24001374 	.word	0x24001374
 8004510:	2400165c 	.word	0x2400165c
 8004514:	40020010 	.word	0x40020010
 8004518:	40020028 	.word	0x40020028
 800451c:	40020040 	.word	0x40020040
 8004520:	40020058 	.word	0x40020058
 8004524:	40020070 	.word	0x40020070
 8004528:	40020088 	.word	0x40020088
 800452c:	400200a0 	.word	0x400200a0
 8004530:	400200b8 	.word	0x400200b8
 8004534:	40020410 	.word	0x40020410
 8004538:	40020428 	.word	0x40020428
 800453c:	40020440 	.word	0x40020440
 8004540:	40020458 	.word	0x40020458
 8004544:	40020470 	.word	0x40020470
 8004548:	40020488 	.word	0x40020488
 800454c:	400204a0 	.word	0x400204a0
 8004550:	400204b8 	.word	0x400204b8
 8004554:	58020400 	.word	0x58020400
 8004558:	58021000 	.word	0x58021000
 800455c:	240004c8 	.word	0x240004c8
 8004560:	42280000 	.word	0x42280000
 8004564:	240004f0 	.word	0x240004f0
 8004568:	24000518 	.word	0x24000518
 800456c:	24000540 	.word	0x24000540
 8004570:	24000ac0 	.word	0x24000ac0
 8004574:	24000b3b 	.word	0x24000b3b
 8004578:	44960000 	.word	0x44960000
 800457c:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 8004580:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 800457c <main+0x284>
 8004584:	489e      	ldr	r0, [pc, #632]	; (8004800 <main+0x508>)
 8004586:	f7fd fb77 	bl	8001c78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 800458a:	20c8      	movs	r0, #200	; 0xc8
 800458c:	f002 fb42 	bl	8006c14 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 8004590:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8004804 <main+0x50c>
 8004594:	489a      	ldr	r0, [pc, #616]	; (8004800 <main+0x508>)
 8004596:	f7fd fb6f 	bl	8001c78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 800459a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800459e:	f002 fb39 	bl	8006c14 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 80045a2:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8004808 <main+0x510>
 80045a6:	4896      	ldr	r0, [pc, #600]	; (8004800 <main+0x508>)
 80045a8:	f7fd fb66 	bl	8001c78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 80045ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045b0:	f002 fb30 	bl	8006c14 <HAL_Delay>
	gripper.GripperOpen();
 80045b4:	4895      	ldr	r0, [pc, #596]	; (800480c <main+0x514>)
 80045b6:	f7fd fabf 	bl	8001b38 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 80045ba:	4b95      	ldr	r3, [pc, #596]	; (8004810 <main+0x518>)
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]

	encoderJ1.AMT21_Read();
 80045c0:	4894      	ldr	r0, [pc, #592]	; (8004814 <main+0x51c>)
 80045c2:	f7fc f886 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80045c6:	4893      	ldr	r0, [pc, #588]	; (8004814 <main+0x51c>)
 80045c8:	f7fc f8b2 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	4b91      	ldr	r3, [pc, #580]	; (8004818 <main+0x520>)
 80045d2:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 80045d4:	4b90      	ldr	r3, [pc, #576]	; (8004818 <main+0x520>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d110      	bne.n	80045fe <main+0x306>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 80045dc:	488d      	ldr	r0, [pc, #564]	; (8004814 <main+0x51c>)
 80045de:	f7fc f90d 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80045e2:	4603      	mov	r3, r0
 80045e4:	ee07 3a90 	vmov	s15, r3
 80045e8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80045ec:	ed9f 5b80 	vldr	d5, [pc, #512]	; 80047f0 <main+0x4f8>
 80045f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80045f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80045f8:	4b88      	ldr	r3, [pc, #544]	; (800481c <main+0x524>)
 80045fa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ2.AMT21_Read();
 80045fe:	4888      	ldr	r0, [pc, #544]	; (8004820 <main+0x528>)
 8004600:	f7fc f867 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8004604:	4886      	ldr	r0, [pc, #536]	; (8004820 <main+0x528>)
 8004606:	f7fc f893 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800460a:	4603      	mov	r3, r0
 800460c:	461a      	mov	r2, r3
 800460e:	4b85      	ldr	r3, [pc, #532]	; (8004824 <main+0x52c>)
 8004610:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 8004612:	4b84      	ldr	r3, [pc, #528]	; (8004824 <main+0x52c>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d115      	bne.n	8004646 <main+0x34e>
		encoderJ2.unwarp();
 800461a:	4881      	ldr	r0, [pc, #516]	; (8004820 <main+0x528>)
 800461c:	f7fc f910 	bl	8000840 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 8004620:	487f      	ldr	r0, [pc, #508]	; (8004820 <main+0x528>)
 8004622:	f7fc f95f 	bl	80008e4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8004626:	487e      	ldr	r0, [pc, #504]	; (8004820 <main+0x528>)
 8004628:	f7fc f969 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 800462c:	ee07 0a90 	vmov	s15, r0
 8004630:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004634:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 80047f0 <main+0x4f8>
 8004638:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800463c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004640:	4b79      	ldr	r3, [pc, #484]	; (8004828 <main+0x530>)
 8004642:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ3.AMT21_Read();
 8004646:	4879      	ldr	r0, [pc, #484]	; (800482c <main+0x534>)
 8004648:	f7fc f843 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 800464c:	4877      	ldr	r0, [pc, #476]	; (800482c <main+0x534>)
 800464e:	f7fc f86f 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004652:	4603      	mov	r3, r0
 8004654:	461a      	mov	r2, r3
 8004656:	4b76      	ldr	r3, [pc, #472]	; (8004830 <main+0x538>)
 8004658:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 800465a:	4b75      	ldr	r3, [pc, #468]	; (8004830 <main+0x538>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d110      	bne.n	8004684 <main+0x38c>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8004662:	4872      	ldr	r0, [pc, #456]	; (800482c <main+0x534>)
 8004664:	f7fc f8ca 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004668:	4603      	mov	r3, r0
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004672:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 80047f0 <main+0x4f8>
 8004676:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800467a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800467e:	4b6d      	ldr	r3, [pc, #436]	; (8004834 <main+0x53c>)
 8004680:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ4.AMT21_Read();
 8004684:	486c      	ldr	r0, [pc, #432]	; (8004838 <main+0x540>)
 8004686:	f7fc f824 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 800468a:	486b      	ldr	r0, [pc, #428]	; (8004838 <main+0x540>)
 800468c:	f7fc f850 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	4b69      	ldr	r3, [pc, #420]	; (800483c <main+0x544>)
 8004696:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8004698:	4b68      	ldr	r3, [pc, #416]	; (800483c <main+0x544>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d110      	bne.n	80046c2 <main+0x3ca>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 80046a0:	4865      	ldr	r0, [pc, #404]	; (8004838 <main+0x540>)
 80046a2:	f7fc f8ab 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80046a6:	4603      	mov	r3, r0
 80046a8:	ee07 3a90 	vmov	s15, r3
 80046ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80046b0:	ed9f 5b51 	vldr	d5, [pc, #324]	; 80047f8 <main+0x500>
 80046b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80046b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046bc:	4b60      	ldr	r3, [pc, #384]	; (8004840 <main+0x548>)
 80046be:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

//	angle_chess = chessSPIEncoder.readAngle();
//	  zero_position = chessSPIEncoder.getRawRotation();
//	  zero_position_map = chessSPIEncoder.read2angle(zero_position);

	fcb_joint1.p11 = 3.60381982 / 100000000.0;
 80046c2:	4b56      	ldr	r3, [pc, #344]	; (800481c <main+0x524>)
 80046c4:	4a5f      	ldr	r2, [pc, #380]	; (8004844 <main+0x54c>)
 80046c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 80046ca:	4b54      	ldr	r3, [pc, #336]	; (800481c <main+0x524>)
 80046cc:	4a5e      	ldr	r2, [pc, #376]	; (8004848 <main+0x550>)
 80046ce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 80046d2:	4b52      	ldr	r3, [pc, #328]	; (800481c <main+0x524>)
 80046d4:	4a5d      	ldr	r2, [pc, #372]	; (800484c <main+0x554>)
 80046d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 80046da:	4b50      	ldr	r3, [pc, #320]	; (800481c <main+0x524>)
 80046dc:	4a5c      	ldr	r2, [pc, #368]	; (8004850 <main+0x558>)
 80046de:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 80046e2:	4b54      	ldr	r3, [pc, #336]	; (8004834 <main+0x53c>)
 80046e4:	4a57      	ldr	r2, [pc, #348]	; (8004844 <main+0x54c>)
 80046e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 80046ea:	4b52      	ldr	r3, [pc, #328]	; (8004834 <main+0x53c>)
 80046ec:	4a56      	ldr	r2, [pc, #344]	; (8004848 <main+0x550>)
 80046ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 80046f2:	4b50      	ldr	r3, [pc, #320]	; (8004834 <main+0x53c>)
 80046f4:	4a55      	ldr	r2, [pc, #340]	; (800484c <main+0x554>)
 80046f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 80046fa:	4b4e      	ldr	r3, [pc, #312]	; (8004834 <main+0x53c>)
 80046fc:	4a54      	ldr	r2, [pc, #336]	; (8004850 <main+0x558>)
 80046fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint1.Q = 0.001;
 8004702:	4b46      	ldr	r3, [pc, #280]	; (800481c <main+0x524>)
 8004704:	4a53      	ldr	r2, [pc, #332]	; (8004854 <main+0x55c>)
 8004706:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.000001;
 800470a:	4b44      	ldr	r3, [pc, #272]	; (800481c <main+0x524>)
 800470c:	4a52      	ldr	r2, [pc, #328]	; (8004858 <main+0x560>)
 800470e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint2.Q = 0.001;
 8004712:	4b45      	ldr	r3, [pc, #276]	; (8004828 <main+0x530>)
 8004714:	4a4f      	ldr	r2, [pc, #316]	; (8004854 <main+0x55c>)
 8004716:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint2.R = 0.00003;
 800471a:	4b43      	ldr	r3, [pc, #268]	; (8004828 <main+0x530>)
 800471c:	4a4f      	ldr	r2, [pc, #316]	; (800485c <main+0x564>)
 800471e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 8004722:	4b44      	ldr	r3, [pc, #272]	; (8004834 <main+0x53c>)
 8004724:	4a4b      	ldr	r2, [pc, #300]	; (8004854 <main+0x55c>)
 8004726:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000001;
 800472a:	4b42      	ldr	r3, [pc, #264]	; (8004834 <main+0x53c>)
 800472c:	4a4a      	ldr	r2, [pc, #296]	; (8004858 <main+0x560>)
 800472e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 8004732:	4b3a      	ldr	r3, [pc, #232]	; (800481c <main+0x524>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	4a39      	ldr	r2, [pc, #228]	; (800481c <main+0x524>)
 8004738:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 800473c:	4b37      	ldr	r3, [pc, #220]	; (800481c <main+0x524>)
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 8004746:	4b35      	ldr	r3, [pc, #212]	; (800481c <main+0x524>)
 8004748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800474c:	4a33      	ldr	r2, [pc, #204]	; (800481c <main+0x524>)
 800474e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 8004752:	4b32      	ldr	r3, [pc, #200]	; (800481c <main+0x524>)
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 800475c:	4b2f      	ldr	r3, [pc, #188]	; (800481c <main+0x524>)
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	4a2e      	ldr	r2, [pc, #184]	; (800481c <main+0x524>)
 8004762:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint2.X11 = fcb_joint2.Encoder;
 8004764:	4b30      	ldr	r3, [pc, #192]	; (8004828 <main+0x530>)
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <main+0x530>)
 800476a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint2.X21 = 0.0;
 800476e:	4b2e      	ldr	r3, [pc, #184]	; (8004828 <main+0x530>)
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint2.kalman_pos = fcb_joint2.X11;
 8004778:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <main+0x530>)
 800477a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800477e:	4a2a      	ldr	r2, [pc, #168]	; (8004828 <main+0x530>)
 8004780:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint2.kalman_velo = 0.0;
 8004784:	4b28      	ldr	r3, [pc, #160]	; (8004828 <main+0x530>)
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint2.Goal_Position = fcb_joint2.Encoder;
 800478e:	4b26      	ldr	r3, [pc, #152]	; (8004828 <main+0x530>)
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	4a25      	ldr	r2, [pc, #148]	; (8004828 <main+0x530>)
 8004794:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 8004796:	4b27      	ldr	r3, [pc, #156]	; (8004834 <main+0x53c>)
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	4a26      	ldr	r2, [pc, #152]	; (8004834 <main+0x53c>)
 800479c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 80047a0:	4b24      	ldr	r3, [pc, #144]	; (8004834 <main+0x53c>)
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 80047aa:	4b22      	ldr	r3, [pc, #136]	; (8004834 <main+0x53c>)
 80047ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047b0:	4a20      	ldr	r2, [pc, #128]	; (8004834 <main+0x53c>)
 80047b2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 80047b6:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <main+0x53c>)
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 80047c0:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <main+0x53c>)
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <main+0x53c>)
 80047c6:	6493      	str	r3, [r2, #72]	; 0x48

#endif

		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
 80047c8:	4825      	ldr	r0, [pc, #148]	; (8004860 <main+0x568>)
 80047ca:	f008 fd23 	bl	800d214 <HAL_TIM_Base_Start_IT>
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	chessABIEncoder.setZero();
 80047ce:	4825      	ldr	r0, [pc, #148]	; (8004864 <main+0x56c>)
 80047d0:	f7fc f8e1 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	chessABIEncoder.EncoderReadEnable();
 80047d4:	4823      	ldr	r0, [pc, #140]	; (8004864 <main+0x56c>)
 80047d6:	f7fc f8c6 	bl	8000966 <_ZN10AS5047UABI17EncoderReadEnableEv>
	chessABIEncoder.setZero();
 80047da:	4822      	ldr	r0, [pc, #136]	; (8004864 <main+0x56c>)
 80047dc:	f7fc f8db 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 80047e0:	4821      	ldr	r0, [pc, #132]	; (8004868 <main+0x570>)
 80047e2:	f008 fd17 	bl	800d214 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 80047e6:	4821      	ldr	r0, [pc, #132]	; (800486c <main+0x574>)
 80047e8:	f008 fd14 	bl	800d214 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80047ec:	e7fe      	b.n	80047ec <main+0x4f4>
 80047ee:	bf00      	nop
 80047f0:	645a1cac 	.word	0x645a1cac
 80047f4:	4004df3b 	.word	0x4004df3b
 80047f8:	645a1cac 	.word	0x645a1cac
 80047fc:	c004df3b 	.word	0xc004df3b
 8004800:	240004f0 	.word	0x240004f0
 8004804:	c4480000 	.word	0xc4480000
 8004808:	00000000 	.word	0x00000000
 800480c:	24000ac0 	.word	0x24000ac0
 8004810:	24000b3b 	.word	0x24000b3b
 8004814:	24000458 	.word	0x24000458
 8004818:	24000adc 	.word	0x24000adc
 800481c:	24000568 	.word	0x24000568
 8004820:	24000474 	.word	0x24000474
 8004824:	24000add 	.word	0x24000add
 8004828:	2400064c 	.word	0x2400064c
 800482c:	24000490 	.word	0x24000490
 8004830:	24000ade 	.word	0x24000ade
 8004834:	24000730 	.word	0x24000730
 8004838:	240004ac 	.word	0x240004ac
 800483c:	24000adf 	.word	0x24000adf
 8004840:	24000814 	.word	0x24000814
 8004844:	331ac86b 	.word	0x331ac86b
 8004848:	33e9d3b8 	.word	0x33e9d3b8
 800484c:	33e9d3bd 	.word	0x33e9d3bd
 8004850:	3531278c 	.word	0x3531278c
 8004854:	3a83126f 	.word	0x3a83126f
 8004858:	358637bd 	.word	0x358637bd
 800485c:	37fba882 	.word	0x37fba882
 8004860:	24000ecc 	.word	0x24000ecc
 8004864:	24000ae0 	.word	0x24000ae0
 8004868:	2400112c 	.word	0x2400112c
 800486c:	24001178 	.word	0x24001178

08004870 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b09c      	sub	sp, #112	; 0x70
 8004874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800487a:	224c      	movs	r2, #76	; 0x4c
 800487c:	2100      	movs	r1, #0
 800487e:	4618      	mov	r0, r3
 8004880:	f00d fdb6 	bl	80123f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	2220      	movs	r2, #32
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f00d fdb0 	bl	80123f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004890:	2002      	movs	r0, #2
 8004892:	f005 fd29 	bl	800a2e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004896:	2300      	movs	r3, #0
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	4b38      	ldr	r3, [pc, #224]	; (800497c <_Z18SystemClock_Configv+0x10c>)
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	4a37      	ldr	r2, [pc, #220]	; (800497c <_Z18SystemClock_Configv+0x10c>)
 80048a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a4:	6193      	str	r3, [r2, #24]
 80048a6:	4b35      	ldr	r3, [pc, #212]	; (800497c <_Z18SystemClock_Configv+0x10c>)
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4b33      	ldr	r3, [pc, #204]	; (8004980 <_Z18SystemClock_Configv+0x110>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	4a32      	ldr	r2, [pc, #200]	; (8004980 <_Z18SystemClock_Configv+0x110>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048bc:	4b30      	ldr	r3, [pc, #192]	; (8004980 <_Z18SystemClock_Configv+0x110>)
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80048c8:	4b2c      	ldr	r3, [pc, #176]	; (800497c <_Z18SystemClock_Configv+0x10c>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d4:	bf14      	ite	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	2300      	moveq	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d000      	beq.n	80048e2 <_Z18SystemClock_Configv+0x72>
 80048e0:	e7f2      	b.n	80048c8 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048e2:	2302      	movs	r3, #2
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048ea:	2340      	movs	r3, #64	; 0x40
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048ee:	2302      	movs	r3, #2
 80048f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80048f2:	2300      	movs	r3, #0
 80048f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80048f6:	2304      	movs	r3, #4
 80048f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80048fa:	233c      	movs	r3, #60	; 0x3c
 80048fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80048fe:	2302      	movs	r3, #2
 8004900:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 96;
 8004902:	2360      	movs	r3, #96	; 0x60
 8004904:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004906:	2302      	movs	r3, #2
 8004908:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800490a:	230c      	movs	r3, #12
 800490c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800490e:	2300      	movs	r3, #0
 8004910:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800491a:	4618      	mov	r0, r3
 800491c:	f005 fd1e 	bl	800a35c <HAL_RCC_OscConfig>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	bf14      	ite	ne
 8004926:	2301      	movne	r3, #1
 8004928:	2300      	moveq	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004930:	f000 f856 	bl	80049e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004934:	233f      	movs	r3, #63	; 0x3f
 8004936:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004938:	2303      	movs	r3, #3
 800493a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004940:	2308      	movs	r3, #8
 8004942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004944:	2340      	movs	r3, #64	; 0x40
 8004946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004948:	2340      	movs	r3, #64	; 0x40
 800494a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800494c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004950:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004952:	2340      	movs	r3, #64	; 0x40
 8004954:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004956:	1d3b      	adds	r3, r7, #4
 8004958:	2104      	movs	r1, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f006 f92c 	bl	800abb8 <HAL_RCC_ClockConfig>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf14      	ite	ne
 8004966:	2301      	movne	r3, #1
 8004968:	2300      	moveq	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004970:	f000 f836 	bl	80049e0 <Error_Handler>
  }
}
 8004974:	bf00      	nop
 8004976:	3770      	adds	r7, #112	; 0x70
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	58024800 	.word	0x58024800
 8004980:	58000400 	.word	0x58000400

08004984 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 //
 //}
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LM_Z_BOTTOM_Pin) {	// Limit Switch Bottom Z-axis
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004994:	d102      	bne.n	800499c <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 8004996:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_Z_TOP_Pin) {	// Limit Switch Top Z-axis
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a2:	d102      	bne.n	80049aa <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_GPIO_EXTI_Callback+0x50>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_SERVO_Pin) {	// Limit Switch Servo
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d102      	bne.n	80049b6 <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_GPIO_EXTI_Callback+0x54>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_LED_Pin) {	// Limit Switch LED on Cabinet
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d102      	bne.n	80049c2 <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 80049bc:	4b07      	ldr	r3, [pc, #28]	; (80049dc <HAL_GPIO_EXTI_Callback+0x58>)
 80049be:	2201      	movs	r2, #1
 80049c0:	701a      	strb	r2, [r3, #0]
	}

}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	24000b3a 	.word	0x24000b3a
 80049d4:	24000b3b 	.word	0x24000b3b
 80049d8:	24000b3c 	.word	0x24000b3c
 80049dc:	24000b3d 	.word	0x24000b3d

080049e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80049e4:	2200      	movs	r2, #0
 80049e6:	2101      	movs	r1, #1
 80049e8:	4808      	ldr	r0, [pc, #32]	; (8004a0c <Error_Handler+0x2c>)
 80049ea:	f005 fc49 	bl	800a280 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2102      	movs	r1, #2
 80049f2:	4807      	ldr	r0, [pc, #28]	; (8004a10 <Error_Handler+0x30>)
 80049f4:	f005 fc44 	bl	800a280 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80049f8:	2201      	movs	r2, #1
 80049fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049fe:	4803      	ldr	r0, [pc, #12]	; (8004a0c <Error_Handler+0x2c>)
 8004a00:	f005 fc3e 	bl	800a280 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a04:	b672      	cpsid	i
}
 8004a06:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004a08:	e7fe      	b.n	8004a08 <Error_Handler+0x28>
 8004a0a:	bf00      	nop
 8004a0c:	58020400 	.word	0x58020400
 8004a10:	58021000 	.word	0x58021000

08004a14 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004a26:	eeb0 0b47 	vmov.f64	d0, d7
 8004a2a:	f00c fcd9 	bl	80113e0 <sqrt>
 8004a2e:	eeb0 7b40 	vmov.f64	d7, d0
 8004a32:	eeb0 0b47 	vmov.f64	d0, d7
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d158      	bne.n	8004afe <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d153      	bne.n	8004afe <_Z41__static_initialization_and_destruction_0ii+0xc2>
AMT21 encoderJ1(&huart4, 0xD4);
 8004a56:	22d4      	movs	r2, #212	; 0xd4
 8004a58:	4947      	ldr	r1, [pc, #284]	; (8004b78 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004a5a:	4848      	ldr	r0, [pc, #288]	; (8004b7c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004a5c:	f7fb fe1a 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 8004a60:	22b4      	movs	r2, #180	; 0xb4
 8004a62:	4945      	ldr	r1, [pc, #276]	; (8004b78 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004a64:	4846      	ldr	r0, [pc, #280]	; (8004b80 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004a66:	f7fb fe15 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004a6a:	22c4      	movs	r2, #196	; 0xc4
 8004a6c:	4942      	ldr	r1, [pc, #264]	; (8004b78 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004a6e:	4845      	ldr	r0, [pc, #276]	; (8004b84 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004a70:	f7fb fe10 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004a74:	22a4      	movs	r2, #164	; 0xa4
 8004a76:	4940      	ldr	r1, [pc, #256]	; (8004b78 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004a78:	4843      	ldr	r0, [pc, #268]	; (8004b88 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004a7a:	f7fb fe0b 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004a7e:	2320      	movs	r3, #32
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	4b42      	ldr	r3, [pc, #264]	; (8004b8c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	4942      	ldr	r1, [pc, #264]	; (8004b90 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004a88:	4842      	ldr	r0, [pc, #264]	; (8004b94 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004a8a:	f7fd f897 	bl	8001bbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004a8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004a96:	2204      	movs	r2, #4
 8004a98:	4940      	ldr	r1, [pc, #256]	; (8004b9c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004a9a:	4841      	ldr	r0, [pc, #260]	; (8004ba0 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004a9c:	f7fd f88e 	bl	8001bbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	4b3c      	ldr	r3, [pc, #240]	; (8004b98 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	493e      	ldr	r1, [pc, #248]	; (8004ba4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004aac:	483e      	ldr	r0, [pc, #248]	; (8004ba8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004aae:	f7fd f885 	bl	8001bbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004aba:	2208      	movs	r2, #8
 8004abc:	493b      	ldr	r1, [pc, #236]	; (8004bac <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004abe:	483c      	ldr	r0, [pc, #240]	; (8004bb0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004ac0:	f7fd f87c 	bl	8001bbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004ac4:	483b      	ldr	r0, [pc, #236]	; (8004bb4 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004ac6:	f7fc f805 	bl	8000ad4 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004aca:	483b      	ldr	r0, [pc, #236]	; (8004bb8 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004acc:	f7fc f802 	bl	8000ad4 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8004ad0:	483a      	ldr	r0, [pc, #232]	; (8004bbc <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004ad2:	f7fb ffff 	bl	8000ad4 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004ad6:	483a      	ldr	r0, [pc, #232]	; (8004bc0 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004ad8:	f7fb fffc 	bl	8000ad4 <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004adc:	4839      	ldr	r0, [pc, #228]	; (8004bc4 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004ade:	f7fb fff9 	bl	8000ad4 <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8004ae2:	4839      	ldr	r0, [pc, #228]	; (8004bc8 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004ae4:	f7fb fff6 	bl	8000ad4 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004ae8:	2208      	movs	r2, #8
 8004aea:	4938      	ldr	r1, [pc, #224]	; (8004bcc <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004aec:	4838      	ldr	r0, [pc, #224]	; (8004bd0 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004aee:	f7fc fddc 	bl	80016aa <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
AS5047UABI chessABIEncoder(&htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8004af2:	2304      	movs	r3, #4
 8004af4:	2200      	movs	r2, #0
 8004af6:	4937      	ldr	r1, [pc, #220]	; (8004bd4 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004af8:	4837      	ldr	r0, [pc, #220]	; (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004afa:	f7fb ff0c 	bl	8000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d134      	bne.n	8004b6e <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d12f      	bne.n	8004b6e <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004b0e:	4832      	ldr	r0, [pc, #200]	; (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004b10:	f7fb ff1e 	bl	8000950 <_ZN10AS5047UABID1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004b14:	482e      	ldr	r0, [pc, #184]	; (8004bd0 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004b16:	f7fc fdf8 	bl	800170a <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004b1a:	482b      	ldr	r0, [pc, #172]	; (8004bc8 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004b1c:	f7fc f848 	bl	8000bb0 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8004b20:	4828      	ldr	r0, [pc, #160]	; (8004bc4 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004b22:	f7fc f845 	bl	8000bb0 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8004b26:	4826      	ldr	r0, [pc, #152]	; (8004bc0 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004b28:	f7fc f842 	bl	8000bb0 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8004b2c:	4823      	ldr	r0, [pc, #140]	; (8004bbc <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004b2e:	f7fc f83f 	bl	8000bb0 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8004b32:	4821      	ldr	r0, [pc, #132]	; (8004bb8 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004b34:	f7fc f83c 	bl	8000bb0 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8004b38:	481e      	ldr	r0, [pc, #120]	; (8004bb4 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004b3a:	f7fc f839 	bl	8000bb0 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004b3e:	481c      	ldr	r0, [pc, #112]	; (8004bb0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004b40:	f7fd f87e 	bl	8001c40 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004b44:	4818      	ldr	r0, [pc, #96]	; (8004ba8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004b46:	f7fd f87b 	bl	8001c40 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004b4a:	4815      	ldr	r0, [pc, #84]	; (8004ba0 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004b4c:	f7fd f878 	bl	8001c40 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004b50:	4810      	ldr	r0, [pc, #64]	; (8004b94 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004b52:	f7fd f875 	bl	8001c40 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8004b56:	480c      	ldr	r0, [pc, #48]	; (8004b88 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004b58:	f7fb fdb0 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8004b5c:	4809      	ldr	r0, [pc, #36]	; (8004b84 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004b5e:	f7fb fdad 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8004b62:	4807      	ldr	r0, [pc, #28]	; (8004b80 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004b64:	f7fb fdaa 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004b68:	4804      	ldr	r0, [pc, #16]	; (8004b7c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004b6a:	f7fb fda7 	bl	80006bc <_ZN5AMT21D1Ev>
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	240011c4 	.word	0x240011c4
 8004b7c:	24000458 	.word	0x24000458
 8004b80:	24000474 	.word	0x24000474
 8004b84:	24000490 	.word	0x24000490
 8004b88:	240004ac 	.word	0x240004ac
 8004b8c:	58020400 	.word	0x58020400
 8004b90:	24000e34 	.word	0x24000e34
 8004b94:	240004c8 	.word	0x240004c8
 8004b98:	58021000 	.word	0x58021000
 8004b9c:	24000d9c 	.word	0x24000d9c
 8004ba0:	240004f0 	.word	0x240004f0
 8004ba4:	240010e0 	.word	0x240010e0
 8004ba8:	24000518 	.word	0x24000518
 8004bac:	24000de8 	.word	0x24000de8
 8004bb0:	24000540 	.word	0x24000540
 8004bb4:	24000568 	.word	0x24000568
 8004bb8:	2400064c 	.word	0x2400064c
 8004bbc:	24000730 	.word	0x24000730
 8004bc0:	24000814 	.word	0x24000814
 8004bc4:	240008f8 	.word	0x240008f8
 8004bc8:	240009dc 	.word	0x240009dc
 8004bcc:	24000e80 	.word	0x24000e80
 8004bd0:	24000ac0 	.word	0x24000ac0
 8004bd4:	24000fb0 	.word	0x24000fb0
 8004bd8:	24000ae0 	.word	0x24000ae0

08004bdc <_GLOBAL__sub_I_TIM_MS>:
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004be4:	2001      	movs	r0, #1
 8004be6:	f7ff ff29 	bl	8004a3c <_Z41__static_initialization_and_destruction_0ii>
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_GLOBAL__sub_D_TIM_MS>:
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f7ff ff21 	bl	8004a3c <_Z41__static_initialization_and_destruction_0ii>
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004c00:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c02:	4a29      	ldr	r2, [pc, #164]	; (8004ca8 <MX_SPI3_Init+0xac>)
 8004c04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004c06:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004c0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004c0e:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c14:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c16:	2207      	movs	r2, #7
 8004c18:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004c20:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c26:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004c28:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004c2e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004c30:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c3e:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004c4a:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c50:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c56:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004c58:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004c82:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004c8e:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <MX_SPI3_Init+0xa8>)
 8004c90:	f007 fe86 	bl	800c9a0 <HAL_SPI_Init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8004c9a:	f7ff fea1 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	24000c20 	.word	0x24000c20
 8004ca8:	40003c00 	.word	0x40003c00

08004cac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b0b8      	sub	sp, #224	; 0xe0
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	609a      	str	r2, [r3, #8]
 8004cc0:	60da      	str	r2, [r3, #12]
 8004cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004cc4:	f107 0310 	add.w	r3, r7, #16
 8004cc8:	22bc      	movs	r2, #188	; 0xbc
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f00d fb8f 	bl	80123f0 <memset>
  if(spiHandle->Instance==SPI3)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a56      	ldr	r2, [pc, #344]	; (8004e30 <HAL_SPI_MspInit+0x184>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	f040 80a5 	bne.w	8004e28 <HAL_SPI_MspInit+0x17c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ce2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ce8:	f107 0310 	add.w	r3, r7, #16
 8004cec:	4618      	mov	r0, r3
 8004cee:	f006 faef 	bl	800b2d0 <HAL_RCCEx_PeriphCLKConfig>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8004cf8:	f7ff fe72 	bl	80049e0 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004cfc:	4b4d      	ldr	r3, [pc, #308]	; (8004e34 <HAL_SPI_MspInit+0x188>)
 8004cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d02:	4a4c      	ldr	r2, [pc, #304]	; (8004e34 <HAL_SPI_MspInit+0x188>)
 8004d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d0c:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <HAL_SPI_MspInit+0x188>)
 8004d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d1a:	4b46      	ldr	r3, [pc, #280]	; (8004e34 <HAL_SPI_MspInit+0x188>)
 8004d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d20:	4a44      	ldr	r2, [pc, #272]	; (8004e34 <HAL_SPI_MspInit+0x188>)
 8004d22:	f043 0304 	orr.w	r3, r3, #4
 8004d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d2a:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <HAL_SPI_MspInit+0x188>)
 8004d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004d38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d40:	2302      	movs	r3, #2
 8004d42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004d52:	2306      	movs	r3, #6
 8004d54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4836      	ldr	r0, [pc, #216]	; (8004e38 <HAL_SPI_MspInit+0x18c>)
 8004d60:	f005 f8de 	bl	8009f20 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8004d64:	4b35      	ldr	r3, [pc, #212]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004d66:	4a36      	ldr	r2, [pc, #216]	; (8004e40 <HAL_SPI_MspInit+0x194>)
 8004d68:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8004d6a:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004d6c:	223e      	movs	r2, #62	; 0x3e
 8004d6e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d70:	4b32      	ldr	r3, [pc, #200]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004d72:	2240      	movs	r2, #64	; 0x40
 8004d74:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d76:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d7c:	4b2f      	ldr	r3, [pc, #188]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d82:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d84:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d8a:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004d90:	4b2a      	ldr	r3, [pc, #168]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d9c:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004da2:	4826      	ldr	r0, [pc, #152]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004da4:	f002 fa80 	bl	80072a8 <HAL_DMA_Init>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8004dae:	f7ff fe17 	bl	80049e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004db6:	679a      	str	r2, [r3, #120]	; 0x78
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_SPI_MspInit+0x190>)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Stream0;
 8004dbe:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004dc0:	4a21      	ldr	r2, [pc, #132]	; (8004e48 <HAL_SPI_MspInit+0x19c>)
 8004dc2:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8004dc4:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004dc6:	223d      	movs	r2, #61	; 0x3d
 8004dc8:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dca:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dd0:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ddc:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dde:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8004dea:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004df0:	4b14      	ldr	r3, [pc, #80]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8004dfc:	4811      	ldr	r0, [pc, #68]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004dfe:	f002 fa53 	bl	80072a8 <HAL_DMA_Init>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 8004e08:	f7ff fdea 	bl	80049e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0d      	ldr	r2, [pc, #52]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004e10:	67da      	str	r2, [r3, #124]	; 0x7c
 8004e12:	4a0c      	ldr	r2, [pc, #48]	; (8004e44 <HAL_SPI_MspInit+0x198>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	2033      	movs	r0, #51	; 0x33
 8004e1e:	f002 f804 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004e22:	2033      	movs	r0, #51	; 0x33
 8004e24:	f002 f81b 	bl	8006e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004e28:	bf00      	nop
 8004e2a:	37e0      	adds	r7, #224	; 0xe0
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40003c00 	.word	0x40003c00
 8004e34:	58024400 	.word	0x58024400
 8004e38:	58020800 	.word	0x58020800
 8004e3c:	24000ca8 	.word	0x24000ca8
 8004e40:	400200b8 	.word	0x400200b8
 8004e44:	24000d20 	.word	0x24000d20
 8004e48:	40020410 	.word	0x40020410

08004e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <HAL_MspInit+0x30>)
 8004e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e58:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <HAL_MspInit+0x30>)
 8004e5a:	f043 0302 	orr.w	r3, r3, #2
 8004e5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <HAL_MspInit+0x30>)
 8004e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	607b      	str	r3, [r7, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	58024400 	.word	0x58024400

08004e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e84:	e7fe      	b.n	8004e84 <NMI_Handler+0x4>

08004e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e86:	b480      	push	{r7}
 8004e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e8a:	e7fe      	b.n	8004e8a <HardFault_Handler+0x4>

08004e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e90:	e7fe      	b.n	8004e90 <MemManage_Handler+0x4>

08004e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e96:	e7fe      	b.n	8004e96 <BusFault_Handler+0x4>

08004e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e9c:	e7fe      	b.n	8004e9c <UsageFault_Handler+0x4>

08004e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eb0:	bf00      	nop
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ecc:	f001 fe82 	bl	8006bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004ed0:	f001 ffdf 	bl	8006e92 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004edc:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <DMA1_Stream0_IRQHandler+0x10>)
 8004ede:	f003 fd0d 	bl	80088fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	240014f4 	.word	0x240014f4

08004eec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004ef0:	4802      	ldr	r0, [pc, #8]	; (8004efc <DMA1_Stream1_IRQHandler+0x10>)
 8004ef2:	f003 fd03 	bl	80088fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	2400165c 	.word	0x2400165c

08004f00 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004f04:	4802      	ldr	r0, [pc, #8]	; (8004f10 <DMA1_Stream2_IRQHandler+0x10>)
 8004f06:	f003 fcf9 	bl	80088fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004f0a:	bf00      	nop
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	240016d4 	.word	0x240016d4

08004f14 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004f18:	4802      	ldr	r0, [pc, #8]	; (8004f24 <DMA1_Stream3_IRQHandler+0x10>)
 8004f1a:	f003 fcef 	bl	80088fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	24001404 	.word	0x24001404

08004f28 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004f2c:	4802      	ldr	r0, [pc, #8]	; (8004f38 <DMA1_Stream4_IRQHandler+0x10>)
 8004f2e:	f003 fce5 	bl	80088fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	2400147c 	.word	0x2400147c

08004f3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004f40:	4802      	ldr	r0, [pc, #8]	; (8004f4c <DMA1_Stream5_IRQHandler+0x10>)
 8004f42:	f003 fcdb 	bl	80088fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	2400156c 	.word	0x2400156c

08004f50 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004f54:	4802      	ldr	r0, [pc, #8]	; (8004f60 <DMA1_Stream6_IRQHandler+0x10>)
 8004f56:	f003 fcd1 	bl	80088fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004f5a:	bf00      	nop
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	240015e4 	.word	0x240015e4

08004f64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8004f68:	2040      	movs	r0, #64	; 0x40
 8004f6a:	f005 f9a2 	bl	800a2b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8004f6e:	2080      	movs	r0, #128	; 0x80
 8004f70:	f005 f99f 	bl	800a2b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f7c:	4802      	ldr	r0, [pc, #8]	; (8004f88 <USART2_IRQHandler+0x10>)
 8004f7e:	f009 ff91 	bl	800eea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	240012e4 	.word	0x240012e4

08004f8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004f90:	4802      	ldr	r0, [pc, #8]	; (8004f9c <USART3_IRQHandler+0x10>)
 8004f92:	f009 ff87 	bl	800eea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004f96:	bf00      	nop
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	24001374 	.word	0x24001374

08004fa0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8004fa4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004fa8:	f005 f983 	bl	800a2b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8004fac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004fb0:	f005 f97f 	bl	800a2b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 8004fb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004fb8:	f005 f97b 	bl	800a2b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8004fbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004fc0:	f005 f977 	bl	800a2b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004fcc:	4803      	ldr	r0, [pc, #12]	; (8004fdc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8004fce:	f008 fc6b 	bl	800d8a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8004fd2:	4803      	ldr	r0, [pc, #12]	; (8004fe0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8004fd4:	f008 fc68 	bl	800d8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004fd8:	bf00      	nop
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	24000fb0 	.word	0x24000fb0
 8004fe0:	24000ffc 	.word	0x24000ffc

08004fe4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004fe8:	4803      	ldr	r0, [pc, #12]	; (8004ff8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004fea:	f008 fc5d 	bl	800d8a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8004fee:	4803      	ldr	r0, [pc, #12]	; (8004ffc <TIM8_UP_TIM13_IRQHandler+0x18>)
 8004ff0:	f008 fc5a 	bl	800d8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004ff4:	bf00      	nop
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	24000fb0 	.word	0x24000fb0
 8004ffc:	24001048 	.word	0x24001048

08005000 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005004:	4803      	ldr	r0, [pc, #12]	; (8005014 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8005006:	f008 fc4f 	bl	800d8a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800500a:	4803      	ldr	r0, [pc, #12]	; (8005018 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800500c:	f008 fc4c 	bl	800d8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005010:	bf00      	nop
 8005012:	bd80      	pop	{r7, pc}
 8005014:	24000fb0 	.word	0x24000fb0
 8005018:	24001094 	.word	0x24001094

0800501c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005020:	4802      	ldr	r0, [pc, #8]	; (800502c <TIM8_CC_IRQHandler+0x10>)
 8005022:	f008 fc41 	bl	800d8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	24000fb0 	.word	0x24000fb0

08005030 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005034:	4802      	ldr	r0, [pc, #8]	; (8005040 <DMA1_Stream7_IRQHandler+0x10>)
 8005036:	f003 fc61 	bl	80088fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800503a:	bf00      	nop
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	24000ca8 	.word	0x24000ca8

08005044 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005048:	4802      	ldr	r0, [pc, #8]	; (8005054 <TIM5_IRQHandler+0x10>)
 800504a:	f008 fc2d 	bl	800d8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	24000ecc 	.word	0x24000ecc

08005058 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800505c:	4802      	ldr	r0, [pc, #8]	; (8005068 <SPI3_IRQHandler+0x10>)
 800505e:	f007 fda5 	bl	800cbac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	24000c20 	.word	0x24000c20

0800506c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <UART4_IRQHandler+0x10>)
 8005072:	f009 ff17 	bl	800eea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	240011c4 	.word	0x240011c4

08005080 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <TIM6_DAC_IRQHandler+0x10>)
 8005086:	f008 fc0f 	bl	800d8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	24000f18 	.word	0x24000f18

08005094 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <TIM7_IRQHandler+0x10>)
 800509a:	f008 fc05 	bl	800d8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	24000f64 	.word	0x24000f64

080050a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80050ac:	4802      	ldr	r0, [pc, #8]	; (80050b8 <DMA2_Stream0_IRQHandler+0x10>)
 80050ae:	f003 fc25 	bl	80088fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	24000d20 	.word	0x24000d20

080050bc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80050c0:	4802      	ldr	r0, [pc, #8]	; (80050cc <UART7_IRQHandler+0x10>)
 80050c2:	f009 feef 	bl	800eea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	24001254 	.word	0x24001254

080050d0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80050d4:	4802      	ldr	r0, [pc, #8]	; (80050e0 <TIM16_IRQHandler+0x10>)
 80050d6:	f008 fbe7 	bl	800d8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	2400112c 	.word	0x2400112c

080050e4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80050e8:	4802      	ldr	r0, [pc, #8]	; (80050f4 <TIM17_IRQHandler+0x10>)
 80050ea:	f008 fbdd 	bl	800d8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80050ee:	bf00      	nop
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	24001178 	.word	0x24001178

080050f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
	return 1;
 80050fc:	2301      	movs	r3, #1
}
 80050fe:	4618      	mov	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <_kill>:

int _kill(int pid, int sig)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005112:	f00d f943 	bl	801239c <__errno>
 8005116:	4603      	mov	r3, r0
 8005118:	2216      	movs	r2, #22
 800511a:	601a      	str	r2, [r3, #0]
	return -1;
 800511c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <_exit>:

void _exit (int status)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff ffe7 	bl	8005108 <_kill>
	while (1) {}		/* Make sure we hang here */
 800513a:	e7fe      	b.n	800513a <_exit+0x12>

0800513c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e00a      	b.n	8005164 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800514e:	f3af 8000 	nop.w
 8005152:	4601      	mov	r1, r0
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	60ba      	str	r2, [r7, #8]
 800515a:	b2ca      	uxtb	r2, r1
 800515c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	3301      	adds	r3, #1
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	dbf0      	blt.n	800514e <_read+0x12>
	}

return len;
 800516c:	687b      	ldr	r3, [r7, #4]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b086      	sub	sp, #24
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e009      	b.n	800519c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	60ba      	str	r2, [r7, #8]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	3301      	adds	r3, #1
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	dbf1      	blt.n	8005188 <_write+0x12>
	}
	return len;
 80051a4:	687b      	ldr	r3, [r7, #4]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <_close>:

int _close(int file)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
	return -1;
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051d6:	605a      	str	r2, [r3, #4]
	return 0;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <_isatty>:

int _isatty(int file)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
	return 1;
 80051ee:	2301      	movs	r3, #1
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
	return 0;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005220:	4a14      	ldr	r2, [pc, #80]	; (8005274 <_sbrk+0x5c>)
 8005222:	4b15      	ldr	r3, [pc, #84]	; (8005278 <_sbrk+0x60>)
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800522c:	4b13      	ldr	r3, [pc, #76]	; (800527c <_sbrk+0x64>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005234:	4b11      	ldr	r3, [pc, #68]	; (800527c <_sbrk+0x64>)
 8005236:	4a12      	ldr	r2, [pc, #72]	; (8005280 <_sbrk+0x68>)
 8005238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <_sbrk+0x64>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4413      	add	r3, r2
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	429a      	cmp	r2, r3
 8005246:	d207      	bcs.n	8005258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005248:	f00d f8a8 	bl	801239c <__errno>
 800524c:	4603      	mov	r3, r0
 800524e:	220c      	movs	r2, #12
 8005250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005256:	e009      	b.n	800526c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <_sbrk+0x64>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800525e:	4b07      	ldr	r3, [pc, #28]	; (800527c <_sbrk+0x64>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4413      	add	r3, r2
 8005266:	4a05      	ldr	r2, [pc, #20]	; (800527c <_sbrk+0x64>)
 8005268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800526a:	68fb      	ldr	r3, [r7, #12]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	24001d60 	.word	0x24001d60
 8005278:	00000400 	.word	0x00000400
 800527c:	24000d98 	.word	0x24000d98
 8005280:	24001760 	.word	0x24001760

08005284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005288:	4b39      	ldr	r3, [pc, #228]	; (8005370 <SystemInit+0xec>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	4a38      	ldr	r2, [pc, #224]	; (8005370 <SystemInit+0xec>)
 8005290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005298:	4b36      	ldr	r3, [pc, #216]	; (8005374 <SystemInit+0xf0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	2b06      	cmp	r3, #6
 80052a2:	d807      	bhi.n	80052b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80052a4:	4b33      	ldr	r3, [pc, #204]	; (8005374 <SystemInit+0xf0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f023 030f 	bic.w	r3, r3, #15
 80052ac:	4a31      	ldr	r2, [pc, #196]	; (8005374 <SystemInit+0xf0>)
 80052ae:	f043 0307 	orr.w	r3, r3, #7
 80052b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80052b4:	4b30      	ldr	r3, [pc, #192]	; (8005378 <SystemInit+0xf4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a2f      	ldr	r2, [pc, #188]	; (8005378 <SystemInit+0xf4>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80052c0:	4b2d      	ldr	r3, [pc, #180]	; (8005378 <SystemInit+0xf4>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80052c6:	4b2c      	ldr	r3, [pc, #176]	; (8005378 <SystemInit+0xf4>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	492b      	ldr	r1, [pc, #172]	; (8005378 <SystemInit+0xf4>)
 80052cc:	4b2b      	ldr	r3, [pc, #172]	; (800537c <SystemInit+0xf8>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80052d2:	4b28      	ldr	r3, [pc, #160]	; (8005374 <SystemInit+0xf0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80052de:	4b25      	ldr	r3, [pc, #148]	; (8005374 <SystemInit+0xf0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 030f 	bic.w	r3, r3, #15
 80052e6:	4a23      	ldr	r2, [pc, #140]	; (8005374 <SystemInit+0xf0>)
 80052e8:	f043 0307 	orr.w	r3, r3, #7
 80052ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80052ee:	4b22      	ldr	r3, [pc, #136]	; (8005378 <SystemInit+0xf4>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80052f4:	4b20      	ldr	r3, [pc, #128]	; (8005378 <SystemInit+0xf4>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80052fa:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <SystemInit+0xf4>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005300:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <SystemInit+0xf4>)
 8005302:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <SystemInit+0xfc>)
 8005304:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005306:	4b1c      	ldr	r3, [pc, #112]	; (8005378 <SystemInit+0xf4>)
 8005308:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <SystemInit+0x100>)
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800530c:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <SystemInit+0xf4>)
 800530e:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <SystemInit+0x104>)
 8005310:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005312:	4b19      	ldr	r3, [pc, #100]	; (8005378 <SystemInit+0xf4>)
 8005314:	2200      	movs	r2, #0
 8005316:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005318:	4b17      	ldr	r3, [pc, #92]	; (8005378 <SystemInit+0xf4>)
 800531a:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <SystemInit+0x104>)
 800531c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800531e:	4b16      	ldr	r3, [pc, #88]	; (8005378 <SystemInit+0xf4>)
 8005320:	2200      	movs	r2, #0
 8005322:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <SystemInit+0xf4>)
 8005326:	4a18      	ldr	r2, [pc, #96]	; (8005388 <SystemInit+0x104>)
 8005328:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <SystemInit+0xf4>)
 800532c:	2200      	movs	r2, #0
 800532e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005330:	4b11      	ldr	r3, [pc, #68]	; (8005378 <SystemInit+0xf4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a10      	ldr	r2, [pc, #64]	; (8005378 <SystemInit+0xf4>)
 8005336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <SystemInit+0xf4>)
 800533e:	2200      	movs	r2, #0
 8005340:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005342:	4b12      	ldr	r3, [pc, #72]	; (800538c <SystemInit+0x108>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b12      	ldr	r3, [pc, #72]	; (8005390 <SystemInit+0x10c>)
 8005348:	4013      	ands	r3, r2
 800534a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800534e:	d202      	bcs.n	8005356 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005350:	4b10      	ldr	r3, [pc, #64]	; (8005394 <SystemInit+0x110>)
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <SystemInit+0x114>)
 8005358:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800535c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800535e:	4b04      	ldr	r3, [pc, #16]	; (8005370 <SystemInit+0xec>)
 8005360:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005364:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005366:	bf00      	nop
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	e000ed00 	.word	0xe000ed00
 8005374:	52002000 	.word	0x52002000
 8005378:	58024400 	.word	0x58024400
 800537c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005380:	02020200 	.word	0x02020200
 8005384:	01ff0000 	.word	0x01ff0000
 8005388:	01010280 	.word	0x01010280
 800538c:	5c001000 	.word	0x5c001000
 8005390:	ffff0000 	.word	0xffff0000
 8005394:	51008108 	.word	0x51008108
 8005398:	52004000 	.word	0x52004000

0800539c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b09a      	sub	sp, #104	; 0x68
 80053a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	605a      	str	r2, [r3, #4]
 80053ac:	609a      	str	r2, [r3, #8]
 80053ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	605a      	str	r2, [r3, #4]
 80053ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	60da      	str	r2, [r3, #12]
 80053ca:	611a      	str	r2, [r3, #16]
 80053cc:	615a      	str	r2, [r3, #20]
 80053ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80053d0:	1d3b      	adds	r3, r7, #4
 80053d2:	222c      	movs	r2, #44	; 0x2c
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f00d f80a 	bl	80123f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80053dc:	4b44      	ldr	r3, [pc, #272]	; (80054f0 <MX_TIM1_Init+0x154>)
 80053de:	4a45      	ldr	r2, [pc, #276]	; (80054f4 <MX_TIM1_Init+0x158>)
 80053e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80053e2:	4b43      	ldr	r3, [pc, #268]	; (80054f0 <MX_TIM1_Init+0x154>)
 80053e4:	22c7      	movs	r2, #199	; 0xc7
 80053e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e8:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <MX_TIM1_Init+0x154>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80053ee:	4b40      	ldr	r3, [pc, #256]	; (80054f0 <MX_TIM1_Init+0x154>)
 80053f0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80053f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053f6:	4b3e      	ldr	r3, [pc, #248]	; (80054f0 <MX_TIM1_Init+0x154>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80053fc:	4b3c      	ldr	r3, [pc, #240]	; (80054f0 <MX_TIM1_Init+0x154>)
 80053fe:	2200      	movs	r2, #0
 8005400:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005402:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <MX_TIM1_Init+0x154>)
 8005404:	2280      	movs	r2, #128	; 0x80
 8005406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005408:	4839      	ldr	r0, [pc, #228]	; (80054f0 <MX_TIM1_Init+0x154>)
 800540a:	f007 feac 	bl	800d166 <HAL_TIM_Base_Init>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005414:	f7ff fae4 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800541c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800541e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005422:	4619      	mov	r1, r3
 8005424:	4832      	ldr	r0, [pc, #200]	; (80054f0 <MX_TIM1_Init+0x154>)
 8005426:	f008 fc73 	bl	800dd10 <HAL_TIM_ConfigClockSource>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005430:	f7ff fad6 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005434:	482e      	ldr	r0, [pc, #184]	; (80054f0 <MX_TIM1_Init+0x154>)
 8005436:	f007 ff94 	bl	800d362 <HAL_TIM_PWM_Init>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005440:	f7ff face 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005444:	2300      	movs	r3, #0
 8005446:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005448:	2300      	movs	r3, #0
 800544a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800544c:	2300      	movs	r3, #0
 800544e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005450:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005454:	4619      	mov	r1, r3
 8005456:	4826      	ldr	r0, [pc, #152]	; (80054f0 <MX_TIM1_Init+0x154>)
 8005458:	f009 f9ae 	bl	800e7b8 <HAL_TIMEx_MasterConfigSynchronization>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005462:	f7ff fabd 	bl	80049e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005466:	2360      	movs	r3, #96	; 0x60
 8005468:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800546a:	f240 1339 	movw	r3, #313	; 0x139
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005470:	2300      	movs	r3, #0
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005474:	2300      	movs	r3, #0
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005478:	2300      	movs	r3, #0
 800547a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800547c:	2300      	movs	r3, #0
 800547e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005480:	2300      	movs	r3, #0
 8005482:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005488:	2204      	movs	r2, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4818      	ldr	r0, [pc, #96]	; (80054f0 <MX_TIM1_Init+0x154>)
 800548e:	f008 fb2b 	bl	800dae8 <HAL_TIM_PWM_ConfigChannel>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8005498:	f7ff faa2 	bl	80049e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800549c:	2300      	movs	r3, #0
 800549e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80054b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80054be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80054cc:	1d3b      	adds	r3, r7, #4
 80054ce:	4619      	mov	r1, r3
 80054d0:	4807      	ldr	r0, [pc, #28]	; (80054f0 <MX_TIM1_Init+0x154>)
 80054d2:	f009 f9ff 	bl	800e8d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80054dc:	f7ff fa80 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80054e0:	4803      	ldr	r0, [pc, #12]	; (80054f0 <MX_TIM1_Init+0x154>)
 80054e2:	f000 fdd5 	bl	8006090 <HAL_TIM_MspPostInit>

}
 80054e6:	bf00      	nop
 80054e8:	3768      	adds	r7, #104	; 0x68
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	24000d9c 	.word	0x24000d9c
 80054f4:	40010000 	.word	0x40010000

080054f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08e      	sub	sp, #56	; 0x38
 80054fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	605a      	str	r2, [r3, #4]
 8005508:	609a      	str	r2, [r3, #8]
 800550a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800550c:	f107 031c 	add.w	r3, r7, #28
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005518:	463b      	mov	r3, r7
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	609a      	str	r2, [r3, #8]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	611a      	str	r2, [r3, #16]
 8005526:	615a      	str	r2, [r3, #20]
 8005528:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800552a:	4b2e      	ldr	r3, [pc, #184]	; (80055e4 <MX_TIM2_Init+0xec>)
 800552c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005530:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8005532:	4b2c      	ldr	r3, [pc, #176]	; (80055e4 <MX_TIM2_Init+0xec>)
 8005534:	22c7      	movs	r2, #199	; 0xc7
 8005536:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005538:	4b2a      	ldr	r3, [pc, #168]	; (80055e4 <MX_TIM2_Init+0xec>)
 800553a:	2200      	movs	r2, #0
 800553c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800553e:	4b29      	ldr	r3, [pc, #164]	; (80055e4 <MX_TIM2_Init+0xec>)
 8005540:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005544:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <MX_TIM2_Init+0xec>)
 8005548:	2200      	movs	r2, #0
 800554a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <MX_TIM2_Init+0xec>)
 800554e:	2280      	movs	r2, #128	; 0x80
 8005550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005552:	4824      	ldr	r0, [pc, #144]	; (80055e4 <MX_TIM2_Init+0xec>)
 8005554:	f007 fe07 	bl	800d166 <HAL_TIM_Base_Init>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800555e:	f7ff fa3f 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800556c:	4619      	mov	r1, r3
 800556e:	481d      	ldr	r0, [pc, #116]	; (80055e4 <MX_TIM2_Init+0xec>)
 8005570:	f008 fbce 	bl	800dd10 <HAL_TIM_ConfigClockSource>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800557a:	f7ff fa31 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800557e:	4819      	ldr	r0, [pc, #100]	; (80055e4 <MX_TIM2_Init+0xec>)
 8005580:	f007 feef 	bl	800d362 <HAL_TIM_PWM_Init>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800558a:	f7ff fa29 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005592:	2300      	movs	r3, #0
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005596:	f107 031c 	add.w	r3, r7, #28
 800559a:	4619      	mov	r1, r3
 800559c:	4811      	ldr	r0, [pc, #68]	; (80055e4 <MX_TIM2_Init+0xec>)
 800559e:	f009 f90b 	bl	800e7b8 <HAL_TIMEx_MasterConfigSynchronization>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80055a8:	f7ff fa1a 	bl	80049e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055ac:	2360      	movs	r3, #96	; 0x60
 80055ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80055b0:	f240 1339 	movw	r3, #313	; 0x139
 80055b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80055be:	463b      	mov	r3, r7
 80055c0:	2208      	movs	r2, #8
 80055c2:	4619      	mov	r1, r3
 80055c4:	4807      	ldr	r0, [pc, #28]	; (80055e4 <MX_TIM2_Init+0xec>)
 80055c6:	f008 fa8f 	bl	800dae8 <HAL_TIM_PWM_ConfigChannel>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80055d0:	f7ff fa06 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80055d4:	4803      	ldr	r0, [pc, #12]	; (80055e4 <MX_TIM2_Init+0xec>)
 80055d6:	f000 fd5b 	bl	8006090 <HAL_TIM_MspPostInit>

}
 80055da:	bf00      	nop
 80055dc:	3738      	adds	r7, #56	; 0x38
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	24000de8 	.word	0x24000de8

080055e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08e      	sub	sp, #56	; 0x38
 80055ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	605a      	str	r2, [r3, #4]
 80055f8:	609a      	str	r2, [r3, #8]
 80055fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055fc:	f107 031c 	add.w	r3, r7, #28
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005608:	463b      	mov	r3, r7
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	605a      	str	r2, [r3, #4]
 8005610:	609a      	str	r2, [r3, #8]
 8005612:	60da      	str	r2, [r3, #12]
 8005614:	611a      	str	r2, [r3, #16]
 8005616:	615a      	str	r2, [r3, #20]
 8005618:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800561a:	4b2d      	ldr	r3, [pc, #180]	; (80056d0 <MX_TIM3_Init+0xe8>)
 800561c:	4a2d      	ldr	r2, [pc, #180]	; (80056d4 <MX_TIM3_Init+0xec>)
 800561e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005620:	4b2b      	ldr	r3, [pc, #172]	; (80056d0 <MX_TIM3_Init+0xe8>)
 8005622:	22c7      	movs	r2, #199	; 0xc7
 8005624:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005626:	4b2a      	ldr	r3, [pc, #168]	; (80056d0 <MX_TIM3_Init+0xe8>)
 8005628:	2200      	movs	r2, #0
 800562a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 800562c:	4b28      	ldr	r3, [pc, #160]	; (80056d0 <MX_TIM3_Init+0xe8>)
 800562e:	f640 125f 	movw	r2, #2399	; 0x95f
 8005632:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005634:	4b26      	ldr	r3, [pc, #152]	; (80056d0 <MX_TIM3_Init+0xe8>)
 8005636:	2200      	movs	r2, #0
 8005638:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800563a:	4b25      	ldr	r3, [pc, #148]	; (80056d0 <MX_TIM3_Init+0xe8>)
 800563c:	2280      	movs	r2, #128	; 0x80
 800563e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005640:	4823      	ldr	r0, [pc, #140]	; (80056d0 <MX_TIM3_Init+0xe8>)
 8005642:	f007 fd90 	bl	800d166 <HAL_TIM_Base_Init>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800564c:	f7ff f9c8 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800565a:	4619      	mov	r1, r3
 800565c:	481c      	ldr	r0, [pc, #112]	; (80056d0 <MX_TIM3_Init+0xe8>)
 800565e:	f008 fb57 	bl	800dd10 <HAL_TIM_ConfigClockSource>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005668:	f7ff f9ba 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800566c:	4818      	ldr	r0, [pc, #96]	; (80056d0 <MX_TIM3_Init+0xe8>)
 800566e:	f007 fe78 	bl	800d362 <HAL_TIM_PWM_Init>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005678:	f7ff f9b2 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800567c:	2300      	movs	r3, #0
 800567e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005680:	2300      	movs	r3, #0
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005684:	f107 031c 	add.w	r3, r7, #28
 8005688:	4619      	mov	r1, r3
 800568a:	4811      	ldr	r0, [pc, #68]	; (80056d0 <MX_TIM3_Init+0xe8>)
 800568c:	f009 f894 	bl	800e7b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005696:	f7ff f9a3 	bl	80049e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800569a:	2360      	movs	r3, #96	; 0x60
 800569c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056aa:	463b      	mov	r3, r7
 80056ac:	2200      	movs	r2, #0
 80056ae:	4619      	mov	r1, r3
 80056b0:	4807      	ldr	r0, [pc, #28]	; (80056d0 <MX_TIM3_Init+0xe8>)
 80056b2:	f008 fa19 	bl	800dae8 <HAL_TIM_PWM_ConfigChannel>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80056bc:	f7ff f990 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80056c0:	4803      	ldr	r0, [pc, #12]	; (80056d0 <MX_TIM3_Init+0xe8>)
 80056c2:	f000 fce5 	bl	8006090 <HAL_TIM_MspPostInit>

}
 80056c6:	bf00      	nop
 80056c8:	3738      	adds	r7, #56	; 0x38
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	24000e34 	.word	0x24000e34
 80056d4:	40000400 	.word	0x40000400

080056d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08e      	sub	sp, #56	; 0x38
 80056dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	609a      	str	r2, [r3, #8]
 80056ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056ec:	f107 031c 	add.w	r3, r7, #28
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	605a      	str	r2, [r3, #4]
 80056f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056f8:	463b      	mov	r3, r7
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	605a      	str	r2, [r3, #4]
 8005700:	609a      	str	r2, [r3, #8]
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	611a      	str	r2, [r3, #16]
 8005706:	615a      	str	r2, [r3, #20]
 8005708:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800570a:	4b2d      	ldr	r3, [pc, #180]	; (80057c0 <MX_TIM4_Init+0xe8>)
 800570c:	4a2d      	ldr	r2, [pc, #180]	; (80057c4 <MX_TIM4_Init+0xec>)
 800570e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005710:	4b2b      	ldr	r3, [pc, #172]	; (80057c0 <MX_TIM4_Init+0xe8>)
 8005712:	22ef      	movs	r2, #239	; 0xef
 8005714:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005716:	4b2a      	ldr	r3, [pc, #168]	; (80057c0 <MX_TIM4_Init+0xe8>)
 8005718:	2200      	movs	r2, #0
 800571a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800571c:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <MX_TIM4_Init+0xe8>)
 800571e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005722:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005724:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <MX_TIM4_Init+0xe8>)
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800572a:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <MX_TIM4_Init+0xe8>)
 800572c:	2280      	movs	r2, #128	; 0x80
 800572e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005730:	4823      	ldr	r0, [pc, #140]	; (80057c0 <MX_TIM4_Init+0xe8>)
 8005732:	f007 fd18 	bl	800d166 <HAL_TIM_Base_Init>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800573c:	f7ff f950 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800574a:	4619      	mov	r1, r3
 800574c:	481c      	ldr	r0, [pc, #112]	; (80057c0 <MX_TIM4_Init+0xe8>)
 800574e:	f008 fadf 	bl	800dd10 <HAL_TIM_ConfigClockSource>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005758:	f7ff f942 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800575c:	4818      	ldr	r0, [pc, #96]	; (80057c0 <MX_TIM4_Init+0xe8>)
 800575e:	f007 fe00 	bl	800d362 <HAL_TIM_PWM_Init>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005768:	f7ff f93a 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005770:	2300      	movs	r3, #0
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005774:	f107 031c 	add.w	r3, r7, #28
 8005778:	4619      	mov	r1, r3
 800577a:	4811      	ldr	r0, [pc, #68]	; (80057c0 <MX_TIM4_Init+0xe8>)
 800577c:	f009 f81c 	bl	800e7b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005786:	f7ff f92b 	bl	80049e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800578a:	2360      	movs	r3, #96	; 0x60
 800578c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800579a:	463b      	mov	r3, r7
 800579c:	2208      	movs	r2, #8
 800579e:	4619      	mov	r1, r3
 80057a0:	4807      	ldr	r0, [pc, #28]	; (80057c0 <MX_TIM4_Init+0xe8>)
 80057a2:	f008 f9a1 	bl	800dae8 <HAL_TIM_PWM_ConfigChannel>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80057ac:	f7ff f918 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80057b0:	4803      	ldr	r0, [pc, #12]	; (80057c0 <MX_TIM4_Init+0xe8>)
 80057b2:	f000 fc6d 	bl	8006090 <HAL_TIM_MspPostInit>

}
 80057b6:	bf00      	nop
 80057b8:	3738      	adds	r7, #56	; 0x38
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	24000e80 	.word	0x24000e80
 80057c4:	40000800 	.word	0x40000800

080057c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057ce:	f107 0310 	add.w	r3, r7, #16
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	605a      	str	r2, [r3, #4]
 80057d8:	609a      	str	r2, [r3, #8]
 80057da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057dc:	1d3b      	adds	r3, r7, #4
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	605a      	str	r2, [r3, #4]
 80057e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80057e6:	4b1d      	ldr	r3, [pc, #116]	; (800585c <MX_TIM5_Init+0x94>)
 80057e8:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <MX_TIM5_Init+0x98>)
 80057ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 80057ec:	4b1b      	ldr	r3, [pc, #108]	; (800585c <MX_TIM5_Init+0x94>)
 80057ee:	22c7      	movs	r2, #199	; 0xc7
 80057f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057f2:	4b1a      	ldr	r3, [pc, #104]	; (800585c <MX_TIM5_Init+0x94>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 80057f8:	4b18      	ldr	r3, [pc, #96]	; (800585c <MX_TIM5_Init+0x94>)
 80057fa:	f642 62df 	movw	r2, #11999	; 0x2edf
 80057fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005800:	4b16      	ldr	r3, [pc, #88]	; (800585c <MX_TIM5_Init+0x94>)
 8005802:	2200      	movs	r2, #0
 8005804:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005806:	4b15      	ldr	r3, [pc, #84]	; (800585c <MX_TIM5_Init+0x94>)
 8005808:	2200      	movs	r2, #0
 800580a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800580c:	4813      	ldr	r0, [pc, #76]	; (800585c <MX_TIM5_Init+0x94>)
 800580e:	f007 fcaa 	bl	800d166 <HAL_TIM_Base_Init>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005818:	f7ff f8e2 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800581c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005820:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005822:	f107 0310 	add.w	r3, r7, #16
 8005826:	4619      	mov	r1, r3
 8005828:	480c      	ldr	r0, [pc, #48]	; (800585c <MX_TIM5_Init+0x94>)
 800582a:	f008 fa71 	bl	800dd10 <HAL_TIM_ConfigClockSource>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005834:	f7ff f8d4 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005838:	2300      	movs	r3, #0
 800583a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	4619      	mov	r1, r3
 8005844:	4805      	ldr	r0, [pc, #20]	; (800585c <MX_TIM5_Init+0x94>)
 8005846:	f008 ffb7 	bl	800e7b8 <HAL_TIMEx_MasterConfigSynchronization>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005850:	f7ff f8c6 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005854:	bf00      	nop
 8005856:	3720      	adds	r7, #32
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	24000ecc 	.word	0x24000ecc
 8005860:	40000c00 	.word	0x40000c00

08005864 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	605a      	str	r2, [r3, #4]
 8005872:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005874:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <MX_TIM6_Init+0x64>)
 8005876:	4a15      	ldr	r2, [pc, #84]	; (80058cc <MX_TIM6_Init+0x68>)
 8005878:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 800587a:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <MX_TIM6_Init+0x64>)
 800587c:	22c7      	movs	r2, #199	; 0xc7
 800587e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <MX_TIM6_Init+0x64>)
 8005882:	2200      	movs	r2, #0
 8005884:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <MX_TIM6_Init+0x64>)
 8005888:	f241 726f 	movw	r2, #5999	; 0x176f
 800588c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800588e:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <MX_TIM6_Init+0x64>)
 8005890:	2280      	movs	r2, #128	; 0x80
 8005892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005894:	480c      	ldr	r0, [pc, #48]	; (80058c8 <MX_TIM6_Init+0x64>)
 8005896:	f007 fc66 	bl	800d166 <HAL_TIM_Base_Init>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80058a0:	f7ff f89e 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058a4:	2300      	movs	r3, #0
 80058a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4805      	ldr	r0, [pc, #20]	; (80058c8 <MX_TIM6_Init+0x64>)
 80058b2:	f008 ff81 	bl	800e7b8 <HAL_TIMEx_MasterConfigSynchronization>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80058bc:	f7ff f890 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	24000f18 	.word	0x24000f18
 80058cc:	40001000 	.word	0x40001000

080058d0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058d6:	1d3b      	adds	r3, r7, #4
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80058e0:	4b14      	ldr	r3, [pc, #80]	; (8005934 <MX_TIM7_Init+0x64>)
 80058e2:	4a15      	ldr	r2, [pc, #84]	; (8005938 <MX_TIM7_Init+0x68>)
 80058e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 80058e6:	4b13      	ldr	r3, [pc, #76]	; (8005934 <MX_TIM7_Init+0x64>)
 80058e8:	22c7      	movs	r2, #199	; 0xc7
 80058ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ec:	4b11      	ldr	r3, [pc, #68]	; (8005934 <MX_TIM7_Init+0x64>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 80058f2:	4b10      	ldr	r3, [pc, #64]	; (8005934 <MX_TIM7_Init+0x64>)
 80058f4:	f240 42af 	movw	r2, #1199	; 0x4af
 80058f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <MX_TIM7_Init+0x64>)
 80058fc:	2280      	movs	r2, #128	; 0x80
 80058fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005900:	480c      	ldr	r0, [pc, #48]	; (8005934 <MX_TIM7_Init+0x64>)
 8005902:	f007 fc30 	bl	800d166 <HAL_TIM_Base_Init>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800590c:	f7ff f868 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005910:	2300      	movs	r3, #0
 8005912:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005918:	1d3b      	adds	r3, r7, #4
 800591a:	4619      	mov	r1, r3
 800591c:	4805      	ldr	r0, [pc, #20]	; (8005934 <MX_TIM7_Init+0x64>)
 800591e:	f008 ff4b 	bl	800e7b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005928:	f7ff f85a 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	24000f64 	.word	0x24000f64
 8005938:	40001400 	.word	0x40001400

0800593c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08c      	sub	sp, #48	; 0x30
 8005940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005942:	f107 030c 	add.w	r3, r7, #12
 8005946:	2224      	movs	r2, #36	; 0x24
 8005948:	2100      	movs	r1, #0
 800594a:	4618      	mov	r0, r3
 800594c:	f00c fd50 	bl	80123f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005950:	463b      	mov	r3, r7
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	605a      	str	r2, [r3, #4]
 8005958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800595a:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <MX_TIM8_Init+0xac>)
 800595c:	4a23      	ldr	r2, [pc, #140]	; (80059ec <MX_TIM8_Init+0xb0>)
 800595e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005960:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <MX_TIM8_Init+0xac>)
 8005962:	2200      	movs	r2, #0
 8005964:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005966:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <MX_TIM8_Init+0xac>)
 8005968:	2200      	movs	r2, #0
 800596a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2048-1;
 800596c:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <MX_TIM8_Init+0xac>)
 800596e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005972:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005974:	4b1c      	ldr	r3, [pc, #112]	; (80059e8 <MX_TIM8_Init+0xac>)
 8005976:	2200      	movs	r2, #0
 8005978:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800597a:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <MX_TIM8_Init+0xac>)
 800597c:	2200      	movs	r2, #0
 800597e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005980:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <MX_TIM8_Init+0xac>)
 8005982:	2280      	movs	r2, #128	; 0x80
 8005984:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005986:	2303      	movs	r3, #3
 8005988:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800598a:	2300      	movs	r3, #0
 800598c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800598e:	2301      	movs	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005992:	2300      	movs	r3, #0
 8005994:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005996:	230f      	movs	r3, #15
 8005998:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800599a:	2300      	movs	r3, #0
 800599c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800599e:	2301      	movs	r3, #1
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80059a2:	2300      	movs	r3, #0
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80059a6:	230f      	movs	r3, #15
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80059aa:	f107 030c 	add.w	r3, r7, #12
 80059ae:	4619      	mov	r1, r3
 80059b0:	480d      	ldr	r0, [pc, #52]	; (80059e8 <MX_TIM8_Init+0xac>)
 80059b2:	f007 fe45 	bl	800d640 <HAL_TIM_Encoder_Init>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80059bc:	f7ff f810 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059c0:	2300      	movs	r3, #0
 80059c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80059c4:	2300      	movs	r3, #0
 80059c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80059cc:	463b      	mov	r3, r7
 80059ce:	4619      	mov	r1, r3
 80059d0:	4805      	ldr	r0, [pc, #20]	; (80059e8 <MX_TIM8_Init+0xac>)
 80059d2:	f008 fef1 	bl	800e7b8 <HAL_TIMEx_MasterConfigSynchronization>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80059dc:	f7ff f800 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80059e0:	bf00      	nop
 80059e2:	3730      	adds	r7, #48	; 0x30
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	24000fb0 	.word	0x24000fb0
 80059ec:	40010400 	.word	0x40010400

080059f0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059f6:	463b      	mov	r3, r7
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005a02:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <MX_TIM12_Init+0x6c>)
 8005a04:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <MX_TIM12_Init+0x70>)
 8005a06:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005a08:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <MX_TIM12_Init+0x6c>)
 8005a0a:	22c7      	movs	r2, #199	; 0xc7
 8005a0c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <MX_TIM12_Init+0x6c>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005a14:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <MX_TIM12_Init+0x6c>)
 8005a16:	f240 2257 	movw	r2, #599	; 0x257
 8005a1a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <MX_TIM12_Init+0x6c>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <MX_TIM12_Init+0x6c>)
 8005a24:	2280      	movs	r2, #128	; 0x80
 8005a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005a28:	480c      	ldr	r0, [pc, #48]	; (8005a5c <MX_TIM12_Init+0x6c>)
 8005a2a:	f007 fb9c 	bl	800d166 <HAL_TIM_Base_Init>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005a34:	f7fe ffd4 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a3c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005a3e:	463b      	mov	r3, r7
 8005a40:	4619      	mov	r1, r3
 8005a42:	4806      	ldr	r0, [pc, #24]	; (8005a5c <MX_TIM12_Init+0x6c>)
 8005a44:	f008 f964 	bl	800dd10 <HAL_TIM_ConfigClockSource>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8005a4e:	f7fe ffc7 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8005a52:	bf00      	nop
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	24000ffc 	.word	0x24000ffc
 8005a60:	40001800 	.word	0x40001800

08005a64 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <MX_TIM13_Init+0x40>)
 8005a6a:	4a0f      	ldr	r2, [pc, #60]	; (8005aa8 <MX_TIM13_Init+0x44>)
 8005a6c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <MX_TIM13_Init+0x40>)
 8005a70:	22c7      	movs	r2, #199	; 0xc7
 8005a72:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <MX_TIM13_Init+0x40>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <MX_TIM13_Init+0x40>)
 8005a7c:	f240 2257 	movw	r2, #599	; 0x257
 8005a80:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <MX_TIM13_Init+0x40>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <MX_TIM13_Init+0x40>)
 8005a8a:	2280      	movs	r2, #128	; 0x80
 8005a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005a8e:	4805      	ldr	r0, [pc, #20]	; (8005aa4 <MX_TIM13_Init+0x40>)
 8005a90:	f007 fb69 	bl	800d166 <HAL_TIM_Base_Init>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005a9a:	f7fe ffa1 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	24001048 	.word	0x24001048
 8005aa8:	40001c00 	.word	0x40001c00

08005aac <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <MX_TIM14_Init+0x40>)
 8005ab2:	4a0f      	ldr	r2, [pc, #60]	; (8005af0 <MX_TIM14_Init+0x44>)
 8005ab4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <MX_TIM14_Init+0x40>)
 8005ab8:	22c7      	movs	r2, #199	; 0xc7
 8005aba:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <MX_TIM14_Init+0x40>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8005ac2:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <MX_TIM14_Init+0x40>)
 8005ac4:	f640 125f 	movw	r2, #2399	; 0x95f
 8005ac8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aca:	4b08      	ldr	r3, [pc, #32]	; (8005aec <MX_TIM14_Init+0x40>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ad0:	4b06      	ldr	r3, [pc, #24]	; (8005aec <MX_TIM14_Init+0x40>)
 8005ad2:	2280      	movs	r2, #128	; 0x80
 8005ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005ad6:	4805      	ldr	r0, [pc, #20]	; (8005aec <MX_TIM14_Init+0x40>)
 8005ad8:	f007 fb45 	bl	800d166 <HAL_TIM_Base_Init>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005ae2:	f7fe ff7d 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005ae6:	bf00      	nop
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	24001094 	.word	0x24001094
 8005af0:	40002000 	.word	0x40002000

08005af4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b09a      	sub	sp, #104	; 0x68
 8005af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005afa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	609a      	str	r2, [r3, #8]
 8005b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	605a      	str	r2, [r3, #4]
 8005b12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	611a      	str	r2, [r3, #16]
 8005b24:	615a      	str	r2, [r3, #20]
 8005b26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	222c      	movs	r2, #44	; 0x2c
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f00c fc5e 	bl	80123f0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005b34:	4b3f      	ldr	r3, [pc, #252]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005b36:	4a40      	ldr	r2, [pc, #256]	; (8005c38 <MX_TIM15_Init+0x144>)
 8005b38:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8005b3a:	4b3e      	ldr	r3, [pc, #248]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005b3c:	22ef      	movs	r2, #239	; 0xef
 8005b3e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b40:	4b3c      	ldr	r3, [pc, #240]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8005b46:	4b3b      	ldr	r3, [pc, #236]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005b48:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005b4c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b4e:	4b39      	ldr	r3, [pc, #228]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005b54:	4b37      	ldr	r3, [pc, #220]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b5a:	4b36      	ldr	r3, [pc, #216]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005b5c:	2280      	movs	r2, #128	; 0x80
 8005b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005b60:	4834      	ldr	r0, [pc, #208]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005b62:	f007 fb00 	bl	800d166 <HAL_TIM_Base_Init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8005b6c:	f7fe ff38 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b74:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005b76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	482d      	ldr	r0, [pc, #180]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005b7e:	f008 f8c7 	bl	800dd10 <HAL_TIM_ConfigClockSource>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005b88:	f7fe ff2a 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005b8c:	4829      	ldr	r0, [pc, #164]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005b8e:	f007 fbe8 	bl	800d362 <HAL_TIM_PWM_Init>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005b98:	f7fe ff22 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005ba4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4822      	ldr	r0, [pc, #136]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005bac:	f008 fe04 	bl	800e7b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8005bb6:	f7fe ff13 	bl	80049e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005bba:	2360      	movs	r3, #96	; 0x60
 8005bbc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8005bbe:	f240 1339 	movw	r3, #313	; 0x139
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005bd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bdc:	2204      	movs	r2, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	4814      	ldr	r0, [pc, #80]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005be2:	f007 ff81 	bl	800dae8 <HAL_TIM_PWM_ConfigChannel>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005bec:	f7fe fef8 	bl	80049e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005c12:	1d3b      	adds	r3, r7, #4
 8005c14:	4619      	mov	r1, r3
 8005c16:	4807      	ldr	r0, [pc, #28]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005c18:	f008 fe5c 	bl	800e8d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8005c22:	f7fe fedd 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005c26:	4803      	ldr	r0, [pc, #12]	; (8005c34 <MX_TIM15_Init+0x140>)
 8005c28:	f000 fa32 	bl	8006090 <HAL_TIM_MspPostInit>

}
 8005c2c:	bf00      	nop
 8005c2e:	3768      	adds	r7, #104	; 0x68
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	240010e0 	.word	0x240010e0
 8005c38:	40014000 	.word	0x40014000

08005c3c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005c40:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <MX_TIM16_Init+0x44>)
 8005c42:	4a10      	ldr	r2, [pc, #64]	; (8005c84 <MX_TIM16_Init+0x48>)
 8005c44:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8005c46:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <MX_TIM16_Init+0x44>)
 8005c48:	22ef      	movs	r2, #239	; 0xef
 8005c4a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c4c:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <MX_TIM16_Init+0x44>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8005c52:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <MX_TIM16_Init+0x44>)
 8005c54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c58:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <MX_TIM16_Init+0x44>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <MX_TIM16_Init+0x44>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c66:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <MX_TIM16_Init+0x44>)
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005c6c:	4804      	ldr	r0, [pc, #16]	; (8005c80 <MX_TIM16_Init+0x44>)
 8005c6e:	f007 fa7a 	bl	800d166 <HAL_TIM_Base_Init>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005c78:	f7fe feb2 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005c7c:	bf00      	nop
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	2400112c 	.word	0x2400112c
 8005c84:	40014400 	.word	0x40014400

08005c88 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005c8c:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <MX_TIM17_Init+0x48>)
 8005c8e:	4a11      	ldr	r2, [pc, #68]	; (8005cd4 <MX_TIM17_Init+0x4c>)
 8005c90:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2400-1;
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <MX_TIM17_Init+0x48>)
 8005c94:	f640 125f 	movw	r2, #2399	; 0x95f
 8005c98:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <MX_TIM17_Init+0x48>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2000-1;
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <MX_TIM17_Init+0x48>)
 8005ca2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8005ca6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <MX_TIM17_Init+0x48>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005cae:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <MX_TIM17_Init+0x48>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <MX_TIM17_Init+0x48>)
 8005cb6:	2280      	movs	r2, #128	; 0x80
 8005cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005cba:	4805      	ldr	r0, [pc, #20]	; (8005cd0 <MX_TIM17_Init+0x48>)
 8005cbc:	f007 fa53 	bl	800d166 <HAL_TIM_Base_Init>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8005cc6:	f7fe fe8b 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005cca:	bf00      	nop
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	24001178 	.word	0x24001178
 8005cd4:	40014800 	.word	0x40014800

08005cd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b090      	sub	sp, #64	; 0x40
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4aa8      	ldr	r2, [pc, #672]	; (8005f88 <HAL_TIM_Base_MspInit+0x2b0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10f      	bne.n	8005d0a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005cea:	4ba8      	ldr	r3, [pc, #672]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cf0:	4aa6      	ldr	r2, [pc, #664]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
 8005cf6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005cfa:	4ba4      	ldr	r3, [pc, #656]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005d08:	e13a      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d12:	d10f      	bne.n	8005d34 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d14:	4b9d      	ldr	r3, [pc, #628]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d1a:	4a9c      	ldr	r2, [pc, #624]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d24:	4b99      	ldr	r3, [pc, #612]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d32:	e125      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a95      	ldr	r2, [pc, #596]	; (8005f90 <HAL_TIM_Base_MspInit+0x2b8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10f      	bne.n	8005d5e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d3e:	4b93      	ldr	r3, [pc, #588]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d44:	4a91      	ldr	r2, [pc, #580]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d46:	f043 0302 	orr.w	r3, r3, #2
 8005d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d4e:	4b8f      	ldr	r3, [pc, #572]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	637b      	str	r3, [r7, #52]	; 0x34
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d5c:	e110      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a8c      	ldr	r2, [pc, #560]	; (8005f94 <HAL_TIM_Base_MspInit+0x2bc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d10f      	bne.n	8005d88 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d68:	4b88      	ldr	r3, [pc, #544]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d6e:	4a87      	ldr	r2, [pc, #540]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d70:	f043 0304 	orr.w	r3, r3, #4
 8005d74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d78:	4b84      	ldr	r3, [pc, #528]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	633b      	str	r3, [r7, #48]	; 0x30
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005d86:	e0fb      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a82      	ldr	r2, [pc, #520]	; (8005f98 <HAL_TIM_Base_MspInit+0x2c0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d117      	bne.n	8005dc2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005d92:	4b7e      	ldr	r3, [pc, #504]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d98:	4a7c      	ldr	r2, [pc, #496]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005d9a:	f043 0308 	orr.w	r3, r3, #8
 8005d9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005da2:	4b7a      	ldr	r3, [pc, #488]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005db0:	2200      	movs	r2, #0
 8005db2:	2100      	movs	r1, #0
 8005db4:	2032      	movs	r0, #50	; 0x32
 8005db6:	f001 f838 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005dba:	2032      	movs	r0, #50	; 0x32
 8005dbc:	f001 f84f 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 8005dc0:	e0de      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a75      	ldr	r2, [pc, #468]	; (8005f9c <HAL_TIM_Base_MspInit+0x2c4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d117      	bne.n	8005dfc <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005dcc:	4b6f      	ldr	r3, [pc, #444]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dd2:	4a6e      	ldr	r2, [pc, #440]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005dd4:	f043 0310 	orr.w	r3, r3, #16
 8005dd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ddc:	4b6b      	ldr	r3, [pc, #428]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005dea:	2200      	movs	r2, #0
 8005dec:	2100      	movs	r1, #0
 8005dee:	2036      	movs	r0, #54	; 0x36
 8005df0:	f001 f81b 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005df4:	2036      	movs	r0, #54	; 0x36
 8005df6:	f001 f832 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 8005dfa:	e0c1      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a67      	ldr	r2, [pc, #412]	; (8005fa0 <HAL_TIM_Base_MspInit+0x2c8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d117      	bne.n	8005e36 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005e06:	4b61      	ldr	r3, [pc, #388]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e0c:	4a5f      	ldr	r2, [pc, #380]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005e0e:	f043 0320 	orr.w	r3, r3, #32
 8005e12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e16:	4b5d      	ldr	r3, [pc, #372]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005e24:	2200      	movs	r2, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	2037      	movs	r0, #55	; 0x37
 8005e2a:	f000 fffe 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e2e:	2037      	movs	r0, #55	; 0x37
 8005e30:	f001 f815 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 8005e34:	e0a4      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a5a      	ldr	r2, [pc, #360]	; (8005fa4 <HAL_TIM_Base_MspInit+0x2cc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d117      	bne.n	8005e70 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005e40:	4b52      	ldr	r3, [pc, #328]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e46:	4a51      	ldr	r2, [pc, #324]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e50:	4b4e      	ldr	r3, [pc, #312]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	623b      	str	r3, [r7, #32]
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2100      	movs	r1, #0
 8005e62:	202b      	movs	r0, #43	; 0x2b
 8005e64:	f000 ffe1 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005e68:	202b      	movs	r0, #43	; 0x2b
 8005e6a:	f000 fff8 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 8005e6e:	e087      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a4c      	ldr	r2, [pc, #304]	; (8005fa8 <HAL_TIM_Base_MspInit+0x2d0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d117      	bne.n	8005eaa <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005e7a:	4b44      	ldr	r3, [pc, #272]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e80:	4a42      	ldr	r2, [pc, #264]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e8a:	4b40      	ldr	r3, [pc, #256]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	61fb      	str	r3, [r7, #28]
 8005e96:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	202c      	movs	r0, #44	; 0x2c
 8005e9e:	f000 ffc4 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005ea2:	202c      	movs	r0, #44	; 0x2c
 8005ea4:	f000 ffdb 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 8005ea8:	e06a      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3f      	ldr	r2, [pc, #252]	; (8005fac <HAL_TIM_Base_MspInit+0x2d4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d117      	bne.n	8005ee4 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005eb4:	4b35      	ldr	r3, [pc, #212]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eba:	4a34      	ldr	r2, [pc, #208]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ec4:	4b31      	ldr	r3, [pc, #196]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	202d      	movs	r0, #45	; 0x2d
 8005ed8:	f000 ffa7 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005edc:	202d      	movs	r0, #45	; 0x2d
 8005ede:	f000 ffbe 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 8005ee2:	e04d      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a31      	ldr	r2, [pc, #196]	; (8005fb0 <HAL_TIM_Base_MspInit+0x2d8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d10f      	bne.n	8005f0e <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005eee:	4b27      	ldr	r3, [pc, #156]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ef4:	4a25      	ldr	r2, [pc, #148]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005efa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005efe:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	697b      	ldr	r3, [r7, #20]
}
 8005f0c:	e038      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a28      	ldr	r2, [pc, #160]	; (8005fb4 <HAL_TIM_Base_MspInit+0x2dc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d117      	bne.n	8005f48 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005f18:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f1e:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005f28:	4b18      	ldr	r3, [pc, #96]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005f36:	2200      	movs	r2, #0
 8005f38:	2100      	movs	r1, #0
 8005f3a:	2075      	movs	r0, #117	; 0x75
 8005f3c:	f000 ff75 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005f40:	2075      	movs	r0, #117	; 0x75
 8005f42:	f000 ff8c 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 8005f46:	e01b      	b.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1a      	ldr	r2, [pc, #104]	; (8005fb8 <HAL_TIM_Base_MspInit+0x2e0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d116      	bne.n	8005f80 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005f52:	4b0e      	ldr	r3, [pc, #56]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f58:	4a0c      	ldr	r2, [pc, #48]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <HAL_TIM_Base_MspInit+0x2b4>)
 8005f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005f70:	2200      	movs	r2, #0
 8005f72:	2100      	movs	r1, #0
 8005f74:	2076      	movs	r0, #118	; 0x76
 8005f76:	f000 ff58 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005f7a:	2076      	movs	r0, #118	; 0x76
 8005f7c:	f000 ff6f 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 8005f80:	bf00      	nop
 8005f82:	3740      	adds	r7, #64	; 0x40
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40010000 	.word	0x40010000
 8005f8c:	58024400 	.word	0x58024400
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00
 8005f9c:	40001000 	.word	0x40001000
 8005fa0:	40001400 	.word	0x40001400
 8005fa4:	40001800 	.word	0x40001800
 8005fa8:	40001c00 	.word	0x40001c00
 8005fac:	40002000 	.word	0x40002000
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	; 0x28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fc4:	f107 0314 	add.w	r3, r7, #20
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	605a      	str	r2, [r3, #4]
 8005fce:	609a      	str	r2, [r3, #8]
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2a      	ldr	r2, [pc, #168]	; (8006084 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d14d      	bne.n	800607a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005fde:	4b2a      	ldr	r3, [pc, #168]	; (8006088 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fe4:	4a28      	ldr	r2, [pc, #160]	; (8006088 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005fe6:	f043 0302 	orr.w	r3, r3, #2
 8005fea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005fee:	4b26      	ldr	r3, [pc, #152]	; (8006088 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ffc:	4b22      	ldr	r3, [pc, #136]	; (8006088 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006002:	4a21      	ldr	r2, [pc, #132]	; (8006088 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006004:	f043 0304 	orr.w	r3, r3, #4
 8006008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800600c:	4b1e      	ldr	r3, [pc, #120]	; (8006088 <HAL_TIM_Encoder_MspInit+0xcc>)
 800600e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800601a:	23c0      	movs	r3, #192	; 0xc0
 800601c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601e:	2302      	movs	r3, #2
 8006020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006026:	2300      	movs	r3, #0
 8006028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800602a:	2303      	movs	r3, #3
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800602e:	f107 0314 	add.w	r3, r7, #20
 8006032:	4619      	mov	r1, r3
 8006034:	4815      	ldr	r0, [pc, #84]	; (800608c <HAL_TIM_Encoder_MspInit+0xd0>)
 8006036:	f003 ff73 	bl	8009f20 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800603a:	2200      	movs	r2, #0
 800603c:	2100      	movs	r1, #0
 800603e:	202b      	movs	r0, #43	; 0x2b
 8006040:	f000 fef3 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8006044:	202b      	movs	r0, #43	; 0x2b
 8006046:	f000 ff0a 	bl	8006e5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800604a:	2200      	movs	r2, #0
 800604c:	2100      	movs	r1, #0
 800604e:	202c      	movs	r0, #44	; 0x2c
 8006050:	f000 feeb 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006054:	202c      	movs	r0, #44	; 0x2c
 8006056:	f000 ff02 	bl	8006e5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800605a:	2200      	movs	r2, #0
 800605c:	2100      	movs	r1, #0
 800605e:	202d      	movs	r0, #45	; 0x2d
 8006060:	f000 fee3 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006064:	202d      	movs	r0, #45	; 0x2d
 8006066:	f000 fefa 	bl	8006e5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800606a:	2200      	movs	r2, #0
 800606c:	2100      	movs	r1, #0
 800606e:	202e      	movs	r0, #46	; 0x2e
 8006070:	f000 fedb 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8006074:	202e      	movs	r0, #46	; 0x2e
 8006076:	f000 fef2 	bl	8006e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800607a:	bf00      	nop
 800607c:	3728      	adds	r7, #40	; 0x28
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40010400 	.word	0x40010400
 8006088:	58024400 	.word	0x58024400
 800608c:	58020800 	.word	0x58020800

08006090 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08c      	sub	sp, #48	; 0x30
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006098:	f107 031c 	add.w	r3, r7, #28
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	609a      	str	r2, [r3, #8]
 80060a4:	60da      	str	r2, [r3, #12]
 80060a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a5e      	ldr	r2, [pc, #376]	; (8006228 <HAL_TIM_MspPostInit+0x198>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d120      	bne.n	80060f4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80060b2:	4b5e      	ldr	r3, [pc, #376]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 80060b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060b8:	4a5c      	ldr	r2, [pc, #368]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 80060ba:	f043 0310 	orr.w	r3, r3, #16
 80060be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060c2:	4b5a      	ldr	r3, [pc, #360]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 80060c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80060d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d6:	2302      	movs	r3, #2
 80060d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060de:	2300      	movs	r3, #0
 80060e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80060e2:	2301      	movs	r3, #1
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80060e6:	f107 031c 	add.w	r3, r7, #28
 80060ea:	4619      	mov	r1, r3
 80060ec:	4850      	ldr	r0, [pc, #320]	; (8006230 <HAL_TIM_MspPostInit+0x1a0>)
 80060ee:	f003 ff17 	bl	8009f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80060f2:	e094      	b.n	800621e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fc:	d120      	bne.n	8006140 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060fe:	4b4b      	ldr	r3, [pc, #300]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 8006100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006104:	4a49      	ldr	r2, [pc, #292]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 8006106:	f043 0302 	orr.w	r3, r3, #2
 800610a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800610e:	4b47      	ldr	r3, [pc, #284]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 8006110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 800611c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006122:	2302      	movs	r3, #2
 8006124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006126:	2300      	movs	r3, #0
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800612a:	2300      	movs	r3, #0
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800612e:	2301      	movs	r3, #1
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8006132:	f107 031c 	add.w	r3, r7, #28
 8006136:	4619      	mov	r1, r3
 8006138:	483e      	ldr	r0, [pc, #248]	; (8006234 <HAL_TIM_MspPostInit+0x1a4>)
 800613a:	f003 fef1 	bl	8009f20 <HAL_GPIO_Init>
}
 800613e:	e06e      	b.n	800621e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a3c      	ldr	r2, [pc, #240]	; (8006238 <HAL_TIM_MspPostInit+0x1a8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d11f      	bne.n	800618a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800614a:	4b38      	ldr	r3, [pc, #224]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 800614c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006150:	4a36      	ldr	r2, [pc, #216]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800615a:	4b34      	ldr	r3, [pc, #208]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 800615c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8006168:	2340      	movs	r3, #64	; 0x40
 800616a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800616c:	2302      	movs	r3, #2
 800616e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006170:	2300      	movs	r3, #0
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006174:	2300      	movs	r3, #0
 8006176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006178:	2302      	movs	r3, #2
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 800617c:	f107 031c 	add.w	r3, r7, #28
 8006180:	4619      	mov	r1, r3
 8006182:	482e      	ldr	r0, [pc, #184]	; (800623c <HAL_TIM_MspPostInit+0x1ac>)
 8006184:	f003 fecc 	bl	8009f20 <HAL_GPIO_Init>
}
 8006188:	e049      	b.n	800621e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2c      	ldr	r2, [pc, #176]	; (8006240 <HAL_TIM_MspPostInit+0x1b0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d120      	bne.n	80061d6 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006194:	4b25      	ldr	r3, [pc, #148]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 8006196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800619a:	4a24      	ldr	r2, [pc, #144]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 800619c:	f043 0302 	orr.w	r3, r3, #2
 80061a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061a4:	4b21      	ldr	r3, [pc, #132]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 80061a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80061b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b8:	2302      	movs	r3, #2
 80061ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061c0:	2300      	movs	r3, #0
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80061c4:	2302      	movs	r3, #2
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80061c8:	f107 031c 	add.w	r3, r7, #28
 80061cc:	4619      	mov	r1, r3
 80061ce:	4819      	ldr	r0, [pc, #100]	; (8006234 <HAL_TIM_MspPostInit+0x1a4>)
 80061d0:	f003 fea6 	bl	8009f20 <HAL_GPIO_Init>
}
 80061d4:	e023      	b.n	800621e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1a      	ldr	r2, [pc, #104]	; (8006244 <HAL_TIM_MspPostInit+0x1b4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d11e      	bne.n	800621e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80061e0:	4b12      	ldr	r3, [pc, #72]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 80061e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061e6:	4a11      	ldr	r2, [pc, #68]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 80061e8:	f043 0310 	orr.w	r3, r3, #16
 80061ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061f0:	4b0e      	ldr	r3, [pc, #56]	; (800622c <HAL_TIM_MspPostInit+0x19c>)
 80061f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	60bb      	str	r3, [r7, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 80061fe:	2340      	movs	r3, #64	; 0x40
 8006200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006202:	2302      	movs	r3, #2
 8006204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006206:	2300      	movs	r3, #0
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800620a:	2300      	movs	r3, #0
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800620e:	2304      	movs	r3, #4
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8006212:	f107 031c 	add.w	r3, r7, #28
 8006216:	4619      	mov	r1, r3
 8006218:	4805      	ldr	r0, [pc, #20]	; (8006230 <HAL_TIM_MspPostInit+0x1a0>)
 800621a:	f003 fe81 	bl	8009f20 <HAL_GPIO_Init>
}
 800621e:	bf00      	nop
 8006220:	3730      	adds	r7, #48	; 0x30
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40010000 	.word	0x40010000
 800622c:	58024400 	.word	0x58024400
 8006230:	58021000 	.word	0x58021000
 8006234:	58020400 	.word	0x58020400
 8006238:	40000400 	.word	0x40000400
 800623c:	58020000 	.word	0x58020000
 8006240:	40000800 	.word	0x40000800
 8006244:	40014000 	.word	0x40014000

08006248 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800624c:	4b25      	ldr	r3, [pc, #148]	; (80062e4 <MX_UART4_Init+0x9c>)
 800624e:	4a26      	ldr	r2, [pc, #152]	; (80062e8 <MX_UART4_Init+0xa0>)
 8006250:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8006252:	4b24      	ldr	r3, [pc, #144]	; (80062e4 <MX_UART4_Init+0x9c>)
 8006254:	4a25      	ldr	r2, [pc, #148]	; (80062ec <MX_UART4_Init+0xa4>)
 8006256:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006258:	4b22      	ldr	r3, [pc, #136]	; (80062e4 <MX_UART4_Init+0x9c>)
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800625e:	4b21      	ldr	r3, [pc, #132]	; (80062e4 <MX_UART4_Init+0x9c>)
 8006260:	2200      	movs	r2, #0
 8006262:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006264:	4b1f      	ldr	r3, [pc, #124]	; (80062e4 <MX_UART4_Init+0x9c>)
 8006266:	2200      	movs	r2, #0
 8006268:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800626a:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <MX_UART4_Init+0x9c>)
 800626c:	220c      	movs	r2, #12
 800626e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006270:	4b1c      	ldr	r3, [pc, #112]	; (80062e4 <MX_UART4_Init+0x9c>)
 8006272:	2200      	movs	r2, #0
 8006274:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006276:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <MX_UART4_Init+0x9c>)
 8006278:	2200      	movs	r2, #0
 800627a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800627c:	4b19      	ldr	r3, [pc, #100]	; (80062e4 <MX_UART4_Init+0x9c>)
 800627e:	2200      	movs	r2, #0
 8006280:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006282:	4b18      	ldr	r3, [pc, #96]	; (80062e4 <MX_UART4_Init+0x9c>)
 8006284:	2200      	movs	r2, #0
 8006286:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8006288:	4b16      	ldr	r3, [pc, #88]	; (80062e4 <MX_UART4_Init+0x9c>)
 800628a:	2208      	movs	r2, #8
 800628c:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <MX_UART4_Init+0x9c>)
 8006290:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006296:	4813      	ldr	r0, [pc, #76]	; (80062e4 <MX_UART4_Init+0x9c>)
 8006298:	f008 fbb8 	bl	800ea0c <HAL_UART_Init>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80062a2:	f7fe fb9d 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80062a6:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80062aa:	480e      	ldr	r0, [pc, #56]	; (80062e4 <MX_UART4_Init+0x9c>)
 80062ac:	f00a fc51 	bl	8010b52 <HAL_UARTEx_SetTxFifoThreshold>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <MX_UART4_Init+0x72>
  {
    Error_Handler();
 80062b6:	f7fe fb93 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80062ba:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80062be:	4809      	ldr	r0, [pc, #36]	; (80062e4 <MX_UART4_Init+0x9c>)
 80062c0:	f00a fc85 	bl	8010bce <HAL_UARTEx_SetRxFifoThreshold>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <MX_UART4_Init+0x86>
  {
    Error_Handler();
 80062ca:	f7fe fb89 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80062ce:	4805      	ldr	r0, [pc, #20]	; (80062e4 <MX_UART4_Init+0x9c>)
 80062d0:	f00a fbcb 	bl	8010a6a <HAL_UARTEx_EnableFifoMode>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <MX_UART4_Init+0x96>
  {
    Error_Handler();
 80062da:	f7fe fb81 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80062de:	bf00      	nop
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	240011c4 	.word	0x240011c4
 80062e8:	40004c00 	.word	0x40004c00
 80062ec:	001e8480 	.word	0x001e8480

080062f0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80062f4:	4b23      	ldr	r3, [pc, #140]	; (8006384 <MX_UART7_Init+0x94>)
 80062f6:	4a24      	ldr	r2, [pc, #144]	; (8006388 <MX_UART7_Init+0x98>)
 80062f8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80062fa:	4b22      	ldr	r3, [pc, #136]	; (8006384 <MX_UART7_Init+0x94>)
 80062fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006300:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006302:	4b20      	ldr	r3, [pc, #128]	; (8006384 <MX_UART7_Init+0x94>)
 8006304:	2200      	movs	r2, #0
 8006306:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006308:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <MX_UART7_Init+0x94>)
 800630a:	2200      	movs	r2, #0
 800630c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <MX_UART7_Init+0x94>)
 8006310:	2200      	movs	r2, #0
 8006312:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006314:	4b1b      	ldr	r3, [pc, #108]	; (8006384 <MX_UART7_Init+0x94>)
 8006316:	220c      	movs	r2, #12
 8006318:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800631a:	4b1a      	ldr	r3, [pc, #104]	; (8006384 <MX_UART7_Init+0x94>)
 800631c:	2200      	movs	r2, #0
 800631e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006320:	4b18      	ldr	r3, [pc, #96]	; (8006384 <MX_UART7_Init+0x94>)
 8006322:	2200      	movs	r2, #0
 8006324:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006326:	4b17      	ldr	r3, [pc, #92]	; (8006384 <MX_UART7_Init+0x94>)
 8006328:	2200      	movs	r2, #0
 800632a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800632c:	4b15      	ldr	r3, [pc, #84]	; (8006384 <MX_UART7_Init+0x94>)
 800632e:	2200      	movs	r2, #0
 8006330:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <MX_UART7_Init+0x94>)
 8006334:	2200      	movs	r2, #0
 8006336:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006338:	4812      	ldr	r0, [pc, #72]	; (8006384 <MX_UART7_Init+0x94>)
 800633a:	f008 fb67 	bl	800ea0c <HAL_UART_Init>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8006344:	f7fe fb4c 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8006348:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800634c:	480d      	ldr	r0, [pc, #52]	; (8006384 <MX_UART7_Init+0x94>)
 800634e:	f00a fc00 	bl	8010b52 <HAL_UARTEx_SetTxFifoThreshold>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8006358:	f7fe fb42 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800635c:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8006360:	4808      	ldr	r0, [pc, #32]	; (8006384 <MX_UART7_Init+0x94>)
 8006362:	f00a fc34 	bl	8010bce <HAL_UARTEx_SetRxFifoThreshold>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 800636c:	f7fe fb38 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8006370:	4804      	ldr	r0, [pc, #16]	; (8006384 <MX_UART7_Init+0x94>)
 8006372:	f00a fb7a 	bl	8010a6a <HAL_UARTEx_EnableFifoMode>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 800637c:	f7fe fb30 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8006380:	bf00      	nop
 8006382:	bd80      	pop	{r7, pc}
 8006384:	24001254 	.word	0x24001254
 8006388:	40007800 	.word	0x40007800

0800638c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006390:	4b22      	ldr	r3, [pc, #136]	; (800641c <MX_USART2_UART_Init+0x90>)
 8006392:	4a23      	ldr	r2, [pc, #140]	; (8006420 <MX_USART2_UART_Init+0x94>)
 8006394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006396:	4b21      	ldr	r3, [pc, #132]	; (800641c <MX_USART2_UART_Init+0x90>)
 8006398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800639c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800639e:	4b1f      	ldr	r3, [pc, #124]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80063a4:	4b1d      	ldr	r3, [pc, #116]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80063aa:	4b1c      	ldr	r3, [pc, #112]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80063b0:	4b1a      	ldr	r3, [pc, #104]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063b2:	220c      	movs	r2, #12
 80063b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063b6:	4b19      	ldr	r3, [pc, #100]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80063bc:	4b17      	ldr	r3, [pc, #92]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063be:	2200      	movs	r2, #0
 80063c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063c2:	4b16      	ldr	r3, [pc, #88]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80063c8:	4b14      	ldr	r3, [pc, #80]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063ce:	4b13      	ldr	r3, [pc, #76]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80063d4:	4811      	ldr	r0, [pc, #68]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063d6:	f008 fb19 	bl	800ea0c <HAL_UART_Init>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80063e0:	f7fe fafe 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063e4:	2100      	movs	r1, #0
 80063e6:	480d      	ldr	r0, [pc, #52]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063e8:	f00a fbb3 	bl	8010b52 <HAL_UARTEx_SetTxFifoThreshold>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80063f2:	f7fe faf5 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063f6:	2100      	movs	r1, #0
 80063f8:	4808      	ldr	r0, [pc, #32]	; (800641c <MX_USART2_UART_Init+0x90>)
 80063fa:	f00a fbe8 	bl	8010bce <HAL_UARTEx_SetRxFifoThreshold>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006404:	f7fe faec 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006408:	4804      	ldr	r0, [pc, #16]	; (800641c <MX_USART2_UART_Init+0x90>)
 800640a:	f00a fb69 	bl	8010ae0 <HAL_UARTEx_DisableFifoMode>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006414:	f7fe fae4 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006418:	bf00      	nop
 800641a:	bd80      	pop	{r7, pc}
 800641c:	240012e4 	.word	0x240012e4
 8006420:	40004400 	.word	0x40004400

08006424 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006428:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 800642a:	4a23      	ldr	r2, [pc, #140]	; (80064b8 <MX_USART3_UART_Init+0x94>)
 800642c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800642e:	4b21      	ldr	r3, [pc, #132]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 8006430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006434:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006436:	4b1f      	ldr	r3, [pc, #124]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 8006438:	2200      	movs	r2, #0
 800643a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800643c:	4b1d      	ldr	r3, [pc, #116]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 800643e:	2200      	movs	r2, #0
 8006440:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006442:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 8006444:	2200      	movs	r2, #0
 8006446:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006448:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 800644a:	220c      	movs	r2, #12
 800644c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800644e:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 8006450:	2200      	movs	r2, #0
 8006452:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006454:	4b17      	ldr	r3, [pc, #92]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 8006456:	2200      	movs	r2, #0
 8006458:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800645a:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 800645c:	2200      	movs	r2, #0
 800645e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006460:	4b14      	ldr	r3, [pc, #80]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 8006462:	2200      	movs	r2, #0
 8006464:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006466:	4b13      	ldr	r3, [pc, #76]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 8006468:	2200      	movs	r2, #0
 800646a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800646c:	4811      	ldr	r0, [pc, #68]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 800646e:	f008 facd 	bl	800ea0c <HAL_UART_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006478:	f7fe fab2 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800647c:	2100      	movs	r1, #0
 800647e:	480d      	ldr	r0, [pc, #52]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 8006480:	f00a fb67 	bl	8010b52 <HAL_UARTEx_SetTxFifoThreshold>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800648a:	f7fe faa9 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800648e:	2100      	movs	r1, #0
 8006490:	4808      	ldr	r0, [pc, #32]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 8006492:	f00a fb9c 	bl	8010bce <HAL_UARTEx_SetRxFifoThreshold>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800649c:	f7fe faa0 	bl	80049e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80064a0:	4804      	ldr	r0, [pc, #16]	; (80064b4 <MX_USART3_UART_Init+0x90>)
 80064a2:	f00a fb1d 	bl	8010ae0 <HAL_UARTEx_DisableFifoMode>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80064ac:	f7fe fa98 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80064b0:	bf00      	nop
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	24001374 	.word	0x24001374
 80064b8:	40004800 	.word	0x40004800

080064bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b0be      	sub	sp, #248	; 0xf8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	609a      	str	r2, [r3, #8]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80064d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064d8:	22bc      	movs	r2, #188	; 0xbc
 80064da:	2100      	movs	r1, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	f00b ff87 	bl	80123f0 <memset>
  if(uartHandle->Instance==UART4)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4aa1      	ldr	r2, [pc, #644]	; (800676c <HAL_UART_MspInit+0x2b0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	f040 80b7 	bne.w	800665c <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80064ee:	2302      	movs	r3, #2
 80064f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064fc:	4618      	mov	r0, r3
 80064fe:	f004 fee7 	bl	800b2d0 <HAL_RCCEx_PeriphCLKConfig>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006508:	f7fe fa6a 	bl	80049e0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800650c:	4b98      	ldr	r3, [pc, #608]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 800650e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006512:	4a97      	ldr	r2, [pc, #604]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 8006514:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006518:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800651c:	4b94      	ldr	r3, [pc, #592]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 800651e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800652a:	4b91      	ldr	r3, [pc, #580]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 800652c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006530:	4a8f      	ldr	r2, [pc, #572]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 8006532:	f043 0308 	orr.w	r3, r3, #8
 8006536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800653a:	4b8d      	ldr	r3, [pc, #564]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 800653c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	623b      	str	r3, [r7, #32]
 8006546:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006548:	2303      	movs	r3, #3
 800654a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800654e:	2302      	movs	r3, #2
 8006550:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006554:	2300      	movs	r3, #0
 8006556:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800655a:	2300      	movs	r3, #0
 800655c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006560:	2308      	movs	r3, #8
 8006562:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006566:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800656a:	4619      	mov	r1, r3
 800656c:	4881      	ldr	r0, [pc, #516]	; (8006774 <HAL_UART_MspInit+0x2b8>)
 800656e:	f003 fcd7 	bl	8009f20 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8006572:	4b81      	ldr	r3, [pc, #516]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 8006574:	4a81      	ldr	r2, [pc, #516]	; (800677c <HAL_UART_MspInit+0x2c0>)
 8006576:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8006578:	4b7f      	ldr	r3, [pc, #508]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 800657a:	223f      	movs	r2, #63	; 0x3f
 800657c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800657e:	4b7e      	ldr	r3, [pc, #504]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 8006580:	2200      	movs	r2, #0
 8006582:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006584:	4b7c      	ldr	r3, [pc, #496]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 8006586:	2200      	movs	r2, #0
 8006588:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800658a:	4b7b      	ldr	r3, [pc, #492]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 800658c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006590:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006592:	4b79      	ldr	r3, [pc, #484]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 8006594:	2200      	movs	r2, #0
 8006596:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006598:	4b77      	ldr	r3, [pc, #476]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 800659a:	2200      	movs	r2, #0
 800659c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800659e:	4b76      	ldr	r3, [pc, #472]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065a4:	4b74      	ldr	r3, [pc, #464]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80065aa:	4b73      	ldr	r3, [pc, #460]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 80065ac:	2204      	movs	r2, #4
 80065ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80065b0:	4b71      	ldr	r3, [pc, #452]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 80065b2:	2203      	movs	r2, #3
 80065b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80065b6:	4b70      	ldr	r3, [pc, #448]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80065bc:	4b6e      	ldr	r3, [pc, #440]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 80065be:	2200      	movs	r2, #0
 80065c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80065c2:	486d      	ldr	r0, [pc, #436]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 80065c4:	f000 fe70 	bl	80072a8 <HAL_DMA_Init>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80065ce:	f7fe fa07 	bl	80049e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a68      	ldr	r2, [pc, #416]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 80065d6:	67da      	str	r2, [r3, #124]	; 0x7c
 80065d8:	4a67      	ldr	r2, [pc, #412]	; (8006778 <HAL_UART_MspInit+0x2bc>)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80065de:	4b68      	ldr	r3, [pc, #416]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 80065e0:	4a68      	ldr	r2, [pc, #416]	; (8006784 <HAL_UART_MspInit+0x2c8>)
 80065e2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80065e4:	4b66      	ldr	r3, [pc, #408]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 80065e6:	2240      	movs	r2, #64	; 0x40
 80065e8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065ea:	4b65      	ldr	r3, [pc, #404]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 80065ec:	2240      	movs	r2, #64	; 0x40
 80065ee:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065f0:	4b63      	ldr	r3, [pc, #396]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065f6:	4b62      	ldr	r3, [pc, #392]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 80065f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065fc:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065fe:	4b60      	ldr	r3, [pc, #384]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 8006600:	2200      	movs	r2, #0
 8006602:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006604:	4b5e      	ldr	r3, [pc, #376]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 8006606:	2200      	movs	r2, #0
 8006608:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800660a:	4b5d      	ldr	r3, [pc, #372]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 800660c:	2200      	movs	r2, #0
 800660e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006610:	4b5b      	ldr	r3, [pc, #364]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 8006612:	2200      	movs	r2, #0
 8006614:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006616:	4b5a      	ldr	r3, [pc, #360]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 8006618:	2204      	movs	r2, #4
 800661a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800661c:	4b58      	ldr	r3, [pc, #352]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 800661e:	2203      	movs	r2, #3
 8006620:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006622:	4b57      	ldr	r3, [pc, #348]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 8006624:	2200      	movs	r2, #0
 8006626:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006628:	4b55      	ldr	r3, [pc, #340]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 800662a:	2200      	movs	r2, #0
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800662e:	4854      	ldr	r0, [pc, #336]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 8006630:	f000 fe3a 	bl	80072a8 <HAL_DMA_Init>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800663a:	f7fe f9d1 	bl	80049e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a4f      	ldr	r2, [pc, #316]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 8006642:	679a      	str	r2, [r3, #120]	; 0x78
 8006644:	4a4e      	ldr	r2, [pc, #312]	; (8006780 <HAL_UART_MspInit+0x2c4>)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800664a:	2200      	movs	r2, #0
 800664c:	2100      	movs	r1, #0
 800664e:	2034      	movs	r0, #52	; 0x34
 8006650:	f000 fbeb 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006654:	2034      	movs	r0, #52	; 0x34
 8006656:	f000 fc02 	bl	8006e5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800665a:	e20d      	b.n	8006a78 <HAL_UART_MspInit+0x5bc>
  else if(uartHandle->Instance==UART7)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a49      	ldr	r2, [pc, #292]	; (8006788 <HAL_UART_MspInit+0x2cc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	f040 8098 	bne.w	8006798 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006668:	2302      	movs	r3, #2
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800666c:	2300      	movs	r3, #0
 800666e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006676:	4618      	mov	r0, r3
 8006678:	f004 fe2a 	bl	800b2d0 <HAL_RCCEx_PeriphCLKConfig>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8006682:	f7fe f9ad 	bl	80049e0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006686:	4b3a      	ldr	r3, [pc, #232]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 8006688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800668c:	4a38      	ldr	r2, [pc, #224]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 800668e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006692:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006696:	4b36      	ldr	r3, [pc, #216]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 8006698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800669c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80066a4:	4b32      	ldr	r3, [pc, #200]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 80066a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066aa:	4a31      	ldr	r2, [pc, #196]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 80066ac:	f043 0310 	orr.w	r3, r3, #16
 80066b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066b4:	4b2e      	ldr	r3, [pc, #184]	; (8006770 <HAL_UART_MspInit+0x2b4>)
 80066b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80066c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80066c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ca:	2302      	movs	r3, #2
 80066cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d6:	2300      	movs	r3, #0
 80066d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80066dc:	2307      	movs	r3, #7
 80066de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80066e6:	4619      	mov	r1, r3
 80066e8:	4828      	ldr	r0, [pc, #160]	; (800678c <HAL_UART_MspInit+0x2d0>)
 80066ea:	f003 fc19 	bl	8009f20 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80066ee:	4b28      	ldr	r3, [pc, #160]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 80066f0:	4a28      	ldr	r2, [pc, #160]	; (8006794 <HAL_UART_MspInit+0x2d8>)
 80066f2:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80066f4:	4b26      	ldr	r3, [pc, #152]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 80066f6:	2250      	movs	r2, #80	; 0x50
 80066f8:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80066fa:	4b25      	ldr	r3, [pc, #148]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 80066fc:	2240      	movs	r2, #64	; 0x40
 80066fe:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006700:	4b23      	ldr	r3, [pc, #140]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 8006702:	2200      	movs	r2, #0
 8006704:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006706:	4b22      	ldr	r3, [pc, #136]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 8006708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800670c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800670e:	4b20      	ldr	r3, [pc, #128]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 8006710:	2200      	movs	r2, #0
 8006712:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006714:	4b1e      	ldr	r3, [pc, #120]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 8006716:	2200      	movs	r2, #0
 8006718:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800671a:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 800671c:	2200      	movs	r2, #0
 800671e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006720:	4b1b      	ldr	r3, [pc, #108]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 8006722:	2200      	movs	r2, #0
 8006724:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006726:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 8006728:	2204      	movs	r2, #4
 800672a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800672c:	4b18      	ldr	r3, [pc, #96]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 800672e:	2203      	movs	r2, #3
 8006730:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006732:	4b17      	ldr	r3, [pc, #92]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 8006734:	2200      	movs	r2, #0
 8006736:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006738:	4b15      	ldr	r3, [pc, #84]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 800673a:	2200      	movs	r2, #0
 800673c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800673e:	4814      	ldr	r0, [pc, #80]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 8006740:	f000 fdb2 	bl	80072a8 <HAL_DMA_Init>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <HAL_UART_MspInit+0x292>
      Error_Handler();
 800674a:	f7fe f949 	bl	80049e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a0f      	ldr	r2, [pc, #60]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 8006752:	679a      	str	r2, [r3, #120]	; 0x78
 8006754:	4a0e      	ldr	r2, [pc, #56]	; (8006790 <HAL_UART_MspInit+0x2d4>)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800675a:	2200      	movs	r2, #0
 800675c:	2100      	movs	r1, #0
 800675e:	2052      	movs	r0, #82	; 0x52
 8006760:	f000 fb63 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006764:	2052      	movs	r0, #82	; 0x52
 8006766:	f000 fb7a 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 800676a:	e185      	b.n	8006a78 <HAL_UART_MspInit+0x5bc>
 800676c:	40004c00 	.word	0x40004c00
 8006770:	58024400 	.word	0x58024400
 8006774:	58020c00 	.word	0x58020c00
 8006778:	24001404 	.word	0x24001404
 800677c:	40020058 	.word	0x40020058
 8006780:	2400147c 	.word	0x2400147c
 8006784:	40020070 	.word	0x40020070
 8006788:	40007800 	.word	0x40007800
 800678c:	58021000 	.word	0x58021000
 8006790:	240014f4 	.word	0x240014f4
 8006794:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a54      	ldr	r2, [pc, #336]	; (80068f0 <HAL_UART_MspInit+0x434>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	f040 80b4 	bne.w	800690c <HAL_UART_MspInit+0x450>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80067a4:	2302      	movs	r3, #2
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80067a8:	2300      	movs	r3, #0
 80067aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067b2:	4618      	mov	r0, r3
 80067b4:	f004 fd8c 	bl	800b2d0 <HAL_RCCEx_PeriphCLKConfig>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_UART_MspInit+0x306>
      Error_Handler();
 80067be:	f7fe f90f 	bl	80049e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80067c2:	4b4c      	ldr	r3, [pc, #304]	; (80068f4 <HAL_UART_MspInit+0x438>)
 80067c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067c8:	4a4a      	ldr	r2, [pc, #296]	; (80068f4 <HAL_UART_MspInit+0x438>)
 80067ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80067d2:	4b48      	ldr	r3, [pc, #288]	; (80068f4 <HAL_UART_MspInit+0x438>)
 80067d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80067e0:	4b44      	ldr	r3, [pc, #272]	; (80068f4 <HAL_UART_MspInit+0x438>)
 80067e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067e6:	4a43      	ldr	r2, [pc, #268]	; (80068f4 <HAL_UART_MspInit+0x438>)
 80067e8:	f043 0308 	orr.w	r3, r3, #8
 80067ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80067f0:	4b40      	ldr	r3, [pc, #256]	; (80068f4 <HAL_UART_MspInit+0x438>)
 80067f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80067fe:	2360      	movs	r3, #96	; 0x60
 8006800:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006804:	2302      	movs	r3, #2
 8006806:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800680a:	2300      	movs	r3, #0
 800680c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006810:	2300      	movs	r3, #0
 8006812:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006816:	2307      	movs	r3, #7
 8006818:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800681c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006820:	4619      	mov	r1, r3
 8006822:	4835      	ldr	r0, [pc, #212]	; (80068f8 <HAL_UART_MspInit+0x43c>)
 8006824:	f003 fb7c 	bl	8009f20 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006828:	4b34      	ldr	r3, [pc, #208]	; (80068fc <HAL_UART_MspInit+0x440>)
 800682a:	4a35      	ldr	r2, [pc, #212]	; (8006900 <HAL_UART_MspInit+0x444>)
 800682c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800682e:	4b33      	ldr	r3, [pc, #204]	; (80068fc <HAL_UART_MspInit+0x440>)
 8006830:	222b      	movs	r2, #43	; 0x2b
 8006832:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006834:	4b31      	ldr	r3, [pc, #196]	; (80068fc <HAL_UART_MspInit+0x440>)
 8006836:	2200      	movs	r2, #0
 8006838:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800683a:	4b30      	ldr	r3, [pc, #192]	; (80068fc <HAL_UART_MspInit+0x440>)
 800683c:	2200      	movs	r2, #0
 800683e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006840:	4b2e      	ldr	r3, [pc, #184]	; (80068fc <HAL_UART_MspInit+0x440>)
 8006842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006846:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006848:	4b2c      	ldr	r3, [pc, #176]	; (80068fc <HAL_UART_MspInit+0x440>)
 800684a:	2200      	movs	r2, #0
 800684c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800684e:	4b2b      	ldr	r3, [pc, #172]	; (80068fc <HAL_UART_MspInit+0x440>)
 8006850:	2200      	movs	r2, #0
 8006852:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006854:	4b29      	ldr	r3, [pc, #164]	; (80068fc <HAL_UART_MspInit+0x440>)
 8006856:	2200      	movs	r2, #0
 8006858:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800685a:	4b28      	ldr	r3, [pc, #160]	; (80068fc <HAL_UART_MspInit+0x440>)
 800685c:	2200      	movs	r2, #0
 800685e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006860:	4b26      	ldr	r3, [pc, #152]	; (80068fc <HAL_UART_MspInit+0x440>)
 8006862:	2200      	movs	r2, #0
 8006864:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006866:	4825      	ldr	r0, [pc, #148]	; (80068fc <HAL_UART_MspInit+0x440>)
 8006868:	f000 fd1e 	bl	80072a8 <HAL_DMA_Init>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8006872:	f7fe f8b5 	bl	80049e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a20      	ldr	r2, [pc, #128]	; (80068fc <HAL_UART_MspInit+0x440>)
 800687a:	67da      	str	r2, [r3, #124]	; 0x7c
 800687c:	4a1f      	ldr	r2, [pc, #124]	; (80068fc <HAL_UART_MspInit+0x440>)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006882:	4b20      	ldr	r3, [pc, #128]	; (8006904 <HAL_UART_MspInit+0x448>)
 8006884:	4a20      	ldr	r2, [pc, #128]	; (8006908 <HAL_UART_MspInit+0x44c>)
 8006886:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006888:	4b1e      	ldr	r3, [pc, #120]	; (8006904 <HAL_UART_MspInit+0x448>)
 800688a:	222c      	movs	r2, #44	; 0x2c
 800688c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <HAL_UART_MspInit+0x448>)
 8006890:	2240      	movs	r2, #64	; 0x40
 8006892:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006894:	4b1b      	ldr	r3, [pc, #108]	; (8006904 <HAL_UART_MspInit+0x448>)
 8006896:	2200      	movs	r2, #0
 8006898:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800689a:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <HAL_UART_MspInit+0x448>)
 800689c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068a2:	4b18      	ldr	r3, [pc, #96]	; (8006904 <HAL_UART_MspInit+0x448>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068a8:	4b16      	ldr	r3, [pc, #88]	; (8006904 <HAL_UART_MspInit+0x448>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80068ae:	4b15      	ldr	r3, [pc, #84]	; (8006904 <HAL_UART_MspInit+0x448>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80068b4:	4b13      	ldr	r3, [pc, #76]	; (8006904 <HAL_UART_MspInit+0x448>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <HAL_UART_MspInit+0x448>)
 80068bc:	2200      	movs	r2, #0
 80068be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80068c0:	4810      	ldr	r0, [pc, #64]	; (8006904 <HAL_UART_MspInit+0x448>)
 80068c2:	f000 fcf1 	bl	80072a8 <HAL_DMA_Init>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <HAL_UART_MspInit+0x414>
      Error_Handler();
 80068cc:	f7fe f888 	bl	80049e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a0c      	ldr	r2, [pc, #48]	; (8006904 <HAL_UART_MspInit+0x448>)
 80068d4:	679a      	str	r2, [r3, #120]	; 0x78
 80068d6:	4a0b      	ldr	r2, [pc, #44]	; (8006904 <HAL_UART_MspInit+0x448>)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80068dc:	2200      	movs	r2, #0
 80068de:	2100      	movs	r1, #0
 80068e0:	2026      	movs	r0, #38	; 0x26
 80068e2:	f000 faa2 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80068e6:	2026      	movs	r0, #38	; 0x26
 80068e8:	f000 fab9 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 80068ec:	e0c4      	b.n	8006a78 <HAL_UART_MspInit+0x5bc>
 80068ee:	bf00      	nop
 80068f0:	40004400 	.word	0x40004400
 80068f4:	58024400 	.word	0x58024400
 80068f8:	58020c00 	.word	0x58020c00
 80068fc:	2400156c 	.word	0x2400156c
 8006900:	40020088 	.word	0x40020088
 8006904:	240015e4 	.word	0x240015e4
 8006908:	400200a0 	.word	0x400200a0
  else if(uartHandle->Instance==USART3)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a5b      	ldr	r2, [pc, #364]	; (8006a80 <HAL_UART_MspInit+0x5c4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	f040 80b0 	bne.w	8006a78 <HAL_UART_MspInit+0x5bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006918:	2302      	movs	r3, #2
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800691c:	2300      	movs	r3, #0
 800691e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006926:	4618      	mov	r0, r3
 8006928:	f004 fcd2 	bl	800b2d0 <HAL_RCCEx_PeriphCLKConfig>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_UART_MspInit+0x47a>
      Error_Handler();
 8006932:	f7fe f855 	bl	80049e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006936:	4b53      	ldr	r3, [pc, #332]	; (8006a84 <HAL_UART_MspInit+0x5c8>)
 8006938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800693c:	4a51      	ldr	r2, [pc, #324]	; (8006a84 <HAL_UART_MspInit+0x5c8>)
 800693e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006942:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006946:	4b4f      	ldr	r3, [pc, #316]	; (8006a84 <HAL_UART_MspInit+0x5c8>)
 8006948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800694c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006954:	4b4b      	ldr	r3, [pc, #300]	; (8006a84 <HAL_UART_MspInit+0x5c8>)
 8006956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800695a:	4a4a      	ldr	r2, [pc, #296]	; (8006a84 <HAL_UART_MspInit+0x5c8>)
 800695c:	f043 0308 	orr.w	r3, r3, #8
 8006960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006964:	4b47      	ldr	r3, [pc, #284]	; (8006a84 <HAL_UART_MspInit+0x5c8>)
 8006966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800697a:	2302      	movs	r3, #2
 800697c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006980:	2300      	movs	r3, #0
 8006982:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006986:	2300      	movs	r3, #0
 8006988:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800698c:	2307      	movs	r3, #7
 800698e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006992:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006996:	4619      	mov	r1, r3
 8006998:	483b      	ldr	r0, [pc, #236]	; (8006a88 <HAL_UART_MspInit+0x5cc>)
 800699a:	f003 fac1 	bl	8009f20 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800699e:	4b3b      	ldr	r3, [pc, #236]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069a0:	4a3b      	ldr	r2, [pc, #236]	; (8006a90 <HAL_UART_MspInit+0x5d4>)
 80069a2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80069a4:	4b39      	ldr	r3, [pc, #228]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069a6:	222d      	movs	r2, #45	; 0x2d
 80069a8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069aa:	4b38      	ldr	r3, [pc, #224]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069b0:	4b36      	ldr	r3, [pc, #216]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069b6:	4b35      	ldr	r3, [pc, #212]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069be:	4b33      	ldr	r3, [pc, #204]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069c4:	4b31      	ldr	r3, [pc, #196]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80069ca:	4b30      	ldr	r3, [pc, #192]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80069d0:	4b2e      	ldr	r3, [pc, #184]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069d6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069d8:	4b2c      	ldr	r3, [pc, #176]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069da:	2200      	movs	r2, #0
 80069dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80069de:	482b      	ldr	r0, [pc, #172]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069e0:	f000 fc62 	bl	80072a8 <HAL_DMA_Init>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_UART_MspInit+0x532>
      Error_Handler();
 80069ea:	f7fd fff9 	bl	80049e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a26      	ldr	r2, [pc, #152]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80069f4:	4a25      	ldr	r2, [pc, #148]	; (8006a8c <HAL_UART_MspInit+0x5d0>)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80069fa:	4b26      	ldr	r3, [pc, #152]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 80069fc:	4a26      	ldr	r2, [pc, #152]	; (8006a98 <HAL_UART_MspInit+0x5dc>)
 80069fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006a00:	4b24      	ldr	r3, [pc, #144]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a02:	222e      	movs	r2, #46	; 0x2e
 8006a04:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a06:	4b23      	ldr	r3, [pc, #140]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a08:	2240      	movs	r2, #64	; 0x40
 8006a0a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a0c:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a12:	4b20      	ldr	r3, [pc, #128]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a18:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a1a:	4b1e      	ldr	r3, [pc, #120]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a20:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006a26:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a2c:	4b19      	ldr	r3, [pc, #100]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a32:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a34:	4b17      	ldr	r3, [pc, #92]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a36:	2204      	movs	r2, #4
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a3a:	4b16      	ldr	r3, [pc, #88]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006a40:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a46:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006a4c:	4811      	ldr	r0, [pc, #68]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a4e:	f000 fc2b 	bl	80072a8 <HAL_DMA_Init>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <HAL_UART_MspInit+0x5a0>
      Error_Handler();
 8006a58:	f7fd ffc2 	bl	80049e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a0d      	ldr	r2, [pc, #52]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a60:	679a      	str	r2, [r3, #120]	; 0x78
 8006a62:	4a0c      	ldr	r2, [pc, #48]	; (8006a94 <HAL_UART_MspInit+0x5d8>)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	2027      	movs	r0, #39	; 0x27
 8006a6e:	f000 f9dc 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006a72:	2027      	movs	r0, #39	; 0x27
 8006a74:	f000 f9f3 	bl	8006e5e <HAL_NVIC_EnableIRQ>
}
 8006a78:	bf00      	nop
 8006a7a:	37f8      	adds	r7, #248	; 0xf8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40004800 	.word	0x40004800
 8006a84:	58024400 	.word	0x58024400
 8006a88:	58020c00 	.word	0x58020c00
 8006a8c:	2400165c 	.word	0x2400165c
 8006a90:	40020028 	.word	0x40020028
 8006a94:	240016d4 	.word	0x240016d4
 8006a98:	40020040 	.word	0x40020040

08006a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ad4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006aa0:	f7fe fbf0 	bl	8005284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006aa4:	480c      	ldr	r0, [pc, #48]	; (8006ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006aa6:	490d      	ldr	r1, [pc, #52]	; (8006adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006aa8:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006aac:	e002      	b.n	8006ab4 <LoopCopyDataInit>

08006aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ab2:	3304      	adds	r3, #4

08006ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ab8:	d3f9      	bcc.n	8006aae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006aba:	4a0a      	ldr	r2, [pc, #40]	; (8006ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006abc:	4c0a      	ldr	r4, [pc, #40]	; (8006ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ac0:	e001      	b.n	8006ac6 <LoopFillZerobss>

08006ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ac4:	3204      	adds	r2, #4

08006ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ac8:	d3fb      	bcc.n	8006ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006aca:	f00b fc6d 	bl	80123a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ace:	f7fd fc13 	bl	80042f8 <main>
  bx  lr
 8006ad2:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006ad4:	24001d60 	.word	0x24001d60
  ldr r0, =_sdata
 8006ad8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006adc:	24000418 	.word	0x24000418
  ldr r2, =_sidata
 8006ae0:	08016c1c 	.word	0x08016c1c
  ldr r2, =_sbss
 8006ae4:	24000418 	.word	0x24000418
  ldr r4, =_ebss
 8006ae8:	24001760 	.word	0x24001760

08006aec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006aec:	e7fe      	b.n	8006aec <ADC3_IRQHandler>
	...

08006af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006af6:	2003      	movs	r0, #3
 8006af8:	f000 f98c 	bl	8006e14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006afc:	f004 fa12 	bl	800af24 <HAL_RCC_GetSysClockFreq>
 8006b00:	4602      	mov	r2, r0
 8006b02:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <HAL_Init+0x68>)
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	0a1b      	lsrs	r3, r3, #8
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	4913      	ldr	r1, [pc, #76]	; (8006b5c <HAL_Init+0x6c>)
 8006b0e:	5ccb      	ldrb	r3, [r1, r3]
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	fa22 f303 	lsr.w	r3, r2, r3
 8006b18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b1a:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <HAL_Init+0x68>)
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	4a0e      	ldr	r2, [pc, #56]	; (8006b5c <HAL_Init+0x6c>)
 8006b24:	5cd3      	ldrb	r3, [r2, r3]
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b30:	4a0b      	ldr	r2, [pc, #44]	; (8006b60 <HAL_Init+0x70>)
 8006b32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b34:	4a0b      	ldr	r2, [pc, #44]	; (8006b64 <HAL_Init+0x74>)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	f000 f814 	bl	8006b68 <HAL_InitTick>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e002      	b.n	8006b50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006b4a:	f7fe f97f 	bl	8004e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	08014d20 	.word	0x08014d20
 8006b60:	2400023c 	.word	0x2400023c
 8006b64:	24000238 	.word	0x24000238

08006b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006b70:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <HAL_InitTick+0x60>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e021      	b.n	8006bc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006b7c:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <HAL_InitTick+0x64>)
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <HAL_InitTick+0x60>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	4619      	mov	r1, r3
 8006b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f971 	bl	8006e7a <HAL_SYSTICK_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e00e      	b.n	8006bc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b0f      	cmp	r3, #15
 8006ba6:	d80a      	bhi.n	8006bbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ba8:	2200      	movs	r2, #0
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bb0:	f000 f93b 	bl	8006e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bb4:	4a06      	ldr	r2, [pc, #24]	; (8006bd0 <HAL_InitTick+0x68>)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e000      	b.n	8006bc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	24000244 	.word	0x24000244
 8006bcc:	24000238 	.word	0x24000238
 8006bd0:	24000240 	.word	0x24000240

08006bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006bd8:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <HAL_IncTick+0x20>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_IncTick+0x24>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4413      	add	r3, r2
 8006be4:	4a04      	ldr	r2, [pc, #16]	; (8006bf8 <HAL_IncTick+0x24>)
 8006be6:	6013      	str	r3, [r2, #0]
}
 8006be8:	bf00      	nop
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	24000244 	.word	0x24000244
 8006bf8:	2400174c 	.word	0x2400174c

08006bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8006c00:	4b03      	ldr	r3, [pc, #12]	; (8006c10 <HAL_GetTick+0x14>)
 8006c02:	681b      	ldr	r3, [r3, #0]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	2400174c 	.word	0x2400174c

08006c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c1c:	f7ff ffee 	bl	8006bfc <HAL_GetTick>
 8006c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c2c:	d005      	beq.n	8006c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c2e:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <HAL_Delay+0x44>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c3a:	bf00      	nop
 8006c3c:	f7ff ffde 	bl	8006bfc <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d8f7      	bhi.n	8006c3c <HAL_Delay+0x28>
  {
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	24000244 	.word	0x24000244

08006c5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006c60:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <HAL_GetREVID+0x14>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	0c1b      	lsrs	r3, r3, #16
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	5c001000 	.word	0x5c001000

08006c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c90:	4013      	ands	r3, r2
 8006c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ca2:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	60d3      	str	r3, [r2, #12]
}
 8006ca8:	bf00      	nop
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	e000ed00 	.word	0xe000ed00
 8006cb8:	05fa0000 	.word	0x05fa0000

08006cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cc0:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	0a1b      	lsrs	r3, r3, #8
 8006cc6:	f003 0307 	and.w	r3, r3, #7
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	e000ed00 	.word	0xe000ed00

08006cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	db0b      	blt.n	8006d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	f003 021f 	and.w	r2, r3, #31
 8006cf0:	4907      	ldr	r1, [pc, #28]	; (8006d10 <__NVIC_EnableIRQ+0x38>)
 8006cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8006cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	e000e100 	.word	0xe000e100

08006d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	6039      	str	r1, [r7, #0]
 8006d1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	db0a      	blt.n	8006d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	490c      	ldr	r1, [pc, #48]	; (8006d60 <__NVIC_SetPriority+0x4c>)
 8006d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d32:	0112      	lsls	r2, r2, #4
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	440b      	add	r3, r1
 8006d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d3c:	e00a      	b.n	8006d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	4908      	ldr	r1, [pc, #32]	; (8006d64 <__NVIC_SetPriority+0x50>)
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	3b04      	subs	r3, #4
 8006d4c:	0112      	lsls	r2, r2, #4
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	440b      	add	r3, r1
 8006d52:	761a      	strb	r2, [r3, #24]
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	e000e100 	.word	0xe000e100
 8006d64:	e000ed00 	.word	0xe000ed00

08006d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b089      	sub	sp, #36	; 0x24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f1c3 0307 	rsb	r3, r3, #7
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	bf28      	it	cs
 8006d86:	2304      	movcs	r3, #4
 8006d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	2b06      	cmp	r3, #6
 8006d90:	d902      	bls.n	8006d98 <NVIC_EncodePriority+0x30>
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	3b03      	subs	r3, #3
 8006d96:	e000      	b.n	8006d9a <NVIC_EncodePriority+0x32>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43da      	mvns	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	401a      	ands	r2, r3
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dba:	43d9      	mvns	r1, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dc0:	4313      	orrs	r3, r2
         );
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3724      	adds	r7, #36	; 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
	...

08006dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006de0:	d301      	bcc.n	8006de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006de2:	2301      	movs	r3, #1
 8006de4:	e00f      	b.n	8006e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006de6:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <SysTick_Config+0x40>)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dee:	210f      	movs	r1, #15
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006df4:	f7ff ff8e 	bl	8006d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <SysTick_Config+0x40>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006dfe:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <SysTick_Config+0x40>)
 8006e00:	2207      	movs	r2, #7
 8006e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	e000e010 	.word	0xe000e010

08006e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff ff29 	bl	8006c74 <__NVIC_SetPriorityGrouping>
}
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b086      	sub	sp, #24
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	4603      	mov	r3, r0
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
 8006e36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e38:	f7ff ff40 	bl	8006cbc <__NVIC_GetPriorityGrouping>
 8006e3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	6978      	ldr	r0, [r7, #20]
 8006e44:	f7ff ff90 	bl	8006d68 <NVIC_EncodePriority>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff ff5f 	bl	8006d14 <__NVIC_SetPriority>
}
 8006e56:	bf00      	nop
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	4603      	mov	r3, r0
 8006e66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff ff33 	bl	8006cd8 <__NVIC_EnableIRQ>
}
 8006e72:	bf00      	nop
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff ffa4 	bl	8006dd0 <SysTick_Config>
 8006e88:	4603      	mov	r3, r0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006e96:	f000 f802 	bl	8006e9e <HAL_SYSTICK_Callback>
}
 8006e9a:	bf00      	nop
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006ea2:	bf00      	nop
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e054      	b.n	8006f68 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	7f5b      	ldrb	r3, [r3, #29]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d105      	bne.n	8006ed4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fb f9f0 	bl	80022b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	791b      	ldrb	r3, [r3, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10c      	bne.n	8006efc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a22      	ldr	r2, [pc, #136]	; (8006f70 <HAL_CRC_Init+0xc4>)
 8006ee8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0218 	bic.w	r2, r2, #24
 8006ef8:	609a      	str	r2, [r3, #8]
 8006efa:	e00c      	b.n	8006f16 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6899      	ldr	r1, [r3, #8]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f948 	bl	800719c <HAL_CRCEx_Polynomial_Set>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e028      	b.n	8006f68 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	795b      	ldrb	r3, [r3, #5]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d105      	bne.n	8006f2a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f26:	611a      	str	r2, [r3, #16]
 8006f28:	e004      	b.n	8006f34 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6912      	ldr	r2, [r2, #16]
 8006f32:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	695a      	ldr	r2, [r3, #20]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	04c11db7 	.word	0x04c11db7

08006f74 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2202      	movs	r2, #2
 8006f88:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0201 	orr.w	r2, r2, #1
 8006f98:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d006      	beq.n	8006fb0 <HAL_CRC_Calculate+0x3c>
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d829      	bhi.n	8006ffa <HAL_CRC_Calculate+0x86>
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d019      	beq.n	8006fde <HAL_CRC_Calculate+0x6a>
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d01e      	beq.n	8006fec <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006fae:	e024      	b.n	8006ffa <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e00a      	b.n	8006fcc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	441a      	add	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d3f0      	bcc.n	8006fb6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	613b      	str	r3, [r7, #16]
      break;
 8006fdc:	e00e      	b.n	8006ffc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f812 	bl	800700c <CRC_Handle_8>
 8006fe8:	6138      	str	r0, [r7, #16]
      break;
 8006fea:	e007      	b.n	8006ffc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f899 	bl	8007128 <CRC_Handle_16>
 8006ff6:	6138      	str	r0, [r7, #16]
      break;
 8006ff8:	e000      	b.n	8006ffc <HAL_CRC_Calculate+0x88>
      break;
 8006ffa:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8007002:	693b      	ldr	r3, [r7, #16]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800700c:	b480      	push	{r7}
 800700e:	b089      	sub	sp, #36	; 0x24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007018:	2300      	movs	r3, #0
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	e023      	b.n	8007066 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	4413      	add	r3, r2
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	3301      	adds	r3, #1
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	440b      	add	r3, r1
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007038:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	3302      	adds	r3, #2
 8007040:	68b9      	ldr	r1, [r7, #8]
 8007042:	440b      	add	r3, r1
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007048:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	3303      	adds	r3, #3
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	440b      	add	r3, r1
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800705c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800705e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	3301      	adds	r3, #1
 8007064:	61fb      	str	r3, [r7, #28]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	089b      	lsrs	r3, r3, #2
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	429a      	cmp	r2, r3
 800706e:	d3d6      	bcc.n	800701e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d04d      	beq.n	8007116 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	2b01      	cmp	r3, #1
 8007082:	d107      	bne.n	8007094 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	4413      	add	r3, r2
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d116      	bne.n	80070cc <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	4413      	add	r3, r2
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	b21a      	sxth	r2, r3
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	3301      	adds	r3, #1
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	440b      	add	r3, r1
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	b21b      	sxth	r3, r3
 80070ba:	4313      	orrs	r3, r2
 80070bc:	b21b      	sxth	r3, r3
 80070be:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	8b7a      	ldrh	r2, [r7, #26]
 80070ca:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d11f      	bne.n	8007116 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	4413      	add	r3, r2
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	b21a      	sxth	r2, r3
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	3301      	adds	r3, #1
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	440b      	add	r3, r1
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	b21b      	sxth	r3, r3
 80070f2:	4313      	orrs	r3, r2
 80070f4:	b21b      	sxth	r3, r3
 80070f6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	8b7a      	ldrh	r2, [r7, #26]
 8007102:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	3302      	adds	r3, #2
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	4413      	add	r3, r2
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3724      	adds	r7, #36	; 0x24
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	e013      	b.n	8007162 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	041a      	lsls	r2, r3, #16
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	3302      	adds	r3, #2
 800714c:	68b9      	ldr	r1, [r7, #8]
 800714e:	440b      	add	r3, r1
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	4619      	mov	r1, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3301      	adds	r3, #1
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	429a      	cmp	r2, r3
 800716a:	d3e6      	bcc.n	800713a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	4413      	add	r3, r2
 8007184:	881a      	ldrh	r2, [r3, #0]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
}
 8007190:	4618      	mov	r0, r3
 8007192:	371c      	adds	r7, #28
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80071ac:	231f      	movs	r3, #31
 80071ae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80071b0:	bf00      	nop
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1e5a      	subs	r2, r3, #1
 80071b6:	613a      	str	r2, [r7, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <HAL_CRCEx_Polynomial_Set+0x34>
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f003 031f 	and.w	r3, r3, #31
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f0      	beq.n	80071b2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b18      	cmp	r3, #24
 80071d4:	d846      	bhi.n	8007264 <HAL_CRCEx_Polynomial_Set+0xc8>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <HAL_CRCEx_Polynomial_Set+0x40>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	0800726b 	.word	0x0800726b
 80071e0:	08007265 	.word	0x08007265
 80071e4:	08007265 	.word	0x08007265
 80071e8:	08007265 	.word	0x08007265
 80071ec:	08007265 	.word	0x08007265
 80071f0:	08007265 	.word	0x08007265
 80071f4:	08007265 	.word	0x08007265
 80071f8:	08007265 	.word	0x08007265
 80071fc:	08007259 	.word	0x08007259
 8007200:	08007265 	.word	0x08007265
 8007204:	08007265 	.word	0x08007265
 8007208:	08007265 	.word	0x08007265
 800720c:	08007265 	.word	0x08007265
 8007210:	08007265 	.word	0x08007265
 8007214:	08007265 	.word	0x08007265
 8007218:	08007265 	.word	0x08007265
 800721c:	0800724d 	.word	0x0800724d
 8007220:	08007265 	.word	0x08007265
 8007224:	08007265 	.word	0x08007265
 8007228:	08007265 	.word	0x08007265
 800722c:	08007265 	.word	0x08007265
 8007230:	08007265 	.word	0x08007265
 8007234:	08007265 	.word	0x08007265
 8007238:	08007265 	.word	0x08007265
 800723c:	08007241 	.word	0x08007241
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2b06      	cmp	r3, #6
 8007244:	d913      	bls.n	800726e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800724a:	e010      	b.n	800726e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b07      	cmp	r3, #7
 8007250:	d90f      	bls.n	8007272 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007256:	e00c      	b.n	8007272 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d90b      	bls.n	8007276 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007262:	e008      	b.n	8007276 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
      break;
 8007268:	e006      	b.n	8007278 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800726a:	bf00      	nop
 800726c:	e004      	b.n	8007278 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800726e:	bf00      	nop
 8007270:	e002      	b.n	8007278 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007272:	bf00      	nop
 8007274:	e000      	b.n	8007278 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007276:	bf00      	nop
  }
  if (status == HAL_OK)
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10d      	bne.n	800729a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f023 0118 	bic.w	r1, r3, #24
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	430a      	orrs	r2, r1
 8007298:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800729a:	7dfb      	ldrb	r3, [r7, #23]
}
 800729c:	4618      	mov	r0, r3
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80072b0:	f7ff fca4 	bl	8006bfc <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e316      	b.n	80078ee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a66      	ldr	r2, [pc, #408]	; (8007460 <HAL_DMA_Init+0x1b8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d04a      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a65      	ldr	r2, [pc, #404]	; (8007464 <HAL_DMA_Init+0x1bc>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d045      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a63      	ldr	r2, [pc, #396]	; (8007468 <HAL_DMA_Init+0x1c0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d040      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a62      	ldr	r2, [pc, #392]	; (800746c <HAL_DMA_Init+0x1c4>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d03b      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a60      	ldr	r2, [pc, #384]	; (8007470 <HAL_DMA_Init+0x1c8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d036      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a5f      	ldr	r2, [pc, #380]	; (8007474 <HAL_DMA_Init+0x1cc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d031      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a5d      	ldr	r2, [pc, #372]	; (8007478 <HAL_DMA_Init+0x1d0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d02c      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a5c      	ldr	r2, [pc, #368]	; (800747c <HAL_DMA_Init+0x1d4>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d027      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a5a      	ldr	r2, [pc, #360]	; (8007480 <HAL_DMA_Init+0x1d8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d022      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a59      	ldr	r2, [pc, #356]	; (8007484 <HAL_DMA_Init+0x1dc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d01d      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a57      	ldr	r2, [pc, #348]	; (8007488 <HAL_DMA_Init+0x1e0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d018      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a56      	ldr	r2, [pc, #344]	; (800748c <HAL_DMA_Init+0x1e4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d013      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a54      	ldr	r2, [pc, #336]	; (8007490 <HAL_DMA_Init+0x1e8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00e      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a53      	ldr	r2, [pc, #332]	; (8007494 <HAL_DMA_Init+0x1ec>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d009      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a51      	ldr	r2, [pc, #324]	; (8007498 <HAL_DMA_Init+0x1f0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d004      	beq.n	8007360 <HAL_DMA_Init+0xb8>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a50      	ldr	r2, [pc, #320]	; (800749c <HAL_DMA_Init+0x1f4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d101      	bne.n	8007364 <HAL_DMA_Init+0xbc>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <HAL_DMA_Init+0xbe>
 8007364:	2300      	movs	r3, #0
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 813b 	beq.w	80075e2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a37      	ldr	r2, [pc, #220]	; (8007460 <HAL_DMA_Init+0x1b8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d04a      	beq.n	800741c <HAL_DMA_Init+0x174>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a36      	ldr	r2, [pc, #216]	; (8007464 <HAL_DMA_Init+0x1bc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d045      	beq.n	800741c <HAL_DMA_Init+0x174>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a34      	ldr	r2, [pc, #208]	; (8007468 <HAL_DMA_Init+0x1c0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d040      	beq.n	800741c <HAL_DMA_Init+0x174>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a33      	ldr	r2, [pc, #204]	; (800746c <HAL_DMA_Init+0x1c4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d03b      	beq.n	800741c <HAL_DMA_Init+0x174>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a31      	ldr	r2, [pc, #196]	; (8007470 <HAL_DMA_Init+0x1c8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d036      	beq.n	800741c <HAL_DMA_Init+0x174>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a30      	ldr	r2, [pc, #192]	; (8007474 <HAL_DMA_Init+0x1cc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d031      	beq.n	800741c <HAL_DMA_Init+0x174>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a2e      	ldr	r2, [pc, #184]	; (8007478 <HAL_DMA_Init+0x1d0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d02c      	beq.n	800741c <HAL_DMA_Init+0x174>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a2d      	ldr	r2, [pc, #180]	; (800747c <HAL_DMA_Init+0x1d4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d027      	beq.n	800741c <HAL_DMA_Init+0x174>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a2b      	ldr	r2, [pc, #172]	; (8007480 <HAL_DMA_Init+0x1d8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d022      	beq.n	800741c <HAL_DMA_Init+0x174>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a2a      	ldr	r2, [pc, #168]	; (8007484 <HAL_DMA_Init+0x1dc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d01d      	beq.n	800741c <HAL_DMA_Init+0x174>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a28      	ldr	r2, [pc, #160]	; (8007488 <HAL_DMA_Init+0x1e0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d018      	beq.n	800741c <HAL_DMA_Init+0x174>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a27      	ldr	r2, [pc, #156]	; (800748c <HAL_DMA_Init+0x1e4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d013      	beq.n	800741c <HAL_DMA_Init+0x174>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a25      	ldr	r2, [pc, #148]	; (8007490 <HAL_DMA_Init+0x1e8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00e      	beq.n	800741c <HAL_DMA_Init+0x174>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a24      	ldr	r2, [pc, #144]	; (8007494 <HAL_DMA_Init+0x1ec>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d009      	beq.n	800741c <HAL_DMA_Init+0x174>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a22      	ldr	r2, [pc, #136]	; (8007498 <HAL_DMA_Init+0x1f0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d004      	beq.n	800741c <HAL_DMA_Init+0x174>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a21      	ldr	r2, [pc, #132]	; (800749c <HAL_DMA_Init+0x1f4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d108      	bne.n	800742e <HAL_DMA_Init+0x186>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0201 	bic.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	e007      	b.n	800743e <HAL_DMA_Init+0x196>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0201 	bic.w	r2, r2, #1
 800743c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800743e:	e02f      	b.n	80074a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007440:	f7ff fbdc 	bl	8006bfc <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b05      	cmp	r3, #5
 800744c:	d928      	bls.n	80074a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2203      	movs	r2, #3
 8007458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e246      	b.n	80078ee <HAL_DMA_Init+0x646>
 8007460:	40020010 	.word	0x40020010
 8007464:	40020028 	.word	0x40020028
 8007468:	40020040 	.word	0x40020040
 800746c:	40020058 	.word	0x40020058
 8007470:	40020070 	.word	0x40020070
 8007474:	40020088 	.word	0x40020088
 8007478:	400200a0 	.word	0x400200a0
 800747c:	400200b8 	.word	0x400200b8
 8007480:	40020410 	.word	0x40020410
 8007484:	40020428 	.word	0x40020428
 8007488:	40020440 	.word	0x40020440
 800748c:	40020458 	.word	0x40020458
 8007490:	40020470 	.word	0x40020470
 8007494:	40020488 	.word	0x40020488
 8007498:	400204a0 	.word	0x400204a0
 800749c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1c8      	bne.n	8007440 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	4b83      	ldr	r3, [pc, #524]	; (80076c8 <HAL_DMA_Init+0x420>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80074c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d107      	bne.n	8007504 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	4313      	orrs	r3, r2
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	4313      	orrs	r3, r2
 8007502:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007504:	4b71      	ldr	r3, [pc, #452]	; (80076cc <HAL_DMA_Init+0x424>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	4b71      	ldr	r3, [pc, #452]	; (80076d0 <HAL_DMA_Init+0x428>)
 800750a:	4013      	ands	r3, r2
 800750c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007510:	d328      	bcc.n	8007564 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b28      	cmp	r3, #40	; 0x28
 8007518:	d903      	bls.n	8007522 <HAL_DMA_Init+0x27a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b2e      	cmp	r3, #46	; 0x2e
 8007520:	d917      	bls.n	8007552 <HAL_DMA_Init+0x2aa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2b3e      	cmp	r3, #62	; 0x3e
 8007528:	d903      	bls.n	8007532 <HAL_DMA_Init+0x28a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	2b42      	cmp	r3, #66	; 0x42
 8007530:	d90f      	bls.n	8007552 <HAL_DMA_Init+0x2aa>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2b46      	cmp	r3, #70	; 0x46
 8007538:	d903      	bls.n	8007542 <HAL_DMA_Init+0x29a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b48      	cmp	r3, #72	; 0x48
 8007540:	d907      	bls.n	8007552 <HAL_DMA_Init+0x2aa>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b4e      	cmp	r3, #78	; 0x4e
 8007548:	d905      	bls.n	8007556 <HAL_DMA_Init+0x2ae>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2b52      	cmp	r3, #82	; 0x52
 8007550:	d801      	bhi.n	8007556 <HAL_DMA_Init+0x2ae>
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <HAL_DMA_Init+0x2b0>
 8007556:	2300      	movs	r3, #0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007562:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f023 0307 	bic.w	r3, r3, #7
 800757a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	2b04      	cmp	r3, #4
 800758c:	d117      	bne.n	80075be <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00e      	beq.n	80075be <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f002 fb33 	bl	8009c0c <DMA_CheckFifoParam>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2240      	movs	r2, #64	; 0x40
 80075b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e197      	b.n	80078ee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f002 fa6e 	bl	8009aa8 <DMA_CalcBaseAndBitshift>
 80075cc:	4603      	mov	r3, r0
 80075ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	223f      	movs	r2, #63	; 0x3f
 80075da:	409a      	lsls	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	609a      	str	r2, [r3, #8]
 80075e0:	e0cd      	b.n	800777e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a3b      	ldr	r2, [pc, #236]	; (80076d4 <HAL_DMA_Init+0x42c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d022      	beq.n	8007632 <HAL_DMA_Init+0x38a>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a39      	ldr	r2, [pc, #228]	; (80076d8 <HAL_DMA_Init+0x430>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01d      	beq.n	8007632 <HAL_DMA_Init+0x38a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a38      	ldr	r2, [pc, #224]	; (80076dc <HAL_DMA_Init+0x434>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d018      	beq.n	8007632 <HAL_DMA_Init+0x38a>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a36      	ldr	r2, [pc, #216]	; (80076e0 <HAL_DMA_Init+0x438>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <HAL_DMA_Init+0x38a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a35      	ldr	r2, [pc, #212]	; (80076e4 <HAL_DMA_Init+0x43c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00e      	beq.n	8007632 <HAL_DMA_Init+0x38a>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a33      	ldr	r2, [pc, #204]	; (80076e8 <HAL_DMA_Init+0x440>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_DMA_Init+0x38a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a32      	ldr	r2, [pc, #200]	; (80076ec <HAL_DMA_Init+0x444>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_DMA_Init+0x38a>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a30      	ldr	r2, [pc, #192]	; (80076f0 <HAL_DMA_Init+0x448>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d101      	bne.n	8007636 <HAL_DMA_Init+0x38e>
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <HAL_DMA_Init+0x390>
 8007636:	2300      	movs	r3, #0
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8097 	beq.w	800776c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a24      	ldr	r2, [pc, #144]	; (80076d4 <HAL_DMA_Init+0x42c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d021      	beq.n	800768c <HAL_DMA_Init+0x3e4>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a22      	ldr	r2, [pc, #136]	; (80076d8 <HAL_DMA_Init+0x430>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d01c      	beq.n	800768c <HAL_DMA_Init+0x3e4>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a21      	ldr	r2, [pc, #132]	; (80076dc <HAL_DMA_Init+0x434>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d017      	beq.n	800768c <HAL_DMA_Init+0x3e4>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1f      	ldr	r2, [pc, #124]	; (80076e0 <HAL_DMA_Init+0x438>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d012      	beq.n	800768c <HAL_DMA_Init+0x3e4>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1e      	ldr	r2, [pc, #120]	; (80076e4 <HAL_DMA_Init+0x43c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00d      	beq.n	800768c <HAL_DMA_Init+0x3e4>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1c      	ldr	r2, [pc, #112]	; (80076e8 <HAL_DMA_Init+0x440>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d008      	beq.n	800768c <HAL_DMA_Init+0x3e4>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1b      	ldr	r2, [pc, #108]	; (80076ec <HAL_DMA_Init+0x444>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <HAL_DMA_Init+0x3e4>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a19      	ldr	r2, [pc, #100]	; (80076f0 <HAL_DMA_Init+0x448>)
 800768a:	4293      	cmp	r3, r2
 800768c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4b12      	ldr	r3, [pc, #72]	; (80076f4 <HAL_DMA_Init+0x44c>)
 80076aa:	4013      	ands	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	2b40      	cmp	r3, #64	; 0x40
 80076b4:	d020      	beq.n	80076f8 <HAL_DMA_Init+0x450>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b80      	cmp	r3, #128	; 0x80
 80076bc:	d102      	bne.n	80076c4 <HAL_DMA_Init+0x41c>
 80076be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80076c2:	e01a      	b.n	80076fa <HAL_DMA_Init+0x452>
 80076c4:	2300      	movs	r3, #0
 80076c6:	e018      	b.n	80076fa <HAL_DMA_Init+0x452>
 80076c8:	fe10803f 	.word	0xfe10803f
 80076cc:	5c001000 	.word	0x5c001000
 80076d0:	ffff0000 	.word	0xffff0000
 80076d4:	58025408 	.word	0x58025408
 80076d8:	5802541c 	.word	0x5802541c
 80076dc:	58025430 	.word	0x58025430
 80076e0:	58025444 	.word	0x58025444
 80076e4:	58025458 	.word	0x58025458
 80076e8:	5802546c 	.word	0x5802546c
 80076ec:	58025480 	.word	0x58025480
 80076f0:	58025494 	.word	0x58025494
 80076f4:	fffe000f 	.word	0xfffe000f
 80076f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	68d2      	ldr	r2, [r2, #12]
 80076fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007700:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007708:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007710:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007718:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007728:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	4b6e      	ldr	r3, [pc, #440]	; (80078f8 <HAL_DMA_Init+0x650>)
 8007740:	4413      	add	r3, r2
 8007742:	4a6e      	ldr	r2, [pc, #440]	; (80078fc <HAL_DMA_Init+0x654>)
 8007744:	fba2 2303 	umull	r2, r3, r2, r3
 8007748:	091b      	lsrs	r3, r3, #4
 800774a:	009a      	lsls	r2, r3, #2
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f002 f9a9 	bl	8009aa8 <DMA_CalcBaseAndBitshift>
 8007756:	4603      	mov	r3, r0
 8007758:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775e:	f003 031f 	and.w	r3, r3, #31
 8007762:	2201      	movs	r2, #1
 8007764:	409a      	lsls	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	605a      	str	r2, [r3, #4]
 800776a:	e008      	b.n	800777e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2240      	movs	r2, #64	; 0x40
 8007770:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2203      	movs	r2, #3
 8007776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e0b7      	b.n	80078ee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a5f      	ldr	r2, [pc, #380]	; (8007900 <HAL_DMA_Init+0x658>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d072      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a5d      	ldr	r2, [pc, #372]	; (8007904 <HAL_DMA_Init+0x65c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d06d      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a5c      	ldr	r2, [pc, #368]	; (8007908 <HAL_DMA_Init+0x660>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d068      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a5a      	ldr	r2, [pc, #360]	; (800790c <HAL_DMA_Init+0x664>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d063      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a59      	ldr	r2, [pc, #356]	; (8007910 <HAL_DMA_Init+0x668>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d05e      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a57      	ldr	r2, [pc, #348]	; (8007914 <HAL_DMA_Init+0x66c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d059      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a56      	ldr	r2, [pc, #344]	; (8007918 <HAL_DMA_Init+0x670>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d054      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a54      	ldr	r2, [pc, #336]	; (800791c <HAL_DMA_Init+0x674>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d04f      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a53      	ldr	r2, [pc, #332]	; (8007920 <HAL_DMA_Init+0x678>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d04a      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a51      	ldr	r2, [pc, #324]	; (8007924 <HAL_DMA_Init+0x67c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d045      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a50      	ldr	r2, [pc, #320]	; (8007928 <HAL_DMA_Init+0x680>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d040      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a4e      	ldr	r2, [pc, #312]	; (800792c <HAL_DMA_Init+0x684>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d03b      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a4d      	ldr	r2, [pc, #308]	; (8007930 <HAL_DMA_Init+0x688>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d036      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a4b      	ldr	r2, [pc, #300]	; (8007934 <HAL_DMA_Init+0x68c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d031      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a4a      	ldr	r2, [pc, #296]	; (8007938 <HAL_DMA_Init+0x690>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d02c      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a48      	ldr	r2, [pc, #288]	; (800793c <HAL_DMA_Init+0x694>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d027      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a47      	ldr	r2, [pc, #284]	; (8007940 <HAL_DMA_Init+0x698>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d022      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a45      	ldr	r2, [pc, #276]	; (8007944 <HAL_DMA_Init+0x69c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d01d      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a44      	ldr	r2, [pc, #272]	; (8007948 <HAL_DMA_Init+0x6a0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d018      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a42      	ldr	r2, [pc, #264]	; (800794c <HAL_DMA_Init+0x6a4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d013      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a41      	ldr	r2, [pc, #260]	; (8007950 <HAL_DMA_Init+0x6a8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00e      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a3f      	ldr	r2, [pc, #252]	; (8007954 <HAL_DMA_Init+0x6ac>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d009      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a3e      	ldr	r2, [pc, #248]	; (8007958 <HAL_DMA_Init+0x6b0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <HAL_DMA_Init+0x5c6>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a3c      	ldr	r2, [pc, #240]	; (800795c <HAL_DMA_Init+0x6b4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d101      	bne.n	8007872 <HAL_DMA_Init+0x5ca>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <HAL_DMA_Init+0x5cc>
 8007872:	2300      	movs	r3, #0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d032      	beq.n	80078de <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f002 fa43 	bl	8009d04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2b80      	cmp	r3, #128	; 0x80
 8007884:	d102      	bne.n	800788c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80078a0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d010      	beq.n	80078cc <HAL_DMA_Init+0x624>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d80c      	bhi.n	80078cc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f002 fac0 	bl	8009e38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078c8:	605a      	str	r2, [r3, #4]
 80078ca:	e008      	b.n	80078de <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	a7fdabf8 	.word	0xa7fdabf8
 80078fc:	cccccccd 	.word	0xcccccccd
 8007900:	40020010 	.word	0x40020010
 8007904:	40020028 	.word	0x40020028
 8007908:	40020040 	.word	0x40020040
 800790c:	40020058 	.word	0x40020058
 8007910:	40020070 	.word	0x40020070
 8007914:	40020088 	.word	0x40020088
 8007918:	400200a0 	.word	0x400200a0
 800791c:	400200b8 	.word	0x400200b8
 8007920:	40020410 	.word	0x40020410
 8007924:	40020428 	.word	0x40020428
 8007928:	40020440 	.word	0x40020440
 800792c:	40020458 	.word	0x40020458
 8007930:	40020470 	.word	0x40020470
 8007934:	40020488 	.word	0x40020488
 8007938:	400204a0 	.word	0x400204a0
 800793c:	400204b8 	.word	0x400204b8
 8007940:	58025408 	.word	0x58025408
 8007944:	5802541c 	.word	0x5802541c
 8007948:	58025430 	.word	0x58025430
 800794c:	58025444 	.word	0x58025444
 8007950:	58025458 	.word	0x58025458
 8007954:	5802546c 	.word	0x5802546c
 8007958:	58025480 	.word	0x58025480
 800795c:	58025494 	.word	0x58025494

08007960 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e226      	b.n	8007dca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007982:	2b01      	cmp	r3, #1
 8007984:	d101      	bne.n	800798a <HAL_DMA_Start_IT+0x2a>
 8007986:	2302      	movs	r3, #2
 8007988:	e21f      	b.n	8007dca <HAL_DMA_Start_IT+0x46a>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b01      	cmp	r3, #1
 800799c:	f040 820a 	bne.w	8007db4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a68      	ldr	r2, [pc, #416]	; (8007b54 <HAL_DMA_Start_IT+0x1f4>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d04a      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a66      	ldr	r2, [pc, #408]	; (8007b58 <HAL_DMA_Start_IT+0x1f8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d045      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a65      	ldr	r2, [pc, #404]	; (8007b5c <HAL_DMA_Start_IT+0x1fc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d040      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a63      	ldr	r2, [pc, #396]	; (8007b60 <HAL_DMA_Start_IT+0x200>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d03b      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a62      	ldr	r2, [pc, #392]	; (8007b64 <HAL_DMA_Start_IT+0x204>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d036      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a60      	ldr	r2, [pc, #384]	; (8007b68 <HAL_DMA_Start_IT+0x208>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d031      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a5f      	ldr	r2, [pc, #380]	; (8007b6c <HAL_DMA_Start_IT+0x20c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d02c      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a5d      	ldr	r2, [pc, #372]	; (8007b70 <HAL_DMA_Start_IT+0x210>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d027      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a5c      	ldr	r2, [pc, #368]	; (8007b74 <HAL_DMA_Start_IT+0x214>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d022      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a5a      	ldr	r2, [pc, #360]	; (8007b78 <HAL_DMA_Start_IT+0x218>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d01d      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a59      	ldr	r2, [pc, #356]	; (8007b7c <HAL_DMA_Start_IT+0x21c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d018      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a57      	ldr	r2, [pc, #348]	; (8007b80 <HAL_DMA_Start_IT+0x220>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a56      	ldr	r2, [pc, #344]	; (8007b84 <HAL_DMA_Start_IT+0x224>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00e      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a54      	ldr	r2, [pc, #336]	; (8007b88 <HAL_DMA_Start_IT+0x228>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d009      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a53      	ldr	r2, [pc, #332]	; (8007b8c <HAL_DMA_Start_IT+0x22c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d004      	beq.n	8007a4e <HAL_DMA_Start_IT+0xee>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a51      	ldr	r2, [pc, #324]	; (8007b90 <HAL_DMA_Start_IT+0x230>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d108      	bne.n	8007a60 <HAL_DMA_Start_IT+0x100>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0201 	bic.w	r2, r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	e007      	b.n	8007a70 <HAL_DMA_Start_IT+0x110>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0201 	bic.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	68b9      	ldr	r1, [r7, #8]
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f001 fe6a 	bl	8009750 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a34      	ldr	r2, [pc, #208]	; (8007b54 <HAL_DMA_Start_IT+0x1f4>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d04a      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a33      	ldr	r2, [pc, #204]	; (8007b58 <HAL_DMA_Start_IT+0x1f8>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d045      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a31      	ldr	r2, [pc, #196]	; (8007b5c <HAL_DMA_Start_IT+0x1fc>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d040      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a30      	ldr	r2, [pc, #192]	; (8007b60 <HAL_DMA_Start_IT+0x200>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d03b      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a2e      	ldr	r2, [pc, #184]	; (8007b64 <HAL_DMA_Start_IT+0x204>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d036      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a2d      	ldr	r2, [pc, #180]	; (8007b68 <HAL_DMA_Start_IT+0x208>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d031      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a2b      	ldr	r2, [pc, #172]	; (8007b6c <HAL_DMA_Start_IT+0x20c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d02c      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a2a      	ldr	r2, [pc, #168]	; (8007b70 <HAL_DMA_Start_IT+0x210>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d027      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a28      	ldr	r2, [pc, #160]	; (8007b74 <HAL_DMA_Start_IT+0x214>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d022      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a27      	ldr	r2, [pc, #156]	; (8007b78 <HAL_DMA_Start_IT+0x218>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d01d      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a25      	ldr	r2, [pc, #148]	; (8007b7c <HAL_DMA_Start_IT+0x21c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d018      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a24      	ldr	r2, [pc, #144]	; (8007b80 <HAL_DMA_Start_IT+0x220>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d013      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a22      	ldr	r2, [pc, #136]	; (8007b84 <HAL_DMA_Start_IT+0x224>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00e      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a21      	ldr	r2, [pc, #132]	; (8007b88 <HAL_DMA_Start_IT+0x228>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d009      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1f      	ldr	r2, [pc, #124]	; (8007b8c <HAL_DMA_Start_IT+0x22c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d004      	beq.n	8007b1c <HAL_DMA_Start_IT+0x1bc>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1e      	ldr	r2, [pc, #120]	; (8007b90 <HAL_DMA_Start_IT+0x230>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d101      	bne.n	8007b20 <HAL_DMA_Start_IT+0x1c0>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e000      	b.n	8007b22 <HAL_DMA_Start_IT+0x1c2>
 8007b20:	2300      	movs	r3, #0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d036      	beq.n	8007b94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f023 021e 	bic.w	r2, r3, #30
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0216 	orr.w	r2, r2, #22
 8007b38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d03e      	beq.n	8007bc0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f042 0208 	orr.w	r2, r2, #8
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	e035      	b.n	8007bc0 <HAL_DMA_Start_IT+0x260>
 8007b54:	40020010 	.word	0x40020010
 8007b58:	40020028 	.word	0x40020028
 8007b5c:	40020040 	.word	0x40020040
 8007b60:	40020058 	.word	0x40020058
 8007b64:	40020070 	.word	0x40020070
 8007b68:	40020088 	.word	0x40020088
 8007b6c:	400200a0 	.word	0x400200a0
 8007b70:	400200b8 	.word	0x400200b8
 8007b74:	40020410 	.word	0x40020410
 8007b78:	40020428 	.word	0x40020428
 8007b7c:	40020440 	.word	0x40020440
 8007b80:	40020458 	.word	0x40020458
 8007b84:	40020470 	.word	0x40020470
 8007b88:	40020488 	.word	0x40020488
 8007b8c:	400204a0 	.word	0x400204a0
 8007b90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f023 020e 	bic.w	r2, r3, #14
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 020a 	orr.w	r2, r2, #10
 8007ba6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d007      	beq.n	8007bc0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0204 	orr.w	r2, r2, #4
 8007bbe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a83      	ldr	r2, [pc, #524]	; (8007dd4 <HAL_DMA_Start_IT+0x474>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d072      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a82      	ldr	r2, [pc, #520]	; (8007dd8 <HAL_DMA_Start_IT+0x478>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d06d      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a80      	ldr	r2, [pc, #512]	; (8007ddc <HAL_DMA_Start_IT+0x47c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d068      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a7f      	ldr	r2, [pc, #508]	; (8007de0 <HAL_DMA_Start_IT+0x480>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d063      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a7d      	ldr	r2, [pc, #500]	; (8007de4 <HAL_DMA_Start_IT+0x484>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d05e      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a7c      	ldr	r2, [pc, #496]	; (8007de8 <HAL_DMA_Start_IT+0x488>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d059      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a7a      	ldr	r2, [pc, #488]	; (8007dec <HAL_DMA_Start_IT+0x48c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d054      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a79      	ldr	r2, [pc, #484]	; (8007df0 <HAL_DMA_Start_IT+0x490>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d04f      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a77      	ldr	r2, [pc, #476]	; (8007df4 <HAL_DMA_Start_IT+0x494>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d04a      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a76      	ldr	r2, [pc, #472]	; (8007df8 <HAL_DMA_Start_IT+0x498>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d045      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a74      	ldr	r2, [pc, #464]	; (8007dfc <HAL_DMA_Start_IT+0x49c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d040      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a73      	ldr	r2, [pc, #460]	; (8007e00 <HAL_DMA_Start_IT+0x4a0>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d03b      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a71      	ldr	r2, [pc, #452]	; (8007e04 <HAL_DMA_Start_IT+0x4a4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d036      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a70      	ldr	r2, [pc, #448]	; (8007e08 <HAL_DMA_Start_IT+0x4a8>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d031      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a6e      	ldr	r2, [pc, #440]	; (8007e0c <HAL_DMA_Start_IT+0x4ac>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d02c      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a6d      	ldr	r2, [pc, #436]	; (8007e10 <HAL_DMA_Start_IT+0x4b0>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d027      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a6b      	ldr	r2, [pc, #428]	; (8007e14 <HAL_DMA_Start_IT+0x4b4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d022      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a6a      	ldr	r2, [pc, #424]	; (8007e18 <HAL_DMA_Start_IT+0x4b8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d01d      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a68      	ldr	r2, [pc, #416]	; (8007e1c <HAL_DMA_Start_IT+0x4bc>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d018      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a67      	ldr	r2, [pc, #412]	; (8007e20 <HAL_DMA_Start_IT+0x4c0>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d013      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a65      	ldr	r2, [pc, #404]	; (8007e24 <HAL_DMA_Start_IT+0x4c4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00e      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a64      	ldr	r2, [pc, #400]	; (8007e28 <HAL_DMA_Start_IT+0x4c8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d009      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a62      	ldr	r2, [pc, #392]	; (8007e2c <HAL_DMA_Start_IT+0x4cc>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d004      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x350>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a61      	ldr	r2, [pc, #388]	; (8007e30 <HAL_DMA_Start_IT+0x4d0>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d101      	bne.n	8007cb4 <HAL_DMA_Start_IT+0x354>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e000      	b.n	8007cb6 <HAL_DMA_Start_IT+0x356>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01a      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d007      	beq.n	8007cd8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cd6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d007      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a37      	ldr	r2, [pc, #220]	; (8007dd4 <HAL_DMA_Start_IT+0x474>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d04a      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a36      	ldr	r2, [pc, #216]	; (8007dd8 <HAL_DMA_Start_IT+0x478>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d045      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a34      	ldr	r2, [pc, #208]	; (8007ddc <HAL_DMA_Start_IT+0x47c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d040      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a33      	ldr	r2, [pc, #204]	; (8007de0 <HAL_DMA_Start_IT+0x480>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d03b      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a31      	ldr	r2, [pc, #196]	; (8007de4 <HAL_DMA_Start_IT+0x484>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d036      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a30      	ldr	r2, [pc, #192]	; (8007de8 <HAL_DMA_Start_IT+0x488>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d031      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a2e      	ldr	r2, [pc, #184]	; (8007dec <HAL_DMA_Start_IT+0x48c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d02c      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a2d      	ldr	r2, [pc, #180]	; (8007df0 <HAL_DMA_Start_IT+0x490>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d027      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a2b      	ldr	r2, [pc, #172]	; (8007df4 <HAL_DMA_Start_IT+0x494>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d022      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a2a      	ldr	r2, [pc, #168]	; (8007df8 <HAL_DMA_Start_IT+0x498>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d01d      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a28      	ldr	r2, [pc, #160]	; (8007dfc <HAL_DMA_Start_IT+0x49c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d018      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a27      	ldr	r2, [pc, #156]	; (8007e00 <HAL_DMA_Start_IT+0x4a0>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d013      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a25      	ldr	r2, [pc, #148]	; (8007e04 <HAL_DMA_Start_IT+0x4a4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00e      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a24      	ldr	r2, [pc, #144]	; (8007e08 <HAL_DMA_Start_IT+0x4a8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d009      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a22      	ldr	r2, [pc, #136]	; (8007e0c <HAL_DMA_Start_IT+0x4ac>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <HAL_DMA_Start_IT+0x430>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a21      	ldr	r2, [pc, #132]	; (8007e10 <HAL_DMA_Start_IT+0x4b0>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d108      	bne.n	8007da2 <HAL_DMA_Start_IT+0x442>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	e012      	b.n	8007dc8 <HAL_DMA_Start_IT+0x468>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0201 	orr.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	e009      	b.n	8007dc8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	40020010 	.word	0x40020010
 8007dd8:	40020028 	.word	0x40020028
 8007ddc:	40020040 	.word	0x40020040
 8007de0:	40020058 	.word	0x40020058
 8007de4:	40020070 	.word	0x40020070
 8007de8:	40020088 	.word	0x40020088
 8007dec:	400200a0 	.word	0x400200a0
 8007df0:	400200b8 	.word	0x400200b8
 8007df4:	40020410 	.word	0x40020410
 8007df8:	40020428 	.word	0x40020428
 8007dfc:	40020440 	.word	0x40020440
 8007e00:	40020458 	.word	0x40020458
 8007e04:	40020470 	.word	0x40020470
 8007e08:	40020488 	.word	0x40020488
 8007e0c:	400204a0 	.word	0x400204a0
 8007e10:	400204b8 	.word	0x400204b8
 8007e14:	58025408 	.word	0x58025408
 8007e18:	5802541c 	.word	0x5802541c
 8007e1c:	58025430 	.word	0x58025430
 8007e20:	58025444 	.word	0x58025444
 8007e24:	58025458 	.word	0x58025458
 8007e28:	5802546c 	.word	0x5802546c
 8007e2c:	58025480 	.word	0x58025480
 8007e30:	58025494 	.word	0x58025494

08007e34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007e3c:	f7fe fede 	bl	8006bfc <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e2dc      	b.n	8008406 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d008      	beq.n	8007e6a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2280      	movs	r2, #128	; 0x80
 8007e5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e2cd      	b.n	8008406 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a76      	ldr	r2, [pc, #472]	; (8008048 <HAL_DMA_Abort+0x214>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d04a      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a74      	ldr	r2, [pc, #464]	; (800804c <HAL_DMA_Abort+0x218>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d045      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a73      	ldr	r2, [pc, #460]	; (8008050 <HAL_DMA_Abort+0x21c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d040      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a71      	ldr	r2, [pc, #452]	; (8008054 <HAL_DMA_Abort+0x220>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d03b      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a70      	ldr	r2, [pc, #448]	; (8008058 <HAL_DMA_Abort+0x224>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d036      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a6e      	ldr	r2, [pc, #440]	; (800805c <HAL_DMA_Abort+0x228>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d031      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a6d      	ldr	r2, [pc, #436]	; (8008060 <HAL_DMA_Abort+0x22c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d02c      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a6b      	ldr	r2, [pc, #428]	; (8008064 <HAL_DMA_Abort+0x230>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d027      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a6a      	ldr	r2, [pc, #424]	; (8008068 <HAL_DMA_Abort+0x234>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d022      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a68      	ldr	r2, [pc, #416]	; (800806c <HAL_DMA_Abort+0x238>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d01d      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a67      	ldr	r2, [pc, #412]	; (8008070 <HAL_DMA_Abort+0x23c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d018      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a65      	ldr	r2, [pc, #404]	; (8008074 <HAL_DMA_Abort+0x240>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d013      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a64      	ldr	r2, [pc, #400]	; (8008078 <HAL_DMA_Abort+0x244>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00e      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a62      	ldr	r2, [pc, #392]	; (800807c <HAL_DMA_Abort+0x248>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d009      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a61      	ldr	r2, [pc, #388]	; (8008080 <HAL_DMA_Abort+0x24c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d004      	beq.n	8007f0a <HAL_DMA_Abort+0xd6>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a5f      	ldr	r2, [pc, #380]	; (8008084 <HAL_DMA_Abort+0x250>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d101      	bne.n	8007f0e <HAL_DMA_Abort+0xda>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <HAL_DMA_Abort+0xdc>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d013      	beq.n	8007f3c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 021e 	bic.w	r2, r2, #30
 8007f22:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	695a      	ldr	r2, [r3, #20]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f32:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	617b      	str	r3, [r7, #20]
 8007f3a:	e00a      	b.n	8007f52 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 020e 	bic.w	r2, r2, #14
 8007f4a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a3c      	ldr	r2, [pc, #240]	; (8008048 <HAL_DMA_Abort+0x214>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d072      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a3a      	ldr	r2, [pc, #232]	; (800804c <HAL_DMA_Abort+0x218>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d06d      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a39      	ldr	r2, [pc, #228]	; (8008050 <HAL_DMA_Abort+0x21c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d068      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a37      	ldr	r2, [pc, #220]	; (8008054 <HAL_DMA_Abort+0x220>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d063      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a36      	ldr	r2, [pc, #216]	; (8008058 <HAL_DMA_Abort+0x224>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d05e      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a34      	ldr	r2, [pc, #208]	; (800805c <HAL_DMA_Abort+0x228>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d059      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a33      	ldr	r2, [pc, #204]	; (8008060 <HAL_DMA_Abort+0x22c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d054      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a31      	ldr	r2, [pc, #196]	; (8008064 <HAL_DMA_Abort+0x230>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d04f      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a30      	ldr	r2, [pc, #192]	; (8008068 <HAL_DMA_Abort+0x234>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d04a      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a2e      	ldr	r2, [pc, #184]	; (800806c <HAL_DMA_Abort+0x238>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d045      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a2d      	ldr	r2, [pc, #180]	; (8008070 <HAL_DMA_Abort+0x23c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d040      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a2b      	ldr	r2, [pc, #172]	; (8008074 <HAL_DMA_Abort+0x240>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d03b      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a2a      	ldr	r2, [pc, #168]	; (8008078 <HAL_DMA_Abort+0x244>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d036      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a28      	ldr	r2, [pc, #160]	; (800807c <HAL_DMA_Abort+0x248>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d031      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a27      	ldr	r2, [pc, #156]	; (8008080 <HAL_DMA_Abort+0x24c>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d02c      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a25      	ldr	r2, [pc, #148]	; (8008084 <HAL_DMA_Abort+0x250>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d027      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a24      	ldr	r2, [pc, #144]	; (8008088 <HAL_DMA_Abort+0x254>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d022      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a22      	ldr	r2, [pc, #136]	; (800808c <HAL_DMA_Abort+0x258>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d01d      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a21      	ldr	r2, [pc, #132]	; (8008090 <HAL_DMA_Abort+0x25c>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d018      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a1f      	ldr	r2, [pc, #124]	; (8008094 <HAL_DMA_Abort+0x260>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d013      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1e      	ldr	r2, [pc, #120]	; (8008098 <HAL_DMA_Abort+0x264>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00e      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1c      	ldr	r2, [pc, #112]	; (800809c <HAL_DMA_Abort+0x268>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d009      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1b      	ldr	r2, [pc, #108]	; (80080a0 <HAL_DMA_Abort+0x26c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d004      	beq.n	8008042 <HAL_DMA_Abort+0x20e>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a19      	ldr	r2, [pc, #100]	; (80080a4 <HAL_DMA_Abort+0x270>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d132      	bne.n	80080a8 <HAL_DMA_Abort+0x274>
 8008042:	2301      	movs	r3, #1
 8008044:	e031      	b.n	80080aa <HAL_DMA_Abort+0x276>
 8008046:	bf00      	nop
 8008048:	40020010 	.word	0x40020010
 800804c:	40020028 	.word	0x40020028
 8008050:	40020040 	.word	0x40020040
 8008054:	40020058 	.word	0x40020058
 8008058:	40020070 	.word	0x40020070
 800805c:	40020088 	.word	0x40020088
 8008060:	400200a0 	.word	0x400200a0
 8008064:	400200b8 	.word	0x400200b8
 8008068:	40020410 	.word	0x40020410
 800806c:	40020428 	.word	0x40020428
 8008070:	40020440 	.word	0x40020440
 8008074:	40020458 	.word	0x40020458
 8008078:	40020470 	.word	0x40020470
 800807c:	40020488 	.word	0x40020488
 8008080:	400204a0 	.word	0x400204a0
 8008084:	400204b8 	.word	0x400204b8
 8008088:	58025408 	.word	0x58025408
 800808c:	5802541c 	.word	0x5802541c
 8008090:	58025430 	.word	0x58025430
 8008094:	58025444 	.word	0x58025444
 8008098:	58025458 	.word	0x58025458
 800809c:	5802546c 	.word	0x5802546c
 80080a0:	58025480 	.word	0x58025480
 80080a4:	58025494 	.word	0x58025494
 80080a8:	2300      	movs	r3, #0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d007      	beq.n	80080be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a6d      	ldr	r2, [pc, #436]	; (8008278 <HAL_DMA_Abort+0x444>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d04a      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a6b      	ldr	r2, [pc, #428]	; (800827c <HAL_DMA_Abort+0x448>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d045      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a6a      	ldr	r2, [pc, #424]	; (8008280 <HAL_DMA_Abort+0x44c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d040      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a68      	ldr	r2, [pc, #416]	; (8008284 <HAL_DMA_Abort+0x450>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d03b      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a67      	ldr	r2, [pc, #412]	; (8008288 <HAL_DMA_Abort+0x454>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d036      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a65      	ldr	r2, [pc, #404]	; (800828c <HAL_DMA_Abort+0x458>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d031      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a64      	ldr	r2, [pc, #400]	; (8008290 <HAL_DMA_Abort+0x45c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d02c      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a62      	ldr	r2, [pc, #392]	; (8008294 <HAL_DMA_Abort+0x460>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d027      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a61      	ldr	r2, [pc, #388]	; (8008298 <HAL_DMA_Abort+0x464>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d022      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a5f      	ldr	r2, [pc, #380]	; (800829c <HAL_DMA_Abort+0x468>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d01d      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a5e      	ldr	r2, [pc, #376]	; (80082a0 <HAL_DMA_Abort+0x46c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d018      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a5c      	ldr	r2, [pc, #368]	; (80082a4 <HAL_DMA_Abort+0x470>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d013      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a5b      	ldr	r2, [pc, #364]	; (80082a8 <HAL_DMA_Abort+0x474>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00e      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a59      	ldr	r2, [pc, #356]	; (80082ac <HAL_DMA_Abort+0x478>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d009      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a58      	ldr	r2, [pc, #352]	; (80082b0 <HAL_DMA_Abort+0x47c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d004      	beq.n	800815e <HAL_DMA_Abort+0x32a>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a56      	ldr	r2, [pc, #344]	; (80082b4 <HAL_DMA_Abort+0x480>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d108      	bne.n	8008170 <HAL_DMA_Abort+0x33c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0201 	bic.w	r2, r2, #1
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	e007      	b.n	8008180 <HAL_DMA_Abort+0x34c>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0201 	bic.w	r2, r2, #1
 800817e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008180:	e013      	b.n	80081aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008182:	f7fe fd3b 	bl	8006bfc <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b05      	cmp	r3, #5
 800818e:	d90c      	bls.n	80081aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2203      	movs	r2, #3
 800819a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e12d      	b.n	8008406 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e5      	bne.n	8008182 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a2f      	ldr	r2, [pc, #188]	; (8008278 <HAL_DMA_Abort+0x444>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d04a      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a2d      	ldr	r2, [pc, #180]	; (800827c <HAL_DMA_Abort+0x448>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d045      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2c      	ldr	r2, [pc, #176]	; (8008280 <HAL_DMA_Abort+0x44c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d040      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a2a      	ldr	r2, [pc, #168]	; (8008284 <HAL_DMA_Abort+0x450>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d03b      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a29      	ldr	r2, [pc, #164]	; (8008288 <HAL_DMA_Abort+0x454>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d036      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a27      	ldr	r2, [pc, #156]	; (800828c <HAL_DMA_Abort+0x458>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d031      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a26      	ldr	r2, [pc, #152]	; (8008290 <HAL_DMA_Abort+0x45c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d02c      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a24      	ldr	r2, [pc, #144]	; (8008294 <HAL_DMA_Abort+0x460>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d027      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a23      	ldr	r2, [pc, #140]	; (8008298 <HAL_DMA_Abort+0x464>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d022      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a21      	ldr	r2, [pc, #132]	; (800829c <HAL_DMA_Abort+0x468>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d01d      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a20      	ldr	r2, [pc, #128]	; (80082a0 <HAL_DMA_Abort+0x46c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d018      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1e      	ldr	r2, [pc, #120]	; (80082a4 <HAL_DMA_Abort+0x470>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d013      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1d      	ldr	r2, [pc, #116]	; (80082a8 <HAL_DMA_Abort+0x474>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00e      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a1b      	ldr	r2, [pc, #108]	; (80082ac <HAL_DMA_Abort+0x478>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d009      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1a      	ldr	r2, [pc, #104]	; (80082b0 <HAL_DMA_Abort+0x47c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d004      	beq.n	8008256 <HAL_DMA_Abort+0x422>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a18      	ldr	r2, [pc, #96]	; (80082b4 <HAL_DMA_Abort+0x480>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d101      	bne.n	800825a <HAL_DMA_Abort+0x426>
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <HAL_DMA_Abort+0x428>
 800825a:	2300      	movs	r3, #0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d02b      	beq.n	80082b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008264:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826a:	f003 031f 	and.w	r3, r3, #31
 800826e:	223f      	movs	r2, #63	; 0x3f
 8008270:	409a      	lsls	r2, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	609a      	str	r2, [r3, #8]
 8008276:	e02a      	b.n	80082ce <HAL_DMA_Abort+0x49a>
 8008278:	40020010 	.word	0x40020010
 800827c:	40020028 	.word	0x40020028
 8008280:	40020040 	.word	0x40020040
 8008284:	40020058 	.word	0x40020058
 8008288:	40020070 	.word	0x40020070
 800828c:	40020088 	.word	0x40020088
 8008290:	400200a0 	.word	0x400200a0
 8008294:	400200b8 	.word	0x400200b8
 8008298:	40020410 	.word	0x40020410
 800829c:	40020428 	.word	0x40020428
 80082a0:	40020440 	.word	0x40020440
 80082a4:	40020458 	.word	0x40020458
 80082a8:	40020470 	.word	0x40020470
 80082ac:	40020488 	.word	0x40020488
 80082b0:	400204a0 	.word	0x400204a0
 80082b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c2:	f003 031f 	and.w	r3, r3, #31
 80082c6:	2201      	movs	r2, #1
 80082c8:	409a      	lsls	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a4f      	ldr	r2, [pc, #316]	; (8008410 <HAL_DMA_Abort+0x5dc>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d072      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a4d      	ldr	r2, [pc, #308]	; (8008414 <HAL_DMA_Abort+0x5e0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d06d      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a4c      	ldr	r2, [pc, #304]	; (8008418 <HAL_DMA_Abort+0x5e4>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d068      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a4a      	ldr	r2, [pc, #296]	; (800841c <HAL_DMA_Abort+0x5e8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d063      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a49      	ldr	r2, [pc, #292]	; (8008420 <HAL_DMA_Abort+0x5ec>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d05e      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a47      	ldr	r2, [pc, #284]	; (8008424 <HAL_DMA_Abort+0x5f0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d059      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a46      	ldr	r2, [pc, #280]	; (8008428 <HAL_DMA_Abort+0x5f4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d054      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a44      	ldr	r2, [pc, #272]	; (800842c <HAL_DMA_Abort+0x5f8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d04f      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a43      	ldr	r2, [pc, #268]	; (8008430 <HAL_DMA_Abort+0x5fc>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d04a      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a41      	ldr	r2, [pc, #260]	; (8008434 <HAL_DMA_Abort+0x600>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d045      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a40      	ldr	r2, [pc, #256]	; (8008438 <HAL_DMA_Abort+0x604>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d040      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a3e      	ldr	r2, [pc, #248]	; (800843c <HAL_DMA_Abort+0x608>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d03b      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a3d      	ldr	r2, [pc, #244]	; (8008440 <HAL_DMA_Abort+0x60c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d036      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a3b      	ldr	r2, [pc, #236]	; (8008444 <HAL_DMA_Abort+0x610>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d031      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a3a      	ldr	r2, [pc, #232]	; (8008448 <HAL_DMA_Abort+0x614>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d02c      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a38      	ldr	r2, [pc, #224]	; (800844c <HAL_DMA_Abort+0x618>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d027      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a37      	ldr	r2, [pc, #220]	; (8008450 <HAL_DMA_Abort+0x61c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d022      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a35      	ldr	r2, [pc, #212]	; (8008454 <HAL_DMA_Abort+0x620>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d01d      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a34      	ldr	r2, [pc, #208]	; (8008458 <HAL_DMA_Abort+0x624>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d018      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a32      	ldr	r2, [pc, #200]	; (800845c <HAL_DMA_Abort+0x628>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a31      	ldr	r2, [pc, #196]	; (8008460 <HAL_DMA_Abort+0x62c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00e      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a2f      	ldr	r2, [pc, #188]	; (8008464 <HAL_DMA_Abort+0x630>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d009      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a2e      	ldr	r2, [pc, #184]	; (8008468 <HAL_DMA_Abort+0x634>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d004      	beq.n	80083be <HAL_DMA_Abort+0x58a>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a2c      	ldr	r2, [pc, #176]	; (800846c <HAL_DMA_Abort+0x638>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d101      	bne.n	80083c2 <HAL_DMA_Abort+0x58e>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <HAL_DMA_Abort+0x590>
 80083c2:	2300      	movs	r3, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d015      	beq.n	80083f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80083d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00c      	beq.n	80083f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80083f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40020010 	.word	0x40020010
 8008414:	40020028 	.word	0x40020028
 8008418:	40020040 	.word	0x40020040
 800841c:	40020058 	.word	0x40020058
 8008420:	40020070 	.word	0x40020070
 8008424:	40020088 	.word	0x40020088
 8008428:	400200a0 	.word	0x400200a0
 800842c:	400200b8 	.word	0x400200b8
 8008430:	40020410 	.word	0x40020410
 8008434:	40020428 	.word	0x40020428
 8008438:	40020440 	.word	0x40020440
 800843c:	40020458 	.word	0x40020458
 8008440:	40020470 	.word	0x40020470
 8008444:	40020488 	.word	0x40020488
 8008448:	400204a0 	.word	0x400204a0
 800844c:	400204b8 	.word	0x400204b8
 8008450:	58025408 	.word	0x58025408
 8008454:	5802541c 	.word	0x5802541c
 8008458:	58025430 	.word	0x58025430
 800845c:	58025444 	.word	0x58025444
 8008460:	58025458 	.word	0x58025458
 8008464:	5802546c 	.word	0x5802546c
 8008468:	58025480 	.word	0x58025480
 800846c:	58025494 	.word	0x58025494

08008470 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e237      	b.n	80088f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d004      	beq.n	8008498 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2280      	movs	r2, #128	; 0x80
 8008492:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e22c      	b.n	80088f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a5c      	ldr	r2, [pc, #368]	; (8008610 <HAL_DMA_Abort_IT+0x1a0>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d04a      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a5b      	ldr	r2, [pc, #364]	; (8008614 <HAL_DMA_Abort_IT+0x1a4>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d045      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a59      	ldr	r2, [pc, #356]	; (8008618 <HAL_DMA_Abort_IT+0x1a8>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d040      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a58      	ldr	r2, [pc, #352]	; (800861c <HAL_DMA_Abort_IT+0x1ac>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d03b      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a56      	ldr	r2, [pc, #344]	; (8008620 <HAL_DMA_Abort_IT+0x1b0>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d036      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a55      	ldr	r2, [pc, #340]	; (8008624 <HAL_DMA_Abort_IT+0x1b4>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d031      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a53      	ldr	r2, [pc, #332]	; (8008628 <HAL_DMA_Abort_IT+0x1b8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d02c      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a52      	ldr	r2, [pc, #328]	; (800862c <HAL_DMA_Abort_IT+0x1bc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d027      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a50      	ldr	r2, [pc, #320]	; (8008630 <HAL_DMA_Abort_IT+0x1c0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d022      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a4f      	ldr	r2, [pc, #316]	; (8008634 <HAL_DMA_Abort_IT+0x1c4>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d01d      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a4d      	ldr	r2, [pc, #308]	; (8008638 <HAL_DMA_Abort_IT+0x1c8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d018      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a4c      	ldr	r2, [pc, #304]	; (800863c <HAL_DMA_Abort_IT+0x1cc>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d013      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a4a      	ldr	r2, [pc, #296]	; (8008640 <HAL_DMA_Abort_IT+0x1d0>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00e      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a49      	ldr	r2, [pc, #292]	; (8008644 <HAL_DMA_Abort_IT+0x1d4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d009      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a47      	ldr	r2, [pc, #284]	; (8008648 <HAL_DMA_Abort_IT+0x1d8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d004      	beq.n	8008538 <HAL_DMA_Abort_IT+0xc8>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a46      	ldr	r2, [pc, #280]	; (800864c <HAL_DMA_Abort_IT+0x1dc>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d101      	bne.n	800853c <HAL_DMA_Abort_IT+0xcc>
 8008538:	2301      	movs	r3, #1
 800853a:	e000      	b.n	800853e <HAL_DMA_Abort_IT+0xce>
 800853c:	2300      	movs	r3, #0
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 8086 	beq.w	8008650 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2204      	movs	r2, #4
 8008548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a2f      	ldr	r2, [pc, #188]	; (8008610 <HAL_DMA_Abort_IT+0x1a0>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d04a      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a2e      	ldr	r2, [pc, #184]	; (8008614 <HAL_DMA_Abort_IT+0x1a4>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d045      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a2c      	ldr	r2, [pc, #176]	; (8008618 <HAL_DMA_Abort_IT+0x1a8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d040      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a2b      	ldr	r2, [pc, #172]	; (800861c <HAL_DMA_Abort_IT+0x1ac>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d03b      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a29      	ldr	r2, [pc, #164]	; (8008620 <HAL_DMA_Abort_IT+0x1b0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d036      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a28      	ldr	r2, [pc, #160]	; (8008624 <HAL_DMA_Abort_IT+0x1b4>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d031      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a26      	ldr	r2, [pc, #152]	; (8008628 <HAL_DMA_Abort_IT+0x1b8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d02c      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a25      	ldr	r2, [pc, #148]	; (800862c <HAL_DMA_Abort_IT+0x1bc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d027      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a23      	ldr	r2, [pc, #140]	; (8008630 <HAL_DMA_Abort_IT+0x1c0>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d022      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a22      	ldr	r2, [pc, #136]	; (8008634 <HAL_DMA_Abort_IT+0x1c4>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d01d      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a20      	ldr	r2, [pc, #128]	; (8008638 <HAL_DMA_Abort_IT+0x1c8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d018      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a1f      	ldr	r2, [pc, #124]	; (800863c <HAL_DMA_Abort_IT+0x1cc>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d013      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a1d      	ldr	r2, [pc, #116]	; (8008640 <HAL_DMA_Abort_IT+0x1d0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00e      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a1c      	ldr	r2, [pc, #112]	; (8008644 <HAL_DMA_Abort_IT+0x1d4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d009      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a1a      	ldr	r2, [pc, #104]	; (8008648 <HAL_DMA_Abort_IT+0x1d8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d004      	beq.n	80085ec <HAL_DMA_Abort_IT+0x17c>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a19      	ldr	r2, [pc, #100]	; (800864c <HAL_DMA_Abort_IT+0x1dc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d108      	bne.n	80085fe <HAL_DMA_Abort_IT+0x18e>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0201 	bic.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	e178      	b.n	80088f0 <HAL_DMA_Abort_IT+0x480>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0201 	bic.w	r2, r2, #1
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	e16f      	b.n	80088f0 <HAL_DMA_Abort_IT+0x480>
 8008610:	40020010 	.word	0x40020010
 8008614:	40020028 	.word	0x40020028
 8008618:	40020040 	.word	0x40020040
 800861c:	40020058 	.word	0x40020058
 8008620:	40020070 	.word	0x40020070
 8008624:	40020088 	.word	0x40020088
 8008628:	400200a0 	.word	0x400200a0
 800862c:	400200b8 	.word	0x400200b8
 8008630:	40020410 	.word	0x40020410
 8008634:	40020428 	.word	0x40020428
 8008638:	40020440 	.word	0x40020440
 800863c:	40020458 	.word	0x40020458
 8008640:	40020470 	.word	0x40020470
 8008644:	40020488 	.word	0x40020488
 8008648:	400204a0 	.word	0x400204a0
 800864c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 020e 	bic.w	r2, r2, #14
 800865e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a6c      	ldr	r2, [pc, #432]	; (8008818 <HAL_DMA_Abort_IT+0x3a8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d04a      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a6b      	ldr	r2, [pc, #428]	; (800881c <HAL_DMA_Abort_IT+0x3ac>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d045      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a69      	ldr	r2, [pc, #420]	; (8008820 <HAL_DMA_Abort_IT+0x3b0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d040      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a68      	ldr	r2, [pc, #416]	; (8008824 <HAL_DMA_Abort_IT+0x3b4>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d03b      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a66      	ldr	r2, [pc, #408]	; (8008828 <HAL_DMA_Abort_IT+0x3b8>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d036      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a65      	ldr	r2, [pc, #404]	; (800882c <HAL_DMA_Abort_IT+0x3bc>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d031      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a63      	ldr	r2, [pc, #396]	; (8008830 <HAL_DMA_Abort_IT+0x3c0>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d02c      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a62      	ldr	r2, [pc, #392]	; (8008834 <HAL_DMA_Abort_IT+0x3c4>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d027      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a60      	ldr	r2, [pc, #384]	; (8008838 <HAL_DMA_Abort_IT+0x3c8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d022      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a5f      	ldr	r2, [pc, #380]	; (800883c <HAL_DMA_Abort_IT+0x3cc>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d01d      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a5d      	ldr	r2, [pc, #372]	; (8008840 <HAL_DMA_Abort_IT+0x3d0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d018      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a5c      	ldr	r2, [pc, #368]	; (8008844 <HAL_DMA_Abort_IT+0x3d4>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d013      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a5a      	ldr	r2, [pc, #360]	; (8008848 <HAL_DMA_Abort_IT+0x3d8>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00e      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a59      	ldr	r2, [pc, #356]	; (800884c <HAL_DMA_Abort_IT+0x3dc>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d009      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a57      	ldr	r2, [pc, #348]	; (8008850 <HAL_DMA_Abort_IT+0x3e0>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d004      	beq.n	8008700 <HAL_DMA_Abort_IT+0x290>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a56      	ldr	r2, [pc, #344]	; (8008854 <HAL_DMA_Abort_IT+0x3e4>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d108      	bne.n	8008712 <HAL_DMA_Abort_IT+0x2a2>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f022 0201 	bic.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	e007      	b.n	8008722 <HAL_DMA_Abort_IT+0x2b2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0201 	bic.w	r2, r2, #1
 8008720:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a3c      	ldr	r2, [pc, #240]	; (8008818 <HAL_DMA_Abort_IT+0x3a8>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d072      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a3a      	ldr	r2, [pc, #232]	; (800881c <HAL_DMA_Abort_IT+0x3ac>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d06d      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a39      	ldr	r2, [pc, #228]	; (8008820 <HAL_DMA_Abort_IT+0x3b0>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d068      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a37      	ldr	r2, [pc, #220]	; (8008824 <HAL_DMA_Abort_IT+0x3b4>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d063      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a36      	ldr	r2, [pc, #216]	; (8008828 <HAL_DMA_Abort_IT+0x3b8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d05e      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a34      	ldr	r2, [pc, #208]	; (800882c <HAL_DMA_Abort_IT+0x3bc>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d059      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a33      	ldr	r2, [pc, #204]	; (8008830 <HAL_DMA_Abort_IT+0x3c0>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d054      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a31      	ldr	r2, [pc, #196]	; (8008834 <HAL_DMA_Abort_IT+0x3c4>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d04f      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a30      	ldr	r2, [pc, #192]	; (8008838 <HAL_DMA_Abort_IT+0x3c8>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d04a      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a2e      	ldr	r2, [pc, #184]	; (800883c <HAL_DMA_Abort_IT+0x3cc>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d045      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a2d      	ldr	r2, [pc, #180]	; (8008840 <HAL_DMA_Abort_IT+0x3d0>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d040      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a2b      	ldr	r2, [pc, #172]	; (8008844 <HAL_DMA_Abort_IT+0x3d4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d03b      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a2a      	ldr	r2, [pc, #168]	; (8008848 <HAL_DMA_Abort_IT+0x3d8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d036      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a28      	ldr	r2, [pc, #160]	; (800884c <HAL_DMA_Abort_IT+0x3dc>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d031      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a27      	ldr	r2, [pc, #156]	; (8008850 <HAL_DMA_Abort_IT+0x3e0>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d02c      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a25      	ldr	r2, [pc, #148]	; (8008854 <HAL_DMA_Abort_IT+0x3e4>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d027      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a24      	ldr	r2, [pc, #144]	; (8008858 <HAL_DMA_Abort_IT+0x3e8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d022      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a22      	ldr	r2, [pc, #136]	; (800885c <HAL_DMA_Abort_IT+0x3ec>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d01d      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a21      	ldr	r2, [pc, #132]	; (8008860 <HAL_DMA_Abort_IT+0x3f0>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d018      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a1f      	ldr	r2, [pc, #124]	; (8008864 <HAL_DMA_Abort_IT+0x3f4>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d013      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a1e      	ldr	r2, [pc, #120]	; (8008868 <HAL_DMA_Abort_IT+0x3f8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00e      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a1c      	ldr	r2, [pc, #112]	; (800886c <HAL_DMA_Abort_IT+0x3fc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d009      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a1b      	ldr	r2, [pc, #108]	; (8008870 <HAL_DMA_Abort_IT+0x400>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d004      	beq.n	8008812 <HAL_DMA_Abort_IT+0x3a2>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a19      	ldr	r2, [pc, #100]	; (8008874 <HAL_DMA_Abort_IT+0x404>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d132      	bne.n	8008878 <HAL_DMA_Abort_IT+0x408>
 8008812:	2301      	movs	r3, #1
 8008814:	e031      	b.n	800887a <HAL_DMA_Abort_IT+0x40a>
 8008816:	bf00      	nop
 8008818:	40020010 	.word	0x40020010
 800881c:	40020028 	.word	0x40020028
 8008820:	40020040 	.word	0x40020040
 8008824:	40020058 	.word	0x40020058
 8008828:	40020070 	.word	0x40020070
 800882c:	40020088 	.word	0x40020088
 8008830:	400200a0 	.word	0x400200a0
 8008834:	400200b8 	.word	0x400200b8
 8008838:	40020410 	.word	0x40020410
 800883c:	40020428 	.word	0x40020428
 8008840:	40020440 	.word	0x40020440
 8008844:	40020458 	.word	0x40020458
 8008848:	40020470 	.word	0x40020470
 800884c:	40020488 	.word	0x40020488
 8008850:	400204a0 	.word	0x400204a0
 8008854:	400204b8 	.word	0x400204b8
 8008858:	58025408 	.word	0x58025408
 800885c:	5802541c 	.word	0x5802541c
 8008860:	58025430 	.word	0x58025430
 8008864:	58025444 	.word	0x58025444
 8008868:	58025458 	.word	0x58025458
 800886c:	5802546c 	.word	0x5802546c
 8008870:	58025480 	.word	0x58025480
 8008874:	58025494 	.word	0x58025494
 8008878:	2300      	movs	r3, #0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d028      	beq.n	80088d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800888c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008892:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008898:	f003 031f 	and.w	r3, r3, #31
 800889c:	2201      	movs	r2, #1
 800889e:	409a      	lsls	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00c      	beq.n	80088d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop

080088fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	; 0x28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008908:	4b67      	ldr	r3, [pc, #412]	; (8008aa8 <HAL_DMA_IRQHandler+0x1ac>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a67      	ldr	r2, [pc, #412]	; (8008aac <HAL_DMA_IRQHandler+0x1b0>)
 800890e:	fba2 2303 	umull	r2, r3, r2, r3
 8008912:	0a9b      	lsrs	r3, r3, #10
 8008914:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008920:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a5f      	ldr	r2, [pc, #380]	; (8008ab0 <HAL_DMA_IRQHandler+0x1b4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d04a      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a5d      	ldr	r2, [pc, #372]	; (8008ab4 <HAL_DMA_IRQHandler+0x1b8>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d045      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a5c      	ldr	r2, [pc, #368]	; (8008ab8 <HAL_DMA_IRQHandler+0x1bc>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d040      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a5a      	ldr	r2, [pc, #360]	; (8008abc <HAL_DMA_IRQHandler+0x1c0>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d03b      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a59      	ldr	r2, [pc, #356]	; (8008ac0 <HAL_DMA_IRQHandler+0x1c4>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d036      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a57      	ldr	r2, [pc, #348]	; (8008ac4 <HAL_DMA_IRQHandler+0x1c8>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d031      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a56      	ldr	r2, [pc, #344]	; (8008ac8 <HAL_DMA_IRQHandler+0x1cc>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d02c      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a54      	ldr	r2, [pc, #336]	; (8008acc <HAL_DMA_IRQHandler+0x1d0>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d027      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a53      	ldr	r2, [pc, #332]	; (8008ad0 <HAL_DMA_IRQHandler+0x1d4>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d022      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a51      	ldr	r2, [pc, #324]	; (8008ad4 <HAL_DMA_IRQHandler+0x1d8>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d01d      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a50      	ldr	r2, [pc, #320]	; (8008ad8 <HAL_DMA_IRQHandler+0x1dc>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d018      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a4e      	ldr	r2, [pc, #312]	; (8008adc <HAL_DMA_IRQHandler+0x1e0>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d013      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a4d      	ldr	r2, [pc, #308]	; (8008ae0 <HAL_DMA_IRQHandler+0x1e4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d00e      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a4b      	ldr	r2, [pc, #300]	; (8008ae4 <HAL_DMA_IRQHandler+0x1e8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d009      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a4a      	ldr	r2, [pc, #296]	; (8008ae8 <HAL_DMA_IRQHandler+0x1ec>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d004      	beq.n	80089ce <HAL_DMA_IRQHandler+0xd2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a48      	ldr	r2, [pc, #288]	; (8008aec <HAL_DMA_IRQHandler+0x1f0>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d101      	bne.n	80089d2 <HAL_DMA_IRQHandler+0xd6>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e000      	b.n	80089d4 <HAL_DMA_IRQHandler+0xd8>
 80089d2:	2300      	movs	r3, #0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 842b 	beq.w	8009230 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	2208      	movs	r2, #8
 80089e4:	409a      	lsls	r2, r3
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	4013      	ands	r3, r2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 80a2 	beq.w	8008b34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a2e      	ldr	r2, [pc, #184]	; (8008ab0 <HAL_DMA_IRQHandler+0x1b4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d04a      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a2d      	ldr	r2, [pc, #180]	; (8008ab4 <HAL_DMA_IRQHandler+0x1b8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d045      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a2b      	ldr	r2, [pc, #172]	; (8008ab8 <HAL_DMA_IRQHandler+0x1bc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d040      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a2a      	ldr	r2, [pc, #168]	; (8008abc <HAL_DMA_IRQHandler+0x1c0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d03b      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a28      	ldr	r2, [pc, #160]	; (8008ac0 <HAL_DMA_IRQHandler+0x1c4>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d036      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a27      	ldr	r2, [pc, #156]	; (8008ac4 <HAL_DMA_IRQHandler+0x1c8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d031      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a25      	ldr	r2, [pc, #148]	; (8008ac8 <HAL_DMA_IRQHandler+0x1cc>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d02c      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a24      	ldr	r2, [pc, #144]	; (8008acc <HAL_DMA_IRQHandler+0x1d0>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d027      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a22      	ldr	r2, [pc, #136]	; (8008ad0 <HAL_DMA_IRQHandler+0x1d4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d022      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a21      	ldr	r2, [pc, #132]	; (8008ad4 <HAL_DMA_IRQHandler+0x1d8>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d01d      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a1f      	ldr	r2, [pc, #124]	; (8008ad8 <HAL_DMA_IRQHandler+0x1dc>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d018      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <HAL_DMA_IRQHandler+0x1e0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d013      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ae0 <HAL_DMA_IRQHandler+0x1e4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00e      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a1b      	ldr	r2, [pc, #108]	; (8008ae4 <HAL_DMA_IRQHandler+0x1e8>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d009      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a19      	ldr	r2, [pc, #100]	; (8008ae8 <HAL_DMA_IRQHandler+0x1ec>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d004      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x194>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a18      	ldr	r2, [pc, #96]	; (8008aec <HAL_DMA_IRQHandler+0x1f0>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d12f      	bne.n	8008af0 <HAL_DMA_IRQHandler+0x1f4>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bf14      	ite	ne
 8008a9e:	2301      	movne	r3, #1
 8008aa0:	2300      	moveq	r3, #0
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	e02e      	b.n	8008b04 <HAL_DMA_IRQHandler+0x208>
 8008aa6:	bf00      	nop
 8008aa8:	24000238 	.word	0x24000238
 8008aac:	1b4e81b5 	.word	0x1b4e81b5
 8008ab0:	40020010 	.word	0x40020010
 8008ab4:	40020028 	.word	0x40020028
 8008ab8:	40020040 	.word	0x40020040
 8008abc:	40020058 	.word	0x40020058
 8008ac0:	40020070 	.word	0x40020070
 8008ac4:	40020088 	.word	0x40020088
 8008ac8:	400200a0 	.word	0x400200a0
 8008acc:	400200b8 	.word	0x400200b8
 8008ad0:	40020410 	.word	0x40020410
 8008ad4:	40020428 	.word	0x40020428
 8008ad8:	40020440 	.word	0x40020440
 8008adc:	40020458 	.word	0x40020458
 8008ae0:	40020470 	.word	0x40020470
 8008ae4:	40020488 	.word	0x40020488
 8008ae8:	400204a0 	.word	0x400204a0
 8008aec:	400204b8 	.word	0x400204b8
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	bf14      	ite	ne
 8008afe:	2301      	movne	r3, #1
 8008b00:	2300      	moveq	r3, #0
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d015      	beq.n	8008b34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0204 	bic.w	r2, r2, #4
 8008b16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b1c:	f003 031f 	and.w	r3, r3, #31
 8008b20:	2208      	movs	r2, #8
 8008b22:	409a      	lsls	r2, r3
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2c:	f043 0201 	orr.w	r2, r3, #1
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b38:	f003 031f 	and.w	r3, r3, #31
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d06e      	beq.n	8008c28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a69      	ldr	r2, [pc, #420]	; (8008cf4 <HAL_DMA_IRQHandler+0x3f8>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d04a      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a67      	ldr	r2, [pc, #412]	; (8008cf8 <HAL_DMA_IRQHandler+0x3fc>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d045      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a66      	ldr	r2, [pc, #408]	; (8008cfc <HAL_DMA_IRQHandler+0x400>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d040      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a64      	ldr	r2, [pc, #400]	; (8008d00 <HAL_DMA_IRQHandler+0x404>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d03b      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a63      	ldr	r2, [pc, #396]	; (8008d04 <HAL_DMA_IRQHandler+0x408>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d036      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a61      	ldr	r2, [pc, #388]	; (8008d08 <HAL_DMA_IRQHandler+0x40c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d031      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a60      	ldr	r2, [pc, #384]	; (8008d0c <HAL_DMA_IRQHandler+0x410>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d02c      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a5e      	ldr	r2, [pc, #376]	; (8008d10 <HAL_DMA_IRQHandler+0x414>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d027      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a5d      	ldr	r2, [pc, #372]	; (8008d14 <HAL_DMA_IRQHandler+0x418>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d022      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a5b      	ldr	r2, [pc, #364]	; (8008d18 <HAL_DMA_IRQHandler+0x41c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d01d      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a5a      	ldr	r2, [pc, #360]	; (8008d1c <HAL_DMA_IRQHandler+0x420>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d018      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a58      	ldr	r2, [pc, #352]	; (8008d20 <HAL_DMA_IRQHandler+0x424>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d013      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a57      	ldr	r2, [pc, #348]	; (8008d24 <HAL_DMA_IRQHandler+0x428>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00e      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a55      	ldr	r2, [pc, #340]	; (8008d28 <HAL_DMA_IRQHandler+0x42c>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d009      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a54      	ldr	r2, [pc, #336]	; (8008d2c <HAL_DMA_IRQHandler+0x430>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d004      	beq.n	8008bea <HAL_DMA_IRQHandler+0x2ee>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a52      	ldr	r2, [pc, #328]	; (8008d30 <HAL_DMA_IRQHandler+0x434>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d10a      	bne.n	8008c00 <HAL_DMA_IRQHandler+0x304>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bf14      	ite	ne
 8008bf8:	2301      	movne	r3, #1
 8008bfa:	2300      	moveq	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	e003      	b.n	8008c08 <HAL_DMA_IRQHandler+0x30c>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2300      	movs	r3, #0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00d      	beq.n	8008c28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c10:	f003 031f 	and.w	r3, r3, #31
 8008c14:	2201      	movs	r2, #1
 8008c16:	409a      	lsls	r2, r3
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c20:	f043 0202 	orr.w	r2, r3, #2
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c2c:	f003 031f 	and.w	r3, r3, #31
 8008c30:	2204      	movs	r2, #4
 8008c32:	409a      	lsls	r2, r3
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	4013      	ands	r3, r2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 808f 	beq.w	8008d5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a2c      	ldr	r2, [pc, #176]	; (8008cf4 <HAL_DMA_IRQHandler+0x3f8>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d04a      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a2a      	ldr	r2, [pc, #168]	; (8008cf8 <HAL_DMA_IRQHandler+0x3fc>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d045      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a29      	ldr	r2, [pc, #164]	; (8008cfc <HAL_DMA_IRQHandler+0x400>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d040      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a27      	ldr	r2, [pc, #156]	; (8008d00 <HAL_DMA_IRQHandler+0x404>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d03b      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a26      	ldr	r2, [pc, #152]	; (8008d04 <HAL_DMA_IRQHandler+0x408>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d036      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a24      	ldr	r2, [pc, #144]	; (8008d08 <HAL_DMA_IRQHandler+0x40c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d031      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a23      	ldr	r2, [pc, #140]	; (8008d0c <HAL_DMA_IRQHandler+0x410>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d02c      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a21      	ldr	r2, [pc, #132]	; (8008d10 <HAL_DMA_IRQHandler+0x414>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d027      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a20      	ldr	r2, [pc, #128]	; (8008d14 <HAL_DMA_IRQHandler+0x418>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d022      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a1e      	ldr	r2, [pc, #120]	; (8008d18 <HAL_DMA_IRQHandler+0x41c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d01d      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <HAL_DMA_IRQHandler+0x420>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d018      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a1b      	ldr	r2, [pc, #108]	; (8008d20 <HAL_DMA_IRQHandler+0x424>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d013      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a1a      	ldr	r2, [pc, #104]	; (8008d24 <HAL_DMA_IRQHandler+0x428>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d00e      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a18      	ldr	r2, [pc, #96]	; (8008d28 <HAL_DMA_IRQHandler+0x42c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d009      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a17      	ldr	r2, [pc, #92]	; (8008d2c <HAL_DMA_IRQHandler+0x430>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d004      	beq.n	8008cde <HAL_DMA_IRQHandler+0x3e2>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a15      	ldr	r2, [pc, #84]	; (8008d30 <HAL_DMA_IRQHandler+0x434>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d12a      	bne.n	8008d34 <HAL_DMA_IRQHandler+0x438>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bf14      	ite	ne
 8008cec:	2301      	movne	r3, #1
 8008cee:	2300      	moveq	r3, #0
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	e023      	b.n	8008d3c <HAL_DMA_IRQHandler+0x440>
 8008cf4:	40020010 	.word	0x40020010
 8008cf8:	40020028 	.word	0x40020028
 8008cfc:	40020040 	.word	0x40020040
 8008d00:	40020058 	.word	0x40020058
 8008d04:	40020070 	.word	0x40020070
 8008d08:	40020088 	.word	0x40020088
 8008d0c:	400200a0 	.word	0x400200a0
 8008d10:	400200b8 	.word	0x400200b8
 8008d14:	40020410 	.word	0x40020410
 8008d18:	40020428 	.word	0x40020428
 8008d1c:	40020440 	.word	0x40020440
 8008d20:	40020458 	.word	0x40020458
 8008d24:	40020470 	.word	0x40020470
 8008d28:	40020488 	.word	0x40020488
 8008d2c:	400204a0 	.word	0x400204a0
 8008d30:	400204b8 	.word	0x400204b8
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00d      	beq.n	8008d5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d44:	f003 031f 	and.w	r3, r3, #31
 8008d48:	2204      	movs	r2, #4
 8008d4a:	409a      	lsls	r2, r3
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d54:	f043 0204 	orr.w	r2, r3, #4
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d60:	f003 031f 	and.w	r3, r3, #31
 8008d64:	2210      	movs	r2, #16
 8008d66:	409a      	lsls	r2, r3
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 80a6 	beq.w	8008ebe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a85      	ldr	r2, [pc, #532]	; (8008f8c <HAL_DMA_IRQHandler+0x690>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d04a      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a83      	ldr	r2, [pc, #524]	; (8008f90 <HAL_DMA_IRQHandler+0x694>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d045      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a82      	ldr	r2, [pc, #520]	; (8008f94 <HAL_DMA_IRQHandler+0x698>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d040      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a80      	ldr	r2, [pc, #512]	; (8008f98 <HAL_DMA_IRQHandler+0x69c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d03b      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a7f      	ldr	r2, [pc, #508]	; (8008f9c <HAL_DMA_IRQHandler+0x6a0>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d036      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a7d      	ldr	r2, [pc, #500]	; (8008fa0 <HAL_DMA_IRQHandler+0x6a4>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d031      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a7c      	ldr	r2, [pc, #496]	; (8008fa4 <HAL_DMA_IRQHandler+0x6a8>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d02c      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a7a      	ldr	r2, [pc, #488]	; (8008fa8 <HAL_DMA_IRQHandler+0x6ac>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d027      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a79      	ldr	r2, [pc, #484]	; (8008fac <HAL_DMA_IRQHandler+0x6b0>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d022      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a77      	ldr	r2, [pc, #476]	; (8008fb0 <HAL_DMA_IRQHandler+0x6b4>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d01d      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a76      	ldr	r2, [pc, #472]	; (8008fb4 <HAL_DMA_IRQHandler+0x6b8>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d018      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a74      	ldr	r2, [pc, #464]	; (8008fb8 <HAL_DMA_IRQHandler+0x6bc>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d013      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a73      	ldr	r2, [pc, #460]	; (8008fbc <HAL_DMA_IRQHandler+0x6c0>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00e      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a71      	ldr	r2, [pc, #452]	; (8008fc0 <HAL_DMA_IRQHandler+0x6c4>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d009      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a70      	ldr	r2, [pc, #448]	; (8008fc4 <HAL_DMA_IRQHandler+0x6c8>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d004      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x516>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a6e      	ldr	r2, [pc, #440]	; (8008fc8 <HAL_DMA_IRQHandler+0x6cc>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d10a      	bne.n	8008e28 <HAL_DMA_IRQHandler+0x52c>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bf14      	ite	ne
 8008e20:	2301      	movne	r3, #1
 8008e22:	2300      	moveq	r3, #0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	e009      	b.n	8008e3c <HAL_DMA_IRQHandler+0x540>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	bf14      	ite	ne
 8008e36:	2301      	movne	r3, #1
 8008e38:	2300      	moveq	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d03e      	beq.n	8008ebe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e44:	f003 031f 	and.w	r3, r3, #31
 8008e48:	2210      	movs	r2, #16
 8008e4a:	409a      	lsls	r2, r3
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d018      	beq.n	8008e90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d108      	bne.n	8008e7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d024      	beq.n	8008ebe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	4798      	blx	r3
 8008e7c:	e01f      	b.n	8008ebe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01b      	beq.n	8008ebe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
 8008e8e:	e016      	b.n	8008ebe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d107      	bne.n	8008eae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 0208 	bic.w	r2, r2, #8
 8008eac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ec2:	f003 031f 	and.w	r3, r3, #31
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	409a      	lsls	r2, r3
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 8110 	beq.w	80090f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a2c      	ldr	r2, [pc, #176]	; (8008f8c <HAL_DMA_IRQHandler+0x690>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d04a      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a2b      	ldr	r2, [pc, #172]	; (8008f90 <HAL_DMA_IRQHandler+0x694>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d045      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a29      	ldr	r2, [pc, #164]	; (8008f94 <HAL_DMA_IRQHandler+0x698>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d040      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a28      	ldr	r2, [pc, #160]	; (8008f98 <HAL_DMA_IRQHandler+0x69c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d03b      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a26      	ldr	r2, [pc, #152]	; (8008f9c <HAL_DMA_IRQHandler+0x6a0>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d036      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a25      	ldr	r2, [pc, #148]	; (8008fa0 <HAL_DMA_IRQHandler+0x6a4>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d031      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a23      	ldr	r2, [pc, #140]	; (8008fa4 <HAL_DMA_IRQHandler+0x6a8>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d02c      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a22      	ldr	r2, [pc, #136]	; (8008fa8 <HAL_DMA_IRQHandler+0x6ac>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d027      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a20      	ldr	r2, [pc, #128]	; (8008fac <HAL_DMA_IRQHandler+0x6b0>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d022      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a1f      	ldr	r2, [pc, #124]	; (8008fb0 <HAL_DMA_IRQHandler+0x6b4>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d01d      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a1d      	ldr	r2, [pc, #116]	; (8008fb4 <HAL_DMA_IRQHandler+0x6b8>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d018      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a1c      	ldr	r2, [pc, #112]	; (8008fb8 <HAL_DMA_IRQHandler+0x6bc>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d013      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a1a      	ldr	r2, [pc, #104]	; (8008fbc <HAL_DMA_IRQHandler+0x6c0>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00e      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a19      	ldr	r2, [pc, #100]	; (8008fc0 <HAL_DMA_IRQHandler+0x6c4>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d009      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a17      	ldr	r2, [pc, #92]	; (8008fc4 <HAL_DMA_IRQHandler+0x6c8>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d004      	beq.n	8008f74 <HAL_DMA_IRQHandler+0x678>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a16      	ldr	r2, [pc, #88]	; (8008fc8 <HAL_DMA_IRQHandler+0x6cc>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d12b      	bne.n	8008fcc <HAL_DMA_IRQHandler+0x6d0>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0310 	and.w	r3, r3, #16
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bf14      	ite	ne
 8008f82:	2301      	movne	r3, #1
 8008f84:	2300      	moveq	r3, #0
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	e02a      	b.n	8008fe0 <HAL_DMA_IRQHandler+0x6e4>
 8008f8a:	bf00      	nop
 8008f8c:	40020010 	.word	0x40020010
 8008f90:	40020028 	.word	0x40020028
 8008f94:	40020040 	.word	0x40020040
 8008f98:	40020058 	.word	0x40020058
 8008f9c:	40020070 	.word	0x40020070
 8008fa0:	40020088 	.word	0x40020088
 8008fa4:	400200a0 	.word	0x400200a0
 8008fa8:	400200b8 	.word	0x400200b8
 8008fac:	40020410 	.word	0x40020410
 8008fb0:	40020428 	.word	0x40020428
 8008fb4:	40020440 	.word	0x40020440
 8008fb8:	40020458 	.word	0x40020458
 8008fbc:	40020470 	.word	0x40020470
 8008fc0:	40020488 	.word	0x40020488
 8008fc4:	400204a0 	.word	0x400204a0
 8008fc8:	400204b8 	.word	0x400204b8
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bf14      	ite	ne
 8008fda:	2301      	movne	r3, #1
 8008fdc:	2300      	moveq	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 8087 	beq.w	80090f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fea:	f003 031f 	and.w	r3, r3, #31
 8008fee:	2220      	movs	r2, #32
 8008ff0:	409a      	lsls	r2, r3
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	d139      	bne.n	8009076 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0216 	bic.w	r2, r2, #22
 8009010:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	695a      	ldr	r2, [r3, #20]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009020:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009026:	2b00      	cmp	r3, #0
 8009028:	d103      	bne.n	8009032 <HAL_DMA_IRQHandler+0x736>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 0208 	bic.w	r2, r2, #8
 8009040:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009046:	f003 031f 	and.w	r3, r3, #31
 800904a:	223f      	movs	r2, #63	; 0x3f
 800904c:	409a      	lsls	r2, r3
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 834a 	beq.w	8009700 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	4798      	blx	r3
          }
          return;
 8009074:	e344      	b.n	8009700 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d018      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d108      	bne.n	80090a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009096:	2b00      	cmp	r3, #0
 8009098:	d02c      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	4798      	blx	r3
 80090a2:	e027      	b.n	80090f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d023      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
 80090b4:	e01e      	b.n	80090f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10f      	bne.n	80090e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0210 	bic.w	r2, r2, #16
 80090d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 8306 	beq.w	800970a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	f000 8088 	beq.w	800921c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2204      	movs	r2, #4
 8009110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a7a      	ldr	r2, [pc, #488]	; (8009304 <HAL_DMA_IRQHandler+0xa08>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d04a      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a79      	ldr	r2, [pc, #484]	; (8009308 <HAL_DMA_IRQHandler+0xa0c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d045      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a77      	ldr	r2, [pc, #476]	; (800930c <HAL_DMA_IRQHandler+0xa10>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d040      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a76      	ldr	r2, [pc, #472]	; (8009310 <HAL_DMA_IRQHandler+0xa14>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d03b      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a74      	ldr	r2, [pc, #464]	; (8009314 <HAL_DMA_IRQHandler+0xa18>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d036      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a73      	ldr	r2, [pc, #460]	; (8009318 <HAL_DMA_IRQHandler+0xa1c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d031      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a71      	ldr	r2, [pc, #452]	; (800931c <HAL_DMA_IRQHandler+0xa20>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d02c      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a70      	ldr	r2, [pc, #448]	; (8009320 <HAL_DMA_IRQHandler+0xa24>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d027      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a6e      	ldr	r2, [pc, #440]	; (8009324 <HAL_DMA_IRQHandler+0xa28>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d022      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a6d      	ldr	r2, [pc, #436]	; (8009328 <HAL_DMA_IRQHandler+0xa2c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d01d      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a6b      	ldr	r2, [pc, #428]	; (800932c <HAL_DMA_IRQHandler+0xa30>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d018      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a6a      	ldr	r2, [pc, #424]	; (8009330 <HAL_DMA_IRQHandler+0xa34>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d013      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a68      	ldr	r2, [pc, #416]	; (8009334 <HAL_DMA_IRQHandler+0xa38>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d00e      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a67      	ldr	r2, [pc, #412]	; (8009338 <HAL_DMA_IRQHandler+0xa3c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d009      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a65      	ldr	r2, [pc, #404]	; (800933c <HAL_DMA_IRQHandler+0xa40>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d004      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x8b8>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a64      	ldr	r2, [pc, #400]	; (8009340 <HAL_DMA_IRQHandler+0xa44>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d108      	bne.n	80091c6 <HAL_DMA_IRQHandler+0x8ca>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 0201 	bic.w	r2, r2, #1
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e007      	b.n	80091d6 <HAL_DMA_IRQHandler+0x8da>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 0201 	bic.w	r2, r2, #1
 80091d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3301      	adds	r3, #1
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091de:	429a      	cmp	r2, r3
 80091e0:	d307      	bcc.n	80091f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1f2      	bne.n	80091d6 <HAL_DMA_IRQHandler+0x8da>
 80091f0:	e000      	b.n	80091f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80091f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d004      	beq.n	800920c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2203      	movs	r2, #3
 8009206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800920a:	e003      	b.n	8009214 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 8272 	beq.w	800970a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	4798      	blx	r3
 800922e:	e26c      	b.n	800970a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a43      	ldr	r2, [pc, #268]	; (8009344 <HAL_DMA_IRQHandler+0xa48>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d022      	beq.n	8009280 <HAL_DMA_IRQHandler+0x984>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a42      	ldr	r2, [pc, #264]	; (8009348 <HAL_DMA_IRQHandler+0xa4c>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d01d      	beq.n	8009280 <HAL_DMA_IRQHandler+0x984>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a40      	ldr	r2, [pc, #256]	; (800934c <HAL_DMA_IRQHandler+0xa50>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d018      	beq.n	8009280 <HAL_DMA_IRQHandler+0x984>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a3f      	ldr	r2, [pc, #252]	; (8009350 <HAL_DMA_IRQHandler+0xa54>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d013      	beq.n	8009280 <HAL_DMA_IRQHandler+0x984>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a3d      	ldr	r2, [pc, #244]	; (8009354 <HAL_DMA_IRQHandler+0xa58>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00e      	beq.n	8009280 <HAL_DMA_IRQHandler+0x984>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a3c      	ldr	r2, [pc, #240]	; (8009358 <HAL_DMA_IRQHandler+0xa5c>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d009      	beq.n	8009280 <HAL_DMA_IRQHandler+0x984>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a3a      	ldr	r2, [pc, #232]	; (800935c <HAL_DMA_IRQHandler+0xa60>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d004      	beq.n	8009280 <HAL_DMA_IRQHandler+0x984>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a39      	ldr	r2, [pc, #228]	; (8009360 <HAL_DMA_IRQHandler+0xa64>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d101      	bne.n	8009284 <HAL_DMA_IRQHandler+0x988>
 8009280:	2301      	movs	r3, #1
 8009282:	e000      	b.n	8009286 <HAL_DMA_IRQHandler+0x98a>
 8009284:	2300      	movs	r3, #0
 8009286:	2b00      	cmp	r3, #0
 8009288:	f000 823f 	beq.w	800970a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009298:	f003 031f 	and.w	r3, r3, #31
 800929c:	2204      	movs	r2, #4
 800929e:	409a      	lsls	r2, r3
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	4013      	ands	r3, r2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80cd 	beq.w	8009444 <HAL_DMA_IRQHandler+0xb48>
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 80c7 	beq.w	8009444 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ba:	f003 031f 	and.w	r3, r3, #31
 80092be:	2204      	movs	r2, #4
 80092c0:	409a      	lsls	r2, r3
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d049      	beq.n	8009364 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d109      	bne.n	80092ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 8210 	beq.w	8009704 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092ec:	e20a      	b.n	8009704 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 8206 	beq.w	8009704 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009300:	e200      	b.n	8009704 <HAL_DMA_IRQHandler+0xe08>
 8009302:	bf00      	nop
 8009304:	40020010 	.word	0x40020010
 8009308:	40020028 	.word	0x40020028
 800930c:	40020040 	.word	0x40020040
 8009310:	40020058 	.word	0x40020058
 8009314:	40020070 	.word	0x40020070
 8009318:	40020088 	.word	0x40020088
 800931c:	400200a0 	.word	0x400200a0
 8009320:	400200b8 	.word	0x400200b8
 8009324:	40020410 	.word	0x40020410
 8009328:	40020428 	.word	0x40020428
 800932c:	40020440 	.word	0x40020440
 8009330:	40020458 	.word	0x40020458
 8009334:	40020470 	.word	0x40020470
 8009338:	40020488 	.word	0x40020488
 800933c:	400204a0 	.word	0x400204a0
 8009340:	400204b8 	.word	0x400204b8
 8009344:	58025408 	.word	0x58025408
 8009348:	5802541c 	.word	0x5802541c
 800934c:	58025430 	.word	0x58025430
 8009350:	58025444 	.word	0x58025444
 8009354:	58025458 	.word	0x58025458
 8009358:	5802546c 	.word	0x5802546c
 800935c:	58025480 	.word	0x58025480
 8009360:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f003 0320 	and.w	r3, r3, #32
 800936a:	2b00      	cmp	r3, #0
 800936c:	d160      	bne.n	8009430 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a7f      	ldr	r2, [pc, #508]	; (8009570 <HAL_DMA_IRQHandler+0xc74>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d04a      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a7d      	ldr	r2, [pc, #500]	; (8009574 <HAL_DMA_IRQHandler+0xc78>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d045      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a7c      	ldr	r2, [pc, #496]	; (8009578 <HAL_DMA_IRQHandler+0xc7c>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d040      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a7a      	ldr	r2, [pc, #488]	; (800957c <HAL_DMA_IRQHandler+0xc80>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d03b      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a79      	ldr	r2, [pc, #484]	; (8009580 <HAL_DMA_IRQHandler+0xc84>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d036      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a77      	ldr	r2, [pc, #476]	; (8009584 <HAL_DMA_IRQHandler+0xc88>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d031      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a76      	ldr	r2, [pc, #472]	; (8009588 <HAL_DMA_IRQHandler+0xc8c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d02c      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a74      	ldr	r2, [pc, #464]	; (800958c <HAL_DMA_IRQHandler+0xc90>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d027      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a73      	ldr	r2, [pc, #460]	; (8009590 <HAL_DMA_IRQHandler+0xc94>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d022      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a71      	ldr	r2, [pc, #452]	; (8009594 <HAL_DMA_IRQHandler+0xc98>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d01d      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a70      	ldr	r2, [pc, #448]	; (8009598 <HAL_DMA_IRQHandler+0xc9c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d018      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a6e      	ldr	r2, [pc, #440]	; (800959c <HAL_DMA_IRQHandler+0xca0>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d013      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a6d      	ldr	r2, [pc, #436]	; (80095a0 <HAL_DMA_IRQHandler+0xca4>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d00e      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a6b      	ldr	r2, [pc, #428]	; (80095a4 <HAL_DMA_IRQHandler+0xca8>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d009      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a6a      	ldr	r2, [pc, #424]	; (80095a8 <HAL_DMA_IRQHandler+0xcac>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d004      	beq.n	800940e <HAL_DMA_IRQHandler+0xb12>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a68      	ldr	r2, [pc, #416]	; (80095ac <HAL_DMA_IRQHandler+0xcb0>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d108      	bne.n	8009420 <HAL_DMA_IRQHandler+0xb24>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f022 0208 	bic.w	r2, r2, #8
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	e007      	b.n	8009430 <HAL_DMA_IRQHandler+0xb34>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0204 	bic.w	r2, r2, #4
 800942e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 8165 	beq.w	8009704 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009442:	e15f      	b.n	8009704 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009448:	f003 031f 	and.w	r3, r3, #31
 800944c:	2202      	movs	r2, #2
 800944e:	409a      	lsls	r2, r3
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	4013      	ands	r3, r2
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 80c5 	beq.w	80095e4 <HAL_DMA_IRQHandler+0xce8>
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 80bf 	beq.w	80095e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800946a:	f003 031f 	and.w	r3, r3, #31
 800946e:	2202      	movs	r2, #2
 8009470:	409a      	lsls	r2, r3
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d018      	beq.n	80094b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d109      	bne.n	800949e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 813a 	beq.w	8009708 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800949c:	e134      	b.n	8009708 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 8130 	beq.w	8009708 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094b0:	e12a      	b.n	8009708 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f003 0320 	and.w	r3, r3, #32
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f040 8089 	bne.w	80095d0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a2b      	ldr	r2, [pc, #172]	; (8009570 <HAL_DMA_IRQHandler+0xc74>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d04a      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a29      	ldr	r2, [pc, #164]	; (8009574 <HAL_DMA_IRQHandler+0xc78>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d045      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a28      	ldr	r2, [pc, #160]	; (8009578 <HAL_DMA_IRQHandler+0xc7c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d040      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a26      	ldr	r2, [pc, #152]	; (800957c <HAL_DMA_IRQHandler+0xc80>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d03b      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a25      	ldr	r2, [pc, #148]	; (8009580 <HAL_DMA_IRQHandler+0xc84>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d036      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a23      	ldr	r2, [pc, #140]	; (8009584 <HAL_DMA_IRQHandler+0xc88>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d031      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a22      	ldr	r2, [pc, #136]	; (8009588 <HAL_DMA_IRQHandler+0xc8c>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d02c      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a20      	ldr	r2, [pc, #128]	; (800958c <HAL_DMA_IRQHandler+0xc90>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d027      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <HAL_DMA_IRQHandler+0xc94>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d022      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a1d      	ldr	r2, [pc, #116]	; (8009594 <HAL_DMA_IRQHandler+0xc98>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d01d      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a1c      	ldr	r2, [pc, #112]	; (8009598 <HAL_DMA_IRQHandler+0xc9c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d018      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a1a      	ldr	r2, [pc, #104]	; (800959c <HAL_DMA_IRQHandler+0xca0>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d013      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a19      	ldr	r2, [pc, #100]	; (80095a0 <HAL_DMA_IRQHandler+0xca4>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00e      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a17      	ldr	r2, [pc, #92]	; (80095a4 <HAL_DMA_IRQHandler+0xca8>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d009      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a16      	ldr	r2, [pc, #88]	; (80095a8 <HAL_DMA_IRQHandler+0xcac>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d004      	beq.n	800955e <HAL_DMA_IRQHandler+0xc62>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a14      	ldr	r2, [pc, #80]	; (80095ac <HAL_DMA_IRQHandler+0xcb0>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d128      	bne.n	80095b0 <HAL_DMA_IRQHandler+0xcb4>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 0214 	bic.w	r2, r2, #20
 800956c:	601a      	str	r2, [r3, #0]
 800956e:	e027      	b.n	80095c0 <HAL_DMA_IRQHandler+0xcc4>
 8009570:	40020010 	.word	0x40020010
 8009574:	40020028 	.word	0x40020028
 8009578:	40020040 	.word	0x40020040
 800957c:	40020058 	.word	0x40020058
 8009580:	40020070 	.word	0x40020070
 8009584:	40020088 	.word	0x40020088
 8009588:	400200a0 	.word	0x400200a0
 800958c:	400200b8 	.word	0x400200b8
 8009590:	40020410 	.word	0x40020410
 8009594:	40020428 	.word	0x40020428
 8009598:	40020440 	.word	0x40020440
 800959c:	40020458 	.word	0x40020458
 80095a0:	40020470 	.word	0x40020470
 80095a4:	40020488 	.word	0x40020488
 80095a8:	400204a0 	.word	0x400204a0
 80095ac:	400204b8 	.word	0x400204b8
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 020a 	bic.w	r2, r2, #10
 80095be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 8097 	beq.w	8009708 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095e2:	e091      	b.n	8009708 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e8:	f003 031f 	and.w	r3, r3, #31
 80095ec:	2208      	movs	r2, #8
 80095ee:	409a      	lsls	r2, r3
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	4013      	ands	r3, r2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 8088 	beq.w	800970a <HAL_DMA_IRQHandler+0xe0e>
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f003 0308 	and.w	r3, r3, #8
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 8082 	beq.w	800970a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a41      	ldr	r2, [pc, #260]	; (8009710 <HAL_DMA_IRQHandler+0xe14>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d04a      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a3f      	ldr	r2, [pc, #252]	; (8009714 <HAL_DMA_IRQHandler+0xe18>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d045      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a3e      	ldr	r2, [pc, #248]	; (8009718 <HAL_DMA_IRQHandler+0xe1c>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d040      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a3c      	ldr	r2, [pc, #240]	; (800971c <HAL_DMA_IRQHandler+0xe20>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d03b      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a3b      	ldr	r2, [pc, #236]	; (8009720 <HAL_DMA_IRQHandler+0xe24>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d036      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a39      	ldr	r2, [pc, #228]	; (8009724 <HAL_DMA_IRQHandler+0xe28>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d031      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a38      	ldr	r2, [pc, #224]	; (8009728 <HAL_DMA_IRQHandler+0xe2c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d02c      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a36      	ldr	r2, [pc, #216]	; (800972c <HAL_DMA_IRQHandler+0xe30>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d027      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a35      	ldr	r2, [pc, #212]	; (8009730 <HAL_DMA_IRQHandler+0xe34>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d022      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a33      	ldr	r2, [pc, #204]	; (8009734 <HAL_DMA_IRQHandler+0xe38>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d01d      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a32      	ldr	r2, [pc, #200]	; (8009738 <HAL_DMA_IRQHandler+0xe3c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d018      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a30      	ldr	r2, [pc, #192]	; (800973c <HAL_DMA_IRQHandler+0xe40>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d013      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a2f      	ldr	r2, [pc, #188]	; (8009740 <HAL_DMA_IRQHandler+0xe44>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d00e      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a2d      	ldr	r2, [pc, #180]	; (8009744 <HAL_DMA_IRQHandler+0xe48>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d009      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a2c      	ldr	r2, [pc, #176]	; (8009748 <HAL_DMA_IRQHandler+0xe4c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d004      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xdaa>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a2a      	ldr	r2, [pc, #168]	; (800974c <HAL_DMA_IRQHandler+0xe50>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d108      	bne.n	80096b8 <HAL_DMA_IRQHandler+0xdbc>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 021c 	bic.w	r2, r2, #28
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	e007      	b.n	80096c8 <HAL_DMA_IRQHandler+0xdcc>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 020e 	bic.w	r2, r2, #14
 80096c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096cc:	f003 031f 	and.w	r3, r3, #31
 80096d0:	2201      	movs	r2, #1
 80096d2:	409a      	lsls	r2, r3
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d009      	beq.n	800970a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	4798      	blx	r3
 80096fe:	e004      	b.n	800970a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009700:	bf00      	nop
 8009702:	e002      	b.n	800970a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009704:	bf00      	nop
 8009706:	e000      	b.n	800970a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009708:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800970a:	3728      	adds	r7, #40	; 0x28
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	40020010 	.word	0x40020010
 8009714:	40020028 	.word	0x40020028
 8009718:	40020040 	.word	0x40020040
 800971c:	40020058 	.word	0x40020058
 8009720:	40020070 	.word	0x40020070
 8009724:	40020088 	.word	0x40020088
 8009728:	400200a0 	.word	0x400200a0
 800972c:	400200b8 	.word	0x400200b8
 8009730:	40020410 	.word	0x40020410
 8009734:	40020428 	.word	0x40020428
 8009738:	40020440 	.word	0x40020440
 800973c:	40020458 	.word	0x40020458
 8009740:	40020470 	.word	0x40020470
 8009744:	40020488 	.word	0x40020488
 8009748:	400204a0 	.word	0x400204a0
 800974c:	400204b8 	.word	0x400204b8

08009750 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009750:	b480      	push	{r7}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009762:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009768:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a7f      	ldr	r2, [pc, #508]	; (800996c <DMA_SetConfig+0x21c>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d072      	beq.n	800985a <DMA_SetConfig+0x10a>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a7d      	ldr	r2, [pc, #500]	; (8009970 <DMA_SetConfig+0x220>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d06d      	beq.n	800985a <DMA_SetConfig+0x10a>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a7c      	ldr	r2, [pc, #496]	; (8009974 <DMA_SetConfig+0x224>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d068      	beq.n	800985a <DMA_SetConfig+0x10a>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a7a      	ldr	r2, [pc, #488]	; (8009978 <DMA_SetConfig+0x228>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d063      	beq.n	800985a <DMA_SetConfig+0x10a>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a79      	ldr	r2, [pc, #484]	; (800997c <DMA_SetConfig+0x22c>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d05e      	beq.n	800985a <DMA_SetConfig+0x10a>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a77      	ldr	r2, [pc, #476]	; (8009980 <DMA_SetConfig+0x230>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d059      	beq.n	800985a <DMA_SetConfig+0x10a>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a76      	ldr	r2, [pc, #472]	; (8009984 <DMA_SetConfig+0x234>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d054      	beq.n	800985a <DMA_SetConfig+0x10a>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a74      	ldr	r2, [pc, #464]	; (8009988 <DMA_SetConfig+0x238>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d04f      	beq.n	800985a <DMA_SetConfig+0x10a>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a73      	ldr	r2, [pc, #460]	; (800998c <DMA_SetConfig+0x23c>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d04a      	beq.n	800985a <DMA_SetConfig+0x10a>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a71      	ldr	r2, [pc, #452]	; (8009990 <DMA_SetConfig+0x240>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d045      	beq.n	800985a <DMA_SetConfig+0x10a>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a70      	ldr	r2, [pc, #448]	; (8009994 <DMA_SetConfig+0x244>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d040      	beq.n	800985a <DMA_SetConfig+0x10a>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a6e      	ldr	r2, [pc, #440]	; (8009998 <DMA_SetConfig+0x248>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d03b      	beq.n	800985a <DMA_SetConfig+0x10a>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a6d      	ldr	r2, [pc, #436]	; (800999c <DMA_SetConfig+0x24c>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d036      	beq.n	800985a <DMA_SetConfig+0x10a>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a6b      	ldr	r2, [pc, #428]	; (80099a0 <DMA_SetConfig+0x250>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d031      	beq.n	800985a <DMA_SetConfig+0x10a>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a6a      	ldr	r2, [pc, #424]	; (80099a4 <DMA_SetConfig+0x254>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d02c      	beq.n	800985a <DMA_SetConfig+0x10a>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a68      	ldr	r2, [pc, #416]	; (80099a8 <DMA_SetConfig+0x258>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d027      	beq.n	800985a <DMA_SetConfig+0x10a>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a67      	ldr	r2, [pc, #412]	; (80099ac <DMA_SetConfig+0x25c>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d022      	beq.n	800985a <DMA_SetConfig+0x10a>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a65      	ldr	r2, [pc, #404]	; (80099b0 <DMA_SetConfig+0x260>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d01d      	beq.n	800985a <DMA_SetConfig+0x10a>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a64      	ldr	r2, [pc, #400]	; (80099b4 <DMA_SetConfig+0x264>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d018      	beq.n	800985a <DMA_SetConfig+0x10a>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a62      	ldr	r2, [pc, #392]	; (80099b8 <DMA_SetConfig+0x268>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d013      	beq.n	800985a <DMA_SetConfig+0x10a>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a61      	ldr	r2, [pc, #388]	; (80099bc <DMA_SetConfig+0x26c>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d00e      	beq.n	800985a <DMA_SetConfig+0x10a>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a5f      	ldr	r2, [pc, #380]	; (80099c0 <DMA_SetConfig+0x270>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d009      	beq.n	800985a <DMA_SetConfig+0x10a>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a5e      	ldr	r2, [pc, #376]	; (80099c4 <DMA_SetConfig+0x274>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d004      	beq.n	800985a <DMA_SetConfig+0x10a>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a5c      	ldr	r2, [pc, #368]	; (80099c8 <DMA_SetConfig+0x278>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d101      	bne.n	800985e <DMA_SetConfig+0x10e>
 800985a:	2301      	movs	r3, #1
 800985c:	e000      	b.n	8009860 <DMA_SetConfig+0x110>
 800985e:	2300      	movs	r3, #0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00d      	beq.n	8009880 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800986c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009872:	2b00      	cmp	r3, #0
 8009874:	d004      	beq.n	8009880 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800987e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a39      	ldr	r2, [pc, #228]	; (800996c <DMA_SetConfig+0x21c>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d04a      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a38      	ldr	r2, [pc, #224]	; (8009970 <DMA_SetConfig+0x220>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d045      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a36      	ldr	r2, [pc, #216]	; (8009974 <DMA_SetConfig+0x224>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d040      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a35      	ldr	r2, [pc, #212]	; (8009978 <DMA_SetConfig+0x228>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d03b      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a33      	ldr	r2, [pc, #204]	; (800997c <DMA_SetConfig+0x22c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d036      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a32      	ldr	r2, [pc, #200]	; (8009980 <DMA_SetConfig+0x230>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d031      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a30      	ldr	r2, [pc, #192]	; (8009984 <DMA_SetConfig+0x234>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d02c      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a2f      	ldr	r2, [pc, #188]	; (8009988 <DMA_SetConfig+0x238>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d027      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a2d      	ldr	r2, [pc, #180]	; (800998c <DMA_SetConfig+0x23c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d022      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a2c      	ldr	r2, [pc, #176]	; (8009990 <DMA_SetConfig+0x240>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d01d      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a2a      	ldr	r2, [pc, #168]	; (8009994 <DMA_SetConfig+0x244>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d018      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a29      	ldr	r2, [pc, #164]	; (8009998 <DMA_SetConfig+0x248>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d013      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a27      	ldr	r2, [pc, #156]	; (800999c <DMA_SetConfig+0x24c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d00e      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a26      	ldr	r2, [pc, #152]	; (80099a0 <DMA_SetConfig+0x250>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d009      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a24      	ldr	r2, [pc, #144]	; (80099a4 <DMA_SetConfig+0x254>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d004      	beq.n	8009920 <DMA_SetConfig+0x1d0>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a23      	ldr	r2, [pc, #140]	; (80099a8 <DMA_SetConfig+0x258>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d101      	bne.n	8009924 <DMA_SetConfig+0x1d4>
 8009920:	2301      	movs	r3, #1
 8009922:	e000      	b.n	8009926 <DMA_SetConfig+0x1d6>
 8009924:	2300      	movs	r3, #0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d059      	beq.n	80099de <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800992e:	f003 031f 	and.w	r3, r3, #31
 8009932:	223f      	movs	r2, #63	; 0x3f
 8009934:	409a      	lsls	r2, r3
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009948:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	2b40      	cmp	r3, #64	; 0x40
 8009958:	d138      	bne.n	80099cc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800996a:	e086      	b.n	8009a7a <DMA_SetConfig+0x32a>
 800996c:	40020010 	.word	0x40020010
 8009970:	40020028 	.word	0x40020028
 8009974:	40020040 	.word	0x40020040
 8009978:	40020058 	.word	0x40020058
 800997c:	40020070 	.word	0x40020070
 8009980:	40020088 	.word	0x40020088
 8009984:	400200a0 	.word	0x400200a0
 8009988:	400200b8 	.word	0x400200b8
 800998c:	40020410 	.word	0x40020410
 8009990:	40020428 	.word	0x40020428
 8009994:	40020440 	.word	0x40020440
 8009998:	40020458 	.word	0x40020458
 800999c:	40020470 	.word	0x40020470
 80099a0:	40020488 	.word	0x40020488
 80099a4:	400204a0 	.word	0x400204a0
 80099a8:	400204b8 	.word	0x400204b8
 80099ac:	58025408 	.word	0x58025408
 80099b0:	5802541c 	.word	0x5802541c
 80099b4:	58025430 	.word	0x58025430
 80099b8:	58025444 	.word	0x58025444
 80099bc:	58025458 	.word	0x58025458
 80099c0:	5802546c 	.word	0x5802546c
 80099c4:	58025480 	.word	0x58025480
 80099c8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	60da      	str	r2, [r3, #12]
}
 80099dc:	e04d      	b.n	8009a7a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a29      	ldr	r2, [pc, #164]	; (8009a88 <DMA_SetConfig+0x338>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d022      	beq.n	8009a2e <DMA_SetConfig+0x2de>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a27      	ldr	r2, [pc, #156]	; (8009a8c <DMA_SetConfig+0x33c>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d01d      	beq.n	8009a2e <DMA_SetConfig+0x2de>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a26      	ldr	r2, [pc, #152]	; (8009a90 <DMA_SetConfig+0x340>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d018      	beq.n	8009a2e <DMA_SetConfig+0x2de>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a24      	ldr	r2, [pc, #144]	; (8009a94 <DMA_SetConfig+0x344>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d013      	beq.n	8009a2e <DMA_SetConfig+0x2de>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a23      	ldr	r2, [pc, #140]	; (8009a98 <DMA_SetConfig+0x348>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d00e      	beq.n	8009a2e <DMA_SetConfig+0x2de>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a21      	ldr	r2, [pc, #132]	; (8009a9c <DMA_SetConfig+0x34c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d009      	beq.n	8009a2e <DMA_SetConfig+0x2de>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a20      	ldr	r2, [pc, #128]	; (8009aa0 <DMA_SetConfig+0x350>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d004      	beq.n	8009a2e <DMA_SetConfig+0x2de>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a1e      	ldr	r2, [pc, #120]	; (8009aa4 <DMA_SetConfig+0x354>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d101      	bne.n	8009a32 <DMA_SetConfig+0x2e2>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e000      	b.n	8009a34 <DMA_SetConfig+0x2e4>
 8009a32:	2300      	movs	r3, #0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d020      	beq.n	8009a7a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a3c:	f003 031f 	and.w	r3, r3, #31
 8009a40:	2201      	movs	r2, #1
 8009a42:	409a      	lsls	r2, r3
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	2b40      	cmp	r3, #64	; 0x40
 8009a56:	d108      	bne.n	8009a6a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	60da      	str	r2, [r3, #12]
}
 8009a68:	e007      	b.n	8009a7a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	60da      	str	r2, [r3, #12]
}
 8009a7a:	bf00      	nop
 8009a7c:	371c      	adds	r7, #28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	58025408 	.word	0x58025408
 8009a8c:	5802541c 	.word	0x5802541c
 8009a90:	58025430 	.word	0x58025430
 8009a94:	58025444 	.word	0x58025444
 8009a98:	58025458 	.word	0x58025458
 8009a9c:	5802546c 	.word	0x5802546c
 8009aa0:	58025480 	.word	0x58025480
 8009aa4:	58025494 	.word	0x58025494

08009aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a42      	ldr	r2, [pc, #264]	; (8009bc0 <DMA_CalcBaseAndBitshift+0x118>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d04a      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a41      	ldr	r2, [pc, #260]	; (8009bc4 <DMA_CalcBaseAndBitshift+0x11c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d045      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a3f      	ldr	r2, [pc, #252]	; (8009bc8 <DMA_CalcBaseAndBitshift+0x120>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d040      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a3e      	ldr	r2, [pc, #248]	; (8009bcc <DMA_CalcBaseAndBitshift+0x124>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d03b      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a3c      	ldr	r2, [pc, #240]	; (8009bd0 <DMA_CalcBaseAndBitshift+0x128>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d036      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a3b      	ldr	r2, [pc, #236]	; (8009bd4 <DMA_CalcBaseAndBitshift+0x12c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d031      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a39      	ldr	r2, [pc, #228]	; (8009bd8 <DMA_CalcBaseAndBitshift+0x130>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d02c      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a38      	ldr	r2, [pc, #224]	; (8009bdc <DMA_CalcBaseAndBitshift+0x134>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d027      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a36      	ldr	r2, [pc, #216]	; (8009be0 <DMA_CalcBaseAndBitshift+0x138>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d022      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a35      	ldr	r2, [pc, #212]	; (8009be4 <DMA_CalcBaseAndBitshift+0x13c>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d01d      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a33      	ldr	r2, [pc, #204]	; (8009be8 <DMA_CalcBaseAndBitshift+0x140>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d018      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a32      	ldr	r2, [pc, #200]	; (8009bec <DMA_CalcBaseAndBitshift+0x144>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d013      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a30      	ldr	r2, [pc, #192]	; (8009bf0 <DMA_CalcBaseAndBitshift+0x148>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d00e      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a2f      	ldr	r2, [pc, #188]	; (8009bf4 <DMA_CalcBaseAndBitshift+0x14c>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d009      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a2d      	ldr	r2, [pc, #180]	; (8009bf8 <DMA_CalcBaseAndBitshift+0x150>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d004      	beq.n	8009b50 <DMA_CalcBaseAndBitshift+0xa8>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a2c      	ldr	r2, [pc, #176]	; (8009bfc <DMA_CalcBaseAndBitshift+0x154>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d101      	bne.n	8009b54 <DMA_CalcBaseAndBitshift+0xac>
 8009b50:	2301      	movs	r3, #1
 8009b52:	e000      	b.n	8009b56 <DMA_CalcBaseAndBitshift+0xae>
 8009b54:	2300      	movs	r3, #0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d024      	beq.n	8009ba4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	3b10      	subs	r3, #16
 8009b62:	4a27      	ldr	r2, [pc, #156]	; (8009c00 <DMA_CalcBaseAndBitshift+0x158>)
 8009b64:	fba2 2303 	umull	r2, r3, r2, r3
 8009b68:	091b      	lsrs	r3, r3, #4
 8009b6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f003 0307 	and.w	r3, r3, #7
 8009b72:	4a24      	ldr	r2, [pc, #144]	; (8009c04 <DMA_CalcBaseAndBitshift+0x15c>)
 8009b74:	5cd3      	ldrb	r3, [r2, r3]
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d908      	bls.n	8009b94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	4b1f      	ldr	r3, [pc, #124]	; (8009c08 <DMA_CalcBaseAndBitshift+0x160>)
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	1d1a      	adds	r2, r3, #4
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	659a      	str	r2, [r3, #88]	; 0x58
 8009b92:	e00d      	b.n	8009bb0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <DMA_CalcBaseAndBitshift+0x160>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8009ba2:	e005      	b.n	8009bb0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	40020010 	.word	0x40020010
 8009bc4:	40020028 	.word	0x40020028
 8009bc8:	40020040 	.word	0x40020040
 8009bcc:	40020058 	.word	0x40020058
 8009bd0:	40020070 	.word	0x40020070
 8009bd4:	40020088 	.word	0x40020088
 8009bd8:	400200a0 	.word	0x400200a0
 8009bdc:	400200b8 	.word	0x400200b8
 8009be0:	40020410 	.word	0x40020410
 8009be4:	40020428 	.word	0x40020428
 8009be8:	40020440 	.word	0x40020440
 8009bec:	40020458 	.word	0x40020458
 8009bf0:	40020470 	.word	0x40020470
 8009bf4:	40020488 	.word	0x40020488
 8009bf8:	400204a0 	.word	0x400204a0
 8009bfc:	400204b8 	.word	0x400204b8
 8009c00:	aaaaaaab 	.word	0xaaaaaaab
 8009c04:	08014d30 	.word	0x08014d30
 8009c08:	fffffc00 	.word	0xfffffc00

08009c0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d120      	bne.n	8009c62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d858      	bhi.n	8009cda <DMA_CheckFifoParam+0xce>
 8009c28:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <DMA_CheckFifoParam+0x24>)
 8009c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2e:	bf00      	nop
 8009c30:	08009c41 	.word	0x08009c41
 8009c34:	08009c53 	.word	0x08009c53
 8009c38:	08009c41 	.word	0x08009c41
 8009c3c:	08009cdb 	.word	0x08009cdb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d048      	beq.n	8009cde <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c50:	e045      	b.n	8009cde <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c5a:	d142      	bne.n	8009ce2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c60:	e03f      	b.n	8009ce2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c6a:	d123      	bne.n	8009cb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	d838      	bhi.n	8009ce6 <DMA_CheckFifoParam+0xda>
 8009c74:	a201      	add	r2, pc, #4	; (adr r2, 8009c7c <DMA_CheckFifoParam+0x70>)
 8009c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7a:	bf00      	nop
 8009c7c:	08009c8d 	.word	0x08009c8d
 8009c80:	08009c93 	.word	0x08009c93
 8009c84:	08009c8d 	.word	0x08009c8d
 8009c88:	08009ca5 	.word	0x08009ca5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	73fb      	strb	r3, [r7, #15]
        break;
 8009c90:	e030      	b.n	8009cf4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d025      	beq.n	8009cea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ca2:	e022      	b.n	8009cea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009cac:	d11f      	bne.n	8009cee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009cb2:	e01c      	b.n	8009cee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d902      	bls.n	8009cc2 <DMA_CheckFifoParam+0xb6>
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d003      	beq.n	8009cc8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009cc0:	e018      	b.n	8009cf4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	73fb      	strb	r3, [r7, #15]
        break;
 8009cc6:	e015      	b.n	8009cf4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00e      	beq.n	8009cf2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cd8:	e00b      	b.n	8009cf2 <DMA_CheckFifoParam+0xe6>
        break;
 8009cda:	bf00      	nop
 8009cdc:	e00a      	b.n	8009cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8009cde:	bf00      	nop
 8009ce0:	e008      	b.n	8009cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8009ce2:	bf00      	nop
 8009ce4:	e006      	b.n	8009cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8009ce6:	bf00      	nop
 8009ce8:	e004      	b.n	8009cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8009cea:	bf00      	nop
 8009cec:	e002      	b.n	8009cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8009cee:	bf00      	nop
 8009cf0:	e000      	b.n	8009cf4 <DMA_CheckFifoParam+0xe8>
    break;
 8009cf2:	bf00      	nop
    }
  }

  return status;
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop

08009d04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a38      	ldr	r2, [pc, #224]	; (8009df8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d022      	beq.n	8009d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a36      	ldr	r2, [pc, #216]	; (8009dfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d01d      	beq.n	8009d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a35      	ldr	r2, [pc, #212]	; (8009e00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d018      	beq.n	8009d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a33      	ldr	r2, [pc, #204]	; (8009e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d013      	beq.n	8009d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a32      	ldr	r2, [pc, #200]	; (8009e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00e      	beq.n	8009d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a30      	ldr	r2, [pc, #192]	; (8009e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d009      	beq.n	8009d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a2f      	ldr	r2, [pc, #188]	; (8009e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d004      	beq.n	8009d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a2d      	ldr	r2, [pc, #180]	; (8009e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d101      	bne.n	8009d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e000      	b.n	8009d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009d66:	2300      	movs	r3, #0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d01a      	beq.n	8009da2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	3b08      	subs	r3, #8
 8009d74:	4a28      	ldr	r2, [pc, #160]	; (8009e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009d76:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7a:	091b      	lsrs	r3, r3, #4
 8009d7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	4b26      	ldr	r3, [pc, #152]	; (8009e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	461a      	mov	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a24      	ldr	r2, [pc, #144]	; (8009e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009d90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f003 031f 	and.w	r3, r3, #31
 8009d98:	2201      	movs	r2, #1
 8009d9a:	409a      	lsls	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009da0:	e024      	b.n	8009dec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	3b10      	subs	r3, #16
 8009daa:	4a1e      	ldr	r2, [pc, #120]	; (8009e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009dac:	fba2 2303 	umull	r2, r3, r2, r3
 8009db0:	091b      	lsrs	r3, r3, #4
 8009db2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	4a1c      	ldr	r2, [pc, #112]	; (8009e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d806      	bhi.n	8009dca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4a1b      	ldr	r2, [pc, #108]	; (8009e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d902      	bls.n	8009dca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4b18      	ldr	r3, [pc, #96]	; (8009e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a16      	ldr	r2, [pc, #88]	; (8009e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009ddc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f003 031f 	and.w	r3, r3, #31
 8009de4:	2201      	movs	r2, #1
 8009de6:	409a      	lsls	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009dec:	bf00      	nop
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	58025408 	.word	0x58025408
 8009dfc:	5802541c 	.word	0x5802541c
 8009e00:	58025430 	.word	0x58025430
 8009e04:	58025444 	.word	0x58025444
 8009e08:	58025458 	.word	0x58025458
 8009e0c:	5802546c 	.word	0x5802546c
 8009e10:	58025480 	.word	0x58025480
 8009e14:	58025494 	.word	0x58025494
 8009e18:	cccccccd 	.word	0xcccccccd
 8009e1c:	16009600 	.word	0x16009600
 8009e20:	58025880 	.word	0x58025880
 8009e24:	aaaaaaab 	.word	0xaaaaaaab
 8009e28:	400204b8 	.word	0x400204b8
 8009e2c:	4002040f 	.word	0x4002040f
 8009e30:	10008200 	.word	0x10008200
 8009e34:	40020880 	.word	0x40020880

08009e38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d04a      	beq.n	8009ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b08      	cmp	r3, #8
 8009e52:	d847      	bhi.n	8009ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a25      	ldr	r2, [pc, #148]	; (8009ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d022      	beq.n	8009ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a24      	ldr	r2, [pc, #144]	; (8009ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d01d      	beq.n	8009ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a22      	ldr	r2, [pc, #136]	; (8009ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d018      	beq.n	8009ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a21      	ldr	r2, [pc, #132]	; (8009efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d013      	beq.n	8009ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a1f      	ldr	r2, [pc, #124]	; (8009f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d00e      	beq.n	8009ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a1e      	ldr	r2, [pc, #120]	; (8009f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d009      	beq.n	8009ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a1c      	ldr	r2, [pc, #112]	; (8009f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d004      	beq.n	8009ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a1b      	ldr	r2, [pc, #108]	; (8009f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d101      	bne.n	8009ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	4b17      	ldr	r3, [pc, #92]	; (8009f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a15      	ldr	r2, [pc, #84]	; (8009f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009ec0:	671a      	str	r2, [r3, #112]	; 0x70
 8009ec2:	e009      	b.n	8009ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	4b14      	ldr	r3, [pc, #80]	; (8009f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	461a      	mov	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a11      	ldr	r2, [pc, #68]	; (8009f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009ed6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	2201      	movs	r2, #1
 8009ede:	409a      	lsls	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009ee4:	bf00      	nop
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	58025408 	.word	0x58025408
 8009ef4:	5802541c 	.word	0x5802541c
 8009ef8:	58025430 	.word	0x58025430
 8009efc:	58025444 	.word	0x58025444
 8009f00:	58025458 	.word	0x58025458
 8009f04:	5802546c 	.word	0x5802546c
 8009f08:	58025480 	.word	0x58025480
 8009f0c:	58025494 	.word	0x58025494
 8009f10:	1600963f 	.word	0x1600963f
 8009f14:	58025940 	.word	0x58025940
 8009f18:	1000823f 	.word	0x1000823f
 8009f1c:	40020940 	.word	0x40020940

08009f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b089      	sub	sp, #36	; 0x24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009f2e:	4b89      	ldr	r3, [pc, #548]	; (800a154 <HAL_GPIO_Init+0x234>)
 8009f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009f32:	e194      	b.n	800a25e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	2101      	movs	r1, #1
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f40:	4013      	ands	r3, r2
 8009f42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 8186 	beq.w	800a258 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f003 0303 	and.w	r3, r3, #3
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d005      	beq.n	8009f64 <HAL_GPIO_Init+0x44>
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f003 0303 	and.w	r3, r3, #3
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d130      	bne.n	8009fc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	2203      	movs	r2, #3
 8009f70:	fa02 f303 	lsl.w	r3, r2, r3
 8009f74:	43db      	mvns	r3, r3
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	4013      	ands	r3, r2
 8009f7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	fa02 f303 	lsl.w	r3, r2, r3
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa2:	43db      	mvns	r3, r3
 8009fa4:	69ba      	ldr	r2, [r7, #24]
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	091b      	lsrs	r3, r3, #4
 8009fb0:	f003 0201 	and.w	r2, r3, #1
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d017      	beq.n	800a002 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	2203      	movs	r2, #3
 8009fde:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe2:	43db      	mvns	r3, r3
 8009fe4:	69ba      	ldr	r2, [r7, #24]
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d123      	bne.n	800a056 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	08da      	lsrs	r2, r3, #3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3208      	adds	r2, #8
 800a016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	220f      	movs	r2, #15
 800a026:	fa02 f303 	lsl.w	r3, r2, r3
 800a02a:	43db      	mvns	r3, r3
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	4013      	ands	r3, r2
 800a030:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	691a      	ldr	r2, [r3, #16]
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	f003 0307 	and.w	r3, r3, #7
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	fa02 f303 	lsl.w	r3, r2, r3
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	4313      	orrs	r3, r2
 800a046:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	08da      	lsrs	r2, r3, #3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3208      	adds	r2, #8
 800a050:	69b9      	ldr	r1, [r7, #24]
 800a052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	2203      	movs	r2, #3
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	43db      	mvns	r3, r3
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	4013      	ands	r3, r2
 800a06c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f003 0203 	and.w	r2, r3, #3
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	fa02 f303 	lsl.w	r3, r2, r3
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	4313      	orrs	r3, r2
 800a082:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	69ba      	ldr	r2, [r7, #24]
 800a088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 80e0 	beq.w	800a258 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a098:	4b2f      	ldr	r3, [pc, #188]	; (800a158 <HAL_GPIO_Init+0x238>)
 800a09a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a09e:	4a2e      	ldr	r2, [pc, #184]	; (800a158 <HAL_GPIO_Init+0x238>)
 800a0a0:	f043 0302 	orr.w	r3, r3, #2
 800a0a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a0a8:	4b2b      	ldr	r3, [pc, #172]	; (800a158 <HAL_GPIO_Init+0x238>)
 800a0aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a0b6:	4a29      	ldr	r2, [pc, #164]	; (800a15c <HAL_GPIO_Init+0x23c>)
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	089b      	lsrs	r3, r3, #2
 800a0bc:	3302      	adds	r3, #2
 800a0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	f003 0303 	and.w	r3, r3, #3
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	220f      	movs	r2, #15
 800a0ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d2:	43db      	mvns	r3, r3
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a20      	ldr	r2, [pc, #128]	; (800a160 <HAL_GPIO_Init+0x240>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d052      	beq.n	800a188 <HAL_GPIO_Init+0x268>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a1f      	ldr	r2, [pc, #124]	; (800a164 <HAL_GPIO_Init+0x244>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d031      	beq.n	800a14e <HAL_GPIO_Init+0x22e>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a1e      	ldr	r2, [pc, #120]	; (800a168 <HAL_GPIO_Init+0x248>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d02b      	beq.n	800a14a <HAL_GPIO_Init+0x22a>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a1d      	ldr	r2, [pc, #116]	; (800a16c <HAL_GPIO_Init+0x24c>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d025      	beq.n	800a146 <HAL_GPIO_Init+0x226>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a1c      	ldr	r2, [pc, #112]	; (800a170 <HAL_GPIO_Init+0x250>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d01f      	beq.n	800a142 <HAL_GPIO_Init+0x222>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a1b      	ldr	r2, [pc, #108]	; (800a174 <HAL_GPIO_Init+0x254>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d019      	beq.n	800a13e <HAL_GPIO_Init+0x21e>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a1a      	ldr	r2, [pc, #104]	; (800a178 <HAL_GPIO_Init+0x258>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d013      	beq.n	800a13a <HAL_GPIO_Init+0x21a>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a19      	ldr	r2, [pc, #100]	; (800a17c <HAL_GPIO_Init+0x25c>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d00d      	beq.n	800a136 <HAL_GPIO_Init+0x216>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a18      	ldr	r2, [pc, #96]	; (800a180 <HAL_GPIO_Init+0x260>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d007      	beq.n	800a132 <HAL_GPIO_Init+0x212>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a17      	ldr	r2, [pc, #92]	; (800a184 <HAL_GPIO_Init+0x264>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d101      	bne.n	800a12e <HAL_GPIO_Init+0x20e>
 800a12a:	2309      	movs	r3, #9
 800a12c:	e02d      	b.n	800a18a <HAL_GPIO_Init+0x26a>
 800a12e:	230a      	movs	r3, #10
 800a130:	e02b      	b.n	800a18a <HAL_GPIO_Init+0x26a>
 800a132:	2308      	movs	r3, #8
 800a134:	e029      	b.n	800a18a <HAL_GPIO_Init+0x26a>
 800a136:	2307      	movs	r3, #7
 800a138:	e027      	b.n	800a18a <HAL_GPIO_Init+0x26a>
 800a13a:	2306      	movs	r3, #6
 800a13c:	e025      	b.n	800a18a <HAL_GPIO_Init+0x26a>
 800a13e:	2305      	movs	r3, #5
 800a140:	e023      	b.n	800a18a <HAL_GPIO_Init+0x26a>
 800a142:	2304      	movs	r3, #4
 800a144:	e021      	b.n	800a18a <HAL_GPIO_Init+0x26a>
 800a146:	2303      	movs	r3, #3
 800a148:	e01f      	b.n	800a18a <HAL_GPIO_Init+0x26a>
 800a14a:	2302      	movs	r3, #2
 800a14c:	e01d      	b.n	800a18a <HAL_GPIO_Init+0x26a>
 800a14e:	2301      	movs	r3, #1
 800a150:	e01b      	b.n	800a18a <HAL_GPIO_Init+0x26a>
 800a152:	bf00      	nop
 800a154:	58000080 	.word	0x58000080
 800a158:	58024400 	.word	0x58024400
 800a15c:	58000400 	.word	0x58000400
 800a160:	58020000 	.word	0x58020000
 800a164:	58020400 	.word	0x58020400
 800a168:	58020800 	.word	0x58020800
 800a16c:	58020c00 	.word	0x58020c00
 800a170:	58021000 	.word	0x58021000
 800a174:	58021400 	.word	0x58021400
 800a178:	58021800 	.word	0x58021800
 800a17c:	58021c00 	.word	0x58021c00
 800a180:	58022000 	.word	0x58022000
 800a184:	58022400 	.word	0x58022400
 800a188:	2300      	movs	r3, #0
 800a18a:	69fa      	ldr	r2, [r7, #28]
 800a18c:	f002 0203 	and.w	r2, r2, #3
 800a190:	0092      	lsls	r2, r2, #2
 800a192:	4093      	lsls	r3, r2
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	4313      	orrs	r3, r2
 800a198:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a19a:	4938      	ldr	r1, [pc, #224]	; (800a27c <HAL_GPIO_Init+0x35c>)
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	089b      	lsrs	r3, r3, #2
 800a1a0:	3302      	adds	r3, #2
 800a1a2:	69ba      	ldr	r2, [r7, #24]
 800a1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a1a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	43db      	mvns	r3, r3
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a1ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a1d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	43db      	mvns	r3, r3
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d003      	beq.n	800a1fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a1fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	43db      	mvns	r3, r3
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	4013      	ands	r3, r2
 800a212:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d003      	beq.n	800a228 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a220:	69ba      	ldr	r2, [r7, #24]
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	4313      	orrs	r3, r2
 800a226:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	69ba      	ldr	r2, [r7, #24]
 800a22c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	43db      	mvns	r3, r3
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	4013      	ands	r3, r2
 800a23c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d003      	beq.n	800a252 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a24a:	69ba      	ldr	r2, [r7, #24]
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	4313      	orrs	r3, r2
 800a250:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	69ba      	ldr	r2, [r7, #24]
 800a256:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	3301      	adds	r3, #1
 800a25c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	fa22 f303 	lsr.w	r3, r2, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f47f ae63 	bne.w	8009f34 <HAL_GPIO_Init+0x14>
  }
}
 800a26e:	bf00      	nop
 800a270:	bf00      	nop
 800a272:	3724      	adds	r7, #36	; 0x24
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	58000400 	.word	0x58000400

0800a280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	807b      	strh	r3, [r7, #2]
 800a28c:	4613      	mov	r3, r2
 800a28e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a290:	787b      	ldrb	r3, [r7, #1]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d003      	beq.n	800a29e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a296:	887a      	ldrh	r2, [r7, #2]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a29c:	e003      	b.n	800a2a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a29e:	887b      	ldrh	r3, [r7, #2]
 800a2a0:	041a      	lsls	r2, r3, #16
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	619a      	str	r2, [r3, #24]
}
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a2bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a2c4:	88fb      	ldrh	r3, [r7, #6]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d008      	beq.n	800a2de <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a2cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a2d0:	88fb      	ldrh	r3, [r7, #6]
 800a2d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fa fb53 	bl	8004984 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a2f0:	4b19      	ldr	r3, [pc, #100]	; (800a358 <HAL_PWREx_ConfigSupply+0x70>)
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d00a      	beq.n	800a312 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a2fc:	4b16      	ldr	r3, [pc, #88]	; (800a358 <HAL_PWREx_ConfigSupply+0x70>)
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	f003 0307 	and.w	r3, r3, #7
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d001      	beq.n	800a30e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e01f      	b.n	800a34e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	e01d      	b.n	800a34e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a312:	4b11      	ldr	r3, [pc, #68]	; (800a358 <HAL_PWREx_ConfigSupply+0x70>)
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	f023 0207 	bic.w	r2, r3, #7
 800a31a:	490f      	ldr	r1, [pc, #60]	; (800a358 <HAL_PWREx_ConfigSupply+0x70>)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4313      	orrs	r3, r2
 800a320:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a322:	f7fc fc6b 	bl	8006bfc <HAL_GetTick>
 800a326:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a328:	e009      	b.n	800a33e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a32a:	f7fc fc67 	bl	8006bfc <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a338:	d901      	bls.n	800a33e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e007      	b.n	800a34e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a33e:	4b06      	ldr	r3, [pc, #24]	; (800a358 <HAL_PWREx_ConfigSupply+0x70>)
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a34a:	d1ee      	bne.n	800a32a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	58024800 	.word	0x58024800

0800a35c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08c      	sub	sp, #48	; 0x30
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d102      	bne.n	800a370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	f000 bc1d 	b.w	800abaa <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0301 	and.w	r3, r3, #1
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 8087 	beq.w	800a48c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a37e:	4b99      	ldr	r3, [pc, #612]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a386:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a388:	4b96      	ldr	r3, [pc, #600]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a390:	2b10      	cmp	r3, #16
 800a392:	d007      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x48>
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	2b18      	cmp	r3, #24
 800a398:	d110      	bne.n	800a3bc <HAL_RCC_OscConfig+0x60>
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	f003 0303 	and.w	r3, r3, #3
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d10b      	bne.n	800a3bc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3a4:	4b8f      	ldr	r3, [pc, #572]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d06c      	beq.n	800a48a <HAL_RCC_OscConfig+0x12e>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d168      	bne.n	800a48a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e3f6      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3c4:	d106      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x78>
 800a3c6:	4b87      	ldr	r3, [pc, #540]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a86      	ldr	r2, [pc, #536]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a3cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3d0:	6013      	str	r3, [r2, #0]
 800a3d2:	e02e      	b.n	800a432 <HAL_RCC_OscConfig+0xd6>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10c      	bne.n	800a3f6 <HAL_RCC_OscConfig+0x9a>
 800a3dc:	4b81      	ldr	r3, [pc, #516]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a80      	ldr	r2, [pc, #512]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a3e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	4b7e      	ldr	r3, [pc, #504]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a7d      	ldr	r2, [pc, #500]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a3ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	e01d      	b.n	800a432 <HAL_RCC_OscConfig+0xd6>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3fe:	d10c      	bne.n	800a41a <HAL_RCC_OscConfig+0xbe>
 800a400:	4b78      	ldr	r3, [pc, #480]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a77      	ldr	r2, [pc, #476]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a406:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	4b75      	ldr	r3, [pc, #468]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a74      	ldr	r2, [pc, #464]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	e00b      	b.n	800a432 <HAL_RCC_OscConfig+0xd6>
 800a41a:	4b72      	ldr	r3, [pc, #456]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a71      	ldr	r2, [pc, #452]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a424:	6013      	str	r3, [r2, #0]
 800a426:	4b6f      	ldr	r3, [pc, #444]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a6e      	ldr	r2, [pc, #440]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a42c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a430:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d013      	beq.n	800a462 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a43a:	f7fc fbdf 	bl	8006bfc <HAL_GetTick>
 800a43e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a440:	e008      	b.n	800a454 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a442:	f7fc fbdb 	bl	8006bfc <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	2b64      	cmp	r3, #100	; 0x64
 800a44e:	d901      	bls.n	800a454 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	e3aa      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a454:	4b63      	ldr	r3, [pc, #396]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0f0      	beq.n	800a442 <HAL_RCC_OscConfig+0xe6>
 800a460:	e014      	b.n	800a48c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a462:	f7fc fbcb 	bl	8006bfc <HAL_GetTick>
 800a466:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a468:	e008      	b.n	800a47c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a46a:	f7fc fbc7 	bl	8006bfc <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	2b64      	cmp	r3, #100	; 0x64
 800a476:	d901      	bls.n	800a47c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e396      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a47c:	4b59      	ldr	r3, [pc, #356]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1f0      	bne.n	800a46a <HAL_RCC_OscConfig+0x10e>
 800a488:	e000      	b.n	800a48c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a48a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0302 	and.w	r3, r3, #2
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 80cb 	beq.w	800a630 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a49a:	4b52      	ldr	r3, [pc, #328]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4a2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4a4:	4b4f      	ldr	r3, [pc, #316]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a4aa:	6a3b      	ldr	r3, [r7, #32]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d007      	beq.n	800a4c0 <HAL_RCC_OscConfig+0x164>
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	2b18      	cmp	r3, #24
 800a4b4:	d156      	bne.n	800a564 <HAL_RCC_OscConfig+0x208>
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	f003 0303 	and.w	r3, r3, #3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d151      	bne.n	800a564 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4c0:	4b48      	ldr	r3, [pc, #288]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d005      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x17c>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e368      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a4d8:	4b42      	ldr	r3, [pc, #264]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f023 0219 	bic.w	r2, r3, #25
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	493f      	ldr	r1, [pc, #252]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a4ea:	f7fc fb87 	bl	8006bfc <HAL_GetTick>
 800a4ee:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4f0:	e008      	b.n	800a504 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a4f2:	f7fc fb83 	bl	8006bfc <HAL_GetTick>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d901      	bls.n	800a504 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a500:	2303      	movs	r3, #3
 800a502:	e352      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a504:	4b37      	ldr	r3, [pc, #220]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d0f0      	beq.n	800a4f2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a510:	f7fc fba4 	bl	8006c5c <HAL_GetREVID>
 800a514:	4603      	mov	r3, r0
 800a516:	f241 0203 	movw	r2, #4099	; 0x1003
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d817      	bhi.n	800a54e <HAL_RCC_OscConfig+0x1f2>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	2b40      	cmp	r3, #64	; 0x40
 800a524:	d108      	bne.n	800a538 <HAL_RCC_OscConfig+0x1dc>
 800a526:	4b2f      	ldr	r3, [pc, #188]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a52e:	4a2d      	ldr	r2, [pc, #180]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a534:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a536:	e07b      	b.n	800a630 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a538:	4b2a      	ldr	r3, [pc, #168]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	031b      	lsls	r3, r3, #12
 800a546:	4927      	ldr	r1, [pc, #156]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a548:	4313      	orrs	r3, r2
 800a54a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a54c:	e070      	b.n	800a630 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a54e:	4b25      	ldr	r3, [pc, #148]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	061b      	lsls	r3, r3, #24
 800a55c:	4921      	ldr	r1, [pc, #132]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a562:	e065      	b.n	800a630 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d048      	beq.n	800a5fe <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a56c:	4b1d      	ldr	r3, [pc, #116]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f023 0219 	bic.w	r2, r3, #25
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	491a      	ldr	r1, [pc, #104]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a57e:	f7fc fb3d 	bl	8006bfc <HAL_GetTick>
 800a582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a584:	e008      	b.n	800a598 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a586:	f7fc fb39 	bl	8006bfc <HAL_GetTick>
 800a58a:	4602      	mov	r2, r0
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	2b02      	cmp	r3, #2
 800a592:	d901      	bls.n	800a598 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e308      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a598:	4b12      	ldr	r3, [pc, #72]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d0f0      	beq.n	800a586 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5a4:	f7fc fb5a 	bl	8006c5c <HAL_GetREVID>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d81a      	bhi.n	800a5e8 <HAL_RCC_OscConfig+0x28c>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	2b40      	cmp	r3, #64	; 0x40
 800a5b8:	d108      	bne.n	800a5cc <HAL_RCC_OscConfig+0x270>
 800a5ba:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a5c2:	4a08      	ldr	r2, [pc, #32]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a5c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5c8:	6053      	str	r3, [r2, #4]
 800a5ca:	e031      	b.n	800a630 <HAL_RCC_OscConfig+0x2d4>
 800a5cc:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	031b      	lsls	r3, r3, #12
 800a5da:	4902      	ldr	r1, [pc, #8]	; (800a5e4 <HAL_RCC_OscConfig+0x288>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	604b      	str	r3, [r1, #4]
 800a5e0:	e026      	b.n	800a630 <HAL_RCC_OscConfig+0x2d4>
 800a5e2:	bf00      	nop
 800a5e4:	58024400 	.word	0x58024400
 800a5e8:	4b9a      	ldr	r3, [pc, #616]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	061b      	lsls	r3, r3, #24
 800a5f6:	4997      	ldr	r1, [pc, #604]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	604b      	str	r3, [r1, #4]
 800a5fc:	e018      	b.n	800a630 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5fe:	4b95      	ldr	r3, [pc, #596]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a94      	ldr	r2, [pc, #592]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a604:	f023 0301 	bic.w	r3, r3, #1
 800a608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a60a:	f7fc faf7 	bl	8006bfc <HAL_GetTick>
 800a60e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a610:	e008      	b.n	800a624 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a612:	f7fc faf3 	bl	8006bfc <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d901      	bls.n	800a624 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e2c2      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a624:	4b8b      	ldr	r3, [pc, #556]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0304 	and.w	r3, r3, #4
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1f0      	bne.n	800a612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 0310 	and.w	r3, r3, #16
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 80a9 	beq.w	800a790 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a63e:	4b85      	ldr	r3, [pc, #532]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a646:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a648:	4b82      	ldr	r3, [pc, #520]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	2b08      	cmp	r3, #8
 800a652:	d007      	beq.n	800a664 <HAL_RCC_OscConfig+0x308>
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	2b18      	cmp	r3, #24
 800a658:	d13a      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x374>
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f003 0303 	and.w	r3, r3, #3
 800a660:	2b01      	cmp	r3, #1
 800a662:	d135      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a664:	4b7b      	ldr	r3, [pc, #492]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d005      	beq.n	800a67c <HAL_RCC_OscConfig+0x320>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	2b80      	cmp	r3, #128	; 0x80
 800a676:	d001      	beq.n	800a67c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e296      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a67c:	f7fc faee 	bl	8006c5c <HAL_GetREVID>
 800a680:	4603      	mov	r3, r0
 800a682:	f241 0203 	movw	r2, #4099	; 0x1003
 800a686:	4293      	cmp	r3, r2
 800a688:	d817      	bhi.n	800a6ba <HAL_RCC_OscConfig+0x35e>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	2b20      	cmp	r3, #32
 800a690:	d108      	bne.n	800a6a4 <HAL_RCC_OscConfig+0x348>
 800a692:	4b70      	ldr	r3, [pc, #448]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a69a:	4a6e      	ldr	r2, [pc, #440]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a69c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6a2:	e075      	b.n	800a790 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6a4:	4b6b      	ldr	r3, [pc, #428]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	069b      	lsls	r3, r3, #26
 800a6b2:	4968      	ldr	r1, [pc, #416]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6b8:	e06a      	b.n	800a790 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6ba:	4b66      	ldr	r3, [pc, #408]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	061b      	lsls	r3, r3, #24
 800a6c8:	4962      	ldr	r1, [pc, #392]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6ce:	e05f      	b.n	800a790 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d042      	beq.n	800a75e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a6d8:	4b5e      	ldr	r3, [pc, #376]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a5d      	ldr	r2, [pc, #372]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a6de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e4:	f7fc fa8a 	bl	8006bfc <HAL_GetTick>
 800a6e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6ea:	e008      	b.n	800a6fe <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a6ec:	f7fc fa86 	bl	8006bfc <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d901      	bls.n	800a6fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e255      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6fe:	4b55      	ldr	r3, [pc, #340]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0f0      	beq.n	800a6ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a70a:	f7fc faa7 	bl	8006c5c <HAL_GetREVID>
 800a70e:	4603      	mov	r3, r0
 800a710:	f241 0203 	movw	r2, #4099	; 0x1003
 800a714:	4293      	cmp	r3, r2
 800a716:	d817      	bhi.n	800a748 <HAL_RCC_OscConfig+0x3ec>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	d108      	bne.n	800a732 <HAL_RCC_OscConfig+0x3d6>
 800a720:	4b4c      	ldr	r3, [pc, #304]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a728:	4a4a      	ldr	r2, [pc, #296]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a72a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a72e:	6053      	str	r3, [r2, #4]
 800a730:	e02e      	b.n	800a790 <HAL_RCC_OscConfig+0x434>
 800a732:	4b48      	ldr	r3, [pc, #288]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	069b      	lsls	r3, r3, #26
 800a740:	4944      	ldr	r1, [pc, #272]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a742:	4313      	orrs	r3, r2
 800a744:	604b      	str	r3, [r1, #4]
 800a746:	e023      	b.n	800a790 <HAL_RCC_OscConfig+0x434>
 800a748:	4b42      	ldr	r3, [pc, #264]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a1b      	ldr	r3, [r3, #32]
 800a754:	061b      	lsls	r3, r3, #24
 800a756:	493f      	ldr	r1, [pc, #252]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	60cb      	str	r3, [r1, #12]
 800a75c:	e018      	b.n	800a790 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a75e:	4b3d      	ldr	r3, [pc, #244]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a3c      	ldr	r2, [pc, #240]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a76a:	f7fc fa47 	bl	8006bfc <HAL_GetTick>
 800a76e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a770:	e008      	b.n	800a784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a772:	f7fc fa43 	bl	8006bfc <HAL_GetTick>
 800a776:	4602      	mov	r2, r0
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d901      	bls.n	800a784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e212      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a784:	4b33      	ldr	r3, [pc, #204]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1f0      	bne.n	800a772 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0308 	and.w	r3, r3, #8
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d036      	beq.n	800a80a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	695b      	ldr	r3, [r3, #20]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d019      	beq.n	800a7d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7a4:	4b2b      	ldr	r3, [pc, #172]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a7a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7a8:	4a2a      	ldr	r2, [pc, #168]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a7aa:	f043 0301 	orr.w	r3, r3, #1
 800a7ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7b0:	f7fc fa24 	bl	8006bfc <HAL_GetTick>
 800a7b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a7b6:	e008      	b.n	800a7ca <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a7b8:	f7fc fa20 	bl	8006bfc <HAL_GetTick>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d901      	bls.n	800a7ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e1ef      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a7ca:	4b22      	ldr	r3, [pc, #136]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a7cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d0f0      	beq.n	800a7b8 <HAL_RCC_OscConfig+0x45c>
 800a7d6:	e018      	b.n	800a80a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a7d8:	4b1e      	ldr	r3, [pc, #120]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a7da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7dc:	4a1d      	ldr	r2, [pc, #116]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a7de:	f023 0301 	bic.w	r3, r3, #1
 800a7e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7e4:	f7fc fa0a 	bl	8006bfc <HAL_GetTick>
 800a7e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a7ea:	e008      	b.n	800a7fe <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a7ec:	f7fc fa06 	bl	8006bfc <HAL_GetTick>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d901      	bls.n	800a7fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e1d5      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a7fe:	4b15      	ldr	r3, [pc, #84]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a802:	f003 0302 	and.w	r3, r3, #2
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1f0      	bne.n	800a7ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 0320 	and.w	r3, r3, #32
 800a812:	2b00      	cmp	r3, #0
 800a814:	d039      	beq.n	800a88a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d01c      	beq.n	800a858 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a81e:	4b0d      	ldr	r3, [pc, #52]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a0c      	ldr	r2, [pc, #48]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a828:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a82a:	f7fc f9e7 	bl	8006bfc <HAL_GetTick>
 800a82e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a830:	e008      	b.n	800a844 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a832:	f7fc f9e3 	bl	8006bfc <HAL_GetTick>
 800a836:	4602      	mov	r2, r0
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d901      	bls.n	800a844 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e1b2      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a844:	4b03      	ldr	r3, [pc, #12]	; (800a854 <HAL_RCC_OscConfig+0x4f8>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0f0      	beq.n	800a832 <HAL_RCC_OscConfig+0x4d6>
 800a850:	e01b      	b.n	800a88a <HAL_RCC_OscConfig+0x52e>
 800a852:	bf00      	nop
 800a854:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a858:	4b9b      	ldr	r3, [pc, #620]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a9a      	ldr	r2, [pc, #616]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a85e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a862:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a864:	f7fc f9ca 	bl	8006bfc <HAL_GetTick>
 800a868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a86a:	e008      	b.n	800a87e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a86c:	f7fc f9c6 	bl	8006bfc <HAL_GetTick>
 800a870:	4602      	mov	r2, r0
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	2b02      	cmp	r3, #2
 800a878:	d901      	bls.n	800a87e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e195      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a87e:	4b92      	ldr	r3, [pc, #584]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1f0      	bne.n	800a86c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0304 	and.w	r3, r3, #4
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 8081 	beq.w	800a99a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a898:	4b8c      	ldr	r3, [pc, #560]	; (800aacc <HAL_RCC_OscConfig+0x770>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a8b      	ldr	r2, [pc, #556]	; (800aacc <HAL_RCC_OscConfig+0x770>)
 800a89e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8a4:	f7fc f9aa 	bl	8006bfc <HAL_GetTick>
 800a8a8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8aa:	e008      	b.n	800a8be <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a8ac:	f7fc f9a6 	bl	8006bfc <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	2b64      	cmp	r3, #100	; 0x64
 800a8b8:	d901      	bls.n	800a8be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e175      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8be:	4b83      	ldr	r3, [pc, #524]	; (800aacc <HAL_RCC_OscConfig+0x770>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0f0      	beq.n	800a8ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d106      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x584>
 800a8d2:	4b7d      	ldr	r3, [pc, #500]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8d6:	4a7c      	ldr	r2, [pc, #496]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a8d8:	f043 0301 	orr.w	r3, r3, #1
 800a8dc:	6713      	str	r3, [r2, #112]	; 0x70
 800a8de:	e02d      	b.n	800a93c <HAL_RCC_OscConfig+0x5e0>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10c      	bne.n	800a902 <HAL_RCC_OscConfig+0x5a6>
 800a8e8:	4b77      	ldr	r3, [pc, #476]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ec:	4a76      	ldr	r2, [pc, #472]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a8ee:	f023 0301 	bic.w	r3, r3, #1
 800a8f2:	6713      	str	r3, [r2, #112]	; 0x70
 800a8f4:	4b74      	ldr	r3, [pc, #464]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f8:	4a73      	ldr	r2, [pc, #460]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a8fa:	f023 0304 	bic.w	r3, r3, #4
 800a8fe:	6713      	str	r3, [r2, #112]	; 0x70
 800a900:	e01c      	b.n	800a93c <HAL_RCC_OscConfig+0x5e0>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	2b05      	cmp	r3, #5
 800a908:	d10c      	bne.n	800a924 <HAL_RCC_OscConfig+0x5c8>
 800a90a:	4b6f      	ldr	r3, [pc, #444]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a90e:	4a6e      	ldr	r2, [pc, #440]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a910:	f043 0304 	orr.w	r3, r3, #4
 800a914:	6713      	str	r3, [r2, #112]	; 0x70
 800a916:	4b6c      	ldr	r3, [pc, #432]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91a:	4a6b      	ldr	r2, [pc, #428]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a91c:	f043 0301 	orr.w	r3, r3, #1
 800a920:	6713      	str	r3, [r2, #112]	; 0x70
 800a922:	e00b      	b.n	800a93c <HAL_RCC_OscConfig+0x5e0>
 800a924:	4b68      	ldr	r3, [pc, #416]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a928:	4a67      	ldr	r2, [pc, #412]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a92a:	f023 0301 	bic.w	r3, r3, #1
 800a92e:	6713      	str	r3, [r2, #112]	; 0x70
 800a930:	4b65      	ldr	r3, [pc, #404]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a934:	4a64      	ldr	r2, [pc, #400]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a936:	f023 0304 	bic.w	r3, r3, #4
 800a93a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d015      	beq.n	800a970 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a944:	f7fc f95a 	bl	8006bfc <HAL_GetTick>
 800a948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a94a:	e00a      	b.n	800a962 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a94c:	f7fc f956 	bl	8006bfc <HAL_GetTick>
 800a950:	4602      	mov	r2, r0
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	f241 3288 	movw	r2, #5000	; 0x1388
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d901      	bls.n	800a962 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e123      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a962:	4b59      	ldr	r3, [pc, #356]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0ee      	beq.n	800a94c <HAL_RCC_OscConfig+0x5f0>
 800a96e:	e014      	b.n	800a99a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a970:	f7fc f944 	bl	8006bfc <HAL_GetTick>
 800a974:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a976:	e00a      	b.n	800a98e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a978:	f7fc f940 	bl	8006bfc <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	f241 3288 	movw	r2, #5000	; 0x1388
 800a986:	4293      	cmp	r3, r2
 800a988:	d901      	bls.n	800a98e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e10d      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a98e:	4b4e      	ldr	r3, [pc, #312]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a992:	f003 0302 	and.w	r3, r3, #2
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1ee      	bne.n	800a978 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 8102 	beq.w	800aba8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a9a4:	4b48      	ldr	r3, [pc, #288]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9ac:	2b18      	cmp	r3, #24
 800a9ae:	f000 80bd 	beq.w	800ab2c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	f040 809e 	bne.w	800aaf8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9bc:	4b42      	ldr	r3, [pc, #264]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a41      	ldr	r2, [pc, #260]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a9c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c8:	f7fc f918 	bl	8006bfc <HAL_GetTick>
 800a9cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9ce:	e008      	b.n	800a9e2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a9d0:	f7fc f914 	bl	8006bfc <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d901      	bls.n	800a9e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e0e3      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9e2:	4b39      	ldr	r3, [pc, #228]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1f0      	bne.n	800a9d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9ee:	4b36      	ldr	r3, [pc, #216]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800a9f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9f2:	4b37      	ldr	r3, [pc, #220]	; (800aad0 <HAL_RCC_OscConfig+0x774>)
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a9fe:	0112      	lsls	r2, r2, #4
 800aa00:	430a      	orrs	r2, r1
 800aa02:	4931      	ldr	r1, [pc, #196]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa04:	4313      	orrs	r3, r2
 800aa06:	628b      	str	r3, [r1, #40]	; 0x28
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa16:	3b01      	subs	r3, #1
 800aa18:	025b      	lsls	r3, r3, #9
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	431a      	orrs	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa22:	3b01      	subs	r3, #1
 800aa24:	041b      	lsls	r3, r3, #16
 800aa26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa30:	3b01      	subs	r3, #1
 800aa32:	061b      	lsls	r3, r3, #24
 800aa34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa38:	4923      	ldr	r1, [pc, #140]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800aa3e:	4b22      	ldr	r3, [pc, #136]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa42:	4a21      	ldr	r2, [pc, #132]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa44:	f023 0301 	bic.w	r3, r3, #1
 800aa48:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aa4a:	4b1f      	ldr	r3, [pc, #124]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa4e:	4b21      	ldr	r3, [pc, #132]	; (800aad4 <HAL_RCC_OscConfig+0x778>)
 800aa50:	4013      	ands	r3, r2
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aa56:	00d2      	lsls	r2, r2, #3
 800aa58:	491b      	ldr	r1, [pc, #108]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aa5e:	4b1a      	ldr	r3, [pc, #104]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa62:	f023 020c 	bic.w	r2, r3, #12
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6a:	4917      	ldr	r1, [pc, #92]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aa70:	4b15      	ldr	r3, [pc, #84]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa74:	f023 0202 	bic.w	r2, r3, #2
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7c:	4912      	ldr	r1, [pc, #72]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aa82:	4b11      	ldr	r3, [pc, #68]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa86:	4a10      	ldr	r2, [pc, #64]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa8e:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	4a0d      	ldr	r2, [pc, #52]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aa9a:	4b0b      	ldr	r3, [pc, #44]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	4a0a      	ldr	r2, [pc, #40]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aaa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aaa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800aaa6:	4b08      	ldr	r3, [pc, #32]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaaa:	4a07      	ldr	r2, [pc, #28]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aaac:	f043 0301 	orr.w	r3, r3, #1
 800aab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aab2:	4b05      	ldr	r3, [pc, #20]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a04      	ldr	r2, [pc, #16]	; (800aac8 <HAL_RCC_OscConfig+0x76c>)
 800aab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aabc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aabe:	f7fc f89d 	bl	8006bfc <HAL_GetTick>
 800aac2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aac4:	e011      	b.n	800aaea <HAL_RCC_OscConfig+0x78e>
 800aac6:	bf00      	nop
 800aac8:	58024400 	.word	0x58024400
 800aacc:	58024800 	.word	0x58024800
 800aad0:	fffffc0c 	.word	0xfffffc0c
 800aad4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aad8:	f7fc f890 	bl	8006bfc <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e05f      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aaea:	4b32      	ldr	r3, [pc, #200]	; (800abb4 <HAL_RCC_OscConfig+0x858>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d0f0      	beq.n	800aad8 <HAL_RCC_OscConfig+0x77c>
 800aaf6:	e057      	b.n	800aba8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaf8:	4b2e      	ldr	r3, [pc, #184]	; (800abb4 <HAL_RCC_OscConfig+0x858>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a2d      	ldr	r2, [pc, #180]	; (800abb4 <HAL_RCC_OscConfig+0x858>)
 800aafe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab04:	f7fc f87a 	bl	8006bfc <HAL_GetTick>
 800ab08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab0a:	e008      	b.n	800ab1e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab0c:	f7fc f876 	bl	8006bfc <HAL_GetTick>
 800ab10:	4602      	mov	r2, r0
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d901      	bls.n	800ab1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e045      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab1e:	4b25      	ldr	r3, [pc, #148]	; (800abb4 <HAL_RCC_OscConfig+0x858>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1f0      	bne.n	800ab0c <HAL_RCC_OscConfig+0x7b0>
 800ab2a:	e03d      	b.n	800aba8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ab2c:	4b21      	ldr	r3, [pc, #132]	; (800abb4 <HAL_RCC_OscConfig+0x858>)
 800ab2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ab32:	4b20      	ldr	r3, [pc, #128]	; (800abb4 <HAL_RCC_OscConfig+0x858>)
 800ab34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab36:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d031      	beq.n	800aba4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	f003 0203 	and.w	r2, r3, #3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d12a      	bne.n	800aba4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	091b      	lsrs	r3, r3, #4
 800ab52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d122      	bne.n	800aba4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab68:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d11a      	bne.n	800aba4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	0a5b      	lsrs	r3, r3, #9
 800ab72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d111      	bne.n	800aba4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	0c1b      	lsrs	r3, r3, #16
 800ab84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d108      	bne.n	800aba4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	0e1b      	lsrs	r3, r3, #24
 800ab96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d001      	beq.n	800aba8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e000      	b.n	800abaa <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3730      	adds	r7, #48	; 0x30
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	58024400 	.word	0x58024400

0800abb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e19c      	b.n	800af06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800abcc:	4b8a      	ldr	r3, [pc, #552]	; (800adf8 <HAL_RCC_ClockConfig+0x240>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 030f 	and.w	r3, r3, #15
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d910      	bls.n	800abfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abda:	4b87      	ldr	r3, [pc, #540]	; (800adf8 <HAL_RCC_ClockConfig+0x240>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f023 020f 	bic.w	r2, r3, #15
 800abe2:	4985      	ldr	r1, [pc, #532]	; (800adf8 <HAL_RCC_ClockConfig+0x240>)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800abea:	4b83      	ldr	r3, [pc, #524]	; (800adf8 <HAL_RCC_ClockConfig+0x240>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 030f 	and.w	r3, r3, #15
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d001      	beq.n	800abfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e184      	b.n	800af06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d010      	beq.n	800ac2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	691a      	ldr	r2, [r3, #16]
 800ac0c:	4b7b      	ldr	r3, [pc, #492]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d908      	bls.n	800ac2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ac18:	4b78      	ldr	r3, [pc, #480]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	4975      	ldr	r1, [pc, #468]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ac26:	4313      	orrs	r3, r2
 800ac28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0308 	and.w	r3, r3, #8
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d010      	beq.n	800ac58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	695a      	ldr	r2, [r3, #20]
 800ac3a:	4b70      	ldr	r3, [pc, #448]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d908      	bls.n	800ac58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ac46:	4b6d      	ldr	r3, [pc, #436]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ac48:	69db      	ldr	r3, [r3, #28]
 800ac4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	496a      	ldr	r1, [pc, #424]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ac54:	4313      	orrs	r3, r2
 800ac56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0310 	and.w	r3, r3, #16
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d010      	beq.n	800ac86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	699a      	ldr	r2, [r3, #24]
 800ac68:	4b64      	ldr	r3, [pc, #400]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d908      	bls.n	800ac86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ac74:	4b61      	ldr	r3, [pc, #388]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ac76:	69db      	ldr	r3, [r3, #28]
 800ac78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	495e      	ldr	r1, [pc, #376]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ac82:	4313      	orrs	r3, r2
 800ac84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0320 	and.w	r3, r3, #32
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d010      	beq.n	800acb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	69da      	ldr	r2, [r3, #28]
 800ac96:	4b59      	ldr	r3, [pc, #356]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d908      	bls.n	800acb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800aca2:	4b56      	ldr	r3, [pc, #344]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	69db      	ldr	r3, [r3, #28]
 800acae:	4953      	ldr	r1, [pc, #332]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800acb0:	4313      	orrs	r3, r2
 800acb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 0302 	and.w	r3, r3, #2
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d010      	beq.n	800ace2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	4b4d      	ldr	r3, [pc, #308]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	f003 030f 	and.w	r3, r3, #15
 800accc:	429a      	cmp	r2, r3
 800acce:	d908      	bls.n	800ace2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acd0:	4b4a      	ldr	r3, [pc, #296]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	f023 020f 	bic.w	r2, r3, #15
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	4947      	ldr	r1, [pc, #284]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800acde:	4313      	orrs	r3, r2
 800ace0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	2b00      	cmp	r3, #0
 800acec:	d055      	beq.n	800ad9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800acee:	4b43      	ldr	r3, [pc, #268]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	4940      	ldr	r1, [pc, #256]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800acfc:	4313      	orrs	r3, r2
 800acfe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d107      	bne.n	800ad18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad08:	4b3c      	ldr	r3, [pc, #240]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d121      	bne.n	800ad58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e0f6      	b.n	800af06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d107      	bne.n	800ad30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad20:	4b36      	ldr	r3, [pc, #216]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d115      	bne.n	800ad58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e0ea      	b.n	800af06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d107      	bne.n	800ad48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad38:	4b30      	ldr	r3, [pc, #192]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d109      	bne.n	800ad58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e0de      	b.n	800af06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad48:	4b2c      	ldr	r3, [pc, #176]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0304 	and.w	r3, r3, #4
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d101      	bne.n	800ad58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e0d6      	b.n	800af06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad58:	4b28      	ldr	r3, [pc, #160]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	f023 0207 	bic.w	r2, r3, #7
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	4925      	ldr	r1, [pc, #148]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ad66:	4313      	orrs	r3, r2
 800ad68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad6a:	f7fb ff47 	bl	8006bfc <HAL_GetTick>
 800ad6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad70:	e00a      	b.n	800ad88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad72:	f7fb ff43 	bl	8006bfc <HAL_GetTick>
 800ad76:	4602      	mov	r2, r0
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d901      	bls.n	800ad88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e0be      	b.n	800af06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad88:	4b1c      	ldr	r3, [pc, #112]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	00db      	lsls	r3, r3, #3
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d1eb      	bne.n	800ad72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 0302 	and.w	r3, r3, #2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d010      	beq.n	800adc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68da      	ldr	r2, [r3, #12]
 800adaa:	4b14      	ldr	r3, [pc, #80]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	f003 030f 	and.w	r3, r3, #15
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d208      	bcs.n	800adc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adb6:	4b11      	ldr	r3, [pc, #68]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	f023 020f 	bic.w	r2, r3, #15
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	490e      	ldr	r1, [pc, #56]	; (800adfc <HAL_RCC_ClockConfig+0x244>)
 800adc4:	4313      	orrs	r3, r2
 800adc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800adc8:	4b0b      	ldr	r3, [pc, #44]	; (800adf8 <HAL_RCC_ClockConfig+0x240>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 030f 	and.w	r3, r3, #15
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	429a      	cmp	r2, r3
 800add4:	d214      	bcs.n	800ae00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800add6:	4b08      	ldr	r3, [pc, #32]	; (800adf8 <HAL_RCC_ClockConfig+0x240>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f023 020f 	bic.w	r2, r3, #15
 800adde:	4906      	ldr	r1, [pc, #24]	; (800adf8 <HAL_RCC_ClockConfig+0x240>)
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ade6:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <HAL_RCC_ClockConfig+0x240>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 030f 	and.w	r3, r3, #15
 800adee:	683a      	ldr	r2, [r7, #0]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d005      	beq.n	800ae00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	e086      	b.n	800af06 <HAL_RCC_ClockConfig+0x34e>
 800adf8:	52002000 	.word	0x52002000
 800adfc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d010      	beq.n	800ae2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	691a      	ldr	r2, [r3, #16]
 800ae10:	4b3f      	ldr	r3, [pc, #252]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d208      	bcs.n	800ae2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ae1c:	4b3c      	ldr	r3, [pc, #240]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	4939      	ldr	r1, [pc, #228]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 0308 	and.w	r3, r3, #8
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d010      	beq.n	800ae5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	695a      	ldr	r2, [r3, #20]
 800ae3e:	4b34      	ldr	r3, [pc, #208]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800ae40:	69db      	ldr	r3, [r3, #28]
 800ae42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d208      	bcs.n	800ae5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae4a:	4b31      	ldr	r3, [pc, #196]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800ae4c:	69db      	ldr	r3, [r3, #28]
 800ae4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	695b      	ldr	r3, [r3, #20]
 800ae56:	492e      	ldr	r1, [pc, #184]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0310 	and.w	r3, r3, #16
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d010      	beq.n	800ae8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	699a      	ldr	r2, [r3, #24]
 800ae6c:	4b28      	ldr	r3, [pc, #160]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800ae6e:	69db      	ldr	r3, [r3, #28]
 800ae70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d208      	bcs.n	800ae8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae78:	4b25      	ldr	r3, [pc, #148]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800ae7a:	69db      	ldr	r3, [r3, #28]
 800ae7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	4922      	ldr	r1, [pc, #136]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0320 	and.w	r3, r3, #32
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d010      	beq.n	800aeb8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	69da      	ldr	r2, [r3, #28]
 800ae9a:	4b1d      	ldr	r3, [pc, #116]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d208      	bcs.n	800aeb8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800aea6:	4b1a      	ldr	r3, [pc, #104]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	69db      	ldr	r3, [r3, #28]
 800aeb2:	4917      	ldr	r1, [pc, #92]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aeb8:	f000 f834 	bl	800af24 <HAL_RCC_GetSysClockFreq>
 800aebc:	4602      	mov	r2, r0
 800aebe:	4b14      	ldr	r3, [pc, #80]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	0a1b      	lsrs	r3, r3, #8
 800aec4:	f003 030f 	and.w	r3, r3, #15
 800aec8:	4912      	ldr	r1, [pc, #72]	; (800af14 <HAL_RCC_ClockConfig+0x35c>)
 800aeca:	5ccb      	ldrb	r3, [r1, r3]
 800aecc:	f003 031f 	and.w	r3, r3, #31
 800aed0:	fa22 f303 	lsr.w	r3, r2, r3
 800aed4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aed6:	4b0e      	ldr	r3, [pc, #56]	; (800af10 <HAL_RCC_ClockConfig+0x358>)
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	f003 030f 	and.w	r3, r3, #15
 800aede:	4a0d      	ldr	r2, [pc, #52]	; (800af14 <HAL_RCC_ClockConfig+0x35c>)
 800aee0:	5cd3      	ldrb	r3, [r2, r3]
 800aee2:	f003 031f 	and.w	r3, r3, #31
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	fa22 f303 	lsr.w	r3, r2, r3
 800aeec:	4a0a      	ldr	r2, [pc, #40]	; (800af18 <HAL_RCC_ClockConfig+0x360>)
 800aeee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aef0:	4a0a      	ldr	r2, [pc, #40]	; (800af1c <HAL_RCC_ClockConfig+0x364>)
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800aef6:	4b0a      	ldr	r3, [pc, #40]	; (800af20 <HAL_RCC_ClockConfig+0x368>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fb fe34 	bl	8006b68 <HAL_InitTick>
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800af04:	7bfb      	ldrb	r3, [r7, #15]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	58024400 	.word	0x58024400
 800af14:	08014d20 	.word	0x08014d20
 800af18:	2400023c 	.word	0x2400023c
 800af1c:	24000238 	.word	0x24000238
 800af20:	24000240 	.word	0x24000240

0800af24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af24:	b480      	push	{r7}
 800af26:	b089      	sub	sp, #36	; 0x24
 800af28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af2a:	4bb3      	ldr	r3, [pc, #716]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af32:	2b18      	cmp	r3, #24
 800af34:	f200 8155 	bhi.w	800b1e2 <HAL_RCC_GetSysClockFreq+0x2be>
 800af38:	a201      	add	r2, pc, #4	; (adr r2, 800af40 <HAL_RCC_GetSysClockFreq+0x1c>)
 800af3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3e:	bf00      	nop
 800af40:	0800afa5 	.word	0x0800afa5
 800af44:	0800b1e3 	.word	0x0800b1e3
 800af48:	0800b1e3 	.word	0x0800b1e3
 800af4c:	0800b1e3 	.word	0x0800b1e3
 800af50:	0800b1e3 	.word	0x0800b1e3
 800af54:	0800b1e3 	.word	0x0800b1e3
 800af58:	0800b1e3 	.word	0x0800b1e3
 800af5c:	0800b1e3 	.word	0x0800b1e3
 800af60:	0800afcb 	.word	0x0800afcb
 800af64:	0800b1e3 	.word	0x0800b1e3
 800af68:	0800b1e3 	.word	0x0800b1e3
 800af6c:	0800b1e3 	.word	0x0800b1e3
 800af70:	0800b1e3 	.word	0x0800b1e3
 800af74:	0800b1e3 	.word	0x0800b1e3
 800af78:	0800b1e3 	.word	0x0800b1e3
 800af7c:	0800b1e3 	.word	0x0800b1e3
 800af80:	0800afd1 	.word	0x0800afd1
 800af84:	0800b1e3 	.word	0x0800b1e3
 800af88:	0800b1e3 	.word	0x0800b1e3
 800af8c:	0800b1e3 	.word	0x0800b1e3
 800af90:	0800b1e3 	.word	0x0800b1e3
 800af94:	0800b1e3 	.word	0x0800b1e3
 800af98:	0800b1e3 	.word	0x0800b1e3
 800af9c:	0800b1e3 	.word	0x0800b1e3
 800afa0:	0800afd7 	.word	0x0800afd7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afa4:	4b94      	ldr	r3, [pc, #592]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0320 	and.w	r3, r3, #32
 800afac:	2b00      	cmp	r3, #0
 800afae:	d009      	beq.n	800afc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afb0:	4b91      	ldr	r3, [pc, #580]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	08db      	lsrs	r3, r3, #3
 800afb6:	f003 0303 	and.w	r3, r3, #3
 800afba:	4a90      	ldr	r2, [pc, #576]	; (800b1fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800afbc:	fa22 f303 	lsr.w	r3, r2, r3
 800afc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800afc2:	e111      	b.n	800b1e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800afc4:	4b8d      	ldr	r3, [pc, #564]	; (800b1fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800afc6:	61bb      	str	r3, [r7, #24]
    break;
 800afc8:	e10e      	b.n	800b1e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800afca:	4b8d      	ldr	r3, [pc, #564]	; (800b200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800afcc:	61bb      	str	r3, [r7, #24]
    break;
 800afce:	e10b      	b.n	800b1e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800afd0:	4b8c      	ldr	r3, [pc, #560]	; (800b204 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800afd2:	61bb      	str	r3, [r7, #24]
    break;
 800afd4:	e108      	b.n	800b1e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afd6:	4b88      	ldr	r3, [pc, #544]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afda:	f003 0303 	and.w	r3, r3, #3
 800afde:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800afe0:	4b85      	ldr	r3, [pc, #532]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe4:	091b      	lsrs	r3, r3, #4
 800afe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800afec:	4b82      	ldr	r3, [pc, #520]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aff6:	4b80      	ldr	r3, [pc, #512]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800affa:	08db      	lsrs	r3, r3, #3
 800affc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	fb02 f303 	mul.w	r3, r2, r3
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 80e1 	beq.w	800b1dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	f000 8083 	beq.w	800b128 <HAL_RCC_GetSysClockFreq+0x204>
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b02      	cmp	r3, #2
 800b026:	f200 80a1 	bhi.w	800b16c <HAL_RCC_GetSysClockFreq+0x248>
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d003      	beq.n	800b038 <HAL_RCC_GetSysClockFreq+0x114>
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d056      	beq.n	800b0e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b036:	e099      	b.n	800b16c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b038:	4b6f      	ldr	r3, [pc, #444]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0320 	and.w	r3, r3, #32
 800b040:	2b00      	cmp	r3, #0
 800b042:	d02d      	beq.n	800b0a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b044:	4b6c      	ldr	r3, [pc, #432]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	08db      	lsrs	r3, r3, #3
 800b04a:	f003 0303 	and.w	r3, r3, #3
 800b04e:	4a6b      	ldr	r2, [pc, #428]	; (800b1fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b050:	fa22 f303 	lsr.w	r3, r2, r3
 800b054:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	ee07 3a90 	vmov	s15, r3
 800b05c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	ee07 3a90 	vmov	s15, r3
 800b066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b06e:	4b62      	ldr	r3, [pc, #392]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b076:	ee07 3a90 	vmov	s15, r3
 800b07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b07e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b082:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b208 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b09a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b09e:	e087      	b.n	800b1b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b20c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0b2:	4b51      	ldr	r3, [pc, #324]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ba:	ee07 3a90 	vmov	s15, r3
 800b0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b208 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0e2:	e065      	b.n	800b1b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b210 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b0f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f6:	4b40      	ldr	r3, [pc, #256]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b106:	ed97 6a02 	vldr	s12, [r7, #8]
 800b10a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b208 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b10e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b11a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b126:	e043      	b.n	800b1b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b132:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b214 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b13a:	4b2f      	ldr	r3, [pc, #188]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b14a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b14e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b208 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b15a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b162:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b16a:	e021      	b.n	800b1b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	ee07 3a90 	vmov	s15, r3
 800b172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b176:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b210 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b17a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b17e:	4b1e      	ldr	r3, [pc, #120]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b186:	ee07 3a90 	vmov	s15, r3
 800b18a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b18e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b192:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b208 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b19a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b19e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b1b0:	4b11      	ldr	r3, [pc, #68]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b4:	0a5b      	lsrs	r3, r3, #9
 800b1b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	ee07 3a90 	vmov	s15, r3
 800b1c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b1c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1d4:	ee17 3a90 	vmov	r3, s15
 800b1d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b1da:	e005      	b.n	800b1e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	61bb      	str	r3, [r7, #24]
    break;
 800b1e0:	e002      	b.n	800b1e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b1e2:	4b07      	ldr	r3, [pc, #28]	; (800b200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b1e4:	61bb      	str	r3, [r7, #24]
    break;
 800b1e6:	bf00      	nop
  }

  return sysclockfreq;
 800b1e8:	69bb      	ldr	r3, [r7, #24]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3724      	adds	r7, #36	; 0x24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	58024400 	.word	0x58024400
 800b1fc:	03d09000 	.word	0x03d09000
 800b200:	003d0900 	.word	0x003d0900
 800b204:	02dc6c00 	.word	0x02dc6c00
 800b208:	46000000 	.word	0x46000000
 800b20c:	4c742400 	.word	0x4c742400
 800b210:	4a742400 	.word	0x4a742400
 800b214:	4c371b00 	.word	0x4c371b00

0800b218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b21e:	f7ff fe81 	bl	800af24 <HAL_RCC_GetSysClockFreq>
 800b222:	4602      	mov	r2, r0
 800b224:	4b10      	ldr	r3, [pc, #64]	; (800b268 <HAL_RCC_GetHCLKFreq+0x50>)
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	0a1b      	lsrs	r3, r3, #8
 800b22a:	f003 030f 	and.w	r3, r3, #15
 800b22e:	490f      	ldr	r1, [pc, #60]	; (800b26c <HAL_RCC_GetHCLKFreq+0x54>)
 800b230:	5ccb      	ldrb	r3, [r1, r3]
 800b232:	f003 031f 	and.w	r3, r3, #31
 800b236:	fa22 f303 	lsr.w	r3, r2, r3
 800b23a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b23c:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <HAL_RCC_GetHCLKFreq+0x50>)
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	f003 030f 	and.w	r3, r3, #15
 800b244:	4a09      	ldr	r2, [pc, #36]	; (800b26c <HAL_RCC_GetHCLKFreq+0x54>)
 800b246:	5cd3      	ldrb	r3, [r2, r3]
 800b248:	f003 031f 	and.w	r3, r3, #31
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	fa22 f303 	lsr.w	r3, r2, r3
 800b252:	4a07      	ldr	r2, [pc, #28]	; (800b270 <HAL_RCC_GetHCLKFreq+0x58>)
 800b254:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b256:	4a07      	ldr	r2, [pc, #28]	; (800b274 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b25c:	4b04      	ldr	r3, [pc, #16]	; (800b270 <HAL_RCC_GetHCLKFreq+0x58>)
 800b25e:	681b      	ldr	r3, [r3, #0]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	58024400 	.word	0x58024400
 800b26c:	08014d20 	.word	0x08014d20
 800b270:	2400023c 	.word	0x2400023c
 800b274:	24000238 	.word	0x24000238

0800b278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b27c:	f7ff ffcc 	bl	800b218 <HAL_RCC_GetHCLKFreq>
 800b280:	4602      	mov	r2, r0
 800b282:	4b06      	ldr	r3, [pc, #24]	; (800b29c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b284:	69db      	ldr	r3, [r3, #28]
 800b286:	091b      	lsrs	r3, r3, #4
 800b288:	f003 0307 	and.w	r3, r3, #7
 800b28c:	4904      	ldr	r1, [pc, #16]	; (800b2a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b28e:	5ccb      	ldrb	r3, [r1, r3]
 800b290:	f003 031f 	and.w	r3, r3, #31
 800b294:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b298:	4618      	mov	r0, r3
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	58024400 	.word	0x58024400
 800b2a0:	08014d20 	.word	0x08014d20

0800b2a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b2a8:	f7ff ffb6 	bl	800b218 <HAL_RCC_GetHCLKFreq>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	4b06      	ldr	r3, [pc, #24]	; (800b2c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	0a1b      	lsrs	r3, r3, #8
 800b2b4:	f003 0307 	and.w	r3, r3, #7
 800b2b8:	4904      	ldr	r1, [pc, #16]	; (800b2cc <HAL_RCC_GetPCLK2Freq+0x28>)
 800b2ba:	5ccb      	ldrb	r3, [r1, r3]
 800b2bc:	f003 031f 	and.w	r3, r3, #31
 800b2c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	58024400 	.word	0x58024400
 800b2cc:	08014d20 	.word	0x08014d20

0800b2d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b2d8:	2300      	movs	r3, #0
 800b2da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b2dc:	2300      	movs	r3, #0
 800b2de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d03f      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2f4:	d02a      	beq.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b2f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2fa:	d824      	bhi.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b2fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b300:	d018      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b306:	d81e      	bhi.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d003      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b30c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b310:	d007      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b312:	e018      	b.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b314:	4ba3      	ldr	r3, [pc, #652]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b318:	4aa2      	ldr	r2, [pc, #648]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b31a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b31e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b320:	e015      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	3304      	adds	r3, #4
 800b326:	2102      	movs	r1, #2
 800b328:	4618      	mov	r0, r3
 800b32a:	f001 f9d5 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b32e:	4603      	mov	r3, r0
 800b330:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b332:	e00c      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3324      	adds	r3, #36	; 0x24
 800b338:	2102      	movs	r1, #2
 800b33a:	4618      	mov	r0, r3
 800b33c:	f001 fa7e 	bl	800c83c <RCCEx_PLL3_Config>
 800b340:	4603      	mov	r3, r0
 800b342:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b344:	e003      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	75fb      	strb	r3, [r7, #23]
      break;
 800b34a:	e000      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b34c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b34e:	7dfb      	ldrb	r3, [r7, #23]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d109      	bne.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b354:	4b93      	ldr	r3, [pc, #588]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b360:	4990      	ldr	r1, [pc, #576]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b362:	4313      	orrs	r3, r2
 800b364:	650b      	str	r3, [r1, #80]	; 0x50
 800b366:	e001      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b368:	7dfb      	ldrb	r3, [r7, #23]
 800b36a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b374:	2b00      	cmp	r3, #0
 800b376:	d03d      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37c:	2b04      	cmp	r3, #4
 800b37e:	d826      	bhi.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b380:	a201      	add	r2, pc, #4	; (adr r2, 800b388 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b386:	bf00      	nop
 800b388:	0800b39d 	.word	0x0800b39d
 800b38c:	0800b3ab 	.word	0x0800b3ab
 800b390:	0800b3bd 	.word	0x0800b3bd
 800b394:	0800b3d5 	.word	0x0800b3d5
 800b398:	0800b3d5 	.word	0x0800b3d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b39c:	4b81      	ldr	r3, [pc, #516]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a0:	4a80      	ldr	r2, [pc, #512]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b3a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b3a8:	e015      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f001 f991 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b3ba:	e00c      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	3324      	adds	r3, #36	; 0x24
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f001 fa3a 	bl	800c83c <RCCEx_PLL3_Config>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b3cc:	e003      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b3d2:	e000      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b3d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d109      	bne.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b3dc:	4b71      	ldr	r3, [pc, #452]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3e0:	f023 0207 	bic.w	r2, r3, #7
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e8:	496e      	ldr	r1, [pc, #440]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	650b      	str	r3, [r1, #80]	; 0x50
 800b3ee:	e001      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3f0:	7dfb      	ldrb	r3, [r7, #23]
 800b3f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d042      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b408:	d02b      	beq.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b40a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b40e:	d825      	bhi.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b410:	2bc0      	cmp	r3, #192	; 0xc0
 800b412:	d028      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b414:	2bc0      	cmp	r3, #192	; 0xc0
 800b416:	d821      	bhi.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b418:	2b80      	cmp	r3, #128	; 0x80
 800b41a:	d016      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b41c:	2b80      	cmp	r3, #128	; 0x80
 800b41e:	d81d      	bhi.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b424:	2b40      	cmp	r3, #64	; 0x40
 800b426:	d007      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b428:	e018      	b.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b42a:	4b5e      	ldr	r3, [pc, #376]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42e:	4a5d      	ldr	r2, [pc, #372]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b434:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b436:	e017      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3304      	adds	r3, #4
 800b43c:	2100      	movs	r1, #0
 800b43e:	4618      	mov	r0, r3
 800b440:	f001 f94a 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b444:	4603      	mov	r3, r0
 800b446:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b448:	e00e      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3324      	adds	r3, #36	; 0x24
 800b44e:	2100      	movs	r1, #0
 800b450:	4618      	mov	r0, r3
 800b452:	f001 f9f3 	bl	800c83c <RCCEx_PLL3_Config>
 800b456:	4603      	mov	r3, r0
 800b458:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b45a:	e005      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	75fb      	strb	r3, [r7, #23]
      break;
 800b460:	e002      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b462:	bf00      	nop
 800b464:	e000      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b466:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b468:	7dfb      	ldrb	r3, [r7, #23]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d109      	bne.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b46e:	4b4d      	ldr	r3, [pc, #308]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b472:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b47a:	494a      	ldr	r1, [pc, #296]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b47c:	4313      	orrs	r3, r2
 800b47e:	650b      	str	r3, [r1, #80]	; 0x50
 800b480:	e001      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d049      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b498:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b49c:	d030      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b49e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b4a2:	d82a      	bhi.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b4a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4a8:	d02c      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b4aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4ae:	d824      	bhi.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b4b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4b4:	d018      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b4b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4ba:	d81e      	bhi.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b4c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4c4:	d007      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b4c6:	e018      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4c8:	4b36      	ldr	r3, [pc, #216]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4cc:	4a35      	ldr	r2, [pc, #212]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b4ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b4d4:	e017      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	2100      	movs	r1, #0
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f001 f8fb 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b4e6:	e00e      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3324      	adds	r3, #36	; 0x24
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f001 f9a4 	bl	800c83c <RCCEx_PLL3_Config>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b4f8:	e005      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	75fb      	strb	r3, [r7, #23]
      break;
 800b4fe:	e002      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b500:	bf00      	nop
 800b502:	e000      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b504:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10a      	bne.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b50c:	4b25      	ldr	r3, [pc, #148]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b510:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b51a:	4922      	ldr	r1, [pc, #136]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b51c:	4313      	orrs	r3, r2
 800b51e:	658b      	str	r3, [r1, #88]	; 0x58
 800b520:	e001      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b522:	7dfb      	ldrb	r3, [r7, #23]
 800b524:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d04b      	beq.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b53c:	d030      	beq.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b53e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b542:	d82a      	bhi.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b544:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b548:	d02e      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800b54a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b54e:	d824      	bhi.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b550:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b554:	d018      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b55a:	d81e      	bhi.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d003      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b564:	d007      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b566:	e018      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b568:	4b0e      	ldr	r3, [pc, #56]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56c:	4a0d      	ldr	r2, [pc, #52]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b56e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b572:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b574:	e019      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3304      	adds	r3, #4
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f001 f8ab 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b582:	4603      	mov	r3, r0
 800b584:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b586:	e010      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	3324      	adds	r3, #36	; 0x24
 800b58c:	2100      	movs	r1, #0
 800b58e:	4618      	mov	r0, r3
 800b590:	f001 f954 	bl	800c83c <RCCEx_PLL3_Config>
 800b594:	4603      	mov	r3, r0
 800b596:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b598:	e007      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	75fb      	strb	r3, [r7, #23]
      break;
 800b59e:	e004      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800b5a0:	bf00      	nop
 800b5a2:	e002      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b5a4:	58024400 	.word	0x58024400
      break;
 800b5a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b5b0:	4b99      	ldr	r3, [pc, #612]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b5be:	4996      	ldr	r1, [pc, #600]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	658b      	str	r3, [r1, #88]	; 0x58
 800b5c4:	e001      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
 800b5c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d032      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5da:	2b30      	cmp	r3, #48	; 0x30
 800b5dc:	d01c      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800b5de:	2b30      	cmp	r3, #48	; 0x30
 800b5e0:	d817      	bhi.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b5e2:	2b20      	cmp	r3, #32
 800b5e4:	d00c      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800b5e6:	2b20      	cmp	r3, #32
 800b5e8:	d813      	bhi.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d016      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b5ee:	2b10      	cmp	r3, #16
 800b5f0:	d10f      	bne.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5f2:	4b89      	ldr	r3, [pc, #548]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f6:	4a88      	ldr	r2, [pc, #544]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b5f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b5fe:	e00e      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3304      	adds	r3, #4
 800b604:	2102      	movs	r1, #2
 800b606:	4618      	mov	r0, r3
 800b608:	f001 f866 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b60c:	4603      	mov	r3, r0
 800b60e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b610:	e005      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	75fb      	strb	r3, [r7, #23]
      break;
 800b616:	e002      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b618:	bf00      	nop
 800b61a:	e000      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b61c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d109      	bne.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b624:	4b7c      	ldr	r3, [pc, #496]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b628:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b630:	4979      	ldr	r1, [pc, #484]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b632:	4313      	orrs	r3, r2
 800b634:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b636:	e001      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b638:	7dfb      	ldrb	r3, [r7, #23]
 800b63a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d047      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b64c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b650:	d030      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b656:	d82a      	bhi.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b65c:	d02c      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b65e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b662:	d824      	bhi.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b668:	d018      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800b66a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b66e:	d81e      	bhi.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b678:	d007      	beq.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800b67a:	e018      	b.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b67c:	4b66      	ldr	r3, [pc, #408]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b680:	4a65      	ldr	r2, [pc, #404]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b686:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b688:	e017      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3304      	adds	r3, #4
 800b68e:	2100      	movs	r1, #0
 800b690:	4618      	mov	r0, r3
 800b692:	f001 f821 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b696:	4603      	mov	r3, r0
 800b698:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b69a:	e00e      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3324      	adds	r3, #36	; 0x24
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f001 f8ca 	bl	800c83c <RCCEx_PLL3_Config>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b6ac:	e005      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b6b2:	e002      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b6b4:	bf00      	nop
 800b6b6:	e000      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b6b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d109      	bne.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b6c0:	4b55      	ldr	r3, [pc, #340]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b6c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6cc:	4952      	ldr	r1, [pc, #328]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	650b      	str	r3, [r1, #80]	; 0x50
 800b6d2:	e001      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
 800b6d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d049      	beq.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b6ec:	d02e      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b6ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b6f2:	d828      	bhi.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b6f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b6f8:	d02a      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800b6fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b6fe:	d822      	bhi.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b700:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b704:	d026      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800b706:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b70a:	d81c      	bhi.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b70c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b710:	d010      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800b712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b716:	d816      	bhi.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d01d      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800b71c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b720:	d111      	bne.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3304      	adds	r3, #4
 800b726:	2101      	movs	r1, #1
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 ffd5 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b72e:	4603      	mov	r3, r0
 800b730:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b732:	e012      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3324      	adds	r3, #36	; 0x24
 800b738:	2101      	movs	r1, #1
 800b73a:	4618      	mov	r0, r3
 800b73c:	f001 f87e 	bl	800c83c <RCCEx_PLL3_Config>
 800b740:	4603      	mov	r3, r0
 800b742:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b744:	e009      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	75fb      	strb	r3, [r7, #23]
      break;
 800b74a:	e006      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b74c:	bf00      	nop
 800b74e:	e004      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b750:	bf00      	nop
 800b752:	e002      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b754:	bf00      	nop
 800b756:	e000      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d109      	bne.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b760:	4b2d      	ldr	r3, [pc, #180]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b764:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b76c:	492a      	ldr	r1, [pc, #168]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	650b      	str	r3, [r1, #80]	; 0x50
 800b772:	e001      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b780:	2b00      	cmp	r3, #0
 800b782:	d04d      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b78a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b78e:	d02e      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b794:	d828      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b79a:	d02a      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b79c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7a0:	d822      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b7a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7a6:	d026      	beq.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800b7a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7ac:	d81c      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b7ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7b2:	d010      	beq.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b7b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7b8:	d816      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d01d      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b7be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7c2:	d111      	bne.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	3304      	adds	r3, #4
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 ff84 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b7d4:	e012      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	3324      	adds	r3, #36	; 0x24
 800b7da:	2101      	movs	r1, #1
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f001 f82d 	bl	800c83c <RCCEx_PLL3_Config>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b7e6:	e009      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ec:	e006      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b7ee:	bf00      	nop
 800b7f0:	e004      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b7f2:	bf00      	nop
 800b7f4:	e002      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b7f6:	bf00      	nop
 800b7f8:	e000      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b7fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10c      	bne.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b802:	4b05      	ldr	r3, [pc, #20]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b806:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b810:	4901      	ldr	r1, [pc, #4]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b812:	4313      	orrs	r3, r2
 800b814:	658b      	str	r3, [r1, #88]	; 0x58
 800b816:	e003      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b81c:	7dfb      	ldrb	r3, [r7, #23]
 800b81e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d02f      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b834:	d00e      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800b836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83a:	d814      	bhi.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d015      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800b840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b844:	d10f      	bne.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b846:	4baf      	ldr	r3, [pc, #700]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84a:	4aae      	ldr	r2, [pc, #696]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b84c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b850:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b852:	e00c      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3304      	adds	r3, #4
 800b858:	2101      	movs	r1, #1
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 ff3c 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b860:	4603      	mov	r3, r0
 800b862:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b864:	e003      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	75fb      	strb	r3, [r7, #23]
      break;
 800b86a:	e000      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800b86c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d109      	bne.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b874:	4ba3      	ldr	r3, [pc, #652]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b878:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b880:	49a0      	ldr	r1, [pc, #640]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b882:	4313      	orrs	r3, r2
 800b884:	650b      	str	r3, [r1, #80]	; 0x50
 800b886:	e001      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b894:	2b00      	cmp	r3, #0
 800b896:	d032      	beq.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89c:	2b03      	cmp	r3, #3
 800b89e:	d81b      	bhi.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b8a0:	a201      	add	r2, pc, #4	; (adr r2, 800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800b8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a6:	bf00      	nop
 800b8a8:	0800b8df 	.word	0x0800b8df
 800b8ac:	0800b8b9 	.word	0x0800b8b9
 800b8b0:	0800b8c7 	.word	0x0800b8c7
 800b8b4:	0800b8df 	.word	0x0800b8df
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8b8:	4b92      	ldr	r3, [pc, #584]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8bc:	4a91      	ldr	r2, [pc, #580]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b8c4:	e00c      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	2102      	movs	r1, #2
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 ff03 	bl	800c6d8 <RCCEx_PLL2_Config>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b8d6:	e003      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	75fb      	strb	r3, [r7, #23]
      break;
 800b8dc:	e000      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b8de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d109      	bne.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b8e6:	4b87      	ldr	r3, [pc, #540]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ea:	f023 0203 	bic.w	r2, r3, #3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8f2:	4984      	ldr	r1, [pc, #528]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b8f8:	e001      	b.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
 800b8fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b906:	2b00      	cmp	r3, #0
 800b908:	f000 8086 	beq.w	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b90c:	4b7e      	ldr	r3, [pc, #504]	; (800bb08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a7d      	ldr	r2, [pc, #500]	; (800bb08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b916:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b918:	f7fb f970 	bl	8006bfc <HAL_GetTick>
 800b91c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b91e:	e009      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b920:	f7fb f96c 	bl	8006bfc <HAL_GetTick>
 800b924:	4602      	mov	r2, r0
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	2b64      	cmp	r3, #100	; 0x64
 800b92c:	d902      	bls.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b92e:	2303      	movs	r3, #3
 800b930:	75fb      	strb	r3, [r7, #23]
        break;
 800b932:	e005      	b.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b934:	4b74      	ldr	r3, [pc, #464]	; (800bb08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d0ef      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b940:	7dfb      	ldrb	r3, [r7, #23]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d166      	bne.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b946:	4b6f      	ldr	r3, [pc, #444]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b948:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b950:	4053      	eors	r3, r2
 800b952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b956:	2b00      	cmp	r3, #0
 800b958:	d013      	beq.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b95a:	4b6a      	ldr	r3, [pc, #424]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b95e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b962:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b964:	4b67      	ldr	r3, [pc, #412]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b968:	4a66      	ldr	r2, [pc, #408]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b96a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b96e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b970:	4b64      	ldr	r3, [pc, #400]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b974:	4a63      	ldr	r2, [pc, #396]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b97a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b97c:	4a61      	ldr	r2, [pc, #388]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b98c:	d115      	bne.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b98e:	f7fb f935 	bl	8006bfc <HAL_GetTick>
 800b992:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b994:	e00b      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b996:	f7fb f931 	bl	8006bfc <HAL_GetTick>
 800b99a:	4602      	mov	r2, r0
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d902      	bls.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	75fb      	strb	r3, [r7, #23]
            break;
 800b9ac:	e005      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9ae:	4b55      	ldr	r3, [pc, #340]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b2:	f003 0302 	and.w	r3, r3, #2
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d0ed      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b9ba:	7dfb      	ldrb	r3, [r7, #23]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d126      	bne.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b9c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9ce:	d10d      	bne.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b9d0:	4b4c      	ldr	r3, [pc, #304]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b9de:	0919      	lsrs	r1, r3, #4
 800b9e0:	4b4a      	ldr	r3, [pc, #296]	; (800bb0c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800b9e2:	400b      	ands	r3, r1
 800b9e4:	4947      	ldr	r1, [pc, #284]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	610b      	str	r3, [r1, #16]
 800b9ea:	e005      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b9ec:	4b45      	ldr	r3, [pc, #276]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	4a44      	ldr	r2, [pc, #272]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b9f6:	6113      	str	r3, [r2, #16]
 800b9f8:	4b42      	ldr	r3, [pc, #264]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba06:	493f      	ldr	r1, [pc, #252]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	670b      	str	r3, [r1, #112]	; 0x70
 800ba0c:	e004      	b.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	75bb      	strb	r3, [r7, #22]
 800ba12:	e001      	b.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba14:	7dfb      	ldrb	r3, [r7, #23]
 800ba16:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 0301 	and.w	r3, r3, #1
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f000 8085 	beq.w	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba2a:	2b28      	cmp	r3, #40	; 0x28
 800ba2c:	d866      	bhi.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800ba2e:	a201      	add	r2, pc, #4	; (adr r2, 800ba34 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800ba30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba34:	0800bb11 	.word	0x0800bb11
 800ba38:	0800bafd 	.word	0x0800bafd
 800ba3c:	0800bafd 	.word	0x0800bafd
 800ba40:	0800bafd 	.word	0x0800bafd
 800ba44:	0800bafd 	.word	0x0800bafd
 800ba48:	0800bafd 	.word	0x0800bafd
 800ba4c:	0800bafd 	.word	0x0800bafd
 800ba50:	0800bafd 	.word	0x0800bafd
 800ba54:	0800bad9 	.word	0x0800bad9
 800ba58:	0800bafd 	.word	0x0800bafd
 800ba5c:	0800bafd 	.word	0x0800bafd
 800ba60:	0800bafd 	.word	0x0800bafd
 800ba64:	0800bafd 	.word	0x0800bafd
 800ba68:	0800bafd 	.word	0x0800bafd
 800ba6c:	0800bafd 	.word	0x0800bafd
 800ba70:	0800bafd 	.word	0x0800bafd
 800ba74:	0800baeb 	.word	0x0800baeb
 800ba78:	0800bafd 	.word	0x0800bafd
 800ba7c:	0800bafd 	.word	0x0800bafd
 800ba80:	0800bafd 	.word	0x0800bafd
 800ba84:	0800bafd 	.word	0x0800bafd
 800ba88:	0800bafd 	.word	0x0800bafd
 800ba8c:	0800bafd 	.word	0x0800bafd
 800ba90:	0800bafd 	.word	0x0800bafd
 800ba94:	0800bb11 	.word	0x0800bb11
 800ba98:	0800bafd 	.word	0x0800bafd
 800ba9c:	0800bafd 	.word	0x0800bafd
 800baa0:	0800bafd 	.word	0x0800bafd
 800baa4:	0800bafd 	.word	0x0800bafd
 800baa8:	0800bafd 	.word	0x0800bafd
 800baac:	0800bafd 	.word	0x0800bafd
 800bab0:	0800bafd 	.word	0x0800bafd
 800bab4:	0800bb11 	.word	0x0800bb11
 800bab8:	0800bafd 	.word	0x0800bafd
 800babc:	0800bafd 	.word	0x0800bafd
 800bac0:	0800bafd 	.word	0x0800bafd
 800bac4:	0800bafd 	.word	0x0800bafd
 800bac8:	0800bafd 	.word	0x0800bafd
 800bacc:	0800bafd 	.word	0x0800bafd
 800bad0:	0800bafd 	.word	0x0800bafd
 800bad4:	0800bb11 	.word	0x0800bb11
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3304      	adds	r3, #4
 800badc:	2101      	movs	r1, #1
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 fdfa 	bl	800c6d8 <RCCEx_PLL2_Config>
 800bae4:	4603      	mov	r3, r0
 800bae6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bae8:	e013      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	3324      	adds	r3, #36	; 0x24
 800baee:	2101      	movs	r1, #1
 800baf0:	4618      	mov	r0, r3
 800baf2:	f000 fea3 	bl	800c83c <RCCEx_PLL3_Config>
 800baf6:	4603      	mov	r3, r0
 800baf8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bafa:	e00a      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	75fb      	strb	r3, [r7, #23]
      break;
 800bb00:	e007      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800bb02:	bf00      	nop
 800bb04:	58024400 	.word	0x58024400
 800bb08:	58024800 	.word	0x58024800
 800bb0c:	00ffffcf 	.word	0x00ffffcf
      break;
 800bb10:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d109      	bne.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bb18:	4b96      	ldr	r3, [pc, #600]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bb1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb1c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb24:	4993      	ldr	r1, [pc, #588]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bb26:	4313      	orrs	r3, r2
 800bb28:	654b      	str	r3, [r1, #84]	; 0x54
 800bb2a:	e001      	b.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2c:	7dfb      	ldrb	r3, [r7, #23]
 800bb2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 0302 	and.w	r3, r3, #2
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d038      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb40:	2b05      	cmp	r3, #5
 800bb42:	d821      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800bb44:	a201      	add	r2, pc, #4	; (adr r2, 800bb4c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800bb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4a:	bf00      	nop
 800bb4c:	0800bb8f 	.word	0x0800bb8f
 800bb50:	0800bb65 	.word	0x0800bb65
 800bb54:	0800bb77 	.word	0x0800bb77
 800bb58:	0800bb8f 	.word	0x0800bb8f
 800bb5c:	0800bb8f 	.word	0x0800bb8f
 800bb60:	0800bb8f 	.word	0x0800bb8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	3304      	adds	r3, #4
 800bb68:	2101      	movs	r1, #1
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 fdb4 	bl	800c6d8 <RCCEx_PLL2_Config>
 800bb70:	4603      	mov	r3, r0
 800bb72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bb74:	e00c      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	3324      	adds	r3, #36	; 0x24
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 fe5d 	bl	800c83c <RCCEx_PLL3_Config>
 800bb82:	4603      	mov	r3, r0
 800bb84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bb86:	e003      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb8c:	e000      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800bb8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb90:	7dfb      	ldrb	r3, [r7, #23]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d109      	bne.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb96:	4b77      	ldr	r3, [pc, #476]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9a:	f023 0207 	bic.w	r2, r3, #7
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bba2:	4974      	ldr	r1, [pc, #464]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bba4:	4313      	orrs	r3, r2
 800bba6:	654b      	str	r3, [r1, #84]	; 0x54
 800bba8:	e001      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbaa:	7dfb      	ldrb	r3, [r7, #23]
 800bbac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 0304 	and.w	r3, r3, #4
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d03a      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbc0:	2b05      	cmp	r3, #5
 800bbc2:	d821      	bhi.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800bbc4:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800bbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbca:	bf00      	nop
 800bbcc:	0800bc0f 	.word	0x0800bc0f
 800bbd0:	0800bbe5 	.word	0x0800bbe5
 800bbd4:	0800bbf7 	.word	0x0800bbf7
 800bbd8:	0800bc0f 	.word	0x0800bc0f
 800bbdc:	0800bc0f 	.word	0x0800bc0f
 800bbe0:	0800bc0f 	.word	0x0800bc0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	2101      	movs	r1, #1
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 fd74 	bl	800c6d8 <RCCEx_PLL2_Config>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bbf4:	e00c      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	3324      	adds	r3, #36	; 0x24
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f000 fe1d 	bl	800c83c <RCCEx_PLL3_Config>
 800bc02:	4603      	mov	r3, r0
 800bc04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bc06:	e003      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	75fb      	strb	r3, [r7, #23]
      break;
 800bc0c:	e000      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800bc0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc10:	7dfb      	ldrb	r3, [r7, #23]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10a      	bne.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc16:	4b57      	ldr	r3, [pc, #348]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc1a:	f023 0207 	bic.w	r2, r3, #7
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc24:	4953      	ldr	r1, [pc, #332]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	658b      	str	r3, [r1, #88]	; 0x58
 800bc2a:	e001      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
 800bc2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 0320 	and.w	r3, r3, #32
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d04b      	beq.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc46:	d02e      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bc48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc4c:	d828      	bhi.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bc4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc52:	d02a      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800bc54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc58:	d822      	bhi.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bc5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc5e:	d026      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bc60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc64:	d81c      	bhi.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bc66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc6a:	d010      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800bc6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc70:	d816      	bhi.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d01d      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800bc76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc7a:	d111      	bne.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	2100      	movs	r1, #0
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 fd28 	bl	800c6d8 <RCCEx_PLL2_Config>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bc8c:	e012      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	3324      	adds	r3, #36	; 0x24
 800bc92:	2102      	movs	r1, #2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f000 fdd1 	bl	800c83c <RCCEx_PLL3_Config>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bc9e:	e009      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	75fb      	strb	r3, [r7, #23]
      break;
 800bca4:	e006      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bca6:	bf00      	nop
 800bca8:	e004      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bcaa:	bf00      	nop
 800bcac:	e002      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bcae:	bf00      	nop
 800bcb0:	e000      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bcb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10a      	bne.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bcba:	4b2e      	ldr	r3, [pc, #184]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bcbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcc8:	492a      	ldr	r1, [pc, #168]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bcca:	4313      	orrs	r3, r2
 800bccc:	654b      	str	r3, [r1, #84]	; 0x54
 800bcce:	e001      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd0:	7dfb      	ldrb	r3, [r7, #23]
 800bcd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d04d      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bce6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bcea:	d02e      	beq.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bcec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bcf0:	d828      	bhi.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bcf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcf6:	d02a      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bcf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcfc:	d822      	bhi.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bcfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd02:	d026      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800bd04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd08:	d81c      	bhi.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bd0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd0e:	d010      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800bd10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd14:	d816      	bhi.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d01d      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800bd1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd1e:	d111      	bne.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	3304      	adds	r3, #4
 800bd24:	2100      	movs	r1, #0
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 fcd6 	bl	800c6d8 <RCCEx_PLL2_Config>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bd30:	e012      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	3324      	adds	r3, #36	; 0x24
 800bd36:	2102      	movs	r1, #2
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 fd7f 	bl	800c83c <RCCEx_PLL3_Config>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bd42:	e009      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	75fb      	strb	r3, [r7, #23]
      break;
 800bd48:	e006      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bd4a:	bf00      	nop
 800bd4c:	e004      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bd4e:	bf00      	nop
 800bd50:	e002      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bd52:	bf00      	nop
 800bd54:	e000      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bd56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd58:	7dfb      	ldrb	r3, [r7, #23]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10c      	bne.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bd5e:	4b05      	ldr	r3, [pc, #20]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bd60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd6c:	4901      	ldr	r1, [pc, #4]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	658b      	str	r3, [r1, #88]	; 0x58
 800bd72:	e003      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800bd74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
 800bd7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d04b      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd92:	d02e      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800bd94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd98:	d828      	bhi.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bd9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd9e:	d02a      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800bda0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bda4:	d822      	bhi.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bda6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bdaa:	d026      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800bdac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bdb0:	d81c      	bhi.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bdb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdb6:	d010      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800bdb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdbc:	d816      	bhi.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d01d      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800bdc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdc6:	d111      	bne.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	3304      	adds	r3, #4
 800bdcc:	2100      	movs	r1, #0
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f000 fc82 	bl	800c6d8 <RCCEx_PLL2_Config>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bdd8:	e012      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	3324      	adds	r3, #36	; 0x24
 800bdde:	2102      	movs	r1, #2
 800bde0:	4618      	mov	r0, r3
 800bde2:	f000 fd2b 	bl	800c83c <RCCEx_PLL3_Config>
 800bde6:	4603      	mov	r3, r0
 800bde8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bdea:	e009      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	75fb      	strb	r3, [r7, #23]
      break;
 800bdf0:	e006      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bdf2:	bf00      	nop
 800bdf4:	e004      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bdf6:	bf00      	nop
 800bdf8:	e002      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bdfa:	bf00      	nop
 800bdfc:	e000      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bdfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be00:	7dfb      	ldrb	r3, [r7, #23]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10a      	bne.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800be06:	4b9d      	ldr	r3, [pc, #628]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be14:	4999      	ldr	r1, [pc, #612]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be16:	4313      	orrs	r3, r2
 800be18:	658b      	str	r3, [r1, #88]	; 0x58
 800be1a:	e001      	b.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be1c:	7dfb      	ldrb	r3, [r7, #23]
 800be1e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f003 0308 	and.w	r3, r3, #8
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01a      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be36:	d10a      	bne.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	3324      	adds	r3, #36	; 0x24
 800be3c:	2102      	movs	r1, #2
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 fcfc 	bl	800c83c <RCCEx_PLL3_Config>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800be4e:	4b8b      	ldr	r3, [pc, #556]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be5c:	4987      	ldr	r1, [pc, #540]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f003 0310 	and.w	r3, r3, #16
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d01a      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be78:	d10a      	bne.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	3324      	adds	r3, #36	; 0x24
 800be7e:	2102      	movs	r1, #2
 800be80:	4618      	mov	r0, r3
 800be82:	f000 fcdb 	bl	800c83c <RCCEx_PLL3_Config>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be90:	4b7a      	ldr	r3, [pc, #488]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be9e:	4977      	ldr	r1, [pc, #476]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bea0:	4313      	orrs	r3, r2
 800bea2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d034      	beq.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800beb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800beba:	d01d      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800bebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bec0:	d817      	bhi.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800bec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beca:	d009      	beq.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800becc:	e011      	b.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	3304      	adds	r3, #4
 800bed2:	2100      	movs	r1, #0
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 fbff 	bl	800c6d8 <RCCEx_PLL2_Config>
 800beda:	4603      	mov	r3, r0
 800bedc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bede:	e00c      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	3324      	adds	r3, #36	; 0x24
 800bee4:	2102      	movs	r1, #2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 fca8 	bl	800c83c <RCCEx_PLL3_Config>
 800beec:	4603      	mov	r3, r0
 800beee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bef0:	e003      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	75fb      	strb	r3, [r7, #23]
      break;
 800bef6:	e000      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800bef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800befa:	7dfb      	ldrb	r3, [r7, #23]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10a      	bne.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf00:	4b5e      	ldr	r3, [pc, #376]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf0e:	495b      	ldr	r1, [pc, #364]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf10:	4313      	orrs	r3, r2
 800bf12:	658b      	str	r3, [r1, #88]	; 0x58
 800bf14:	e001      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
 800bf18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d033      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf30:	d01c      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800bf32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf36:	d816      	bhi.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800bf38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf3c:	d003      	beq.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800bf3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf42:	d007      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800bf44:	e00f      	b.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf46:	4b4d      	ldr	r3, [pc, #308]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4a:	4a4c      	ldr	r2, [pc, #304]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800bf52:	e00c      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3324      	adds	r3, #36	; 0x24
 800bf58:	2101      	movs	r1, #1
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 fc6e 	bl	800c83c <RCCEx_PLL3_Config>
 800bf60:	4603      	mov	r3, r0
 800bf62:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bf64:	e003      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	75fb      	strb	r3, [r7, #23]
      break;
 800bf6a:	e000      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800bf6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10a      	bne.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf74:	4b41      	ldr	r3, [pc, #260]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf82:	493e      	ldr	r1, [pc, #248]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf84:	4313      	orrs	r3, r2
 800bf86:	654b      	str	r3, [r1, #84]	; 0x54
 800bf88:	e001      	b.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf8a:	7dfb      	ldrb	r3, [r7, #23]
 800bf8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d029      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d003      	beq.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800bfa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfa6:	d007      	beq.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800bfa8:	e00f      	b.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfaa:	4b34      	ldr	r3, [pc, #208]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfae:	4a33      	ldr	r2, [pc, #204]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bfb6:	e00b      	b.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	3304      	adds	r3, #4
 800bfbc:	2102      	movs	r1, #2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 fb8a 	bl	800c6d8 <RCCEx_PLL2_Config>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bfc8:	e002      	b.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	75fb      	strb	r3, [r7, #23]
      break;
 800bfce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfd0:	7dfb      	ldrb	r3, [r7, #23]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d109      	bne.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bfd6:	4b29      	ldr	r3, [pc, #164]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfe2:	4926      	ldr	r1, [pc, #152]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bfe8:	e001      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfea:	7dfb      	ldrb	r3, [r7, #23]
 800bfec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00a      	beq.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3324      	adds	r3, #36	; 0x24
 800bffe:	2102      	movs	r1, #2
 800c000:	4618      	mov	r0, r3
 800c002:	f000 fc1b 	bl	800c83c <RCCEx_PLL3_Config>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d001      	beq.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d033      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c024:	d017      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c02a:	d811      	bhi.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c030:	d013      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c036:	d80b      	bhi.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d010      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800c03c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c040:	d106      	bne.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c042:	4b0e      	ldr	r3, [pc, #56]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c046:	4a0d      	ldr	r2, [pc, #52]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c04c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c04e:	e007      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	75fb      	strb	r3, [r7, #23]
      break;
 800c054:	e004      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c056:	bf00      	nop
 800c058:	e002      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c05a:	bf00      	nop
 800c05c:	e000      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c05e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10c      	bne.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c066:	4b05      	ldr	r3, [pc, #20]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c06a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c072:	4902      	ldr	r1, [pc, #8]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c074:	4313      	orrs	r3, r2
 800c076:	654b      	str	r3, [r1, #84]	; 0x54
 800c078:	e004      	b.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800c07a:	bf00      	nop
 800c07c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c080:	7dfb      	ldrb	r3, [r7, #23]
 800c082:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d008      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c090:	4b31      	ldr	r3, [pc, #196]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c094:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c09c:	492e      	ldr	r1, [pc, #184]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d009      	beq.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c0ae:	4b2a      	ldr	r3, [pc, #168]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c0bc:	4926      	ldr	r1, [pc, #152]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d008      	beq.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c0ce:	4b22      	ldr	r3, [pc, #136]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c0d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0da:	491f      	ldr	r1, [pc, #124]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00d      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0ec:	4b1a      	ldr	r3, [pc, #104]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	4a19      	ldr	r2, [pc, #100]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c0f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0f6:	6113      	str	r3, [r2, #16]
 800c0f8:	4b17      	ldr	r3, [pc, #92]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c0fa:	691a      	ldr	r2, [r3, #16]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c102:	4915      	ldr	r1, [pc, #84]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c104:	4313      	orrs	r3, r2
 800c106:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	da08      	bge.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c110:	4b11      	ldr	r3, [pc, #68]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c114:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c11c:	490e      	ldr	r1, [pc, #56]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c11e:	4313      	orrs	r3, r2
 800c120:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d009      	beq.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c12e:	4b0a      	ldr	r3, [pc, #40]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c132:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c13c:	4906      	ldr	r1, [pc, #24]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c13e:	4313      	orrs	r3, r2
 800c140:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c142:	7dbb      	ldrb	r3, [r7, #22]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c148:	2300      	movs	r3, #0
 800c14a:	e000      	b.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	58024400 	.word	0x58024400

0800c15c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c160:	f7ff f85a 	bl	800b218 <HAL_RCC_GetHCLKFreq>
 800c164:	4602      	mov	r2, r0
 800c166:	4b06      	ldr	r3, [pc, #24]	; (800c180 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	091b      	lsrs	r3, r3, #4
 800c16c:	f003 0307 	and.w	r3, r3, #7
 800c170:	4904      	ldr	r1, [pc, #16]	; (800c184 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c172:	5ccb      	ldrb	r3, [r1, r3]
 800c174:	f003 031f 	and.w	r3, r3, #31
 800c178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	58024400 	.word	0x58024400
 800c184:	08014d20 	.word	0x08014d20

0800c188 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c188:	b480      	push	{r7}
 800c18a:	b089      	sub	sp, #36	; 0x24
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c190:	4ba1      	ldr	r3, [pc, #644]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c194:	f003 0303 	and.w	r3, r3, #3
 800c198:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c19a:	4b9f      	ldr	r3, [pc, #636]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19e:	0b1b      	lsrs	r3, r3, #12
 800c1a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c1a6:	4b9c      	ldr	r3, [pc, #624]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	091b      	lsrs	r3, r3, #4
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c1b2:	4b99      	ldr	r3, [pc, #612]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b6:	08db      	lsrs	r3, r3, #3
 800c1b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	fb02 f303 	mul.w	r3, r2, r3
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 8111 	beq.w	800c3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	f000 8083 	beq.w	800c2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	f200 80a1 	bhi.w	800c328 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d056      	beq.n	800c2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c1f2:	e099      	b.n	800c328 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1f4:	4b88      	ldr	r3, [pc, #544]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 0320 	and.w	r3, r3, #32
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d02d      	beq.n	800c25c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c200:	4b85      	ldr	r3, [pc, #532]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	08db      	lsrs	r3, r3, #3
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	4a84      	ldr	r2, [pc, #528]	; (800c41c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c20c:	fa22 f303 	lsr.w	r3, r2, r3
 800c210:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	ee07 3a90 	vmov	s15, r3
 800c218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	ee07 3a90 	vmov	s15, r3
 800c222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c22a:	4b7b      	ldr	r3, [pc, #492]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c232:	ee07 3a90 	vmov	s15, r3
 800c236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c23a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c23e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c24a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c256:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c25a:	e087      	b.n	800c36c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	ee07 3a90 	vmov	s15, r3
 800c262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c266:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c26e:	4b6a      	ldr	r3, [pc, #424]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c276:	ee07 3a90 	vmov	s15, r3
 800c27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c27e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c282:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c28e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c29a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c29e:	e065      	b.n	800c36c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	ee07 3a90 	vmov	s15, r3
 800c2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c2ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2b2:	4b59      	ldr	r3, [pc, #356]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ba:	ee07 3a90 	vmov	s15, r3
 800c2be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2e2:	e043      	b.n	800c36c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	ee07 3a90 	vmov	s15, r3
 800c2ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c42c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c2f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2f6:	4b48      	ldr	r3, [pc, #288]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2fe:	ee07 3a90 	vmov	s15, r3
 800c302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c306:	ed97 6a03 	vldr	s12, [r7, #12]
 800c30a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c30e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c31a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c31e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c322:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c326:	e021      	b.n	800c36c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	ee07 3a90 	vmov	s15, r3
 800c32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c332:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c33a:	4b37      	ldr	r3, [pc, #220]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c33e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c342:	ee07 3a90 	vmov	s15, r3
 800c346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c34a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c34e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c35a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c35e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c362:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c366:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c36a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c36c:	4b2a      	ldr	r3, [pc, #168]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c370:	0a5b      	lsrs	r3, r3, #9
 800c372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c376:	ee07 3a90 	vmov	s15, r3
 800c37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c37e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c382:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c386:	edd7 6a07 	vldr	s13, [r7, #28]
 800c38a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c38e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c392:	ee17 2a90 	vmov	r2, s15
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c39a:	4b1f      	ldr	r3, [pc, #124]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39e:	0c1b      	lsrs	r3, r3, #16
 800c3a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3a4:	ee07 3a90 	vmov	s15, r3
 800c3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3c0:	ee17 2a90 	vmov	r2, s15
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c3c8:	4b13      	ldr	r3, [pc, #76]	; (800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3cc:	0e1b      	lsrs	r3, r3, #24
 800c3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3d2:	ee07 3a90 	vmov	s15, r3
 800c3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3ee:	ee17 2a90 	vmov	r2, s15
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c3f6:	e008      	b.n	800c40a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	609a      	str	r2, [r3, #8]
}
 800c40a:	bf00      	nop
 800c40c:	3724      	adds	r7, #36	; 0x24
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	58024400 	.word	0x58024400
 800c41c:	03d09000 	.word	0x03d09000
 800c420:	46000000 	.word	0x46000000
 800c424:	4c742400 	.word	0x4c742400
 800c428:	4a742400 	.word	0x4a742400
 800c42c:	4c371b00 	.word	0x4c371b00

0800c430 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c430:	b480      	push	{r7}
 800c432:	b089      	sub	sp, #36	; 0x24
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c438:	4ba1      	ldr	r3, [pc, #644]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43c:	f003 0303 	and.w	r3, r3, #3
 800c440:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c442:	4b9f      	ldr	r3, [pc, #636]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c446:	0d1b      	lsrs	r3, r3, #20
 800c448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c44c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c44e:	4b9c      	ldr	r3, [pc, #624]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c452:	0a1b      	lsrs	r3, r3, #8
 800c454:	f003 0301 	and.w	r3, r3, #1
 800c458:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c45a:	4b99      	ldr	r3, [pc, #612]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45e:	08db      	lsrs	r3, r3, #3
 800c460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	fb02 f303 	mul.w	r3, r2, r3
 800c46a:	ee07 3a90 	vmov	s15, r3
 800c46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c472:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f000 8111 	beq.w	800c6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	2b02      	cmp	r3, #2
 800c482:	f000 8083 	beq.w	800c58c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	f200 80a1 	bhi.w	800c5d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d003      	beq.n	800c49c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d056      	beq.n	800c548 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c49a:	e099      	b.n	800c5d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c49c:	4b88      	ldr	r3, [pc, #544]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f003 0320 	and.w	r3, r3, #32
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d02d      	beq.n	800c504 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c4a8:	4b85      	ldr	r3, [pc, #532]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	08db      	lsrs	r3, r3, #3
 800c4ae:	f003 0303 	and.w	r3, r3, #3
 800c4b2:	4a84      	ldr	r2, [pc, #528]	; (800c6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c4b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	ee07 3a90 	vmov	s15, r3
 800c4c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	ee07 3a90 	vmov	s15, r3
 800c4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4d2:	4b7b      	ldr	r3, [pc, #492]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4da:	ee07 3a90 	vmov	s15, r3
 800c4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c502:	e087      	b.n	800c614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	ee07 3a90 	vmov	s15, r3
 800c50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c50e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c6cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c516:	4b6a      	ldr	r3, [pc, #424]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c51e:	ee07 3a90 	vmov	s15, r3
 800c522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c526:	ed97 6a03 	vldr	s12, [r7, #12]
 800c52a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c546:	e065      	b.n	800c614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	ee07 3a90 	vmov	s15, r3
 800c54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c552:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c55a:	4b59      	ldr	r3, [pc, #356]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c562:	ee07 3a90 	vmov	s15, r3
 800c566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c56a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c56e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c57a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c57e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c582:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c58a:	e043      	b.n	800c614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	ee07 3a90 	vmov	s15, r3
 800c592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c596:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c59a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c59e:	4b48      	ldr	r3, [pc, #288]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5a6:	ee07 3a90 	vmov	s15, r3
 800c5aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5ce:	e021      	b.n	800c614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	ee07 3a90 	vmov	s15, r3
 800c5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c5de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5e2:	4b37      	ldr	r3, [pc, #220]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ea:	ee07 3a90 	vmov	s15, r3
 800c5ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c60a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c60e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c612:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c614:	4b2a      	ldr	r3, [pc, #168]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c618:	0a5b      	lsrs	r3, r3, #9
 800c61a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c61e:	ee07 3a90 	vmov	s15, r3
 800c622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c62a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c62e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c63a:	ee17 2a90 	vmov	r2, s15
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c642:	4b1f      	ldr	r3, [pc, #124]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c646:	0c1b      	lsrs	r3, r3, #16
 800c648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c64c:	ee07 3a90 	vmov	s15, r3
 800c650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c65c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c668:	ee17 2a90 	vmov	r2, s15
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c670:	4b13      	ldr	r3, [pc, #76]	; (800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c674:	0e1b      	lsrs	r3, r3, #24
 800c676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c67a:	ee07 3a90 	vmov	s15, r3
 800c67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c68a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c68e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c696:	ee17 2a90 	vmov	r2, s15
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c69e:	e008      	b.n	800c6b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	609a      	str	r2, [r3, #8]
}
 800c6b2:	bf00      	nop
 800c6b4:	3724      	adds	r7, #36	; 0x24
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	58024400 	.word	0x58024400
 800c6c4:	03d09000 	.word	0x03d09000
 800c6c8:	46000000 	.word	0x46000000
 800c6cc:	4c742400 	.word	0x4c742400
 800c6d0:	4a742400 	.word	0x4a742400
 800c6d4:	4c371b00 	.word	0x4c371b00

0800c6d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c6e6:	4b53      	ldr	r3, [pc, #332]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ea:	f003 0303 	and.w	r3, r3, #3
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d101      	bne.n	800c6f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e099      	b.n	800c82a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c6f6:	4b4f      	ldr	r3, [pc, #316]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a4e      	ldr	r2, [pc, #312]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c6fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c702:	f7fa fa7b 	bl	8006bfc <HAL_GetTick>
 800c706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c708:	e008      	b.n	800c71c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c70a:	f7fa fa77 	bl	8006bfc <HAL_GetTick>
 800c70e:	4602      	mov	r2, r0
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	2b02      	cmp	r3, #2
 800c716:	d901      	bls.n	800c71c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c718:	2303      	movs	r3, #3
 800c71a:	e086      	b.n	800c82a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c71c:	4b45      	ldr	r3, [pc, #276]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1f0      	bne.n	800c70a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c728:	4b42      	ldr	r3, [pc, #264]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	031b      	lsls	r3, r3, #12
 800c736:	493f      	ldr	r1, [pc, #252]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c738:	4313      	orrs	r3, r2
 800c73a:	628b      	str	r3, [r1, #40]	; 0x28
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	3b01      	subs	r3, #1
 800c742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	025b      	lsls	r3, r3, #9
 800c74e:	b29b      	uxth	r3, r3
 800c750:	431a      	orrs	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	3b01      	subs	r3, #1
 800c758:	041b      	lsls	r3, r3, #16
 800c75a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c75e:	431a      	orrs	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	3b01      	subs	r3, #1
 800c766:	061b      	lsls	r3, r3, #24
 800c768:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c76c:	4931      	ldr	r1, [pc, #196]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c76e:	4313      	orrs	r3, r2
 800c770:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c772:	4b30      	ldr	r3, [pc, #192]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	492d      	ldr	r1, [pc, #180]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c780:	4313      	orrs	r3, r2
 800c782:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c784:	4b2b      	ldr	r3, [pc, #172]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c788:	f023 0220 	bic.w	r2, r3, #32
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	4928      	ldr	r1, [pc, #160]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c792:	4313      	orrs	r3, r2
 800c794:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c796:	4b27      	ldr	r3, [pc, #156]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79a:	4a26      	ldr	r2, [pc, #152]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c79c:	f023 0310 	bic.w	r3, r3, #16
 800c7a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c7a2:	4b24      	ldr	r3, [pc, #144]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7a6:	4b24      	ldr	r3, [pc, #144]	; (800c838 <RCCEx_PLL2_Config+0x160>)
 800c7a8:	4013      	ands	r3, r2
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	69d2      	ldr	r2, [r2, #28]
 800c7ae:	00d2      	lsls	r2, r2, #3
 800c7b0:	4920      	ldr	r1, [pc, #128]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c7b6:	4b1f      	ldr	r3, [pc, #124]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ba:	4a1e      	ldr	r2, [pc, #120]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7bc:	f043 0310 	orr.w	r3, r3, #16
 800c7c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d106      	bne.n	800c7d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c7c8:	4b1a      	ldr	r3, [pc, #104]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7cc:	4a19      	ldr	r2, [pc, #100]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7d4:	e00f      	b.n	800c7f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d106      	bne.n	800c7ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c7dc:	4b15      	ldr	r3, [pc, #84]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e0:	4a14      	ldr	r2, [pc, #80]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7e8:	e005      	b.n	800c7f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c7ea:	4b12      	ldr	r3, [pc, #72]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ee:	4a11      	ldr	r2, [pc, #68]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c7f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c7f6:	4b0f      	ldr	r3, [pc, #60]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a0e      	ldr	r2, [pc, #56]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c7fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c802:	f7fa f9fb 	bl	8006bfc <HAL_GetTick>
 800c806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c808:	e008      	b.n	800c81c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c80a:	f7fa f9f7 	bl	8006bfc <HAL_GetTick>
 800c80e:	4602      	mov	r2, r0
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	1ad3      	subs	r3, r2, r3
 800c814:	2b02      	cmp	r3, #2
 800c816:	d901      	bls.n	800c81c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e006      	b.n	800c82a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c81c:	4b05      	ldr	r3, [pc, #20]	; (800c834 <RCCEx_PLL2_Config+0x15c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d0f0      	beq.n	800c80a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c828:	7bfb      	ldrb	r3, [r7, #15]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	58024400 	.word	0x58024400
 800c838:	ffff0007 	.word	0xffff0007

0800c83c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c846:	2300      	movs	r3, #0
 800c848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c84a:	4b53      	ldr	r3, [pc, #332]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84e:	f003 0303 	and.w	r3, r3, #3
 800c852:	2b03      	cmp	r3, #3
 800c854:	d101      	bne.n	800c85a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	e099      	b.n	800c98e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c85a:	4b4f      	ldr	r3, [pc, #316]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a4e      	ldr	r2, [pc, #312]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c866:	f7fa f9c9 	bl	8006bfc <HAL_GetTick>
 800c86a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c86c:	e008      	b.n	800c880 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c86e:	f7fa f9c5 	bl	8006bfc <HAL_GetTick>
 800c872:	4602      	mov	r2, r0
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d901      	bls.n	800c880 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	e086      	b.n	800c98e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c880:	4b45      	ldr	r3, [pc, #276]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1f0      	bne.n	800c86e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c88c:	4b42      	ldr	r3, [pc, #264]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c890:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	051b      	lsls	r3, r3, #20
 800c89a:	493f      	ldr	r1, [pc, #252]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c89c:	4313      	orrs	r3, r2
 800c89e:	628b      	str	r3, [r1, #40]	; 0x28
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	025b      	lsls	r3, r3, #9
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	431a      	orrs	r2, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	041b      	lsls	r3, r3, #16
 800c8be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c8c2:	431a      	orrs	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	061b      	lsls	r3, r3, #24
 800c8cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c8d0:	4931      	ldr	r1, [pc, #196]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c8d6:	4b30      	ldr	r3, [pc, #192]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	492d      	ldr	r1, [pc, #180]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c8e8:	4b2b      	ldr	r3, [pc, #172]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	4928      	ldr	r1, [pc, #160]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c8fa:	4b27      	ldr	r3, [pc, #156]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fe:	4a26      	ldr	r2, [pc, #152]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c906:	4b24      	ldr	r3, [pc, #144]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c90a:	4b24      	ldr	r3, [pc, #144]	; (800c99c <RCCEx_PLL3_Config+0x160>)
 800c90c:	4013      	ands	r3, r2
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	69d2      	ldr	r2, [r2, #28]
 800c912:	00d2      	lsls	r2, r2, #3
 800c914:	4920      	ldr	r1, [pc, #128]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c916:	4313      	orrs	r3, r2
 800c918:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c91a:	4b1f      	ldr	r3, [pc, #124]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91e:	4a1e      	ldr	r2, [pc, #120]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d106      	bne.n	800c93a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c92c:	4b1a      	ldr	r3, [pc, #104]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c930:	4a19      	ldr	r2, [pc, #100]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c936:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c938:	e00f      	b.n	800c95a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d106      	bne.n	800c94e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c940:	4b15      	ldr	r3, [pc, #84]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c944:	4a14      	ldr	r2, [pc, #80]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c94a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c94c:	e005      	b.n	800c95a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c94e:	4b12      	ldr	r3, [pc, #72]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c952:	4a11      	ldr	r2, [pc, #68]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c95a:	4b0f      	ldr	r3, [pc, #60]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a0e      	ldr	r2, [pc, #56]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c966:	f7fa f949 	bl	8006bfc <HAL_GetTick>
 800c96a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c96c:	e008      	b.n	800c980 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c96e:	f7fa f945 	bl	8006bfc <HAL_GetTick>
 800c972:	4602      	mov	r2, r0
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d901      	bls.n	800c980 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c97c:	2303      	movs	r3, #3
 800c97e:	e006      	b.n	800c98e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c980:	4b05      	ldr	r3, [pc, #20]	; (800c998 <RCCEx_PLL3_Config+0x15c>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d0f0      	beq.n	800c96e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	58024400 	.word	0x58024400
 800c99c:	ffff0007 	.word	0xffff0007

0800c9a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d101      	bne.n	800c9b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e0f1      	b.n	800cb96 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a78      	ldr	r2, [pc, #480]	; (800cba0 <HAL_SPI_Init+0x200>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d00f      	beq.n	800c9e2 <HAL_SPI_Init+0x42>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a77      	ldr	r2, [pc, #476]	; (800cba4 <HAL_SPI_Init+0x204>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d00a      	beq.n	800c9e2 <HAL_SPI_Init+0x42>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a75      	ldr	r2, [pc, #468]	; (800cba8 <HAL_SPI_Init+0x208>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d005      	beq.n	800c9e2 <HAL_SPI_Init+0x42>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	2b0f      	cmp	r3, #15
 800c9dc:	d901      	bls.n	800c9e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e0d9      	b.n	800cb96 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fba4 	bl	800d130 <SPI_GetPacketSize>
 800c9e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a6c      	ldr	r2, [pc, #432]	; (800cba0 <HAL_SPI_Init+0x200>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d00c      	beq.n	800ca0e <HAL_SPI_Init+0x6e>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a6a      	ldr	r2, [pc, #424]	; (800cba4 <HAL_SPI_Init+0x204>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d007      	beq.n	800ca0e <HAL_SPI_Init+0x6e>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a69      	ldr	r2, [pc, #420]	; (800cba8 <HAL_SPI_Init+0x208>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d002      	beq.n	800ca0e <HAL_SPI_Init+0x6e>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2b08      	cmp	r3, #8
 800ca0c:	d811      	bhi.n	800ca32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca12:	4a63      	ldr	r2, [pc, #396]	; (800cba0 <HAL_SPI_Init+0x200>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d009      	beq.n	800ca2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a61      	ldr	r2, [pc, #388]	; (800cba4 <HAL_SPI_Init+0x204>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d004      	beq.n	800ca2c <HAL_SPI_Init+0x8c>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a60      	ldr	r2, [pc, #384]	; (800cba8 <HAL_SPI_Init+0x208>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d104      	bne.n	800ca36 <HAL_SPI_Init+0x96>
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2b10      	cmp	r3, #16
 800ca30:	d901      	bls.n	800ca36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	e0af      	b.n	800cb96 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d106      	bne.n	800ca50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7f8 f92e 	bl	8004cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2202      	movs	r2, #2
 800ca54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f022 0201 	bic.w	r2, r2, #1
 800ca66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ca72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	699b      	ldr	r3, [r3, #24]
 800ca78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca7c:	d119      	bne.n	800cab2 <HAL_SPI_Init+0x112>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca86:	d103      	bne.n	800ca90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d008      	beq.n	800caa2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10c      	bne.n	800cab2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ca9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caa0:	d107      	bne.n	800cab2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cab0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	69da      	ldr	r2, [r3, #28]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caba:	431a      	orrs	r2, r3
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	431a      	orrs	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac4:	ea42 0103 	orr.w	r1, r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	68da      	ldr	r2, [r3, #12]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	430a      	orrs	r2, r1
 800cad2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cadc:	431a      	orrs	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae2:	431a      	orrs	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	699b      	ldr	r3, [r3, #24]
 800cae8:	431a      	orrs	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	431a      	orrs	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	431a      	orrs	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a1b      	ldr	r3, [r3, #32]
 800cafa:	431a      	orrs	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	431a      	orrs	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb06:	431a      	orrs	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	431a      	orrs	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb12:	ea42 0103 	orr.w	r1, r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	430a      	orrs	r2, r1
 800cb20:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d113      	bne.n	800cb52 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f022 0201 	bic.w	r2, r2, #1
 800cb60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00a      	beq.n	800cb84 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	430a      	orrs	r2, r1
 800cb82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	40013000 	.word	0x40013000
 800cba4:	40003800 	.word	0x40003800
 800cba8:	40003c00 	.word	0x40003c00

0800cbac <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08a      	sub	sp, #40	; 0x28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	695b      	ldr	r3, [r3, #20]
 800cbc2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800cbc4:	6a3a      	ldr	r2, [r7, #32]
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	4013      	ands	r3, r2
 800cbca:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cbde:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	3330      	adds	r3, #48	; 0x30
 800cbe6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d113      	bne.n	800cc1a <HAL_SPI_IRQHandler+0x6e>
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	f003 0320 	and.w	r3, r3, #32
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10e      	bne.n	800cc1a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d009      	beq.n	800cc1a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	4798      	blx	r3
    handled = 1UL;
 800cc16:	2301      	movs	r3, #1
 800cc18:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10f      	bne.n	800cc44 <HAL_SPI_IRQHandler+0x98>
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00a      	beq.n	800cc44 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d105      	bne.n	800cc44 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	4798      	blx	r3
    handled = 1UL;
 800cc40:	2301      	movs	r3, #1
 800cc42:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	f003 0320 	and.w	r3, r3, #32
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10f      	bne.n	800cc6e <HAL_SPI_IRQHandler+0xc2>
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	f003 0302 	and.w	r3, r3, #2
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00a      	beq.n	800cc6e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d105      	bne.n	800cc6e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	4798      	blx	r3
    handled = 1UL;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f040 816f 	bne.w	800cf54 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	f003 0308 	and.w	r3, r3, #8
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f000 80a0 	beq.w	800cdc2 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	699a      	ldr	r2, [r3, #24]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f042 0208 	orr.w	r2, r2, #8
 800cc90:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	699a      	ldr	r2, [r3, #24]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f042 0210 	orr.w	r2, r2, #16
 800cca0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	699a      	ldr	r2, [r3, #24]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccb0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	691a      	ldr	r2, [r3, #16]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f022 0208 	bic.w	r2, r2, #8
 800ccc0:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00f      	beq.n	800ccec <HAL_SPI_IRQHandler+0x140>
 800cccc:	7cfb      	ldrb	r3, [r7, #19]
 800ccce:	2b04      	cmp	r3, #4
 800ccd0:	d004      	beq.n	800ccdc <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccd6:	69db      	ldr	r3, [r3, #28]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d007      	beq.n	800ccec <HAL_SPI_IRQHandler+0x140>
 800ccdc:	7cfb      	ldrb	r3, [r7, #19]
 800ccde:	2b03      	cmp	r3, #3
 800cce0:	d059      	beq.n	800cd96 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cce6:	69db      	ldr	r3, [r3, #28]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d154      	bne.n	800cd96 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d13d      	bne.n	800cd76 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800ccfa:	e036      	b.n	800cd6a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	2b0f      	cmp	r3, #15
 800cd02:	d90b      	bls.n	800cd1c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cd0e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd14:	1d1a      	adds	r2, r3, #4
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	665a      	str	r2, [r3, #100]	; 0x64
 800cd1a:	e01d      	b.n	800cd58 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	2b07      	cmp	r3, #7
 800cd22:	d90b      	bls.n	800cd3c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	8812      	ldrh	r2, [r2, #0]
 800cd2c:	b292      	uxth	r2, r2
 800cd2e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd34:	1c9a      	adds	r2, r3, #2
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	665a      	str	r2, [r3, #100]	; 0x64
 800cd3a:	e00d      	b.n	800cd58 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd48:	7812      	ldrb	r2, [r2, #0]
 800cd4a:	b2d2      	uxtb	r2, r2
 800cd4c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd52:	1c5a      	adds	r2, r3, #1
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	3b01      	subs	r3, #1
 800cd62:	b29a      	uxth	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1c2      	bne.n	800ccfc <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f93a 	bl	800cff0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d003      	beq.n	800cd96 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f90a 	bl	800cfa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800cd94:	e0e3      	b.n	800cf5e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800cd96:	7cfb      	ldrb	r3, [r7, #19]
 800cd98:	2b05      	cmp	r3, #5
 800cd9a:	d103      	bne.n	800cda4 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 f8f9 	bl	800cf94 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800cda2:	e0d9      	b.n	800cf58 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800cda4:	7cfb      	ldrb	r3, [r7, #19]
 800cda6:	2b04      	cmp	r3, #4
 800cda8:	d103      	bne.n	800cdb2 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 f8e8 	bl	800cf80 <HAL_SPI_RxCpltCallback>
    return;
 800cdb0:	e0d2      	b.n	800cf58 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800cdb2:	7cfb      	ldrb	r3, [r7, #19]
 800cdb4:	2b03      	cmp	r3, #3
 800cdb6:	f040 80cf 	bne.w	800cf58 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f8d6 	bl	800cf6c <HAL_SPI_TxCpltCallback>
    return;
 800cdc0:	e0ca      	b.n	800cf58 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00d      	beq.n	800cde8 <HAL_SPI_IRQHandler+0x23c>
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	f003 0308 	and.w	r3, r3, #8
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d008      	beq.n	800cde8 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	699a      	ldr	r2, [r3, #24]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cde4:	619a      	str	r2, [r3, #24]

    return;
 800cde6:	e0ba      	b.n	800cf5e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f000 80b5 	beq.w	800cf5e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00f      	beq.n	800ce1e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce04:	f043 0204 	orr.w	r2, r3, #4
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	699a      	ldr	r2, [r3, #24]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce1c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00f      	beq.n	800ce48 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce2e:	f043 0201 	orr.w	r2, r3, #1
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	699a      	ldr	r2, [r3, #24]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce46:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00f      	beq.n	800ce72 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce58:	f043 0208 	orr.w	r2, r3, #8
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	699a      	ldr	r2, [r3, #24]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce70:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	f003 0320 	and.w	r3, r3, #32
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00f      	beq.n	800ce9c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	699a      	ldr	r2, [r3, #24]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f042 0220 	orr.w	r2, r2, #32
 800ce9a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d05a      	beq.n	800cf5c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f022 0201 	bic.w	r2, r2, #1
 800ceb4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	6919      	ldr	r1, [r3, #16]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	4b28      	ldr	r3, [pc, #160]	; (800cf64 <HAL_SPI_IRQHandler+0x3b8>)
 800cec2:	400b      	ands	r3, r1
 800cec4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cecc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ced0:	d138      	bne.n	800cf44 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	689a      	ldr	r2, [r3, #8]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cee0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d013      	beq.n	800cf12 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceee:	4a1e      	ldr	r2, [pc, #120]	; (800cf68 <HAL_SPI_IRQHandler+0x3bc>)
 800cef0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fb faba 	bl	8008470 <HAL_DMA_Abort_IT>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d007      	beq.n	800cf12 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d020      	beq.n	800cf5c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf1e:	4a12      	ldr	r2, [pc, #72]	; (800cf68 <HAL_SPI_IRQHandler+0x3bc>)
 800cf20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fb faa2 	bl	8008470 <HAL_DMA_Abort_IT>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d014      	beq.n	800cf5c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cf42:	e00b      	b.n	800cf5c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f82b 	bl	800cfa8 <HAL_SPI_ErrorCallback>
    return;
 800cf52:	e003      	b.n	800cf5c <HAL_SPI_IRQHandler+0x3b0>
    return;
 800cf54:	bf00      	nop
 800cf56:	e002      	b.n	800cf5e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800cf58:	bf00      	nop
 800cf5a:	e000      	b.n	800cf5e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800cf5c:	bf00      	nop
  }
}
 800cf5e:	3728      	adds	r7, #40	; 0x28
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	fffffc94 	.word	0xfffffc94
 800cf68:	0800cfbd 	.word	0x0800cfbd

0800cf6c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f7ff ffe0 	bl	800cfa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cfe8:	bf00      	nop
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	695b      	ldr	r3, [r3, #20]
 800cffe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	699a      	ldr	r2, [r3, #24]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f042 0208 	orr.w	r2, r2, #8
 800d00e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	699a      	ldr	r2, [r3, #24]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f042 0210 	orr.w	r2, r2, #16
 800d01e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f022 0201 	bic.w	r2, r2, #1
 800d02e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	6919      	ldr	r1, [r3, #16]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	4b3c      	ldr	r3, [pc, #240]	; (800d12c <SPI_CloseTransfer+0x13c>)
 800d03c:	400b      	ands	r3, r1
 800d03e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	689a      	ldr	r2, [r3, #8]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d04e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d056:	b2db      	uxtb	r3, r3
 800d058:	2b04      	cmp	r3, #4
 800d05a:	d014      	beq.n	800d086 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f003 0320 	and.w	r3, r3, #32
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00f      	beq.n	800d086 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d06c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	699a      	ldr	r2, [r3, #24]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f042 0220 	orr.w	r2, r2, #32
 800d084:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d014      	beq.n	800d0bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00f      	beq.n	800d0bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0a2:	f043 0204 	orr.w	r2, r3, #4
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	699a      	ldr	r2, [r3, #24]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00f      	beq.n	800d0e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0cc:	f043 0201 	orr.w	r2, r3, #1
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	699a      	ldr	r2, [r3, #24]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00f      	beq.n	800d110 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0f6:	f043 0208 	orr.w	r2, r3, #8
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	699a      	ldr	r2, [r3, #24]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d10e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d120:	bf00      	nop
 800d122:	3714      	adds	r7, #20
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	fffffc90 	.word	0xfffffc90

0800d130 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d13c:	095b      	lsrs	r3, r3, #5
 800d13e:	3301      	adds	r3, #1
 800d140:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	3301      	adds	r3, #1
 800d148:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	3307      	adds	r3, #7
 800d14e:	08db      	lsrs	r3, r3, #3
 800d150:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	fb02 f303 	mul.w	r3, r2, r3
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3714      	adds	r7, #20
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b082      	sub	sp, #8
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d101      	bne.n	800d178 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d174:	2301      	movs	r3, #1
 800d176:	e049      	b.n	800d20c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	2b00      	cmp	r3, #0
 800d182:	d106      	bne.n	800d192 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7f8 fda3 	bl	8005cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2202      	movs	r2, #2
 800d196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	f000 fed3 	bl	800df50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d214:	b480      	push	{r7}
 800d216:	b085      	sub	sp, #20
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b01      	cmp	r3, #1
 800d226:	d001      	beq.n	800d22c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	e054      	b.n	800d2d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2202      	movs	r2, #2
 800d230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68da      	ldr	r2, [r3, #12]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f042 0201 	orr.w	r2, r2, #1
 800d242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a26      	ldr	r2, [pc, #152]	; (800d2e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d022      	beq.n	800d294 <HAL_TIM_Base_Start_IT+0x80>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d256:	d01d      	beq.n	800d294 <HAL_TIM_Base_Start_IT+0x80>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a22      	ldr	r2, [pc, #136]	; (800d2e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d018      	beq.n	800d294 <HAL_TIM_Base_Start_IT+0x80>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a21      	ldr	r2, [pc, #132]	; (800d2ec <HAL_TIM_Base_Start_IT+0xd8>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d013      	beq.n	800d294 <HAL_TIM_Base_Start_IT+0x80>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a1f      	ldr	r2, [pc, #124]	; (800d2f0 <HAL_TIM_Base_Start_IT+0xdc>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d00e      	beq.n	800d294 <HAL_TIM_Base_Start_IT+0x80>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a1e      	ldr	r2, [pc, #120]	; (800d2f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d009      	beq.n	800d294 <HAL_TIM_Base_Start_IT+0x80>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a1c      	ldr	r2, [pc, #112]	; (800d2f8 <HAL_TIM_Base_Start_IT+0xe4>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d004      	beq.n	800d294 <HAL_TIM_Base_Start_IT+0x80>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a1b      	ldr	r2, [pc, #108]	; (800d2fc <HAL_TIM_Base_Start_IT+0xe8>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d115      	bne.n	800d2c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	689a      	ldr	r2, [r3, #8]
 800d29a:	4b19      	ldr	r3, [pc, #100]	; (800d300 <HAL_TIM_Base_Start_IT+0xec>)
 800d29c:	4013      	ands	r3, r2
 800d29e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2b06      	cmp	r3, #6
 800d2a4:	d015      	beq.n	800d2d2 <HAL_TIM_Base_Start_IT+0xbe>
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2ac:	d011      	beq.n	800d2d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f042 0201 	orr.w	r2, r2, #1
 800d2bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2be:	e008      	b.n	800d2d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f042 0201 	orr.w	r2, r2, #1
 800d2ce:	601a      	str	r2, [r3, #0]
 800d2d0:	e000      	b.n	800d2d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	40010000 	.word	0x40010000
 800d2e8:	40000400 	.word	0x40000400
 800d2ec:	40000800 	.word	0x40000800
 800d2f0:	40000c00 	.word	0x40000c00
 800d2f4:	40010400 	.word	0x40010400
 800d2f8:	40001800 	.word	0x40001800
 800d2fc:	40014000 	.word	0x40014000
 800d300:	00010007 	.word	0x00010007

0800d304 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	68da      	ldr	r2, [r3, #12]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f022 0201 	bic.w	r2, r2, #1
 800d31a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6a1a      	ldr	r2, [r3, #32]
 800d322:	f241 1311 	movw	r3, #4369	; 0x1111
 800d326:	4013      	ands	r3, r2
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10f      	bne.n	800d34c <HAL_TIM_Base_Stop_IT+0x48>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6a1a      	ldr	r2, [r3, #32]
 800d332:	f240 4344 	movw	r3, #1092	; 0x444
 800d336:	4013      	ands	r3, r2
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d107      	bne.n	800d34c <HAL_TIM_Base_Stop_IT+0x48>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f022 0201 	bic.w	r2, r2, #1
 800d34a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	370c      	adds	r7, #12
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr

0800d362 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b082      	sub	sp, #8
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	e049      	b.n	800d408 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d106      	bne.n	800d38e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 f841 	bl	800d410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2202      	movs	r2, #2
 800d392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	3304      	adds	r3, #4
 800d39e:	4619      	mov	r1, r3
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	f000 fdd5 	bl	800df50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d418:	bf00      	nop
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d109      	bne.n	800d448 <HAL_TIM_PWM_Start+0x24>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	bf14      	ite	ne
 800d440:	2301      	movne	r3, #1
 800d442:	2300      	moveq	r3, #0
 800d444:	b2db      	uxtb	r3, r3
 800d446:	e03c      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x9e>
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	2b04      	cmp	r3, #4
 800d44c:	d109      	bne.n	800d462 <HAL_TIM_PWM_Start+0x3e>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b01      	cmp	r3, #1
 800d458:	bf14      	ite	ne
 800d45a:	2301      	movne	r3, #1
 800d45c:	2300      	moveq	r3, #0
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	e02f      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x9e>
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b08      	cmp	r3, #8
 800d466:	d109      	bne.n	800d47c <HAL_TIM_PWM_Start+0x58>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	2b01      	cmp	r3, #1
 800d472:	bf14      	ite	ne
 800d474:	2301      	movne	r3, #1
 800d476:	2300      	moveq	r3, #0
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	e022      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x9e>
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	2b0c      	cmp	r3, #12
 800d480:	d109      	bne.n	800d496 <HAL_TIM_PWM_Start+0x72>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	bf14      	ite	ne
 800d48e:	2301      	movne	r3, #1
 800d490:	2300      	moveq	r3, #0
 800d492:	b2db      	uxtb	r3, r3
 800d494:	e015      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x9e>
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	2b10      	cmp	r3, #16
 800d49a:	d109      	bne.n	800d4b0 <HAL_TIM_PWM_Start+0x8c>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	bf14      	ite	ne
 800d4a8:	2301      	movne	r3, #1
 800d4aa:	2300      	moveq	r3, #0
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	e008      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x9e>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	bf14      	ite	ne
 800d4bc:	2301      	movne	r3, #1
 800d4be:	2300      	moveq	r3, #0
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d001      	beq.n	800d4ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e0a1      	b.n	800d60e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d104      	bne.n	800d4da <HAL_TIM_PWM_Start+0xb6>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4d8:	e023      	b.n	800d522 <HAL_TIM_PWM_Start+0xfe>
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2b04      	cmp	r3, #4
 800d4de:	d104      	bne.n	800d4ea <HAL_TIM_PWM_Start+0xc6>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2202      	movs	r2, #2
 800d4e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4e8:	e01b      	b.n	800d522 <HAL_TIM_PWM_Start+0xfe>
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b08      	cmp	r3, #8
 800d4ee:	d104      	bne.n	800d4fa <HAL_TIM_PWM_Start+0xd6>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4f8:	e013      	b.n	800d522 <HAL_TIM_PWM_Start+0xfe>
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2b0c      	cmp	r3, #12
 800d4fe:	d104      	bne.n	800d50a <HAL_TIM_PWM_Start+0xe6>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2202      	movs	r2, #2
 800d504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d508:	e00b      	b.n	800d522 <HAL_TIM_PWM_Start+0xfe>
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b10      	cmp	r3, #16
 800d50e:	d104      	bne.n	800d51a <HAL_TIM_PWM_Start+0xf6>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2202      	movs	r2, #2
 800d514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d518:	e003      	b.n	800d522 <HAL_TIM_PWM_Start+0xfe>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2202      	movs	r2, #2
 800d51e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2201      	movs	r2, #1
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f001 f91e 	bl	800e76c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a38      	ldr	r2, [pc, #224]	; (800d618 <HAL_TIM_PWM_Start+0x1f4>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d013      	beq.n	800d562 <HAL_TIM_PWM_Start+0x13e>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a37      	ldr	r2, [pc, #220]	; (800d61c <HAL_TIM_PWM_Start+0x1f8>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d00e      	beq.n	800d562 <HAL_TIM_PWM_Start+0x13e>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a35      	ldr	r2, [pc, #212]	; (800d620 <HAL_TIM_PWM_Start+0x1fc>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d009      	beq.n	800d562 <HAL_TIM_PWM_Start+0x13e>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a34      	ldr	r2, [pc, #208]	; (800d624 <HAL_TIM_PWM_Start+0x200>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d004      	beq.n	800d562 <HAL_TIM_PWM_Start+0x13e>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a32      	ldr	r2, [pc, #200]	; (800d628 <HAL_TIM_PWM_Start+0x204>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d101      	bne.n	800d566 <HAL_TIM_PWM_Start+0x142>
 800d562:	2301      	movs	r3, #1
 800d564:	e000      	b.n	800d568 <HAL_TIM_PWM_Start+0x144>
 800d566:	2300      	movs	r3, #0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d007      	beq.n	800d57c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d57a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a25      	ldr	r2, [pc, #148]	; (800d618 <HAL_TIM_PWM_Start+0x1f4>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d022      	beq.n	800d5cc <HAL_TIM_PWM_Start+0x1a8>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d58e:	d01d      	beq.n	800d5cc <HAL_TIM_PWM_Start+0x1a8>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a25      	ldr	r2, [pc, #148]	; (800d62c <HAL_TIM_PWM_Start+0x208>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d018      	beq.n	800d5cc <HAL_TIM_PWM_Start+0x1a8>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a24      	ldr	r2, [pc, #144]	; (800d630 <HAL_TIM_PWM_Start+0x20c>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d013      	beq.n	800d5cc <HAL_TIM_PWM_Start+0x1a8>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a22      	ldr	r2, [pc, #136]	; (800d634 <HAL_TIM_PWM_Start+0x210>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d00e      	beq.n	800d5cc <HAL_TIM_PWM_Start+0x1a8>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a1a      	ldr	r2, [pc, #104]	; (800d61c <HAL_TIM_PWM_Start+0x1f8>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d009      	beq.n	800d5cc <HAL_TIM_PWM_Start+0x1a8>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a1e      	ldr	r2, [pc, #120]	; (800d638 <HAL_TIM_PWM_Start+0x214>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d004      	beq.n	800d5cc <HAL_TIM_PWM_Start+0x1a8>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a16      	ldr	r2, [pc, #88]	; (800d620 <HAL_TIM_PWM_Start+0x1fc>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d115      	bne.n	800d5f8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	689a      	ldr	r2, [r3, #8]
 800d5d2:	4b1a      	ldr	r3, [pc, #104]	; (800d63c <HAL_TIM_PWM_Start+0x218>)
 800d5d4:	4013      	ands	r3, r2
 800d5d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2b06      	cmp	r3, #6
 800d5dc:	d015      	beq.n	800d60a <HAL_TIM_PWM_Start+0x1e6>
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5e4:	d011      	beq.n	800d60a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f042 0201 	orr.w	r2, r2, #1
 800d5f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5f6:	e008      	b.n	800d60a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f042 0201 	orr.w	r2, r2, #1
 800d606:	601a      	str	r2, [r3, #0]
 800d608:	e000      	b.n	800d60c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d60a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	40010000 	.word	0x40010000
 800d61c:	40010400 	.word	0x40010400
 800d620:	40014000 	.word	0x40014000
 800d624:	40014400 	.word	0x40014400
 800d628:	40014800 	.word	0x40014800
 800d62c:	40000400 	.word	0x40000400
 800d630:	40000800 	.word	0x40000800
 800d634:	40000c00 	.word	0x40000c00
 800d638:	40001800 	.word	0x40001800
 800d63c:	00010007 	.word	0x00010007

0800d640 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d101      	bne.n	800d654 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e08f      	b.n	800d774 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d106      	bne.n	800d66e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7f8 fca7 	bl	8005fbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2202      	movs	r2, #2
 800d672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	6899      	ldr	r1, [r3, #8]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	4b3e      	ldr	r3, [pc, #248]	; (800d77c <HAL_TIM_Encoder_Init+0x13c>)
 800d682:	400b      	ands	r3, r1
 800d684:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	3304      	adds	r3, #4
 800d68e:	4619      	mov	r1, r3
 800d690:	4610      	mov	r0, r2
 800d692:	f000 fc5d 	bl	800df50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	689b      	ldr	r3, [r3, #8]
 800d69c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	699b      	ldr	r3, [r3, #24]
 800d6a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	6a1b      	ldr	r3, [r3, #32]
 800d6ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	697a      	ldr	r2, [r7, #20]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d6b8:	693a      	ldr	r2, [r7, #16]
 800d6ba:	4b31      	ldr	r3, [pc, #196]	; (800d780 <HAL_TIM_Encoder_Init+0x140>)
 800d6bc:	4013      	ands	r3, r2
 800d6be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	689a      	ldr	r2, [r3, #8]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	699b      	ldr	r3, [r3, #24]
 800d6c8:	021b      	lsls	r3, r3, #8
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	693a      	ldr	r2, [r7, #16]
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d6d2:	693a      	ldr	r2, [r7, #16]
 800d6d4:	4b2b      	ldr	r3, [pc, #172]	; (800d784 <HAL_TIM_Encoder_Init+0x144>)
 800d6d6:	4013      	ands	r3, r2
 800d6d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d6da:	693a      	ldr	r2, [r7, #16]
 800d6dc:	4b2a      	ldr	r3, [pc, #168]	; (800d788 <HAL_TIM_Encoder_Init+0x148>)
 800d6de:	4013      	ands	r3, r2
 800d6e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	68da      	ldr	r2, [r3, #12]
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	69db      	ldr	r3, [r3, #28]
 800d6ea:	021b      	lsls	r3, r3, #8
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	011a      	lsls	r2, r3, #4
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	6a1b      	ldr	r3, [r3, #32]
 800d6fe:	031b      	lsls	r3, r3, #12
 800d700:	4313      	orrs	r3, r2
 800d702:	693a      	ldr	r2, [r7, #16]
 800d704:	4313      	orrs	r3, r2
 800d706:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d70e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d716:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	695b      	ldr	r3, [r3, #20]
 800d720:	011b      	lsls	r3, r3, #4
 800d722:	4313      	orrs	r3, r2
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	4313      	orrs	r3, r2
 800d728:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	697a      	ldr	r2, [r7, #20]
 800d730:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2201      	movs	r2, #1
 800d74e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2201      	movs	r2, #1
 800d756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2201      	movs	r2, #1
 800d766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d772:	2300      	movs	r3, #0
}
 800d774:	4618      	mov	r0, r3
 800d776:	3718      	adds	r7, #24
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	fffebff8 	.word	0xfffebff8
 800d780:	fffffcfc 	.word	0xfffffcfc
 800d784:	fffff3f3 	.word	0xfffff3f3
 800d788:	ffff0f0f 	.word	0xffff0f0f

0800d78c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d79c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d7a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d110      	bne.n	800d7de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d7bc:	7bfb      	ldrb	r3, [r7, #15]
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d102      	bne.n	800d7c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d7c2:	7b7b      	ldrb	r3, [r7, #13]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d001      	beq.n	800d7cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e069      	b.n	800d8a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2202      	movs	r2, #2
 800d7d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2202      	movs	r2, #2
 800d7d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7dc:	e031      	b.n	800d842 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b04      	cmp	r3, #4
 800d7e2:	d110      	bne.n	800d806 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d7e4:	7bbb      	ldrb	r3, [r7, #14]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d102      	bne.n	800d7f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d7ea:	7b3b      	ldrb	r3, [r7, #12]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d001      	beq.n	800d7f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e055      	b.n	800d8a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2202      	movs	r2, #2
 800d800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d804:	e01d      	b.n	800d842 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d806:	7bfb      	ldrb	r3, [r7, #15]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d108      	bne.n	800d81e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d80c:	7bbb      	ldrb	r3, [r7, #14]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d105      	bne.n	800d81e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d812:	7b7b      	ldrb	r3, [r7, #13]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d102      	bne.n	800d81e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d818:	7b3b      	ldrb	r3, [r7, #12]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d001      	beq.n	800d822 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d81e:	2301      	movs	r3, #1
 800d820:	e03e      	b.n	800d8a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2202      	movs	r2, #2
 800d826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2202      	movs	r2, #2
 800d82e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2202      	movs	r2, #2
 800d836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2202      	movs	r2, #2
 800d83e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d003      	beq.n	800d850 <HAL_TIM_Encoder_Start+0xc4>
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	2b04      	cmp	r3, #4
 800d84c:	d008      	beq.n	800d860 <HAL_TIM_Encoder_Start+0xd4>
 800d84e:	e00f      	b.n	800d870 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2201      	movs	r2, #1
 800d856:	2100      	movs	r1, #0
 800d858:	4618      	mov	r0, r3
 800d85a:	f000 ff87 	bl	800e76c <TIM_CCxChannelCmd>
      break;
 800d85e:	e016      	b.n	800d88e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2201      	movs	r2, #1
 800d866:	2104      	movs	r1, #4
 800d868:	4618      	mov	r0, r3
 800d86a:	f000 ff7f 	bl	800e76c <TIM_CCxChannelCmd>
      break;
 800d86e:	e00e      	b.n	800d88e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2201      	movs	r2, #1
 800d876:	2100      	movs	r1, #0
 800d878:	4618      	mov	r0, r3
 800d87a:	f000 ff77 	bl	800e76c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2201      	movs	r2, #1
 800d884:	2104      	movs	r1, #4
 800d886:	4618      	mov	r0, r3
 800d888:	f000 ff70 	bl	800e76c <TIM_CCxChannelCmd>
      break;
 800d88c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f042 0201 	orr.w	r2, r2, #1
 800d89c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3710      	adds	r7, #16
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	691b      	ldr	r3, [r3, #16]
 800d8b6:	f003 0302 	and.w	r3, r3, #2
 800d8ba:	2b02      	cmp	r3, #2
 800d8bc:	d122      	bne.n	800d904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	f003 0302 	and.w	r3, r3, #2
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d11b      	bne.n	800d904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f06f 0202 	mvn.w	r2, #2
 800d8d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2201      	movs	r2, #1
 800d8da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	699b      	ldr	r3, [r3, #24]
 800d8e2:	f003 0303 	and.w	r3, r3, #3
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d003      	beq.n	800d8f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 fb12 	bl	800df14 <HAL_TIM_IC_CaptureCallback>
 800d8f0:	e005      	b.n	800d8fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fb04 	bl	800df00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fb15 	bl	800df28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	f003 0304 	and.w	r3, r3, #4
 800d90e:	2b04      	cmp	r3, #4
 800d910:	d122      	bne.n	800d958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	f003 0304 	and.w	r3, r3, #4
 800d91c:	2b04      	cmp	r3, #4
 800d91e:	d11b      	bne.n	800d958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f06f 0204 	mvn.w	r2, #4
 800d928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2202      	movs	r2, #2
 800d92e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	699b      	ldr	r3, [r3, #24]
 800d936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d003      	beq.n	800d946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 fae8 	bl	800df14 <HAL_TIM_IC_CaptureCallback>
 800d944:	e005      	b.n	800d952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fada 	bl	800df00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 faeb 	bl	800df28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	691b      	ldr	r3, [r3, #16]
 800d95e:	f003 0308 	and.w	r3, r3, #8
 800d962:	2b08      	cmp	r3, #8
 800d964:	d122      	bne.n	800d9ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	f003 0308 	and.w	r3, r3, #8
 800d970:	2b08      	cmp	r3, #8
 800d972:	d11b      	bne.n	800d9ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f06f 0208 	mvn.w	r2, #8
 800d97c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2204      	movs	r2, #4
 800d982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	f003 0303 	and.w	r3, r3, #3
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d003      	beq.n	800d99a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 fabe 	bl	800df14 <HAL_TIM_IC_CaptureCallback>
 800d998:	e005      	b.n	800d9a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 fab0 	bl	800df00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 fac1 	bl	800df28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	f003 0310 	and.w	r3, r3, #16
 800d9b6:	2b10      	cmp	r3, #16
 800d9b8:	d122      	bne.n	800da00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	f003 0310 	and.w	r3, r3, #16
 800d9c4:	2b10      	cmp	r3, #16
 800d9c6:	d11b      	bne.n	800da00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f06f 0210 	mvn.w	r2, #16
 800d9d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2208      	movs	r2, #8
 800d9d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	69db      	ldr	r3, [r3, #28]
 800d9de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d003      	beq.n	800d9ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa94 	bl	800df14 <HAL_TIM_IC_CaptureCallback>
 800d9ec:	e005      	b.n	800d9fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 fa86 	bl	800df00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fa97 	bl	800df28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	691b      	ldr	r3, [r3, #16]
 800da06:	f003 0301 	and.w	r3, r3, #1
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d10e      	bne.n	800da2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	f003 0301 	and.w	r3, r3, #1
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d107      	bne.n	800da2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f06f 0201 	mvn.w	r2, #1
 800da24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7f5 fe86 	bl	8003738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da36:	2b80      	cmp	r3, #128	; 0x80
 800da38:	d10e      	bne.n	800da58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da44:	2b80      	cmp	r3, #128	; 0x80
 800da46:	d107      	bne.n	800da58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800da50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 ffc6 	bl	800e9e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da66:	d10e      	bne.n	800da86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da72:	2b80      	cmp	r3, #128	; 0x80
 800da74:	d107      	bne.n	800da86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800da7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 ffb9 	bl	800e9f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	691b      	ldr	r3, [r3, #16]
 800da8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da90:	2b40      	cmp	r3, #64	; 0x40
 800da92:	d10e      	bne.n	800dab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da9e:	2b40      	cmp	r3, #64	; 0x40
 800daa0:	d107      	bne.n	800dab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800daaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f000 fa45 	bl	800df3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	f003 0320 	and.w	r3, r3, #32
 800dabc:	2b20      	cmp	r3, #32
 800dabe:	d10e      	bne.n	800dade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	f003 0320 	and.w	r3, r3, #32
 800daca:	2b20      	cmp	r3, #32
 800dacc:	d107      	bne.n	800dade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f06f 0220 	mvn.w	r2, #32
 800dad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 ff79 	bl	800e9d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dade:	bf00      	nop
 800dae0:	3708      	adds	r7, #8
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
	...

0800dae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b086      	sub	sp, #24
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d101      	bne.n	800db06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db02:	2302      	movs	r3, #2
 800db04:	e0ff      	b.n	800dd06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2201      	movs	r2, #1
 800db0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2b14      	cmp	r3, #20
 800db12:	f200 80f0 	bhi.w	800dcf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800db16:	a201      	add	r2, pc, #4	; (adr r2, 800db1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1c:	0800db71 	.word	0x0800db71
 800db20:	0800dcf7 	.word	0x0800dcf7
 800db24:	0800dcf7 	.word	0x0800dcf7
 800db28:	0800dcf7 	.word	0x0800dcf7
 800db2c:	0800dbb1 	.word	0x0800dbb1
 800db30:	0800dcf7 	.word	0x0800dcf7
 800db34:	0800dcf7 	.word	0x0800dcf7
 800db38:	0800dcf7 	.word	0x0800dcf7
 800db3c:	0800dbf3 	.word	0x0800dbf3
 800db40:	0800dcf7 	.word	0x0800dcf7
 800db44:	0800dcf7 	.word	0x0800dcf7
 800db48:	0800dcf7 	.word	0x0800dcf7
 800db4c:	0800dc33 	.word	0x0800dc33
 800db50:	0800dcf7 	.word	0x0800dcf7
 800db54:	0800dcf7 	.word	0x0800dcf7
 800db58:	0800dcf7 	.word	0x0800dcf7
 800db5c:	0800dc75 	.word	0x0800dc75
 800db60:	0800dcf7 	.word	0x0800dcf7
 800db64:	0800dcf7 	.word	0x0800dcf7
 800db68:	0800dcf7 	.word	0x0800dcf7
 800db6c:	0800dcb5 	.word	0x0800dcb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68b9      	ldr	r1, [r7, #8]
 800db76:	4618      	mov	r0, r3
 800db78:	f000 fa84 	bl	800e084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	699a      	ldr	r2, [r3, #24]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f042 0208 	orr.w	r2, r2, #8
 800db8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	699a      	ldr	r2, [r3, #24]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f022 0204 	bic.w	r2, r2, #4
 800db9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	6999      	ldr	r1, [r3, #24]
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	691a      	ldr	r2, [r3, #16]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	430a      	orrs	r2, r1
 800dbac:	619a      	str	r2, [r3, #24]
      break;
 800dbae:	e0a5      	b.n	800dcfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68b9      	ldr	r1, [r7, #8]
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f000 faf4 	bl	800e1a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	699a      	ldr	r2, [r3, #24]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	699a      	ldr	r2, [r3, #24]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	6999      	ldr	r1, [r3, #24]
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	021a      	lsls	r2, r3, #8
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	430a      	orrs	r2, r1
 800dbee:	619a      	str	r2, [r3, #24]
      break;
 800dbf0:	e084      	b.n	800dcfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	68b9      	ldr	r1, [r7, #8]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f000 fb5d 	bl	800e2b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	69da      	ldr	r2, [r3, #28]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f042 0208 	orr.w	r2, r2, #8
 800dc0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	69da      	ldr	r2, [r3, #28]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f022 0204 	bic.w	r2, r2, #4
 800dc1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	69d9      	ldr	r1, [r3, #28]
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	691a      	ldr	r2, [r3, #16]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	430a      	orrs	r2, r1
 800dc2e:	61da      	str	r2, [r3, #28]
      break;
 800dc30:	e064      	b.n	800dcfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	68b9      	ldr	r1, [r7, #8]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f000 fbc5 	bl	800e3c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	69da      	ldr	r2, [r3, #28]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	69da      	ldr	r2, [r3, #28]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	69d9      	ldr	r1, [r3, #28]
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	691b      	ldr	r3, [r3, #16]
 800dc68:	021a      	lsls	r2, r3, #8
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	430a      	orrs	r2, r1
 800dc70:	61da      	str	r2, [r3, #28]
      break;
 800dc72:	e043      	b.n	800dcfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68b9      	ldr	r1, [r7, #8]
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f000 fc0e 	bl	800e49c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f042 0208 	orr.w	r2, r2, #8
 800dc8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f022 0204 	bic.w	r2, r2, #4
 800dc9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	691a      	ldr	r2, [r3, #16]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	430a      	orrs	r2, r1
 800dcb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dcb2:	e023      	b.n	800dcfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	68b9      	ldr	r1, [r7, #8]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 fc52 	bl	800e564 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dcde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	691b      	ldr	r3, [r3, #16]
 800dcea:	021a      	lsls	r2, r3, #8
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	430a      	orrs	r2, r1
 800dcf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dcf4:	e002      	b.n	800dcfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	75fb      	strb	r3, [r7, #23]
      break;
 800dcfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd04:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3718      	adds	r7, #24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop

0800dd10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d101      	bne.n	800dd2c <HAL_TIM_ConfigClockSource+0x1c>
 800dd28:	2302      	movs	r3, #2
 800dd2a:	e0dc      	b.n	800dee6 <HAL_TIM_ConfigClockSource+0x1d6>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2202      	movs	r2, #2
 800dd38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	4b6a      	ldr	r3, [pc, #424]	; (800def0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dd48:	4013      	ands	r3, r2
 800dd4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dd52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	68ba      	ldr	r2, [r7, #8]
 800dd5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a64      	ldr	r2, [pc, #400]	; (800def4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	f000 80a9 	beq.w	800deba <HAL_TIM_ConfigClockSource+0x1aa>
 800dd68:	4a62      	ldr	r2, [pc, #392]	; (800def4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	f200 80ae 	bhi.w	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800dd70:	4a61      	ldr	r2, [pc, #388]	; (800def8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	f000 80a1 	beq.w	800deba <HAL_TIM_ConfigClockSource+0x1aa>
 800dd78:	4a5f      	ldr	r2, [pc, #380]	; (800def8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	f200 80a6 	bhi.w	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800dd80:	4a5e      	ldr	r2, [pc, #376]	; (800defc <HAL_TIM_ConfigClockSource+0x1ec>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	f000 8099 	beq.w	800deba <HAL_TIM_ConfigClockSource+0x1aa>
 800dd88:	4a5c      	ldr	r2, [pc, #368]	; (800defc <HAL_TIM_ConfigClockSource+0x1ec>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	f200 809e 	bhi.w	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800dd90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dd94:	f000 8091 	beq.w	800deba <HAL_TIM_ConfigClockSource+0x1aa>
 800dd98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dd9c:	f200 8096 	bhi.w	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800dda0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dda4:	f000 8089 	beq.w	800deba <HAL_TIM_ConfigClockSource+0x1aa>
 800dda8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddac:	f200 808e 	bhi.w	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800ddb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddb4:	d03e      	beq.n	800de34 <HAL_TIM_ConfigClockSource+0x124>
 800ddb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddba:	f200 8087 	bhi.w	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800ddbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddc2:	f000 8086 	beq.w	800ded2 <HAL_TIM_ConfigClockSource+0x1c2>
 800ddc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddca:	d87f      	bhi.n	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800ddcc:	2b70      	cmp	r3, #112	; 0x70
 800ddce:	d01a      	beq.n	800de06 <HAL_TIM_ConfigClockSource+0xf6>
 800ddd0:	2b70      	cmp	r3, #112	; 0x70
 800ddd2:	d87b      	bhi.n	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800ddd4:	2b60      	cmp	r3, #96	; 0x60
 800ddd6:	d050      	beq.n	800de7a <HAL_TIM_ConfigClockSource+0x16a>
 800ddd8:	2b60      	cmp	r3, #96	; 0x60
 800ddda:	d877      	bhi.n	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800dddc:	2b50      	cmp	r3, #80	; 0x50
 800ddde:	d03c      	beq.n	800de5a <HAL_TIM_ConfigClockSource+0x14a>
 800dde0:	2b50      	cmp	r3, #80	; 0x50
 800dde2:	d873      	bhi.n	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800dde4:	2b40      	cmp	r3, #64	; 0x40
 800dde6:	d058      	beq.n	800de9a <HAL_TIM_ConfigClockSource+0x18a>
 800dde8:	2b40      	cmp	r3, #64	; 0x40
 800ddea:	d86f      	bhi.n	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800ddec:	2b30      	cmp	r3, #48	; 0x30
 800ddee:	d064      	beq.n	800deba <HAL_TIM_ConfigClockSource+0x1aa>
 800ddf0:	2b30      	cmp	r3, #48	; 0x30
 800ddf2:	d86b      	bhi.n	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800ddf4:	2b20      	cmp	r3, #32
 800ddf6:	d060      	beq.n	800deba <HAL_TIM_ConfigClockSource+0x1aa>
 800ddf8:	2b20      	cmp	r3, #32
 800ddfa:	d867      	bhi.n	800decc <HAL_TIM_ConfigClockSource+0x1bc>
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d05c      	beq.n	800deba <HAL_TIM_ConfigClockSource+0x1aa>
 800de00:	2b10      	cmp	r3, #16
 800de02:	d05a      	beq.n	800deba <HAL_TIM_ConfigClockSource+0x1aa>
 800de04:	e062      	b.n	800decc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6818      	ldr	r0, [r3, #0]
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	6899      	ldr	r1, [r3, #8]
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	685a      	ldr	r2, [r3, #4]
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	f000 fc89 	bl	800e72c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800de28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	609a      	str	r2, [r3, #8]
      break;
 800de32:	e04f      	b.n	800ded4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6818      	ldr	r0, [r3, #0]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	6899      	ldr	r1, [r3, #8]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	685a      	ldr	r2, [r3, #4]
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	f000 fc72 	bl	800e72c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	689a      	ldr	r2, [r3, #8]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800de56:	609a      	str	r2, [r3, #8]
      break;
 800de58:	e03c      	b.n	800ded4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6818      	ldr	r0, [r3, #0]
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	6859      	ldr	r1, [r3, #4]
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	461a      	mov	r2, r3
 800de68:	f000 fbe2 	bl	800e630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2150      	movs	r1, #80	; 0x50
 800de72:	4618      	mov	r0, r3
 800de74:	f000 fc3c 	bl	800e6f0 <TIM_ITRx_SetConfig>
      break;
 800de78:	e02c      	b.n	800ded4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6818      	ldr	r0, [r3, #0]
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	6859      	ldr	r1, [r3, #4]
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	461a      	mov	r2, r3
 800de88:	f000 fc01 	bl	800e68e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2160      	movs	r1, #96	; 0x60
 800de92:	4618      	mov	r0, r3
 800de94:	f000 fc2c 	bl	800e6f0 <TIM_ITRx_SetConfig>
      break;
 800de98:	e01c      	b.n	800ded4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6818      	ldr	r0, [r3, #0]
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	6859      	ldr	r1, [r3, #4]
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	68db      	ldr	r3, [r3, #12]
 800dea6:	461a      	mov	r2, r3
 800dea8:	f000 fbc2 	bl	800e630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2140      	movs	r1, #64	; 0x40
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 fc1c 	bl	800e6f0 <TIM_ITRx_SetConfig>
      break;
 800deb8:	e00c      	b.n	800ded4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4619      	mov	r1, r3
 800dec4:	4610      	mov	r0, r2
 800dec6:	f000 fc13 	bl	800e6f0 <TIM_ITRx_SetConfig>
      break;
 800deca:	e003      	b.n	800ded4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800decc:	2301      	movs	r3, #1
 800dece:	73fb      	strb	r3, [r7, #15]
      break;
 800ded0:	e000      	b.n	800ded4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ded2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2201      	movs	r2, #1
 800ded8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	ffceff88 	.word	0xffceff88
 800def4:	00100040 	.word	0x00100040
 800def8:	00100030 	.word	0x00100030
 800defc:	00100020 	.word	0x00100020

0800df00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df08:	bf00      	nop
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800df44:	bf00      	nop
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4a40      	ldr	r2, [pc, #256]	; (800e064 <TIM_Base_SetConfig+0x114>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d013      	beq.n	800df90 <TIM_Base_SetConfig+0x40>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df6e:	d00f      	beq.n	800df90 <TIM_Base_SetConfig+0x40>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	4a3d      	ldr	r2, [pc, #244]	; (800e068 <TIM_Base_SetConfig+0x118>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d00b      	beq.n	800df90 <TIM_Base_SetConfig+0x40>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4a3c      	ldr	r2, [pc, #240]	; (800e06c <TIM_Base_SetConfig+0x11c>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d007      	beq.n	800df90 <TIM_Base_SetConfig+0x40>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4a3b      	ldr	r2, [pc, #236]	; (800e070 <TIM_Base_SetConfig+0x120>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d003      	beq.n	800df90 <TIM_Base_SetConfig+0x40>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	4a3a      	ldr	r2, [pc, #232]	; (800e074 <TIM_Base_SetConfig+0x124>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d108      	bne.n	800dfa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	4a2f      	ldr	r2, [pc, #188]	; (800e064 <TIM_Base_SetConfig+0x114>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d01f      	beq.n	800dfea <TIM_Base_SetConfig+0x9a>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfb0:	d01b      	beq.n	800dfea <TIM_Base_SetConfig+0x9a>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4a2c      	ldr	r2, [pc, #176]	; (800e068 <TIM_Base_SetConfig+0x118>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d017      	beq.n	800dfea <TIM_Base_SetConfig+0x9a>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4a2b      	ldr	r2, [pc, #172]	; (800e06c <TIM_Base_SetConfig+0x11c>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d013      	beq.n	800dfea <TIM_Base_SetConfig+0x9a>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	4a2a      	ldr	r2, [pc, #168]	; (800e070 <TIM_Base_SetConfig+0x120>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d00f      	beq.n	800dfea <TIM_Base_SetConfig+0x9a>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	4a29      	ldr	r2, [pc, #164]	; (800e074 <TIM_Base_SetConfig+0x124>)
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d00b      	beq.n	800dfea <TIM_Base_SetConfig+0x9a>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	4a28      	ldr	r2, [pc, #160]	; (800e078 <TIM_Base_SetConfig+0x128>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d007      	beq.n	800dfea <TIM_Base_SetConfig+0x9a>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4a27      	ldr	r2, [pc, #156]	; (800e07c <TIM_Base_SetConfig+0x12c>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d003      	beq.n	800dfea <TIM_Base_SetConfig+0x9a>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4a26      	ldr	r2, [pc, #152]	; (800e080 <TIM_Base_SetConfig+0x130>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d108      	bne.n	800dffc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	695b      	ldr	r3, [r3, #20]
 800e006:	4313      	orrs	r3, r2
 800e008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	68fa      	ldr	r2, [r7, #12]
 800e00e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	689a      	ldr	r2, [r3, #8]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	4a10      	ldr	r2, [pc, #64]	; (800e064 <TIM_Base_SetConfig+0x114>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d00f      	beq.n	800e048 <TIM_Base_SetConfig+0xf8>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4a12      	ldr	r2, [pc, #72]	; (800e074 <TIM_Base_SetConfig+0x124>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d00b      	beq.n	800e048 <TIM_Base_SetConfig+0xf8>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4a11      	ldr	r2, [pc, #68]	; (800e078 <TIM_Base_SetConfig+0x128>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d007      	beq.n	800e048 <TIM_Base_SetConfig+0xf8>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4a10      	ldr	r2, [pc, #64]	; (800e07c <TIM_Base_SetConfig+0x12c>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d003      	beq.n	800e048 <TIM_Base_SetConfig+0xf8>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4a0f      	ldr	r2, [pc, #60]	; (800e080 <TIM_Base_SetConfig+0x130>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d103      	bne.n	800e050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	691a      	ldr	r2, [r3, #16]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	615a      	str	r2, [r3, #20]
}
 800e056:	bf00      	nop
 800e058:	3714      	adds	r7, #20
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop
 800e064:	40010000 	.word	0x40010000
 800e068:	40000400 	.word	0x40000400
 800e06c:	40000800 	.word	0x40000800
 800e070:	40000c00 	.word	0x40000c00
 800e074:	40010400 	.word	0x40010400
 800e078:	40014000 	.word	0x40014000
 800e07c:	40014400 	.word	0x40014400
 800e080:	40014800 	.word	0x40014800

0800e084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e084:	b480      	push	{r7}
 800e086:	b087      	sub	sp, #28
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6a1b      	ldr	r3, [r3, #32]
 800e092:	f023 0201 	bic.w	r2, r3, #1
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a1b      	ldr	r3, [r3, #32]
 800e09e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	699b      	ldr	r3, [r3, #24]
 800e0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	4b37      	ldr	r3, [pc, #220]	; (800e18c <TIM_OC1_SetConfig+0x108>)
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f023 0303 	bic.w	r3, r3, #3
 800e0ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f023 0302 	bic.w	r3, r3, #2
 800e0cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4a2d      	ldr	r2, [pc, #180]	; (800e190 <TIM_OC1_SetConfig+0x10c>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d00f      	beq.n	800e100 <TIM_OC1_SetConfig+0x7c>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4a2c      	ldr	r2, [pc, #176]	; (800e194 <TIM_OC1_SetConfig+0x110>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d00b      	beq.n	800e100 <TIM_OC1_SetConfig+0x7c>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	4a2b      	ldr	r2, [pc, #172]	; (800e198 <TIM_OC1_SetConfig+0x114>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d007      	beq.n	800e100 <TIM_OC1_SetConfig+0x7c>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	4a2a      	ldr	r2, [pc, #168]	; (800e19c <TIM_OC1_SetConfig+0x118>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d003      	beq.n	800e100 <TIM_OC1_SetConfig+0x7c>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	4a29      	ldr	r2, [pc, #164]	; (800e1a0 <TIM_OC1_SetConfig+0x11c>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d10c      	bne.n	800e11a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	f023 0308 	bic.w	r3, r3, #8
 800e106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	697a      	ldr	r2, [r7, #20]
 800e10e:	4313      	orrs	r3, r2
 800e110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f023 0304 	bic.w	r3, r3, #4
 800e118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4a1c      	ldr	r2, [pc, #112]	; (800e190 <TIM_OC1_SetConfig+0x10c>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d00f      	beq.n	800e142 <TIM_OC1_SetConfig+0xbe>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4a1b      	ldr	r2, [pc, #108]	; (800e194 <TIM_OC1_SetConfig+0x110>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d00b      	beq.n	800e142 <TIM_OC1_SetConfig+0xbe>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	4a1a      	ldr	r2, [pc, #104]	; (800e198 <TIM_OC1_SetConfig+0x114>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d007      	beq.n	800e142 <TIM_OC1_SetConfig+0xbe>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	4a19      	ldr	r2, [pc, #100]	; (800e19c <TIM_OC1_SetConfig+0x118>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d003      	beq.n	800e142 <TIM_OC1_SetConfig+0xbe>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	4a18      	ldr	r2, [pc, #96]	; (800e1a0 <TIM_OC1_SetConfig+0x11c>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d111      	bne.n	800e166 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	695b      	ldr	r3, [r3, #20]
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	4313      	orrs	r3, r2
 800e15a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	699b      	ldr	r3, [r3, #24]
 800e160:	693a      	ldr	r2, [r7, #16]
 800e162:	4313      	orrs	r3, r2
 800e164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	693a      	ldr	r2, [r7, #16]
 800e16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	685a      	ldr	r2, [r3, #4]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	697a      	ldr	r2, [r7, #20]
 800e17e:	621a      	str	r2, [r3, #32]
}
 800e180:	bf00      	nop
 800e182:	371c      	adds	r7, #28
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	fffeff8f 	.word	0xfffeff8f
 800e190:	40010000 	.word	0x40010000
 800e194:	40010400 	.word	0x40010400
 800e198:	40014000 	.word	0x40014000
 800e19c:	40014400 	.word	0x40014400
 800e1a0:	40014800 	.word	0x40014800

0800e1a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b087      	sub	sp, #28
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a1b      	ldr	r3, [r3, #32]
 800e1b2:	f023 0210 	bic.w	r2, r3, #16
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a1b      	ldr	r3, [r3, #32]
 800e1be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	699b      	ldr	r3, [r3, #24]
 800e1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	4b34      	ldr	r3, [pc, #208]	; (800e2a0 <TIM_OC2_SetConfig+0xfc>)
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	021b      	lsls	r3, r3, #8
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	f023 0320 	bic.w	r3, r3, #32
 800e1ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	011b      	lsls	r3, r3, #4
 800e1f6:	697a      	ldr	r2, [r7, #20]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4a29      	ldr	r2, [pc, #164]	; (800e2a4 <TIM_OC2_SetConfig+0x100>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d003      	beq.n	800e20c <TIM_OC2_SetConfig+0x68>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4a28      	ldr	r2, [pc, #160]	; (800e2a8 <TIM_OC2_SetConfig+0x104>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d10d      	bne.n	800e228 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	011b      	lsls	r3, r3, #4
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	4313      	orrs	r3, r2
 800e21e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e226:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	4a1e      	ldr	r2, [pc, #120]	; (800e2a4 <TIM_OC2_SetConfig+0x100>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d00f      	beq.n	800e250 <TIM_OC2_SetConfig+0xac>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a1d      	ldr	r2, [pc, #116]	; (800e2a8 <TIM_OC2_SetConfig+0x104>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d00b      	beq.n	800e250 <TIM_OC2_SetConfig+0xac>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	4a1c      	ldr	r2, [pc, #112]	; (800e2ac <TIM_OC2_SetConfig+0x108>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d007      	beq.n	800e250 <TIM_OC2_SetConfig+0xac>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4a1b      	ldr	r2, [pc, #108]	; (800e2b0 <TIM_OC2_SetConfig+0x10c>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d003      	beq.n	800e250 <TIM_OC2_SetConfig+0xac>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4a1a      	ldr	r2, [pc, #104]	; (800e2b4 <TIM_OC2_SetConfig+0x110>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d113      	bne.n	800e278 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e25e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	695b      	ldr	r3, [r3, #20]
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	693a      	ldr	r2, [r7, #16]
 800e268:	4313      	orrs	r3, r2
 800e26a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	693a      	ldr	r2, [r7, #16]
 800e274:	4313      	orrs	r3, r2
 800e276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	693a      	ldr	r2, [r7, #16]
 800e27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	68fa      	ldr	r2, [r7, #12]
 800e282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	685a      	ldr	r2, [r3, #4]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	697a      	ldr	r2, [r7, #20]
 800e290:	621a      	str	r2, [r3, #32]
}
 800e292:	bf00      	nop
 800e294:	371c      	adds	r7, #28
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop
 800e2a0:	feff8fff 	.word	0xfeff8fff
 800e2a4:	40010000 	.word	0x40010000
 800e2a8:	40010400 	.word	0x40010400
 800e2ac:	40014000 	.word	0x40014000
 800e2b0:	40014400 	.word	0x40014400
 800e2b4:	40014800 	.word	0x40014800

0800e2b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6a1b      	ldr	r3, [r3, #32]
 800e2d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	69db      	ldr	r3, [r3, #28]
 800e2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	4b33      	ldr	r3, [pc, #204]	; (800e3b0 <TIM_OC3_SetConfig+0xf8>)
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f023 0303 	bic.w	r3, r3, #3
 800e2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	021b      	lsls	r3, r3, #8
 800e308:	697a      	ldr	r2, [r7, #20]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4a28      	ldr	r2, [pc, #160]	; (800e3b4 <TIM_OC3_SetConfig+0xfc>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d003      	beq.n	800e31e <TIM_OC3_SetConfig+0x66>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4a27      	ldr	r2, [pc, #156]	; (800e3b8 <TIM_OC3_SetConfig+0x100>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d10d      	bne.n	800e33a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	021b      	lsls	r3, r3, #8
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	4313      	orrs	r3, r2
 800e330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4a1d      	ldr	r2, [pc, #116]	; (800e3b4 <TIM_OC3_SetConfig+0xfc>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d00f      	beq.n	800e362 <TIM_OC3_SetConfig+0xaa>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	4a1c      	ldr	r2, [pc, #112]	; (800e3b8 <TIM_OC3_SetConfig+0x100>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d00b      	beq.n	800e362 <TIM_OC3_SetConfig+0xaa>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4a1b      	ldr	r2, [pc, #108]	; (800e3bc <TIM_OC3_SetConfig+0x104>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d007      	beq.n	800e362 <TIM_OC3_SetConfig+0xaa>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a1a      	ldr	r2, [pc, #104]	; (800e3c0 <TIM_OC3_SetConfig+0x108>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d003      	beq.n	800e362 <TIM_OC3_SetConfig+0xaa>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4a19      	ldr	r2, [pc, #100]	; (800e3c4 <TIM_OC3_SetConfig+0x10c>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d113      	bne.n	800e38a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	695b      	ldr	r3, [r3, #20]
 800e376:	011b      	lsls	r3, r3, #4
 800e378:	693a      	ldr	r2, [r7, #16]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	699b      	ldr	r3, [r3, #24]
 800e382:	011b      	lsls	r3, r3, #4
 800e384:	693a      	ldr	r2, [r7, #16]
 800e386:	4313      	orrs	r3, r2
 800e388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	693a      	ldr	r2, [r7, #16]
 800e38e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	685a      	ldr	r2, [r3, #4]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	697a      	ldr	r2, [r7, #20]
 800e3a2:	621a      	str	r2, [r3, #32]
}
 800e3a4:	bf00      	nop
 800e3a6:	371c      	adds	r7, #28
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	fffeff8f 	.word	0xfffeff8f
 800e3b4:	40010000 	.word	0x40010000
 800e3b8:	40010400 	.word	0x40010400
 800e3bc:	40014000 	.word	0x40014000
 800e3c0:	40014400 	.word	0x40014400
 800e3c4:	40014800 	.word	0x40014800

0800e3c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b087      	sub	sp, #28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	69db      	ldr	r3, [r3, #28]
 800e3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	4b24      	ldr	r3, [pc, #144]	; (800e484 <TIM_OC4_SetConfig+0xbc>)
 800e3f4:	4013      	ands	r3, r2
 800e3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	021b      	lsls	r3, r3, #8
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	4313      	orrs	r3, r2
 800e40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	689b      	ldr	r3, [r3, #8]
 800e418:	031b      	lsls	r3, r3, #12
 800e41a:	693a      	ldr	r2, [r7, #16]
 800e41c:	4313      	orrs	r3, r2
 800e41e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	4a19      	ldr	r2, [pc, #100]	; (800e488 <TIM_OC4_SetConfig+0xc0>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d00f      	beq.n	800e448 <TIM_OC4_SetConfig+0x80>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4a18      	ldr	r2, [pc, #96]	; (800e48c <TIM_OC4_SetConfig+0xc4>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d00b      	beq.n	800e448 <TIM_OC4_SetConfig+0x80>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	4a17      	ldr	r2, [pc, #92]	; (800e490 <TIM_OC4_SetConfig+0xc8>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d007      	beq.n	800e448 <TIM_OC4_SetConfig+0x80>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	4a16      	ldr	r2, [pc, #88]	; (800e494 <TIM_OC4_SetConfig+0xcc>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d003      	beq.n	800e448 <TIM_OC4_SetConfig+0x80>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4a15      	ldr	r2, [pc, #84]	; (800e498 <TIM_OC4_SetConfig+0xd0>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d109      	bne.n	800e45c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e44e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	695b      	ldr	r3, [r3, #20]
 800e454:	019b      	lsls	r3, r3, #6
 800e456:	697a      	ldr	r2, [r7, #20]
 800e458:	4313      	orrs	r3, r2
 800e45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	697a      	ldr	r2, [r7, #20]
 800e460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	68fa      	ldr	r2, [r7, #12]
 800e466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	685a      	ldr	r2, [r3, #4]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	693a      	ldr	r2, [r7, #16]
 800e474:	621a      	str	r2, [r3, #32]
}
 800e476:	bf00      	nop
 800e478:	371c      	adds	r7, #28
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop
 800e484:	feff8fff 	.word	0xfeff8fff
 800e488:	40010000 	.word	0x40010000
 800e48c:	40010400 	.word	0x40010400
 800e490:	40014000 	.word	0x40014000
 800e494:	40014400 	.word	0x40014400
 800e498:	40014800 	.word	0x40014800

0800e49c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b087      	sub	sp, #28
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6a1b      	ldr	r3, [r3, #32]
 800e4aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6a1b      	ldr	r3, [r3, #32]
 800e4b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	4b21      	ldr	r3, [pc, #132]	; (800e54c <TIM_OC5_SetConfig+0xb0>)
 800e4c8:	4013      	ands	r3, r2
 800e4ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e4dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	041b      	lsls	r3, r3, #16
 800e4e4:	693a      	ldr	r2, [r7, #16]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4a18      	ldr	r2, [pc, #96]	; (800e550 <TIM_OC5_SetConfig+0xb4>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d00f      	beq.n	800e512 <TIM_OC5_SetConfig+0x76>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4a17      	ldr	r2, [pc, #92]	; (800e554 <TIM_OC5_SetConfig+0xb8>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d00b      	beq.n	800e512 <TIM_OC5_SetConfig+0x76>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4a16      	ldr	r2, [pc, #88]	; (800e558 <TIM_OC5_SetConfig+0xbc>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d007      	beq.n	800e512 <TIM_OC5_SetConfig+0x76>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a15      	ldr	r2, [pc, #84]	; (800e55c <TIM_OC5_SetConfig+0xc0>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d003      	beq.n	800e512 <TIM_OC5_SetConfig+0x76>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4a14      	ldr	r2, [pc, #80]	; (800e560 <TIM_OC5_SetConfig+0xc4>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d109      	bne.n	800e526 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e518:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	021b      	lsls	r3, r3, #8
 800e520:	697a      	ldr	r2, [r7, #20]
 800e522:	4313      	orrs	r3, r2
 800e524:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	68fa      	ldr	r2, [r7, #12]
 800e530:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	685a      	ldr	r2, [r3, #4]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	693a      	ldr	r2, [r7, #16]
 800e53e:	621a      	str	r2, [r3, #32]
}
 800e540:	bf00      	nop
 800e542:	371c      	adds	r7, #28
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr
 800e54c:	fffeff8f 	.word	0xfffeff8f
 800e550:	40010000 	.word	0x40010000
 800e554:	40010400 	.word	0x40010400
 800e558:	40014000 	.word	0x40014000
 800e55c:	40014400 	.word	0x40014400
 800e560:	40014800 	.word	0x40014800

0800e564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e564:	b480      	push	{r7}
 800e566:	b087      	sub	sp, #28
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6a1b      	ldr	r3, [r3, #32]
 800e572:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6a1b      	ldr	r3, [r3, #32]
 800e57e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	4b22      	ldr	r3, [pc, #136]	; (800e618 <TIM_OC6_SetConfig+0xb4>)
 800e590:	4013      	ands	r3, r2
 800e592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	021b      	lsls	r3, r3, #8
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e5a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	051b      	lsls	r3, r3, #20
 800e5ae:	693a      	ldr	r2, [r7, #16]
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	4a19      	ldr	r2, [pc, #100]	; (800e61c <TIM_OC6_SetConfig+0xb8>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d00f      	beq.n	800e5dc <TIM_OC6_SetConfig+0x78>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4a18      	ldr	r2, [pc, #96]	; (800e620 <TIM_OC6_SetConfig+0xbc>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d00b      	beq.n	800e5dc <TIM_OC6_SetConfig+0x78>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	4a17      	ldr	r2, [pc, #92]	; (800e624 <TIM_OC6_SetConfig+0xc0>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d007      	beq.n	800e5dc <TIM_OC6_SetConfig+0x78>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	4a16      	ldr	r2, [pc, #88]	; (800e628 <TIM_OC6_SetConfig+0xc4>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d003      	beq.n	800e5dc <TIM_OC6_SetConfig+0x78>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	4a15      	ldr	r2, [pc, #84]	; (800e62c <TIM_OC6_SetConfig+0xc8>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d109      	bne.n	800e5f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e5e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	695b      	ldr	r3, [r3, #20]
 800e5e8:	029b      	lsls	r3, r3, #10
 800e5ea:	697a      	ldr	r2, [r7, #20]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	697a      	ldr	r2, [r7, #20]
 800e5f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	685a      	ldr	r2, [r3, #4]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	693a      	ldr	r2, [r7, #16]
 800e608:	621a      	str	r2, [r3, #32]
}
 800e60a:	bf00      	nop
 800e60c:	371c      	adds	r7, #28
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	feff8fff 	.word	0xfeff8fff
 800e61c:	40010000 	.word	0x40010000
 800e620:	40010400 	.word	0x40010400
 800e624:	40014000 	.word	0x40014000
 800e628:	40014400 	.word	0x40014400
 800e62c:	40014800 	.word	0x40014800

0800e630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e630:	b480      	push	{r7}
 800e632:	b087      	sub	sp, #28
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	60b9      	str	r1, [r7, #8]
 800e63a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6a1b      	ldr	r3, [r3, #32]
 800e640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6a1b      	ldr	r3, [r3, #32]
 800e646:	f023 0201 	bic.w	r2, r3, #1
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	699b      	ldr	r3, [r3, #24]
 800e652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e65a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	011b      	lsls	r3, r3, #4
 800e660:	693a      	ldr	r2, [r7, #16]
 800e662:	4313      	orrs	r3, r2
 800e664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	f023 030a 	bic.w	r3, r3, #10
 800e66c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e66e:	697a      	ldr	r2, [r7, #20]
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	4313      	orrs	r3, r2
 800e674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	693a      	ldr	r2, [r7, #16]
 800e67a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	621a      	str	r2, [r3, #32]
}
 800e682:	bf00      	nop
 800e684:	371c      	adds	r7, #28
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr

0800e68e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e68e:	b480      	push	{r7}
 800e690:	b087      	sub	sp, #28
 800e692:	af00      	add	r7, sp, #0
 800e694:	60f8      	str	r0, [r7, #12]
 800e696:	60b9      	str	r1, [r7, #8]
 800e698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6a1b      	ldr	r3, [r3, #32]
 800e69e:	f023 0210 	bic.w	r2, r3, #16
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	699b      	ldr	r3, [r3, #24]
 800e6aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6a1b      	ldr	r3, [r3, #32]
 800e6b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e6b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	031b      	lsls	r3, r3, #12
 800e6be:	697a      	ldr	r2, [r7, #20]
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e6ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	011b      	lsls	r3, r3, #4
 800e6d0:	693a      	ldr	r2, [r7, #16]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	697a      	ldr	r2, [r7, #20]
 800e6da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	693a      	ldr	r2, [r7, #16]
 800e6e0:	621a      	str	r2, [r3, #32]
}
 800e6e2:	bf00      	nop
 800e6e4:	371c      	adds	r7, #28
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
	...

0800e6f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b085      	sub	sp, #20
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	4b09      	ldr	r3, [pc, #36]	; (800e728 <TIM_ITRx_SetConfig+0x38>)
 800e704:	4013      	ands	r3, r2
 800e706:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e708:	683a      	ldr	r2, [r7, #0]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	4313      	orrs	r3, r2
 800e70e:	f043 0307 	orr.w	r3, r3, #7
 800e712:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	609a      	str	r2, [r3, #8]
}
 800e71a:	bf00      	nop
 800e71c:	3714      	adds	r7, #20
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	ffcfff8f 	.word	0xffcfff8f

0800e72c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b087      	sub	sp, #28
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
 800e738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	021a      	lsls	r2, r3, #8
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	431a      	orrs	r2, r3
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	4313      	orrs	r3, r2
 800e754:	697a      	ldr	r2, [r7, #20]
 800e756:	4313      	orrs	r3, r2
 800e758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	697a      	ldr	r2, [r7, #20]
 800e75e:	609a      	str	r2, [r3, #8]
}
 800e760:	bf00      	nop
 800e762:	371c      	adds	r7, #28
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b087      	sub	sp, #28
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	f003 031f 	and.w	r3, r3, #31
 800e77e:	2201      	movs	r2, #1
 800e780:	fa02 f303 	lsl.w	r3, r2, r3
 800e784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6a1a      	ldr	r2, [r3, #32]
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	43db      	mvns	r3, r3
 800e78e:	401a      	ands	r2, r3
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6a1a      	ldr	r2, [r3, #32]
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	f003 031f 	and.w	r3, r3, #31
 800e79e:	6879      	ldr	r1, [r7, #4]
 800e7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800e7a4:	431a      	orrs	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	621a      	str	r2, [r3, #32]
}
 800e7aa:	bf00      	nop
 800e7ac:	371c      	adds	r7, #28
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr
	...

0800e7b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d101      	bne.n	800e7d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	e06d      	b.n	800e8ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2202      	movs	r2, #2
 800e7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a30      	ldr	r2, [pc, #192]	; (800e8b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d004      	beq.n	800e804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4a2f      	ldr	r2, [pc, #188]	; (800e8bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d108      	bne.n	800e816 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e80a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	4313      	orrs	r3, r2
 800e814:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e81c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	4313      	orrs	r3, r2
 800e826:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a20      	ldr	r2, [pc, #128]	; (800e8b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d022      	beq.n	800e880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e842:	d01d      	beq.n	800e880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a1d      	ldr	r2, [pc, #116]	; (800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d018      	beq.n	800e880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a1c      	ldr	r2, [pc, #112]	; (800e8c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d013      	beq.n	800e880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a1a      	ldr	r2, [pc, #104]	; (800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d00e      	beq.n	800e880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a15      	ldr	r2, [pc, #84]	; (800e8bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d009      	beq.n	800e880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a16      	ldr	r2, [pc, #88]	; (800e8cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d004      	beq.n	800e880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a15      	ldr	r2, [pc, #84]	; (800e8d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d10c      	bne.n	800e89a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	4313      	orrs	r3, r2
 800e890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3714      	adds	r7, #20
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr
 800e8b8:	40010000 	.word	0x40010000
 800e8bc:	40010400 	.word	0x40010400
 800e8c0:	40000400 	.word	0x40000400
 800e8c4:	40000800 	.word	0x40000800
 800e8c8:	40000c00 	.word	0x40000c00
 800e8cc:	40001800 	.word	0x40001800
 800e8d0:	40014000 	.word	0x40014000

0800e8d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d101      	bne.n	800e8f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e8ec:	2302      	movs	r3, #2
 800e8ee:	e065      	b.n	800e9bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	4313      	orrs	r3, r2
 800e904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	4313      	orrs	r3, r2
 800e912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	4313      	orrs	r3, r2
 800e920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4313      	orrs	r3, r2
 800e92e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	691b      	ldr	r3, [r3, #16]
 800e93a:	4313      	orrs	r3, r2
 800e93c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	695b      	ldr	r3, [r3, #20]
 800e948:	4313      	orrs	r3, r2
 800e94a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e956:	4313      	orrs	r3, r2
 800e958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	699b      	ldr	r3, [r3, #24]
 800e964:	041b      	lsls	r3, r3, #16
 800e966:	4313      	orrs	r3, r2
 800e968:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4a16      	ldr	r2, [pc, #88]	; (800e9c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d004      	beq.n	800e97e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a14      	ldr	r2, [pc, #80]	; (800e9cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d115      	bne.n	800e9aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e988:	051b      	lsls	r3, r3, #20
 800e98a:	4313      	orrs	r3, r2
 800e98c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	69db      	ldr	r3, [r3, #28]
 800e998:	4313      	orrs	r3, r2
 800e99a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	6a1b      	ldr	r3, [r3, #32]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	68fa      	ldr	r2, [r7, #12]
 800e9b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3714      	adds	r7, #20
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr
 800e9c8:	40010000 	.word	0x40010000
 800e9cc:	40010400 	.word	0x40010400

0800e9d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e9d8:	bf00      	nop
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e9ec:	bf00      	nop
 800e9ee:	370c      	adds	r7, #12
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea00:	bf00      	nop
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d101      	bne.n	800ea1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e042      	b.n	800eaa4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d106      	bne.n	800ea36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7f7 fd43 	bl	80064bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2224      	movs	r2, #36	; 0x24
 800ea3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f022 0201 	bic.w	r2, r2, #1
 800ea4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 fdf8 	bl	800f644 <UART_SetConfig>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d101      	bne.n	800ea5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	e022      	b.n	800eaa4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d002      	beq.n	800ea6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f001 fb54 	bl	8010114 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	685a      	ldr	r2, [r3, #4]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ea7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	689a      	ldr	r2, [r3, #8]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ea8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f042 0201 	orr.w	r2, r2, #1
 800ea9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f001 fbdb 	bl	8010258 <UART_CheckIdleState>
 800eaa2:	4603      	mov	r3, r0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b08a      	sub	sp, #40	; 0x28
 800eab0:	af02      	add	r7, sp, #8
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	603b      	str	r3, [r7, #0]
 800eab8:	4613      	mov	r3, r2
 800eaba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eac2:	2b20      	cmp	r3, #32
 800eac4:	f040 8083 	bne.w	800ebce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d002      	beq.n	800ead4 <HAL_UART_Transmit+0x28>
 800eace:	88fb      	ldrh	r3, [r7, #6]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ead4:	2301      	movs	r3, #1
 800ead6:	e07b      	b.n	800ebd0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d101      	bne.n	800eae6 <HAL_UART_Transmit+0x3a>
 800eae2:	2302      	movs	r3, #2
 800eae4:	e074      	b.n	800ebd0 <HAL_UART_Transmit+0x124>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2201      	movs	r2, #1
 800eaea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2221      	movs	r2, #33	; 0x21
 800eafa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eafe:	f7f8 f87d 	bl	8006bfc <HAL_GetTick>
 800eb02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	88fa      	ldrh	r2, [r7, #6]
 800eb08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	88fa      	ldrh	r2, [r7, #6]
 800eb10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb1c:	d108      	bne.n	800eb30 <HAL_UART_Transmit+0x84>
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	691b      	ldr	r3, [r3, #16]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d104      	bne.n	800eb30 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800eb26:	2300      	movs	r3, #0
 800eb28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	61bb      	str	r3, [r7, #24]
 800eb2e:	e003      	b.n	800eb38 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb34:	2300      	movs	r3, #0
 800eb36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800eb40:	e02c      	b.n	800eb9c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	9300      	str	r3, [sp, #0]
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	2180      	movs	r1, #128	; 0x80
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f001 fbce 	bl	80102ee <UART_WaitOnFlagUntilTimeout>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d001      	beq.n	800eb5c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	e039      	b.n	800ebd0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d10b      	bne.n	800eb7a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	881b      	ldrh	r3, [r3, #0]
 800eb66:	461a      	mov	r2, r3
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eb70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	3302      	adds	r3, #2
 800eb76:	61bb      	str	r3, [r7, #24]
 800eb78:	e007      	b.n	800eb8a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	781a      	ldrb	r2, [r3, #0]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	3301      	adds	r3, #1
 800eb88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	3b01      	subs	r3, #1
 800eb94:	b29a      	uxth	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d1cc      	bne.n	800eb42 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	2140      	movs	r1, #64	; 0x40
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f001 fb9b 	bl	80102ee <UART_WaitOnFlagUntilTimeout>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	e006      	b.n	800ebd0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2220      	movs	r2, #32
 800ebc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	e000      	b.n	800ebd0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ebce:	2302      	movs	r3, #2
  }
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3720      	adds	r7, #32
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b08a      	sub	sp, #40	; 0x28
 800ebdc:	af02      	add	r7, sp, #8
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	603b      	str	r3, [r7, #0]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebee:	2b20      	cmp	r3, #32
 800ebf0:	f040 80c0 	bne.w	800ed74 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d002      	beq.n	800ec00 <HAL_UART_Receive+0x28>
 800ebfa:	88fb      	ldrh	r3, [r7, #6]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ec00:	2301      	movs	r3, #1
 800ec02:	e0b8      	b.n	800ed76 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d101      	bne.n	800ec12 <HAL_UART_Receive+0x3a>
 800ec0e:	2302      	movs	r3, #2
 800ec10:	e0b1      	b.n	800ed76 <HAL_UART_Receive+0x19e>
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2201      	movs	r2, #1
 800ec16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2222      	movs	r2, #34	; 0x22
 800ec26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ec30:	f7f7 ffe4 	bl	8006bfc <HAL_GetTick>
 800ec34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	88fa      	ldrh	r2, [r7, #6]
 800ec3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	88fa      	ldrh	r2, [r7, #6]
 800ec42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec4e:	d10e      	bne.n	800ec6e <HAL_UART_Receive+0x96>
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d105      	bne.n	800ec64 <HAL_UART_Receive+0x8c>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ec5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ec62:	e02d      	b.n	800ecc0 <HAL_UART_Receive+0xe8>
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	22ff      	movs	r2, #255	; 0xff
 800ec68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ec6c:	e028      	b.n	800ecc0 <HAL_UART_Receive+0xe8>
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	689b      	ldr	r3, [r3, #8]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d10d      	bne.n	800ec92 <HAL_UART_Receive+0xba>
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	691b      	ldr	r3, [r3, #16]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d104      	bne.n	800ec88 <HAL_UART_Receive+0xb0>
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	22ff      	movs	r2, #255	; 0xff
 800ec82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ec86:	e01b      	b.n	800ecc0 <HAL_UART_Receive+0xe8>
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	227f      	movs	r2, #127	; 0x7f
 800ec8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ec90:	e016      	b.n	800ecc0 <HAL_UART_Receive+0xe8>
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ec9a:	d10d      	bne.n	800ecb8 <HAL_UART_Receive+0xe0>
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d104      	bne.n	800ecae <HAL_UART_Receive+0xd6>
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	227f      	movs	r2, #127	; 0x7f
 800eca8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ecac:	e008      	b.n	800ecc0 <HAL_UART_Receive+0xe8>
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	223f      	movs	r2, #63	; 0x3f
 800ecb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ecb6:	e003      	b.n	800ecc0 <HAL_UART_Receive+0xe8>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ecc6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecd0:	d108      	bne.n	800ece4 <HAL_UART_Receive+0x10c>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	691b      	ldr	r3, [r3, #16]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d104      	bne.n	800ece4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	61bb      	str	r3, [r7, #24]
 800ece2:	e003      	b.n	800ecec <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ece8:	2300      	movs	r3, #0
 800ecea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ecf4:	e032      	b.n	800ed5c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	9300      	str	r3, [sp, #0]
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	2120      	movs	r1, #32
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f001 faf4 	bl	80102ee <UART_WaitOnFlagUntilTimeout>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d001      	beq.n	800ed10 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800ed0c:	2303      	movs	r3, #3
 800ed0e:	e032      	b.n	800ed76 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d10c      	bne.n	800ed30 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	8a7b      	ldrh	r3, [r7, #18]
 800ed20:	4013      	ands	r3, r2
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	3302      	adds	r3, #2
 800ed2c:	61bb      	str	r3, [r7, #24]
 800ed2e:	e00c      	b.n	800ed4a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	8a7b      	ldrh	r3, [r7, #18]
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	4013      	ands	r3, r2
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	3301      	adds	r3, #1
 800ed48:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	3b01      	subs	r3, #1
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1c6      	bne.n	800ecf6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2220      	movs	r2, #32
 800ed6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ed70:	2300      	movs	r3, #0
 800ed72:	e000      	b.n	800ed76 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800ed74:	2302      	movs	r3, #2
  }
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3720      	adds	r7, #32
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
	...

0800ed80 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b08a      	sub	sp, #40	; 0x28
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed94:	2b20      	cmp	r3, #32
 800ed96:	d17a      	bne.n	800ee8e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d002      	beq.n	800eda4 <HAL_UART_Transmit_DMA+0x24>
 800ed9e:	88fb      	ldrh	r3, [r7, #6]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d101      	bne.n	800eda8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800eda4:	2301      	movs	r3, #1
 800eda6:	e073      	b.n	800ee90 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d101      	bne.n	800edb6 <HAL_UART_Transmit_DMA+0x36>
 800edb2:	2302      	movs	r3, #2
 800edb4:	e06c      	b.n	800ee90 <HAL_UART_Transmit_DMA+0x110>
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2201      	movs	r2, #1
 800edba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	68ba      	ldr	r2, [r7, #8]
 800edc2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	88fa      	ldrh	r2, [r7, #6]
 800edc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	88fa      	ldrh	r2, [r7, #6]
 800edd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2221      	movs	r2, #33	; 0x21
 800ede0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d02c      	beq.n	800ee46 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edf0:	4a29      	ldr	r2, [pc, #164]	; (800ee98 <HAL_UART_Transmit_DMA+0x118>)
 800edf2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edf8:	4a28      	ldr	r2, [pc, #160]	; (800ee9c <HAL_UART_Transmit_DMA+0x11c>)
 800edfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee00:	4a27      	ldr	r2, [pc, #156]	; (800eea0 <HAL_UART_Transmit_DMA+0x120>)
 800ee02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee08:	2200      	movs	r2, #0
 800ee0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee14:	4619      	mov	r1, r3
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	3328      	adds	r3, #40	; 0x28
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	88fb      	ldrh	r3, [r7, #6]
 800ee20:	f7f8 fd9e 	bl	8007960 <HAL_DMA_Start_IT>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00d      	beq.n	800ee46 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2210      	movs	r2, #16
 800ee2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2220      	movs	r2, #32
 800ee3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ee42:	2301      	movs	r3, #1
 800ee44:	e024      	b.n	800ee90 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2240      	movs	r2, #64	; 0x40
 800ee4c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2200      	movs	r2, #0
 800ee52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	3308      	adds	r3, #8
 800ee5c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	e853 3f00 	ldrex	r3, [r3]
 800ee64:	613b      	str	r3, [r7, #16]
   return(result);
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee6c:	627b      	str	r3, [r7, #36]	; 0x24
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	3308      	adds	r3, #8
 800ee74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee76:	623a      	str	r2, [r7, #32]
 800ee78:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee7a:	69f9      	ldr	r1, [r7, #28]
 800ee7c:	6a3a      	ldr	r2, [r7, #32]
 800ee7e:	e841 2300 	strex	r3, r2, [r1]
 800ee82:	61bb      	str	r3, [r7, #24]
   return(result);
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1e5      	bne.n	800ee56 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	e000      	b.n	800ee90 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ee8e:	2302      	movs	r3, #2
  }
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3728      	adds	r7, #40	; 0x28
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	08010721 	.word	0x08010721
 800ee9c:	080107b7 	.word	0x080107b7
 800eea0:	0801092d 	.word	0x0801092d

0800eea4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b0ba      	sub	sp, #232	; 0xe8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	69db      	ldr	r3, [r3, #28]
 800eeb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	689b      	ldr	r3, [r3, #8]
 800eec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eeca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800eece:	f640 030f 	movw	r3, #2063	; 0x80f
 800eed2:	4013      	ands	r3, r2
 800eed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800eed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d11b      	bne.n	800ef18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eee4:	f003 0320 	and.w	r3, r3, #32
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d015      	beq.n	800ef18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eeec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eef0:	f003 0320 	and.w	r3, r3, #32
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d105      	bne.n	800ef04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eefc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d009      	beq.n	800ef18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f000 835a 	beq.w	800f5c2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	4798      	blx	r3
      }
      return;
 800ef16:	e354      	b.n	800f5c2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ef18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f000 811f 	beq.w	800f160 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ef22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ef26:	4b8b      	ldr	r3, [pc, #556]	; (800f154 <HAL_UART_IRQHandler+0x2b0>)
 800ef28:	4013      	ands	r3, r2
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d106      	bne.n	800ef3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ef2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ef32:	4b89      	ldr	r3, [pc, #548]	; (800f158 <HAL_UART_IRQHandler+0x2b4>)
 800ef34:	4013      	ands	r3, r2
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f000 8112 	beq.w	800f160 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d011      	beq.n	800ef6c <HAL_UART_IRQHandler+0xc8>
 800ef48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00b      	beq.n	800ef6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef62:	f043 0201 	orr.w	r2, r3, #1
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef70:	f003 0302 	and.w	r3, r3, #2
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d011      	beq.n	800ef9c <HAL_UART_IRQHandler+0xf8>
 800ef78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef7c:	f003 0301 	and.w	r3, r3, #1
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00b      	beq.n	800ef9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2202      	movs	r2, #2
 800ef8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef92:	f043 0204 	orr.w	r2, r3, #4
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efa0:	f003 0304 	and.w	r3, r3, #4
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d011      	beq.n	800efcc <HAL_UART_IRQHandler+0x128>
 800efa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800efac:	f003 0301 	and.w	r3, r3, #1
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00b      	beq.n	800efcc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2204      	movs	r2, #4
 800efba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efc2:	f043 0202 	orr.w	r2, r3, #2
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800efcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efd0:	f003 0308 	and.w	r3, r3, #8
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d017      	beq.n	800f008 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800efd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efdc:	f003 0320 	and.w	r3, r3, #32
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d105      	bne.n	800eff0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800efe4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800efe8:	4b5a      	ldr	r3, [pc, #360]	; (800f154 <HAL_UART_IRQHandler+0x2b0>)
 800efea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00b      	beq.n	800f008 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2208      	movs	r2, #8
 800eff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800effe:	f043 0208 	orr.w	r2, r3, #8
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f00c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f010:	2b00      	cmp	r3, #0
 800f012:	d012      	beq.n	800f03a <HAL_UART_IRQHandler+0x196>
 800f014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00c      	beq.n	800f03a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f028:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f030:	f043 0220 	orr.w	r2, r3, #32
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f040:	2b00      	cmp	r3, #0
 800f042:	f000 82c0 	beq.w	800f5c6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f04a:	f003 0320 	and.w	r3, r3, #32
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d013      	beq.n	800f07a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f056:	f003 0320 	and.w	r3, r3, #32
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d105      	bne.n	800f06a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f05e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f066:	2b00      	cmp	r3, #0
 800f068:	d007      	beq.n	800f07a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d003      	beq.n	800f07a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f08e:	2b40      	cmp	r3, #64	; 0x40
 800f090:	d005      	beq.n	800f09e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f096:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d04f      	beq.n	800f13e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f001 fad8 	bl	8010654 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ae:	2b40      	cmp	r3, #64	; 0x40
 800f0b0:	d141      	bne.n	800f136 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	3308      	adds	r3, #8
 800f0b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f0c0:	e853 3f00 	ldrex	r3, [r3]
 800f0c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f0c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f0cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	3308      	adds	r3, #8
 800f0da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f0de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f0e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f0ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f0ee:	e841 2300 	strex	r3, r2, [r1]
 800f0f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f0f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1d9      	bne.n	800f0b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f102:	2b00      	cmp	r3, #0
 800f104:	d013      	beq.n	800f12e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f10a:	4a14      	ldr	r2, [pc, #80]	; (800f15c <HAL_UART_IRQHandler+0x2b8>)
 800f10c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f112:	4618      	mov	r0, r3
 800f114:	f7f9 f9ac 	bl	8008470 <HAL_DMA_Abort_IT>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d017      	beq.n	800f14e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f128:	4610      	mov	r0, r2
 800f12a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f12c:	e00f      	b.n	800f14e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 fa7e 	bl	800f630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f134:	e00b      	b.n	800f14e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 fa7a 	bl	800f630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f13c:	e007      	b.n	800f14e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 fa76 	bl	800f630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f14c:	e23b      	b.n	800f5c6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f14e:	bf00      	nop
    return;
 800f150:	e239      	b.n	800f5c6 <HAL_UART_IRQHandler+0x722>
 800f152:	bf00      	nop
 800f154:	10000001 	.word	0x10000001
 800f158:	04000120 	.word	0x04000120
 800f15c:	080109ad 	.word	0x080109ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f164:	2b01      	cmp	r3, #1
 800f166:	f040 81ce 	bne.w	800f506 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f16e:	f003 0310 	and.w	r3, r3, #16
 800f172:	2b00      	cmp	r3, #0
 800f174:	f000 81c7 	beq.w	800f506 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f17c:	f003 0310 	and.w	r3, r3, #16
 800f180:	2b00      	cmp	r3, #0
 800f182:	f000 81c0 	beq.w	800f506 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2210      	movs	r2, #16
 800f18c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f198:	2b40      	cmp	r3, #64	; 0x40
 800f19a:	f040 813b 	bne.w	800f414 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4a8b      	ldr	r2, [pc, #556]	; (800f3d4 <HAL_UART_IRQHandler+0x530>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d059      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a89      	ldr	r2, [pc, #548]	; (800f3d8 <HAL_UART_IRQHandler+0x534>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d053      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4a87      	ldr	r2, [pc, #540]	; (800f3dc <HAL_UART_IRQHandler+0x538>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d04d      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4a85      	ldr	r2, [pc, #532]	; (800f3e0 <HAL_UART_IRQHandler+0x53c>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d047      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4a83      	ldr	r2, [pc, #524]	; (800f3e4 <HAL_UART_IRQHandler+0x540>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d041      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a81      	ldr	r2, [pc, #516]	; (800f3e8 <HAL_UART_IRQHandler+0x544>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d03b      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a7f      	ldr	r2, [pc, #508]	; (800f3ec <HAL_UART_IRQHandler+0x548>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d035      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4a7d      	ldr	r2, [pc, #500]	; (800f3f0 <HAL_UART_IRQHandler+0x54c>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d02f      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a7b      	ldr	r2, [pc, #492]	; (800f3f4 <HAL_UART_IRQHandler+0x550>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d029      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a79      	ldr	r2, [pc, #484]	; (800f3f8 <HAL_UART_IRQHandler+0x554>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d023      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a77      	ldr	r2, [pc, #476]	; (800f3fc <HAL_UART_IRQHandler+0x558>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d01d      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a75      	ldr	r2, [pc, #468]	; (800f400 <HAL_UART_IRQHandler+0x55c>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d017      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a73      	ldr	r2, [pc, #460]	; (800f404 <HAL_UART_IRQHandler+0x560>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d011      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a71      	ldr	r2, [pc, #452]	; (800f408 <HAL_UART_IRQHandler+0x564>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d00b      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4a6f      	ldr	r2, [pc, #444]	; (800f40c <HAL_UART_IRQHandler+0x568>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d005      	beq.n	800f25e <HAL_UART_IRQHandler+0x3ba>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a6d      	ldr	r2, [pc, #436]	; (800f410 <HAL_UART_IRQHandler+0x56c>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d105      	bne.n	800f26a <HAL_UART_IRQHandler+0x3c6>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	b29b      	uxth	r3, r3
 800f268:	e004      	b.n	800f274 <HAL_UART_IRQHandler+0x3d0>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	b29b      	uxth	r3, r3
 800f274:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f278:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f000 81a4 	beq.w	800f5ca <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f288:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f28c:	429a      	cmp	r2, r3
 800f28e:	f080 819c 	bcs.w	800f5ca <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2a0:	69db      	ldr	r3, [r3, #28]
 800f2a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2a6:	f000 8086 	beq.w	800f3b6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f2b6:	e853 3f00 	ldrex	r3, [r3]
 800f2ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f2be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f2c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f2d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f2d8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f2e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f2e4:	e841 2300 	strex	r3, r2, [r1]
 800f2e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f2ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1da      	bne.n	800f2aa <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	3308      	adds	r3, #8
 800f2fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2fe:	e853 3f00 	ldrex	r3, [r3]
 800f302:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f304:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f306:	f023 0301 	bic.w	r3, r3, #1
 800f30a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	3308      	adds	r3, #8
 800f314:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f318:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f31c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f320:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f324:	e841 2300 	strex	r3, r2, [r1]
 800f328:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f32a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d1e1      	bne.n	800f2f4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	3308      	adds	r3, #8
 800f336:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f33a:	e853 3f00 	ldrex	r3, [r3]
 800f33e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	3308      	adds	r3, #8
 800f350:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f354:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f356:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f358:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f35a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f35c:	e841 2300 	strex	r3, r2, [r1]
 800f360:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f364:	2b00      	cmp	r3, #0
 800f366:	d1e3      	bne.n	800f330 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2220      	movs	r2, #32
 800f36c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f37e:	e853 3f00 	ldrex	r3, [r3]
 800f382:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f386:	f023 0310 	bic.w	r3, r3, #16
 800f38a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	461a      	mov	r2, r3
 800f394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f398:	65bb      	str	r3, [r7, #88]	; 0x58
 800f39a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f39c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f39e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f3a0:	e841 2300 	strex	r3, r2, [r1]
 800f3a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d1e4      	bne.n	800f376 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7f8 fd3f 	bl	8007e34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	1ad3      	subs	r3, r2, r3
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7f3 ffb2 	bl	8003334 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f3d0:	e0fb      	b.n	800f5ca <HAL_UART_IRQHandler+0x726>
 800f3d2:	bf00      	nop
 800f3d4:	40020010 	.word	0x40020010
 800f3d8:	40020028 	.word	0x40020028
 800f3dc:	40020040 	.word	0x40020040
 800f3e0:	40020058 	.word	0x40020058
 800f3e4:	40020070 	.word	0x40020070
 800f3e8:	40020088 	.word	0x40020088
 800f3ec:	400200a0 	.word	0x400200a0
 800f3f0:	400200b8 	.word	0x400200b8
 800f3f4:	40020410 	.word	0x40020410
 800f3f8:	40020428 	.word	0x40020428
 800f3fc:	40020440 	.word	0x40020440
 800f400:	40020458 	.word	0x40020458
 800f404:	40020470 	.word	0x40020470
 800f408:	40020488 	.word	0x40020488
 800f40c:	400204a0 	.word	0x400204a0
 800f410:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f420:	b29b      	uxth	r3, r3
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f42e:	b29b      	uxth	r3, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	f000 80cc 	beq.w	800f5ce <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f436:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f000 80c7 	beq.w	800f5ce <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f448:	e853 3f00 	ldrex	r3, [r3]
 800f44c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	461a      	mov	r2, r3
 800f45e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f462:	647b      	str	r3, [r7, #68]	; 0x44
 800f464:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f466:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f46a:	e841 2300 	strex	r3, r2, [r1]
 800f46e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f472:	2b00      	cmp	r3, #0
 800f474:	d1e4      	bne.n	800f440 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	3308      	adds	r3, #8
 800f47c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f480:	e853 3f00 	ldrex	r3, [r3]
 800f484:	623b      	str	r3, [r7, #32]
   return(result);
 800f486:	6a3a      	ldr	r2, [r7, #32]
 800f488:	4b54      	ldr	r3, [pc, #336]	; (800f5dc <HAL_UART_IRQHandler+0x738>)
 800f48a:	4013      	ands	r3, r2
 800f48c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	3308      	adds	r3, #8
 800f496:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f49a:	633a      	str	r2, [r7, #48]	; 0x30
 800f49c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f49e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4a2:	e841 2300 	strex	r3, r2, [r1]
 800f4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1e3      	bne.n	800f476 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2220      	movs	r2, #32
 800f4b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	e853 3f00 	ldrex	r3, [r3]
 800f4ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f023 0310 	bic.w	r3, r3, #16
 800f4d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f4e4:	61fb      	str	r3, [r7, #28]
 800f4e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e8:	69b9      	ldr	r1, [r7, #24]
 800f4ea:	69fa      	ldr	r2, [r7, #28]
 800f4ec:	e841 2300 	strex	r3, r2, [r1]
 800f4f0:	617b      	str	r3, [r7, #20]
   return(result);
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d1e4      	bne.n	800f4c2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f4f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7f3 ff18 	bl	8003334 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f504:	e063      	b.n	800f5ce <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f50a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d00e      	beq.n	800f530 <HAL_UART_IRQHandler+0x68c>
 800f512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d008      	beq.n	800f530 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f526:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f001 fa80 	bl	8010a2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f52e:	e051      	b.n	800f5d4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d014      	beq.n	800f566 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f53c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f544:	2b00      	cmp	r3, #0
 800f546:	d105      	bne.n	800f554 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f54c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f550:	2b00      	cmp	r3, #0
 800f552:	d008      	beq.n	800f566 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d03a      	beq.n	800f5d2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	4798      	blx	r3
    }
    return;
 800f564:	e035      	b.n	800f5d2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d009      	beq.n	800f586 <HAL_UART_IRQHandler+0x6e2>
 800f572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d003      	beq.n	800f586 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f001 fa2a 	bl	80109d8 <UART_EndTransmit_IT>
    return;
 800f584:	e026      	b.n	800f5d4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f58a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d009      	beq.n	800f5a6 <HAL_UART_IRQHandler+0x702>
 800f592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f596:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d003      	beq.n	800f5a6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f001 fa59 	bl	8010a56 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f5a4:	e016      	b.n	800f5d4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f5a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d010      	beq.n	800f5d4 <HAL_UART_IRQHandler+0x730>
 800f5b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	da0c      	bge.n	800f5d4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f001 fa41 	bl	8010a42 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f5c0:	e008      	b.n	800f5d4 <HAL_UART_IRQHandler+0x730>
      return;
 800f5c2:	bf00      	nop
 800f5c4:	e006      	b.n	800f5d4 <HAL_UART_IRQHandler+0x730>
    return;
 800f5c6:	bf00      	nop
 800f5c8:	e004      	b.n	800f5d4 <HAL_UART_IRQHandler+0x730>
      return;
 800f5ca:	bf00      	nop
 800f5cc:	e002      	b.n	800f5d4 <HAL_UART_IRQHandler+0x730>
      return;
 800f5ce:	bf00      	nop
 800f5d0:	e000      	b.n	800f5d4 <HAL_UART_IRQHandler+0x730>
    return;
 800f5d2:	bf00      	nop
  }
}
 800f5d4:	37e8      	adds	r7, #232	; 0xe8
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	effffffe 	.word	0xeffffffe

0800f5e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f5e8:	bf00      	nop
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f5fc:	bf00      	nop
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f610:	bf00      	nop
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f624:	bf00      	nop
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f648:	b092      	sub	sp, #72	; 0x48
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f64e:	2300      	movs	r3, #0
 800f650:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	689a      	ldr	r2, [r3, #8]
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	691b      	ldr	r3, [r3, #16]
 800f65c:	431a      	orrs	r2, r3
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	695b      	ldr	r3, [r3, #20]
 800f662:	431a      	orrs	r2, r3
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	69db      	ldr	r3, [r3, #28]
 800f668:	4313      	orrs	r3, r2
 800f66a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	4bbe      	ldr	r3, [pc, #760]	; (800f96c <UART_SetConfig+0x328>)
 800f674:	4013      	ands	r3, r2
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	6812      	ldr	r2, [r2, #0]
 800f67a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f67c:	430b      	orrs	r3, r1
 800f67e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	68da      	ldr	r2, [r3, #12]
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	430a      	orrs	r2, r1
 800f694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	699b      	ldr	r3, [r3, #24]
 800f69a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4ab3      	ldr	r2, [pc, #716]	; (800f970 <UART_SetConfig+0x32c>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d004      	beq.n	800f6b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	6a1b      	ldr	r3, [r3, #32]
 800f6aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	689a      	ldr	r2, [r3, #8]
 800f6b6:	4baf      	ldr	r3, [pc, #700]	; (800f974 <UART_SetConfig+0x330>)
 800f6b8:	4013      	ands	r3, r2
 800f6ba:	697a      	ldr	r2, [r7, #20]
 800f6bc:	6812      	ldr	r2, [r2, #0]
 800f6be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6c0:	430b      	orrs	r3, r1
 800f6c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ca:	f023 010f 	bic.w	r1, r3, #15
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	430a      	orrs	r2, r1
 800f6d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4aa6      	ldr	r2, [pc, #664]	; (800f978 <UART_SetConfig+0x334>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d177      	bne.n	800f7d4 <UART_SetConfig+0x190>
 800f6e4:	4ba5      	ldr	r3, [pc, #660]	; (800f97c <UART_SetConfig+0x338>)
 800f6e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f6ec:	2b28      	cmp	r3, #40	; 0x28
 800f6ee:	d86d      	bhi.n	800f7cc <UART_SetConfig+0x188>
 800f6f0:	a201      	add	r2, pc, #4	; (adr r2, 800f6f8 <UART_SetConfig+0xb4>)
 800f6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f6:	bf00      	nop
 800f6f8:	0800f79d 	.word	0x0800f79d
 800f6fc:	0800f7cd 	.word	0x0800f7cd
 800f700:	0800f7cd 	.word	0x0800f7cd
 800f704:	0800f7cd 	.word	0x0800f7cd
 800f708:	0800f7cd 	.word	0x0800f7cd
 800f70c:	0800f7cd 	.word	0x0800f7cd
 800f710:	0800f7cd 	.word	0x0800f7cd
 800f714:	0800f7cd 	.word	0x0800f7cd
 800f718:	0800f7a5 	.word	0x0800f7a5
 800f71c:	0800f7cd 	.word	0x0800f7cd
 800f720:	0800f7cd 	.word	0x0800f7cd
 800f724:	0800f7cd 	.word	0x0800f7cd
 800f728:	0800f7cd 	.word	0x0800f7cd
 800f72c:	0800f7cd 	.word	0x0800f7cd
 800f730:	0800f7cd 	.word	0x0800f7cd
 800f734:	0800f7cd 	.word	0x0800f7cd
 800f738:	0800f7ad 	.word	0x0800f7ad
 800f73c:	0800f7cd 	.word	0x0800f7cd
 800f740:	0800f7cd 	.word	0x0800f7cd
 800f744:	0800f7cd 	.word	0x0800f7cd
 800f748:	0800f7cd 	.word	0x0800f7cd
 800f74c:	0800f7cd 	.word	0x0800f7cd
 800f750:	0800f7cd 	.word	0x0800f7cd
 800f754:	0800f7cd 	.word	0x0800f7cd
 800f758:	0800f7b5 	.word	0x0800f7b5
 800f75c:	0800f7cd 	.word	0x0800f7cd
 800f760:	0800f7cd 	.word	0x0800f7cd
 800f764:	0800f7cd 	.word	0x0800f7cd
 800f768:	0800f7cd 	.word	0x0800f7cd
 800f76c:	0800f7cd 	.word	0x0800f7cd
 800f770:	0800f7cd 	.word	0x0800f7cd
 800f774:	0800f7cd 	.word	0x0800f7cd
 800f778:	0800f7bd 	.word	0x0800f7bd
 800f77c:	0800f7cd 	.word	0x0800f7cd
 800f780:	0800f7cd 	.word	0x0800f7cd
 800f784:	0800f7cd 	.word	0x0800f7cd
 800f788:	0800f7cd 	.word	0x0800f7cd
 800f78c:	0800f7cd 	.word	0x0800f7cd
 800f790:	0800f7cd 	.word	0x0800f7cd
 800f794:	0800f7cd 	.word	0x0800f7cd
 800f798:	0800f7c5 	.word	0x0800f7c5
 800f79c:	2301      	movs	r3, #1
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7a2:	e222      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f7a4:	2304      	movs	r3, #4
 800f7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7aa:	e21e      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f7ac:	2308      	movs	r3, #8
 800f7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7b2:	e21a      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f7b4:	2310      	movs	r3, #16
 800f7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ba:	e216      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f7bc:	2320      	movs	r3, #32
 800f7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7c2:	e212      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f7c4:	2340      	movs	r3, #64	; 0x40
 800f7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ca:	e20e      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f7cc:	2380      	movs	r3, #128	; 0x80
 800f7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7d2:	e20a      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	4a69      	ldr	r2, [pc, #420]	; (800f980 <UART_SetConfig+0x33c>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d130      	bne.n	800f840 <UART_SetConfig+0x1fc>
 800f7de:	4b67      	ldr	r3, [pc, #412]	; (800f97c <UART_SetConfig+0x338>)
 800f7e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7e2:	f003 0307 	and.w	r3, r3, #7
 800f7e6:	2b05      	cmp	r3, #5
 800f7e8:	d826      	bhi.n	800f838 <UART_SetConfig+0x1f4>
 800f7ea:	a201      	add	r2, pc, #4	; (adr r2, 800f7f0 <UART_SetConfig+0x1ac>)
 800f7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f0:	0800f809 	.word	0x0800f809
 800f7f4:	0800f811 	.word	0x0800f811
 800f7f8:	0800f819 	.word	0x0800f819
 800f7fc:	0800f821 	.word	0x0800f821
 800f800:	0800f829 	.word	0x0800f829
 800f804:	0800f831 	.word	0x0800f831
 800f808:	2300      	movs	r3, #0
 800f80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80e:	e1ec      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f810:	2304      	movs	r3, #4
 800f812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f816:	e1e8      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f818:	2308      	movs	r3, #8
 800f81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f81e:	e1e4      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f820:	2310      	movs	r3, #16
 800f822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f826:	e1e0      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f828:	2320      	movs	r3, #32
 800f82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f82e:	e1dc      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f830:	2340      	movs	r3, #64	; 0x40
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f836:	e1d8      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f838:	2380      	movs	r3, #128	; 0x80
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f83e:	e1d4      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4a4f      	ldr	r2, [pc, #316]	; (800f984 <UART_SetConfig+0x340>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d130      	bne.n	800f8ac <UART_SetConfig+0x268>
 800f84a:	4b4c      	ldr	r3, [pc, #304]	; (800f97c <UART_SetConfig+0x338>)
 800f84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f84e:	f003 0307 	and.w	r3, r3, #7
 800f852:	2b05      	cmp	r3, #5
 800f854:	d826      	bhi.n	800f8a4 <UART_SetConfig+0x260>
 800f856:	a201      	add	r2, pc, #4	; (adr r2, 800f85c <UART_SetConfig+0x218>)
 800f858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f85c:	0800f875 	.word	0x0800f875
 800f860:	0800f87d 	.word	0x0800f87d
 800f864:	0800f885 	.word	0x0800f885
 800f868:	0800f88d 	.word	0x0800f88d
 800f86c:	0800f895 	.word	0x0800f895
 800f870:	0800f89d 	.word	0x0800f89d
 800f874:	2300      	movs	r3, #0
 800f876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f87a:	e1b6      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f87c:	2304      	movs	r3, #4
 800f87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f882:	e1b2      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f884:	2308      	movs	r3, #8
 800f886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f88a:	e1ae      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f88c:	2310      	movs	r3, #16
 800f88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f892:	e1aa      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f894:	2320      	movs	r3, #32
 800f896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89a:	e1a6      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f89c:	2340      	movs	r3, #64	; 0x40
 800f89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8a2:	e1a2      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f8a4:	2380      	movs	r3, #128	; 0x80
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8aa:	e19e      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4a35      	ldr	r2, [pc, #212]	; (800f988 <UART_SetConfig+0x344>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d130      	bne.n	800f918 <UART_SetConfig+0x2d4>
 800f8b6:	4b31      	ldr	r3, [pc, #196]	; (800f97c <UART_SetConfig+0x338>)
 800f8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8ba:	f003 0307 	and.w	r3, r3, #7
 800f8be:	2b05      	cmp	r3, #5
 800f8c0:	d826      	bhi.n	800f910 <UART_SetConfig+0x2cc>
 800f8c2:	a201      	add	r2, pc, #4	; (adr r2, 800f8c8 <UART_SetConfig+0x284>)
 800f8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c8:	0800f8e1 	.word	0x0800f8e1
 800f8cc:	0800f8e9 	.word	0x0800f8e9
 800f8d0:	0800f8f1 	.word	0x0800f8f1
 800f8d4:	0800f8f9 	.word	0x0800f8f9
 800f8d8:	0800f901 	.word	0x0800f901
 800f8dc:	0800f909 	.word	0x0800f909
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e6:	e180      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f8e8:	2304      	movs	r3, #4
 800f8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ee:	e17c      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f8f0:	2308      	movs	r3, #8
 800f8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8f6:	e178      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f8f8:	2310      	movs	r3, #16
 800f8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fe:	e174      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f900:	2320      	movs	r3, #32
 800f902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f906:	e170      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f908:	2340      	movs	r3, #64	; 0x40
 800f90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90e:	e16c      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f910:	2380      	movs	r3, #128	; 0x80
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f916:	e168      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a1b      	ldr	r2, [pc, #108]	; (800f98c <UART_SetConfig+0x348>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d142      	bne.n	800f9a8 <UART_SetConfig+0x364>
 800f922:	4b16      	ldr	r3, [pc, #88]	; (800f97c <UART_SetConfig+0x338>)
 800f924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f926:	f003 0307 	and.w	r3, r3, #7
 800f92a:	2b05      	cmp	r3, #5
 800f92c:	d838      	bhi.n	800f9a0 <UART_SetConfig+0x35c>
 800f92e:	a201      	add	r2, pc, #4	; (adr r2, 800f934 <UART_SetConfig+0x2f0>)
 800f930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f934:	0800f94d 	.word	0x0800f94d
 800f938:	0800f955 	.word	0x0800f955
 800f93c:	0800f95d 	.word	0x0800f95d
 800f940:	0800f965 	.word	0x0800f965
 800f944:	0800f991 	.word	0x0800f991
 800f948:	0800f999 	.word	0x0800f999
 800f94c:	2300      	movs	r3, #0
 800f94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f952:	e14a      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f954:	2304      	movs	r3, #4
 800f956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f95a:	e146      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f95c:	2308      	movs	r3, #8
 800f95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f962:	e142      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f964:	2310      	movs	r3, #16
 800f966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f96a:	e13e      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f96c:	cfff69f3 	.word	0xcfff69f3
 800f970:	58000c00 	.word	0x58000c00
 800f974:	11fff4ff 	.word	0x11fff4ff
 800f978:	40011000 	.word	0x40011000
 800f97c:	58024400 	.word	0x58024400
 800f980:	40004400 	.word	0x40004400
 800f984:	40004800 	.word	0x40004800
 800f988:	40004c00 	.word	0x40004c00
 800f98c:	40005000 	.word	0x40005000
 800f990:	2320      	movs	r3, #32
 800f992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f996:	e128      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f998:	2340      	movs	r3, #64	; 0x40
 800f99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f99e:	e124      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f9a0:	2380      	movs	r3, #128	; 0x80
 800f9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9a6:	e120      	b.n	800fbea <UART_SetConfig+0x5a6>
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4acb      	ldr	r2, [pc, #812]	; (800fcdc <UART_SetConfig+0x698>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d176      	bne.n	800faa0 <UART_SetConfig+0x45c>
 800f9b2:	4bcb      	ldr	r3, [pc, #812]	; (800fce0 <UART_SetConfig+0x69c>)
 800f9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f9ba:	2b28      	cmp	r3, #40	; 0x28
 800f9bc:	d86c      	bhi.n	800fa98 <UART_SetConfig+0x454>
 800f9be:	a201      	add	r2, pc, #4	; (adr r2, 800f9c4 <UART_SetConfig+0x380>)
 800f9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c4:	0800fa69 	.word	0x0800fa69
 800f9c8:	0800fa99 	.word	0x0800fa99
 800f9cc:	0800fa99 	.word	0x0800fa99
 800f9d0:	0800fa99 	.word	0x0800fa99
 800f9d4:	0800fa99 	.word	0x0800fa99
 800f9d8:	0800fa99 	.word	0x0800fa99
 800f9dc:	0800fa99 	.word	0x0800fa99
 800f9e0:	0800fa99 	.word	0x0800fa99
 800f9e4:	0800fa71 	.word	0x0800fa71
 800f9e8:	0800fa99 	.word	0x0800fa99
 800f9ec:	0800fa99 	.word	0x0800fa99
 800f9f0:	0800fa99 	.word	0x0800fa99
 800f9f4:	0800fa99 	.word	0x0800fa99
 800f9f8:	0800fa99 	.word	0x0800fa99
 800f9fc:	0800fa99 	.word	0x0800fa99
 800fa00:	0800fa99 	.word	0x0800fa99
 800fa04:	0800fa79 	.word	0x0800fa79
 800fa08:	0800fa99 	.word	0x0800fa99
 800fa0c:	0800fa99 	.word	0x0800fa99
 800fa10:	0800fa99 	.word	0x0800fa99
 800fa14:	0800fa99 	.word	0x0800fa99
 800fa18:	0800fa99 	.word	0x0800fa99
 800fa1c:	0800fa99 	.word	0x0800fa99
 800fa20:	0800fa99 	.word	0x0800fa99
 800fa24:	0800fa81 	.word	0x0800fa81
 800fa28:	0800fa99 	.word	0x0800fa99
 800fa2c:	0800fa99 	.word	0x0800fa99
 800fa30:	0800fa99 	.word	0x0800fa99
 800fa34:	0800fa99 	.word	0x0800fa99
 800fa38:	0800fa99 	.word	0x0800fa99
 800fa3c:	0800fa99 	.word	0x0800fa99
 800fa40:	0800fa99 	.word	0x0800fa99
 800fa44:	0800fa89 	.word	0x0800fa89
 800fa48:	0800fa99 	.word	0x0800fa99
 800fa4c:	0800fa99 	.word	0x0800fa99
 800fa50:	0800fa99 	.word	0x0800fa99
 800fa54:	0800fa99 	.word	0x0800fa99
 800fa58:	0800fa99 	.word	0x0800fa99
 800fa5c:	0800fa99 	.word	0x0800fa99
 800fa60:	0800fa99 	.word	0x0800fa99
 800fa64:	0800fa91 	.word	0x0800fa91
 800fa68:	2301      	movs	r3, #1
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6e:	e0bc      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fa70:	2304      	movs	r3, #4
 800fa72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa76:	e0b8      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fa78:	2308      	movs	r3, #8
 800fa7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa7e:	e0b4      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fa80:	2310      	movs	r3, #16
 800fa82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa86:	e0b0      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fa88:	2320      	movs	r3, #32
 800fa8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa8e:	e0ac      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fa90:	2340      	movs	r3, #64	; 0x40
 800fa92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa96:	e0a8      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fa98:	2380      	movs	r3, #128	; 0x80
 800fa9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa9e:	e0a4      	b.n	800fbea <UART_SetConfig+0x5a6>
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a8f      	ldr	r2, [pc, #572]	; (800fce4 <UART_SetConfig+0x6a0>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d130      	bne.n	800fb0c <UART_SetConfig+0x4c8>
 800faaa:	4b8d      	ldr	r3, [pc, #564]	; (800fce0 <UART_SetConfig+0x69c>)
 800faac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faae:	f003 0307 	and.w	r3, r3, #7
 800fab2:	2b05      	cmp	r3, #5
 800fab4:	d826      	bhi.n	800fb04 <UART_SetConfig+0x4c0>
 800fab6:	a201      	add	r2, pc, #4	; (adr r2, 800fabc <UART_SetConfig+0x478>)
 800fab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fabc:	0800fad5 	.word	0x0800fad5
 800fac0:	0800fadd 	.word	0x0800fadd
 800fac4:	0800fae5 	.word	0x0800fae5
 800fac8:	0800faed 	.word	0x0800faed
 800facc:	0800faf5 	.word	0x0800faf5
 800fad0:	0800fafd 	.word	0x0800fafd
 800fad4:	2300      	movs	r3, #0
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fada:	e086      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fadc:	2304      	movs	r3, #4
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fae2:	e082      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fae4:	2308      	movs	r3, #8
 800fae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faea:	e07e      	b.n	800fbea <UART_SetConfig+0x5a6>
 800faec:	2310      	movs	r3, #16
 800faee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faf2:	e07a      	b.n	800fbea <UART_SetConfig+0x5a6>
 800faf4:	2320      	movs	r3, #32
 800faf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fafa:	e076      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fafc:	2340      	movs	r3, #64	; 0x40
 800fafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb02:	e072      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fb04:	2380      	movs	r3, #128	; 0x80
 800fb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb0a:	e06e      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4a75      	ldr	r2, [pc, #468]	; (800fce8 <UART_SetConfig+0x6a4>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d130      	bne.n	800fb78 <UART_SetConfig+0x534>
 800fb16:	4b72      	ldr	r3, [pc, #456]	; (800fce0 <UART_SetConfig+0x69c>)
 800fb18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb1a:	f003 0307 	and.w	r3, r3, #7
 800fb1e:	2b05      	cmp	r3, #5
 800fb20:	d826      	bhi.n	800fb70 <UART_SetConfig+0x52c>
 800fb22:	a201      	add	r2, pc, #4	; (adr r2, 800fb28 <UART_SetConfig+0x4e4>)
 800fb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb28:	0800fb41 	.word	0x0800fb41
 800fb2c:	0800fb49 	.word	0x0800fb49
 800fb30:	0800fb51 	.word	0x0800fb51
 800fb34:	0800fb59 	.word	0x0800fb59
 800fb38:	0800fb61 	.word	0x0800fb61
 800fb3c:	0800fb69 	.word	0x0800fb69
 800fb40:	2300      	movs	r3, #0
 800fb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb46:	e050      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fb48:	2304      	movs	r3, #4
 800fb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb4e:	e04c      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fb50:	2308      	movs	r3, #8
 800fb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb56:	e048      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fb58:	2310      	movs	r3, #16
 800fb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb5e:	e044      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fb60:	2320      	movs	r3, #32
 800fb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb66:	e040      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fb68:	2340      	movs	r3, #64	; 0x40
 800fb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb6e:	e03c      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fb70:	2380      	movs	r3, #128	; 0x80
 800fb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb76:	e038      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4a5b      	ldr	r2, [pc, #364]	; (800fcec <UART_SetConfig+0x6a8>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d130      	bne.n	800fbe4 <UART_SetConfig+0x5a0>
 800fb82:	4b57      	ldr	r3, [pc, #348]	; (800fce0 <UART_SetConfig+0x69c>)
 800fb84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb86:	f003 0307 	and.w	r3, r3, #7
 800fb8a:	2b05      	cmp	r3, #5
 800fb8c:	d826      	bhi.n	800fbdc <UART_SetConfig+0x598>
 800fb8e:	a201      	add	r2, pc, #4	; (adr r2, 800fb94 <UART_SetConfig+0x550>)
 800fb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb94:	0800fbad 	.word	0x0800fbad
 800fb98:	0800fbb5 	.word	0x0800fbb5
 800fb9c:	0800fbbd 	.word	0x0800fbbd
 800fba0:	0800fbc5 	.word	0x0800fbc5
 800fba4:	0800fbcd 	.word	0x0800fbcd
 800fba8:	0800fbd5 	.word	0x0800fbd5
 800fbac:	2302      	movs	r3, #2
 800fbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbb2:	e01a      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fbb4:	2304      	movs	r3, #4
 800fbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbba:	e016      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fbbc:	2308      	movs	r3, #8
 800fbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbc2:	e012      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fbc4:	2310      	movs	r3, #16
 800fbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbca:	e00e      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fbcc:	2320      	movs	r3, #32
 800fbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbd2:	e00a      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fbd4:	2340      	movs	r3, #64	; 0x40
 800fbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbda:	e006      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fbdc:	2380      	movs	r3, #128	; 0x80
 800fbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbe2:	e002      	b.n	800fbea <UART_SetConfig+0x5a6>
 800fbe4:	2380      	movs	r3, #128	; 0x80
 800fbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4a3f      	ldr	r2, [pc, #252]	; (800fcec <UART_SetConfig+0x6a8>)
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	f040 80f8 	bne.w	800fde6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fbf6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fbfa:	2b20      	cmp	r3, #32
 800fbfc:	dc46      	bgt.n	800fc8c <UART_SetConfig+0x648>
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	f2c0 8082 	blt.w	800fd08 <UART_SetConfig+0x6c4>
 800fc04:	3b02      	subs	r3, #2
 800fc06:	2b1e      	cmp	r3, #30
 800fc08:	d87e      	bhi.n	800fd08 <UART_SetConfig+0x6c4>
 800fc0a:	a201      	add	r2, pc, #4	; (adr r2, 800fc10 <UART_SetConfig+0x5cc>)
 800fc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc10:	0800fc93 	.word	0x0800fc93
 800fc14:	0800fd09 	.word	0x0800fd09
 800fc18:	0800fc9b 	.word	0x0800fc9b
 800fc1c:	0800fd09 	.word	0x0800fd09
 800fc20:	0800fd09 	.word	0x0800fd09
 800fc24:	0800fd09 	.word	0x0800fd09
 800fc28:	0800fcab 	.word	0x0800fcab
 800fc2c:	0800fd09 	.word	0x0800fd09
 800fc30:	0800fd09 	.word	0x0800fd09
 800fc34:	0800fd09 	.word	0x0800fd09
 800fc38:	0800fd09 	.word	0x0800fd09
 800fc3c:	0800fd09 	.word	0x0800fd09
 800fc40:	0800fd09 	.word	0x0800fd09
 800fc44:	0800fd09 	.word	0x0800fd09
 800fc48:	0800fcbb 	.word	0x0800fcbb
 800fc4c:	0800fd09 	.word	0x0800fd09
 800fc50:	0800fd09 	.word	0x0800fd09
 800fc54:	0800fd09 	.word	0x0800fd09
 800fc58:	0800fd09 	.word	0x0800fd09
 800fc5c:	0800fd09 	.word	0x0800fd09
 800fc60:	0800fd09 	.word	0x0800fd09
 800fc64:	0800fd09 	.word	0x0800fd09
 800fc68:	0800fd09 	.word	0x0800fd09
 800fc6c:	0800fd09 	.word	0x0800fd09
 800fc70:	0800fd09 	.word	0x0800fd09
 800fc74:	0800fd09 	.word	0x0800fd09
 800fc78:	0800fd09 	.word	0x0800fd09
 800fc7c:	0800fd09 	.word	0x0800fd09
 800fc80:	0800fd09 	.word	0x0800fd09
 800fc84:	0800fd09 	.word	0x0800fd09
 800fc88:	0800fcfb 	.word	0x0800fcfb
 800fc8c:	2b40      	cmp	r3, #64	; 0x40
 800fc8e:	d037      	beq.n	800fd00 <UART_SetConfig+0x6bc>
 800fc90:	e03a      	b.n	800fd08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fc92:	f7fc fa63 	bl	800c15c <HAL_RCCEx_GetD3PCLK1Freq>
 800fc96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc98:	e03c      	b.n	800fd14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fc fa72 	bl	800c188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fca8:	e034      	b.n	800fd14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcaa:	f107 0318 	add.w	r3, r7, #24
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7fc fbbe 	bl	800c430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcb8:	e02c      	b.n	800fd14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcba:	4b09      	ldr	r3, [pc, #36]	; (800fce0 <UART_SetConfig+0x69c>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f003 0320 	and.w	r3, r3, #32
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d016      	beq.n	800fcf4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fcc6:	4b06      	ldr	r3, [pc, #24]	; (800fce0 <UART_SetConfig+0x69c>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	08db      	lsrs	r3, r3, #3
 800fccc:	f003 0303 	and.w	r3, r3, #3
 800fcd0:	4a07      	ldr	r2, [pc, #28]	; (800fcf0 <UART_SetConfig+0x6ac>)
 800fcd2:	fa22 f303 	lsr.w	r3, r2, r3
 800fcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fcd8:	e01c      	b.n	800fd14 <UART_SetConfig+0x6d0>
 800fcda:	bf00      	nop
 800fcdc:	40011400 	.word	0x40011400
 800fce0:	58024400 	.word	0x58024400
 800fce4:	40007800 	.word	0x40007800
 800fce8:	40007c00 	.word	0x40007c00
 800fcec:	58000c00 	.word	0x58000c00
 800fcf0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fcf4:	4b9d      	ldr	r3, [pc, #628]	; (800ff6c <UART_SetConfig+0x928>)
 800fcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcf8:	e00c      	b.n	800fd14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fcfa:	4b9d      	ldr	r3, [pc, #628]	; (800ff70 <UART_SetConfig+0x92c>)
 800fcfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcfe:	e009      	b.n	800fd14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd06:	e005      	b.n	800fd14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fd12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	f000 81de 	beq.w	80100d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd20:	4a94      	ldr	r2, [pc, #592]	; (800ff74 <UART_SetConfig+0x930>)
 800fd22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd26:	461a      	mov	r2, r3
 800fd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd2e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	4613      	mov	r3, r2
 800fd36:	005b      	lsls	r3, r3, #1
 800fd38:	4413      	add	r3, r2
 800fd3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d305      	bcc.n	800fd4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d903      	bls.n	800fd54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fd52:	e1c1      	b.n	80100d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd56:	2200      	movs	r2, #0
 800fd58:	60bb      	str	r3, [r7, #8]
 800fd5a:	60fa      	str	r2, [r7, #12]
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd60:	4a84      	ldr	r2, [pc, #528]	; (800ff74 <UART_SetConfig+0x930>)
 800fd62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	2200      	movs	r2, #0
 800fd6a:	603b      	str	r3, [r7, #0]
 800fd6c:	607a      	str	r2, [r7, #4]
 800fd6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fd76:	f7f0 fb0b 	bl	8000390 <__aeabi_uldivmod>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	4610      	mov	r0, r2
 800fd80:	4619      	mov	r1, r3
 800fd82:	f04f 0200 	mov.w	r2, #0
 800fd86:	f04f 0300 	mov.w	r3, #0
 800fd8a:	020b      	lsls	r3, r1, #8
 800fd8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fd90:	0202      	lsls	r2, r0, #8
 800fd92:	6979      	ldr	r1, [r7, #20]
 800fd94:	6849      	ldr	r1, [r1, #4]
 800fd96:	0849      	lsrs	r1, r1, #1
 800fd98:	2000      	movs	r0, #0
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	eb12 0804 	adds.w	r8, r2, r4
 800fda2:	eb43 0905 	adc.w	r9, r3, r5
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	469a      	mov	sl, r3
 800fdae:	4693      	mov	fp, r2
 800fdb0:	4652      	mov	r2, sl
 800fdb2:	465b      	mov	r3, fp
 800fdb4:	4640      	mov	r0, r8
 800fdb6:	4649      	mov	r1, r9
 800fdb8:	f7f0 faea 	bl	8000390 <__aeabi_uldivmod>
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	4613      	mov	r3, r2
 800fdc2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fdca:	d308      	bcc.n	800fdde <UART_SetConfig+0x79a>
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fdd2:	d204      	bcs.n	800fdde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdda:	60da      	str	r2, [r3, #12]
 800fddc:	e17c      	b.n	80100d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fdde:	2301      	movs	r3, #1
 800fde0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fde4:	e178      	b.n	80100d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	69db      	ldr	r3, [r3, #28]
 800fdea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdee:	f040 80c5 	bne.w	800ff7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fdf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fdf6:	2b20      	cmp	r3, #32
 800fdf8:	dc48      	bgt.n	800fe8c <UART_SetConfig+0x848>
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	db7b      	blt.n	800fef6 <UART_SetConfig+0x8b2>
 800fdfe:	2b20      	cmp	r3, #32
 800fe00:	d879      	bhi.n	800fef6 <UART_SetConfig+0x8b2>
 800fe02:	a201      	add	r2, pc, #4	; (adr r2, 800fe08 <UART_SetConfig+0x7c4>)
 800fe04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe08:	0800fe93 	.word	0x0800fe93
 800fe0c:	0800fe9b 	.word	0x0800fe9b
 800fe10:	0800fef7 	.word	0x0800fef7
 800fe14:	0800fef7 	.word	0x0800fef7
 800fe18:	0800fea3 	.word	0x0800fea3
 800fe1c:	0800fef7 	.word	0x0800fef7
 800fe20:	0800fef7 	.word	0x0800fef7
 800fe24:	0800fef7 	.word	0x0800fef7
 800fe28:	0800feb3 	.word	0x0800feb3
 800fe2c:	0800fef7 	.word	0x0800fef7
 800fe30:	0800fef7 	.word	0x0800fef7
 800fe34:	0800fef7 	.word	0x0800fef7
 800fe38:	0800fef7 	.word	0x0800fef7
 800fe3c:	0800fef7 	.word	0x0800fef7
 800fe40:	0800fef7 	.word	0x0800fef7
 800fe44:	0800fef7 	.word	0x0800fef7
 800fe48:	0800fec3 	.word	0x0800fec3
 800fe4c:	0800fef7 	.word	0x0800fef7
 800fe50:	0800fef7 	.word	0x0800fef7
 800fe54:	0800fef7 	.word	0x0800fef7
 800fe58:	0800fef7 	.word	0x0800fef7
 800fe5c:	0800fef7 	.word	0x0800fef7
 800fe60:	0800fef7 	.word	0x0800fef7
 800fe64:	0800fef7 	.word	0x0800fef7
 800fe68:	0800fef7 	.word	0x0800fef7
 800fe6c:	0800fef7 	.word	0x0800fef7
 800fe70:	0800fef7 	.word	0x0800fef7
 800fe74:	0800fef7 	.word	0x0800fef7
 800fe78:	0800fef7 	.word	0x0800fef7
 800fe7c:	0800fef7 	.word	0x0800fef7
 800fe80:	0800fef7 	.word	0x0800fef7
 800fe84:	0800fef7 	.word	0x0800fef7
 800fe88:	0800fee9 	.word	0x0800fee9
 800fe8c:	2b40      	cmp	r3, #64	; 0x40
 800fe8e:	d02e      	beq.n	800feee <UART_SetConfig+0x8aa>
 800fe90:	e031      	b.n	800fef6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe92:	f7fb f9f1 	bl	800b278 <HAL_RCC_GetPCLK1Freq>
 800fe96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe98:	e033      	b.n	800ff02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe9a:	f7fb fa03 	bl	800b2a4 <HAL_RCC_GetPCLK2Freq>
 800fe9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fea0:	e02f      	b.n	800ff02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fc f96e 	bl	800c188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800feac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800feb0:	e027      	b.n	800ff02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800feb2:	f107 0318 	add.w	r3, r7, #24
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fc faba 	bl	800c430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fec0:	e01f      	b.n	800ff02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fec2:	4b2d      	ldr	r3, [pc, #180]	; (800ff78 <UART_SetConfig+0x934>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f003 0320 	and.w	r3, r3, #32
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d009      	beq.n	800fee2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fece:	4b2a      	ldr	r3, [pc, #168]	; (800ff78 <UART_SetConfig+0x934>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	08db      	lsrs	r3, r3, #3
 800fed4:	f003 0303 	and.w	r3, r3, #3
 800fed8:	4a24      	ldr	r2, [pc, #144]	; (800ff6c <UART_SetConfig+0x928>)
 800feda:	fa22 f303 	lsr.w	r3, r2, r3
 800fede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fee0:	e00f      	b.n	800ff02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fee2:	4b22      	ldr	r3, [pc, #136]	; (800ff6c <UART_SetConfig+0x928>)
 800fee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fee6:	e00c      	b.n	800ff02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fee8:	4b21      	ldr	r3, [pc, #132]	; (800ff70 <UART_SetConfig+0x92c>)
 800feea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800feec:	e009      	b.n	800ff02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800feee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fef4:	e005      	b.n	800ff02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fef6:	2300      	movs	r3, #0
 800fef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fefa:	2301      	movs	r3, #1
 800fefc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f000 80e7 	beq.w	80100d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0e:	4a19      	ldr	r2, [pc, #100]	; (800ff74 <UART_SetConfig+0x930>)
 800ff10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff14:	461a      	mov	r2, r3
 800ff16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff1c:	005a      	lsls	r2, r3, #1
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	085b      	lsrs	r3, r3, #1
 800ff24:	441a      	add	r2, r3
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff32:	2b0f      	cmp	r3, #15
 800ff34:	d916      	bls.n	800ff64 <UART_SetConfig+0x920>
 800ff36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff3c:	d212      	bcs.n	800ff64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	f023 030f 	bic.w	r3, r3, #15
 800ff46:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4a:	085b      	lsrs	r3, r3, #1
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	f003 0307 	and.w	r3, r3, #7
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff56:	4313      	orrs	r3, r2
 800ff58:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ff60:	60da      	str	r2, [r3, #12]
 800ff62:	e0b9      	b.n	80100d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ff64:	2301      	movs	r3, #1
 800ff66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ff6a:	e0b5      	b.n	80100d8 <UART_SetConfig+0xa94>
 800ff6c:	03d09000 	.word	0x03d09000
 800ff70:	003d0900 	.word	0x003d0900
 800ff74:	08014d38 	.word	0x08014d38
 800ff78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ff7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ff80:	2b20      	cmp	r3, #32
 800ff82:	dc49      	bgt.n	8010018 <UART_SetConfig+0x9d4>
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	db7c      	blt.n	8010082 <UART_SetConfig+0xa3e>
 800ff88:	2b20      	cmp	r3, #32
 800ff8a:	d87a      	bhi.n	8010082 <UART_SetConfig+0xa3e>
 800ff8c:	a201      	add	r2, pc, #4	; (adr r2, 800ff94 <UART_SetConfig+0x950>)
 800ff8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff92:	bf00      	nop
 800ff94:	0801001f 	.word	0x0801001f
 800ff98:	08010027 	.word	0x08010027
 800ff9c:	08010083 	.word	0x08010083
 800ffa0:	08010083 	.word	0x08010083
 800ffa4:	0801002f 	.word	0x0801002f
 800ffa8:	08010083 	.word	0x08010083
 800ffac:	08010083 	.word	0x08010083
 800ffb0:	08010083 	.word	0x08010083
 800ffb4:	0801003f 	.word	0x0801003f
 800ffb8:	08010083 	.word	0x08010083
 800ffbc:	08010083 	.word	0x08010083
 800ffc0:	08010083 	.word	0x08010083
 800ffc4:	08010083 	.word	0x08010083
 800ffc8:	08010083 	.word	0x08010083
 800ffcc:	08010083 	.word	0x08010083
 800ffd0:	08010083 	.word	0x08010083
 800ffd4:	0801004f 	.word	0x0801004f
 800ffd8:	08010083 	.word	0x08010083
 800ffdc:	08010083 	.word	0x08010083
 800ffe0:	08010083 	.word	0x08010083
 800ffe4:	08010083 	.word	0x08010083
 800ffe8:	08010083 	.word	0x08010083
 800ffec:	08010083 	.word	0x08010083
 800fff0:	08010083 	.word	0x08010083
 800fff4:	08010083 	.word	0x08010083
 800fff8:	08010083 	.word	0x08010083
 800fffc:	08010083 	.word	0x08010083
 8010000:	08010083 	.word	0x08010083
 8010004:	08010083 	.word	0x08010083
 8010008:	08010083 	.word	0x08010083
 801000c:	08010083 	.word	0x08010083
 8010010:	08010083 	.word	0x08010083
 8010014:	08010075 	.word	0x08010075
 8010018:	2b40      	cmp	r3, #64	; 0x40
 801001a:	d02e      	beq.n	801007a <UART_SetConfig+0xa36>
 801001c:	e031      	b.n	8010082 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801001e:	f7fb f92b 	bl	800b278 <HAL_RCC_GetPCLK1Freq>
 8010022:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010024:	e033      	b.n	801008e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010026:	f7fb f93d 	bl	800b2a4 <HAL_RCC_GetPCLK2Freq>
 801002a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801002c:	e02f      	b.n	801008e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801002e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010032:	4618      	mov	r0, r3
 8010034:	f7fc f8a8 	bl	800c188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801003c:	e027      	b.n	801008e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801003e:	f107 0318 	add.w	r3, r7, #24
 8010042:	4618      	mov	r0, r3
 8010044:	f7fc f9f4 	bl	800c430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801004c:	e01f      	b.n	801008e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801004e:	4b2d      	ldr	r3, [pc, #180]	; (8010104 <UART_SetConfig+0xac0>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f003 0320 	and.w	r3, r3, #32
 8010056:	2b00      	cmp	r3, #0
 8010058:	d009      	beq.n	801006e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801005a:	4b2a      	ldr	r3, [pc, #168]	; (8010104 <UART_SetConfig+0xac0>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	08db      	lsrs	r3, r3, #3
 8010060:	f003 0303 	and.w	r3, r3, #3
 8010064:	4a28      	ldr	r2, [pc, #160]	; (8010108 <UART_SetConfig+0xac4>)
 8010066:	fa22 f303 	lsr.w	r3, r2, r3
 801006a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801006c:	e00f      	b.n	801008e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801006e:	4b26      	ldr	r3, [pc, #152]	; (8010108 <UART_SetConfig+0xac4>)
 8010070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010072:	e00c      	b.n	801008e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010074:	4b25      	ldr	r3, [pc, #148]	; (801010c <UART_SetConfig+0xac8>)
 8010076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010078:	e009      	b.n	801008e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801007a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801007e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010080:	e005      	b.n	801008e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010082:	2300      	movs	r3, #0
 8010084:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010086:	2301      	movs	r3, #1
 8010088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801008c:	bf00      	nop
    }

    if (pclk != 0U)
 801008e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010090:	2b00      	cmp	r3, #0
 8010092:	d021      	beq.n	80100d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010098:	4a1d      	ldr	r2, [pc, #116]	; (8010110 <UART_SetConfig+0xacc>)
 801009a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801009e:	461a      	mov	r2, r3
 80100a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	085b      	lsrs	r3, r3, #1
 80100ac:	441a      	add	r2, r3
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80100b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ba:	2b0f      	cmp	r3, #15
 80100bc:	d909      	bls.n	80100d2 <UART_SetConfig+0xa8e>
 80100be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100c4:	d205      	bcs.n	80100d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80100c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c8:	b29a      	uxth	r2, r3
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	60da      	str	r2, [r3, #12]
 80100d0:	e002      	b.n	80100d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80100d2:	2301      	movs	r3, #1
 80100d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	2201      	movs	r2, #1
 80100dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	2201      	movs	r2, #1
 80100e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	2200      	movs	r2, #0
 80100ec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	2200      	movs	r2, #0
 80100f2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80100f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3748      	adds	r7, #72	; 0x48
 80100fc:	46bd      	mov	sp, r7
 80100fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010102:	bf00      	nop
 8010104:	58024400 	.word	0x58024400
 8010108:	03d09000 	.word	0x03d09000
 801010c:	003d0900 	.word	0x003d0900
 8010110:	08014d38 	.word	0x08014d38

08010114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010120:	f003 0301 	and.w	r3, r3, #1
 8010124:	2b00      	cmp	r3, #0
 8010126:	d00a      	beq.n	801013e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	430a      	orrs	r2, r1
 801013c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010142:	f003 0302 	and.w	r3, r3, #2
 8010146:	2b00      	cmp	r3, #0
 8010148:	d00a      	beq.n	8010160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	430a      	orrs	r2, r1
 801015e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010164:	f003 0304 	and.w	r3, r3, #4
 8010168:	2b00      	cmp	r3, #0
 801016a:	d00a      	beq.n	8010182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	430a      	orrs	r2, r1
 8010180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010186:	f003 0308 	and.w	r3, r3, #8
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00a      	beq.n	80101a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	430a      	orrs	r2, r1
 80101a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101a8:	f003 0310 	and.w	r3, r3, #16
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00a      	beq.n	80101c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	430a      	orrs	r2, r1
 80101c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ca:	f003 0320 	and.w	r3, r3, #32
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d00a      	beq.n	80101e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	689b      	ldr	r3, [r3, #8]
 80101d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	430a      	orrs	r2, r1
 80101e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d01a      	beq.n	801022a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	430a      	orrs	r2, r1
 8010208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801020e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010212:	d10a      	bne.n	801022a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	430a      	orrs	r2, r1
 8010228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801022e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00a      	beq.n	801024c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	430a      	orrs	r2, r1
 801024a:	605a      	str	r2, [r3, #4]
  }
}
 801024c:	bf00      	nop
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b086      	sub	sp, #24
 801025c:	af02      	add	r7, sp, #8
 801025e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2200      	movs	r2, #0
 8010264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010268:	f7f6 fcc8 	bl	8006bfc <HAL_GetTick>
 801026c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f003 0308 	and.w	r3, r3, #8
 8010278:	2b08      	cmp	r3, #8
 801027a:	d10e      	bne.n	801029a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801027c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010280:	9300      	str	r3, [sp, #0]
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2200      	movs	r2, #0
 8010286:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 f82f 	bl	80102ee <UART_WaitOnFlagUntilTimeout>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d001      	beq.n	801029a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010296:	2303      	movs	r3, #3
 8010298:	e025      	b.n	80102e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	f003 0304 	and.w	r3, r3, #4
 80102a4:	2b04      	cmp	r3, #4
 80102a6:	d10e      	bne.n	80102c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80102ac:	9300      	str	r3, [sp, #0]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2200      	movs	r2, #0
 80102b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f000 f819 	bl	80102ee <UART_WaitOnFlagUntilTimeout>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d001      	beq.n	80102c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102c2:	2303      	movs	r3, #3
 80102c4:	e00f      	b.n	80102e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2220      	movs	r2, #32
 80102ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2220      	movs	r2, #32
 80102d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2200      	movs	r2, #0
 80102da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2200      	movs	r2, #0
 80102e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80102e4:	2300      	movs	r3, #0
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3710      	adds	r7, #16
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}

080102ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80102ee:	b580      	push	{r7, lr}
 80102f0:	b09c      	sub	sp, #112	; 0x70
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	60f8      	str	r0, [r7, #12]
 80102f6:	60b9      	str	r1, [r7, #8]
 80102f8:	603b      	str	r3, [r7, #0]
 80102fa:	4613      	mov	r3, r2
 80102fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102fe:	e0a9      	b.n	8010454 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010306:	f000 80a5 	beq.w	8010454 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801030a:	f7f6 fc77 	bl	8006bfc <HAL_GetTick>
 801030e:	4602      	mov	r2, r0
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	1ad3      	subs	r3, r2, r3
 8010314:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010316:	429a      	cmp	r2, r3
 8010318:	d302      	bcc.n	8010320 <UART_WaitOnFlagUntilTimeout+0x32>
 801031a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801031c:	2b00      	cmp	r3, #0
 801031e:	d140      	bne.n	80103a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010328:	e853 3f00 	ldrex	r3, [r3]
 801032c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801032e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010330:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010334:	667b      	str	r3, [r7, #100]	; 0x64
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	461a      	mov	r2, r3
 801033c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801033e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010340:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010342:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010344:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010346:	e841 2300 	strex	r3, r2, [r1]
 801034a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801034c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1e6      	bne.n	8010320 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	3308      	adds	r3, #8
 8010358:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801035a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801035c:	e853 3f00 	ldrex	r3, [r3]
 8010360:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010364:	f023 0301 	bic.w	r3, r3, #1
 8010368:	663b      	str	r3, [r7, #96]	; 0x60
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	3308      	adds	r3, #8
 8010370:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010372:	64ba      	str	r2, [r7, #72]	; 0x48
 8010374:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010376:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801037a:	e841 2300 	strex	r3, r2, [r1]
 801037e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010382:	2b00      	cmp	r3, #0
 8010384:	d1e5      	bne.n	8010352 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2220      	movs	r2, #32
 801038a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2220      	movs	r2, #32
 8010392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	2200      	movs	r2, #0
 801039a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801039e:	2303      	movs	r3, #3
 80103a0:	e069      	b.n	8010476 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f003 0304 	and.w	r3, r3, #4
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d051      	beq.n	8010454 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	69db      	ldr	r3, [r3, #28]
 80103b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80103be:	d149      	bne.n	8010454 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80103c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d2:	e853 3f00 	ldrex	r3, [r3]
 80103d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80103de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	461a      	mov	r2, r3
 80103e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103e8:	637b      	str	r3, [r7, #52]	; 0x34
 80103ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103f0:	e841 2300 	strex	r3, r2, [r1]
 80103f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80103f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d1e6      	bne.n	80103ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	3308      	adds	r3, #8
 8010402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	e853 3f00 	ldrex	r3, [r3]
 801040a:	613b      	str	r3, [r7, #16]
   return(result);
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	f023 0301 	bic.w	r3, r3, #1
 8010412:	66bb      	str	r3, [r7, #104]	; 0x68
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	3308      	adds	r3, #8
 801041a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801041c:	623a      	str	r2, [r7, #32]
 801041e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010420:	69f9      	ldr	r1, [r7, #28]
 8010422:	6a3a      	ldr	r2, [r7, #32]
 8010424:	e841 2300 	strex	r3, r2, [r1]
 8010428:	61bb      	str	r3, [r7, #24]
   return(result);
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d1e5      	bne.n	80103fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2220      	movs	r2, #32
 8010434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2220      	movs	r2, #32
 801043c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2220      	movs	r2, #32
 8010444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2200      	movs	r2, #0
 801044c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010450:	2303      	movs	r3, #3
 8010452:	e010      	b.n	8010476 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	69da      	ldr	r2, [r3, #28]
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	4013      	ands	r3, r2
 801045e:	68ba      	ldr	r2, [r7, #8]
 8010460:	429a      	cmp	r2, r3
 8010462:	bf0c      	ite	eq
 8010464:	2301      	moveq	r3, #1
 8010466:	2300      	movne	r3, #0
 8010468:	b2db      	uxtb	r3, r3
 801046a:	461a      	mov	r2, r3
 801046c:	79fb      	ldrb	r3, [r7, #7]
 801046e:	429a      	cmp	r2, r3
 8010470:	f43f af46 	beq.w	8010300 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010474:	2300      	movs	r3, #0
}
 8010476:	4618      	mov	r0, r3
 8010478:	3770      	adds	r7, #112	; 0x70
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
	...

08010480 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b096      	sub	sp, #88	; 0x58
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	4613      	mov	r3, r2
 801048c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	68ba      	ldr	r2, [r7, #8]
 8010492:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	88fa      	ldrh	r2, [r7, #6]
 8010498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2200      	movs	r2, #0
 80104a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2222      	movs	r2, #34	; 0x22
 80104a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d02c      	beq.n	801050e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104b8:	4a42      	ldr	r2, [pc, #264]	; (80105c4 <UART_Start_Receive_DMA+0x144>)
 80104ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104c0:	4a41      	ldr	r2, [pc, #260]	; (80105c8 <UART_Start_Receive_DMA+0x148>)
 80104c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104c8:	4a40      	ldr	r2, [pc, #256]	; (80105cc <UART_Start_Receive_DMA+0x14c>)
 80104ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104d0:	2200      	movs	r2, #0
 80104d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	3324      	adds	r3, #36	; 0x24
 80104de:	4619      	mov	r1, r3
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104e4:	461a      	mov	r2, r3
 80104e6:	88fb      	ldrh	r3, [r7, #6]
 80104e8:	f7f7 fa3a 	bl	8007960 <HAL_DMA_Start_IT>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00d      	beq.n	801050e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	2210      	movs	r2, #16
 80104f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2200      	movs	r2, #0
 80104fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2220      	movs	r2, #32
 8010506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 801050a:	2301      	movs	r3, #1
 801050c:	e055      	b.n	80105ba <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2200      	movs	r2, #0
 8010512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	691b      	ldr	r3, [r3, #16]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d018      	beq.n	8010550 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010526:	e853 3f00 	ldrex	r3, [r3]
 801052a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801052c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010532:	657b      	str	r3, [r7, #84]	; 0x54
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	461a      	mov	r2, r3
 801053a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801053c:	64bb      	str	r3, [r7, #72]	; 0x48
 801053e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010540:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010544:	e841 2300 	strex	r3, r2, [r1]
 8010548:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801054a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801054c:	2b00      	cmp	r3, #0
 801054e:	d1e6      	bne.n	801051e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	3308      	adds	r3, #8
 8010556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055a:	e853 3f00 	ldrex	r3, [r3]
 801055e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010562:	f043 0301 	orr.w	r3, r3, #1
 8010566:	653b      	str	r3, [r7, #80]	; 0x50
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	3308      	adds	r3, #8
 801056e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010570:	637a      	str	r2, [r7, #52]	; 0x34
 8010572:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010578:	e841 2300 	strex	r3, r2, [r1]
 801057c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801057e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010580:	2b00      	cmp	r3, #0
 8010582:	d1e5      	bne.n	8010550 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	3308      	adds	r3, #8
 801058a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	e853 3f00 	ldrex	r3, [r3]
 8010592:	613b      	str	r3, [r7, #16]
   return(result);
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801059a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3308      	adds	r3, #8
 80105a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105a4:	623a      	str	r2, [r7, #32]
 80105a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a8:	69f9      	ldr	r1, [r7, #28]
 80105aa:	6a3a      	ldr	r2, [r7, #32]
 80105ac:	e841 2300 	strex	r3, r2, [r1]
 80105b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d1e5      	bne.n	8010584 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80105b8:	2300      	movs	r3, #0
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3758      	adds	r7, #88	; 0x58
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	080107d3 	.word	0x080107d3
 80105c8:	080108f5 	.word	0x080108f5
 80105cc:	0801092d 	.word	0x0801092d

080105d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b08f      	sub	sp, #60	; 0x3c
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105de:	6a3b      	ldr	r3, [r7, #32]
 80105e0:	e853 3f00 	ldrex	r3, [r3]
 80105e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80105ec:	637b      	str	r3, [r7, #52]	; 0x34
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	461a      	mov	r2, r3
 80105f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105fe:	e841 2300 	strex	r3, r2, [r1]
 8010602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1e6      	bne.n	80105d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	3308      	adds	r3, #8
 8010610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	e853 3f00 	ldrex	r3, [r3]
 8010618:	60bb      	str	r3, [r7, #8]
   return(result);
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010620:	633b      	str	r3, [r7, #48]	; 0x30
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	3308      	adds	r3, #8
 8010628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801062a:	61ba      	str	r2, [r7, #24]
 801062c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062e:	6979      	ldr	r1, [r7, #20]
 8010630:	69ba      	ldr	r2, [r7, #24]
 8010632:	e841 2300 	strex	r3, r2, [r1]
 8010636:	613b      	str	r3, [r7, #16]
   return(result);
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1e5      	bne.n	801060a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2220      	movs	r2, #32
 8010642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010646:	bf00      	nop
 8010648:	373c      	adds	r7, #60	; 0x3c
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr
	...

08010654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010654:	b480      	push	{r7}
 8010656:	b095      	sub	sp, #84	; 0x54
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010664:	e853 3f00 	ldrex	r3, [r3]
 8010668:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801066a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010670:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	461a      	mov	r2, r3
 8010678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801067a:	643b      	str	r3, [r7, #64]	; 0x40
 801067c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801067e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010682:	e841 2300 	strex	r3, r2, [r1]
 8010686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068a:	2b00      	cmp	r3, #0
 801068c:	d1e6      	bne.n	801065c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	3308      	adds	r3, #8
 8010694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010696:	6a3b      	ldr	r3, [r7, #32]
 8010698:	e853 3f00 	ldrex	r3, [r3]
 801069c:	61fb      	str	r3, [r7, #28]
   return(result);
 801069e:	69fa      	ldr	r2, [r7, #28]
 80106a0:	4b1e      	ldr	r3, [pc, #120]	; (801071c <UART_EndRxTransfer+0xc8>)
 80106a2:	4013      	ands	r3, r2
 80106a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	3308      	adds	r3, #8
 80106ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80106b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106b6:	e841 2300 	strex	r3, r2, [r1]
 80106ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1e5      	bne.n	801068e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d118      	bne.n	80106fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	e853 3f00 	ldrex	r3, [r3]
 80106d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	f023 0310 	bic.w	r3, r3, #16
 80106de:	647b      	str	r3, [r7, #68]	; 0x44
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	461a      	mov	r2, r3
 80106e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106e8:	61bb      	str	r3, [r7, #24]
 80106ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ec:	6979      	ldr	r1, [r7, #20]
 80106ee:	69ba      	ldr	r2, [r7, #24]
 80106f0:	e841 2300 	strex	r3, r2, [r1]
 80106f4:	613b      	str	r3, [r7, #16]
   return(result);
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1e6      	bne.n	80106ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2220      	movs	r2, #32
 8010700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2200      	movs	r2, #0
 8010708:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2200      	movs	r2, #0
 801070e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010710:	bf00      	nop
 8010712:	3754      	adds	r7, #84	; 0x54
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr
 801071c:	effffffe 	.word	0xeffffffe

08010720 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b090      	sub	sp, #64	; 0x40
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801072c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	69db      	ldr	r3, [r3, #28]
 8010732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010736:	d037      	beq.n	80107a8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801073a:	2200      	movs	r2, #0
 801073c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	3308      	adds	r3, #8
 8010746:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074a:	e853 3f00 	ldrex	r3, [r3]
 801074e:	623b      	str	r3, [r7, #32]
   return(result);
 8010750:	6a3b      	ldr	r3, [r7, #32]
 8010752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010756:	63bb      	str	r3, [r7, #56]	; 0x38
 8010758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	3308      	adds	r3, #8
 801075e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010760:	633a      	str	r2, [r7, #48]	; 0x30
 8010762:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010768:	e841 2300 	strex	r3, r2, [r1]
 801076c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010770:	2b00      	cmp	r3, #0
 8010772:	d1e5      	bne.n	8010740 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	e853 3f00 	ldrex	r3, [r3]
 8010780:	60fb      	str	r3, [r7, #12]
   return(result);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010788:	637b      	str	r3, [r7, #52]	; 0x34
 801078a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	461a      	mov	r2, r3
 8010790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010792:	61fb      	str	r3, [r7, #28]
 8010794:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010796:	69b9      	ldr	r1, [r7, #24]
 8010798:	69fa      	ldr	r2, [r7, #28]
 801079a:	e841 2300 	strex	r3, r2, [r1]
 801079e:	617b      	str	r3, [r7, #20]
   return(result);
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d1e6      	bne.n	8010774 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80107a6:	e002      	b.n	80107ae <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80107a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107aa:	f7fe ff19 	bl	800f5e0 <HAL_UART_TxCpltCallback>
}
 80107ae:	bf00      	nop
 80107b0:	3740      	adds	r7, #64	; 0x40
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}

080107b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80107b6:	b580      	push	{r7, lr}
 80107b8:	b084      	sub	sp, #16
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80107c4:	68f8      	ldr	r0, [r7, #12]
 80107c6:	f7fe ff15 	bl	800f5f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107ca:	bf00      	nop
 80107cc:	3710      	adds	r7, #16
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}

080107d2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80107d2:	b580      	push	{r7, lr}
 80107d4:	b09c      	sub	sp, #112	; 0x70
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107de:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	69db      	ldr	r3, [r3, #28]
 80107e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107e8:	d071      	beq.n	80108ce <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80107ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107ec:	2200      	movs	r2, #0
 80107ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107fa:	e853 3f00 	ldrex	r3, [r3]
 80107fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010806:	66bb      	str	r3, [r7, #104]	; 0x68
 8010808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	461a      	mov	r2, r3
 801080e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010810:	65bb      	str	r3, [r7, #88]	; 0x58
 8010812:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010814:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010818:	e841 2300 	strex	r3, r2, [r1]
 801081c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801081e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1e6      	bne.n	80107f2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	3308      	adds	r3, #8
 801082a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082e:	e853 3f00 	ldrex	r3, [r3]
 8010832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010836:	f023 0301 	bic.w	r3, r3, #1
 801083a:	667b      	str	r3, [r7, #100]	; 0x64
 801083c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	3308      	adds	r3, #8
 8010842:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010844:	647a      	str	r2, [r7, #68]	; 0x44
 8010846:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801084a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801084c:	e841 2300 	strex	r3, r2, [r1]
 8010850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1e5      	bne.n	8010824 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	3308      	adds	r3, #8
 801085e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010862:	e853 3f00 	ldrex	r3, [r3]
 8010866:	623b      	str	r3, [r7, #32]
   return(result);
 8010868:	6a3b      	ldr	r3, [r7, #32]
 801086a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801086e:	663b      	str	r3, [r7, #96]	; 0x60
 8010870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	3308      	adds	r3, #8
 8010876:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010878:	633a      	str	r2, [r7, #48]	; 0x30
 801087a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801087e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010880:	e841 2300 	strex	r3, r2, [r1]
 8010884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1e5      	bne.n	8010858 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801088c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801088e:	2220      	movs	r2, #32
 8010890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010898:	2b01      	cmp	r3, #1
 801089a:	d118      	bne.n	80108ce <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801089c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	e853 3f00 	ldrex	r3, [r3]
 80108a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f023 0310 	bic.w	r3, r3, #16
 80108b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80108b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	461a      	mov	r2, r3
 80108b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108ba:	61fb      	str	r3, [r7, #28]
 80108bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108be:	69b9      	ldr	r1, [r7, #24]
 80108c0:	69fa      	ldr	r2, [r7, #28]
 80108c2:	e841 2300 	strex	r3, r2, [r1]
 80108c6:	617b      	str	r3, [r7, #20]
   return(result);
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d1e6      	bne.n	801089c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d107      	bne.n	80108e6 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108dc:	4619      	mov	r1, r3
 80108de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80108e0:	f7f2 fd28 	bl	8003334 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108e4:	e002      	b.n	80108ec <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 80108e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80108e8:	f7fe fe8e 	bl	800f608 <HAL_UART_RxCpltCallback>
}
 80108ec:	bf00      	nop
 80108ee:	3770      	adds	r7, #112	; 0x70
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010900:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010906:	2b01      	cmp	r3, #1
 8010908:	d109      	bne.n	801091e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	b29b      	uxth	r3, r3
 8010914:	4619      	mov	r1, r3
 8010916:	68f8      	ldr	r0, [r7, #12]
 8010918:	f7f2 fd0c 	bl	8003334 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801091c:	e002      	b.n	8010924 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 801091e:	68f8      	ldr	r0, [r7, #12]
 8010920:	f7fe fe7c 	bl	800f61c <HAL_UART_RxHalfCpltCallback>
}
 8010924:	bf00      	nop
 8010926:	3710      	adds	r7, #16
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b086      	sub	sp, #24
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010938:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010940:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010948:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	689b      	ldr	r3, [r3, #8]
 8010950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010954:	2b80      	cmp	r3, #128	; 0x80
 8010956:	d109      	bne.n	801096c <UART_DMAError+0x40>
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	2b21      	cmp	r3, #33	; 0x21
 801095c:	d106      	bne.n	801096c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	2200      	movs	r2, #0
 8010962:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010966:	6978      	ldr	r0, [r7, #20]
 8010968:	f7ff fe32 	bl	80105d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	689b      	ldr	r3, [r3, #8]
 8010972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010976:	2b40      	cmp	r3, #64	; 0x40
 8010978:	d109      	bne.n	801098e <UART_DMAError+0x62>
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2b22      	cmp	r3, #34	; 0x22
 801097e:	d106      	bne.n	801098e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	2200      	movs	r2, #0
 8010984:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010988:	6978      	ldr	r0, [r7, #20]
 801098a:	f7ff fe63 	bl	8010654 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010994:	f043 0210 	orr.w	r2, r3, #16
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801099e:	6978      	ldr	r0, [r7, #20]
 80109a0:	f7fe fe46 	bl	800f630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109a4:	bf00      	nop
 80109a6:	3718      	adds	r7, #24
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2200      	movs	r2, #0
 80109be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2200      	movs	r2, #0
 80109c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f7fe fe30 	bl	800f630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109d0:	bf00      	nop
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b088      	sub	sp, #32
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	e853 3f00 	ldrex	r3, [r3]
 80109ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109f4:	61fb      	str	r3, [r7, #28]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	461a      	mov	r2, r3
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	61bb      	str	r3, [r7, #24]
 8010a00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a02:	6979      	ldr	r1, [r7, #20]
 8010a04:	69ba      	ldr	r2, [r7, #24]
 8010a06:	e841 2300 	strex	r3, r2, [r1]
 8010a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d1e6      	bne.n	80109e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2220      	movs	r2, #32
 8010a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7fe fddd 	bl	800f5e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a26:	bf00      	nop
 8010a28:	3720      	adds	r7, #32
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}

08010a2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010a2e:	b480      	push	{r7}
 8010a30:	b083      	sub	sp, #12
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010a36:	bf00      	nop
 8010a38:	370c      	adds	r7, #12
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr

08010a42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010a42:	b480      	push	{r7}
 8010a44:	b083      	sub	sp, #12
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010a4a:	bf00      	nop
 8010a4c:	370c      	adds	r7, #12
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr

08010a56 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010a56:	b480      	push	{r7}
 8010a58:	b083      	sub	sp, #12
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010a5e:	bf00      	nop
 8010a60:	370c      	adds	r7, #12
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr

08010a6a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b084      	sub	sp, #16
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d101      	bne.n	8010a80 <HAL_UARTEx_EnableFifoMode+0x16>
 8010a7c:	2302      	movs	r3, #2
 8010a7e:	e02b      	b.n	8010ad8 <HAL_UARTEx_EnableFifoMode+0x6e>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2201      	movs	r2, #1
 8010a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2224      	movs	r2, #36	; 0x24
 8010a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f022 0201 	bic.w	r2, r2, #1
 8010aa6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010aae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010ab6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f000 f91f 	bl	8010d04 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2220      	movs	r2, #32
 8010aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ad6:	2300      	movs	r3, #0
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3710      	adds	r7, #16
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}

08010ae0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	b085      	sub	sp, #20
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	d101      	bne.n	8010af6 <HAL_UARTEx_DisableFifoMode+0x16>
 8010af2:	2302      	movs	r3, #2
 8010af4:	e027      	b.n	8010b46 <HAL_UARTEx_DisableFifoMode+0x66>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2201      	movs	r2, #1
 8010afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2224      	movs	r2, #36	; 0x24
 8010b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f022 0201 	bic.w	r2, r2, #1
 8010b1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010b24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	68fa      	ldr	r2, [r7, #12]
 8010b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2220      	movs	r2, #32
 8010b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b44:	2300      	movs	r3, #0
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3714      	adds	r7, #20
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr

08010b52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b52:	b580      	push	{r7, lr}
 8010b54:	b084      	sub	sp, #16
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
 8010b5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d101      	bne.n	8010b6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010b66:	2302      	movs	r3, #2
 8010b68:	e02d      	b.n	8010bc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2201      	movs	r2, #1
 8010b6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2224      	movs	r2, #36	; 0x24
 8010b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f022 0201 	bic.w	r2, r2, #1
 8010b90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	689b      	ldr	r3, [r3, #8]
 8010b98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	683a      	ldr	r2, [r7, #0]
 8010ba2:	430a      	orrs	r2, r1
 8010ba4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 f8ac 	bl	8010d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	68fa      	ldr	r2, [r7, #12]
 8010bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2220      	movs	r2, #32
 8010bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3710      	adds	r7, #16
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b084      	sub	sp, #16
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
 8010bd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d101      	bne.n	8010be6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010be2:	2302      	movs	r3, #2
 8010be4:	e02d      	b.n	8010c42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2201      	movs	r2, #1
 8010bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2224      	movs	r2, #36	; 0x24
 8010bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f022 0201 	bic.w	r2, r2, #1
 8010c0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	689b      	ldr	r3, [r3, #8]
 8010c14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	683a      	ldr	r2, [r7, #0]
 8010c1e:	430a      	orrs	r2, r1
 8010c20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 f86e 	bl	8010d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2220      	movs	r2, #32
 8010c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010c40:	2300      	movs	r3, #0
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c4a:	b580      	push	{r7, lr}
 8010c4c:	b08c      	sub	sp, #48	; 0x30
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	60f8      	str	r0, [r7, #12]
 8010c52:	60b9      	str	r1, [r7, #8]
 8010c54:	4613      	mov	r3, r2
 8010c56:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c5e:	2b20      	cmp	r3, #32
 8010c60:	d14a      	bne.n	8010cf8 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010c68:	88fb      	ldrh	r3, [r7, #6]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d101      	bne.n	8010c72 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	e043      	b.n	8010cfa <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d101      	bne.n	8010c80 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8010c7c:	2302      	movs	r3, #2
 8010c7e:	e03c      	b.n	8010cfa <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010c8e:	88fb      	ldrh	r3, [r7, #6]
 8010c90:	461a      	mov	r2, r3
 8010c92:	68b9      	ldr	r1, [r7, #8]
 8010c94:	68f8      	ldr	r0, [r7, #12]
 8010c96:	f7ff fbf3 	bl	8010480 <UART_Start_Receive_DMA>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d124      	bne.n	8010cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d11d      	bne.n	8010cec <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2210      	movs	r2, #16
 8010cb6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cbe:	69bb      	ldr	r3, [r7, #24]
 8010cc0:	e853 3f00 	ldrex	r3, [r3]
 8010cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	f043 0310 	orr.w	r3, r3, #16
 8010ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8010cd8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cda:	6a39      	ldr	r1, [r7, #32]
 8010cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cde:	e841 2300 	strex	r3, r2, [r1]
 8010ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d1e6      	bne.n	8010cb8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8010cea:	e002      	b.n	8010cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010cec:	2301      	movs	r3, #1
 8010cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cf6:	e000      	b.n	8010cfa <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010cf8:	2302      	movs	r3, #2
  }
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3730      	adds	r7, #48	; 0x30
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
	...

08010d04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b085      	sub	sp, #20
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d108      	bne.n	8010d26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2201      	movs	r2, #1
 8010d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2201      	movs	r2, #1
 8010d20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d24:	e031      	b.n	8010d8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d26:	2310      	movs	r3, #16
 8010d28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d2a:	2310      	movs	r3, #16
 8010d2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	689b      	ldr	r3, [r3, #8]
 8010d34:	0e5b      	lsrs	r3, r3, #25
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	f003 0307 	and.w	r3, r3, #7
 8010d3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	689b      	ldr	r3, [r3, #8]
 8010d44:	0f5b      	lsrs	r3, r3, #29
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	f003 0307 	and.w	r3, r3, #7
 8010d4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d4e:	7bbb      	ldrb	r3, [r7, #14]
 8010d50:	7b3a      	ldrb	r2, [r7, #12]
 8010d52:	4911      	ldr	r1, [pc, #68]	; (8010d98 <UARTEx_SetNbDataToProcess+0x94>)
 8010d54:	5c8a      	ldrb	r2, [r1, r2]
 8010d56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010d5a:	7b3a      	ldrb	r2, [r7, #12]
 8010d5c:	490f      	ldr	r1, [pc, #60]	; (8010d9c <UARTEx_SetNbDataToProcess+0x98>)
 8010d5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d64:	b29a      	uxth	r2, r3
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d6c:	7bfb      	ldrb	r3, [r7, #15]
 8010d6e:	7b7a      	ldrb	r2, [r7, #13]
 8010d70:	4909      	ldr	r1, [pc, #36]	; (8010d98 <UARTEx_SetNbDataToProcess+0x94>)
 8010d72:	5c8a      	ldrb	r2, [r1, r2]
 8010d74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010d78:	7b7a      	ldrb	r2, [r7, #13]
 8010d7a:	4908      	ldr	r1, [pc, #32]	; (8010d9c <UARTEx_SetNbDataToProcess+0x98>)
 8010d7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010d8a:	bf00      	nop
 8010d8c:	3714      	adds	r7, #20
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d94:	4770      	bx	lr
 8010d96:	bf00      	nop
 8010d98:	08014d50 	.word	0x08014d50
 8010d9c:	08014d58 	.word	0x08014d58

08010da0 <checkint>:
 8010da0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010da4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010da8:	429a      	cmp	r2, r3
 8010daa:	b570      	push	{r4, r5, r6, lr}
 8010dac:	dd2a      	ble.n	8010e04 <checkint+0x64>
 8010dae:	f240 4333 	movw	r3, #1075	; 0x433
 8010db2:	429a      	cmp	r2, r3
 8010db4:	dc24      	bgt.n	8010e00 <checkint+0x60>
 8010db6:	1a9b      	subs	r3, r3, r2
 8010db8:	f1a3 0620 	sub.w	r6, r3, #32
 8010dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010dc0:	fa02 f403 	lsl.w	r4, r2, r3
 8010dc4:	fa02 f606 	lsl.w	r6, r2, r6
 8010dc8:	f1c3 0520 	rsb	r5, r3, #32
 8010dcc:	fa22 f505 	lsr.w	r5, r2, r5
 8010dd0:	4334      	orrs	r4, r6
 8010dd2:	432c      	orrs	r4, r5
 8010dd4:	409a      	lsls	r2, r3
 8010dd6:	ea20 0202 	bic.w	r2, r0, r2
 8010dda:	ea21 0404 	bic.w	r4, r1, r4
 8010dde:	4322      	orrs	r2, r4
 8010de0:	f1a3 0420 	sub.w	r4, r3, #32
 8010de4:	f1c3 0220 	rsb	r2, r3, #32
 8010de8:	d10c      	bne.n	8010e04 <checkint+0x64>
 8010dea:	40d8      	lsrs	r0, r3
 8010dec:	fa01 f302 	lsl.w	r3, r1, r2
 8010df0:	4318      	orrs	r0, r3
 8010df2:	40e1      	lsrs	r1, r4
 8010df4:	4308      	orrs	r0, r1
 8010df6:	f000 0001 	and.w	r0, r0, #1
 8010dfa:	f1d0 0002 	rsbs	r0, r0, #2
 8010dfe:	bd70      	pop	{r4, r5, r6, pc}
 8010e00:	2002      	movs	r0, #2
 8010e02:	e7fc      	b.n	8010dfe <checkint+0x5e>
 8010e04:	2000      	movs	r0, #0
 8010e06:	e7fa      	b.n	8010dfe <checkint+0x5e>

08010e08 <pow>:
 8010e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e0c:	ee10 4a90 	vmov	r4, s1
 8010e10:	ed2d 8b0a 	vpush	{d8-d12}
 8010e14:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8010e18:	ee11 7a90 	vmov	r7, s3
 8010e1c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8010e20:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8010e24:	429a      	cmp	r2, r3
 8010e26:	ee10 6a10 	vmov	r6, s0
 8010e2a:	ee11 0a10 	vmov	r0, s2
 8010e2e:	b086      	sub	sp, #24
 8010e30:	46d4      	mov	ip, sl
 8010e32:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8010e36:	d806      	bhi.n	8010e46 <pow+0x3e>
 8010e38:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8010e3c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010e40:	2b7f      	cmp	r3, #127	; 0x7f
 8010e42:	f240 8156 	bls.w	80110f2 <pow+0x2ea>
 8010e46:	1802      	adds	r2, r0, r0
 8010e48:	eb47 0107 	adc.w	r1, r7, r7
 8010e4c:	f06f 0e01 	mvn.w	lr, #1
 8010e50:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 8010e54:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 8010e58:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8010e5c:	45ce      	cmp	lr, r9
 8010e5e:	eb73 0808 	sbcs.w	r8, r3, r8
 8010e62:	d23f      	bcs.n	8010ee4 <pow+0xdc>
 8010e64:	ea52 0301 	orrs.w	r3, r2, r1
 8010e68:	f04f 0300 	mov.w	r3, #0
 8010e6c:	d10c      	bne.n	8010e88 <pow+0x80>
 8010e6e:	19b6      	adds	r6, r6, r6
 8010e70:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8010e74:	4164      	adcs	r4, r4
 8010e76:	42b3      	cmp	r3, r6
 8010e78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010e7c:	41a3      	sbcs	r3, r4
 8010e7e:	f0c0 808c 	bcc.w	8010f9a <pow+0x192>
 8010e82:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010e86:	e028      	b.n	8010eda <pow+0xd2>
 8010e88:	4da3      	ldr	r5, [pc, #652]	; (8011118 <pow+0x310>)
 8010e8a:	42ac      	cmp	r4, r5
 8010e8c:	bf08      	it	eq
 8010e8e:	429e      	cmpeq	r6, r3
 8010e90:	d107      	bne.n	8010ea2 <pow+0x9a>
 8010e92:	1800      	adds	r0, r0, r0
 8010e94:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010e98:	417f      	adcs	r7, r7
 8010e9a:	4283      	cmp	r3, r0
 8010e9c:	4b9f      	ldr	r3, [pc, #636]	; (801111c <pow+0x314>)
 8010e9e:	41bb      	sbcs	r3, r7
 8010ea0:	e7ed      	b.n	8010e7e <pow+0x76>
 8010ea2:	19b6      	adds	r6, r6, r6
 8010ea4:	489e      	ldr	r0, [pc, #632]	; (8011120 <pow+0x318>)
 8010ea6:	4164      	adcs	r4, r4
 8010ea8:	42b3      	cmp	r3, r6
 8010eaa:	eb70 0504 	sbcs.w	r5, r0, r4
 8010eae:	d374      	bcc.n	8010f9a <pow+0x192>
 8010eb0:	4281      	cmp	r1, r0
 8010eb2:	bf08      	it	eq
 8010eb4:	429a      	cmpeq	r2, r3
 8010eb6:	d170      	bne.n	8010f9a <pow+0x192>
 8010eb8:	4a9a      	ldr	r2, [pc, #616]	; (8011124 <pow+0x31c>)
 8010eba:	4294      	cmp	r4, r2
 8010ebc:	bf08      	it	eq
 8010ebe:	429e      	cmpeq	r6, r3
 8010ec0:	d0df      	beq.n	8010e82 <pow+0x7a>
 8010ec2:	4294      	cmp	r4, r2
 8010ec4:	ea6f 0707 	mvn.w	r7, r7
 8010ec8:	bf34      	ite	cc
 8010eca:	2400      	movcc	r4, #0
 8010ecc:	2401      	movcs	r4, #1
 8010ece:	0fff      	lsrs	r7, r7, #31
 8010ed0:	42bc      	cmp	r4, r7
 8010ed2:	f040 81d9 	bne.w	8011288 <pow+0x480>
 8010ed6:	ee21 0b01 	vmul.f64	d0, d1, d1
 8010eda:	b006      	add	sp, #24
 8010edc:	ecbd 8b0a 	vpop	{d8-d12}
 8010ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee4:	eb16 0806 	adds.w	r8, r6, r6
 8010ee8:	eb44 0904 	adc.w	r9, r4, r4
 8010eec:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 8010ef0:	f169 0200 	sbc.w	r2, r9, #0
 8010ef4:	458e      	cmp	lr, r1
 8010ef6:	4193      	sbcs	r3, r2
 8010ef8:	d223      	bcs.n	8010f42 <pow+0x13a>
 8010efa:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010efe:	2c00      	cmp	r4, #0
 8010f00:	da12      	bge.n	8010f28 <pow+0x120>
 8010f02:	4639      	mov	r1, r7
 8010f04:	f7ff ff4c 	bl	8010da0 <checkint>
 8010f08:	2801      	cmp	r0, #1
 8010f0a:	d10d      	bne.n	8010f28 <pow+0x120>
 8010f0c:	eeb1 0b40 	vneg.f64	d0, d0
 8010f10:	ea58 0309 	orrs.w	r3, r8, r9
 8010f14:	d10a      	bne.n	8010f2c <pow+0x124>
 8010f16:	2f00      	cmp	r7, #0
 8010f18:	dadf      	bge.n	8010eda <pow+0xd2>
 8010f1a:	b006      	add	sp, #24
 8010f1c:	ecbd 8b0a 	vpop	{d8-d12}
 8010f20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f24:	f001 b810 	b.w	8011f48 <__math_divzero>
 8010f28:	2000      	movs	r0, #0
 8010f2a:	e7f1      	b.n	8010f10 <pow+0x108>
 8010f2c:	2f00      	cmp	r7, #0
 8010f2e:	dad4      	bge.n	8010eda <pow+0xd2>
 8010f30:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010f34:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010f38:	ed8d 7b00 	vstr	d7, [sp]
 8010f3c:	ed9d 0b00 	vldr	d0, [sp]
 8010f40:	e7cb      	b.n	8010eda <pow+0xd2>
 8010f42:	2c00      	cmp	r4, #0
 8010f44:	da2c      	bge.n	8010fa0 <pow+0x198>
 8010f46:	4639      	mov	r1, r7
 8010f48:	f7ff ff2a 	bl	8010da0 <checkint>
 8010f4c:	b930      	cbnz	r0, 8010f5c <pow+0x154>
 8010f4e:	b006      	add	sp, #24
 8010f50:	ecbd 8b0a 	vpop	{d8-d12}
 8010f54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f58:	f001 b80e 	b.w	8011f78 <__math_invalid>
 8010f5c:	2801      	cmp	r0, #1
 8010f5e:	bf14      	ite	ne
 8010f60:	2000      	movne	r0, #0
 8010f62:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010f66:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010f6a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010f6e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8010f72:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010f76:	2b7f      	cmp	r3, #127	; 0x7f
 8010f78:	d92d      	bls.n	8010fd6 <pow+0x1ce>
 8010f7a:	4b67      	ldr	r3, [pc, #412]	; (8011118 <pow+0x310>)
 8010f7c:	2000      	movs	r0, #0
 8010f7e:	429c      	cmp	r4, r3
 8010f80:	bf08      	it	eq
 8010f82:	4286      	cmpeq	r6, r0
 8010f84:	f43f af7d 	beq.w	8010e82 <pow+0x7a>
 8010f88:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010f8c:	428a      	cmp	r2, r1
 8010f8e:	d80c      	bhi.n	8010faa <pow+0x1a2>
 8010f90:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010f94:	42b0      	cmp	r0, r6
 8010f96:	41a3      	sbcs	r3, r4
 8010f98:	d204      	bcs.n	8010fa4 <pow+0x19c>
 8010f9a:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010f9e:	e79c      	b.n	8010eda <pow+0xd2>
 8010fa0:	2000      	movs	r0, #0
 8010fa2:	e7e4      	b.n	8010f6e <pow+0x166>
 8010fa4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010fa8:	e797      	b.n	8010eda <pow+0xd2>
 8010faa:	2e01      	cmp	r6, #1
 8010fac:	eb74 0303 	sbcs.w	r3, r4, r3
 8010fb0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010fb4:	bf34      	ite	cc
 8010fb6:	2301      	movcc	r3, #1
 8010fb8:	2300      	movcs	r3, #0
 8010fba:	4295      	cmp	r5, r2
 8010fbc:	bf8c      	ite	hi
 8010fbe:	2500      	movhi	r5, #0
 8010fc0:	2501      	movls	r5, #1
 8010fc2:	42ab      	cmp	r3, r5
 8010fc4:	f000 809d 	beq.w	8011102 <pow+0x2fa>
 8010fc8:	b006      	add	sp, #24
 8010fca:	ecbd 8b0a 	vpop	{d8-d12}
 8010fce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fd2:	f000 bfb1 	b.w	8011f38 <__math_oflow>
 8010fd6:	f1bc 0f00 	cmp.w	ip, #0
 8010fda:	d10b      	bne.n	8010ff4 <pow+0x1ec>
 8010fdc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011110 <pow+0x308>
 8010fe0:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010fe4:	ec53 2b17 	vmov	r2, r3, d7
 8010fe8:	ee17 6a10 	vmov	r6, s14
 8010fec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010ff0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8010ff4:	4b4c      	ldr	r3, [pc, #304]	; (8011128 <pow+0x320>)
 8010ff6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010ffa:	4423      	add	r3, r4
 8010ffc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011000:	1519      	asrs	r1, r3, #20
 8011002:	0d1b      	lsrs	r3, r3, #20
 8011004:	051b      	lsls	r3, r3, #20
 8011006:	eba4 0903 	sub.w	r9, r4, r3
 801100a:	4b48      	ldr	r3, [pc, #288]	; (801112c <pow+0x324>)
 801100c:	ee04 1a10 	vmov	s8, r1
 8011010:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011014:	f1b6 0800 	subs.w	r8, r6, #0
 8011018:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801101c:	ec49 8b15 	vmov	d5, r8, r9
 8011020:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011024:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011028:	ed93 7b00 	vldr	d7, [r3]
 801102c:	ed93 5b02 	vldr	d5, [r3, #8]
 8011030:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011034:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011038:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801103c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011040:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011044:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011048:	ed93 5b04 	vldr	d5, [r3, #16]
 801104c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011050:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011054:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011058:	ed93 4b08 	vldr	d4, [r3, #32]
 801105c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011060:	eeb0 9b40 	vmov.f64	d9, d0
 8011064:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011068:	ed93 5b06 	vldr	d5, [r3, #24]
 801106c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011070:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011074:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011078:	eea6 5b04 	vfma.f64	d5, d6, d4
 801107c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011080:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011084:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011088:	ee3a ab00 	vadd.f64	d10, d10, d0
 801108c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011090:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011094:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011098:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801109c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80110a0:	eea0 4b03 	vfma.f64	d4, d0, d3
 80110a4:	eea0 5b04 	vfma.f64	d5, d0, d4
 80110a8:	eeab ab05 	vfma.f64	d10, d11, d5
 80110ac:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80110b0:	ee21 7b06 	vmul.f64	d7, d1, d6
 80110b4:	ee17 3a90 	vmov	r3, s15
 80110b8:	eeb0 5b47 	vmov.f64	d5, d7
 80110bc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80110c0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80110c4:	18b2      	adds	r2, r6, r2
 80110c6:	2a3e      	cmp	r2, #62	; 0x3e
 80110c8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80110cc:	ee38 8b46 	vsub.f64	d8, d8, d6
 80110d0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80110d4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80110d8:	d92b      	bls.n	8011132 <pow+0x32a>
 80110da:	2a00      	cmp	r2, #0
 80110dc:	da0b      	bge.n	80110f6 <pow+0x2ee>
 80110de:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80110e2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80110e6:	2800      	cmp	r0, #0
 80110e8:	f43f aef7 	beq.w	8010eda <pow+0xd2>
 80110ec:	eeb1 0b40 	vneg.f64	d0, d0
 80110f0:	e6f3      	b.n	8010eda <pow+0xd2>
 80110f2:	2000      	movs	r0, #0
 80110f4:	e77e      	b.n	8010ff4 <pow+0x1ec>
 80110f6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80110fa:	d919      	bls.n	8011130 <pow+0x328>
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	f6bf af63 	bge.w	8010fc8 <pow+0x1c0>
 8011102:	b006      	add	sp, #24
 8011104:	ecbd 8b0a 	vpop	{d8-d12}
 8011108:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801110c:	f000 bf0c 	b.w	8011f28 <__math_uflow>
 8011110:	00000000 	.word	0x00000000
 8011114:	43300000 	.word	0x43300000
 8011118:	3ff00000 	.word	0x3ff00000
 801111c:	fff00000 	.word	0xfff00000
 8011120:	ffe00000 	.word	0xffe00000
 8011124:	7fe00000 	.word	0x7fe00000
 8011128:	c0196aab 	.word	0xc0196aab
 801112c:	08014d60 	.word	0x08014d60
 8011130:	2600      	movs	r6, #0
 8011132:	495d      	ldr	r1, [pc, #372]	; (80112a8 <pow+0x4a0>)
 8011134:	ed91 4b02 	vldr	d4, [r1, #8]
 8011138:	ed91 3b00 	vldr	d3, [r1]
 801113c:	eeb0 6b44 	vmov.f64	d6, d4
 8011140:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011144:	ee16 5a10 	vmov	r5, s12
 8011148:	ee36 6b44 	vsub.f64	d6, d6, d4
 801114c:	ed91 4b04 	vldr	d4, [r1, #16]
 8011150:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011154:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011158:	eeb0 0b47 	vmov.f64	d0, d7
 801115c:	ed91 7b06 	vldr	d7, [r1, #24]
 8011160:	18dc      	adds	r4, r3, r3
 8011162:	f104 030f 	add.w	r3, r4, #15
 8011166:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801116a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801116e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011172:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011176:	ee20 6b00 	vmul.f64	d6, d0, d0
 801117a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801117e:	ed91 5b08 	vldr	d5, [r1, #32]
 8011182:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011186:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801118a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801118e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011192:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011196:	ee26 6b06 	vmul.f64	d6, d6, d6
 801119a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801119e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80111a2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80111a6:	eea0 5b04 	vfma.f64	d5, d0, d4
 80111aa:	1940      	adds	r0, r0, r5
 80111ac:	2700      	movs	r7, #0
 80111ae:	eb17 020c 	adds.w	r2, r7, ip
 80111b2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80111b6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80111ba:	2e00      	cmp	r6, #0
 80111bc:	d15f      	bne.n	801127e <pow+0x476>
 80111be:	42bd      	cmp	r5, r7
 80111c0:	db13      	blt.n	80111ea <pow+0x3e2>
 80111c2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80111c6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80111ca:	4610      	mov	r0, r2
 80111cc:	ec41 0b10 	vmov	d0, r0, r1
 80111d0:	eea7 0b00 	vfma.f64	d0, d7, d0
 80111d4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011290 <pow+0x488>
 80111d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80111dc:	b006      	add	sp, #24
 80111de:	ecbd 8b0a 	vpop	{d8-d12}
 80111e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111e6:	f000 bedf 	b.w	8011fa8 <__math_check_oflow>
 80111ea:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80111ee:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80111f2:	4610      	mov	r0, r2
 80111f4:	ec41 0b15 	vmov	d5, r0, r1
 80111f8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80111fc:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011200:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011204:	eeb0 3bc7 	vabs.f64	d3, d7
 8011208:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011210:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011298 <pow+0x490>
 8011214:	d52a      	bpl.n	801126c <pow+0x464>
 8011216:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801121a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011222:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011226:	ee35 6b06 	vadd.f64	d6, d5, d6
 801122a:	bf48      	it	mi
 801122c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011230:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011234:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011238:	ee35 7b07 	vadd.f64	d7, d5, d7
 801123c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011240:	ee37 7b03 	vadd.f64	d7, d7, d3
 8011244:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011248:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011250:	d104      	bne.n	801125c <pow+0x454>
 8011252:	4632      	mov	r2, r6
 8011254:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011258:	ec43 2b17 	vmov	d7, r2, r3
 801125c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011260:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011264:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011268:	ed8d 6b04 	vstr	d6, [sp, #16]
 801126c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011270:	b006      	add	sp, #24
 8011272:	ecbd 8b0a 	vpop	{d8-d12}
 8011276:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801127a:	f000 be8c 	b.w	8011f96 <__math_check_uflow>
 801127e:	ec43 2b10 	vmov	d0, r2, r3
 8011282:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011286:	e628      	b.n	8010eda <pow+0xd2>
 8011288:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80112a0 <pow+0x498>
 801128c:	e625      	b.n	8010eda <pow+0xd2>
 801128e:	bf00      	nop
 8011290:	00000000 	.word	0x00000000
 8011294:	7f000000 	.word	0x7f000000
 8011298:	00000000 	.word	0x00000000
 801129c:	00100000 	.word	0x00100000
	...
 80112a8:	08015f48 	.word	0x08015f48
 80112ac:	00000000 	.word	0x00000000

080112b0 <cos>:
 80112b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112b2:	eeb0 7b40 	vmov.f64	d7, d0
 80112b6:	ee17 3a90 	vmov	r3, s15
 80112ba:	4a21      	ldr	r2, [pc, #132]	; (8011340 <cos+0x90>)
 80112bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80112c0:	4293      	cmp	r3, r2
 80112c2:	dc06      	bgt.n	80112d2 <cos+0x22>
 80112c4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011338 <cos+0x88>
 80112c8:	b005      	add	sp, #20
 80112ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80112ce:	f000 bab3 	b.w	8011838 <__kernel_cos>
 80112d2:	4a1c      	ldr	r2, [pc, #112]	; (8011344 <cos+0x94>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	dd04      	ble.n	80112e2 <cos+0x32>
 80112d8:	ee30 0b40 	vsub.f64	d0, d0, d0
 80112dc:	b005      	add	sp, #20
 80112de:	f85d fb04 	ldr.w	pc, [sp], #4
 80112e2:	4668      	mov	r0, sp
 80112e4:	f000 f8bc 	bl	8011460 <__ieee754_rem_pio2>
 80112e8:	f000 0003 	and.w	r0, r0, #3
 80112ec:	2801      	cmp	r0, #1
 80112ee:	d009      	beq.n	8011304 <cos+0x54>
 80112f0:	2802      	cmp	r0, #2
 80112f2:	d010      	beq.n	8011316 <cos+0x66>
 80112f4:	b9b0      	cbnz	r0, 8011324 <cos+0x74>
 80112f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80112fa:	ed9d 0b00 	vldr	d0, [sp]
 80112fe:	f000 fa9b 	bl	8011838 <__kernel_cos>
 8011302:	e7eb      	b.n	80112dc <cos+0x2c>
 8011304:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011308:	ed9d 0b00 	vldr	d0, [sp]
 801130c:	f000 fd98 	bl	8011e40 <__kernel_sin>
 8011310:	eeb1 0b40 	vneg.f64	d0, d0
 8011314:	e7e2      	b.n	80112dc <cos+0x2c>
 8011316:	ed9d 1b02 	vldr	d1, [sp, #8]
 801131a:	ed9d 0b00 	vldr	d0, [sp]
 801131e:	f000 fa8b 	bl	8011838 <__kernel_cos>
 8011322:	e7f5      	b.n	8011310 <cos+0x60>
 8011324:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011328:	ed9d 0b00 	vldr	d0, [sp]
 801132c:	2001      	movs	r0, #1
 801132e:	f000 fd87 	bl	8011e40 <__kernel_sin>
 8011332:	e7d3      	b.n	80112dc <cos+0x2c>
 8011334:	f3af 8000 	nop.w
	...
 8011340:	3fe921fb 	.word	0x3fe921fb
 8011344:	7fefffff 	.word	0x7fefffff

08011348 <sin>:
 8011348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801134a:	eeb0 7b40 	vmov.f64	d7, d0
 801134e:	ee17 3a90 	vmov	r3, s15
 8011352:	4a21      	ldr	r2, [pc, #132]	; (80113d8 <sin+0x90>)
 8011354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011358:	4293      	cmp	r3, r2
 801135a:	dc07      	bgt.n	801136c <sin+0x24>
 801135c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80113d0 <sin+0x88>
 8011360:	2000      	movs	r0, #0
 8011362:	b005      	add	sp, #20
 8011364:	f85d eb04 	ldr.w	lr, [sp], #4
 8011368:	f000 bd6a 	b.w	8011e40 <__kernel_sin>
 801136c:	4a1b      	ldr	r2, [pc, #108]	; (80113dc <sin+0x94>)
 801136e:	4293      	cmp	r3, r2
 8011370:	dd04      	ble.n	801137c <sin+0x34>
 8011372:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011376:	b005      	add	sp, #20
 8011378:	f85d fb04 	ldr.w	pc, [sp], #4
 801137c:	4668      	mov	r0, sp
 801137e:	f000 f86f 	bl	8011460 <__ieee754_rem_pio2>
 8011382:	f000 0003 	and.w	r0, r0, #3
 8011386:	2801      	cmp	r0, #1
 8011388:	d00a      	beq.n	80113a0 <sin+0x58>
 801138a:	2802      	cmp	r0, #2
 801138c:	d00f      	beq.n	80113ae <sin+0x66>
 801138e:	b9c0      	cbnz	r0, 80113c2 <sin+0x7a>
 8011390:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011394:	ed9d 0b00 	vldr	d0, [sp]
 8011398:	2001      	movs	r0, #1
 801139a:	f000 fd51 	bl	8011e40 <__kernel_sin>
 801139e:	e7ea      	b.n	8011376 <sin+0x2e>
 80113a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113a4:	ed9d 0b00 	vldr	d0, [sp]
 80113a8:	f000 fa46 	bl	8011838 <__kernel_cos>
 80113ac:	e7e3      	b.n	8011376 <sin+0x2e>
 80113ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113b2:	ed9d 0b00 	vldr	d0, [sp]
 80113b6:	2001      	movs	r0, #1
 80113b8:	f000 fd42 	bl	8011e40 <__kernel_sin>
 80113bc:	eeb1 0b40 	vneg.f64	d0, d0
 80113c0:	e7d9      	b.n	8011376 <sin+0x2e>
 80113c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113c6:	ed9d 0b00 	vldr	d0, [sp]
 80113ca:	f000 fa35 	bl	8011838 <__kernel_cos>
 80113ce:	e7f5      	b.n	80113bc <sin+0x74>
	...
 80113d8:	3fe921fb 	.word	0x3fe921fb
 80113dc:	7fefffff 	.word	0x7fefffff

080113e0 <sqrt>:
 80113e0:	b508      	push	{r3, lr}
 80113e2:	ed2d 8b04 	vpush	{d8-d9}
 80113e6:	eeb0 8b40 	vmov.f64	d8, d0
 80113ea:	f000 f97d 	bl	80116e8 <__ieee754_sqrt>
 80113ee:	eeb4 8b48 	vcmp.f64	d8, d8
 80113f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f6:	d60c      	bvs.n	8011412 <sqrt+0x32>
 80113f8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011418 <sqrt+0x38>
 80113fc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011404:	d505      	bpl.n	8011412 <sqrt+0x32>
 8011406:	f000 ffc9 	bl	801239c <__errno>
 801140a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801140e:	2321      	movs	r3, #33	; 0x21
 8011410:	6003      	str	r3, [r0, #0]
 8011412:	ecbd 8b04 	vpop	{d8-d9}
 8011416:	bd08      	pop	{r3, pc}
	...

08011420 <atan2f>:
 8011420:	f000 b966 	b.w	80116f0 <__ieee754_atan2f>

08011424 <sqrtf>:
 8011424:	b508      	push	{r3, lr}
 8011426:	ed2d 8b02 	vpush	{d8}
 801142a:	eeb0 8a40 	vmov.f32	s16, s0
 801142e:	f000 f9fd 	bl	801182c <__ieee754_sqrtf>
 8011432:	eeb4 8a48 	vcmp.f32	s16, s16
 8011436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801143a:	d60c      	bvs.n	8011456 <sqrtf+0x32>
 801143c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801145c <sqrtf+0x38>
 8011440:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011448:	d505      	bpl.n	8011456 <sqrtf+0x32>
 801144a:	f000 ffa7 	bl	801239c <__errno>
 801144e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011452:	2321      	movs	r3, #33	; 0x21
 8011454:	6003      	str	r3, [r0, #0]
 8011456:	ecbd 8b02 	vpop	{d8}
 801145a:	bd08      	pop	{r3, pc}
 801145c:	00000000 	.word	0x00000000

08011460 <__ieee754_rem_pio2>:
 8011460:	b570      	push	{r4, r5, r6, lr}
 8011462:	eeb0 7b40 	vmov.f64	d7, d0
 8011466:	ee17 5a90 	vmov	r5, s15
 801146a:	4b99      	ldr	r3, [pc, #612]	; (80116d0 <__ieee754_rem_pio2+0x270>)
 801146c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011470:	429e      	cmp	r6, r3
 8011472:	b088      	sub	sp, #32
 8011474:	4604      	mov	r4, r0
 8011476:	dc07      	bgt.n	8011488 <__ieee754_rem_pio2+0x28>
 8011478:	2200      	movs	r2, #0
 801147a:	2300      	movs	r3, #0
 801147c:	ed84 0b00 	vstr	d0, [r4]
 8011480:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011484:	2000      	movs	r0, #0
 8011486:	e01b      	b.n	80114c0 <__ieee754_rem_pio2+0x60>
 8011488:	4b92      	ldr	r3, [pc, #584]	; (80116d4 <__ieee754_rem_pio2+0x274>)
 801148a:	429e      	cmp	r6, r3
 801148c:	dc3b      	bgt.n	8011506 <__ieee754_rem_pio2+0xa6>
 801148e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8011492:	2d00      	cmp	r5, #0
 8011494:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011690 <__ieee754_rem_pio2+0x230>
 8011498:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801149c:	dd19      	ble.n	80114d2 <__ieee754_rem_pio2+0x72>
 801149e:	ee30 7b46 	vsub.f64	d7, d0, d6
 80114a2:	429e      	cmp	r6, r3
 80114a4:	d00e      	beq.n	80114c4 <__ieee754_rem_pio2+0x64>
 80114a6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011698 <__ieee754_rem_pio2+0x238>
 80114aa:	ee37 5b46 	vsub.f64	d5, d7, d6
 80114ae:	ee37 7b45 	vsub.f64	d7, d7, d5
 80114b2:	ed84 5b00 	vstr	d5, [r4]
 80114b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80114ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80114be:	2001      	movs	r0, #1
 80114c0:	b008      	add	sp, #32
 80114c2:	bd70      	pop	{r4, r5, r6, pc}
 80114c4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80116a0 <__ieee754_rem_pio2+0x240>
 80114c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80114cc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80116a8 <__ieee754_rem_pio2+0x248>
 80114d0:	e7eb      	b.n	80114aa <__ieee754_rem_pio2+0x4a>
 80114d2:	429e      	cmp	r6, r3
 80114d4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80114d8:	d00e      	beq.n	80114f8 <__ieee754_rem_pio2+0x98>
 80114da:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011698 <__ieee754_rem_pio2+0x238>
 80114de:	ee37 5b06 	vadd.f64	d5, d7, d6
 80114e2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80114e6:	ed84 5b00 	vstr	d5, [r4]
 80114ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80114ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80114f6:	e7e3      	b.n	80114c0 <__ieee754_rem_pio2+0x60>
 80114f8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80116a0 <__ieee754_rem_pio2+0x240>
 80114fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011500:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80116a8 <__ieee754_rem_pio2+0x248>
 8011504:	e7eb      	b.n	80114de <__ieee754_rem_pio2+0x7e>
 8011506:	4b74      	ldr	r3, [pc, #464]	; (80116d8 <__ieee754_rem_pio2+0x278>)
 8011508:	429e      	cmp	r6, r3
 801150a:	dc70      	bgt.n	80115ee <__ieee754_rem_pio2+0x18e>
 801150c:	f000 fd60 	bl	8011fd0 <fabs>
 8011510:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011514:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80116b0 <__ieee754_rem_pio2+0x250>
 8011518:	eea0 7b06 	vfma.f64	d7, d0, d6
 801151c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011520:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011524:	ee17 0a90 	vmov	r0, s15
 8011528:	eeb1 4b45 	vneg.f64	d4, d5
 801152c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011690 <__ieee754_rem_pio2+0x230>
 8011530:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011534:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011698 <__ieee754_rem_pio2+0x238>
 8011538:	281f      	cmp	r0, #31
 801153a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801153e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011542:	dc08      	bgt.n	8011556 <__ieee754_rem_pio2+0xf6>
 8011544:	4b65      	ldr	r3, [pc, #404]	; (80116dc <__ieee754_rem_pio2+0x27c>)
 8011546:	1e42      	subs	r2, r0, #1
 8011548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801154c:	42b3      	cmp	r3, r6
 801154e:	d002      	beq.n	8011556 <__ieee754_rem_pio2+0xf6>
 8011550:	ed84 6b00 	vstr	d6, [r4]
 8011554:	e026      	b.n	80115a4 <__ieee754_rem_pio2+0x144>
 8011556:	ee16 3a90 	vmov	r3, s13
 801155a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801155e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011562:	2b10      	cmp	r3, #16
 8011564:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011568:	ddf2      	ble.n	8011550 <__ieee754_rem_pio2+0xf0>
 801156a:	eeb0 6b40 	vmov.f64	d6, d0
 801156e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80116a0 <__ieee754_rem_pio2+0x240>
 8011572:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80116a8 <__ieee754_rem_pio2+0x248>
 8011576:	eea4 6b07 	vfma.f64	d6, d4, d7
 801157a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801157e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8011582:	eeb0 7b40 	vmov.f64	d7, d0
 8011586:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801158a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801158e:	ee13 3a90 	vmov	r3, s7
 8011592:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	2b31      	cmp	r3, #49	; 0x31
 801159a:	dc17      	bgt.n	80115cc <__ieee754_rem_pio2+0x16c>
 801159c:	eeb0 0b46 	vmov.f64	d0, d6
 80115a0:	ed84 3b00 	vstr	d3, [r4]
 80115a4:	ed94 6b00 	vldr	d6, [r4]
 80115a8:	2d00      	cmp	r5, #0
 80115aa:	ee30 0b46 	vsub.f64	d0, d0, d6
 80115ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 80115b2:	ed84 0b02 	vstr	d0, [r4, #8]
 80115b6:	da83      	bge.n	80114c0 <__ieee754_rem_pio2+0x60>
 80115b8:	eeb1 6b46 	vneg.f64	d6, d6
 80115bc:	eeb1 0b40 	vneg.f64	d0, d0
 80115c0:	ed84 6b00 	vstr	d6, [r4]
 80115c4:	ed84 0b02 	vstr	d0, [r4, #8]
 80115c8:	4240      	negs	r0, r0
 80115ca:	e779      	b.n	80114c0 <__ieee754_rem_pio2+0x60>
 80115cc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80116b8 <__ieee754_rem_pio2+0x258>
 80115d0:	eeb0 0b46 	vmov.f64	d0, d6
 80115d4:	eea4 0b03 	vfma.f64	d0, d4, d3
 80115d8:	ee36 7b40 	vsub.f64	d7, d6, d0
 80115dc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80116c0 <__ieee754_rem_pio2+0x260>
 80115e0:	eea4 7b03 	vfma.f64	d7, d4, d3
 80115e4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80115e8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80115ec:	e7b0      	b.n	8011550 <__ieee754_rem_pio2+0xf0>
 80115ee:	4b3c      	ldr	r3, [pc, #240]	; (80116e0 <__ieee754_rem_pio2+0x280>)
 80115f0:	429e      	cmp	r6, r3
 80115f2:	dd06      	ble.n	8011602 <__ieee754_rem_pio2+0x1a2>
 80115f4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80115f8:	ed80 7b02 	vstr	d7, [r0, #8]
 80115fc:	ed80 7b00 	vstr	d7, [r0]
 8011600:	e740      	b.n	8011484 <__ieee754_rem_pio2+0x24>
 8011602:	1532      	asrs	r2, r6, #20
 8011604:	ee10 0a10 	vmov	r0, s0
 8011608:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801160c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011610:	ec41 0b17 	vmov	d7, r0, r1
 8011614:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011618:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80116c8 <__ieee754_rem_pio2+0x268>
 801161c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011620:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011624:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011628:	ee27 7b05 	vmul.f64	d7, d7, d5
 801162c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011630:	a902      	add	r1, sp, #8
 8011632:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011636:	ee37 7b46 	vsub.f64	d7, d7, d6
 801163a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801163e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011642:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011646:	2603      	movs	r6, #3
 8011648:	4608      	mov	r0, r1
 801164a:	ed91 7b04 	vldr	d7, [r1, #16]
 801164e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011656:	4633      	mov	r3, r6
 8011658:	f1a1 0108 	sub.w	r1, r1, #8
 801165c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011660:	d0f3      	beq.n	801164a <__ieee754_rem_pio2+0x1ea>
 8011662:	4920      	ldr	r1, [pc, #128]	; (80116e4 <__ieee754_rem_pio2+0x284>)
 8011664:	9101      	str	r1, [sp, #4]
 8011666:	2102      	movs	r1, #2
 8011668:	9100      	str	r1, [sp, #0]
 801166a:	4621      	mov	r1, r4
 801166c:	f000 f950 	bl	8011910 <__kernel_rem_pio2>
 8011670:	2d00      	cmp	r5, #0
 8011672:	f6bf af25 	bge.w	80114c0 <__ieee754_rem_pio2+0x60>
 8011676:	ed94 7b00 	vldr	d7, [r4]
 801167a:	eeb1 7b47 	vneg.f64	d7, d7
 801167e:	ed84 7b00 	vstr	d7, [r4]
 8011682:	ed94 7b02 	vldr	d7, [r4, #8]
 8011686:	eeb1 7b47 	vneg.f64	d7, d7
 801168a:	ed84 7b02 	vstr	d7, [r4, #8]
 801168e:	e79b      	b.n	80115c8 <__ieee754_rem_pio2+0x168>
 8011690:	54400000 	.word	0x54400000
 8011694:	3ff921fb 	.word	0x3ff921fb
 8011698:	1a626331 	.word	0x1a626331
 801169c:	3dd0b461 	.word	0x3dd0b461
 80116a0:	1a600000 	.word	0x1a600000
 80116a4:	3dd0b461 	.word	0x3dd0b461
 80116a8:	2e037073 	.word	0x2e037073
 80116ac:	3ba3198a 	.word	0x3ba3198a
 80116b0:	6dc9c883 	.word	0x6dc9c883
 80116b4:	3fe45f30 	.word	0x3fe45f30
 80116b8:	2e000000 	.word	0x2e000000
 80116bc:	3ba3198a 	.word	0x3ba3198a
 80116c0:	252049c1 	.word	0x252049c1
 80116c4:	397b839a 	.word	0x397b839a
 80116c8:	00000000 	.word	0x00000000
 80116cc:	41700000 	.word	0x41700000
 80116d0:	3fe921fb 	.word	0x3fe921fb
 80116d4:	4002d97b 	.word	0x4002d97b
 80116d8:	413921fb 	.word	0x413921fb
 80116dc:	08015da8 	.word	0x08015da8
 80116e0:	7fefffff 	.word	0x7fefffff
 80116e4:	08015e28 	.word	0x08015e28

080116e8 <__ieee754_sqrt>:
 80116e8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80116ec:	4770      	bx	lr
	...

080116f0 <__ieee754_atan2f>:
 80116f0:	ee10 2a90 	vmov	r2, s1
 80116f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80116f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80116fc:	b510      	push	{r4, lr}
 80116fe:	eef0 7a40 	vmov.f32	s15, s0
 8011702:	dc06      	bgt.n	8011712 <__ieee754_atan2f+0x22>
 8011704:	ee10 0a10 	vmov	r0, s0
 8011708:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801170c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011710:	dd04      	ble.n	801171c <__ieee754_atan2f+0x2c>
 8011712:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011716:	eeb0 0a67 	vmov.f32	s0, s15
 801171a:	bd10      	pop	{r4, pc}
 801171c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011720:	d103      	bne.n	801172a <__ieee754_atan2f+0x3a>
 8011722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011726:	f000 bd5d 	b.w	80121e4 <atanf>
 801172a:	1794      	asrs	r4, r2, #30
 801172c:	f004 0402 	and.w	r4, r4, #2
 8011730:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011734:	b93b      	cbnz	r3, 8011746 <__ieee754_atan2f+0x56>
 8011736:	2c02      	cmp	r4, #2
 8011738:	d05c      	beq.n	80117f4 <__ieee754_atan2f+0x104>
 801173a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011808 <__ieee754_atan2f+0x118>
 801173e:	2c03      	cmp	r4, #3
 8011740:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8011744:	e7e7      	b.n	8011716 <__ieee754_atan2f+0x26>
 8011746:	b939      	cbnz	r1, 8011758 <__ieee754_atan2f+0x68>
 8011748:	eddf 7a30 	vldr	s15, [pc, #192]	; 801180c <__ieee754_atan2f+0x11c>
 801174c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8011810 <__ieee754_atan2f+0x120>
 8011750:	2800      	cmp	r0, #0
 8011752:	fe67 7a80 	vselge.f32	s15, s15, s0
 8011756:	e7de      	b.n	8011716 <__ieee754_atan2f+0x26>
 8011758:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801175c:	d110      	bne.n	8011780 <__ieee754_atan2f+0x90>
 801175e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011762:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011766:	d107      	bne.n	8011778 <__ieee754_atan2f+0x88>
 8011768:	2c02      	cmp	r4, #2
 801176a:	d846      	bhi.n	80117fa <__ieee754_atan2f+0x10a>
 801176c:	4b29      	ldr	r3, [pc, #164]	; (8011814 <__ieee754_atan2f+0x124>)
 801176e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011772:	edd4 7a00 	vldr	s15, [r4]
 8011776:	e7ce      	b.n	8011716 <__ieee754_atan2f+0x26>
 8011778:	2c02      	cmp	r4, #2
 801177a:	d841      	bhi.n	8011800 <__ieee754_atan2f+0x110>
 801177c:	4b26      	ldr	r3, [pc, #152]	; (8011818 <__ieee754_atan2f+0x128>)
 801177e:	e7f6      	b.n	801176e <__ieee754_atan2f+0x7e>
 8011780:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011784:	d0e0      	beq.n	8011748 <__ieee754_atan2f+0x58>
 8011786:	1a5b      	subs	r3, r3, r1
 8011788:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801178c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011790:	da1a      	bge.n	80117c8 <__ieee754_atan2f+0xd8>
 8011792:	2a00      	cmp	r2, #0
 8011794:	da01      	bge.n	801179a <__ieee754_atan2f+0xaa>
 8011796:	313c      	adds	r1, #60	; 0x3c
 8011798:	db19      	blt.n	80117ce <__ieee754_atan2f+0xde>
 801179a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801179e:	f000 fdf5 	bl	801238c <fabsf>
 80117a2:	f000 fd1f 	bl	80121e4 <atanf>
 80117a6:	eef0 7a40 	vmov.f32	s15, s0
 80117aa:	2c01      	cmp	r4, #1
 80117ac:	d012      	beq.n	80117d4 <__ieee754_atan2f+0xe4>
 80117ae:	2c02      	cmp	r4, #2
 80117b0:	d017      	beq.n	80117e2 <__ieee754_atan2f+0xf2>
 80117b2:	2c00      	cmp	r4, #0
 80117b4:	d0af      	beq.n	8011716 <__ieee754_atan2f+0x26>
 80117b6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801181c <__ieee754_atan2f+0x12c>
 80117ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80117be:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011820 <__ieee754_atan2f+0x130>
 80117c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80117c6:	e7a6      	b.n	8011716 <__ieee754_atan2f+0x26>
 80117c8:	eddf 7a10 	vldr	s15, [pc, #64]	; 801180c <__ieee754_atan2f+0x11c>
 80117cc:	e7ed      	b.n	80117aa <__ieee754_atan2f+0xba>
 80117ce:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011824 <__ieee754_atan2f+0x134>
 80117d2:	e7ea      	b.n	80117aa <__ieee754_atan2f+0xba>
 80117d4:	ee17 3a90 	vmov	r3, s15
 80117d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80117dc:	ee07 3a90 	vmov	s15, r3
 80117e0:	e799      	b.n	8011716 <__ieee754_atan2f+0x26>
 80117e2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801181c <__ieee754_atan2f+0x12c>
 80117e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80117ea:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8011820 <__ieee754_atan2f+0x130>
 80117ee:	ee70 7a67 	vsub.f32	s15, s0, s15
 80117f2:	e790      	b.n	8011716 <__ieee754_atan2f+0x26>
 80117f4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011820 <__ieee754_atan2f+0x130>
 80117f8:	e78d      	b.n	8011716 <__ieee754_atan2f+0x26>
 80117fa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011828 <__ieee754_atan2f+0x138>
 80117fe:	e78a      	b.n	8011716 <__ieee754_atan2f+0x26>
 8011800:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011824 <__ieee754_atan2f+0x134>
 8011804:	e787      	b.n	8011716 <__ieee754_atan2f+0x26>
 8011806:	bf00      	nop
 8011808:	c0490fdb 	.word	0xc0490fdb
 801180c:	3fc90fdb 	.word	0x3fc90fdb
 8011810:	bfc90fdb 	.word	0xbfc90fdb
 8011814:	08015f30 	.word	0x08015f30
 8011818:	08015f3c 	.word	0x08015f3c
 801181c:	33bbbd2e 	.word	0x33bbbd2e
 8011820:	40490fdb 	.word	0x40490fdb
 8011824:	00000000 	.word	0x00000000
 8011828:	3f490fdb 	.word	0x3f490fdb

0801182c <__ieee754_sqrtf>:
 801182c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011830:	4770      	bx	lr
 8011832:	0000      	movs	r0, r0
 8011834:	0000      	movs	r0, r0
	...

08011838 <__kernel_cos>:
 8011838:	ee10 1a90 	vmov	r1, s1
 801183c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011844:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011848:	da05      	bge.n	8011856 <__kernel_cos+0x1e>
 801184a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801184e:	ee17 3a90 	vmov	r3, s15
 8011852:	2b00      	cmp	r3, #0
 8011854:	d03d      	beq.n	80118d2 <__kernel_cos+0x9a>
 8011856:	ee20 3b00 	vmul.f64	d3, d0, d0
 801185a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80118d8 <__kernel_cos+0xa0>
 801185e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80118e0 <__kernel_cos+0xa8>
 8011862:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011866:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80118e8 <__kernel_cos+0xb0>
 801186a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801186e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80118f0 <__kernel_cos+0xb8>
 8011872:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011876:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80118f8 <__kernel_cos+0xc0>
 801187a:	4b23      	ldr	r3, [pc, #140]	; (8011908 <__kernel_cos+0xd0>)
 801187c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011880:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011900 <__kernel_cos+0xc8>
 8011884:	4299      	cmp	r1, r3
 8011886:	eea7 6b03 	vfma.f64	d6, d7, d3
 801188a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801188e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011892:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011896:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801189a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801189e:	dc04      	bgt.n	80118aa <__kernel_cos+0x72>
 80118a0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80118a4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80118a8:	4770      	bx	lr
 80118aa:	4b18      	ldr	r3, [pc, #96]	; (801190c <__kernel_cos+0xd4>)
 80118ac:	4299      	cmp	r1, r3
 80118ae:	dc0d      	bgt.n	80118cc <__kernel_cos+0x94>
 80118b0:	2200      	movs	r2, #0
 80118b2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80118b6:	ec43 2b15 	vmov	d5, r2, r3
 80118ba:	ee34 0b45 	vsub.f64	d0, d4, d5
 80118be:	ee37 7b45 	vsub.f64	d7, d7, d5
 80118c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118c6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80118ca:	4770      	bx	lr
 80118cc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80118d0:	e7f3      	b.n	80118ba <__kernel_cos+0x82>
 80118d2:	eeb0 0b44 	vmov.f64	d0, d4
 80118d6:	4770      	bx	lr
 80118d8:	be8838d4 	.word	0xbe8838d4
 80118dc:	bda8fae9 	.word	0xbda8fae9
 80118e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80118e4:	3e21ee9e 	.word	0x3e21ee9e
 80118e8:	809c52ad 	.word	0x809c52ad
 80118ec:	be927e4f 	.word	0xbe927e4f
 80118f0:	19cb1590 	.word	0x19cb1590
 80118f4:	3efa01a0 	.word	0x3efa01a0
 80118f8:	16c15177 	.word	0x16c15177
 80118fc:	bf56c16c 	.word	0xbf56c16c
 8011900:	5555554c 	.word	0x5555554c
 8011904:	3fa55555 	.word	0x3fa55555
 8011908:	3fd33332 	.word	0x3fd33332
 801190c:	3fe90000 	.word	0x3fe90000

08011910 <__kernel_rem_pio2>:
 8011910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011914:	ed2d 8b06 	vpush	{d8-d10}
 8011918:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801191c:	460f      	mov	r7, r1
 801191e:	9002      	str	r0, [sp, #8]
 8011920:	49c5      	ldr	r1, [pc, #788]	; (8011c38 <__kernel_rem_pio2+0x328>)
 8011922:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011924:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011928:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801192c:	9301      	str	r3, [sp, #4]
 801192e:	f112 0f14 	cmn.w	r2, #20
 8011932:	bfa8      	it	ge
 8011934:	2018      	movge	r0, #24
 8011936:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801193a:	bfb8      	it	lt
 801193c:	2000      	movlt	r0, #0
 801193e:	f06f 0417 	mvn.w	r4, #23
 8011942:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8011c20 <__kernel_rem_pio2+0x310>
 8011946:	bfa4      	itt	ge
 8011948:	f1a2 0a03 	subge.w	sl, r2, #3
 801194c:	fb9a f0f0 	sdivge	r0, sl, r0
 8011950:	fb00 4404 	mla	r4, r0, r4, r4
 8011954:	1a46      	subs	r6, r0, r1
 8011956:	4414      	add	r4, r2
 8011958:	eb09 0c01 	add.w	ip, r9, r1
 801195c:	ad1a      	add	r5, sp, #104	; 0x68
 801195e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011962:	2200      	movs	r2, #0
 8011964:	4562      	cmp	r2, ip
 8011966:	dd10      	ble.n	801198a <__kernel_rem_pio2+0x7a>
 8011968:	9a01      	ldr	r2, [sp, #4]
 801196a:	ab1a      	add	r3, sp, #104	; 0x68
 801196c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011970:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011974:	f04f 0c00 	mov.w	ip, #0
 8011978:	45cc      	cmp	ip, r9
 801197a:	dc26      	bgt.n	80119ca <__kernel_rem_pio2+0xba>
 801197c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8011c20 <__kernel_rem_pio2+0x310>
 8011980:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011984:	4616      	mov	r6, r2
 8011986:	2500      	movs	r5, #0
 8011988:	e015      	b.n	80119b6 <__kernel_rem_pio2+0xa6>
 801198a:	42d6      	cmn	r6, r2
 801198c:	d409      	bmi.n	80119a2 <__kernel_rem_pio2+0x92>
 801198e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011992:	ee07 3a90 	vmov	s15, r3
 8011996:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801199a:	eca5 7b02 	vstmia	r5!, {d7}
 801199e:	3201      	adds	r2, #1
 80119a0:	e7e0      	b.n	8011964 <__kernel_rem_pio2+0x54>
 80119a2:	eeb0 7b46 	vmov.f64	d7, d6
 80119a6:	e7f8      	b.n	801199a <__kernel_rem_pio2+0x8a>
 80119a8:	ecb8 5b02 	vldmia	r8!, {d5}
 80119ac:	ed96 6b00 	vldr	d6, [r6]
 80119b0:	3501      	adds	r5, #1
 80119b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80119b6:	428d      	cmp	r5, r1
 80119b8:	f1a6 0608 	sub.w	r6, r6, #8
 80119bc:	ddf4      	ble.n	80119a8 <__kernel_rem_pio2+0x98>
 80119be:	ecaa 7b02 	vstmia	sl!, {d7}
 80119c2:	f10c 0c01 	add.w	ip, ip, #1
 80119c6:	3208      	adds	r2, #8
 80119c8:	e7d6      	b.n	8011978 <__kernel_rem_pio2+0x68>
 80119ca:	ab06      	add	r3, sp, #24
 80119cc:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011c28 <__kernel_rem_pio2+0x318>
 80119d0:	ed9f ab97 	vldr	d10, [pc, #604]	; 8011c30 <__kernel_rem_pio2+0x320>
 80119d4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80119d8:	9303      	str	r3, [sp, #12]
 80119da:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80119de:	464d      	mov	r5, r9
 80119e0:	00eb      	lsls	r3, r5, #3
 80119e2:	9304      	str	r3, [sp, #16]
 80119e4:	ab92      	add	r3, sp, #584	; 0x248
 80119e6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80119ea:	f10d 0b18 	add.w	fp, sp, #24
 80119ee:	ab6a      	add	r3, sp, #424	; 0x1a8
 80119f0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80119f4:	465e      	mov	r6, fp
 80119f6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80119fa:	4628      	mov	r0, r5
 80119fc:	2800      	cmp	r0, #0
 80119fe:	f1a2 0208 	sub.w	r2, r2, #8
 8011a02:	dc4c      	bgt.n	8011a9e <__kernel_rem_pio2+0x18e>
 8011a04:	4620      	mov	r0, r4
 8011a06:	9105      	str	r1, [sp, #20]
 8011a08:	f000 fb62 	bl	80120d0 <scalbn>
 8011a0c:	eeb0 8b40 	vmov.f64	d8, d0
 8011a10:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011a14:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011a18:	f000 fae6 	bl	8011fe8 <floor>
 8011a1c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011a20:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011a24:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011a28:	2c00      	cmp	r4, #0
 8011a2a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011a2e:	ee17 8a90 	vmov	r8, s15
 8011a32:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011a36:	9905      	ldr	r1, [sp, #20]
 8011a38:	dd43      	ble.n	8011ac2 <__kernel_rem_pio2+0x1b2>
 8011a3a:	1e68      	subs	r0, r5, #1
 8011a3c:	ab06      	add	r3, sp, #24
 8011a3e:	f1c4 0c18 	rsb	ip, r4, #24
 8011a42:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011a46:	fa46 f20c 	asr.w	r2, r6, ip
 8011a4a:	4490      	add	r8, r2
 8011a4c:	fa02 f20c 	lsl.w	r2, r2, ip
 8011a50:	1ab6      	subs	r6, r6, r2
 8011a52:	f1c4 0217 	rsb	r2, r4, #23
 8011a56:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011a5a:	4116      	asrs	r6, r2
 8011a5c:	2e00      	cmp	r6, #0
 8011a5e:	dd3f      	ble.n	8011ae0 <__kernel_rem_pio2+0x1d0>
 8011a60:	f04f 0c00 	mov.w	ip, #0
 8011a64:	f108 0801 	add.w	r8, r8, #1
 8011a68:	4660      	mov	r0, ip
 8011a6a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011a6e:	4565      	cmp	r5, ip
 8011a70:	dc6e      	bgt.n	8011b50 <__kernel_rem_pio2+0x240>
 8011a72:	2c00      	cmp	r4, #0
 8011a74:	dd04      	ble.n	8011a80 <__kernel_rem_pio2+0x170>
 8011a76:	2c01      	cmp	r4, #1
 8011a78:	d07f      	beq.n	8011b7a <__kernel_rem_pio2+0x26a>
 8011a7a:	2c02      	cmp	r4, #2
 8011a7c:	f000 8087 	beq.w	8011b8e <__kernel_rem_pio2+0x27e>
 8011a80:	2e02      	cmp	r6, #2
 8011a82:	d12d      	bne.n	8011ae0 <__kernel_rem_pio2+0x1d0>
 8011a84:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011a88:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011a8c:	b340      	cbz	r0, 8011ae0 <__kernel_rem_pio2+0x1d0>
 8011a8e:	4620      	mov	r0, r4
 8011a90:	9105      	str	r1, [sp, #20]
 8011a92:	f000 fb1d 	bl	80120d0 <scalbn>
 8011a96:	9905      	ldr	r1, [sp, #20]
 8011a98:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011a9c:	e020      	b.n	8011ae0 <__kernel_rem_pio2+0x1d0>
 8011a9e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011aa2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011aa6:	3801      	subs	r0, #1
 8011aa8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011aac:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011ab0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011ab4:	eca6 0a01 	vstmia	r6!, {s0}
 8011ab8:	ed92 0b00 	vldr	d0, [r2]
 8011abc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011ac0:	e79c      	b.n	80119fc <__kernel_rem_pio2+0xec>
 8011ac2:	d105      	bne.n	8011ad0 <__kernel_rem_pio2+0x1c0>
 8011ac4:	1e6a      	subs	r2, r5, #1
 8011ac6:	ab06      	add	r3, sp, #24
 8011ac8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011acc:	15f6      	asrs	r6, r6, #23
 8011ace:	e7c5      	b.n	8011a5c <__kernel_rem_pio2+0x14c>
 8011ad0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011ad4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011adc:	da36      	bge.n	8011b4c <__kernel_rem_pio2+0x23c>
 8011ade:	2600      	movs	r6, #0
 8011ae0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae8:	f040 80aa 	bne.w	8011c40 <__kernel_rem_pio2+0x330>
 8011aec:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8011af0:	4658      	mov	r0, fp
 8011af2:	2200      	movs	r2, #0
 8011af4:	4548      	cmp	r0, r9
 8011af6:	da52      	bge.n	8011b9e <__kernel_rem_pio2+0x28e>
 8011af8:	2a00      	cmp	r2, #0
 8011afa:	f000 8081 	beq.w	8011c00 <__kernel_rem_pio2+0x2f0>
 8011afe:	ab06      	add	r3, sp, #24
 8011b00:	3c18      	subs	r4, #24
 8011b02:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f000 8087 	beq.w	8011c1a <__kernel_rem_pio2+0x30a>
 8011b0c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011b10:	4620      	mov	r0, r4
 8011b12:	f000 fadd 	bl	80120d0 <scalbn>
 8011b16:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011b1a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8011c28 <__kernel_rem_pio2+0x318>
 8011b1e:	a96a      	add	r1, sp, #424	; 0x1a8
 8011b20:	f103 0208 	add.w	r2, r3, #8
 8011b24:	1888      	adds	r0, r1, r2
 8011b26:	4659      	mov	r1, fp
 8011b28:	2900      	cmp	r1, #0
 8011b2a:	f280 80b7 	bge.w	8011c9c <__kernel_rem_pio2+0x38c>
 8011b2e:	4659      	mov	r1, fp
 8011b30:	2900      	cmp	r1, #0
 8011b32:	f2c0 80d5 	blt.w	8011ce0 <__kernel_rem_pio2+0x3d0>
 8011b36:	a86a      	add	r0, sp, #424	; 0x1a8
 8011b38:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8011b3c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8011c20 <__kernel_rem_pio2+0x310>
 8011b40:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011c3c <__kernel_rem_pio2+0x32c>
 8011b44:	2400      	movs	r4, #0
 8011b46:	ebab 0001 	sub.w	r0, fp, r1
 8011b4a:	e0be      	b.n	8011cca <__kernel_rem_pio2+0x3ba>
 8011b4c:	2602      	movs	r6, #2
 8011b4e:	e787      	b.n	8011a60 <__kernel_rem_pio2+0x150>
 8011b50:	f8db 2000 	ldr.w	r2, [fp]
 8011b54:	b958      	cbnz	r0, 8011b6e <__kernel_rem_pio2+0x25e>
 8011b56:	b122      	cbz	r2, 8011b62 <__kernel_rem_pio2+0x252>
 8011b58:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011b5c:	f8cb 2000 	str.w	r2, [fp]
 8011b60:	2201      	movs	r2, #1
 8011b62:	f10c 0c01 	add.w	ip, ip, #1
 8011b66:	f10b 0b04 	add.w	fp, fp, #4
 8011b6a:	4610      	mov	r0, r2
 8011b6c:	e77f      	b.n	8011a6e <__kernel_rem_pio2+0x15e>
 8011b6e:	ebae 0202 	sub.w	r2, lr, r2
 8011b72:	f8cb 2000 	str.w	r2, [fp]
 8011b76:	4602      	mov	r2, r0
 8011b78:	e7f3      	b.n	8011b62 <__kernel_rem_pio2+0x252>
 8011b7a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011b7e:	ab06      	add	r3, sp, #24
 8011b80:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011b84:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011b88:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8011b8c:	e778      	b.n	8011a80 <__kernel_rem_pio2+0x170>
 8011b8e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011b92:	ab06      	add	r3, sp, #24
 8011b94:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011b98:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8011b9c:	e7f4      	b.n	8011b88 <__kernel_rem_pio2+0x278>
 8011b9e:	ab06      	add	r3, sp, #24
 8011ba0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011ba4:	3801      	subs	r0, #1
 8011ba6:	431a      	orrs	r2, r3
 8011ba8:	e7a4      	b.n	8011af4 <__kernel_rem_pio2+0x1e4>
 8011baa:	f10c 0c01 	add.w	ip, ip, #1
 8011bae:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011bb2:	2800      	cmp	r0, #0
 8011bb4:	d0f9      	beq.n	8011baa <__kernel_rem_pio2+0x29a>
 8011bb6:	9b04      	ldr	r3, [sp, #16]
 8011bb8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011bbc:	eb0d 0203 	add.w	r2, sp, r3
 8011bc0:	9b01      	ldr	r3, [sp, #4]
 8011bc2:	18e8      	adds	r0, r5, r3
 8011bc4:	ab1a      	add	r3, sp, #104	; 0x68
 8011bc6:	1c6e      	adds	r6, r5, #1
 8011bc8:	3a98      	subs	r2, #152	; 0x98
 8011bca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011bce:	4465      	add	r5, ip
 8011bd0:	42b5      	cmp	r5, r6
 8011bd2:	f6ff af05 	blt.w	80119e0 <__kernel_rem_pio2+0xd0>
 8011bd6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8011bda:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011bde:	ee07 3a90 	vmov	s15, r3
 8011be2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011be6:	f04f 0c00 	mov.w	ip, #0
 8011bea:	eca0 7b02 	vstmia	r0!, {d7}
 8011bee:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011c20 <__kernel_rem_pio2+0x310>
 8011bf2:	4680      	mov	r8, r0
 8011bf4:	458c      	cmp	ip, r1
 8011bf6:	dd07      	ble.n	8011c08 <__kernel_rem_pio2+0x2f8>
 8011bf8:	eca2 7b02 	vstmia	r2!, {d7}
 8011bfc:	3601      	adds	r6, #1
 8011bfe:	e7e7      	b.n	8011bd0 <__kernel_rem_pio2+0x2c0>
 8011c00:	9a03      	ldr	r2, [sp, #12]
 8011c02:	f04f 0c01 	mov.w	ip, #1
 8011c06:	e7d2      	b.n	8011bae <__kernel_rem_pio2+0x29e>
 8011c08:	ecbe 5b02 	vldmia	lr!, {d5}
 8011c0c:	ed38 6b02 	vldmdb	r8!, {d6}
 8011c10:	f10c 0c01 	add.w	ip, ip, #1
 8011c14:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011c18:	e7ec      	b.n	8011bf4 <__kernel_rem_pio2+0x2e4>
 8011c1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011c1e:	e76e      	b.n	8011afe <__kernel_rem_pio2+0x1ee>
	...
 8011c2c:	3e700000 	.word	0x3e700000
 8011c30:	00000000 	.word	0x00000000
 8011c34:	41700000 	.word	0x41700000
 8011c38:	080167f8 	.word	0x080167f8
 8011c3c:	080167b8 	.word	0x080167b8
 8011c40:	4260      	negs	r0, r4
 8011c42:	eeb0 0b48 	vmov.f64	d0, d8
 8011c46:	f000 fa43 	bl	80120d0 <scalbn>
 8011c4a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011e28 <__kernel_rem_pio2+0x518>
 8011c4e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c56:	db18      	blt.n	8011c8a <__kernel_rem_pio2+0x37a>
 8011c58:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011e30 <__kernel_rem_pio2+0x520>
 8011c5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011c60:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011c64:	aa06      	add	r2, sp, #24
 8011c66:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011c6a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011c6e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011c72:	f105 0b01 	add.w	fp, r5, #1
 8011c76:	ee10 3a10 	vmov	r3, s0
 8011c7a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011c7e:	ee17 3a10 	vmov	r3, s14
 8011c82:	3418      	adds	r4, #24
 8011c84:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011c88:	e740      	b.n	8011b0c <__kernel_rem_pio2+0x1fc>
 8011c8a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011c8e:	aa06      	add	r2, sp, #24
 8011c90:	ee10 3a10 	vmov	r3, s0
 8011c94:	46ab      	mov	fp, r5
 8011c96:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011c9a:	e737      	b.n	8011b0c <__kernel_rem_pio2+0x1fc>
 8011c9c:	ac06      	add	r4, sp, #24
 8011c9e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8011ca2:	9401      	str	r4, [sp, #4]
 8011ca4:	ee07 4a90 	vmov	s15, r4
 8011ca8:	3901      	subs	r1, #1
 8011caa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011cae:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011cb2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011cb6:	ed20 7b02 	vstmdb	r0!, {d7}
 8011cba:	e735      	b.n	8011b28 <__kernel_rem_pio2+0x218>
 8011cbc:	ecbc 5b02 	vldmia	ip!, {d5}
 8011cc0:	ecb5 6b02 	vldmia	r5!, {d6}
 8011cc4:	3401      	adds	r4, #1
 8011cc6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011cca:	454c      	cmp	r4, r9
 8011ccc:	dc01      	bgt.n	8011cd2 <__kernel_rem_pio2+0x3c2>
 8011cce:	4284      	cmp	r4, r0
 8011cd0:	ddf4      	ble.n	8011cbc <__kernel_rem_pio2+0x3ac>
 8011cd2:	ac42      	add	r4, sp, #264	; 0x108
 8011cd4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8011cd8:	ed80 7b00 	vstr	d7, [r0]
 8011cdc:	3901      	subs	r1, #1
 8011cde:	e727      	b.n	8011b30 <__kernel_rem_pio2+0x220>
 8011ce0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8011ce2:	2902      	cmp	r1, #2
 8011ce4:	dc0a      	bgt.n	8011cfc <__kernel_rem_pio2+0x3ec>
 8011ce6:	2900      	cmp	r1, #0
 8011ce8:	dc2c      	bgt.n	8011d44 <__kernel_rem_pio2+0x434>
 8011cea:	d045      	beq.n	8011d78 <__kernel_rem_pio2+0x468>
 8011cec:	f008 0007 	and.w	r0, r8, #7
 8011cf0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8011cf4:	ecbd 8b06 	vpop	{d8-d10}
 8011cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cfc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011cfe:	2a03      	cmp	r2, #3
 8011d00:	d1f4      	bne.n	8011cec <__kernel_rem_pio2+0x3dc>
 8011d02:	aa42      	add	r2, sp, #264	; 0x108
 8011d04:	4413      	add	r3, r2
 8011d06:	461a      	mov	r2, r3
 8011d08:	4619      	mov	r1, r3
 8011d0a:	4658      	mov	r0, fp
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	f1a1 0108 	sub.w	r1, r1, #8
 8011d12:	dc54      	bgt.n	8011dbe <__kernel_rem_pio2+0x4ae>
 8011d14:	4659      	mov	r1, fp
 8011d16:	2901      	cmp	r1, #1
 8011d18:	f1a2 0208 	sub.w	r2, r2, #8
 8011d1c:	dc5f      	bgt.n	8011dde <__kernel_rem_pio2+0x4ce>
 8011d1e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011e38 <__kernel_rem_pio2+0x528>
 8011d22:	3308      	adds	r3, #8
 8011d24:	f1bb 0f01 	cmp.w	fp, #1
 8011d28:	dc69      	bgt.n	8011dfe <__kernel_rem_pio2+0x4ee>
 8011d2a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8011d2e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011d32:	2e00      	cmp	r6, #0
 8011d34:	d16a      	bne.n	8011e0c <__kernel_rem_pio2+0x4fc>
 8011d36:	ed87 5b00 	vstr	d5, [r7]
 8011d3a:	ed87 6b02 	vstr	d6, [r7, #8]
 8011d3e:	ed87 7b04 	vstr	d7, [r7, #16]
 8011d42:	e7d3      	b.n	8011cec <__kernel_rem_pio2+0x3dc>
 8011d44:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011e38 <__kernel_rem_pio2+0x528>
 8011d48:	ab42      	add	r3, sp, #264	; 0x108
 8011d4a:	441a      	add	r2, r3
 8011d4c:	465b      	mov	r3, fp
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	da26      	bge.n	8011da0 <__kernel_rem_pio2+0x490>
 8011d52:	b35e      	cbz	r6, 8011dac <__kernel_rem_pio2+0x49c>
 8011d54:	eeb1 7b46 	vneg.f64	d7, d6
 8011d58:	ed87 7b00 	vstr	d7, [r7]
 8011d5c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011d60:	aa44      	add	r2, sp, #272	; 0x110
 8011d62:	2301      	movs	r3, #1
 8011d64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d68:	459b      	cmp	fp, r3
 8011d6a:	da22      	bge.n	8011db2 <__kernel_rem_pio2+0x4a2>
 8011d6c:	b10e      	cbz	r6, 8011d72 <__kernel_rem_pio2+0x462>
 8011d6e:	eeb1 7b47 	vneg.f64	d7, d7
 8011d72:	ed87 7b02 	vstr	d7, [r7, #8]
 8011d76:	e7b9      	b.n	8011cec <__kernel_rem_pio2+0x3dc>
 8011d78:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011e38 <__kernel_rem_pio2+0x528>
 8011d7c:	ab42      	add	r3, sp, #264	; 0x108
 8011d7e:	441a      	add	r2, r3
 8011d80:	f1bb 0f00 	cmp.w	fp, #0
 8011d84:	da05      	bge.n	8011d92 <__kernel_rem_pio2+0x482>
 8011d86:	b10e      	cbz	r6, 8011d8c <__kernel_rem_pio2+0x47c>
 8011d88:	eeb1 7b47 	vneg.f64	d7, d7
 8011d8c:	ed87 7b00 	vstr	d7, [r7]
 8011d90:	e7ac      	b.n	8011cec <__kernel_rem_pio2+0x3dc>
 8011d92:	ed32 6b02 	vldmdb	r2!, {d6}
 8011d96:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011d9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011d9e:	e7ef      	b.n	8011d80 <__kernel_rem_pio2+0x470>
 8011da0:	ed32 7b02 	vldmdb	r2!, {d7}
 8011da4:	3b01      	subs	r3, #1
 8011da6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011daa:	e7d0      	b.n	8011d4e <__kernel_rem_pio2+0x43e>
 8011dac:	eeb0 7b46 	vmov.f64	d7, d6
 8011db0:	e7d2      	b.n	8011d58 <__kernel_rem_pio2+0x448>
 8011db2:	ecb2 6b02 	vldmia	r2!, {d6}
 8011db6:	3301      	adds	r3, #1
 8011db8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011dbc:	e7d4      	b.n	8011d68 <__kernel_rem_pio2+0x458>
 8011dbe:	ed91 7b00 	vldr	d7, [r1]
 8011dc2:	ed91 5b02 	vldr	d5, [r1, #8]
 8011dc6:	3801      	subs	r0, #1
 8011dc8:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011dcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011dd0:	ed81 6b00 	vstr	d6, [r1]
 8011dd4:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011dd8:	ed81 7b02 	vstr	d7, [r1, #8]
 8011ddc:	e796      	b.n	8011d0c <__kernel_rem_pio2+0x3fc>
 8011dde:	ed92 7b00 	vldr	d7, [r2]
 8011de2:	ed92 5b02 	vldr	d5, [r2, #8]
 8011de6:	3901      	subs	r1, #1
 8011de8:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011dec:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011df0:	ed82 6b00 	vstr	d6, [r2]
 8011df4:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011df8:	ed82 7b02 	vstr	d7, [r2, #8]
 8011dfc:	e78b      	b.n	8011d16 <__kernel_rem_pio2+0x406>
 8011dfe:	ed33 6b02 	vldmdb	r3!, {d6}
 8011e02:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011e06:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011e0a:	e78b      	b.n	8011d24 <__kernel_rem_pio2+0x414>
 8011e0c:	eeb1 5b45 	vneg.f64	d5, d5
 8011e10:	eeb1 6b46 	vneg.f64	d6, d6
 8011e14:	ed87 5b00 	vstr	d5, [r7]
 8011e18:	eeb1 7b47 	vneg.f64	d7, d7
 8011e1c:	ed87 6b02 	vstr	d6, [r7, #8]
 8011e20:	e78d      	b.n	8011d3e <__kernel_rem_pio2+0x42e>
 8011e22:	bf00      	nop
 8011e24:	f3af 8000 	nop.w
 8011e28:	00000000 	.word	0x00000000
 8011e2c:	41700000 	.word	0x41700000
 8011e30:	00000000 	.word	0x00000000
 8011e34:	3e700000 	.word	0x3e700000
	...

08011e40 <__kernel_sin>:
 8011e40:	ee10 3a90 	vmov	r3, s1
 8011e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e48:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011e4c:	da04      	bge.n	8011e58 <__kernel_sin+0x18>
 8011e4e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011e52:	ee17 3a90 	vmov	r3, s15
 8011e56:	b35b      	cbz	r3, 8011eb0 <__kernel_sin+0x70>
 8011e58:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011e5c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011e60:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011eb8 <__kernel_sin+0x78>
 8011e64:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011ec0 <__kernel_sin+0x80>
 8011e68:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011e6c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011ec8 <__kernel_sin+0x88>
 8011e70:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011e74:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011ed0 <__kernel_sin+0x90>
 8011e78:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011e7c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011ed8 <__kernel_sin+0x98>
 8011e80:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011e84:	b930      	cbnz	r0, 8011e94 <__kernel_sin+0x54>
 8011e86:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011ee0 <__kernel_sin+0xa0>
 8011e8a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011e8e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011e92:	4770      	bx	lr
 8011e94:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011e98:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011e9c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011ea0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011ea4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011ee8 <__kernel_sin+0xa8>
 8011ea8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011eac:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011eb0:	4770      	bx	lr
 8011eb2:	bf00      	nop
 8011eb4:	f3af 8000 	nop.w
 8011eb8:	5acfd57c 	.word	0x5acfd57c
 8011ebc:	3de5d93a 	.word	0x3de5d93a
 8011ec0:	8a2b9ceb 	.word	0x8a2b9ceb
 8011ec4:	be5ae5e6 	.word	0xbe5ae5e6
 8011ec8:	57b1fe7d 	.word	0x57b1fe7d
 8011ecc:	3ec71de3 	.word	0x3ec71de3
 8011ed0:	19c161d5 	.word	0x19c161d5
 8011ed4:	bf2a01a0 	.word	0xbf2a01a0
 8011ed8:	1110f8a6 	.word	0x1110f8a6
 8011edc:	3f811111 	.word	0x3f811111
 8011ee0:	55555549 	.word	0x55555549
 8011ee4:	bfc55555 	.word	0xbfc55555
 8011ee8:	55555549 	.word	0x55555549
 8011eec:	3fc55555 	.word	0x3fc55555

08011ef0 <with_errno>:
 8011ef0:	b513      	push	{r0, r1, r4, lr}
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	ed8d 0b00 	vstr	d0, [sp]
 8011ef8:	f000 fa50 	bl	801239c <__errno>
 8011efc:	ed9d 0b00 	vldr	d0, [sp]
 8011f00:	6004      	str	r4, [r0, #0]
 8011f02:	b002      	add	sp, #8
 8011f04:	bd10      	pop	{r4, pc}

08011f06 <xflow>:
 8011f06:	b082      	sub	sp, #8
 8011f08:	b158      	cbz	r0, 8011f22 <xflow+0x1c>
 8011f0a:	eeb1 7b40 	vneg.f64	d7, d0
 8011f0e:	ed8d 7b00 	vstr	d7, [sp]
 8011f12:	ed9d 7b00 	vldr	d7, [sp]
 8011f16:	2022      	movs	r0, #34	; 0x22
 8011f18:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011f1c:	b002      	add	sp, #8
 8011f1e:	f7ff bfe7 	b.w	8011ef0 <with_errno>
 8011f22:	eeb0 7b40 	vmov.f64	d7, d0
 8011f26:	e7f2      	b.n	8011f0e <xflow+0x8>

08011f28 <__math_uflow>:
 8011f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f30 <__math_uflow+0x8>
 8011f2c:	f7ff bfeb 	b.w	8011f06 <xflow>
 8011f30:	00000000 	.word	0x00000000
 8011f34:	10000000 	.word	0x10000000

08011f38 <__math_oflow>:
 8011f38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f40 <__math_oflow+0x8>
 8011f3c:	f7ff bfe3 	b.w	8011f06 <xflow>
 8011f40:	00000000 	.word	0x00000000
 8011f44:	70000000 	.word	0x70000000

08011f48 <__math_divzero>:
 8011f48:	b082      	sub	sp, #8
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011f50:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011f54:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011f58:	ed8d 7b00 	vstr	d7, [sp]
 8011f5c:	ed9d 0b00 	vldr	d0, [sp]
 8011f60:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011f70 <__math_divzero+0x28>
 8011f64:	2022      	movs	r0, #34	; 0x22
 8011f66:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011f6a:	b002      	add	sp, #8
 8011f6c:	f7ff bfc0 	b.w	8011ef0 <with_errno>
	...

08011f78 <__math_invalid>:
 8011f78:	eeb0 7b40 	vmov.f64	d7, d0
 8011f7c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f84:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011f88:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011f8c:	d602      	bvs.n	8011f94 <__math_invalid+0x1c>
 8011f8e:	2021      	movs	r0, #33	; 0x21
 8011f90:	f7ff bfae 	b.w	8011ef0 <with_errno>
 8011f94:	4770      	bx	lr

08011f96 <__math_check_uflow>:
 8011f96:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f9e:	d102      	bne.n	8011fa6 <__math_check_uflow+0x10>
 8011fa0:	2022      	movs	r0, #34	; 0x22
 8011fa2:	f7ff bfa5 	b.w	8011ef0 <with_errno>
 8011fa6:	4770      	bx	lr

08011fa8 <__math_check_oflow>:
 8011fa8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011fc8 <__math_check_oflow+0x20>
 8011fac:	eeb0 7bc0 	vabs.f64	d7, d0
 8011fb0:	eeb4 7b46 	vcmp.f64	d7, d6
 8011fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb8:	dd02      	ble.n	8011fc0 <__math_check_oflow+0x18>
 8011fba:	2022      	movs	r0, #34	; 0x22
 8011fbc:	f7ff bf98 	b.w	8011ef0 <with_errno>
 8011fc0:	4770      	bx	lr
 8011fc2:	bf00      	nop
 8011fc4:	f3af 8000 	nop.w
 8011fc8:	ffffffff 	.word	0xffffffff
 8011fcc:	7fefffff 	.word	0x7fefffff

08011fd0 <fabs>:
 8011fd0:	ec51 0b10 	vmov	r0, r1, d0
 8011fd4:	ee10 2a10 	vmov	r2, s0
 8011fd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011fdc:	ec43 2b10 	vmov	d0, r2, r3
 8011fe0:	4770      	bx	lr
 8011fe2:	0000      	movs	r0, r0
 8011fe4:	0000      	movs	r0, r0
	...

08011fe8 <floor>:
 8011fe8:	ee10 1a90 	vmov	r1, s1
 8011fec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011ff0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011ff4:	2b13      	cmp	r3, #19
 8011ff6:	b530      	push	{r4, r5, lr}
 8011ff8:	ee10 0a10 	vmov	r0, s0
 8011ffc:	ee10 5a10 	vmov	r5, s0
 8012000:	dc31      	bgt.n	8012066 <floor+0x7e>
 8012002:	2b00      	cmp	r3, #0
 8012004:	da15      	bge.n	8012032 <floor+0x4a>
 8012006:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80120c0 <floor+0xd8>
 801200a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801200e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012016:	dd07      	ble.n	8012028 <floor+0x40>
 8012018:	2900      	cmp	r1, #0
 801201a:	da4e      	bge.n	80120ba <floor+0xd2>
 801201c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012020:	4318      	orrs	r0, r3
 8012022:	d001      	beq.n	8012028 <floor+0x40>
 8012024:	4928      	ldr	r1, [pc, #160]	; (80120c8 <floor+0xe0>)
 8012026:	2000      	movs	r0, #0
 8012028:	460b      	mov	r3, r1
 801202a:	4602      	mov	r2, r0
 801202c:	ec43 2b10 	vmov	d0, r2, r3
 8012030:	e020      	b.n	8012074 <floor+0x8c>
 8012032:	4a26      	ldr	r2, [pc, #152]	; (80120cc <floor+0xe4>)
 8012034:	411a      	asrs	r2, r3
 8012036:	ea01 0402 	and.w	r4, r1, r2
 801203a:	4304      	orrs	r4, r0
 801203c:	d01a      	beq.n	8012074 <floor+0x8c>
 801203e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80120c0 <floor+0xd8>
 8012042:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012046:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204e:	ddeb      	ble.n	8012028 <floor+0x40>
 8012050:	2900      	cmp	r1, #0
 8012052:	bfbe      	ittt	lt
 8012054:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012058:	fa40 f303 	asrlt.w	r3, r0, r3
 801205c:	18c9      	addlt	r1, r1, r3
 801205e:	ea21 0102 	bic.w	r1, r1, r2
 8012062:	2000      	movs	r0, #0
 8012064:	e7e0      	b.n	8012028 <floor+0x40>
 8012066:	2b33      	cmp	r3, #51	; 0x33
 8012068:	dd05      	ble.n	8012076 <floor+0x8e>
 801206a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801206e:	d101      	bne.n	8012074 <floor+0x8c>
 8012070:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012074:	bd30      	pop	{r4, r5, pc}
 8012076:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801207a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801207e:	40e2      	lsrs	r2, r4
 8012080:	4202      	tst	r2, r0
 8012082:	d0f7      	beq.n	8012074 <floor+0x8c>
 8012084:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80120c0 <floor+0xd8>
 8012088:	ee30 0b07 	vadd.f64	d0, d0, d7
 801208c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012094:	ddc8      	ble.n	8012028 <floor+0x40>
 8012096:	2900      	cmp	r1, #0
 8012098:	da02      	bge.n	80120a0 <floor+0xb8>
 801209a:	2b14      	cmp	r3, #20
 801209c:	d103      	bne.n	80120a6 <floor+0xbe>
 801209e:	3101      	adds	r1, #1
 80120a0:	ea20 0002 	bic.w	r0, r0, r2
 80120a4:	e7c0      	b.n	8012028 <floor+0x40>
 80120a6:	2401      	movs	r4, #1
 80120a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80120ac:	fa04 f303 	lsl.w	r3, r4, r3
 80120b0:	4418      	add	r0, r3
 80120b2:	42a8      	cmp	r0, r5
 80120b4:	bf38      	it	cc
 80120b6:	1909      	addcc	r1, r1, r4
 80120b8:	e7f2      	b.n	80120a0 <floor+0xb8>
 80120ba:	2000      	movs	r0, #0
 80120bc:	4601      	mov	r1, r0
 80120be:	e7b3      	b.n	8012028 <floor+0x40>
 80120c0:	8800759c 	.word	0x8800759c
 80120c4:	7e37e43c 	.word	0x7e37e43c
 80120c8:	bff00000 	.word	0xbff00000
 80120cc:	000fffff 	.word	0x000fffff

080120d0 <scalbn>:
 80120d0:	ee10 1a90 	vmov	r1, s1
 80120d4:	b510      	push	{r4, lr}
 80120d6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80120da:	b98c      	cbnz	r4, 8012100 <scalbn+0x30>
 80120dc:	ee10 3a10 	vmov	r3, s0
 80120e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80120e4:	430b      	orrs	r3, r1
 80120e6:	d011      	beq.n	801210c <scalbn+0x3c>
 80120e8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80121b0 <scalbn+0xe0>
 80120ec:	4b3c      	ldr	r3, [pc, #240]	; (80121e0 <scalbn+0x110>)
 80120ee:	ee20 0b07 	vmul.f64	d0, d0, d7
 80120f2:	4298      	cmp	r0, r3
 80120f4:	da0b      	bge.n	801210e <scalbn+0x3e>
 80120f6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80121b8 <scalbn+0xe8>
 80120fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80120fe:	e005      	b.n	801210c <scalbn+0x3c>
 8012100:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012104:	429c      	cmp	r4, r3
 8012106:	d107      	bne.n	8012118 <scalbn+0x48>
 8012108:	ee30 0b00 	vadd.f64	d0, d0, d0
 801210c:	bd10      	pop	{r4, pc}
 801210e:	ee10 1a90 	vmov	r1, s1
 8012112:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012116:	3c36      	subs	r4, #54	; 0x36
 8012118:	4404      	add	r4, r0
 801211a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801211e:	429c      	cmp	r4, r3
 8012120:	dd0d      	ble.n	801213e <scalbn+0x6e>
 8012122:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80121c0 <scalbn+0xf0>
 8012126:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80121c8 <scalbn+0xf8>
 801212a:	eeb0 6b47 	vmov.f64	d6, d7
 801212e:	ee10 3a90 	vmov	r3, s1
 8012132:	2b00      	cmp	r3, #0
 8012134:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012138:	ee27 0b06 	vmul.f64	d0, d7, d6
 801213c:	e7e6      	b.n	801210c <scalbn+0x3c>
 801213e:	2c00      	cmp	r4, #0
 8012140:	dd0a      	ble.n	8012158 <scalbn+0x88>
 8012142:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012146:	ec53 2b10 	vmov	r2, r3, d0
 801214a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801214e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012152:	ec43 2b10 	vmov	d0, r2, r3
 8012156:	e7d9      	b.n	801210c <scalbn+0x3c>
 8012158:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801215c:	da19      	bge.n	8012192 <scalbn+0xc2>
 801215e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012162:	4298      	cmp	r0, r3
 8012164:	ee10 3a90 	vmov	r3, s1
 8012168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801216c:	dd09      	ble.n	8012182 <scalbn+0xb2>
 801216e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80121c0 <scalbn+0xf0>
 8012172:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80121c8 <scalbn+0xf8>
 8012176:	eeb0 7b40 	vmov.f64	d7, d0
 801217a:	2b00      	cmp	r3, #0
 801217c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8012180:	e7bb      	b.n	80120fa <scalbn+0x2a>
 8012182:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80121b8 <scalbn+0xe8>
 8012186:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80121d0 <scalbn+0x100>
 801218a:	eeb0 7b40 	vmov.f64	d7, d0
 801218e:	2b00      	cmp	r3, #0
 8012190:	e7f4      	b.n	801217c <scalbn+0xac>
 8012192:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012196:	ec53 2b10 	vmov	r2, r3, d0
 801219a:	3436      	adds	r4, #54	; 0x36
 801219c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80121a0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80121a4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80121d8 <scalbn+0x108>
 80121a8:	ec43 2b10 	vmov	d0, r2, r3
 80121ac:	e7a5      	b.n	80120fa <scalbn+0x2a>
 80121ae:	bf00      	nop
 80121b0:	00000000 	.word	0x00000000
 80121b4:	43500000 	.word	0x43500000
 80121b8:	c2f8f359 	.word	0xc2f8f359
 80121bc:	01a56e1f 	.word	0x01a56e1f
 80121c0:	8800759c 	.word	0x8800759c
 80121c4:	7e37e43c 	.word	0x7e37e43c
 80121c8:	8800759c 	.word	0x8800759c
 80121cc:	fe37e43c 	.word	0xfe37e43c
 80121d0:	c2f8f359 	.word	0xc2f8f359
 80121d4:	81a56e1f 	.word	0x81a56e1f
 80121d8:	00000000 	.word	0x00000000
 80121dc:	3c900000 	.word	0x3c900000
 80121e0:	ffff3cb0 	.word	0xffff3cb0

080121e4 <atanf>:
 80121e4:	b538      	push	{r3, r4, r5, lr}
 80121e6:	ee10 5a10 	vmov	r5, s0
 80121ea:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80121ee:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80121f2:	eef0 7a40 	vmov.f32	s15, s0
 80121f6:	db0f      	blt.n	8012218 <atanf+0x34>
 80121f8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80121fc:	dd04      	ble.n	8012208 <atanf+0x24>
 80121fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012202:	eeb0 0a67 	vmov.f32	s0, s15
 8012206:	bd38      	pop	{r3, r4, r5, pc}
 8012208:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012340 <atanf+0x15c>
 801220c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8012344 <atanf+0x160>
 8012210:	2d00      	cmp	r5, #0
 8012212:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8012216:	e7f4      	b.n	8012202 <atanf+0x1e>
 8012218:	4b4b      	ldr	r3, [pc, #300]	; (8012348 <atanf+0x164>)
 801221a:	429c      	cmp	r4, r3
 801221c:	dc10      	bgt.n	8012240 <atanf+0x5c>
 801221e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012222:	da0a      	bge.n	801223a <atanf+0x56>
 8012224:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801234c <atanf+0x168>
 8012228:	ee30 7a07 	vadd.f32	s14, s0, s14
 801222c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012230:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012238:	dce3      	bgt.n	8012202 <atanf+0x1e>
 801223a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801223e:	e013      	b.n	8012268 <atanf+0x84>
 8012240:	f000 f8a4 	bl	801238c <fabsf>
 8012244:	4b42      	ldr	r3, [pc, #264]	; (8012350 <atanf+0x16c>)
 8012246:	429c      	cmp	r4, r3
 8012248:	dc4f      	bgt.n	80122ea <atanf+0x106>
 801224a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801224e:	429c      	cmp	r4, r3
 8012250:	dc41      	bgt.n	80122d6 <atanf+0xf2>
 8012252:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012256:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801225a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801225e:	2300      	movs	r3, #0
 8012260:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012264:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012268:	1c5a      	adds	r2, r3, #1
 801226a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801226e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8012354 <atanf+0x170>
 8012272:	eddf 5a39 	vldr	s11, [pc, #228]	; 8012358 <atanf+0x174>
 8012276:	ed9f 5a39 	vldr	s10, [pc, #228]	; 801235c <atanf+0x178>
 801227a:	ee66 6a06 	vmul.f32	s13, s12, s12
 801227e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012282:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012360 <atanf+0x17c>
 8012286:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801228a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8012364 <atanf+0x180>
 801228e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012292:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8012368 <atanf+0x184>
 8012296:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801229a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801236c <atanf+0x188>
 801229e:	eee7 5a26 	vfma.f32	s11, s14, s13
 80122a2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012370 <atanf+0x18c>
 80122a6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80122aa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8012374 <atanf+0x190>
 80122ae:	eea5 7a26 	vfma.f32	s14, s10, s13
 80122b2:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8012378 <atanf+0x194>
 80122b6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80122ba:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801237c <atanf+0x198>
 80122be:	eea5 7a26 	vfma.f32	s14, s10, s13
 80122c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80122c6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80122ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80122ce:	d121      	bne.n	8012314 <atanf+0x130>
 80122d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122d4:	e795      	b.n	8012202 <atanf+0x1e>
 80122d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80122da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80122de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80122e2:	2301      	movs	r3, #1
 80122e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80122e8:	e7be      	b.n	8012268 <atanf+0x84>
 80122ea:	4b25      	ldr	r3, [pc, #148]	; (8012380 <atanf+0x19c>)
 80122ec:	429c      	cmp	r4, r3
 80122ee:	dc0b      	bgt.n	8012308 <atanf+0x124>
 80122f0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80122f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80122fc:	2302      	movs	r3, #2
 80122fe:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012306:	e7af      	b.n	8012268 <atanf+0x84>
 8012308:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801230c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012310:	2303      	movs	r3, #3
 8012312:	e7a9      	b.n	8012268 <atanf+0x84>
 8012314:	4a1b      	ldr	r2, [pc, #108]	; (8012384 <atanf+0x1a0>)
 8012316:	491c      	ldr	r1, [pc, #112]	; (8012388 <atanf+0x1a4>)
 8012318:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801231c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012320:	ed93 0a00 	vldr	s0, [r3]
 8012324:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012328:	ed92 0a00 	vldr	s0, [r2]
 801232c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012330:	2d00      	cmp	r5, #0
 8012332:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012336:	bfb8      	it	lt
 8012338:	eef1 7a67 	vneglt.f32	s15, s15
 801233c:	e761      	b.n	8012202 <atanf+0x1e>
 801233e:	bf00      	nop
 8012340:	3fc90fdb 	.word	0x3fc90fdb
 8012344:	bfc90fdb 	.word	0xbfc90fdb
 8012348:	3edfffff 	.word	0x3edfffff
 801234c:	7149f2ca 	.word	0x7149f2ca
 8012350:	3f97ffff 	.word	0x3f97ffff
 8012354:	3c8569d7 	.word	0x3c8569d7
 8012358:	3d4bda59 	.word	0x3d4bda59
 801235c:	bd6ef16b 	.word	0xbd6ef16b
 8012360:	3d886b35 	.word	0x3d886b35
 8012364:	3dba2e6e 	.word	0x3dba2e6e
 8012368:	3e124925 	.word	0x3e124925
 801236c:	3eaaaaab 	.word	0x3eaaaaab
 8012370:	bd15a221 	.word	0xbd15a221
 8012374:	bd9d8795 	.word	0xbd9d8795
 8012378:	bde38e38 	.word	0xbde38e38
 801237c:	be4ccccd 	.word	0xbe4ccccd
 8012380:	401bffff 	.word	0x401bffff
 8012384:	08016808 	.word	0x08016808
 8012388:	08016818 	.word	0x08016818

0801238c <fabsf>:
 801238c:	ee10 3a10 	vmov	r3, s0
 8012390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012394:	ee00 3a10 	vmov	s0, r3
 8012398:	4770      	bx	lr
	...

0801239c <__errno>:
 801239c:	4b01      	ldr	r3, [pc, #4]	; (80123a4 <__errno+0x8>)
 801239e:	6818      	ldr	r0, [r3, #0]
 80123a0:	4770      	bx	lr
 80123a2:	bf00      	nop
 80123a4:	24000248 	.word	0x24000248

080123a8 <__libc_init_array>:
 80123a8:	b570      	push	{r4, r5, r6, lr}
 80123aa:	4d0d      	ldr	r5, [pc, #52]	; (80123e0 <__libc_init_array+0x38>)
 80123ac:	4c0d      	ldr	r4, [pc, #52]	; (80123e4 <__libc_init_array+0x3c>)
 80123ae:	1b64      	subs	r4, r4, r5
 80123b0:	10a4      	asrs	r4, r4, #2
 80123b2:	2600      	movs	r6, #0
 80123b4:	42a6      	cmp	r6, r4
 80123b6:	d109      	bne.n	80123cc <__libc_init_array+0x24>
 80123b8:	4d0b      	ldr	r5, [pc, #44]	; (80123e8 <__libc_init_array+0x40>)
 80123ba:	4c0c      	ldr	r4, [pc, #48]	; (80123ec <__libc_init_array+0x44>)
 80123bc:	f002 fc90 	bl	8014ce0 <_init>
 80123c0:	1b64      	subs	r4, r4, r5
 80123c2:	10a4      	asrs	r4, r4, #2
 80123c4:	2600      	movs	r6, #0
 80123c6:	42a6      	cmp	r6, r4
 80123c8:	d105      	bne.n	80123d6 <__libc_init_array+0x2e>
 80123ca:	bd70      	pop	{r4, r5, r6, pc}
 80123cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80123d0:	4798      	blx	r3
 80123d2:	3601      	adds	r6, #1
 80123d4:	e7ee      	b.n	80123b4 <__libc_init_array+0xc>
 80123d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80123da:	4798      	blx	r3
 80123dc:	3601      	adds	r6, #1
 80123de:	e7f2      	b.n	80123c6 <__libc_init_array+0x1e>
 80123e0:	08016c0c 	.word	0x08016c0c
 80123e4:	08016c0c 	.word	0x08016c0c
 80123e8:	08016c0c 	.word	0x08016c0c
 80123ec:	08016c14 	.word	0x08016c14

080123f0 <memset>:
 80123f0:	4402      	add	r2, r0
 80123f2:	4603      	mov	r3, r0
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d100      	bne.n	80123fa <memset+0xa>
 80123f8:	4770      	bx	lr
 80123fa:	f803 1b01 	strb.w	r1, [r3], #1
 80123fe:	e7f9      	b.n	80123f4 <memset+0x4>

08012400 <__cvt>:
 8012400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012402:	ed2d 8b02 	vpush	{d8}
 8012406:	eeb0 8b40 	vmov.f64	d8, d0
 801240a:	b085      	sub	sp, #20
 801240c:	4617      	mov	r7, r2
 801240e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012410:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012412:	ee18 2a90 	vmov	r2, s17
 8012416:	f025 0520 	bic.w	r5, r5, #32
 801241a:	2a00      	cmp	r2, #0
 801241c:	bfb6      	itet	lt
 801241e:	222d      	movlt	r2, #45	; 0x2d
 8012420:	2200      	movge	r2, #0
 8012422:	eeb1 8b40 	vneglt.f64	d8, d0
 8012426:	2d46      	cmp	r5, #70	; 0x46
 8012428:	460c      	mov	r4, r1
 801242a:	701a      	strb	r2, [r3, #0]
 801242c:	d004      	beq.n	8012438 <__cvt+0x38>
 801242e:	2d45      	cmp	r5, #69	; 0x45
 8012430:	d100      	bne.n	8012434 <__cvt+0x34>
 8012432:	3401      	adds	r4, #1
 8012434:	2102      	movs	r1, #2
 8012436:	e000      	b.n	801243a <__cvt+0x3a>
 8012438:	2103      	movs	r1, #3
 801243a:	ab03      	add	r3, sp, #12
 801243c:	9301      	str	r3, [sp, #4]
 801243e:	ab02      	add	r3, sp, #8
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	4622      	mov	r2, r4
 8012444:	4633      	mov	r3, r6
 8012446:	eeb0 0b48 	vmov.f64	d0, d8
 801244a:	f000 fca9 	bl	8012da0 <_dtoa_r>
 801244e:	2d47      	cmp	r5, #71	; 0x47
 8012450:	d101      	bne.n	8012456 <__cvt+0x56>
 8012452:	07fb      	lsls	r3, r7, #31
 8012454:	d51a      	bpl.n	801248c <__cvt+0x8c>
 8012456:	2d46      	cmp	r5, #70	; 0x46
 8012458:	eb00 0204 	add.w	r2, r0, r4
 801245c:	d10c      	bne.n	8012478 <__cvt+0x78>
 801245e:	7803      	ldrb	r3, [r0, #0]
 8012460:	2b30      	cmp	r3, #48	; 0x30
 8012462:	d107      	bne.n	8012474 <__cvt+0x74>
 8012464:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801246c:	bf1c      	itt	ne
 801246e:	f1c4 0401 	rsbne	r4, r4, #1
 8012472:	6034      	strne	r4, [r6, #0]
 8012474:	6833      	ldr	r3, [r6, #0]
 8012476:	441a      	add	r2, r3
 8012478:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012480:	bf08      	it	eq
 8012482:	9203      	streq	r2, [sp, #12]
 8012484:	2130      	movs	r1, #48	; 0x30
 8012486:	9b03      	ldr	r3, [sp, #12]
 8012488:	4293      	cmp	r3, r2
 801248a:	d307      	bcc.n	801249c <__cvt+0x9c>
 801248c:	9b03      	ldr	r3, [sp, #12]
 801248e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012490:	1a1b      	subs	r3, r3, r0
 8012492:	6013      	str	r3, [r2, #0]
 8012494:	b005      	add	sp, #20
 8012496:	ecbd 8b02 	vpop	{d8}
 801249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801249c:	1c5c      	adds	r4, r3, #1
 801249e:	9403      	str	r4, [sp, #12]
 80124a0:	7019      	strb	r1, [r3, #0]
 80124a2:	e7f0      	b.n	8012486 <__cvt+0x86>

080124a4 <__exponent>:
 80124a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124a6:	4603      	mov	r3, r0
 80124a8:	2900      	cmp	r1, #0
 80124aa:	bfb8      	it	lt
 80124ac:	4249      	neglt	r1, r1
 80124ae:	f803 2b02 	strb.w	r2, [r3], #2
 80124b2:	bfb4      	ite	lt
 80124b4:	222d      	movlt	r2, #45	; 0x2d
 80124b6:	222b      	movge	r2, #43	; 0x2b
 80124b8:	2909      	cmp	r1, #9
 80124ba:	7042      	strb	r2, [r0, #1]
 80124bc:	dd2a      	ble.n	8012514 <__exponent+0x70>
 80124be:	f10d 0407 	add.w	r4, sp, #7
 80124c2:	46a4      	mov	ip, r4
 80124c4:	270a      	movs	r7, #10
 80124c6:	46a6      	mov	lr, r4
 80124c8:	460a      	mov	r2, r1
 80124ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80124ce:	fb07 1516 	mls	r5, r7, r6, r1
 80124d2:	3530      	adds	r5, #48	; 0x30
 80124d4:	2a63      	cmp	r2, #99	; 0x63
 80124d6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80124da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80124de:	4631      	mov	r1, r6
 80124e0:	dcf1      	bgt.n	80124c6 <__exponent+0x22>
 80124e2:	3130      	adds	r1, #48	; 0x30
 80124e4:	f1ae 0502 	sub.w	r5, lr, #2
 80124e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80124ec:	1c44      	adds	r4, r0, #1
 80124ee:	4629      	mov	r1, r5
 80124f0:	4561      	cmp	r1, ip
 80124f2:	d30a      	bcc.n	801250a <__exponent+0x66>
 80124f4:	f10d 0209 	add.w	r2, sp, #9
 80124f8:	eba2 020e 	sub.w	r2, r2, lr
 80124fc:	4565      	cmp	r5, ip
 80124fe:	bf88      	it	hi
 8012500:	2200      	movhi	r2, #0
 8012502:	4413      	add	r3, r2
 8012504:	1a18      	subs	r0, r3, r0
 8012506:	b003      	add	sp, #12
 8012508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801250a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801250e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012512:	e7ed      	b.n	80124f0 <__exponent+0x4c>
 8012514:	2330      	movs	r3, #48	; 0x30
 8012516:	3130      	adds	r1, #48	; 0x30
 8012518:	7083      	strb	r3, [r0, #2]
 801251a:	70c1      	strb	r1, [r0, #3]
 801251c:	1d03      	adds	r3, r0, #4
 801251e:	e7f1      	b.n	8012504 <__exponent+0x60>

08012520 <_printf_float>:
 8012520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012524:	b08b      	sub	sp, #44	; 0x2c
 8012526:	460c      	mov	r4, r1
 8012528:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801252c:	4616      	mov	r6, r2
 801252e:	461f      	mov	r7, r3
 8012530:	4605      	mov	r5, r0
 8012532:	f001 f9a3 	bl	801387c <_localeconv_r>
 8012536:	f8d0 b000 	ldr.w	fp, [r0]
 801253a:	4658      	mov	r0, fp
 801253c:	f7ed fed0 	bl	80002e0 <strlen>
 8012540:	2300      	movs	r3, #0
 8012542:	9308      	str	r3, [sp, #32]
 8012544:	f8d8 3000 	ldr.w	r3, [r8]
 8012548:	f894 9018 	ldrb.w	r9, [r4, #24]
 801254c:	6822      	ldr	r2, [r4, #0]
 801254e:	3307      	adds	r3, #7
 8012550:	f023 0307 	bic.w	r3, r3, #7
 8012554:	f103 0108 	add.w	r1, r3, #8
 8012558:	f8c8 1000 	str.w	r1, [r8]
 801255c:	4682      	mov	sl, r0
 801255e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012562:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8012566:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80127c8 <_printf_float+0x2a8>
 801256a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801256e:	eeb0 6bc0 	vabs.f64	d6, d0
 8012572:	eeb4 6b47 	vcmp.f64	d6, d7
 8012576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257a:	dd24      	ble.n	80125c6 <_printf_float+0xa6>
 801257c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012584:	d502      	bpl.n	801258c <_printf_float+0x6c>
 8012586:	232d      	movs	r3, #45	; 0x2d
 8012588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801258c:	4b90      	ldr	r3, [pc, #576]	; (80127d0 <_printf_float+0x2b0>)
 801258e:	4891      	ldr	r0, [pc, #580]	; (80127d4 <_printf_float+0x2b4>)
 8012590:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012594:	bf94      	ite	ls
 8012596:	4698      	movls	r8, r3
 8012598:	4680      	movhi	r8, r0
 801259a:	2303      	movs	r3, #3
 801259c:	6123      	str	r3, [r4, #16]
 801259e:	f022 0204 	bic.w	r2, r2, #4
 80125a2:	2300      	movs	r3, #0
 80125a4:	6022      	str	r2, [r4, #0]
 80125a6:	9304      	str	r3, [sp, #16]
 80125a8:	9700      	str	r7, [sp, #0]
 80125aa:	4633      	mov	r3, r6
 80125ac:	aa09      	add	r2, sp, #36	; 0x24
 80125ae:	4621      	mov	r1, r4
 80125b0:	4628      	mov	r0, r5
 80125b2:	f000 f9d3 	bl	801295c <_printf_common>
 80125b6:	3001      	adds	r0, #1
 80125b8:	f040 808a 	bne.w	80126d0 <_printf_float+0x1b0>
 80125bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125c0:	b00b      	add	sp, #44	; 0x2c
 80125c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80125ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ce:	d709      	bvc.n	80125e4 <_printf_float+0xc4>
 80125d0:	ee10 3a90 	vmov	r3, s1
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	bfbc      	itt	lt
 80125d8:	232d      	movlt	r3, #45	; 0x2d
 80125da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80125de:	487e      	ldr	r0, [pc, #504]	; (80127d8 <_printf_float+0x2b8>)
 80125e0:	4b7e      	ldr	r3, [pc, #504]	; (80127dc <_printf_float+0x2bc>)
 80125e2:	e7d5      	b.n	8012590 <_printf_float+0x70>
 80125e4:	6863      	ldr	r3, [r4, #4]
 80125e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80125ea:	9104      	str	r1, [sp, #16]
 80125ec:	1c59      	adds	r1, r3, #1
 80125ee:	d13c      	bne.n	801266a <_printf_float+0x14a>
 80125f0:	2306      	movs	r3, #6
 80125f2:	6063      	str	r3, [r4, #4]
 80125f4:	2300      	movs	r3, #0
 80125f6:	9303      	str	r3, [sp, #12]
 80125f8:	ab08      	add	r3, sp, #32
 80125fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80125fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012602:	ab07      	add	r3, sp, #28
 8012604:	6861      	ldr	r1, [r4, #4]
 8012606:	9300      	str	r3, [sp, #0]
 8012608:	6022      	str	r2, [r4, #0]
 801260a:	f10d 031b 	add.w	r3, sp, #27
 801260e:	4628      	mov	r0, r5
 8012610:	f7ff fef6 	bl	8012400 <__cvt>
 8012614:	9b04      	ldr	r3, [sp, #16]
 8012616:	9907      	ldr	r1, [sp, #28]
 8012618:	2b47      	cmp	r3, #71	; 0x47
 801261a:	4680      	mov	r8, r0
 801261c:	d108      	bne.n	8012630 <_printf_float+0x110>
 801261e:	1cc8      	adds	r0, r1, #3
 8012620:	db02      	blt.n	8012628 <_printf_float+0x108>
 8012622:	6863      	ldr	r3, [r4, #4]
 8012624:	4299      	cmp	r1, r3
 8012626:	dd41      	ble.n	80126ac <_printf_float+0x18c>
 8012628:	f1a9 0902 	sub.w	r9, r9, #2
 801262c:	fa5f f989 	uxtb.w	r9, r9
 8012630:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012634:	d820      	bhi.n	8012678 <_printf_float+0x158>
 8012636:	3901      	subs	r1, #1
 8012638:	464a      	mov	r2, r9
 801263a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801263e:	9107      	str	r1, [sp, #28]
 8012640:	f7ff ff30 	bl	80124a4 <__exponent>
 8012644:	9a08      	ldr	r2, [sp, #32]
 8012646:	9004      	str	r0, [sp, #16]
 8012648:	1813      	adds	r3, r2, r0
 801264a:	2a01      	cmp	r2, #1
 801264c:	6123      	str	r3, [r4, #16]
 801264e:	dc02      	bgt.n	8012656 <_printf_float+0x136>
 8012650:	6822      	ldr	r2, [r4, #0]
 8012652:	07d2      	lsls	r2, r2, #31
 8012654:	d501      	bpl.n	801265a <_printf_float+0x13a>
 8012656:	3301      	adds	r3, #1
 8012658:	6123      	str	r3, [r4, #16]
 801265a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d0a2      	beq.n	80125a8 <_printf_float+0x88>
 8012662:	232d      	movs	r3, #45	; 0x2d
 8012664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012668:	e79e      	b.n	80125a8 <_printf_float+0x88>
 801266a:	9904      	ldr	r1, [sp, #16]
 801266c:	2947      	cmp	r1, #71	; 0x47
 801266e:	d1c1      	bne.n	80125f4 <_printf_float+0xd4>
 8012670:	2b00      	cmp	r3, #0
 8012672:	d1bf      	bne.n	80125f4 <_printf_float+0xd4>
 8012674:	2301      	movs	r3, #1
 8012676:	e7bc      	b.n	80125f2 <_printf_float+0xd2>
 8012678:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801267c:	d118      	bne.n	80126b0 <_printf_float+0x190>
 801267e:	2900      	cmp	r1, #0
 8012680:	6863      	ldr	r3, [r4, #4]
 8012682:	dd0b      	ble.n	801269c <_printf_float+0x17c>
 8012684:	6121      	str	r1, [r4, #16]
 8012686:	b913      	cbnz	r3, 801268e <_printf_float+0x16e>
 8012688:	6822      	ldr	r2, [r4, #0]
 801268a:	07d0      	lsls	r0, r2, #31
 801268c:	d502      	bpl.n	8012694 <_printf_float+0x174>
 801268e:	3301      	adds	r3, #1
 8012690:	440b      	add	r3, r1
 8012692:	6123      	str	r3, [r4, #16]
 8012694:	2300      	movs	r3, #0
 8012696:	65a1      	str	r1, [r4, #88]	; 0x58
 8012698:	9304      	str	r3, [sp, #16]
 801269a:	e7de      	b.n	801265a <_printf_float+0x13a>
 801269c:	b913      	cbnz	r3, 80126a4 <_printf_float+0x184>
 801269e:	6822      	ldr	r2, [r4, #0]
 80126a0:	07d2      	lsls	r2, r2, #31
 80126a2:	d501      	bpl.n	80126a8 <_printf_float+0x188>
 80126a4:	3302      	adds	r3, #2
 80126a6:	e7f4      	b.n	8012692 <_printf_float+0x172>
 80126a8:	2301      	movs	r3, #1
 80126aa:	e7f2      	b.n	8012692 <_printf_float+0x172>
 80126ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 80126b0:	9b08      	ldr	r3, [sp, #32]
 80126b2:	4299      	cmp	r1, r3
 80126b4:	db05      	blt.n	80126c2 <_printf_float+0x1a2>
 80126b6:	6823      	ldr	r3, [r4, #0]
 80126b8:	6121      	str	r1, [r4, #16]
 80126ba:	07d8      	lsls	r0, r3, #31
 80126bc:	d5ea      	bpl.n	8012694 <_printf_float+0x174>
 80126be:	1c4b      	adds	r3, r1, #1
 80126c0:	e7e7      	b.n	8012692 <_printf_float+0x172>
 80126c2:	2900      	cmp	r1, #0
 80126c4:	bfd4      	ite	le
 80126c6:	f1c1 0202 	rsble	r2, r1, #2
 80126ca:	2201      	movgt	r2, #1
 80126cc:	4413      	add	r3, r2
 80126ce:	e7e0      	b.n	8012692 <_printf_float+0x172>
 80126d0:	6823      	ldr	r3, [r4, #0]
 80126d2:	055a      	lsls	r2, r3, #21
 80126d4:	d407      	bmi.n	80126e6 <_printf_float+0x1c6>
 80126d6:	6923      	ldr	r3, [r4, #16]
 80126d8:	4642      	mov	r2, r8
 80126da:	4631      	mov	r1, r6
 80126dc:	4628      	mov	r0, r5
 80126de:	47b8      	blx	r7
 80126e0:	3001      	adds	r0, #1
 80126e2:	d12a      	bne.n	801273a <_printf_float+0x21a>
 80126e4:	e76a      	b.n	80125bc <_printf_float+0x9c>
 80126e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80126ea:	f240 80e2 	bls.w	80128b2 <_printf_float+0x392>
 80126ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80126f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80126f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126fa:	d133      	bne.n	8012764 <_printf_float+0x244>
 80126fc:	4a38      	ldr	r2, [pc, #224]	; (80127e0 <_printf_float+0x2c0>)
 80126fe:	2301      	movs	r3, #1
 8012700:	4631      	mov	r1, r6
 8012702:	4628      	mov	r0, r5
 8012704:	47b8      	blx	r7
 8012706:	3001      	adds	r0, #1
 8012708:	f43f af58 	beq.w	80125bc <_printf_float+0x9c>
 801270c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012710:	429a      	cmp	r2, r3
 8012712:	db02      	blt.n	801271a <_printf_float+0x1fa>
 8012714:	6823      	ldr	r3, [r4, #0]
 8012716:	07d8      	lsls	r0, r3, #31
 8012718:	d50f      	bpl.n	801273a <_printf_float+0x21a>
 801271a:	4653      	mov	r3, sl
 801271c:	465a      	mov	r2, fp
 801271e:	4631      	mov	r1, r6
 8012720:	4628      	mov	r0, r5
 8012722:	47b8      	blx	r7
 8012724:	3001      	adds	r0, #1
 8012726:	f43f af49 	beq.w	80125bc <_printf_float+0x9c>
 801272a:	f04f 0800 	mov.w	r8, #0
 801272e:	f104 091a 	add.w	r9, r4, #26
 8012732:	9b08      	ldr	r3, [sp, #32]
 8012734:	3b01      	subs	r3, #1
 8012736:	4543      	cmp	r3, r8
 8012738:	dc09      	bgt.n	801274e <_printf_float+0x22e>
 801273a:	6823      	ldr	r3, [r4, #0]
 801273c:	079b      	lsls	r3, r3, #30
 801273e:	f100 8108 	bmi.w	8012952 <_printf_float+0x432>
 8012742:	68e0      	ldr	r0, [r4, #12]
 8012744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012746:	4298      	cmp	r0, r3
 8012748:	bfb8      	it	lt
 801274a:	4618      	movlt	r0, r3
 801274c:	e738      	b.n	80125c0 <_printf_float+0xa0>
 801274e:	2301      	movs	r3, #1
 8012750:	464a      	mov	r2, r9
 8012752:	4631      	mov	r1, r6
 8012754:	4628      	mov	r0, r5
 8012756:	47b8      	blx	r7
 8012758:	3001      	adds	r0, #1
 801275a:	f43f af2f 	beq.w	80125bc <_printf_float+0x9c>
 801275e:	f108 0801 	add.w	r8, r8, #1
 8012762:	e7e6      	b.n	8012732 <_printf_float+0x212>
 8012764:	9b07      	ldr	r3, [sp, #28]
 8012766:	2b00      	cmp	r3, #0
 8012768:	dc3c      	bgt.n	80127e4 <_printf_float+0x2c4>
 801276a:	4a1d      	ldr	r2, [pc, #116]	; (80127e0 <_printf_float+0x2c0>)
 801276c:	2301      	movs	r3, #1
 801276e:	4631      	mov	r1, r6
 8012770:	4628      	mov	r0, r5
 8012772:	47b8      	blx	r7
 8012774:	3001      	adds	r0, #1
 8012776:	f43f af21 	beq.w	80125bc <_printf_float+0x9c>
 801277a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801277e:	4313      	orrs	r3, r2
 8012780:	d102      	bne.n	8012788 <_printf_float+0x268>
 8012782:	6823      	ldr	r3, [r4, #0]
 8012784:	07d9      	lsls	r1, r3, #31
 8012786:	d5d8      	bpl.n	801273a <_printf_float+0x21a>
 8012788:	4653      	mov	r3, sl
 801278a:	465a      	mov	r2, fp
 801278c:	4631      	mov	r1, r6
 801278e:	4628      	mov	r0, r5
 8012790:	47b8      	blx	r7
 8012792:	3001      	adds	r0, #1
 8012794:	f43f af12 	beq.w	80125bc <_printf_float+0x9c>
 8012798:	f04f 0900 	mov.w	r9, #0
 801279c:	f104 0a1a 	add.w	sl, r4, #26
 80127a0:	9b07      	ldr	r3, [sp, #28]
 80127a2:	425b      	negs	r3, r3
 80127a4:	454b      	cmp	r3, r9
 80127a6:	dc01      	bgt.n	80127ac <_printf_float+0x28c>
 80127a8:	9b08      	ldr	r3, [sp, #32]
 80127aa:	e795      	b.n	80126d8 <_printf_float+0x1b8>
 80127ac:	2301      	movs	r3, #1
 80127ae:	4652      	mov	r2, sl
 80127b0:	4631      	mov	r1, r6
 80127b2:	4628      	mov	r0, r5
 80127b4:	47b8      	blx	r7
 80127b6:	3001      	adds	r0, #1
 80127b8:	f43f af00 	beq.w	80125bc <_printf_float+0x9c>
 80127bc:	f109 0901 	add.w	r9, r9, #1
 80127c0:	e7ee      	b.n	80127a0 <_printf_float+0x280>
 80127c2:	bf00      	nop
 80127c4:	f3af 8000 	nop.w
 80127c8:	ffffffff 	.word	0xffffffff
 80127cc:	7fefffff 	.word	0x7fefffff
 80127d0:	0801682c 	.word	0x0801682c
 80127d4:	08016830 	.word	0x08016830
 80127d8:	08016838 	.word	0x08016838
 80127dc:	08016834 	.word	0x08016834
 80127e0:	0801683c 	.word	0x0801683c
 80127e4:	9a08      	ldr	r2, [sp, #32]
 80127e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80127e8:	429a      	cmp	r2, r3
 80127ea:	bfa8      	it	ge
 80127ec:	461a      	movge	r2, r3
 80127ee:	2a00      	cmp	r2, #0
 80127f0:	4691      	mov	r9, r2
 80127f2:	dc38      	bgt.n	8012866 <_printf_float+0x346>
 80127f4:	2300      	movs	r3, #0
 80127f6:	9305      	str	r3, [sp, #20]
 80127f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80127fc:	f104 021a 	add.w	r2, r4, #26
 8012800:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012802:	9905      	ldr	r1, [sp, #20]
 8012804:	9304      	str	r3, [sp, #16]
 8012806:	eba3 0309 	sub.w	r3, r3, r9
 801280a:	428b      	cmp	r3, r1
 801280c:	dc33      	bgt.n	8012876 <_printf_float+0x356>
 801280e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012812:	429a      	cmp	r2, r3
 8012814:	db3c      	blt.n	8012890 <_printf_float+0x370>
 8012816:	6823      	ldr	r3, [r4, #0]
 8012818:	07da      	lsls	r2, r3, #31
 801281a:	d439      	bmi.n	8012890 <_printf_float+0x370>
 801281c:	9b08      	ldr	r3, [sp, #32]
 801281e:	9a04      	ldr	r2, [sp, #16]
 8012820:	9907      	ldr	r1, [sp, #28]
 8012822:	1a9a      	subs	r2, r3, r2
 8012824:	eba3 0901 	sub.w	r9, r3, r1
 8012828:	4591      	cmp	r9, r2
 801282a:	bfa8      	it	ge
 801282c:	4691      	movge	r9, r2
 801282e:	f1b9 0f00 	cmp.w	r9, #0
 8012832:	dc35      	bgt.n	80128a0 <_printf_float+0x380>
 8012834:	f04f 0800 	mov.w	r8, #0
 8012838:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801283c:	f104 0a1a 	add.w	sl, r4, #26
 8012840:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012844:	1a9b      	subs	r3, r3, r2
 8012846:	eba3 0309 	sub.w	r3, r3, r9
 801284a:	4543      	cmp	r3, r8
 801284c:	f77f af75 	ble.w	801273a <_printf_float+0x21a>
 8012850:	2301      	movs	r3, #1
 8012852:	4652      	mov	r2, sl
 8012854:	4631      	mov	r1, r6
 8012856:	4628      	mov	r0, r5
 8012858:	47b8      	blx	r7
 801285a:	3001      	adds	r0, #1
 801285c:	f43f aeae 	beq.w	80125bc <_printf_float+0x9c>
 8012860:	f108 0801 	add.w	r8, r8, #1
 8012864:	e7ec      	b.n	8012840 <_printf_float+0x320>
 8012866:	4613      	mov	r3, r2
 8012868:	4631      	mov	r1, r6
 801286a:	4642      	mov	r2, r8
 801286c:	4628      	mov	r0, r5
 801286e:	47b8      	blx	r7
 8012870:	3001      	adds	r0, #1
 8012872:	d1bf      	bne.n	80127f4 <_printf_float+0x2d4>
 8012874:	e6a2      	b.n	80125bc <_printf_float+0x9c>
 8012876:	2301      	movs	r3, #1
 8012878:	4631      	mov	r1, r6
 801287a:	4628      	mov	r0, r5
 801287c:	9204      	str	r2, [sp, #16]
 801287e:	47b8      	blx	r7
 8012880:	3001      	adds	r0, #1
 8012882:	f43f ae9b 	beq.w	80125bc <_printf_float+0x9c>
 8012886:	9b05      	ldr	r3, [sp, #20]
 8012888:	9a04      	ldr	r2, [sp, #16]
 801288a:	3301      	adds	r3, #1
 801288c:	9305      	str	r3, [sp, #20]
 801288e:	e7b7      	b.n	8012800 <_printf_float+0x2e0>
 8012890:	4653      	mov	r3, sl
 8012892:	465a      	mov	r2, fp
 8012894:	4631      	mov	r1, r6
 8012896:	4628      	mov	r0, r5
 8012898:	47b8      	blx	r7
 801289a:	3001      	adds	r0, #1
 801289c:	d1be      	bne.n	801281c <_printf_float+0x2fc>
 801289e:	e68d      	b.n	80125bc <_printf_float+0x9c>
 80128a0:	9a04      	ldr	r2, [sp, #16]
 80128a2:	464b      	mov	r3, r9
 80128a4:	4442      	add	r2, r8
 80128a6:	4631      	mov	r1, r6
 80128a8:	4628      	mov	r0, r5
 80128aa:	47b8      	blx	r7
 80128ac:	3001      	adds	r0, #1
 80128ae:	d1c1      	bne.n	8012834 <_printf_float+0x314>
 80128b0:	e684      	b.n	80125bc <_printf_float+0x9c>
 80128b2:	9a08      	ldr	r2, [sp, #32]
 80128b4:	2a01      	cmp	r2, #1
 80128b6:	dc01      	bgt.n	80128bc <_printf_float+0x39c>
 80128b8:	07db      	lsls	r3, r3, #31
 80128ba:	d537      	bpl.n	801292c <_printf_float+0x40c>
 80128bc:	2301      	movs	r3, #1
 80128be:	4642      	mov	r2, r8
 80128c0:	4631      	mov	r1, r6
 80128c2:	4628      	mov	r0, r5
 80128c4:	47b8      	blx	r7
 80128c6:	3001      	adds	r0, #1
 80128c8:	f43f ae78 	beq.w	80125bc <_printf_float+0x9c>
 80128cc:	4653      	mov	r3, sl
 80128ce:	465a      	mov	r2, fp
 80128d0:	4631      	mov	r1, r6
 80128d2:	4628      	mov	r0, r5
 80128d4:	47b8      	blx	r7
 80128d6:	3001      	adds	r0, #1
 80128d8:	f43f ae70 	beq.w	80125bc <_printf_float+0x9c>
 80128dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80128e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80128e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e8:	d01b      	beq.n	8012922 <_printf_float+0x402>
 80128ea:	9b08      	ldr	r3, [sp, #32]
 80128ec:	f108 0201 	add.w	r2, r8, #1
 80128f0:	3b01      	subs	r3, #1
 80128f2:	4631      	mov	r1, r6
 80128f4:	4628      	mov	r0, r5
 80128f6:	47b8      	blx	r7
 80128f8:	3001      	adds	r0, #1
 80128fa:	d10e      	bne.n	801291a <_printf_float+0x3fa>
 80128fc:	e65e      	b.n	80125bc <_printf_float+0x9c>
 80128fe:	2301      	movs	r3, #1
 8012900:	464a      	mov	r2, r9
 8012902:	4631      	mov	r1, r6
 8012904:	4628      	mov	r0, r5
 8012906:	47b8      	blx	r7
 8012908:	3001      	adds	r0, #1
 801290a:	f43f ae57 	beq.w	80125bc <_printf_float+0x9c>
 801290e:	f108 0801 	add.w	r8, r8, #1
 8012912:	9b08      	ldr	r3, [sp, #32]
 8012914:	3b01      	subs	r3, #1
 8012916:	4543      	cmp	r3, r8
 8012918:	dcf1      	bgt.n	80128fe <_printf_float+0x3de>
 801291a:	9b04      	ldr	r3, [sp, #16]
 801291c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012920:	e6db      	b.n	80126da <_printf_float+0x1ba>
 8012922:	f04f 0800 	mov.w	r8, #0
 8012926:	f104 091a 	add.w	r9, r4, #26
 801292a:	e7f2      	b.n	8012912 <_printf_float+0x3f2>
 801292c:	2301      	movs	r3, #1
 801292e:	4642      	mov	r2, r8
 8012930:	e7df      	b.n	80128f2 <_printf_float+0x3d2>
 8012932:	2301      	movs	r3, #1
 8012934:	464a      	mov	r2, r9
 8012936:	4631      	mov	r1, r6
 8012938:	4628      	mov	r0, r5
 801293a:	47b8      	blx	r7
 801293c:	3001      	adds	r0, #1
 801293e:	f43f ae3d 	beq.w	80125bc <_printf_float+0x9c>
 8012942:	f108 0801 	add.w	r8, r8, #1
 8012946:	68e3      	ldr	r3, [r4, #12]
 8012948:	9909      	ldr	r1, [sp, #36]	; 0x24
 801294a:	1a5b      	subs	r3, r3, r1
 801294c:	4543      	cmp	r3, r8
 801294e:	dcf0      	bgt.n	8012932 <_printf_float+0x412>
 8012950:	e6f7      	b.n	8012742 <_printf_float+0x222>
 8012952:	f04f 0800 	mov.w	r8, #0
 8012956:	f104 0919 	add.w	r9, r4, #25
 801295a:	e7f4      	b.n	8012946 <_printf_float+0x426>

0801295c <_printf_common>:
 801295c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012960:	4616      	mov	r6, r2
 8012962:	4699      	mov	r9, r3
 8012964:	688a      	ldr	r2, [r1, #8]
 8012966:	690b      	ldr	r3, [r1, #16]
 8012968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801296c:	4293      	cmp	r3, r2
 801296e:	bfb8      	it	lt
 8012970:	4613      	movlt	r3, r2
 8012972:	6033      	str	r3, [r6, #0]
 8012974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012978:	4607      	mov	r7, r0
 801297a:	460c      	mov	r4, r1
 801297c:	b10a      	cbz	r2, 8012982 <_printf_common+0x26>
 801297e:	3301      	adds	r3, #1
 8012980:	6033      	str	r3, [r6, #0]
 8012982:	6823      	ldr	r3, [r4, #0]
 8012984:	0699      	lsls	r1, r3, #26
 8012986:	bf42      	ittt	mi
 8012988:	6833      	ldrmi	r3, [r6, #0]
 801298a:	3302      	addmi	r3, #2
 801298c:	6033      	strmi	r3, [r6, #0]
 801298e:	6825      	ldr	r5, [r4, #0]
 8012990:	f015 0506 	ands.w	r5, r5, #6
 8012994:	d106      	bne.n	80129a4 <_printf_common+0x48>
 8012996:	f104 0a19 	add.w	sl, r4, #25
 801299a:	68e3      	ldr	r3, [r4, #12]
 801299c:	6832      	ldr	r2, [r6, #0]
 801299e:	1a9b      	subs	r3, r3, r2
 80129a0:	42ab      	cmp	r3, r5
 80129a2:	dc26      	bgt.n	80129f2 <_printf_common+0x96>
 80129a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80129a8:	1e13      	subs	r3, r2, #0
 80129aa:	6822      	ldr	r2, [r4, #0]
 80129ac:	bf18      	it	ne
 80129ae:	2301      	movne	r3, #1
 80129b0:	0692      	lsls	r2, r2, #26
 80129b2:	d42b      	bmi.n	8012a0c <_printf_common+0xb0>
 80129b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80129b8:	4649      	mov	r1, r9
 80129ba:	4638      	mov	r0, r7
 80129bc:	47c0      	blx	r8
 80129be:	3001      	adds	r0, #1
 80129c0:	d01e      	beq.n	8012a00 <_printf_common+0xa4>
 80129c2:	6823      	ldr	r3, [r4, #0]
 80129c4:	68e5      	ldr	r5, [r4, #12]
 80129c6:	6832      	ldr	r2, [r6, #0]
 80129c8:	f003 0306 	and.w	r3, r3, #6
 80129cc:	2b04      	cmp	r3, #4
 80129ce:	bf08      	it	eq
 80129d0:	1aad      	subeq	r5, r5, r2
 80129d2:	68a3      	ldr	r3, [r4, #8]
 80129d4:	6922      	ldr	r2, [r4, #16]
 80129d6:	bf0c      	ite	eq
 80129d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129dc:	2500      	movne	r5, #0
 80129de:	4293      	cmp	r3, r2
 80129e0:	bfc4      	itt	gt
 80129e2:	1a9b      	subgt	r3, r3, r2
 80129e4:	18ed      	addgt	r5, r5, r3
 80129e6:	2600      	movs	r6, #0
 80129e8:	341a      	adds	r4, #26
 80129ea:	42b5      	cmp	r5, r6
 80129ec:	d11a      	bne.n	8012a24 <_printf_common+0xc8>
 80129ee:	2000      	movs	r0, #0
 80129f0:	e008      	b.n	8012a04 <_printf_common+0xa8>
 80129f2:	2301      	movs	r3, #1
 80129f4:	4652      	mov	r2, sl
 80129f6:	4649      	mov	r1, r9
 80129f8:	4638      	mov	r0, r7
 80129fa:	47c0      	blx	r8
 80129fc:	3001      	adds	r0, #1
 80129fe:	d103      	bne.n	8012a08 <_printf_common+0xac>
 8012a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a08:	3501      	adds	r5, #1
 8012a0a:	e7c6      	b.n	801299a <_printf_common+0x3e>
 8012a0c:	18e1      	adds	r1, r4, r3
 8012a0e:	1c5a      	adds	r2, r3, #1
 8012a10:	2030      	movs	r0, #48	; 0x30
 8012a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012a16:	4422      	add	r2, r4
 8012a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a20:	3302      	adds	r3, #2
 8012a22:	e7c7      	b.n	80129b4 <_printf_common+0x58>
 8012a24:	2301      	movs	r3, #1
 8012a26:	4622      	mov	r2, r4
 8012a28:	4649      	mov	r1, r9
 8012a2a:	4638      	mov	r0, r7
 8012a2c:	47c0      	blx	r8
 8012a2e:	3001      	adds	r0, #1
 8012a30:	d0e6      	beq.n	8012a00 <_printf_common+0xa4>
 8012a32:	3601      	adds	r6, #1
 8012a34:	e7d9      	b.n	80129ea <_printf_common+0x8e>
	...

08012a38 <_printf_i>:
 8012a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a3c:	7e0f      	ldrb	r7, [r1, #24]
 8012a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012a40:	2f78      	cmp	r7, #120	; 0x78
 8012a42:	4691      	mov	r9, r2
 8012a44:	4680      	mov	r8, r0
 8012a46:	460c      	mov	r4, r1
 8012a48:	469a      	mov	sl, r3
 8012a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012a4e:	d807      	bhi.n	8012a60 <_printf_i+0x28>
 8012a50:	2f62      	cmp	r7, #98	; 0x62
 8012a52:	d80a      	bhi.n	8012a6a <_printf_i+0x32>
 8012a54:	2f00      	cmp	r7, #0
 8012a56:	f000 80d8 	beq.w	8012c0a <_printf_i+0x1d2>
 8012a5a:	2f58      	cmp	r7, #88	; 0x58
 8012a5c:	f000 80a3 	beq.w	8012ba6 <_printf_i+0x16e>
 8012a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012a68:	e03a      	b.n	8012ae0 <_printf_i+0xa8>
 8012a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012a6e:	2b15      	cmp	r3, #21
 8012a70:	d8f6      	bhi.n	8012a60 <_printf_i+0x28>
 8012a72:	a101      	add	r1, pc, #4	; (adr r1, 8012a78 <_printf_i+0x40>)
 8012a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a78:	08012ad1 	.word	0x08012ad1
 8012a7c:	08012ae5 	.word	0x08012ae5
 8012a80:	08012a61 	.word	0x08012a61
 8012a84:	08012a61 	.word	0x08012a61
 8012a88:	08012a61 	.word	0x08012a61
 8012a8c:	08012a61 	.word	0x08012a61
 8012a90:	08012ae5 	.word	0x08012ae5
 8012a94:	08012a61 	.word	0x08012a61
 8012a98:	08012a61 	.word	0x08012a61
 8012a9c:	08012a61 	.word	0x08012a61
 8012aa0:	08012a61 	.word	0x08012a61
 8012aa4:	08012bf1 	.word	0x08012bf1
 8012aa8:	08012b15 	.word	0x08012b15
 8012aac:	08012bd3 	.word	0x08012bd3
 8012ab0:	08012a61 	.word	0x08012a61
 8012ab4:	08012a61 	.word	0x08012a61
 8012ab8:	08012c13 	.word	0x08012c13
 8012abc:	08012a61 	.word	0x08012a61
 8012ac0:	08012b15 	.word	0x08012b15
 8012ac4:	08012a61 	.word	0x08012a61
 8012ac8:	08012a61 	.word	0x08012a61
 8012acc:	08012bdb 	.word	0x08012bdb
 8012ad0:	682b      	ldr	r3, [r5, #0]
 8012ad2:	1d1a      	adds	r2, r3, #4
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	602a      	str	r2, [r5, #0]
 8012ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	e0a3      	b.n	8012c2c <_printf_i+0x1f4>
 8012ae4:	6820      	ldr	r0, [r4, #0]
 8012ae6:	6829      	ldr	r1, [r5, #0]
 8012ae8:	0606      	lsls	r6, r0, #24
 8012aea:	f101 0304 	add.w	r3, r1, #4
 8012aee:	d50a      	bpl.n	8012b06 <_printf_i+0xce>
 8012af0:	680e      	ldr	r6, [r1, #0]
 8012af2:	602b      	str	r3, [r5, #0]
 8012af4:	2e00      	cmp	r6, #0
 8012af6:	da03      	bge.n	8012b00 <_printf_i+0xc8>
 8012af8:	232d      	movs	r3, #45	; 0x2d
 8012afa:	4276      	negs	r6, r6
 8012afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b00:	485e      	ldr	r0, [pc, #376]	; (8012c7c <_printf_i+0x244>)
 8012b02:	230a      	movs	r3, #10
 8012b04:	e019      	b.n	8012b3a <_printf_i+0x102>
 8012b06:	680e      	ldr	r6, [r1, #0]
 8012b08:	602b      	str	r3, [r5, #0]
 8012b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012b0e:	bf18      	it	ne
 8012b10:	b236      	sxthne	r6, r6
 8012b12:	e7ef      	b.n	8012af4 <_printf_i+0xbc>
 8012b14:	682b      	ldr	r3, [r5, #0]
 8012b16:	6820      	ldr	r0, [r4, #0]
 8012b18:	1d19      	adds	r1, r3, #4
 8012b1a:	6029      	str	r1, [r5, #0]
 8012b1c:	0601      	lsls	r1, r0, #24
 8012b1e:	d501      	bpl.n	8012b24 <_printf_i+0xec>
 8012b20:	681e      	ldr	r6, [r3, #0]
 8012b22:	e002      	b.n	8012b2a <_printf_i+0xf2>
 8012b24:	0646      	lsls	r6, r0, #25
 8012b26:	d5fb      	bpl.n	8012b20 <_printf_i+0xe8>
 8012b28:	881e      	ldrh	r6, [r3, #0]
 8012b2a:	4854      	ldr	r0, [pc, #336]	; (8012c7c <_printf_i+0x244>)
 8012b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8012b2e:	bf0c      	ite	eq
 8012b30:	2308      	moveq	r3, #8
 8012b32:	230a      	movne	r3, #10
 8012b34:	2100      	movs	r1, #0
 8012b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b3a:	6865      	ldr	r5, [r4, #4]
 8012b3c:	60a5      	str	r5, [r4, #8]
 8012b3e:	2d00      	cmp	r5, #0
 8012b40:	bfa2      	ittt	ge
 8012b42:	6821      	ldrge	r1, [r4, #0]
 8012b44:	f021 0104 	bicge.w	r1, r1, #4
 8012b48:	6021      	strge	r1, [r4, #0]
 8012b4a:	b90e      	cbnz	r6, 8012b50 <_printf_i+0x118>
 8012b4c:	2d00      	cmp	r5, #0
 8012b4e:	d04d      	beq.n	8012bec <_printf_i+0x1b4>
 8012b50:	4615      	mov	r5, r2
 8012b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8012b56:	fb03 6711 	mls	r7, r3, r1, r6
 8012b5a:	5dc7      	ldrb	r7, [r0, r7]
 8012b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b60:	4637      	mov	r7, r6
 8012b62:	42bb      	cmp	r3, r7
 8012b64:	460e      	mov	r6, r1
 8012b66:	d9f4      	bls.n	8012b52 <_printf_i+0x11a>
 8012b68:	2b08      	cmp	r3, #8
 8012b6a:	d10b      	bne.n	8012b84 <_printf_i+0x14c>
 8012b6c:	6823      	ldr	r3, [r4, #0]
 8012b6e:	07de      	lsls	r6, r3, #31
 8012b70:	d508      	bpl.n	8012b84 <_printf_i+0x14c>
 8012b72:	6923      	ldr	r3, [r4, #16]
 8012b74:	6861      	ldr	r1, [r4, #4]
 8012b76:	4299      	cmp	r1, r3
 8012b78:	bfde      	ittt	le
 8012b7a:	2330      	movle	r3, #48	; 0x30
 8012b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012b84:	1b52      	subs	r2, r2, r5
 8012b86:	6122      	str	r2, [r4, #16]
 8012b88:	f8cd a000 	str.w	sl, [sp]
 8012b8c:	464b      	mov	r3, r9
 8012b8e:	aa03      	add	r2, sp, #12
 8012b90:	4621      	mov	r1, r4
 8012b92:	4640      	mov	r0, r8
 8012b94:	f7ff fee2 	bl	801295c <_printf_common>
 8012b98:	3001      	adds	r0, #1
 8012b9a:	d14c      	bne.n	8012c36 <_printf_i+0x1fe>
 8012b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ba0:	b004      	add	sp, #16
 8012ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ba6:	4835      	ldr	r0, [pc, #212]	; (8012c7c <_printf_i+0x244>)
 8012ba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012bac:	6829      	ldr	r1, [r5, #0]
 8012bae:	6823      	ldr	r3, [r4, #0]
 8012bb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8012bb4:	6029      	str	r1, [r5, #0]
 8012bb6:	061d      	lsls	r5, r3, #24
 8012bb8:	d514      	bpl.n	8012be4 <_printf_i+0x1ac>
 8012bba:	07df      	lsls	r7, r3, #31
 8012bbc:	bf44      	itt	mi
 8012bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8012bc2:	6023      	strmi	r3, [r4, #0]
 8012bc4:	b91e      	cbnz	r6, 8012bce <_printf_i+0x196>
 8012bc6:	6823      	ldr	r3, [r4, #0]
 8012bc8:	f023 0320 	bic.w	r3, r3, #32
 8012bcc:	6023      	str	r3, [r4, #0]
 8012bce:	2310      	movs	r3, #16
 8012bd0:	e7b0      	b.n	8012b34 <_printf_i+0xfc>
 8012bd2:	6823      	ldr	r3, [r4, #0]
 8012bd4:	f043 0320 	orr.w	r3, r3, #32
 8012bd8:	6023      	str	r3, [r4, #0]
 8012bda:	2378      	movs	r3, #120	; 0x78
 8012bdc:	4828      	ldr	r0, [pc, #160]	; (8012c80 <_printf_i+0x248>)
 8012bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012be2:	e7e3      	b.n	8012bac <_printf_i+0x174>
 8012be4:	0659      	lsls	r1, r3, #25
 8012be6:	bf48      	it	mi
 8012be8:	b2b6      	uxthmi	r6, r6
 8012bea:	e7e6      	b.n	8012bba <_printf_i+0x182>
 8012bec:	4615      	mov	r5, r2
 8012bee:	e7bb      	b.n	8012b68 <_printf_i+0x130>
 8012bf0:	682b      	ldr	r3, [r5, #0]
 8012bf2:	6826      	ldr	r6, [r4, #0]
 8012bf4:	6961      	ldr	r1, [r4, #20]
 8012bf6:	1d18      	adds	r0, r3, #4
 8012bf8:	6028      	str	r0, [r5, #0]
 8012bfa:	0635      	lsls	r5, r6, #24
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	d501      	bpl.n	8012c04 <_printf_i+0x1cc>
 8012c00:	6019      	str	r1, [r3, #0]
 8012c02:	e002      	b.n	8012c0a <_printf_i+0x1d2>
 8012c04:	0670      	lsls	r0, r6, #25
 8012c06:	d5fb      	bpl.n	8012c00 <_printf_i+0x1c8>
 8012c08:	8019      	strh	r1, [r3, #0]
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	6123      	str	r3, [r4, #16]
 8012c0e:	4615      	mov	r5, r2
 8012c10:	e7ba      	b.n	8012b88 <_printf_i+0x150>
 8012c12:	682b      	ldr	r3, [r5, #0]
 8012c14:	1d1a      	adds	r2, r3, #4
 8012c16:	602a      	str	r2, [r5, #0]
 8012c18:	681d      	ldr	r5, [r3, #0]
 8012c1a:	6862      	ldr	r2, [r4, #4]
 8012c1c:	2100      	movs	r1, #0
 8012c1e:	4628      	mov	r0, r5
 8012c20:	f7ed fb66 	bl	80002f0 <memchr>
 8012c24:	b108      	cbz	r0, 8012c2a <_printf_i+0x1f2>
 8012c26:	1b40      	subs	r0, r0, r5
 8012c28:	6060      	str	r0, [r4, #4]
 8012c2a:	6863      	ldr	r3, [r4, #4]
 8012c2c:	6123      	str	r3, [r4, #16]
 8012c2e:	2300      	movs	r3, #0
 8012c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c34:	e7a8      	b.n	8012b88 <_printf_i+0x150>
 8012c36:	6923      	ldr	r3, [r4, #16]
 8012c38:	462a      	mov	r2, r5
 8012c3a:	4649      	mov	r1, r9
 8012c3c:	4640      	mov	r0, r8
 8012c3e:	47d0      	blx	sl
 8012c40:	3001      	adds	r0, #1
 8012c42:	d0ab      	beq.n	8012b9c <_printf_i+0x164>
 8012c44:	6823      	ldr	r3, [r4, #0]
 8012c46:	079b      	lsls	r3, r3, #30
 8012c48:	d413      	bmi.n	8012c72 <_printf_i+0x23a>
 8012c4a:	68e0      	ldr	r0, [r4, #12]
 8012c4c:	9b03      	ldr	r3, [sp, #12]
 8012c4e:	4298      	cmp	r0, r3
 8012c50:	bfb8      	it	lt
 8012c52:	4618      	movlt	r0, r3
 8012c54:	e7a4      	b.n	8012ba0 <_printf_i+0x168>
 8012c56:	2301      	movs	r3, #1
 8012c58:	4632      	mov	r2, r6
 8012c5a:	4649      	mov	r1, r9
 8012c5c:	4640      	mov	r0, r8
 8012c5e:	47d0      	blx	sl
 8012c60:	3001      	adds	r0, #1
 8012c62:	d09b      	beq.n	8012b9c <_printf_i+0x164>
 8012c64:	3501      	adds	r5, #1
 8012c66:	68e3      	ldr	r3, [r4, #12]
 8012c68:	9903      	ldr	r1, [sp, #12]
 8012c6a:	1a5b      	subs	r3, r3, r1
 8012c6c:	42ab      	cmp	r3, r5
 8012c6e:	dcf2      	bgt.n	8012c56 <_printf_i+0x21e>
 8012c70:	e7eb      	b.n	8012c4a <_printf_i+0x212>
 8012c72:	2500      	movs	r5, #0
 8012c74:	f104 0619 	add.w	r6, r4, #25
 8012c78:	e7f5      	b.n	8012c66 <_printf_i+0x22e>
 8012c7a:	bf00      	nop
 8012c7c:	0801683e 	.word	0x0801683e
 8012c80:	0801684f 	.word	0x0801684f

08012c84 <quorem>:
 8012c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c88:	6903      	ldr	r3, [r0, #16]
 8012c8a:	690c      	ldr	r4, [r1, #16]
 8012c8c:	42a3      	cmp	r3, r4
 8012c8e:	4607      	mov	r7, r0
 8012c90:	f2c0 8081 	blt.w	8012d96 <quorem+0x112>
 8012c94:	3c01      	subs	r4, #1
 8012c96:	f101 0814 	add.w	r8, r1, #20
 8012c9a:	f100 0514 	add.w	r5, r0, #20
 8012c9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ca2:	9301      	str	r3, [sp, #4]
 8012ca4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012ca8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012cac:	3301      	adds	r3, #1
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012cb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012cb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8012cbc:	d331      	bcc.n	8012d22 <quorem+0x9e>
 8012cbe:	f04f 0e00 	mov.w	lr, #0
 8012cc2:	4640      	mov	r0, r8
 8012cc4:	46ac      	mov	ip, r5
 8012cc6:	46f2      	mov	sl, lr
 8012cc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8012ccc:	b293      	uxth	r3, r2
 8012cce:	fb06 e303 	mla	r3, r6, r3, lr
 8012cd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	ebaa 0303 	sub.w	r3, sl, r3
 8012cdc:	f8dc a000 	ldr.w	sl, [ip]
 8012ce0:	0c12      	lsrs	r2, r2, #16
 8012ce2:	fa13 f38a 	uxtah	r3, r3, sl
 8012ce6:	fb06 e202 	mla	r2, r6, r2, lr
 8012cea:	9300      	str	r3, [sp, #0]
 8012cec:	9b00      	ldr	r3, [sp, #0]
 8012cee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012cf2:	b292      	uxth	r2, r2
 8012cf4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012cf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012cfc:	f8bd 3000 	ldrh.w	r3, [sp]
 8012d00:	4581      	cmp	r9, r0
 8012d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d06:	f84c 3b04 	str.w	r3, [ip], #4
 8012d0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012d0e:	d2db      	bcs.n	8012cc8 <quorem+0x44>
 8012d10:	f855 300b 	ldr.w	r3, [r5, fp]
 8012d14:	b92b      	cbnz	r3, 8012d22 <quorem+0x9e>
 8012d16:	9b01      	ldr	r3, [sp, #4]
 8012d18:	3b04      	subs	r3, #4
 8012d1a:	429d      	cmp	r5, r3
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	d32e      	bcc.n	8012d7e <quorem+0xfa>
 8012d20:	613c      	str	r4, [r7, #16]
 8012d22:	4638      	mov	r0, r7
 8012d24:	f001 f846 	bl	8013db4 <__mcmp>
 8012d28:	2800      	cmp	r0, #0
 8012d2a:	db24      	blt.n	8012d76 <quorem+0xf2>
 8012d2c:	3601      	adds	r6, #1
 8012d2e:	4628      	mov	r0, r5
 8012d30:	f04f 0c00 	mov.w	ip, #0
 8012d34:	f858 2b04 	ldr.w	r2, [r8], #4
 8012d38:	f8d0 e000 	ldr.w	lr, [r0]
 8012d3c:	b293      	uxth	r3, r2
 8012d3e:	ebac 0303 	sub.w	r3, ip, r3
 8012d42:	0c12      	lsrs	r2, r2, #16
 8012d44:	fa13 f38e 	uxtah	r3, r3, lr
 8012d48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012d4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d56:	45c1      	cmp	r9, r8
 8012d58:	f840 3b04 	str.w	r3, [r0], #4
 8012d5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012d60:	d2e8      	bcs.n	8012d34 <quorem+0xb0>
 8012d62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d6a:	b922      	cbnz	r2, 8012d76 <quorem+0xf2>
 8012d6c:	3b04      	subs	r3, #4
 8012d6e:	429d      	cmp	r5, r3
 8012d70:	461a      	mov	r2, r3
 8012d72:	d30a      	bcc.n	8012d8a <quorem+0x106>
 8012d74:	613c      	str	r4, [r7, #16]
 8012d76:	4630      	mov	r0, r6
 8012d78:	b003      	add	sp, #12
 8012d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7e:	6812      	ldr	r2, [r2, #0]
 8012d80:	3b04      	subs	r3, #4
 8012d82:	2a00      	cmp	r2, #0
 8012d84:	d1cc      	bne.n	8012d20 <quorem+0x9c>
 8012d86:	3c01      	subs	r4, #1
 8012d88:	e7c7      	b.n	8012d1a <quorem+0x96>
 8012d8a:	6812      	ldr	r2, [r2, #0]
 8012d8c:	3b04      	subs	r3, #4
 8012d8e:	2a00      	cmp	r2, #0
 8012d90:	d1f0      	bne.n	8012d74 <quorem+0xf0>
 8012d92:	3c01      	subs	r4, #1
 8012d94:	e7eb      	b.n	8012d6e <quorem+0xea>
 8012d96:	2000      	movs	r0, #0
 8012d98:	e7ee      	b.n	8012d78 <quorem+0xf4>
 8012d9a:	0000      	movs	r0, r0
 8012d9c:	0000      	movs	r0, r0
	...

08012da0 <_dtoa_r>:
 8012da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da4:	ed2d 8b02 	vpush	{d8}
 8012da8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012daa:	b091      	sub	sp, #68	; 0x44
 8012dac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012db0:	ec59 8b10 	vmov	r8, r9, d0
 8012db4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012db6:	9106      	str	r1, [sp, #24]
 8012db8:	4606      	mov	r6, r0
 8012dba:	9208      	str	r2, [sp, #32]
 8012dbc:	930c      	str	r3, [sp, #48]	; 0x30
 8012dbe:	b975      	cbnz	r5, 8012dde <_dtoa_r+0x3e>
 8012dc0:	2010      	movs	r0, #16
 8012dc2:	f000 fd5f 	bl	8013884 <malloc>
 8012dc6:	4602      	mov	r2, r0
 8012dc8:	6270      	str	r0, [r6, #36]	; 0x24
 8012dca:	b920      	cbnz	r0, 8012dd6 <_dtoa_r+0x36>
 8012dcc:	4baa      	ldr	r3, [pc, #680]	; (8013078 <_dtoa_r+0x2d8>)
 8012dce:	21ea      	movs	r1, #234	; 0xea
 8012dd0:	48aa      	ldr	r0, [pc, #680]	; (801307c <_dtoa_r+0x2dc>)
 8012dd2:	f001 f9f7 	bl	80141c4 <__assert_func>
 8012dd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012dda:	6005      	str	r5, [r0, #0]
 8012ddc:	60c5      	str	r5, [r0, #12]
 8012dde:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012de0:	6819      	ldr	r1, [r3, #0]
 8012de2:	b151      	cbz	r1, 8012dfa <_dtoa_r+0x5a>
 8012de4:	685a      	ldr	r2, [r3, #4]
 8012de6:	604a      	str	r2, [r1, #4]
 8012de8:	2301      	movs	r3, #1
 8012dea:	4093      	lsls	r3, r2
 8012dec:	608b      	str	r3, [r1, #8]
 8012dee:	4630      	mov	r0, r6
 8012df0:	f000 fd9e 	bl	8013930 <_Bfree>
 8012df4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012df6:	2200      	movs	r2, #0
 8012df8:	601a      	str	r2, [r3, #0]
 8012dfa:	f1b9 0300 	subs.w	r3, r9, #0
 8012dfe:	bfbb      	ittet	lt
 8012e00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012e04:	9303      	strlt	r3, [sp, #12]
 8012e06:	2300      	movge	r3, #0
 8012e08:	2201      	movlt	r2, #1
 8012e0a:	bfac      	ite	ge
 8012e0c:	6023      	strge	r3, [r4, #0]
 8012e0e:	6022      	strlt	r2, [r4, #0]
 8012e10:	4b9b      	ldr	r3, [pc, #620]	; (8013080 <_dtoa_r+0x2e0>)
 8012e12:	9c03      	ldr	r4, [sp, #12]
 8012e14:	43a3      	bics	r3, r4
 8012e16:	d11c      	bne.n	8012e52 <_dtoa_r+0xb2>
 8012e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8012e1e:	6013      	str	r3, [r2, #0]
 8012e20:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012e24:	ea53 0308 	orrs.w	r3, r3, r8
 8012e28:	f000 84fd 	beq.w	8013826 <_dtoa_r+0xa86>
 8012e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e2e:	b963      	cbnz	r3, 8012e4a <_dtoa_r+0xaa>
 8012e30:	4b94      	ldr	r3, [pc, #592]	; (8013084 <_dtoa_r+0x2e4>)
 8012e32:	e01f      	b.n	8012e74 <_dtoa_r+0xd4>
 8012e34:	4b94      	ldr	r3, [pc, #592]	; (8013088 <_dtoa_r+0x2e8>)
 8012e36:	9301      	str	r3, [sp, #4]
 8012e38:	3308      	adds	r3, #8
 8012e3a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012e3c:	6013      	str	r3, [r2, #0]
 8012e3e:	9801      	ldr	r0, [sp, #4]
 8012e40:	b011      	add	sp, #68	; 0x44
 8012e42:	ecbd 8b02 	vpop	{d8}
 8012e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e4a:	4b8e      	ldr	r3, [pc, #568]	; (8013084 <_dtoa_r+0x2e4>)
 8012e4c:	9301      	str	r3, [sp, #4]
 8012e4e:	3303      	adds	r3, #3
 8012e50:	e7f3      	b.n	8012e3a <_dtoa_r+0x9a>
 8012e52:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012e56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e5e:	d10b      	bne.n	8012e78 <_dtoa_r+0xd8>
 8012e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e62:	2301      	movs	r3, #1
 8012e64:	6013      	str	r3, [r2, #0]
 8012e66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	f000 84d9 	beq.w	8013820 <_dtoa_r+0xa80>
 8012e6e:	4887      	ldr	r0, [pc, #540]	; (801308c <_dtoa_r+0x2ec>)
 8012e70:	6018      	str	r0, [r3, #0]
 8012e72:	1e43      	subs	r3, r0, #1
 8012e74:	9301      	str	r3, [sp, #4]
 8012e76:	e7e2      	b.n	8012e3e <_dtoa_r+0x9e>
 8012e78:	a90f      	add	r1, sp, #60	; 0x3c
 8012e7a:	aa0e      	add	r2, sp, #56	; 0x38
 8012e7c:	4630      	mov	r0, r6
 8012e7e:	eeb0 0b48 	vmov.f64	d0, d8
 8012e82:	f001 f83d 	bl	8013f00 <__d2b>
 8012e86:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012e8a:	4605      	mov	r5, r0
 8012e8c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012e8e:	2900      	cmp	r1, #0
 8012e90:	d046      	beq.n	8012f20 <_dtoa_r+0x180>
 8012e92:	ee18 4a90 	vmov	r4, s17
 8012e96:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012e9a:	ec53 2b18 	vmov	r2, r3, d8
 8012e9e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012ea2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012ea6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012eaa:	2400      	movs	r4, #0
 8012eac:	ec43 2b16 	vmov	d6, r2, r3
 8012eb0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012eb4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013060 <_dtoa_r+0x2c0>
 8012eb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012ebc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8013068 <_dtoa_r+0x2c8>
 8012ec0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012ec4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013070 <_dtoa_r+0x2d0>
 8012ec8:	ee07 1a90 	vmov	s15, r1
 8012ecc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012ed0:	eeb0 7b46 	vmov.f64	d7, d6
 8012ed4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012ed8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012edc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee4:	ee16 ba90 	vmov	fp, s13
 8012ee8:	940a      	str	r4, [sp, #40]	; 0x28
 8012eea:	d508      	bpl.n	8012efe <_dtoa_r+0x15e>
 8012eec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012ef0:	eeb4 6b47 	vcmp.f64	d6, d7
 8012ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef8:	bf18      	it	ne
 8012efa:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8012efe:	f1bb 0f16 	cmp.w	fp, #22
 8012f02:	d82f      	bhi.n	8012f64 <_dtoa_r+0x1c4>
 8012f04:	4b62      	ldr	r3, [pc, #392]	; (8013090 <_dtoa_r+0x2f0>)
 8012f06:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012f0a:	ed93 7b00 	vldr	d7, [r3]
 8012f0e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f16:	d501      	bpl.n	8012f1c <_dtoa_r+0x17c>
 8012f18:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	e022      	b.n	8012f66 <_dtoa_r+0x1c6>
 8012f20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012f22:	4401      	add	r1, r0
 8012f24:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012f28:	2b20      	cmp	r3, #32
 8012f2a:	bfc1      	itttt	gt
 8012f2c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012f30:	fa04 f303 	lslgt.w	r3, r4, r3
 8012f34:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012f38:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012f3c:	bfd6      	itet	le
 8012f3e:	f1c3 0320 	rsble	r3, r3, #32
 8012f42:	ea43 0808 	orrgt.w	r8, r3, r8
 8012f46:	fa08 f803 	lslle.w	r8, r8, r3
 8012f4a:	ee07 8a90 	vmov	s15, r8
 8012f4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012f52:	3901      	subs	r1, #1
 8012f54:	ee17 4a90 	vmov	r4, s15
 8012f58:	ec53 2b17 	vmov	r2, r3, d7
 8012f5c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012f60:	2401      	movs	r4, #1
 8012f62:	e7a3      	b.n	8012eac <_dtoa_r+0x10c>
 8012f64:	2301      	movs	r3, #1
 8012f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f68:	1a43      	subs	r3, r0, r1
 8012f6a:	1e5a      	subs	r2, r3, #1
 8012f6c:	bf45      	ittet	mi
 8012f6e:	f1c3 0301 	rsbmi	r3, r3, #1
 8012f72:	9304      	strmi	r3, [sp, #16]
 8012f74:	2300      	movpl	r3, #0
 8012f76:	2300      	movmi	r3, #0
 8012f78:	9205      	str	r2, [sp, #20]
 8012f7a:	bf54      	ite	pl
 8012f7c:	9304      	strpl	r3, [sp, #16]
 8012f7e:	9305      	strmi	r3, [sp, #20]
 8012f80:	f1bb 0f00 	cmp.w	fp, #0
 8012f84:	db18      	blt.n	8012fb8 <_dtoa_r+0x218>
 8012f86:	9b05      	ldr	r3, [sp, #20]
 8012f88:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012f8c:	445b      	add	r3, fp
 8012f8e:	9305      	str	r3, [sp, #20]
 8012f90:	2300      	movs	r3, #0
 8012f92:	9a06      	ldr	r2, [sp, #24]
 8012f94:	2a09      	cmp	r2, #9
 8012f96:	d849      	bhi.n	801302c <_dtoa_r+0x28c>
 8012f98:	2a05      	cmp	r2, #5
 8012f9a:	bfc4      	itt	gt
 8012f9c:	3a04      	subgt	r2, #4
 8012f9e:	9206      	strgt	r2, [sp, #24]
 8012fa0:	9a06      	ldr	r2, [sp, #24]
 8012fa2:	f1a2 0202 	sub.w	r2, r2, #2
 8012fa6:	bfcc      	ite	gt
 8012fa8:	2400      	movgt	r4, #0
 8012faa:	2401      	movle	r4, #1
 8012fac:	2a03      	cmp	r2, #3
 8012fae:	d848      	bhi.n	8013042 <_dtoa_r+0x2a2>
 8012fb0:	e8df f002 	tbb	[pc, r2]
 8012fb4:	3a2c2e0b 	.word	0x3a2c2e0b
 8012fb8:	9b04      	ldr	r3, [sp, #16]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	eba3 030b 	sub.w	r3, r3, fp
 8012fc0:	9304      	str	r3, [sp, #16]
 8012fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8012fc4:	f1cb 0300 	rsb	r3, fp, #0
 8012fc8:	e7e3      	b.n	8012f92 <_dtoa_r+0x1f2>
 8012fca:	2200      	movs	r2, #0
 8012fcc:	9207      	str	r2, [sp, #28]
 8012fce:	9a08      	ldr	r2, [sp, #32]
 8012fd0:	2a00      	cmp	r2, #0
 8012fd2:	dc39      	bgt.n	8013048 <_dtoa_r+0x2a8>
 8012fd4:	f04f 0a01 	mov.w	sl, #1
 8012fd8:	46d1      	mov	r9, sl
 8012fda:	4652      	mov	r2, sl
 8012fdc:	f8cd a020 	str.w	sl, [sp, #32]
 8012fe0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012fe2:	2100      	movs	r1, #0
 8012fe4:	6079      	str	r1, [r7, #4]
 8012fe6:	2004      	movs	r0, #4
 8012fe8:	f100 0c14 	add.w	ip, r0, #20
 8012fec:	4594      	cmp	ip, r2
 8012fee:	6879      	ldr	r1, [r7, #4]
 8012ff0:	d92f      	bls.n	8013052 <_dtoa_r+0x2b2>
 8012ff2:	4630      	mov	r0, r6
 8012ff4:	930d      	str	r3, [sp, #52]	; 0x34
 8012ff6:	f000 fc5b 	bl	80138b0 <_Balloc>
 8012ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ffc:	9001      	str	r0, [sp, #4]
 8012ffe:	4602      	mov	r2, r0
 8013000:	2800      	cmp	r0, #0
 8013002:	d149      	bne.n	8013098 <_dtoa_r+0x2f8>
 8013004:	4b23      	ldr	r3, [pc, #140]	; (8013094 <_dtoa_r+0x2f4>)
 8013006:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801300a:	e6e1      	b.n	8012dd0 <_dtoa_r+0x30>
 801300c:	2201      	movs	r2, #1
 801300e:	e7dd      	b.n	8012fcc <_dtoa_r+0x22c>
 8013010:	2200      	movs	r2, #0
 8013012:	9207      	str	r2, [sp, #28]
 8013014:	9a08      	ldr	r2, [sp, #32]
 8013016:	eb0b 0a02 	add.w	sl, fp, r2
 801301a:	f10a 0901 	add.w	r9, sl, #1
 801301e:	464a      	mov	r2, r9
 8013020:	2a01      	cmp	r2, #1
 8013022:	bfb8      	it	lt
 8013024:	2201      	movlt	r2, #1
 8013026:	e7db      	b.n	8012fe0 <_dtoa_r+0x240>
 8013028:	2201      	movs	r2, #1
 801302a:	e7f2      	b.n	8013012 <_dtoa_r+0x272>
 801302c:	2401      	movs	r4, #1
 801302e:	2200      	movs	r2, #0
 8013030:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8013034:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013038:	2100      	movs	r1, #0
 801303a:	46d1      	mov	r9, sl
 801303c:	2212      	movs	r2, #18
 801303e:	9108      	str	r1, [sp, #32]
 8013040:	e7ce      	b.n	8012fe0 <_dtoa_r+0x240>
 8013042:	2201      	movs	r2, #1
 8013044:	9207      	str	r2, [sp, #28]
 8013046:	e7f5      	b.n	8013034 <_dtoa_r+0x294>
 8013048:	f8dd a020 	ldr.w	sl, [sp, #32]
 801304c:	46d1      	mov	r9, sl
 801304e:	4652      	mov	r2, sl
 8013050:	e7c6      	b.n	8012fe0 <_dtoa_r+0x240>
 8013052:	3101      	adds	r1, #1
 8013054:	6079      	str	r1, [r7, #4]
 8013056:	0040      	lsls	r0, r0, #1
 8013058:	e7c6      	b.n	8012fe8 <_dtoa_r+0x248>
 801305a:	bf00      	nop
 801305c:	f3af 8000 	nop.w
 8013060:	636f4361 	.word	0x636f4361
 8013064:	3fd287a7 	.word	0x3fd287a7
 8013068:	8b60c8b3 	.word	0x8b60c8b3
 801306c:	3fc68a28 	.word	0x3fc68a28
 8013070:	509f79fb 	.word	0x509f79fb
 8013074:	3fd34413 	.word	0x3fd34413
 8013078:	0801686d 	.word	0x0801686d
 801307c:	08016884 	.word	0x08016884
 8013080:	7ff00000 	.word	0x7ff00000
 8013084:	08016869 	.word	0x08016869
 8013088:	08016860 	.word	0x08016860
 801308c:	0801683d 	.word	0x0801683d
 8013090:	08016978 	.word	0x08016978
 8013094:	080168df 	.word	0x080168df
 8013098:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801309a:	9901      	ldr	r1, [sp, #4]
 801309c:	6011      	str	r1, [r2, #0]
 801309e:	f1b9 0f0e 	cmp.w	r9, #14
 80130a2:	d86c      	bhi.n	801317e <_dtoa_r+0x3de>
 80130a4:	2c00      	cmp	r4, #0
 80130a6:	d06a      	beq.n	801317e <_dtoa_r+0x3de>
 80130a8:	f1bb 0f00 	cmp.w	fp, #0
 80130ac:	f340 80a0 	ble.w	80131f0 <_dtoa_r+0x450>
 80130b0:	49c1      	ldr	r1, [pc, #772]	; (80133b8 <_dtoa_r+0x618>)
 80130b2:	f00b 020f 	and.w	r2, fp, #15
 80130b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80130ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80130be:	ed92 7b00 	vldr	d7, [r2]
 80130c2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80130c6:	f000 8087 	beq.w	80131d8 <_dtoa_r+0x438>
 80130ca:	4abc      	ldr	r2, [pc, #752]	; (80133bc <_dtoa_r+0x61c>)
 80130cc:	ed92 6b08 	vldr	d6, [r2, #32]
 80130d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80130d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80130d8:	f001 010f 	and.w	r1, r1, #15
 80130dc:	2203      	movs	r2, #3
 80130de:	48b7      	ldr	r0, [pc, #732]	; (80133bc <_dtoa_r+0x61c>)
 80130e0:	2900      	cmp	r1, #0
 80130e2:	d17b      	bne.n	80131dc <_dtoa_r+0x43c>
 80130e4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80130e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80130ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80130f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80130f2:	2900      	cmp	r1, #0
 80130f4:	f000 80a2 	beq.w	801323c <_dtoa_r+0x49c>
 80130f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80130fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013100:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013108:	f140 8098 	bpl.w	801323c <_dtoa_r+0x49c>
 801310c:	f1b9 0f00 	cmp.w	r9, #0
 8013110:	f000 8094 	beq.w	801323c <_dtoa_r+0x49c>
 8013114:	f1ba 0f00 	cmp.w	sl, #0
 8013118:	dd2f      	ble.n	801317a <_dtoa_r+0x3da>
 801311a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801311e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013122:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013126:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801312a:	3201      	adds	r2, #1
 801312c:	4650      	mov	r0, sl
 801312e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013132:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013136:	ee07 2a90 	vmov	s15, r2
 801313a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801313e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013142:	ee15 4a90 	vmov	r4, s11
 8013146:	ec52 1b15 	vmov	r1, r2, d5
 801314a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801314e:	2800      	cmp	r0, #0
 8013150:	d177      	bne.n	8013242 <_dtoa_r+0x4a2>
 8013152:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013156:	ee36 6b47 	vsub.f64	d6, d6, d7
 801315a:	ec42 1b17 	vmov	d7, r1, r2
 801315e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013166:	f300 8263 	bgt.w	8013630 <_dtoa_r+0x890>
 801316a:	eeb1 7b47 	vneg.f64	d7, d7
 801316e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013176:	f100 8258 	bmi.w	801362a <_dtoa_r+0x88a>
 801317a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801317e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013180:	2a00      	cmp	r2, #0
 8013182:	f2c0 811d 	blt.w	80133c0 <_dtoa_r+0x620>
 8013186:	f1bb 0f0e 	cmp.w	fp, #14
 801318a:	f300 8119 	bgt.w	80133c0 <_dtoa_r+0x620>
 801318e:	4b8a      	ldr	r3, [pc, #552]	; (80133b8 <_dtoa_r+0x618>)
 8013190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013194:	ed93 6b00 	vldr	d6, [r3]
 8013198:	9b08      	ldr	r3, [sp, #32]
 801319a:	2b00      	cmp	r3, #0
 801319c:	f280 80b7 	bge.w	801330e <_dtoa_r+0x56e>
 80131a0:	f1b9 0f00 	cmp.w	r9, #0
 80131a4:	f300 80b3 	bgt.w	801330e <_dtoa_r+0x56e>
 80131a8:	f040 823f 	bne.w	801362a <_dtoa_r+0x88a>
 80131ac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80131b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80131b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80131b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80131bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c0:	464c      	mov	r4, r9
 80131c2:	464f      	mov	r7, r9
 80131c4:	f280 8215 	bge.w	80135f2 <_dtoa_r+0x852>
 80131c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80131cc:	2331      	movs	r3, #49	; 0x31
 80131ce:	f808 3b01 	strb.w	r3, [r8], #1
 80131d2:	f10b 0b01 	add.w	fp, fp, #1
 80131d6:	e211      	b.n	80135fc <_dtoa_r+0x85c>
 80131d8:	2202      	movs	r2, #2
 80131da:	e780      	b.n	80130de <_dtoa_r+0x33e>
 80131dc:	07cc      	lsls	r4, r1, #31
 80131de:	d504      	bpl.n	80131ea <_dtoa_r+0x44a>
 80131e0:	ed90 6b00 	vldr	d6, [r0]
 80131e4:	3201      	adds	r2, #1
 80131e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131ea:	1049      	asrs	r1, r1, #1
 80131ec:	3008      	adds	r0, #8
 80131ee:	e777      	b.n	80130e0 <_dtoa_r+0x340>
 80131f0:	d022      	beq.n	8013238 <_dtoa_r+0x498>
 80131f2:	f1cb 0100 	rsb	r1, fp, #0
 80131f6:	4a70      	ldr	r2, [pc, #448]	; (80133b8 <_dtoa_r+0x618>)
 80131f8:	f001 000f 	and.w	r0, r1, #15
 80131fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013200:	ed92 7b00 	vldr	d7, [r2]
 8013204:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013208:	ed8d 7b02 	vstr	d7, [sp, #8]
 801320c:	486b      	ldr	r0, [pc, #428]	; (80133bc <_dtoa_r+0x61c>)
 801320e:	1109      	asrs	r1, r1, #4
 8013210:	2400      	movs	r4, #0
 8013212:	2202      	movs	r2, #2
 8013214:	b929      	cbnz	r1, 8013222 <_dtoa_r+0x482>
 8013216:	2c00      	cmp	r4, #0
 8013218:	f43f af6a 	beq.w	80130f0 <_dtoa_r+0x350>
 801321c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013220:	e766      	b.n	80130f0 <_dtoa_r+0x350>
 8013222:	07cf      	lsls	r7, r1, #31
 8013224:	d505      	bpl.n	8013232 <_dtoa_r+0x492>
 8013226:	ed90 6b00 	vldr	d6, [r0]
 801322a:	3201      	adds	r2, #1
 801322c:	2401      	movs	r4, #1
 801322e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013232:	1049      	asrs	r1, r1, #1
 8013234:	3008      	adds	r0, #8
 8013236:	e7ed      	b.n	8013214 <_dtoa_r+0x474>
 8013238:	2202      	movs	r2, #2
 801323a:	e759      	b.n	80130f0 <_dtoa_r+0x350>
 801323c:	465f      	mov	r7, fp
 801323e:	4648      	mov	r0, r9
 8013240:	e775      	b.n	801312e <_dtoa_r+0x38e>
 8013242:	ec42 1b17 	vmov	d7, r1, r2
 8013246:	4a5c      	ldr	r2, [pc, #368]	; (80133b8 <_dtoa_r+0x618>)
 8013248:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801324c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013250:	9a01      	ldr	r2, [sp, #4]
 8013252:	1814      	adds	r4, r2, r0
 8013254:	9a07      	ldr	r2, [sp, #28]
 8013256:	b352      	cbz	r2, 80132ae <_dtoa_r+0x50e>
 8013258:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801325c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013260:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013264:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013268:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801326c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013270:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013274:	ee14 2a90 	vmov	r2, s9
 8013278:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801327c:	3230      	adds	r2, #48	; 0x30
 801327e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013282:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328a:	f808 2b01 	strb.w	r2, [r8], #1
 801328e:	d439      	bmi.n	8013304 <_dtoa_r+0x564>
 8013290:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013294:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801329c:	d472      	bmi.n	8013384 <_dtoa_r+0x5e4>
 801329e:	45a0      	cmp	r8, r4
 80132a0:	f43f af6b 	beq.w	801317a <_dtoa_r+0x3da>
 80132a4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80132a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80132ac:	e7e0      	b.n	8013270 <_dtoa_r+0x4d0>
 80132ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80132b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80132b6:	4621      	mov	r1, r4
 80132b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80132bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80132c0:	ee14 2a90 	vmov	r2, s9
 80132c4:	3230      	adds	r2, #48	; 0x30
 80132c6:	f808 2b01 	strb.w	r2, [r8], #1
 80132ca:	45a0      	cmp	r8, r4
 80132cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80132d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80132d4:	d118      	bne.n	8013308 <_dtoa_r+0x568>
 80132d6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80132da:	ee37 4b05 	vadd.f64	d4, d7, d5
 80132de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80132e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e6:	dc4d      	bgt.n	8013384 <_dtoa_r+0x5e4>
 80132e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80132ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80132f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f4:	f57f af41 	bpl.w	801317a <_dtoa_r+0x3da>
 80132f8:	4688      	mov	r8, r1
 80132fa:	3901      	subs	r1, #1
 80132fc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013300:	2b30      	cmp	r3, #48	; 0x30
 8013302:	d0f9      	beq.n	80132f8 <_dtoa_r+0x558>
 8013304:	46bb      	mov	fp, r7
 8013306:	e02a      	b.n	801335e <_dtoa_r+0x5be>
 8013308:	ee26 6b03 	vmul.f64	d6, d6, d3
 801330c:	e7d6      	b.n	80132bc <_dtoa_r+0x51c>
 801330e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013312:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013316:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801331a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801331e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013322:	ee15 3a10 	vmov	r3, s10
 8013326:	3330      	adds	r3, #48	; 0x30
 8013328:	f808 3b01 	strb.w	r3, [r8], #1
 801332c:	9b01      	ldr	r3, [sp, #4]
 801332e:	eba8 0303 	sub.w	r3, r8, r3
 8013332:	4599      	cmp	r9, r3
 8013334:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013338:	eea3 7b46 	vfms.f64	d7, d3, d6
 801333c:	d133      	bne.n	80133a6 <_dtoa_r+0x606>
 801333e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013342:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334a:	dc1a      	bgt.n	8013382 <_dtoa_r+0x5e2>
 801334c:	eeb4 7b46 	vcmp.f64	d7, d6
 8013350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013354:	d103      	bne.n	801335e <_dtoa_r+0x5be>
 8013356:	ee15 3a10 	vmov	r3, s10
 801335a:	07d9      	lsls	r1, r3, #31
 801335c:	d411      	bmi.n	8013382 <_dtoa_r+0x5e2>
 801335e:	4629      	mov	r1, r5
 8013360:	4630      	mov	r0, r6
 8013362:	f000 fae5 	bl	8013930 <_Bfree>
 8013366:	2300      	movs	r3, #0
 8013368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801336a:	f888 3000 	strb.w	r3, [r8]
 801336e:	f10b 0301 	add.w	r3, fp, #1
 8013372:	6013      	str	r3, [r2, #0]
 8013374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013376:	2b00      	cmp	r3, #0
 8013378:	f43f ad61 	beq.w	8012e3e <_dtoa_r+0x9e>
 801337c:	f8c3 8000 	str.w	r8, [r3]
 8013380:	e55d      	b.n	8012e3e <_dtoa_r+0x9e>
 8013382:	465f      	mov	r7, fp
 8013384:	4643      	mov	r3, r8
 8013386:	4698      	mov	r8, r3
 8013388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801338c:	2a39      	cmp	r2, #57	; 0x39
 801338e:	d106      	bne.n	801339e <_dtoa_r+0x5fe>
 8013390:	9a01      	ldr	r2, [sp, #4]
 8013392:	429a      	cmp	r2, r3
 8013394:	d1f7      	bne.n	8013386 <_dtoa_r+0x5e6>
 8013396:	9901      	ldr	r1, [sp, #4]
 8013398:	2230      	movs	r2, #48	; 0x30
 801339a:	3701      	adds	r7, #1
 801339c:	700a      	strb	r2, [r1, #0]
 801339e:	781a      	ldrb	r2, [r3, #0]
 80133a0:	3201      	adds	r2, #1
 80133a2:	701a      	strb	r2, [r3, #0]
 80133a4:	e7ae      	b.n	8013304 <_dtoa_r+0x564>
 80133a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80133aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80133ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133b2:	d1b2      	bne.n	801331a <_dtoa_r+0x57a>
 80133b4:	e7d3      	b.n	801335e <_dtoa_r+0x5be>
 80133b6:	bf00      	nop
 80133b8:	08016978 	.word	0x08016978
 80133bc:	08016950 	.word	0x08016950
 80133c0:	9907      	ldr	r1, [sp, #28]
 80133c2:	2900      	cmp	r1, #0
 80133c4:	f000 80d0 	beq.w	8013568 <_dtoa_r+0x7c8>
 80133c8:	9906      	ldr	r1, [sp, #24]
 80133ca:	2901      	cmp	r1, #1
 80133cc:	f300 80b4 	bgt.w	8013538 <_dtoa_r+0x798>
 80133d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133d2:	2900      	cmp	r1, #0
 80133d4:	f000 80ac 	beq.w	8013530 <_dtoa_r+0x790>
 80133d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80133dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80133e0:	461c      	mov	r4, r3
 80133e2:	930a      	str	r3, [sp, #40]	; 0x28
 80133e4:	9b04      	ldr	r3, [sp, #16]
 80133e6:	4413      	add	r3, r2
 80133e8:	9304      	str	r3, [sp, #16]
 80133ea:	9b05      	ldr	r3, [sp, #20]
 80133ec:	2101      	movs	r1, #1
 80133ee:	4413      	add	r3, r2
 80133f0:	4630      	mov	r0, r6
 80133f2:	9305      	str	r3, [sp, #20]
 80133f4:	f000 fb54 	bl	8013aa0 <__i2b>
 80133f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133fa:	4607      	mov	r7, r0
 80133fc:	f1b8 0f00 	cmp.w	r8, #0
 8013400:	dd0d      	ble.n	801341e <_dtoa_r+0x67e>
 8013402:	9a05      	ldr	r2, [sp, #20]
 8013404:	2a00      	cmp	r2, #0
 8013406:	dd0a      	ble.n	801341e <_dtoa_r+0x67e>
 8013408:	4542      	cmp	r2, r8
 801340a:	9904      	ldr	r1, [sp, #16]
 801340c:	bfa8      	it	ge
 801340e:	4642      	movge	r2, r8
 8013410:	1a89      	subs	r1, r1, r2
 8013412:	9104      	str	r1, [sp, #16]
 8013414:	9905      	ldr	r1, [sp, #20]
 8013416:	eba8 0802 	sub.w	r8, r8, r2
 801341a:	1a8a      	subs	r2, r1, r2
 801341c:	9205      	str	r2, [sp, #20]
 801341e:	b303      	cbz	r3, 8013462 <_dtoa_r+0x6c2>
 8013420:	9a07      	ldr	r2, [sp, #28]
 8013422:	2a00      	cmp	r2, #0
 8013424:	f000 80a5 	beq.w	8013572 <_dtoa_r+0x7d2>
 8013428:	2c00      	cmp	r4, #0
 801342a:	dd13      	ble.n	8013454 <_dtoa_r+0x6b4>
 801342c:	4639      	mov	r1, r7
 801342e:	4622      	mov	r2, r4
 8013430:	4630      	mov	r0, r6
 8013432:	930d      	str	r3, [sp, #52]	; 0x34
 8013434:	f000 fbf4 	bl	8013c20 <__pow5mult>
 8013438:	462a      	mov	r2, r5
 801343a:	4601      	mov	r1, r0
 801343c:	4607      	mov	r7, r0
 801343e:	4630      	mov	r0, r6
 8013440:	f000 fb44 	bl	8013acc <__multiply>
 8013444:	4629      	mov	r1, r5
 8013446:	900a      	str	r0, [sp, #40]	; 0x28
 8013448:	4630      	mov	r0, r6
 801344a:	f000 fa71 	bl	8013930 <_Bfree>
 801344e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013452:	4615      	mov	r5, r2
 8013454:	1b1a      	subs	r2, r3, r4
 8013456:	d004      	beq.n	8013462 <_dtoa_r+0x6c2>
 8013458:	4629      	mov	r1, r5
 801345a:	4630      	mov	r0, r6
 801345c:	f000 fbe0 	bl	8013c20 <__pow5mult>
 8013460:	4605      	mov	r5, r0
 8013462:	2101      	movs	r1, #1
 8013464:	4630      	mov	r0, r6
 8013466:	f000 fb1b 	bl	8013aa0 <__i2b>
 801346a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801346c:	2b00      	cmp	r3, #0
 801346e:	4604      	mov	r4, r0
 8013470:	f340 8081 	ble.w	8013576 <_dtoa_r+0x7d6>
 8013474:	461a      	mov	r2, r3
 8013476:	4601      	mov	r1, r0
 8013478:	4630      	mov	r0, r6
 801347a:	f000 fbd1 	bl	8013c20 <__pow5mult>
 801347e:	9b06      	ldr	r3, [sp, #24]
 8013480:	2b01      	cmp	r3, #1
 8013482:	4604      	mov	r4, r0
 8013484:	dd7a      	ble.n	801357c <_dtoa_r+0x7dc>
 8013486:	2300      	movs	r3, #0
 8013488:	930a      	str	r3, [sp, #40]	; 0x28
 801348a:	6922      	ldr	r2, [r4, #16]
 801348c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013490:	6910      	ldr	r0, [r2, #16]
 8013492:	f000 fab5 	bl	8013a00 <__hi0bits>
 8013496:	f1c0 0020 	rsb	r0, r0, #32
 801349a:	9b05      	ldr	r3, [sp, #20]
 801349c:	4418      	add	r0, r3
 801349e:	f010 001f 	ands.w	r0, r0, #31
 80134a2:	f000 808c 	beq.w	80135be <_dtoa_r+0x81e>
 80134a6:	f1c0 0220 	rsb	r2, r0, #32
 80134aa:	2a04      	cmp	r2, #4
 80134ac:	f340 8085 	ble.w	80135ba <_dtoa_r+0x81a>
 80134b0:	f1c0 001c 	rsb	r0, r0, #28
 80134b4:	9b04      	ldr	r3, [sp, #16]
 80134b6:	4403      	add	r3, r0
 80134b8:	9304      	str	r3, [sp, #16]
 80134ba:	9b05      	ldr	r3, [sp, #20]
 80134bc:	4403      	add	r3, r0
 80134be:	4480      	add	r8, r0
 80134c0:	9305      	str	r3, [sp, #20]
 80134c2:	9b04      	ldr	r3, [sp, #16]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	dd05      	ble.n	80134d4 <_dtoa_r+0x734>
 80134c8:	4629      	mov	r1, r5
 80134ca:	461a      	mov	r2, r3
 80134cc:	4630      	mov	r0, r6
 80134ce:	f000 fc01 	bl	8013cd4 <__lshift>
 80134d2:	4605      	mov	r5, r0
 80134d4:	9b05      	ldr	r3, [sp, #20]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	dd05      	ble.n	80134e6 <_dtoa_r+0x746>
 80134da:	4621      	mov	r1, r4
 80134dc:	461a      	mov	r2, r3
 80134de:	4630      	mov	r0, r6
 80134e0:	f000 fbf8 	bl	8013cd4 <__lshift>
 80134e4:	4604      	mov	r4, r0
 80134e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d06a      	beq.n	80135c2 <_dtoa_r+0x822>
 80134ec:	4621      	mov	r1, r4
 80134ee:	4628      	mov	r0, r5
 80134f0:	f000 fc60 	bl	8013db4 <__mcmp>
 80134f4:	2800      	cmp	r0, #0
 80134f6:	da64      	bge.n	80135c2 <_dtoa_r+0x822>
 80134f8:	2300      	movs	r3, #0
 80134fa:	4629      	mov	r1, r5
 80134fc:	220a      	movs	r2, #10
 80134fe:	4630      	mov	r0, r6
 8013500:	f000 fa38 	bl	8013974 <__multadd>
 8013504:	9b07      	ldr	r3, [sp, #28]
 8013506:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801350a:	4605      	mov	r5, r0
 801350c:	2b00      	cmp	r3, #0
 801350e:	f000 8191 	beq.w	8013834 <_dtoa_r+0xa94>
 8013512:	4639      	mov	r1, r7
 8013514:	2300      	movs	r3, #0
 8013516:	220a      	movs	r2, #10
 8013518:	4630      	mov	r0, r6
 801351a:	f000 fa2b 	bl	8013974 <__multadd>
 801351e:	f1ba 0f00 	cmp.w	sl, #0
 8013522:	4607      	mov	r7, r0
 8013524:	f300 808d 	bgt.w	8013642 <_dtoa_r+0x8a2>
 8013528:	9b06      	ldr	r3, [sp, #24]
 801352a:	2b02      	cmp	r3, #2
 801352c:	dc50      	bgt.n	80135d0 <_dtoa_r+0x830>
 801352e:	e088      	b.n	8013642 <_dtoa_r+0x8a2>
 8013530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013532:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013536:	e751      	b.n	80133dc <_dtoa_r+0x63c>
 8013538:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801353c:	42a3      	cmp	r3, r4
 801353e:	bfbf      	itttt	lt
 8013540:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8013542:	1ae3      	sublt	r3, r4, r3
 8013544:	18d2      	addlt	r2, r2, r3
 8013546:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013548:	bfb6      	itet	lt
 801354a:	4623      	movlt	r3, r4
 801354c:	1b1c      	subge	r4, r3, r4
 801354e:	2400      	movlt	r4, #0
 8013550:	f1b9 0f00 	cmp.w	r9, #0
 8013554:	bfb5      	itete	lt
 8013556:	9a04      	ldrlt	r2, [sp, #16]
 8013558:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801355c:	eba2 0809 	sublt.w	r8, r2, r9
 8013560:	464a      	movge	r2, r9
 8013562:	bfb8      	it	lt
 8013564:	2200      	movlt	r2, #0
 8013566:	e73c      	b.n	80133e2 <_dtoa_r+0x642>
 8013568:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801356c:	9f07      	ldr	r7, [sp, #28]
 801356e:	461c      	mov	r4, r3
 8013570:	e744      	b.n	80133fc <_dtoa_r+0x65c>
 8013572:	461a      	mov	r2, r3
 8013574:	e770      	b.n	8013458 <_dtoa_r+0x6b8>
 8013576:	9b06      	ldr	r3, [sp, #24]
 8013578:	2b01      	cmp	r3, #1
 801357a:	dc18      	bgt.n	80135ae <_dtoa_r+0x80e>
 801357c:	9b02      	ldr	r3, [sp, #8]
 801357e:	b9b3      	cbnz	r3, 80135ae <_dtoa_r+0x80e>
 8013580:	9b03      	ldr	r3, [sp, #12]
 8013582:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013586:	b9a2      	cbnz	r2, 80135b2 <_dtoa_r+0x812>
 8013588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801358c:	0d12      	lsrs	r2, r2, #20
 801358e:	0512      	lsls	r2, r2, #20
 8013590:	b18a      	cbz	r2, 80135b6 <_dtoa_r+0x816>
 8013592:	9b04      	ldr	r3, [sp, #16]
 8013594:	3301      	adds	r3, #1
 8013596:	9304      	str	r3, [sp, #16]
 8013598:	9b05      	ldr	r3, [sp, #20]
 801359a:	3301      	adds	r3, #1
 801359c:	9305      	str	r3, [sp, #20]
 801359e:	2301      	movs	r3, #1
 80135a0:	930a      	str	r3, [sp, #40]	; 0x28
 80135a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	f47f af70 	bne.w	801348a <_dtoa_r+0x6ea>
 80135aa:	2001      	movs	r0, #1
 80135ac:	e775      	b.n	801349a <_dtoa_r+0x6fa>
 80135ae:	2300      	movs	r3, #0
 80135b0:	e7f6      	b.n	80135a0 <_dtoa_r+0x800>
 80135b2:	9b02      	ldr	r3, [sp, #8]
 80135b4:	e7f4      	b.n	80135a0 <_dtoa_r+0x800>
 80135b6:	920a      	str	r2, [sp, #40]	; 0x28
 80135b8:	e7f3      	b.n	80135a2 <_dtoa_r+0x802>
 80135ba:	d082      	beq.n	80134c2 <_dtoa_r+0x722>
 80135bc:	4610      	mov	r0, r2
 80135be:	301c      	adds	r0, #28
 80135c0:	e778      	b.n	80134b4 <_dtoa_r+0x714>
 80135c2:	f1b9 0f00 	cmp.w	r9, #0
 80135c6:	dc37      	bgt.n	8013638 <_dtoa_r+0x898>
 80135c8:	9b06      	ldr	r3, [sp, #24]
 80135ca:	2b02      	cmp	r3, #2
 80135cc:	dd34      	ble.n	8013638 <_dtoa_r+0x898>
 80135ce:	46ca      	mov	sl, r9
 80135d0:	f1ba 0f00 	cmp.w	sl, #0
 80135d4:	d10d      	bne.n	80135f2 <_dtoa_r+0x852>
 80135d6:	4621      	mov	r1, r4
 80135d8:	4653      	mov	r3, sl
 80135da:	2205      	movs	r2, #5
 80135dc:	4630      	mov	r0, r6
 80135de:	f000 f9c9 	bl	8013974 <__multadd>
 80135e2:	4601      	mov	r1, r0
 80135e4:	4604      	mov	r4, r0
 80135e6:	4628      	mov	r0, r5
 80135e8:	f000 fbe4 	bl	8013db4 <__mcmp>
 80135ec:	2800      	cmp	r0, #0
 80135ee:	f73f adeb 	bgt.w	80131c8 <_dtoa_r+0x428>
 80135f2:	9b08      	ldr	r3, [sp, #32]
 80135f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80135f8:	ea6f 0b03 	mvn.w	fp, r3
 80135fc:	f04f 0900 	mov.w	r9, #0
 8013600:	4621      	mov	r1, r4
 8013602:	4630      	mov	r0, r6
 8013604:	f000 f994 	bl	8013930 <_Bfree>
 8013608:	2f00      	cmp	r7, #0
 801360a:	f43f aea8 	beq.w	801335e <_dtoa_r+0x5be>
 801360e:	f1b9 0f00 	cmp.w	r9, #0
 8013612:	d005      	beq.n	8013620 <_dtoa_r+0x880>
 8013614:	45b9      	cmp	r9, r7
 8013616:	d003      	beq.n	8013620 <_dtoa_r+0x880>
 8013618:	4649      	mov	r1, r9
 801361a:	4630      	mov	r0, r6
 801361c:	f000 f988 	bl	8013930 <_Bfree>
 8013620:	4639      	mov	r1, r7
 8013622:	4630      	mov	r0, r6
 8013624:	f000 f984 	bl	8013930 <_Bfree>
 8013628:	e699      	b.n	801335e <_dtoa_r+0x5be>
 801362a:	2400      	movs	r4, #0
 801362c:	4627      	mov	r7, r4
 801362e:	e7e0      	b.n	80135f2 <_dtoa_r+0x852>
 8013630:	46bb      	mov	fp, r7
 8013632:	4604      	mov	r4, r0
 8013634:	4607      	mov	r7, r0
 8013636:	e5c7      	b.n	80131c8 <_dtoa_r+0x428>
 8013638:	9b07      	ldr	r3, [sp, #28]
 801363a:	46ca      	mov	sl, r9
 801363c:	2b00      	cmp	r3, #0
 801363e:	f000 8100 	beq.w	8013842 <_dtoa_r+0xaa2>
 8013642:	f1b8 0f00 	cmp.w	r8, #0
 8013646:	dd05      	ble.n	8013654 <_dtoa_r+0x8b4>
 8013648:	4639      	mov	r1, r7
 801364a:	4642      	mov	r2, r8
 801364c:	4630      	mov	r0, r6
 801364e:	f000 fb41 	bl	8013cd4 <__lshift>
 8013652:	4607      	mov	r7, r0
 8013654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013656:	2b00      	cmp	r3, #0
 8013658:	d05d      	beq.n	8013716 <_dtoa_r+0x976>
 801365a:	6879      	ldr	r1, [r7, #4]
 801365c:	4630      	mov	r0, r6
 801365e:	f000 f927 	bl	80138b0 <_Balloc>
 8013662:	4680      	mov	r8, r0
 8013664:	b928      	cbnz	r0, 8013672 <_dtoa_r+0x8d2>
 8013666:	4b82      	ldr	r3, [pc, #520]	; (8013870 <_dtoa_r+0xad0>)
 8013668:	4602      	mov	r2, r0
 801366a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801366e:	f7ff bbaf 	b.w	8012dd0 <_dtoa_r+0x30>
 8013672:	693a      	ldr	r2, [r7, #16]
 8013674:	3202      	adds	r2, #2
 8013676:	0092      	lsls	r2, r2, #2
 8013678:	f107 010c 	add.w	r1, r7, #12
 801367c:	300c      	adds	r0, #12
 801367e:	f000 f909 	bl	8013894 <memcpy>
 8013682:	2201      	movs	r2, #1
 8013684:	4641      	mov	r1, r8
 8013686:	4630      	mov	r0, r6
 8013688:	f000 fb24 	bl	8013cd4 <__lshift>
 801368c:	9b01      	ldr	r3, [sp, #4]
 801368e:	3301      	adds	r3, #1
 8013690:	9304      	str	r3, [sp, #16]
 8013692:	9b01      	ldr	r3, [sp, #4]
 8013694:	4453      	add	r3, sl
 8013696:	9308      	str	r3, [sp, #32]
 8013698:	9b02      	ldr	r3, [sp, #8]
 801369a:	f003 0301 	and.w	r3, r3, #1
 801369e:	46b9      	mov	r9, r7
 80136a0:	9307      	str	r3, [sp, #28]
 80136a2:	4607      	mov	r7, r0
 80136a4:	9b04      	ldr	r3, [sp, #16]
 80136a6:	4621      	mov	r1, r4
 80136a8:	3b01      	subs	r3, #1
 80136aa:	4628      	mov	r0, r5
 80136ac:	9302      	str	r3, [sp, #8]
 80136ae:	f7ff fae9 	bl	8012c84 <quorem>
 80136b2:	4603      	mov	r3, r0
 80136b4:	3330      	adds	r3, #48	; 0x30
 80136b6:	9005      	str	r0, [sp, #20]
 80136b8:	4649      	mov	r1, r9
 80136ba:	4628      	mov	r0, r5
 80136bc:	9309      	str	r3, [sp, #36]	; 0x24
 80136be:	f000 fb79 	bl	8013db4 <__mcmp>
 80136c2:	463a      	mov	r2, r7
 80136c4:	4682      	mov	sl, r0
 80136c6:	4621      	mov	r1, r4
 80136c8:	4630      	mov	r0, r6
 80136ca:	f000 fb8f 	bl	8013dec <__mdiff>
 80136ce:	68c2      	ldr	r2, [r0, #12]
 80136d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136d2:	4680      	mov	r8, r0
 80136d4:	bb0a      	cbnz	r2, 801371a <_dtoa_r+0x97a>
 80136d6:	4601      	mov	r1, r0
 80136d8:	4628      	mov	r0, r5
 80136da:	f000 fb6b 	bl	8013db4 <__mcmp>
 80136de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136e0:	4602      	mov	r2, r0
 80136e2:	4641      	mov	r1, r8
 80136e4:	4630      	mov	r0, r6
 80136e6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80136ea:	f000 f921 	bl	8013930 <_Bfree>
 80136ee:	9b06      	ldr	r3, [sp, #24]
 80136f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80136f6:	ea43 0102 	orr.w	r1, r3, r2
 80136fa:	9b07      	ldr	r3, [sp, #28]
 80136fc:	430b      	orrs	r3, r1
 80136fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013700:	d10d      	bne.n	801371e <_dtoa_r+0x97e>
 8013702:	2b39      	cmp	r3, #57	; 0x39
 8013704:	d029      	beq.n	801375a <_dtoa_r+0x9ba>
 8013706:	f1ba 0f00 	cmp.w	sl, #0
 801370a:	dd01      	ble.n	8013710 <_dtoa_r+0x970>
 801370c:	9b05      	ldr	r3, [sp, #20]
 801370e:	3331      	adds	r3, #49	; 0x31
 8013710:	9a02      	ldr	r2, [sp, #8]
 8013712:	7013      	strb	r3, [r2, #0]
 8013714:	e774      	b.n	8013600 <_dtoa_r+0x860>
 8013716:	4638      	mov	r0, r7
 8013718:	e7b8      	b.n	801368c <_dtoa_r+0x8ec>
 801371a:	2201      	movs	r2, #1
 801371c:	e7e1      	b.n	80136e2 <_dtoa_r+0x942>
 801371e:	f1ba 0f00 	cmp.w	sl, #0
 8013722:	db06      	blt.n	8013732 <_dtoa_r+0x992>
 8013724:	9906      	ldr	r1, [sp, #24]
 8013726:	ea41 0a0a 	orr.w	sl, r1, sl
 801372a:	9907      	ldr	r1, [sp, #28]
 801372c:	ea5a 0101 	orrs.w	r1, sl, r1
 8013730:	d120      	bne.n	8013774 <_dtoa_r+0x9d4>
 8013732:	2a00      	cmp	r2, #0
 8013734:	ddec      	ble.n	8013710 <_dtoa_r+0x970>
 8013736:	4629      	mov	r1, r5
 8013738:	2201      	movs	r2, #1
 801373a:	4630      	mov	r0, r6
 801373c:	9304      	str	r3, [sp, #16]
 801373e:	f000 fac9 	bl	8013cd4 <__lshift>
 8013742:	4621      	mov	r1, r4
 8013744:	4605      	mov	r5, r0
 8013746:	f000 fb35 	bl	8013db4 <__mcmp>
 801374a:	2800      	cmp	r0, #0
 801374c:	9b04      	ldr	r3, [sp, #16]
 801374e:	dc02      	bgt.n	8013756 <_dtoa_r+0x9b6>
 8013750:	d1de      	bne.n	8013710 <_dtoa_r+0x970>
 8013752:	07da      	lsls	r2, r3, #31
 8013754:	d5dc      	bpl.n	8013710 <_dtoa_r+0x970>
 8013756:	2b39      	cmp	r3, #57	; 0x39
 8013758:	d1d8      	bne.n	801370c <_dtoa_r+0x96c>
 801375a:	9a02      	ldr	r2, [sp, #8]
 801375c:	2339      	movs	r3, #57	; 0x39
 801375e:	7013      	strb	r3, [r2, #0]
 8013760:	4643      	mov	r3, r8
 8013762:	4698      	mov	r8, r3
 8013764:	3b01      	subs	r3, #1
 8013766:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801376a:	2a39      	cmp	r2, #57	; 0x39
 801376c:	d051      	beq.n	8013812 <_dtoa_r+0xa72>
 801376e:	3201      	adds	r2, #1
 8013770:	701a      	strb	r2, [r3, #0]
 8013772:	e745      	b.n	8013600 <_dtoa_r+0x860>
 8013774:	2a00      	cmp	r2, #0
 8013776:	dd03      	ble.n	8013780 <_dtoa_r+0x9e0>
 8013778:	2b39      	cmp	r3, #57	; 0x39
 801377a:	d0ee      	beq.n	801375a <_dtoa_r+0x9ba>
 801377c:	3301      	adds	r3, #1
 801377e:	e7c7      	b.n	8013710 <_dtoa_r+0x970>
 8013780:	9a04      	ldr	r2, [sp, #16]
 8013782:	9908      	ldr	r1, [sp, #32]
 8013784:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013788:	428a      	cmp	r2, r1
 801378a:	d02b      	beq.n	80137e4 <_dtoa_r+0xa44>
 801378c:	4629      	mov	r1, r5
 801378e:	2300      	movs	r3, #0
 8013790:	220a      	movs	r2, #10
 8013792:	4630      	mov	r0, r6
 8013794:	f000 f8ee 	bl	8013974 <__multadd>
 8013798:	45b9      	cmp	r9, r7
 801379a:	4605      	mov	r5, r0
 801379c:	f04f 0300 	mov.w	r3, #0
 80137a0:	f04f 020a 	mov.w	r2, #10
 80137a4:	4649      	mov	r1, r9
 80137a6:	4630      	mov	r0, r6
 80137a8:	d107      	bne.n	80137ba <_dtoa_r+0xa1a>
 80137aa:	f000 f8e3 	bl	8013974 <__multadd>
 80137ae:	4681      	mov	r9, r0
 80137b0:	4607      	mov	r7, r0
 80137b2:	9b04      	ldr	r3, [sp, #16]
 80137b4:	3301      	adds	r3, #1
 80137b6:	9304      	str	r3, [sp, #16]
 80137b8:	e774      	b.n	80136a4 <_dtoa_r+0x904>
 80137ba:	f000 f8db 	bl	8013974 <__multadd>
 80137be:	4639      	mov	r1, r7
 80137c0:	4681      	mov	r9, r0
 80137c2:	2300      	movs	r3, #0
 80137c4:	220a      	movs	r2, #10
 80137c6:	4630      	mov	r0, r6
 80137c8:	f000 f8d4 	bl	8013974 <__multadd>
 80137cc:	4607      	mov	r7, r0
 80137ce:	e7f0      	b.n	80137b2 <_dtoa_r+0xa12>
 80137d0:	f1ba 0f00 	cmp.w	sl, #0
 80137d4:	9a01      	ldr	r2, [sp, #4]
 80137d6:	bfcc      	ite	gt
 80137d8:	46d0      	movgt	r8, sl
 80137da:	f04f 0801 	movle.w	r8, #1
 80137de:	4490      	add	r8, r2
 80137e0:	f04f 0900 	mov.w	r9, #0
 80137e4:	4629      	mov	r1, r5
 80137e6:	2201      	movs	r2, #1
 80137e8:	4630      	mov	r0, r6
 80137ea:	9302      	str	r3, [sp, #8]
 80137ec:	f000 fa72 	bl	8013cd4 <__lshift>
 80137f0:	4621      	mov	r1, r4
 80137f2:	4605      	mov	r5, r0
 80137f4:	f000 fade 	bl	8013db4 <__mcmp>
 80137f8:	2800      	cmp	r0, #0
 80137fa:	dcb1      	bgt.n	8013760 <_dtoa_r+0x9c0>
 80137fc:	d102      	bne.n	8013804 <_dtoa_r+0xa64>
 80137fe:	9b02      	ldr	r3, [sp, #8]
 8013800:	07db      	lsls	r3, r3, #31
 8013802:	d4ad      	bmi.n	8013760 <_dtoa_r+0x9c0>
 8013804:	4643      	mov	r3, r8
 8013806:	4698      	mov	r8, r3
 8013808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801380c:	2a30      	cmp	r2, #48	; 0x30
 801380e:	d0fa      	beq.n	8013806 <_dtoa_r+0xa66>
 8013810:	e6f6      	b.n	8013600 <_dtoa_r+0x860>
 8013812:	9a01      	ldr	r2, [sp, #4]
 8013814:	429a      	cmp	r2, r3
 8013816:	d1a4      	bne.n	8013762 <_dtoa_r+0x9c2>
 8013818:	f10b 0b01 	add.w	fp, fp, #1
 801381c:	2331      	movs	r3, #49	; 0x31
 801381e:	e778      	b.n	8013712 <_dtoa_r+0x972>
 8013820:	4b14      	ldr	r3, [pc, #80]	; (8013874 <_dtoa_r+0xad4>)
 8013822:	f7ff bb27 	b.w	8012e74 <_dtoa_r+0xd4>
 8013826:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013828:	2b00      	cmp	r3, #0
 801382a:	f47f ab03 	bne.w	8012e34 <_dtoa_r+0x94>
 801382e:	4b12      	ldr	r3, [pc, #72]	; (8013878 <_dtoa_r+0xad8>)
 8013830:	f7ff bb20 	b.w	8012e74 <_dtoa_r+0xd4>
 8013834:	f1ba 0f00 	cmp.w	sl, #0
 8013838:	dc03      	bgt.n	8013842 <_dtoa_r+0xaa2>
 801383a:	9b06      	ldr	r3, [sp, #24]
 801383c:	2b02      	cmp	r3, #2
 801383e:	f73f aec7 	bgt.w	80135d0 <_dtoa_r+0x830>
 8013842:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013846:	4621      	mov	r1, r4
 8013848:	4628      	mov	r0, r5
 801384a:	f7ff fa1b 	bl	8012c84 <quorem>
 801384e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013852:	f808 3b01 	strb.w	r3, [r8], #1
 8013856:	9a01      	ldr	r2, [sp, #4]
 8013858:	eba8 0202 	sub.w	r2, r8, r2
 801385c:	4592      	cmp	sl, r2
 801385e:	ddb7      	ble.n	80137d0 <_dtoa_r+0xa30>
 8013860:	4629      	mov	r1, r5
 8013862:	2300      	movs	r3, #0
 8013864:	220a      	movs	r2, #10
 8013866:	4630      	mov	r0, r6
 8013868:	f000 f884 	bl	8013974 <__multadd>
 801386c:	4605      	mov	r5, r0
 801386e:	e7ea      	b.n	8013846 <_dtoa_r+0xaa6>
 8013870:	080168df 	.word	0x080168df
 8013874:	0801683c 	.word	0x0801683c
 8013878:	08016860 	.word	0x08016860

0801387c <_localeconv_r>:
 801387c:	4800      	ldr	r0, [pc, #0]	; (8013880 <_localeconv_r+0x4>)
 801387e:	4770      	bx	lr
 8013880:	2400039c 	.word	0x2400039c

08013884 <malloc>:
 8013884:	4b02      	ldr	r3, [pc, #8]	; (8013890 <malloc+0xc>)
 8013886:	4601      	mov	r1, r0
 8013888:	6818      	ldr	r0, [r3, #0]
 801388a:	f000 bc17 	b.w	80140bc <_malloc_r>
 801388e:	bf00      	nop
 8013890:	24000248 	.word	0x24000248

08013894 <memcpy>:
 8013894:	440a      	add	r2, r1
 8013896:	4291      	cmp	r1, r2
 8013898:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801389c:	d100      	bne.n	80138a0 <memcpy+0xc>
 801389e:	4770      	bx	lr
 80138a0:	b510      	push	{r4, lr}
 80138a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138aa:	4291      	cmp	r1, r2
 80138ac:	d1f9      	bne.n	80138a2 <memcpy+0xe>
 80138ae:	bd10      	pop	{r4, pc}

080138b0 <_Balloc>:
 80138b0:	b570      	push	{r4, r5, r6, lr}
 80138b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80138b4:	4604      	mov	r4, r0
 80138b6:	460d      	mov	r5, r1
 80138b8:	b976      	cbnz	r6, 80138d8 <_Balloc+0x28>
 80138ba:	2010      	movs	r0, #16
 80138bc:	f7ff ffe2 	bl	8013884 <malloc>
 80138c0:	4602      	mov	r2, r0
 80138c2:	6260      	str	r0, [r4, #36]	; 0x24
 80138c4:	b920      	cbnz	r0, 80138d0 <_Balloc+0x20>
 80138c6:	4b18      	ldr	r3, [pc, #96]	; (8013928 <_Balloc+0x78>)
 80138c8:	4818      	ldr	r0, [pc, #96]	; (801392c <_Balloc+0x7c>)
 80138ca:	2166      	movs	r1, #102	; 0x66
 80138cc:	f000 fc7a 	bl	80141c4 <__assert_func>
 80138d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138d4:	6006      	str	r6, [r0, #0]
 80138d6:	60c6      	str	r6, [r0, #12]
 80138d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80138da:	68f3      	ldr	r3, [r6, #12]
 80138dc:	b183      	cbz	r3, 8013900 <_Balloc+0x50>
 80138de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80138e6:	b9b8      	cbnz	r0, 8013918 <_Balloc+0x68>
 80138e8:	2101      	movs	r1, #1
 80138ea:	fa01 f605 	lsl.w	r6, r1, r5
 80138ee:	1d72      	adds	r2, r6, #5
 80138f0:	0092      	lsls	r2, r2, #2
 80138f2:	4620      	mov	r0, r4
 80138f4:	f000 fb60 	bl	8013fb8 <_calloc_r>
 80138f8:	b160      	cbz	r0, 8013914 <_Balloc+0x64>
 80138fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80138fe:	e00e      	b.n	801391e <_Balloc+0x6e>
 8013900:	2221      	movs	r2, #33	; 0x21
 8013902:	2104      	movs	r1, #4
 8013904:	4620      	mov	r0, r4
 8013906:	f000 fb57 	bl	8013fb8 <_calloc_r>
 801390a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801390c:	60f0      	str	r0, [r6, #12]
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d1e4      	bne.n	80138de <_Balloc+0x2e>
 8013914:	2000      	movs	r0, #0
 8013916:	bd70      	pop	{r4, r5, r6, pc}
 8013918:	6802      	ldr	r2, [r0, #0]
 801391a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801391e:	2300      	movs	r3, #0
 8013920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013924:	e7f7      	b.n	8013916 <_Balloc+0x66>
 8013926:	bf00      	nop
 8013928:	0801686d 	.word	0x0801686d
 801392c:	080168f0 	.word	0x080168f0

08013930 <_Bfree>:
 8013930:	b570      	push	{r4, r5, r6, lr}
 8013932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013934:	4605      	mov	r5, r0
 8013936:	460c      	mov	r4, r1
 8013938:	b976      	cbnz	r6, 8013958 <_Bfree+0x28>
 801393a:	2010      	movs	r0, #16
 801393c:	f7ff ffa2 	bl	8013884 <malloc>
 8013940:	4602      	mov	r2, r0
 8013942:	6268      	str	r0, [r5, #36]	; 0x24
 8013944:	b920      	cbnz	r0, 8013950 <_Bfree+0x20>
 8013946:	4b09      	ldr	r3, [pc, #36]	; (801396c <_Bfree+0x3c>)
 8013948:	4809      	ldr	r0, [pc, #36]	; (8013970 <_Bfree+0x40>)
 801394a:	218a      	movs	r1, #138	; 0x8a
 801394c:	f000 fc3a 	bl	80141c4 <__assert_func>
 8013950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013954:	6006      	str	r6, [r0, #0]
 8013956:	60c6      	str	r6, [r0, #12]
 8013958:	b13c      	cbz	r4, 801396a <_Bfree+0x3a>
 801395a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801395c:	6862      	ldr	r2, [r4, #4]
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013964:	6021      	str	r1, [r4, #0]
 8013966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801396a:	bd70      	pop	{r4, r5, r6, pc}
 801396c:	0801686d 	.word	0x0801686d
 8013970:	080168f0 	.word	0x080168f0

08013974 <__multadd>:
 8013974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013978:	690d      	ldr	r5, [r1, #16]
 801397a:	4607      	mov	r7, r0
 801397c:	460c      	mov	r4, r1
 801397e:	461e      	mov	r6, r3
 8013980:	f101 0c14 	add.w	ip, r1, #20
 8013984:	2000      	movs	r0, #0
 8013986:	f8dc 3000 	ldr.w	r3, [ip]
 801398a:	b299      	uxth	r1, r3
 801398c:	fb02 6101 	mla	r1, r2, r1, r6
 8013990:	0c1e      	lsrs	r6, r3, #16
 8013992:	0c0b      	lsrs	r3, r1, #16
 8013994:	fb02 3306 	mla	r3, r2, r6, r3
 8013998:	b289      	uxth	r1, r1
 801399a:	3001      	adds	r0, #1
 801399c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80139a0:	4285      	cmp	r5, r0
 80139a2:	f84c 1b04 	str.w	r1, [ip], #4
 80139a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80139aa:	dcec      	bgt.n	8013986 <__multadd+0x12>
 80139ac:	b30e      	cbz	r6, 80139f2 <__multadd+0x7e>
 80139ae:	68a3      	ldr	r3, [r4, #8]
 80139b0:	42ab      	cmp	r3, r5
 80139b2:	dc19      	bgt.n	80139e8 <__multadd+0x74>
 80139b4:	6861      	ldr	r1, [r4, #4]
 80139b6:	4638      	mov	r0, r7
 80139b8:	3101      	adds	r1, #1
 80139ba:	f7ff ff79 	bl	80138b0 <_Balloc>
 80139be:	4680      	mov	r8, r0
 80139c0:	b928      	cbnz	r0, 80139ce <__multadd+0x5a>
 80139c2:	4602      	mov	r2, r0
 80139c4:	4b0c      	ldr	r3, [pc, #48]	; (80139f8 <__multadd+0x84>)
 80139c6:	480d      	ldr	r0, [pc, #52]	; (80139fc <__multadd+0x88>)
 80139c8:	21b5      	movs	r1, #181	; 0xb5
 80139ca:	f000 fbfb 	bl	80141c4 <__assert_func>
 80139ce:	6922      	ldr	r2, [r4, #16]
 80139d0:	3202      	adds	r2, #2
 80139d2:	f104 010c 	add.w	r1, r4, #12
 80139d6:	0092      	lsls	r2, r2, #2
 80139d8:	300c      	adds	r0, #12
 80139da:	f7ff ff5b 	bl	8013894 <memcpy>
 80139de:	4621      	mov	r1, r4
 80139e0:	4638      	mov	r0, r7
 80139e2:	f7ff ffa5 	bl	8013930 <_Bfree>
 80139e6:	4644      	mov	r4, r8
 80139e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80139ec:	3501      	adds	r5, #1
 80139ee:	615e      	str	r6, [r3, #20]
 80139f0:	6125      	str	r5, [r4, #16]
 80139f2:	4620      	mov	r0, r4
 80139f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139f8:	080168df 	.word	0x080168df
 80139fc:	080168f0 	.word	0x080168f0

08013a00 <__hi0bits>:
 8013a00:	0c03      	lsrs	r3, r0, #16
 8013a02:	041b      	lsls	r3, r3, #16
 8013a04:	b9d3      	cbnz	r3, 8013a3c <__hi0bits+0x3c>
 8013a06:	0400      	lsls	r0, r0, #16
 8013a08:	2310      	movs	r3, #16
 8013a0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a0e:	bf04      	itt	eq
 8013a10:	0200      	lsleq	r0, r0, #8
 8013a12:	3308      	addeq	r3, #8
 8013a14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a18:	bf04      	itt	eq
 8013a1a:	0100      	lsleq	r0, r0, #4
 8013a1c:	3304      	addeq	r3, #4
 8013a1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a22:	bf04      	itt	eq
 8013a24:	0080      	lsleq	r0, r0, #2
 8013a26:	3302      	addeq	r3, #2
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	db05      	blt.n	8013a38 <__hi0bits+0x38>
 8013a2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a30:	f103 0301 	add.w	r3, r3, #1
 8013a34:	bf08      	it	eq
 8013a36:	2320      	moveq	r3, #32
 8013a38:	4618      	mov	r0, r3
 8013a3a:	4770      	bx	lr
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	e7e4      	b.n	8013a0a <__hi0bits+0xa>

08013a40 <__lo0bits>:
 8013a40:	6803      	ldr	r3, [r0, #0]
 8013a42:	f013 0207 	ands.w	r2, r3, #7
 8013a46:	4601      	mov	r1, r0
 8013a48:	d00b      	beq.n	8013a62 <__lo0bits+0x22>
 8013a4a:	07da      	lsls	r2, r3, #31
 8013a4c:	d423      	bmi.n	8013a96 <__lo0bits+0x56>
 8013a4e:	0798      	lsls	r0, r3, #30
 8013a50:	bf49      	itett	mi
 8013a52:	085b      	lsrmi	r3, r3, #1
 8013a54:	089b      	lsrpl	r3, r3, #2
 8013a56:	2001      	movmi	r0, #1
 8013a58:	600b      	strmi	r3, [r1, #0]
 8013a5a:	bf5c      	itt	pl
 8013a5c:	600b      	strpl	r3, [r1, #0]
 8013a5e:	2002      	movpl	r0, #2
 8013a60:	4770      	bx	lr
 8013a62:	b298      	uxth	r0, r3
 8013a64:	b9a8      	cbnz	r0, 8013a92 <__lo0bits+0x52>
 8013a66:	0c1b      	lsrs	r3, r3, #16
 8013a68:	2010      	movs	r0, #16
 8013a6a:	b2da      	uxtb	r2, r3
 8013a6c:	b90a      	cbnz	r2, 8013a72 <__lo0bits+0x32>
 8013a6e:	3008      	adds	r0, #8
 8013a70:	0a1b      	lsrs	r3, r3, #8
 8013a72:	071a      	lsls	r2, r3, #28
 8013a74:	bf04      	itt	eq
 8013a76:	091b      	lsreq	r3, r3, #4
 8013a78:	3004      	addeq	r0, #4
 8013a7a:	079a      	lsls	r2, r3, #30
 8013a7c:	bf04      	itt	eq
 8013a7e:	089b      	lsreq	r3, r3, #2
 8013a80:	3002      	addeq	r0, #2
 8013a82:	07da      	lsls	r2, r3, #31
 8013a84:	d403      	bmi.n	8013a8e <__lo0bits+0x4e>
 8013a86:	085b      	lsrs	r3, r3, #1
 8013a88:	f100 0001 	add.w	r0, r0, #1
 8013a8c:	d005      	beq.n	8013a9a <__lo0bits+0x5a>
 8013a8e:	600b      	str	r3, [r1, #0]
 8013a90:	4770      	bx	lr
 8013a92:	4610      	mov	r0, r2
 8013a94:	e7e9      	b.n	8013a6a <__lo0bits+0x2a>
 8013a96:	2000      	movs	r0, #0
 8013a98:	4770      	bx	lr
 8013a9a:	2020      	movs	r0, #32
 8013a9c:	4770      	bx	lr
	...

08013aa0 <__i2b>:
 8013aa0:	b510      	push	{r4, lr}
 8013aa2:	460c      	mov	r4, r1
 8013aa4:	2101      	movs	r1, #1
 8013aa6:	f7ff ff03 	bl	80138b0 <_Balloc>
 8013aaa:	4602      	mov	r2, r0
 8013aac:	b928      	cbnz	r0, 8013aba <__i2b+0x1a>
 8013aae:	4b05      	ldr	r3, [pc, #20]	; (8013ac4 <__i2b+0x24>)
 8013ab0:	4805      	ldr	r0, [pc, #20]	; (8013ac8 <__i2b+0x28>)
 8013ab2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ab6:	f000 fb85 	bl	80141c4 <__assert_func>
 8013aba:	2301      	movs	r3, #1
 8013abc:	6144      	str	r4, [r0, #20]
 8013abe:	6103      	str	r3, [r0, #16]
 8013ac0:	bd10      	pop	{r4, pc}
 8013ac2:	bf00      	nop
 8013ac4:	080168df 	.word	0x080168df
 8013ac8:	080168f0 	.word	0x080168f0

08013acc <__multiply>:
 8013acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad0:	4691      	mov	r9, r2
 8013ad2:	690a      	ldr	r2, [r1, #16]
 8013ad4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	bfb8      	it	lt
 8013adc:	460b      	movlt	r3, r1
 8013ade:	460c      	mov	r4, r1
 8013ae0:	bfbc      	itt	lt
 8013ae2:	464c      	movlt	r4, r9
 8013ae4:	4699      	movlt	r9, r3
 8013ae6:	6927      	ldr	r7, [r4, #16]
 8013ae8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013aec:	68a3      	ldr	r3, [r4, #8]
 8013aee:	6861      	ldr	r1, [r4, #4]
 8013af0:	eb07 060a 	add.w	r6, r7, sl
 8013af4:	42b3      	cmp	r3, r6
 8013af6:	b085      	sub	sp, #20
 8013af8:	bfb8      	it	lt
 8013afa:	3101      	addlt	r1, #1
 8013afc:	f7ff fed8 	bl	80138b0 <_Balloc>
 8013b00:	b930      	cbnz	r0, 8013b10 <__multiply+0x44>
 8013b02:	4602      	mov	r2, r0
 8013b04:	4b44      	ldr	r3, [pc, #272]	; (8013c18 <__multiply+0x14c>)
 8013b06:	4845      	ldr	r0, [pc, #276]	; (8013c1c <__multiply+0x150>)
 8013b08:	f240 115d 	movw	r1, #349	; 0x15d
 8013b0c:	f000 fb5a 	bl	80141c4 <__assert_func>
 8013b10:	f100 0514 	add.w	r5, r0, #20
 8013b14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013b18:	462b      	mov	r3, r5
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	4543      	cmp	r3, r8
 8013b1e:	d321      	bcc.n	8013b64 <__multiply+0x98>
 8013b20:	f104 0314 	add.w	r3, r4, #20
 8013b24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013b28:	f109 0314 	add.w	r3, r9, #20
 8013b2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013b30:	9202      	str	r2, [sp, #8]
 8013b32:	1b3a      	subs	r2, r7, r4
 8013b34:	3a15      	subs	r2, #21
 8013b36:	f022 0203 	bic.w	r2, r2, #3
 8013b3a:	3204      	adds	r2, #4
 8013b3c:	f104 0115 	add.w	r1, r4, #21
 8013b40:	428f      	cmp	r7, r1
 8013b42:	bf38      	it	cc
 8013b44:	2204      	movcc	r2, #4
 8013b46:	9201      	str	r2, [sp, #4]
 8013b48:	9a02      	ldr	r2, [sp, #8]
 8013b4a:	9303      	str	r3, [sp, #12]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d80c      	bhi.n	8013b6a <__multiply+0x9e>
 8013b50:	2e00      	cmp	r6, #0
 8013b52:	dd03      	ble.n	8013b5c <__multiply+0x90>
 8013b54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d05a      	beq.n	8013c12 <__multiply+0x146>
 8013b5c:	6106      	str	r6, [r0, #16]
 8013b5e:	b005      	add	sp, #20
 8013b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b64:	f843 2b04 	str.w	r2, [r3], #4
 8013b68:	e7d8      	b.n	8013b1c <__multiply+0x50>
 8013b6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b6e:	f1ba 0f00 	cmp.w	sl, #0
 8013b72:	d024      	beq.n	8013bbe <__multiply+0xf2>
 8013b74:	f104 0e14 	add.w	lr, r4, #20
 8013b78:	46a9      	mov	r9, r5
 8013b7a:	f04f 0c00 	mov.w	ip, #0
 8013b7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013b82:	f8d9 1000 	ldr.w	r1, [r9]
 8013b86:	fa1f fb82 	uxth.w	fp, r2
 8013b8a:	b289      	uxth	r1, r1
 8013b8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8013b90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013b94:	f8d9 2000 	ldr.w	r2, [r9]
 8013b98:	4461      	add	r1, ip
 8013b9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013b9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8013ba2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013ba6:	b289      	uxth	r1, r1
 8013ba8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013bac:	4577      	cmp	r7, lr
 8013bae:	f849 1b04 	str.w	r1, [r9], #4
 8013bb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013bb6:	d8e2      	bhi.n	8013b7e <__multiply+0xb2>
 8013bb8:	9a01      	ldr	r2, [sp, #4]
 8013bba:	f845 c002 	str.w	ip, [r5, r2]
 8013bbe:	9a03      	ldr	r2, [sp, #12]
 8013bc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013bc4:	3304      	adds	r3, #4
 8013bc6:	f1b9 0f00 	cmp.w	r9, #0
 8013bca:	d020      	beq.n	8013c0e <__multiply+0x142>
 8013bcc:	6829      	ldr	r1, [r5, #0]
 8013bce:	f104 0c14 	add.w	ip, r4, #20
 8013bd2:	46ae      	mov	lr, r5
 8013bd4:	f04f 0a00 	mov.w	sl, #0
 8013bd8:	f8bc b000 	ldrh.w	fp, [ip]
 8013bdc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013be0:	fb09 220b 	mla	r2, r9, fp, r2
 8013be4:	4492      	add	sl, r2
 8013be6:	b289      	uxth	r1, r1
 8013be8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013bec:	f84e 1b04 	str.w	r1, [lr], #4
 8013bf0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013bf4:	f8be 1000 	ldrh.w	r1, [lr]
 8013bf8:	0c12      	lsrs	r2, r2, #16
 8013bfa:	fb09 1102 	mla	r1, r9, r2, r1
 8013bfe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013c02:	4567      	cmp	r7, ip
 8013c04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013c08:	d8e6      	bhi.n	8013bd8 <__multiply+0x10c>
 8013c0a:	9a01      	ldr	r2, [sp, #4]
 8013c0c:	50a9      	str	r1, [r5, r2]
 8013c0e:	3504      	adds	r5, #4
 8013c10:	e79a      	b.n	8013b48 <__multiply+0x7c>
 8013c12:	3e01      	subs	r6, #1
 8013c14:	e79c      	b.n	8013b50 <__multiply+0x84>
 8013c16:	bf00      	nop
 8013c18:	080168df 	.word	0x080168df
 8013c1c:	080168f0 	.word	0x080168f0

08013c20 <__pow5mult>:
 8013c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c24:	4615      	mov	r5, r2
 8013c26:	f012 0203 	ands.w	r2, r2, #3
 8013c2a:	4606      	mov	r6, r0
 8013c2c:	460f      	mov	r7, r1
 8013c2e:	d007      	beq.n	8013c40 <__pow5mult+0x20>
 8013c30:	4c25      	ldr	r4, [pc, #148]	; (8013cc8 <__pow5mult+0xa8>)
 8013c32:	3a01      	subs	r2, #1
 8013c34:	2300      	movs	r3, #0
 8013c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c3a:	f7ff fe9b 	bl	8013974 <__multadd>
 8013c3e:	4607      	mov	r7, r0
 8013c40:	10ad      	asrs	r5, r5, #2
 8013c42:	d03d      	beq.n	8013cc0 <__pow5mult+0xa0>
 8013c44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c46:	b97c      	cbnz	r4, 8013c68 <__pow5mult+0x48>
 8013c48:	2010      	movs	r0, #16
 8013c4a:	f7ff fe1b 	bl	8013884 <malloc>
 8013c4e:	4602      	mov	r2, r0
 8013c50:	6270      	str	r0, [r6, #36]	; 0x24
 8013c52:	b928      	cbnz	r0, 8013c60 <__pow5mult+0x40>
 8013c54:	4b1d      	ldr	r3, [pc, #116]	; (8013ccc <__pow5mult+0xac>)
 8013c56:	481e      	ldr	r0, [pc, #120]	; (8013cd0 <__pow5mult+0xb0>)
 8013c58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013c5c:	f000 fab2 	bl	80141c4 <__assert_func>
 8013c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c64:	6004      	str	r4, [r0, #0]
 8013c66:	60c4      	str	r4, [r0, #12]
 8013c68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c70:	b94c      	cbnz	r4, 8013c86 <__pow5mult+0x66>
 8013c72:	f240 2171 	movw	r1, #625	; 0x271
 8013c76:	4630      	mov	r0, r6
 8013c78:	f7ff ff12 	bl	8013aa0 <__i2b>
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c82:	4604      	mov	r4, r0
 8013c84:	6003      	str	r3, [r0, #0]
 8013c86:	f04f 0900 	mov.w	r9, #0
 8013c8a:	07eb      	lsls	r3, r5, #31
 8013c8c:	d50a      	bpl.n	8013ca4 <__pow5mult+0x84>
 8013c8e:	4639      	mov	r1, r7
 8013c90:	4622      	mov	r2, r4
 8013c92:	4630      	mov	r0, r6
 8013c94:	f7ff ff1a 	bl	8013acc <__multiply>
 8013c98:	4639      	mov	r1, r7
 8013c9a:	4680      	mov	r8, r0
 8013c9c:	4630      	mov	r0, r6
 8013c9e:	f7ff fe47 	bl	8013930 <_Bfree>
 8013ca2:	4647      	mov	r7, r8
 8013ca4:	106d      	asrs	r5, r5, #1
 8013ca6:	d00b      	beq.n	8013cc0 <__pow5mult+0xa0>
 8013ca8:	6820      	ldr	r0, [r4, #0]
 8013caa:	b938      	cbnz	r0, 8013cbc <__pow5mult+0x9c>
 8013cac:	4622      	mov	r2, r4
 8013cae:	4621      	mov	r1, r4
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	f7ff ff0b 	bl	8013acc <__multiply>
 8013cb6:	6020      	str	r0, [r4, #0]
 8013cb8:	f8c0 9000 	str.w	r9, [r0]
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	e7e4      	b.n	8013c8a <__pow5mult+0x6a>
 8013cc0:	4638      	mov	r0, r7
 8013cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cc6:	bf00      	nop
 8013cc8:	08016a40 	.word	0x08016a40
 8013ccc:	0801686d 	.word	0x0801686d
 8013cd0:	080168f0 	.word	0x080168f0

08013cd4 <__lshift>:
 8013cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cd8:	460c      	mov	r4, r1
 8013cda:	6849      	ldr	r1, [r1, #4]
 8013cdc:	6923      	ldr	r3, [r4, #16]
 8013cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ce2:	68a3      	ldr	r3, [r4, #8]
 8013ce4:	4607      	mov	r7, r0
 8013ce6:	4691      	mov	r9, r2
 8013ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013cec:	f108 0601 	add.w	r6, r8, #1
 8013cf0:	42b3      	cmp	r3, r6
 8013cf2:	db0b      	blt.n	8013d0c <__lshift+0x38>
 8013cf4:	4638      	mov	r0, r7
 8013cf6:	f7ff fddb 	bl	80138b0 <_Balloc>
 8013cfa:	4605      	mov	r5, r0
 8013cfc:	b948      	cbnz	r0, 8013d12 <__lshift+0x3e>
 8013cfe:	4602      	mov	r2, r0
 8013d00:	4b2a      	ldr	r3, [pc, #168]	; (8013dac <__lshift+0xd8>)
 8013d02:	482b      	ldr	r0, [pc, #172]	; (8013db0 <__lshift+0xdc>)
 8013d04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013d08:	f000 fa5c 	bl	80141c4 <__assert_func>
 8013d0c:	3101      	adds	r1, #1
 8013d0e:	005b      	lsls	r3, r3, #1
 8013d10:	e7ee      	b.n	8013cf0 <__lshift+0x1c>
 8013d12:	2300      	movs	r3, #0
 8013d14:	f100 0114 	add.w	r1, r0, #20
 8013d18:	f100 0210 	add.w	r2, r0, #16
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	4553      	cmp	r3, sl
 8013d20:	db37      	blt.n	8013d92 <__lshift+0xbe>
 8013d22:	6920      	ldr	r0, [r4, #16]
 8013d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d28:	f104 0314 	add.w	r3, r4, #20
 8013d2c:	f019 091f 	ands.w	r9, r9, #31
 8013d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013d38:	d02f      	beq.n	8013d9a <__lshift+0xc6>
 8013d3a:	f1c9 0e20 	rsb	lr, r9, #32
 8013d3e:	468a      	mov	sl, r1
 8013d40:	f04f 0c00 	mov.w	ip, #0
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	fa02 f209 	lsl.w	r2, r2, r9
 8013d4a:	ea42 020c 	orr.w	r2, r2, ip
 8013d4e:	f84a 2b04 	str.w	r2, [sl], #4
 8013d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d56:	4298      	cmp	r0, r3
 8013d58:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013d5c:	d8f2      	bhi.n	8013d44 <__lshift+0x70>
 8013d5e:	1b03      	subs	r3, r0, r4
 8013d60:	3b15      	subs	r3, #21
 8013d62:	f023 0303 	bic.w	r3, r3, #3
 8013d66:	3304      	adds	r3, #4
 8013d68:	f104 0215 	add.w	r2, r4, #21
 8013d6c:	4290      	cmp	r0, r2
 8013d6e:	bf38      	it	cc
 8013d70:	2304      	movcc	r3, #4
 8013d72:	f841 c003 	str.w	ip, [r1, r3]
 8013d76:	f1bc 0f00 	cmp.w	ip, #0
 8013d7a:	d001      	beq.n	8013d80 <__lshift+0xac>
 8013d7c:	f108 0602 	add.w	r6, r8, #2
 8013d80:	3e01      	subs	r6, #1
 8013d82:	4638      	mov	r0, r7
 8013d84:	612e      	str	r6, [r5, #16]
 8013d86:	4621      	mov	r1, r4
 8013d88:	f7ff fdd2 	bl	8013930 <_Bfree>
 8013d8c:	4628      	mov	r0, r5
 8013d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d92:	f842 0f04 	str.w	r0, [r2, #4]!
 8013d96:	3301      	adds	r3, #1
 8013d98:	e7c1      	b.n	8013d1e <__lshift+0x4a>
 8013d9a:	3904      	subs	r1, #4
 8013d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013da4:	4298      	cmp	r0, r3
 8013da6:	d8f9      	bhi.n	8013d9c <__lshift+0xc8>
 8013da8:	e7ea      	b.n	8013d80 <__lshift+0xac>
 8013daa:	bf00      	nop
 8013dac:	080168df 	.word	0x080168df
 8013db0:	080168f0 	.word	0x080168f0

08013db4 <__mcmp>:
 8013db4:	b530      	push	{r4, r5, lr}
 8013db6:	6902      	ldr	r2, [r0, #16]
 8013db8:	690c      	ldr	r4, [r1, #16]
 8013dba:	1b12      	subs	r2, r2, r4
 8013dbc:	d10e      	bne.n	8013ddc <__mcmp+0x28>
 8013dbe:	f100 0314 	add.w	r3, r0, #20
 8013dc2:	3114      	adds	r1, #20
 8013dc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013dc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013dcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013dd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013dd4:	42a5      	cmp	r5, r4
 8013dd6:	d003      	beq.n	8013de0 <__mcmp+0x2c>
 8013dd8:	d305      	bcc.n	8013de6 <__mcmp+0x32>
 8013dda:	2201      	movs	r2, #1
 8013ddc:	4610      	mov	r0, r2
 8013dde:	bd30      	pop	{r4, r5, pc}
 8013de0:	4283      	cmp	r3, r0
 8013de2:	d3f3      	bcc.n	8013dcc <__mcmp+0x18>
 8013de4:	e7fa      	b.n	8013ddc <__mcmp+0x28>
 8013de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dea:	e7f7      	b.n	8013ddc <__mcmp+0x28>

08013dec <__mdiff>:
 8013dec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df0:	460c      	mov	r4, r1
 8013df2:	4606      	mov	r6, r0
 8013df4:	4611      	mov	r1, r2
 8013df6:	4620      	mov	r0, r4
 8013df8:	4690      	mov	r8, r2
 8013dfa:	f7ff ffdb 	bl	8013db4 <__mcmp>
 8013dfe:	1e05      	subs	r5, r0, #0
 8013e00:	d110      	bne.n	8013e24 <__mdiff+0x38>
 8013e02:	4629      	mov	r1, r5
 8013e04:	4630      	mov	r0, r6
 8013e06:	f7ff fd53 	bl	80138b0 <_Balloc>
 8013e0a:	b930      	cbnz	r0, 8013e1a <__mdiff+0x2e>
 8013e0c:	4b3a      	ldr	r3, [pc, #232]	; (8013ef8 <__mdiff+0x10c>)
 8013e0e:	4602      	mov	r2, r0
 8013e10:	f240 2132 	movw	r1, #562	; 0x232
 8013e14:	4839      	ldr	r0, [pc, #228]	; (8013efc <__mdiff+0x110>)
 8013e16:	f000 f9d5 	bl	80141c4 <__assert_func>
 8013e1a:	2301      	movs	r3, #1
 8013e1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e24:	bfa4      	itt	ge
 8013e26:	4643      	movge	r3, r8
 8013e28:	46a0      	movge	r8, r4
 8013e2a:	4630      	mov	r0, r6
 8013e2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013e30:	bfa6      	itte	ge
 8013e32:	461c      	movge	r4, r3
 8013e34:	2500      	movge	r5, #0
 8013e36:	2501      	movlt	r5, #1
 8013e38:	f7ff fd3a 	bl	80138b0 <_Balloc>
 8013e3c:	b920      	cbnz	r0, 8013e48 <__mdiff+0x5c>
 8013e3e:	4b2e      	ldr	r3, [pc, #184]	; (8013ef8 <__mdiff+0x10c>)
 8013e40:	4602      	mov	r2, r0
 8013e42:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013e46:	e7e5      	b.n	8013e14 <__mdiff+0x28>
 8013e48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013e4c:	6926      	ldr	r6, [r4, #16]
 8013e4e:	60c5      	str	r5, [r0, #12]
 8013e50:	f104 0914 	add.w	r9, r4, #20
 8013e54:	f108 0514 	add.w	r5, r8, #20
 8013e58:	f100 0e14 	add.w	lr, r0, #20
 8013e5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013e60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013e64:	f108 0210 	add.w	r2, r8, #16
 8013e68:	46f2      	mov	sl, lr
 8013e6a:	2100      	movs	r1, #0
 8013e6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e74:	fa1f f883 	uxth.w	r8, r3
 8013e78:	fa11 f18b 	uxtah	r1, r1, fp
 8013e7c:	0c1b      	lsrs	r3, r3, #16
 8013e7e:	eba1 0808 	sub.w	r8, r1, r8
 8013e82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013e8a:	fa1f f888 	uxth.w	r8, r8
 8013e8e:	1419      	asrs	r1, r3, #16
 8013e90:	454e      	cmp	r6, r9
 8013e92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013e96:	f84a 3b04 	str.w	r3, [sl], #4
 8013e9a:	d8e7      	bhi.n	8013e6c <__mdiff+0x80>
 8013e9c:	1b33      	subs	r3, r6, r4
 8013e9e:	3b15      	subs	r3, #21
 8013ea0:	f023 0303 	bic.w	r3, r3, #3
 8013ea4:	3304      	adds	r3, #4
 8013ea6:	3415      	adds	r4, #21
 8013ea8:	42a6      	cmp	r6, r4
 8013eaa:	bf38      	it	cc
 8013eac:	2304      	movcc	r3, #4
 8013eae:	441d      	add	r5, r3
 8013eb0:	4473      	add	r3, lr
 8013eb2:	469e      	mov	lr, r3
 8013eb4:	462e      	mov	r6, r5
 8013eb6:	4566      	cmp	r6, ip
 8013eb8:	d30e      	bcc.n	8013ed8 <__mdiff+0xec>
 8013eba:	f10c 0203 	add.w	r2, ip, #3
 8013ebe:	1b52      	subs	r2, r2, r5
 8013ec0:	f022 0203 	bic.w	r2, r2, #3
 8013ec4:	3d03      	subs	r5, #3
 8013ec6:	45ac      	cmp	ip, r5
 8013ec8:	bf38      	it	cc
 8013eca:	2200      	movcc	r2, #0
 8013ecc:	441a      	add	r2, r3
 8013ece:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013ed2:	b17b      	cbz	r3, 8013ef4 <__mdiff+0x108>
 8013ed4:	6107      	str	r7, [r0, #16]
 8013ed6:	e7a3      	b.n	8013e20 <__mdiff+0x34>
 8013ed8:	f856 8b04 	ldr.w	r8, [r6], #4
 8013edc:	fa11 f288 	uxtah	r2, r1, r8
 8013ee0:	1414      	asrs	r4, r2, #16
 8013ee2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013ee6:	b292      	uxth	r2, r2
 8013ee8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013eec:	f84e 2b04 	str.w	r2, [lr], #4
 8013ef0:	1421      	asrs	r1, r4, #16
 8013ef2:	e7e0      	b.n	8013eb6 <__mdiff+0xca>
 8013ef4:	3f01      	subs	r7, #1
 8013ef6:	e7ea      	b.n	8013ece <__mdiff+0xe2>
 8013ef8:	080168df 	.word	0x080168df
 8013efc:	080168f0 	.word	0x080168f0

08013f00 <__d2b>:
 8013f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f04:	4689      	mov	r9, r1
 8013f06:	2101      	movs	r1, #1
 8013f08:	ec57 6b10 	vmov	r6, r7, d0
 8013f0c:	4690      	mov	r8, r2
 8013f0e:	f7ff fccf 	bl	80138b0 <_Balloc>
 8013f12:	4604      	mov	r4, r0
 8013f14:	b930      	cbnz	r0, 8013f24 <__d2b+0x24>
 8013f16:	4602      	mov	r2, r0
 8013f18:	4b25      	ldr	r3, [pc, #148]	; (8013fb0 <__d2b+0xb0>)
 8013f1a:	4826      	ldr	r0, [pc, #152]	; (8013fb4 <__d2b+0xb4>)
 8013f1c:	f240 310a 	movw	r1, #778	; 0x30a
 8013f20:	f000 f950 	bl	80141c4 <__assert_func>
 8013f24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013f28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f2c:	bb35      	cbnz	r5, 8013f7c <__d2b+0x7c>
 8013f2e:	2e00      	cmp	r6, #0
 8013f30:	9301      	str	r3, [sp, #4]
 8013f32:	d028      	beq.n	8013f86 <__d2b+0x86>
 8013f34:	4668      	mov	r0, sp
 8013f36:	9600      	str	r6, [sp, #0]
 8013f38:	f7ff fd82 	bl	8013a40 <__lo0bits>
 8013f3c:	9900      	ldr	r1, [sp, #0]
 8013f3e:	b300      	cbz	r0, 8013f82 <__d2b+0x82>
 8013f40:	9a01      	ldr	r2, [sp, #4]
 8013f42:	f1c0 0320 	rsb	r3, r0, #32
 8013f46:	fa02 f303 	lsl.w	r3, r2, r3
 8013f4a:	430b      	orrs	r3, r1
 8013f4c:	40c2      	lsrs	r2, r0
 8013f4e:	6163      	str	r3, [r4, #20]
 8013f50:	9201      	str	r2, [sp, #4]
 8013f52:	9b01      	ldr	r3, [sp, #4]
 8013f54:	61a3      	str	r3, [r4, #24]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	bf14      	ite	ne
 8013f5a:	2202      	movne	r2, #2
 8013f5c:	2201      	moveq	r2, #1
 8013f5e:	6122      	str	r2, [r4, #16]
 8013f60:	b1d5      	cbz	r5, 8013f98 <__d2b+0x98>
 8013f62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013f66:	4405      	add	r5, r0
 8013f68:	f8c9 5000 	str.w	r5, [r9]
 8013f6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013f70:	f8c8 0000 	str.w	r0, [r8]
 8013f74:	4620      	mov	r0, r4
 8013f76:	b003      	add	sp, #12
 8013f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f80:	e7d5      	b.n	8013f2e <__d2b+0x2e>
 8013f82:	6161      	str	r1, [r4, #20]
 8013f84:	e7e5      	b.n	8013f52 <__d2b+0x52>
 8013f86:	a801      	add	r0, sp, #4
 8013f88:	f7ff fd5a 	bl	8013a40 <__lo0bits>
 8013f8c:	9b01      	ldr	r3, [sp, #4]
 8013f8e:	6163      	str	r3, [r4, #20]
 8013f90:	2201      	movs	r2, #1
 8013f92:	6122      	str	r2, [r4, #16]
 8013f94:	3020      	adds	r0, #32
 8013f96:	e7e3      	b.n	8013f60 <__d2b+0x60>
 8013f98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013f9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013fa0:	f8c9 0000 	str.w	r0, [r9]
 8013fa4:	6918      	ldr	r0, [r3, #16]
 8013fa6:	f7ff fd2b 	bl	8013a00 <__hi0bits>
 8013faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013fae:	e7df      	b.n	8013f70 <__d2b+0x70>
 8013fb0:	080168df 	.word	0x080168df
 8013fb4:	080168f0 	.word	0x080168f0

08013fb8 <_calloc_r>:
 8013fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fba:	fba1 2402 	umull	r2, r4, r1, r2
 8013fbe:	b94c      	cbnz	r4, 8013fd4 <_calloc_r+0x1c>
 8013fc0:	4611      	mov	r1, r2
 8013fc2:	9201      	str	r2, [sp, #4]
 8013fc4:	f000 f87a 	bl	80140bc <_malloc_r>
 8013fc8:	9a01      	ldr	r2, [sp, #4]
 8013fca:	4605      	mov	r5, r0
 8013fcc:	b930      	cbnz	r0, 8013fdc <_calloc_r+0x24>
 8013fce:	4628      	mov	r0, r5
 8013fd0:	b003      	add	sp, #12
 8013fd2:	bd30      	pop	{r4, r5, pc}
 8013fd4:	220c      	movs	r2, #12
 8013fd6:	6002      	str	r2, [r0, #0]
 8013fd8:	2500      	movs	r5, #0
 8013fda:	e7f8      	b.n	8013fce <_calloc_r+0x16>
 8013fdc:	4621      	mov	r1, r4
 8013fde:	f7fe fa07 	bl	80123f0 <memset>
 8013fe2:	e7f4      	b.n	8013fce <_calloc_r+0x16>

08013fe4 <_free_r>:
 8013fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fe6:	2900      	cmp	r1, #0
 8013fe8:	d044      	beq.n	8014074 <_free_r+0x90>
 8013fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fee:	9001      	str	r0, [sp, #4]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8013ff6:	bfb8      	it	lt
 8013ff8:	18e4      	addlt	r4, r4, r3
 8013ffa:	f000 f925 	bl	8014248 <__malloc_lock>
 8013ffe:	4a1e      	ldr	r2, [pc, #120]	; (8014078 <_free_r+0x94>)
 8014000:	9801      	ldr	r0, [sp, #4]
 8014002:	6813      	ldr	r3, [r2, #0]
 8014004:	b933      	cbnz	r3, 8014014 <_free_r+0x30>
 8014006:	6063      	str	r3, [r4, #4]
 8014008:	6014      	str	r4, [r2, #0]
 801400a:	b003      	add	sp, #12
 801400c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014010:	f000 b920 	b.w	8014254 <__malloc_unlock>
 8014014:	42a3      	cmp	r3, r4
 8014016:	d908      	bls.n	801402a <_free_r+0x46>
 8014018:	6825      	ldr	r5, [r4, #0]
 801401a:	1961      	adds	r1, r4, r5
 801401c:	428b      	cmp	r3, r1
 801401e:	bf01      	itttt	eq
 8014020:	6819      	ldreq	r1, [r3, #0]
 8014022:	685b      	ldreq	r3, [r3, #4]
 8014024:	1949      	addeq	r1, r1, r5
 8014026:	6021      	streq	r1, [r4, #0]
 8014028:	e7ed      	b.n	8014006 <_free_r+0x22>
 801402a:	461a      	mov	r2, r3
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	b10b      	cbz	r3, 8014034 <_free_r+0x50>
 8014030:	42a3      	cmp	r3, r4
 8014032:	d9fa      	bls.n	801402a <_free_r+0x46>
 8014034:	6811      	ldr	r1, [r2, #0]
 8014036:	1855      	adds	r5, r2, r1
 8014038:	42a5      	cmp	r5, r4
 801403a:	d10b      	bne.n	8014054 <_free_r+0x70>
 801403c:	6824      	ldr	r4, [r4, #0]
 801403e:	4421      	add	r1, r4
 8014040:	1854      	adds	r4, r2, r1
 8014042:	42a3      	cmp	r3, r4
 8014044:	6011      	str	r1, [r2, #0]
 8014046:	d1e0      	bne.n	801400a <_free_r+0x26>
 8014048:	681c      	ldr	r4, [r3, #0]
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	6053      	str	r3, [r2, #4]
 801404e:	4421      	add	r1, r4
 8014050:	6011      	str	r1, [r2, #0]
 8014052:	e7da      	b.n	801400a <_free_r+0x26>
 8014054:	d902      	bls.n	801405c <_free_r+0x78>
 8014056:	230c      	movs	r3, #12
 8014058:	6003      	str	r3, [r0, #0]
 801405a:	e7d6      	b.n	801400a <_free_r+0x26>
 801405c:	6825      	ldr	r5, [r4, #0]
 801405e:	1961      	adds	r1, r4, r5
 8014060:	428b      	cmp	r3, r1
 8014062:	bf04      	itt	eq
 8014064:	6819      	ldreq	r1, [r3, #0]
 8014066:	685b      	ldreq	r3, [r3, #4]
 8014068:	6063      	str	r3, [r4, #4]
 801406a:	bf04      	itt	eq
 801406c:	1949      	addeq	r1, r1, r5
 801406e:	6021      	streq	r1, [r4, #0]
 8014070:	6054      	str	r4, [r2, #4]
 8014072:	e7ca      	b.n	801400a <_free_r+0x26>
 8014074:	b003      	add	sp, #12
 8014076:	bd30      	pop	{r4, r5, pc}
 8014078:	24001750 	.word	0x24001750

0801407c <sbrk_aligned>:
 801407c:	b570      	push	{r4, r5, r6, lr}
 801407e:	4e0e      	ldr	r6, [pc, #56]	; (80140b8 <sbrk_aligned+0x3c>)
 8014080:	460c      	mov	r4, r1
 8014082:	6831      	ldr	r1, [r6, #0]
 8014084:	4605      	mov	r5, r0
 8014086:	b911      	cbnz	r1, 801408e <sbrk_aligned+0x12>
 8014088:	f000 f88c 	bl	80141a4 <_sbrk_r>
 801408c:	6030      	str	r0, [r6, #0]
 801408e:	4621      	mov	r1, r4
 8014090:	4628      	mov	r0, r5
 8014092:	f000 f887 	bl	80141a4 <_sbrk_r>
 8014096:	1c43      	adds	r3, r0, #1
 8014098:	d00a      	beq.n	80140b0 <sbrk_aligned+0x34>
 801409a:	1cc4      	adds	r4, r0, #3
 801409c:	f024 0403 	bic.w	r4, r4, #3
 80140a0:	42a0      	cmp	r0, r4
 80140a2:	d007      	beq.n	80140b4 <sbrk_aligned+0x38>
 80140a4:	1a21      	subs	r1, r4, r0
 80140a6:	4628      	mov	r0, r5
 80140a8:	f000 f87c 	bl	80141a4 <_sbrk_r>
 80140ac:	3001      	adds	r0, #1
 80140ae:	d101      	bne.n	80140b4 <sbrk_aligned+0x38>
 80140b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80140b4:	4620      	mov	r0, r4
 80140b6:	bd70      	pop	{r4, r5, r6, pc}
 80140b8:	24001754 	.word	0x24001754

080140bc <_malloc_r>:
 80140bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c0:	1ccd      	adds	r5, r1, #3
 80140c2:	f025 0503 	bic.w	r5, r5, #3
 80140c6:	3508      	adds	r5, #8
 80140c8:	2d0c      	cmp	r5, #12
 80140ca:	bf38      	it	cc
 80140cc:	250c      	movcc	r5, #12
 80140ce:	2d00      	cmp	r5, #0
 80140d0:	4607      	mov	r7, r0
 80140d2:	db01      	blt.n	80140d8 <_malloc_r+0x1c>
 80140d4:	42a9      	cmp	r1, r5
 80140d6:	d905      	bls.n	80140e4 <_malloc_r+0x28>
 80140d8:	230c      	movs	r3, #12
 80140da:	603b      	str	r3, [r7, #0]
 80140dc:	2600      	movs	r6, #0
 80140de:	4630      	mov	r0, r6
 80140e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140e4:	4e2e      	ldr	r6, [pc, #184]	; (80141a0 <_malloc_r+0xe4>)
 80140e6:	f000 f8af 	bl	8014248 <__malloc_lock>
 80140ea:	6833      	ldr	r3, [r6, #0]
 80140ec:	461c      	mov	r4, r3
 80140ee:	bb34      	cbnz	r4, 801413e <_malloc_r+0x82>
 80140f0:	4629      	mov	r1, r5
 80140f2:	4638      	mov	r0, r7
 80140f4:	f7ff ffc2 	bl	801407c <sbrk_aligned>
 80140f8:	1c43      	adds	r3, r0, #1
 80140fa:	4604      	mov	r4, r0
 80140fc:	d14d      	bne.n	801419a <_malloc_r+0xde>
 80140fe:	6834      	ldr	r4, [r6, #0]
 8014100:	4626      	mov	r6, r4
 8014102:	2e00      	cmp	r6, #0
 8014104:	d140      	bne.n	8014188 <_malloc_r+0xcc>
 8014106:	6823      	ldr	r3, [r4, #0]
 8014108:	4631      	mov	r1, r6
 801410a:	4638      	mov	r0, r7
 801410c:	eb04 0803 	add.w	r8, r4, r3
 8014110:	f000 f848 	bl	80141a4 <_sbrk_r>
 8014114:	4580      	cmp	r8, r0
 8014116:	d13a      	bne.n	801418e <_malloc_r+0xd2>
 8014118:	6821      	ldr	r1, [r4, #0]
 801411a:	3503      	adds	r5, #3
 801411c:	1a6d      	subs	r5, r5, r1
 801411e:	f025 0503 	bic.w	r5, r5, #3
 8014122:	3508      	adds	r5, #8
 8014124:	2d0c      	cmp	r5, #12
 8014126:	bf38      	it	cc
 8014128:	250c      	movcc	r5, #12
 801412a:	4629      	mov	r1, r5
 801412c:	4638      	mov	r0, r7
 801412e:	f7ff ffa5 	bl	801407c <sbrk_aligned>
 8014132:	3001      	adds	r0, #1
 8014134:	d02b      	beq.n	801418e <_malloc_r+0xd2>
 8014136:	6823      	ldr	r3, [r4, #0]
 8014138:	442b      	add	r3, r5
 801413a:	6023      	str	r3, [r4, #0]
 801413c:	e00e      	b.n	801415c <_malloc_r+0xa0>
 801413e:	6822      	ldr	r2, [r4, #0]
 8014140:	1b52      	subs	r2, r2, r5
 8014142:	d41e      	bmi.n	8014182 <_malloc_r+0xc6>
 8014144:	2a0b      	cmp	r2, #11
 8014146:	d916      	bls.n	8014176 <_malloc_r+0xba>
 8014148:	1961      	adds	r1, r4, r5
 801414a:	42a3      	cmp	r3, r4
 801414c:	6025      	str	r5, [r4, #0]
 801414e:	bf18      	it	ne
 8014150:	6059      	strne	r1, [r3, #4]
 8014152:	6863      	ldr	r3, [r4, #4]
 8014154:	bf08      	it	eq
 8014156:	6031      	streq	r1, [r6, #0]
 8014158:	5162      	str	r2, [r4, r5]
 801415a:	604b      	str	r3, [r1, #4]
 801415c:	4638      	mov	r0, r7
 801415e:	f104 060b 	add.w	r6, r4, #11
 8014162:	f000 f877 	bl	8014254 <__malloc_unlock>
 8014166:	f026 0607 	bic.w	r6, r6, #7
 801416a:	1d23      	adds	r3, r4, #4
 801416c:	1af2      	subs	r2, r6, r3
 801416e:	d0b6      	beq.n	80140de <_malloc_r+0x22>
 8014170:	1b9b      	subs	r3, r3, r6
 8014172:	50a3      	str	r3, [r4, r2]
 8014174:	e7b3      	b.n	80140de <_malloc_r+0x22>
 8014176:	6862      	ldr	r2, [r4, #4]
 8014178:	42a3      	cmp	r3, r4
 801417a:	bf0c      	ite	eq
 801417c:	6032      	streq	r2, [r6, #0]
 801417e:	605a      	strne	r2, [r3, #4]
 8014180:	e7ec      	b.n	801415c <_malloc_r+0xa0>
 8014182:	4623      	mov	r3, r4
 8014184:	6864      	ldr	r4, [r4, #4]
 8014186:	e7b2      	b.n	80140ee <_malloc_r+0x32>
 8014188:	4634      	mov	r4, r6
 801418a:	6876      	ldr	r6, [r6, #4]
 801418c:	e7b9      	b.n	8014102 <_malloc_r+0x46>
 801418e:	230c      	movs	r3, #12
 8014190:	603b      	str	r3, [r7, #0]
 8014192:	4638      	mov	r0, r7
 8014194:	f000 f85e 	bl	8014254 <__malloc_unlock>
 8014198:	e7a1      	b.n	80140de <_malloc_r+0x22>
 801419a:	6025      	str	r5, [r4, #0]
 801419c:	e7de      	b.n	801415c <_malloc_r+0xa0>
 801419e:	bf00      	nop
 80141a0:	24001750 	.word	0x24001750

080141a4 <_sbrk_r>:
 80141a4:	b538      	push	{r3, r4, r5, lr}
 80141a6:	4d06      	ldr	r5, [pc, #24]	; (80141c0 <_sbrk_r+0x1c>)
 80141a8:	2300      	movs	r3, #0
 80141aa:	4604      	mov	r4, r0
 80141ac:	4608      	mov	r0, r1
 80141ae:	602b      	str	r3, [r5, #0]
 80141b0:	f7f1 f832 	bl	8005218 <_sbrk>
 80141b4:	1c43      	adds	r3, r0, #1
 80141b6:	d102      	bne.n	80141be <_sbrk_r+0x1a>
 80141b8:	682b      	ldr	r3, [r5, #0]
 80141ba:	b103      	cbz	r3, 80141be <_sbrk_r+0x1a>
 80141bc:	6023      	str	r3, [r4, #0]
 80141be:	bd38      	pop	{r3, r4, r5, pc}
 80141c0:	24001758 	.word	0x24001758

080141c4 <__assert_func>:
 80141c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141c6:	4614      	mov	r4, r2
 80141c8:	461a      	mov	r2, r3
 80141ca:	4b09      	ldr	r3, [pc, #36]	; (80141f0 <__assert_func+0x2c>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	4605      	mov	r5, r0
 80141d0:	68d8      	ldr	r0, [r3, #12]
 80141d2:	b14c      	cbz	r4, 80141e8 <__assert_func+0x24>
 80141d4:	4b07      	ldr	r3, [pc, #28]	; (80141f4 <__assert_func+0x30>)
 80141d6:	9100      	str	r1, [sp, #0]
 80141d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80141dc:	4906      	ldr	r1, [pc, #24]	; (80141f8 <__assert_func+0x34>)
 80141de:	462b      	mov	r3, r5
 80141e0:	f000 f80e 	bl	8014200 <fiprintf>
 80141e4:	f000 fa64 	bl	80146b0 <abort>
 80141e8:	4b04      	ldr	r3, [pc, #16]	; (80141fc <__assert_func+0x38>)
 80141ea:	461c      	mov	r4, r3
 80141ec:	e7f3      	b.n	80141d6 <__assert_func+0x12>
 80141ee:	bf00      	nop
 80141f0:	24000248 	.word	0x24000248
 80141f4:	08016a4c 	.word	0x08016a4c
 80141f8:	08016a59 	.word	0x08016a59
 80141fc:	08016a87 	.word	0x08016a87

08014200 <fiprintf>:
 8014200:	b40e      	push	{r1, r2, r3}
 8014202:	b503      	push	{r0, r1, lr}
 8014204:	4601      	mov	r1, r0
 8014206:	ab03      	add	r3, sp, #12
 8014208:	4805      	ldr	r0, [pc, #20]	; (8014220 <fiprintf+0x20>)
 801420a:	f853 2b04 	ldr.w	r2, [r3], #4
 801420e:	6800      	ldr	r0, [r0, #0]
 8014210:	9301      	str	r3, [sp, #4]
 8014212:	f000 f84f 	bl	80142b4 <_vfiprintf_r>
 8014216:	b002      	add	sp, #8
 8014218:	f85d eb04 	ldr.w	lr, [sp], #4
 801421c:	b003      	add	sp, #12
 801421e:	4770      	bx	lr
 8014220:	24000248 	.word	0x24000248

08014224 <__ascii_mbtowc>:
 8014224:	b082      	sub	sp, #8
 8014226:	b901      	cbnz	r1, 801422a <__ascii_mbtowc+0x6>
 8014228:	a901      	add	r1, sp, #4
 801422a:	b142      	cbz	r2, 801423e <__ascii_mbtowc+0x1a>
 801422c:	b14b      	cbz	r3, 8014242 <__ascii_mbtowc+0x1e>
 801422e:	7813      	ldrb	r3, [r2, #0]
 8014230:	600b      	str	r3, [r1, #0]
 8014232:	7812      	ldrb	r2, [r2, #0]
 8014234:	1e10      	subs	r0, r2, #0
 8014236:	bf18      	it	ne
 8014238:	2001      	movne	r0, #1
 801423a:	b002      	add	sp, #8
 801423c:	4770      	bx	lr
 801423e:	4610      	mov	r0, r2
 8014240:	e7fb      	b.n	801423a <__ascii_mbtowc+0x16>
 8014242:	f06f 0001 	mvn.w	r0, #1
 8014246:	e7f8      	b.n	801423a <__ascii_mbtowc+0x16>

08014248 <__malloc_lock>:
 8014248:	4801      	ldr	r0, [pc, #4]	; (8014250 <__malloc_lock+0x8>)
 801424a:	f000 bbf1 	b.w	8014a30 <__retarget_lock_acquire_recursive>
 801424e:	bf00      	nop
 8014250:	2400175c 	.word	0x2400175c

08014254 <__malloc_unlock>:
 8014254:	4801      	ldr	r0, [pc, #4]	; (801425c <__malloc_unlock+0x8>)
 8014256:	f000 bbec 	b.w	8014a32 <__retarget_lock_release_recursive>
 801425a:	bf00      	nop
 801425c:	2400175c 	.word	0x2400175c

08014260 <__sfputc_r>:
 8014260:	6893      	ldr	r3, [r2, #8]
 8014262:	3b01      	subs	r3, #1
 8014264:	2b00      	cmp	r3, #0
 8014266:	b410      	push	{r4}
 8014268:	6093      	str	r3, [r2, #8]
 801426a:	da08      	bge.n	801427e <__sfputc_r+0x1e>
 801426c:	6994      	ldr	r4, [r2, #24]
 801426e:	42a3      	cmp	r3, r4
 8014270:	db01      	blt.n	8014276 <__sfputc_r+0x16>
 8014272:	290a      	cmp	r1, #10
 8014274:	d103      	bne.n	801427e <__sfputc_r+0x1e>
 8014276:	f85d 4b04 	ldr.w	r4, [sp], #4
 801427a:	f000 b94b 	b.w	8014514 <__swbuf_r>
 801427e:	6813      	ldr	r3, [r2, #0]
 8014280:	1c58      	adds	r0, r3, #1
 8014282:	6010      	str	r0, [r2, #0]
 8014284:	7019      	strb	r1, [r3, #0]
 8014286:	4608      	mov	r0, r1
 8014288:	f85d 4b04 	ldr.w	r4, [sp], #4
 801428c:	4770      	bx	lr

0801428e <__sfputs_r>:
 801428e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014290:	4606      	mov	r6, r0
 8014292:	460f      	mov	r7, r1
 8014294:	4614      	mov	r4, r2
 8014296:	18d5      	adds	r5, r2, r3
 8014298:	42ac      	cmp	r4, r5
 801429a:	d101      	bne.n	80142a0 <__sfputs_r+0x12>
 801429c:	2000      	movs	r0, #0
 801429e:	e007      	b.n	80142b0 <__sfputs_r+0x22>
 80142a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142a4:	463a      	mov	r2, r7
 80142a6:	4630      	mov	r0, r6
 80142a8:	f7ff ffda 	bl	8014260 <__sfputc_r>
 80142ac:	1c43      	adds	r3, r0, #1
 80142ae:	d1f3      	bne.n	8014298 <__sfputs_r+0xa>
 80142b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080142b4 <_vfiprintf_r>:
 80142b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b8:	460d      	mov	r5, r1
 80142ba:	b09d      	sub	sp, #116	; 0x74
 80142bc:	4614      	mov	r4, r2
 80142be:	4698      	mov	r8, r3
 80142c0:	4606      	mov	r6, r0
 80142c2:	b118      	cbz	r0, 80142cc <_vfiprintf_r+0x18>
 80142c4:	6983      	ldr	r3, [r0, #24]
 80142c6:	b90b      	cbnz	r3, 80142cc <_vfiprintf_r+0x18>
 80142c8:	f000 fb14 	bl	80148f4 <__sinit>
 80142cc:	4b89      	ldr	r3, [pc, #548]	; (80144f4 <_vfiprintf_r+0x240>)
 80142ce:	429d      	cmp	r5, r3
 80142d0:	d11b      	bne.n	801430a <_vfiprintf_r+0x56>
 80142d2:	6875      	ldr	r5, [r6, #4]
 80142d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142d6:	07d9      	lsls	r1, r3, #31
 80142d8:	d405      	bmi.n	80142e6 <_vfiprintf_r+0x32>
 80142da:	89ab      	ldrh	r3, [r5, #12]
 80142dc:	059a      	lsls	r2, r3, #22
 80142de:	d402      	bmi.n	80142e6 <_vfiprintf_r+0x32>
 80142e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142e2:	f000 fba5 	bl	8014a30 <__retarget_lock_acquire_recursive>
 80142e6:	89ab      	ldrh	r3, [r5, #12]
 80142e8:	071b      	lsls	r3, r3, #28
 80142ea:	d501      	bpl.n	80142f0 <_vfiprintf_r+0x3c>
 80142ec:	692b      	ldr	r3, [r5, #16]
 80142ee:	b9eb      	cbnz	r3, 801432c <_vfiprintf_r+0x78>
 80142f0:	4629      	mov	r1, r5
 80142f2:	4630      	mov	r0, r6
 80142f4:	f000 f96e 	bl	80145d4 <__swsetup_r>
 80142f8:	b1c0      	cbz	r0, 801432c <_vfiprintf_r+0x78>
 80142fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142fc:	07dc      	lsls	r4, r3, #31
 80142fe:	d50e      	bpl.n	801431e <_vfiprintf_r+0x6a>
 8014300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014304:	b01d      	add	sp, #116	; 0x74
 8014306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801430a:	4b7b      	ldr	r3, [pc, #492]	; (80144f8 <_vfiprintf_r+0x244>)
 801430c:	429d      	cmp	r5, r3
 801430e:	d101      	bne.n	8014314 <_vfiprintf_r+0x60>
 8014310:	68b5      	ldr	r5, [r6, #8]
 8014312:	e7df      	b.n	80142d4 <_vfiprintf_r+0x20>
 8014314:	4b79      	ldr	r3, [pc, #484]	; (80144fc <_vfiprintf_r+0x248>)
 8014316:	429d      	cmp	r5, r3
 8014318:	bf08      	it	eq
 801431a:	68f5      	ldreq	r5, [r6, #12]
 801431c:	e7da      	b.n	80142d4 <_vfiprintf_r+0x20>
 801431e:	89ab      	ldrh	r3, [r5, #12]
 8014320:	0598      	lsls	r0, r3, #22
 8014322:	d4ed      	bmi.n	8014300 <_vfiprintf_r+0x4c>
 8014324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014326:	f000 fb84 	bl	8014a32 <__retarget_lock_release_recursive>
 801432a:	e7e9      	b.n	8014300 <_vfiprintf_r+0x4c>
 801432c:	2300      	movs	r3, #0
 801432e:	9309      	str	r3, [sp, #36]	; 0x24
 8014330:	2320      	movs	r3, #32
 8014332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014336:	f8cd 800c 	str.w	r8, [sp, #12]
 801433a:	2330      	movs	r3, #48	; 0x30
 801433c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014500 <_vfiprintf_r+0x24c>
 8014340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014344:	f04f 0901 	mov.w	r9, #1
 8014348:	4623      	mov	r3, r4
 801434a:	469a      	mov	sl, r3
 801434c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014350:	b10a      	cbz	r2, 8014356 <_vfiprintf_r+0xa2>
 8014352:	2a25      	cmp	r2, #37	; 0x25
 8014354:	d1f9      	bne.n	801434a <_vfiprintf_r+0x96>
 8014356:	ebba 0b04 	subs.w	fp, sl, r4
 801435a:	d00b      	beq.n	8014374 <_vfiprintf_r+0xc0>
 801435c:	465b      	mov	r3, fp
 801435e:	4622      	mov	r2, r4
 8014360:	4629      	mov	r1, r5
 8014362:	4630      	mov	r0, r6
 8014364:	f7ff ff93 	bl	801428e <__sfputs_r>
 8014368:	3001      	adds	r0, #1
 801436a:	f000 80aa 	beq.w	80144c2 <_vfiprintf_r+0x20e>
 801436e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014370:	445a      	add	r2, fp
 8014372:	9209      	str	r2, [sp, #36]	; 0x24
 8014374:	f89a 3000 	ldrb.w	r3, [sl]
 8014378:	2b00      	cmp	r3, #0
 801437a:	f000 80a2 	beq.w	80144c2 <_vfiprintf_r+0x20e>
 801437e:	2300      	movs	r3, #0
 8014380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014388:	f10a 0a01 	add.w	sl, sl, #1
 801438c:	9304      	str	r3, [sp, #16]
 801438e:	9307      	str	r3, [sp, #28]
 8014390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014394:	931a      	str	r3, [sp, #104]	; 0x68
 8014396:	4654      	mov	r4, sl
 8014398:	2205      	movs	r2, #5
 801439a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801439e:	4858      	ldr	r0, [pc, #352]	; (8014500 <_vfiprintf_r+0x24c>)
 80143a0:	f7eb ffa6 	bl	80002f0 <memchr>
 80143a4:	9a04      	ldr	r2, [sp, #16]
 80143a6:	b9d8      	cbnz	r0, 80143e0 <_vfiprintf_r+0x12c>
 80143a8:	06d1      	lsls	r1, r2, #27
 80143aa:	bf44      	itt	mi
 80143ac:	2320      	movmi	r3, #32
 80143ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143b2:	0713      	lsls	r3, r2, #28
 80143b4:	bf44      	itt	mi
 80143b6:	232b      	movmi	r3, #43	; 0x2b
 80143b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143bc:	f89a 3000 	ldrb.w	r3, [sl]
 80143c0:	2b2a      	cmp	r3, #42	; 0x2a
 80143c2:	d015      	beq.n	80143f0 <_vfiprintf_r+0x13c>
 80143c4:	9a07      	ldr	r2, [sp, #28]
 80143c6:	4654      	mov	r4, sl
 80143c8:	2000      	movs	r0, #0
 80143ca:	f04f 0c0a 	mov.w	ip, #10
 80143ce:	4621      	mov	r1, r4
 80143d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143d4:	3b30      	subs	r3, #48	; 0x30
 80143d6:	2b09      	cmp	r3, #9
 80143d8:	d94e      	bls.n	8014478 <_vfiprintf_r+0x1c4>
 80143da:	b1b0      	cbz	r0, 801440a <_vfiprintf_r+0x156>
 80143dc:	9207      	str	r2, [sp, #28]
 80143de:	e014      	b.n	801440a <_vfiprintf_r+0x156>
 80143e0:	eba0 0308 	sub.w	r3, r0, r8
 80143e4:	fa09 f303 	lsl.w	r3, r9, r3
 80143e8:	4313      	orrs	r3, r2
 80143ea:	9304      	str	r3, [sp, #16]
 80143ec:	46a2      	mov	sl, r4
 80143ee:	e7d2      	b.n	8014396 <_vfiprintf_r+0xe2>
 80143f0:	9b03      	ldr	r3, [sp, #12]
 80143f2:	1d19      	adds	r1, r3, #4
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	9103      	str	r1, [sp, #12]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	bfbb      	ittet	lt
 80143fc:	425b      	neglt	r3, r3
 80143fe:	f042 0202 	orrlt.w	r2, r2, #2
 8014402:	9307      	strge	r3, [sp, #28]
 8014404:	9307      	strlt	r3, [sp, #28]
 8014406:	bfb8      	it	lt
 8014408:	9204      	strlt	r2, [sp, #16]
 801440a:	7823      	ldrb	r3, [r4, #0]
 801440c:	2b2e      	cmp	r3, #46	; 0x2e
 801440e:	d10c      	bne.n	801442a <_vfiprintf_r+0x176>
 8014410:	7863      	ldrb	r3, [r4, #1]
 8014412:	2b2a      	cmp	r3, #42	; 0x2a
 8014414:	d135      	bne.n	8014482 <_vfiprintf_r+0x1ce>
 8014416:	9b03      	ldr	r3, [sp, #12]
 8014418:	1d1a      	adds	r2, r3, #4
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	9203      	str	r2, [sp, #12]
 801441e:	2b00      	cmp	r3, #0
 8014420:	bfb8      	it	lt
 8014422:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014426:	3402      	adds	r4, #2
 8014428:	9305      	str	r3, [sp, #20]
 801442a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014510 <_vfiprintf_r+0x25c>
 801442e:	7821      	ldrb	r1, [r4, #0]
 8014430:	2203      	movs	r2, #3
 8014432:	4650      	mov	r0, sl
 8014434:	f7eb ff5c 	bl	80002f0 <memchr>
 8014438:	b140      	cbz	r0, 801444c <_vfiprintf_r+0x198>
 801443a:	2340      	movs	r3, #64	; 0x40
 801443c:	eba0 000a 	sub.w	r0, r0, sl
 8014440:	fa03 f000 	lsl.w	r0, r3, r0
 8014444:	9b04      	ldr	r3, [sp, #16]
 8014446:	4303      	orrs	r3, r0
 8014448:	3401      	adds	r4, #1
 801444a:	9304      	str	r3, [sp, #16]
 801444c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014450:	482c      	ldr	r0, [pc, #176]	; (8014504 <_vfiprintf_r+0x250>)
 8014452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014456:	2206      	movs	r2, #6
 8014458:	f7eb ff4a 	bl	80002f0 <memchr>
 801445c:	2800      	cmp	r0, #0
 801445e:	d03f      	beq.n	80144e0 <_vfiprintf_r+0x22c>
 8014460:	4b29      	ldr	r3, [pc, #164]	; (8014508 <_vfiprintf_r+0x254>)
 8014462:	bb1b      	cbnz	r3, 80144ac <_vfiprintf_r+0x1f8>
 8014464:	9b03      	ldr	r3, [sp, #12]
 8014466:	3307      	adds	r3, #7
 8014468:	f023 0307 	bic.w	r3, r3, #7
 801446c:	3308      	adds	r3, #8
 801446e:	9303      	str	r3, [sp, #12]
 8014470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014472:	443b      	add	r3, r7
 8014474:	9309      	str	r3, [sp, #36]	; 0x24
 8014476:	e767      	b.n	8014348 <_vfiprintf_r+0x94>
 8014478:	fb0c 3202 	mla	r2, ip, r2, r3
 801447c:	460c      	mov	r4, r1
 801447e:	2001      	movs	r0, #1
 8014480:	e7a5      	b.n	80143ce <_vfiprintf_r+0x11a>
 8014482:	2300      	movs	r3, #0
 8014484:	3401      	adds	r4, #1
 8014486:	9305      	str	r3, [sp, #20]
 8014488:	4619      	mov	r1, r3
 801448a:	f04f 0c0a 	mov.w	ip, #10
 801448e:	4620      	mov	r0, r4
 8014490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014494:	3a30      	subs	r2, #48	; 0x30
 8014496:	2a09      	cmp	r2, #9
 8014498:	d903      	bls.n	80144a2 <_vfiprintf_r+0x1ee>
 801449a:	2b00      	cmp	r3, #0
 801449c:	d0c5      	beq.n	801442a <_vfiprintf_r+0x176>
 801449e:	9105      	str	r1, [sp, #20]
 80144a0:	e7c3      	b.n	801442a <_vfiprintf_r+0x176>
 80144a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80144a6:	4604      	mov	r4, r0
 80144a8:	2301      	movs	r3, #1
 80144aa:	e7f0      	b.n	801448e <_vfiprintf_r+0x1da>
 80144ac:	ab03      	add	r3, sp, #12
 80144ae:	9300      	str	r3, [sp, #0]
 80144b0:	462a      	mov	r2, r5
 80144b2:	4b16      	ldr	r3, [pc, #88]	; (801450c <_vfiprintf_r+0x258>)
 80144b4:	a904      	add	r1, sp, #16
 80144b6:	4630      	mov	r0, r6
 80144b8:	f7fe f832 	bl	8012520 <_printf_float>
 80144bc:	4607      	mov	r7, r0
 80144be:	1c78      	adds	r0, r7, #1
 80144c0:	d1d6      	bne.n	8014470 <_vfiprintf_r+0x1bc>
 80144c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144c4:	07d9      	lsls	r1, r3, #31
 80144c6:	d405      	bmi.n	80144d4 <_vfiprintf_r+0x220>
 80144c8:	89ab      	ldrh	r3, [r5, #12]
 80144ca:	059a      	lsls	r2, r3, #22
 80144cc:	d402      	bmi.n	80144d4 <_vfiprintf_r+0x220>
 80144ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144d0:	f000 faaf 	bl	8014a32 <__retarget_lock_release_recursive>
 80144d4:	89ab      	ldrh	r3, [r5, #12]
 80144d6:	065b      	lsls	r3, r3, #25
 80144d8:	f53f af12 	bmi.w	8014300 <_vfiprintf_r+0x4c>
 80144dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144de:	e711      	b.n	8014304 <_vfiprintf_r+0x50>
 80144e0:	ab03      	add	r3, sp, #12
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	462a      	mov	r2, r5
 80144e6:	4b09      	ldr	r3, [pc, #36]	; (801450c <_vfiprintf_r+0x258>)
 80144e8:	a904      	add	r1, sp, #16
 80144ea:	4630      	mov	r0, r6
 80144ec:	f7fe faa4 	bl	8012a38 <_printf_i>
 80144f0:	e7e4      	b.n	80144bc <_vfiprintf_r+0x208>
 80144f2:	bf00      	nop
 80144f4:	08016bc4 	.word	0x08016bc4
 80144f8:	08016be4 	.word	0x08016be4
 80144fc:	08016ba4 	.word	0x08016ba4
 8014500:	08016a92 	.word	0x08016a92
 8014504:	08016a9c 	.word	0x08016a9c
 8014508:	08012521 	.word	0x08012521
 801450c:	0801428f 	.word	0x0801428f
 8014510:	08016a98 	.word	0x08016a98

08014514 <__swbuf_r>:
 8014514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014516:	460e      	mov	r6, r1
 8014518:	4614      	mov	r4, r2
 801451a:	4605      	mov	r5, r0
 801451c:	b118      	cbz	r0, 8014526 <__swbuf_r+0x12>
 801451e:	6983      	ldr	r3, [r0, #24]
 8014520:	b90b      	cbnz	r3, 8014526 <__swbuf_r+0x12>
 8014522:	f000 f9e7 	bl	80148f4 <__sinit>
 8014526:	4b21      	ldr	r3, [pc, #132]	; (80145ac <__swbuf_r+0x98>)
 8014528:	429c      	cmp	r4, r3
 801452a:	d12b      	bne.n	8014584 <__swbuf_r+0x70>
 801452c:	686c      	ldr	r4, [r5, #4]
 801452e:	69a3      	ldr	r3, [r4, #24]
 8014530:	60a3      	str	r3, [r4, #8]
 8014532:	89a3      	ldrh	r3, [r4, #12]
 8014534:	071a      	lsls	r2, r3, #28
 8014536:	d52f      	bpl.n	8014598 <__swbuf_r+0x84>
 8014538:	6923      	ldr	r3, [r4, #16]
 801453a:	b36b      	cbz	r3, 8014598 <__swbuf_r+0x84>
 801453c:	6923      	ldr	r3, [r4, #16]
 801453e:	6820      	ldr	r0, [r4, #0]
 8014540:	1ac0      	subs	r0, r0, r3
 8014542:	6963      	ldr	r3, [r4, #20]
 8014544:	b2f6      	uxtb	r6, r6
 8014546:	4283      	cmp	r3, r0
 8014548:	4637      	mov	r7, r6
 801454a:	dc04      	bgt.n	8014556 <__swbuf_r+0x42>
 801454c:	4621      	mov	r1, r4
 801454e:	4628      	mov	r0, r5
 8014550:	f000 f93c 	bl	80147cc <_fflush_r>
 8014554:	bb30      	cbnz	r0, 80145a4 <__swbuf_r+0x90>
 8014556:	68a3      	ldr	r3, [r4, #8]
 8014558:	3b01      	subs	r3, #1
 801455a:	60a3      	str	r3, [r4, #8]
 801455c:	6823      	ldr	r3, [r4, #0]
 801455e:	1c5a      	adds	r2, r3, #1
 8014560:	6022      	str	r2, [r4, #0]
 8014562:	701e      	strb	r6, [r3, #0]
 8014564:	6963      	ldr	r3, [r4, #20]
 8014566:	3001      	adds	r0, #1
 8014568:	4283      	cmp	r3, r0
 801456a:	d004      	beq.n	8014576 <__swbuf_r+0x62>
 801456c:	89a3      	ldrh	r3, [r4, #12]
 801456e:	07db      	lsls	r3, r3, #31
 8014570:	d506      	bpl.n	8014580 <__swbuf_r+0x6c>
 8014572:	2e0a      	cmp	r6, #10
 8014574:	d104      	bne.n	8014580 <__swbuf_r+0x6c>
 8014576:	4621      	mov	r1, r4
 8014578:	4628      	mov	r0, r5
 801457a:	f000 f927 	bl	80147cc <_fflush_r>
 801457e:	b988      	cbnz	r0, 80145a4 <__swbuf_r+0x90>
 8014580:	4638      	mov	r0, r7
 8014582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014584:	4b0a      	ldr	r3, [pc, #40]	; (80145b0 <__swbuf_r+0x9c>)
 8014586:	429c      	cmp	r4, r3
 8014588:	d101      	bne.n	801458e <__swbuf_r+0x7a>
 801458a:	68ac      	ldr	r4, [r5, #8]
 801458c:	e7cf      	b.n	801452e <__swbuf_r+0x1a>
 801458e:	4b09      	ldr	r3, [pc, #36]	; (80145b4 <__swbuf_r+0xa0>)
 8014590:	429c      	cmp	r4, r3
 8014592:	bf08      	it	eq
 8014594:	68ec      	ldreq	r4, [r5, #12]
 8014596:	e7ca      	b.n	801452e <__swbuf_r+0x1a>
 8014598:	4621      	mov	r1, r4
 801459a:	4628      	mov	r0, r5
 801459c:	f000 f81a 	bl	80145d4 <__swsetup_r>
 80145a0:	2800      	cmp	r0, #0
 80145a2:	d0cb      	beq.n	801453c <__swbuf_r+0x28>
 80145a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80145a8:	e7ea      	b.n	8014580 <__swbuf_r+0x6c>
 80145aa:	bf00      	nop
 80145ac:	08016bc4 	.word	0x08016bc4
 80145b0:	08016be4 	.word	0x08016be4
 80145b4:	08016ba4 	.word	0x08016ba4

080145b8 <__ascii_wctomb>:
 80145b8:	b149      	cbz	r1, 80145ce <__ascii_wctomb+0x16>
 80145ba:	2aff      	cmp	r2, #255	; 0xff
 80145bc:	bf85      	ittet	hi
 80145be:	238a      	movhi	r3, #138	; 0x8a
 80145c0:	6003      	strhi	r3, [r0, #0]
 80145c2:	700a      	strbls	r2, [r1, #0]
 80145c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80145c8:	bf98      	it	ls
 80145ca:	2001      	movls	r0, #1
 80145cc:	4770      	bx	lr
 80145ce:	4608      	mov	r0, r1
 80145d0:	4770      	bx	lr
	...

080145d4 <__swsetup_r>:
 80145d4:	4b32      	ldr	r3, [pc, #200]	; (80146a0 <__swsetup_r+0xcc>)
 80145d6:	b570      	push	{r4, r5, r6, lr}
 80145d8:	681d      	ldr	r5, [r3, #0]
 80145da:	4606      	mov	r6, r0
 80145dc:	460c      	mov	r4, r1
 80145de:	b125      	cbz	r5, 80145ea <__swsetup_r+0x16>
 80145e0:	69ab      	ldr	r3, [r5, #24]
 80145e2:	b913      	cbnz	r3, 80145ea <__swsetup_r+0x16>
 80145e4:	4628      	mov	r0, r5
 80145e6:	f000 f985 	bl	80148f4 <__sinit>
 80145ea:	4b2e      	ldr	r3, [pc, #184]	; (80146a4 <__swsetup_r+0xd0>)
 80145ec:	429c      	cmp	r4, r3
 80145ee:	d10f      	bne.n	8014610 <__swsetup_r+0x3c>
 80145f0:	686c      	ldr	r4, [r5, #4]
 80145f2:	89a3      	ldrh	r3, [r4, #12]
 80145f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145f8:	0719      	lsls	r1, r3, #28
 80145fa:	d42c      	bmi.n	8014656 <__swsetup_r+0x82>
 80145fc:	06dd      	lsls	r5, r3, #27
 80145fe:	d411      	bmi.n	8014624 <__swsetup_r+0x50>
 8014600:	2309      	movs	r3, #9
 8014602:	6033      	str	r3, [r6, #0]
 8014604:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014608:	81a3      	strh	r3, [r4, #12]
 801460a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801460e:	e03e      	b.n	801468e <__swsetup_r+0xba>
 8014610:	4b25      	ldr	r3, [pc, #148]	; (80146a8 <__swsetup_r+0xd4>)
 8014612:	429c      	cmp	r4, r3
 8014614:	d101      	bne.n	801461a <__swsetup_r+0x46>
 8014616:	68ac      	ldr	r4, [r5, #8]
 8014618:	e7eb      	b.n	80145f2 <__swsetup_r+0x1e>
 801461a:	4b24      	ldr	r3, [pc, #144]	; (80146ac <__swsetup_r+0xd8>)
 801461c:	429c      	cmp	r4, r3
 801461e:	bf08      	it	eq
 8014620:	68ec      	ldreq	r4, [r5, #12]
 8014622:	e7e6      	b.n	80145f2 <__swsetup_r+0x1e>
 8014624:	0758      	lsls	r0, r3, #29
 8014626:	d512      	bpl.n	801464e <__swsetup_r+0x7a>
 8014628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801462a:	b141      	cbz	r1, 801463e <__swsetup_r+0x6a>
 801462c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014630:	4299      	cmp	r1, r3
 8014632:	d002      	beq.n	801463a <__swsetup_r+0x66>
 8014634:	4630      	mov	r0, r6
 8014636:	f7ff fcd5 	bl	8013fe4 <_free_r>
 801463a:	2300      	movs	r3, #0
 801463c:	6363      	str	r3, [r4, #52]	; 0x34
 801463e:	89a3      	ldrh	r3, [r4, #12]
 8014640:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014644:	81a3      	strh	r3, [r4, #12]
 8014646:	2300      	movs	r3, #0
 8014648:	6063      	str	r3, [r4, #4]
 801464a:	6923      	ldr	r3, [r4, #16]
 801464c:	6023      	str	r3, [r4, #0]
 801464e:	89a3      	ldrh	r3, [r4, #12]
 8014650:	f043 0308 	orr.w	r3, r3, #8
 8014654:	81a3      	strh	r3, [r4, #12]
 8014656:	6923      	ldr	r3, [r4, #16]
 8014658:	b94b      	cbnz	r3, 801466e <__swsetup_r+0x9a>
 801465a:	89a3      	ldrh	r3, [r4, #12]
 801465c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014664:	d003      	beq.n	801466e <__swsetup_r+0x9a>
 8014666:	4621      	mov	r1, r4
 8014668:	4630      	mov	r0, r6
 801466a:	f000 fa09 	bl	8014a80 <__smakebuf_r>
 801466e:	89a0      	ldrh	r0, [r4, #12]
 8014670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014674:	f010 0301 	ands.w	r3, r0, #1
 8014678:	d00a      	beq.n	8014690 <__swsetup_r+0xbc>
 801467a:	2300      	movs	r3, #0
 801467c:	60a3      	str	r3, [r4, #8]
 801467e:	6963      	ldr	r3, [r4, #20]
 8014680:	425b      	negs	r3, r3
 8014682:	61a3      	str	r3, [r4, #24]
 8014684:	6923      	ldr	r3, [r4, #16]
 8014686:	b943      	cbnz	r3, 801469a <__swsetup_r+0xc6>
 8014688:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801468c:	d1ba      	bne.n	8014604 <__swsetup_r+0x30>
 801468e:	bd70      	pop	{r4, r5, r6, pc}
 8014690:	0781      	lsls	r1, r0, #30
 8014692:	bf58      	it	pl
 8014694:	6963      	ldrpl	r3, [r4, #20]
 8014696:	60a3      	str	r3, [r4, #8]
 8014698:	e7f4      	b.n	8014684 <__swsetup_r+0xb0>
 801469a:	2000      	movs	r0, #0
 801469c:	e7f7      	b.n	801468e <__swsetup_r+0xba>
 801469e:	bf00      	nop
 80146a0:	24000248 	.word	0x24000248
 80146a4:	08016bc4 	.word	0x08016bc4
 80146a8:	08016be4 	.word	0x08016be4
 80146ac:	08016ba4 	.word	0x08016ba4

080146b0 <abort>:
 80146b0:	b508      	push	{r3, lr}
 80146b2:	2006      	movs	r0, #6
 80146b4:	f000 fa4c 	bl	8014b50 <raise>
 80146b8:	2001      	movs	r0, #1
 80146ba:	f7f0 fd35 	bl	8005128 <_exit>
	...

080146c0 <__sflush_r>:
 80146c0:	898a      	ldrh	r2, [r1, #12]
 80146c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c6:	4605      	mov	r5, r0
 80146c8:	0710      	lsls	r0, r2, #28
 80146ca:	460c      	mov	r4, r1
 80146cc:	d458      	bmi.n	8014780 <__sflush_r+0xc0>
 80146ce:	684b      	ldr	r3, [r1, #4]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	dc05      	bgt.n	80146e0 <__sflush_r+0x20>
 80146d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	dc02      	bgt.n	80146e0 <__sflush_r+0x20>
 80146da:	2000      	movs	r0, #0
 80146dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146e2:	2e00      	cmp	r6, #0
 80146e4:	d0f9      	beq.n	80146da <__sflush_r+0x1a>
 80146e6:	2300      	movs	r3, #0
 80146e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80146ec:	682f      	ldr	r7, [r5, #0]
 80146ee:	602b      	str	r3, [r5, #0]
 80146f0:	d032      	beq.n	8014758 <__sflush_r+0x98>
 80146f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80146f4:	89a3      	ldrh	r3, [r4, #12]
 80146f6:	075a      	lsls	r2, r3, #29
 80146f8:	d505      	bpl.n	8014706 <__sflush_r+0x46>
 80146fa:	6863      	ldr	r3, [r4, #4]
 80146fc:	1ac0      	subs	r0, r0, r3
 80146fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014700:	b10b      	cbz	r3, 8014706 <__sflush_r+0x46>
 8014702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014704:	1ac0      	subs	r0, r0, r3
 8014706:	2300      	movs	r3, #0
 8014708:	4602      	mov	r2, r0
 801470a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801470c:	6a21      	ldr	r1, [r4, #32]
 801470e:	4628      	mov	r0, r5
 8014710:	47b0      	blx	r6
 8014712:	1c43      	adds	r3, r0, #1
 8014714:	89a3      	ldrh	r3, [r4, #12]
 8014716:	d106      	bne.n	8014726 <__sflush_r+0x66>
 8014718:	6829      	ldr	r1, [r5, #0]
 801471a:	291d      	cmp	r1, #29
 801471c:	d82c      	bhi.n	8014778 <__sflush_r+0xb8>
 801471e:	4a2a      	ldr	r2, [pc, #168]	; (80147c8 <__sflush_r+0x108>)
 8014720:	40ca      	lsrs	r2, r1
 8014722:	07d6      	lsls	r6, r2, #31
 8014724:	d528      	bpl.n	8014778 <__sflush_r+0xb8>
 8014726:	2200      	movs	r2, #0
 8014728:	6062      	str	r2, [r4, #4]
 801472a:	04d9      	lsls	r1, r3, #19
 801472c:	6922      	ldr	r2, [r4, #16]
 801472e:	6022      	str	r2, [r4, #0]
 8014730:	d504      	bpl.n	801473c <__sflush_r+0x7c>
 8014732:	1c42      	adds	r2, r0, #1
 8014734:	d101      	bne.n	801473a <__sflush_r+0x7a>
 8014736:	682b      	ldr	r3, [r5, #0]
 8014738:	b903      	cbnz	r3, 801473c <__sflush_r+0x7c>
 801473a:	6560      	str	r0, [r4, #84]	; 0x54
 801473c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801473e:	602f      	str	r7, [r5, #0]
 8014740:	2900      	cmp	r1, #0
 8014742:	d0ca      	beq.n	80146da <__sflush_r+0x1a>
 8014744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014748:	4299      	cmp	r1, r3
 801474a:	d002      	beq.n	8014752 <__sflush_r+0x92>
 801474c:	4628      	mov	r0, r5
 801474e:	f7ff fc49 	bl	8013fe4 <_free_r>
 8014752:	2000      	movs	r0, #0
 8014754:	6360      	str	r0, [r4, #52]	; 0x34
 8014756:	e7c1      	b.n	80146dc <__sflush_r+0x1c>
 8014758:	6a21      	ldr	r1, [r4, #32]
 801475a:	2301      	movs	r3, #1
 801475c:	4628      	mov	r0, r5
 801475e:	47b0      	blx	r6
 8014760:	1c41      	adds	r1, r0, #1
 8014762:	d1c7      	bne.n	80146f4 <__sflush_r+0x34>
 8014764:	682b      	ldr	r3, [r5, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d0c4      	beq.n	80146f4 <__sflush_r+0x34>
 801476a:	2b1d      	cmp	r3, #29
 801476c:	d001      	beq.n	8014772 <__sflush_r+0xb2>
 801476e:	2b16      	cmp	r3, #22
 8014770:	d101      	bne.n	8014776 <__sflush_r+0xb6>
 8014772:	602f      	str	r7, [r5, #0]
 8014774:	e7b1      	b.n	80146da <__sflush_r+0x1a>
 8014776:	89a3      	ldrh	r3, [r4, #12]
 8014778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801477c:	81a3      	strh	r3, [r4, #12]
 801477e:	e7ad      	b.n	80146dc <__sflush_r+0x1c>
 8014780:	690f      	ldr	r7, [r1, #16]
 8014782:	2f00      	cmp	r7, #0
 8014784:	d0a9      	beq.n	80146da <__sflush_r+0x1a>
 8014786:	0793      	lsls	r3, r2, #30
 8014788:	680e      	ldr	r6, [r1, #0]
 801478a:	bf08      	it	eq
 801478c:	694b      	ldreq	r3, [r1, #20]
 801478e:	600f      	str	r7, [r1, #0]
 8014790:	bf18      	it	ne
 8014792:	2300      	movne	r3, #0
 8014794:	eba6 0807 	sub.w	r8, r6, r7
 8014798:	608b      	str	r3, [r1, #8]
 801479a:	f1b8 0f00 	cmp.w	r8, #0
 801479e:	dd9c      	ble.n	80146da <__sflush_r+0x1a>
 80147a0:	6a21      	ldr	r1, [r4, #32]
 80147a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80147a4:	4643      	mov	r3, r8
 80147a6:	463a      	mov	r2, r7
 80147a8:	4628      	mov	r0, r5
 80147aa:	47b0      	blx	r6
 80147ac:	2800      	cmp	r0, #0
 80147ae:	dc06      	bgt.n	80147be <__sflush_r+0xfe>
 80147b0:	89a3      	ldrh	r3, [r4, #12]
 80147b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147b6:	81a3      	strh	r3, [r4, #12]
 80147b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147bc:	e78e      	b.n	80146dc <__sflush_r+0x1c>
 80147be:	4407      	add	r7, r0
 80147c0:	eba8 0800 	sub.w	r8, r8, r0
 80147c4:	e7e9      	b.n	801479a <__sflush_r+0xda>
 80147c6:	bf00      	nop
 80147c8:	20400001 	.word	0x20400001

080147cc <_fflush_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	690b      	ldr	r3, [r1, #16]
 80147d0:	4605      	mov	r5, r0
 80147d2:	460c      	mov	r4, r1
 80147d4:	b913      	cbnz	r3, 80147dc <_fflush_r+0x10>
 80147d6:	2500      	movs	r5, #0
 80147d8:	4628      	mov	r0, r5
 80147da:	bd38      	pop	{r3, r4, r5, pc}
 80147dc:	b118      	cbz	r0, 80147e6 <_fflush_r+0x1a>
 80147de:	6983      	ldr	r3, [r0, #24]
 80147e0:	b90b      	cbnz	r3, 80147e6 <_fflush_r+0x1a>
 80147e2:	f000 f887 	bl	80148f4 <__sinit>
 80147e6:	4b14      	ldr	r3, [pc, #80]	; (8014838 <_fflush_r+0x6c>)
 80147e8:	429c      	cmp	r4, r3
 80147ea:	d11b      	bne.n	8014824 <_fflush_r+0x58>
 80147ec:	686c      	ldr	r4, [r5, #4]
 80147ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d0ef      	beq.n	80147d6 <_fflush_r+0xa>
 80147f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80147f8:	07d0      	lsls	r0, r2, #31
 80147fa:	d404      	bmi.n	8014806 <_fflush_r+0x3a>
 80147fc:	0599      	lsls	r1, r3, #22
 80147fe:	d402      	bmi.n	8014806 <_fflush_r+0x3a>
 8014800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014802:	f000 f915 	bl	8014a30 <__retarget_lock_acquire_recursive>
 8014806:	4628      	mov	r0, r5
 8014808:	4621      	mov	r1, r4
 801480a:	f7ff ff59 	bl	80146c0 <__sflush_r>
 801480e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014810:	07da      	lsls	r2, r3, #31
 8014812:	4605      	mov	r5, r0
 8014814:	d4e0      	bmi.n	80147d8 <_fflush_r+0xc>
 8014816:	89a3      	ldrh	r3, [r4, #12]
 8014818:	059b      	lsls	r3, r3, #22
 801481a:	d4dd      	bmi.n	80147d8 <_fflush_r+0xc>
 801481c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801481e:	f000 f908 	bl	8014a32 <__retarget_lock_release_recursive>
 8014822:	e7d9      	b.n	80147d8 <_fflush_r+0xc>
 8014824:	4b05      	ldr	r3, [pc, #20]	; (801483c <_fflush_r+0x70>)
 8014826:	429c      	cmp	r4, r3
 8014828:	d101      	bne.n	801482e <_fflush_r+0x62>
 801482a:	68ac      	ldr	r4, [r5, #8]
 801482c:	e7df      	b.n	80147ee <_fflush_r+0x22>
 801482e:	4b04      	ldr	r3, [pc, #16]	; (8014840 <_fflush_r+0x74>)
 8014830:	429c      	cmp	r4, r3
 8014832:	bf08      	it	eq
 8014834:	68ec      	ldreq	r4, [r5, #12]
 8014836:	e7da      	b.n	80147ee <_fflush_r+0x22>
 8014838:	08016bc4 	.word	0x08016bc4
 801483c:	08016be4 	.word	0x08016be4
 8014840:	08016ba4 	.word	0x08016ba4

08014844 <std>:
 8014844:	2300      	movs	r3, #0
 8014846:	b510      	push	{r4, lr}
 8014848:	4604      	mov	r4, r0
 801484a:	e9c0 3300 	strd	r3, r3, [r0]
 801484e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014852:	6083      	str	r3, [r0, #8]
 8014854:	8181      	strh	r1, [r0, #12]
 8014856:	6643      	str	r3, [r0, #100]	; 0x64
 8014858:	81c2      	strh	r2, [r0, #14]
 801485a:	6183      	str	r3, [r0, #24]
 801485c:	4619      	mov	r1, r3
 801485e:	2208      	movs	r2, #8
 8014860:	305c      	adds	r0, #92	; 0x5c
 8014862:	f7fd fdc5 	bl	80123f0 <memset>
 8014866:	4b05      	ldr	r3, [pc, #20]	; (801487c <std+0x38>)
 8014868:	6263      	str	r3, [r4, #36]	; 0x24
 801486a:	4b05      	ldr	r3, [pc, #20]	; (8014880 <std+0x3c>)
 801486c:	62a3      	str	r3, [r4, #40]	; 0x28
 801486e:	4b05      	ldr	r3, [pc, #20]	; (8014884 <std+0x40>)
 8014870:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014872:	4b05      	ldr	r3, [pc, #20]	; (8014888 <std+0x44>)
 8014874:	6224      	str	r4, [r4, #32]
 8014876:	6323      	str	r3, [r4, #48]	; 0x30
 8014878:	bd10      	pop	{r4, pc}
 801487a:	bf00      	nop
 801487c:	08014b89 	.word	0x08014b89
 8014880:	08014bab 	.word	0x08014bab
 8014884:	08014be3 	.word	0x08014be3
 8014888:	08014c07 	.word	0x08014c07

0801488c <_cleanup_r>:
 801488c:	4901      	ldr	r1, [pc, #4]	; (8014894 <_cleanup_r+0x8>)
 801488e:	f000 b8af 	b.w	80149f0 <_fwalk_reent>
 8014892:	bf00      	nop
 8014894:	080147cd 	.word	0x080147cd

08014898 <__sfmoreglue>:
 8014898:	b570      	push	{r4, r5, r6, lr}
 801489a:	2268      	movs	r2, #104	; 0x68
 801489c:	1e4d      	subs	r5, r1, #1
 801489e:	4355      	muls	r5, r2
 80148a0:	460e      	mov	r6, r1
 80148a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80148a6:	f7ff fc09 	bl	80140bc <_malloc_r>
 80148aa:	4604      	mov	r4, r0
 80148ac:	b140      	cbz	r0, 80148c0 <__sfmoreglue+0x28>
 80148ae:	2100      	movs	r1, #0
 80148b0:	e9c0 1600 	strd	r1, r6, [r0]
 80148b4:	300c      	adds	r0, #12
 80148b6:	60a0      	str	r0, [r4, #8]
 80148b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80148bc:	f7fd fd98 	bl	80123f0 <memset>
 80148c0:	4620      	mov	r0, r4
 80148c2:	bd70      	pop	{r4, r5, r6, pc}

080148c4 <__sfp_lock_acquire>:
 80148c4:	4801      	ldr	r0, [pc, #4]	; (80148cc <__sfp_lock_acquire+0x8>)
 80148c6:	f000 b8b3 	b.w	8014a30 <__retarget_lock_acquire_recursive>
 80148ca:	bf00      	nop
 80148cc:	2400175d 	.word	0x2400175d

080148d0 <__sfp_lock_release>:
 80148d0:	4801      	ldr	r0, [pc, #4]	; (80148d8 <__sfp_lock_release+0x8>)
 80148d2:	f000 b8ae 	b.w	8014a32 <__retarget_lock_release_recursive>
 80148d6:	bf00      	nop
 80148d8:	2400175d 	.word	0x2400175d

080148dc <__sinit_lock_acquire>:
 80148dc:	4801      	ldr	r0, [pc, #4]	; (80148e4 <__sinit_lock_acquire+0x8>)
 80148de:	f000 b8a7 	b.w	8014a30 <__retarget_lock_acquire_recursive>
 80148e2:	bf00      	nop
 80148e4:	2400175e 	.word	0x2400175e

080148e8 <__sinit_lock_release>:
 80148e8:	4801      	ldr	r0, [pc, #4]	; (80148f0 <__sinit_lock_release+0x8>)
 80148ea:	f000 b8a2 	b.w	8014a32 <__retarget_lock_release_recursive>
 80148ee:	bf00      	nop
 80148f0:	2400175e 	.word	0x2400175e

080148f4 <__sinit>:
 80148f4:	b510      	push	{r4, lr}
 80148f6:	4604      	mov	r4, r0
 80148f8:	f7ff fff0 	bl	80148dc <__sinit_lock_acquire>
 80148fc:	69a3      	ldr	r3, [r4, #24]
 80148fe:	b11b      	cbz	r3, 8014908 <__sinit+0x14>
 8014900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014904:	f7ff bff0 	b.w	80148e8 <__sinit_lock_release>
 8014908:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801490c:	6523      	str	r3, [r4, #80]	; 0x50
 801490e:	4b13      	ldr	r3, [pc, #76]	; (801495c <__sinit+0x68>)
 8014910:	4a13      	ldr	r2, [pc, #76]	; (8014960 <__sinit+0x6c>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	62a2      	str	r2, [r4, #40]	; 0x28
 8014916:	42a3      	cmp	r3, r4
 8014918:	bf04      	itt	eq
 801491a:	2301      	moveq	r3, #1
 801491c:	61a3      	streq	r3, [r4, #24]
 801491e:	4620      	mov	r0, r4
 8014920:	f000 f820 	bl	8014964 <__sfp>
 8014924:	6060      	str	r0, [r4, #4]
 8014926:	4620      	mov	r0, r4
 8014928:	f000 f81c 	bl	8014964 <__sfp>
 801492c:	60a0      	str	r0, [r4, #8]
 801492e:	4620      	mov	r0, r4
 8014930:	f000 f818 	bl	8014964 <__sfp>
 8014934:	2200      	movs	r2, #0
 8014936:	60e0      	str	r0, [r4, #12]
 8014938:	2104      	movs	r1, #4
 801493a:	6860      	ldr	r0, [r4, #4]
 801493c:	f7ff ff82 	bl	8014844 <std>
 8014940:	68a0      	ldr	r0, [r4, #8]
 8014942:	2201      	movs	r2, #1
 8014944:	2109      	movs	r1, #9
 8014946:	f7ff ff7d 	bl	8014844 <std>
 801494a:	68e0      	ldr	r0, [r4, #12]
 801494c:	2202      	movs	r2, #2
 801494e:	2112      	movs	r1, #18
 8014950:	f7ff ff78 	bl	8014844 <std>
 8014954:	2301      	movs	r3, #1
 8014956:	61a3      	str	r3, [r4, #24]
 8014958:	e7d2      	b.n	8014900 <__sinit+0xc>
 801495a:	bf00      	nop
 801495c:	08016828 	.word	0x08016828
 8014960:	0801488d 	.word	0x0801488d

08014964 <__sfp>:
 8014964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014966:	4607      	mov	r7, r0
 8014968:	f7ff ffac 	bl	80148c4 <__sfp_lock_acquire>
 801496c:	4b1e      	ldr	r3, [pc, #120]	; (80149e8 <__sfp+0x84>)
 801496e:	681e      	ldr	r6, [r3, #0]
 8014970:	69b3      	ldr	r3, [r6, #24]
 8014972:	b913      	cbnz	r3, 801497a <__sfp+0x16>
 8014974:	4630      	mov	r0, r6
 8014976:	f7ff ffbd 	bl	80148f4 <__sinit>
 801497a:	3648      	adds	r6, #72	; 0x48
 801497c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014980:	3b01      	subs	r3, #1
 8014982:	d503      	bpl.n	801498c <__sfp+0x28>
 8014984:	6833      	ldr	r3, [r6, #0]
 8014986:	b30b      	cbz	r3, 80149cc <__sfp+0x68>
 8014988:	6836      	ldr	r6, [r6, #0]
 801498a:	e7f7      	b.n	801497c <__sfp+0x18>
 801498c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014990:	b9d5      	cbnz	r5, 80149c8 <__sfp+0x64>
 8014992:	4b16      	ldr	r3, [pc, #88]	; (80149ec <__sfp+0x88>)
 8014994:	60e3      	str	r3, [r4, #12]
 8014996:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801499a:	6665      	str	r5, [r4, #100]	; 0x64
 801499c:	f000 f847 	bl	8014a2e <__retarget_lock_init_recursive>
 80149a0:	f7ff ff96 	bl	80148d0 <__sfp_lock_release>
 80149a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80149a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80149ac:	6025      	str	r5, [r4, #0]
 80149ae:	61a5      	str	r5, [r4, #24]
 80149b0:	2208      	movs	r2, #8
 80149b2:	4629      	mov	r1, r5
 80149b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80149b8:	f7fd fd1a 	bl	80123f0 <memset>
 80149bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80149c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80149c4:	4620      	mov	r0, r4
 80149c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149c8:	3468      	adds	r4, #104	; 0x68
 80149ca:	e7d9      	b.n	8014980 <__sfp+0x1c>
 80149cc:	2104      	movs	r1, #4
 80149ce:	4638      	mov	r0, r7
 80149d0:	f7ff ff62 	bl	8014898 <__sfmoreglue>
 80149d4:	4604      	mov	r4, r0
 80149d6:	6030      	str	r0, [r6, #0]
 80149d8:	2800      	cmp	r0, #0
 80149da:	d1d5      	bne.n	8014988 <__sfp+0x24>
 80149dc:	f7ff ff78 	bl	80148d0 <__sfp_lock_release>
 80149e0:	230c      	movs	r3, #12
 80149e2:	603b      	str	r3, [r7, #0]
 80149e4:	e7ee      	b.n	80149c4 <__sfp+0x60>
 80149e6:	bf00      	nop
 80149e8:	08016828 	.word	0x08016828
 80149ec:	ffff0001 	.word	0xffff0001

080149f0 <_fwalk_reent>:
 80149f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149f4:	4606      	mov	r6, r0
 80149f6:	4688      	mov	r8, r1
 80149f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80149fc:	2700      	movs	r7, #0
 80149fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a02:	f1b9 0901 	subs.w	r9, r9, #1
 8014a06:	d505      	bpl.n	8014a14 <_fwalk_reent+0x24>
 8014a08:	6824      	ldr	r4, [r4, #0]
 8014a0a:	2c00      	cmp	r4, #0
 8014a0c:	d1f7      	bne.n	80149fe <_fwalk_reent+0xe>
 8014a0e:	4638      	mov	r0, r7
 8014a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a14:	89ab      	ldrh	r3, [r5, #12]
 8014a16:	2b01      	cmp	r3, #1
 8014a18:	d907      	bls.n	8014a2a <_fwalk_reent+0x3a>
 8014a1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a1e:	3301      	adds	r3, #1
 8014a20:	d003      	beq.n	8014a2a <_fwalk_reent+0x3a>
 8014a22:	4629      	mov	r1, r5
 8014a24:	4630      	mov	r0, r6
 8014a26:	47c0      	blx	r8
 8014a28:	4307      	orrs	r7, r0
 8014a2a:	3568      	adds	r5, #104	; 0x68
 8014a2c:	e7e9      	b.n	8014a02 <_fwalk_reent+0x12>

08014a2e <__retarget_lock_init_recursive>:
 8014a2e:	4770      	bx	lr

08014a30 <__retarget_lock_acquire_recursive>:
 8014a30:	4770      	bx	lr

08014a32 <__retarget_lock_release_recursive>:
 8014a32:	4770      	bx	lr

08014a34 <__swhatbuf_r>:
 8014a34:	b570      	push	{r4, r5, r6, lr}
 8014a36:	460e      	mov	r6, r1
 8014a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a3c:	2900      	cmp	r1, #0
 8014a3e:	b096      	sub	sp, #88	; 0x58
 8014a40:	4614      	mov	r4, r2
 8014a42:	461d      	mov	r5, r3
 8014a44:	da08      	bge.n	8014a58 <__swhatbuf_r+0x24>
 8014a46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	602a      	str	r2, [r5, #0]
 8014a4e:	061a      	lsls	r2, r3, #24
 8014a50:	d410      	bmi.n	8014a74 <__swhatbuf_r+0x40>
 8014a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a56:	e00e      	b.n	8014a76 <__swhatbuf_r+0x42>
 8014a58:	466a      	mov	r2, sp
 8014a5a:	f000 f8fb 	bl	8014c54 <_fstat_r>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	dbf1      	blt.n	8014a46 <__swhatbuf_r+0x12>
 8014a62:	9a01      	ldr	r2, [sp, #4]
 8014a64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a6c:	425a      	negs	r2, r3
 8014a6e:	415a      	adcs	r2, r3
 8014a70:	602a      	str	r2, [r5, #0]
 8014a72:	e7ee      	b.n	8014a52 <__swhatbuf_r+0x1e>
 8014a74:	2340      	movs	r3, #64	; 0x40
 8014a76:	2000      	movs	r0, #0
 8014a78:	6023      	str	r3, [r4, #0]
 8014a7a:	b016      	add	sp, #88	; 0x58
 8014a7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014a80 <__smakebuf_r>:
 8014a80:	898b      	ldrh	r3, [r1, #12]
 8014a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a84:	079d      	lsls	r5, r3, #30
 8014a86:	4606      	mov	r6, r0
 8014a88:	460c      	mov	r4, r1
 8014a8a:	d507      	bpl.n	8014a9c <__smakebuf_r+0x1c>
 8014a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a90:	6023      	str	r3, [r4, #0]
 8014a92:	6123      	str	r3, [r4, #16]
 8014a94:	2301      	movs	r3, #1
 8014a96:	6163      	str	r3, [r4, #20]
 8014a98:	b002      	add	sp, #8
 8014a9a:	bd70      	pop	{r4, r5, r6, pc}
 8014a9c:	ab01      	add	r3, sp, #4
 8014a9e:	466a      	mov	r2, sp
 8014aa0:	f7ff ffc8 	bl	8014a34 <__swhatbuf_r>
 8014aa4:	9900      	ldr	r1, [sp, #0]
 8014aa6:	4605      	mov	r5, r0
 8014aa8:	4630      	mov	r0, r6
 8014aaa:	f7ff fb07 	bl	80140bc <_malloc_r>
 8014aae:	b948      	cbnz	r0, 8014ac4 <__smakebuf_r+0x44>
 8014ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ab4:	059a      	lsls	r2, r3, #22
 8014ab6:	d4ef      	bmi.n	8014a98 <__smakebuf_r+0x18>
 8014ab8:	f023 0303 	bic.w	r3, r3, #3
 8014abc:	f043 0302 	orr.w	r3, r3, #2
 8014ac0:	81a3      	strh	r3, [r4, #12]
 8014ac2:	e7e3      	b.n	8014a8c <__smakebuf_r+0xc>
 8014ac4:	4b0d      	ldr	r3, [pc, #52]	; (8014afc <__smakebuf_r+0x7c>)
 8014ac6:	62b3      	str	r3, [r6, #40]	; 0x28
 8014ac8:	89a3      	ldrh	r3, [r4, #12]
 8014aca:	6020      	str	r0, [r4, #0]
 8014acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ad0:	81a3      	strh	r3, [r4, #12]
 8014ad2:	9b00      	ldr	r3, [sp, #0]
 8014ad4:	6163      	str	r3, [r4, #20]
 8014ad6:	9b01      	ldr	r3, [sp, #4]
 8014ad8:	6120      	str	r0, [r4, #16]
 8014ada:	b15b      	cbz	r3, 8014af4 <__smakebuf_r+0x74>
 8014adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ae0:	4630      	mov	r0, r6
 8014ae2:	f000 f8c9 	bl	8014c78 <_isatty_r>
 8014ae6:	b128      	cbz	r0, 8014af4 <__smakebuf_r+0x74>
 8014ae8:	89a3      	ldrh	r3, [r4, #12]
 8014aea:	f023 0303 	bic.w	r3, r3, #3
 8014aee:	f043 0301 	orr.w	r3, r3, #1
 8014af2:	81a3      	strh	r3, [r4, #12]
 8014af4:	89a0      	ldrh	r0, [r4, #12]
 8014af6:	4305      	orrs	r5, r0
 8014af8:	81a5      	strh	r5, [r4, #12]
 8014afa:	e7cd      	b.n	8014a98 <__smakebuf_r+0x18>
 8014afc:	0801488d 	.word	0x0801488d

08014b00 <_raise_r>:
 8014b00:	291f      	cmp	r1, #31
 8014b02:	b538      	push	{r3, r4, r5, lr}
 8014b04:	4604      	mov	r4, r0
 8014b06:	460d      	mov	r5, r1
 8014b08:	d904      	bls.n	8014b14 <_raise_r+0x14>
 8014b0a:	2316      	movs	r3, #22
 8014b0c:	6003      	str	r3, [r0, #0]
 8014b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b12:	bd38      	pop	{r3, r4, r5, pc}
 8014b14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014b16:	b112      	cbz	r2, 8014b1e <_raise_r+0x1e>
 8014b18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b1c:	b94b      	cbnz	r3, 8014b32 <_raise_r+0x32>
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f000 f830 	bl	8014b84 <_getpid_r>
 8014b24:	462a      	mov	r2, r5
 8014b26:	4601      	mov	r1, r0
 8014b28:	4620      	mov	r0, r4
 8014b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b2e:	f000 b817 	b.w	8014b60 <_kill_r>
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	d00a      	beq.n	8014b4c <_raise_r+0x4c>
 8014b36:	1c59      	adds	r1, r3, #1
 8014b38:	d103      	bne.n	8014b42 <_raise_r+0x42>
 8014b3a:	2316      	movs	r3, #22
 8014b3c:	6003      	str	r3, [r0, #0]
 8014b3e:	2001      	movs	r0, #1
 8014b40:	e7e7      	b.n	8014b12 <_raise_r+0x12>
 8014b42:	2400      	movs	r4, #0
 8014b44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014b48:	4628      	mov	r0, r5
 8014b4a:	4798      	blx	r3
 8014b4c:	2000      	movs	r0, #0
 8014b4e:	e7e0      	b.n	8014b12 <_raise_r+0x12>

08014b50 <raise>:
 8014b50:	4b02      	ldr	r3, [pc, #8]	; (8014b5c <raise+0xc>)
 8014b52:	4601      	mov	r1, r0
 8014b54:	6818      	ldr	r0, [r3, #0]
 8014b56:	f7ff bfd3 	b.w	8014b00 <_raise_r>
 8014b5a:	bf00      	nop
 8014b5c:	24000248 	.word	0x24000248

08014b60 <_kill_r>:
 8014b60:	b538      	push	{r3, r4, r5, lr}
 8014b62:	4d07      	ldr	r5, [pc, #28]	; (8014b80 <_kill_r+0x20>)
 8014b64:	2300      	movs	r3, #0
 8014b66:	4604      	mov	r4, r0
 8014b68:	4608      	mov	r0, r1
 8014b6a:	4611      	mov	r1, r2
 8014b6c:	602b      	str	r3, [r5, #0]
 8014b6e:	f7f0 facb 	bl	8005108 <_kill>
 8014b72:	1c43      	adds	r3, r0, #1
 8014b74:	d102      	bne.n	8014b7c <_kill_r+0x1c>
 8014b76:	682b      	ldr	r3, [r5, #0]
 8014b78:	b103      	cbz	r3, 8014b7c <_kill_r+0x1c>
 8014b7a:	6023      	str	r3, [r4, #0]
 8014b7c:	bd38      	pop	{r3, r4, r5, pc}
 8014b7e:	bf00      	nop
 8014b80:	24001758 	.word	0x24001758

08014b84 <_getpid_r>:
 8014b84:	f7f0 bab8 	b.w	80050f8 <_getpid>

08014b88 <__sread>:
 8014b88:	b510      	push	{r4, lr}
 8014b8a:	460c      	mov	r4, r1
 8014b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b90:	f000 f894 	bl	8014cbc <_read_r>
 8014b94:	2800      	cmp	r0, #0
 8014b96:	bfab      	itete	ge
 8014b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8014b9c:	181b      	addge	r3, r3, r0
 8014b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014ba2:	bfac      	ite	ge
 8014ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8014ba6:	81a3      	strhlt	r3, [r4, #12]
 8014ba8:	bd10      	pop	{r4, pc}

08014baa <__swrite>:
 8014baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bae:	461f      	mov	r7, r3
 8014bb0:	898b      	ldrh	r3, [r1, #12]
 8014bb2:	05db      	lsls	r3, r3, #23
 8014bb4:	4605      	mov	r5, r0
 8014bb6:	460c      	mov	r4, r1
 8014bb8:	4616      	mov	r6, r2
 8014bba:	d505      	bpl.n	8014bc8 <__swrite+0x1e>
 8014bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bc0:	2302      	movs	r3, #2
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	f000 f868 	bl	8014c98 <_lseek_r>
 8014bc8:	89a3      	ldrh	r3, [r4, #12]
 8014bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014bd2:	81a3      	strh	r3, [r4, #12]
 8014bd4:	4632      	mov	r2, r6
 8014bd6:	463b      	mov	r3, r7
 8014bd8:	4628      	mov	r0, r5
 8014bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bde:	f000 b817 	b.w	8014c10 <_write_r>

08014be2 <__sseek>:
 8014be2:	b510      	push	{r4, lr}
 8014be4:	460c      	mov	r4, r1
 8014be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bea:	f000 f855 	bl	8014c98 <_lseek_r>
 8014bee:	1c43      	adds	r3, r0, #1
 8014bf0:	89a3      	ldrh	r3, [r4, #12]
 8014bf2:	bf15      	itete	ne
 8014bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8014bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014bfe:	81a3      	strheq	r3, [r4, #12]
 8014c00:	bf18      	it	ne
 8014c02:	81a3      	strhne	r3, [r4, #12]
 8014c04:	bd10      	pop	{r4, pc}

08014c06 <__sclose>:
 8014c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c0a:	f000 b813 	b.w	8014c34 <_close_r>
	...

08014c10 <_write_r>:
 8014c10:	b538      	push	{r3, r4, r5, lr}
 8014c12:	4d07      	ldr	r5, [pc, #28]	; (8014c30 <_write_r+0x20>)
 8014c14:	4604      	mov	r4, r0
 8014c16:	4608      	mov	r0, r1
 8014c18:	4611      	mov	r1, r2
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	602a      	str	r2, [r5, #0]
 8014c1e:	461a      	mov	r2, r3
 8014c20:	f7f0 faa9 	bl	8005176 <_write>
 8014c24:	1c43      	adds	r3, r0, #1
 8014c26:	d102      	bne.n	8014c2e <_write_r+0x1e>
 8014c28:	682b      	ldr	r3, [r5, #0]
 8014c2a:	b103      	cbz	r3, 8014c2e <_write_r+0x1e>
 8014c2c:	6023      	str	r3, [r4, #0]
 8014c2e:	bd38      	pop	{r3, r4, r5, pc}
 8014c30:	24001758 	.word	0x24001758

08014c34 <_close_r>:
 8014c34:	b538      	push	{r3, r4, r5, lr}
 8014c36:	4d06      	ldr	r5, [pc, #24]	; (8014c50 <_close_r+0x1c>)
 8014c38:	2300      	movs	r3, #0
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	4608      	mov	r0, r1
 8014c3e:	602b      	str	r3, [r5, #0]
 8014c40:	f7f0 fab5 	bl	80051ae <_close>
 8014c44:	1c43      	adds	r3, r0, #1
 8014c46:	d102      	bne.n	8014c4e <_close_r+0x1a>
 8014c48:	682b      	ldr	r3, [r5, #0]
 8014c4a:	b103      	cbz	r3, 8014c4e <_close_r+0x1a>
 8014c4c:	6023      	str	r3, [r4, #0]
 8014c4e:	bd38      	pop	{r3, r4, r5, pc}
 8014c50:	24001758 	.word	0x24001758

08014c54 <_fstat_r>:
 8014c54:	b538      	push	{r3, r4, r5, lr}
 8014c56:	4d07      	ldr	r5, [pc, #28]	; (8014c74 <_fstat_r+0x20>)
 8014c58:	2300      	movs	r3, #0
 8014c5a:	4604      	mov	r4, r0
 8014c5c:	4608      	mov	r0, r1
 8014c5e:	4611      	mov	r1, r2
 8014c60:	602b      	str	r3, [r5, #0]
 8014c62:	f7f0 fab0 	bl	80051c6 <_fstat>
 8014c66:	1c43      	adds	r3, r0, #1
 8014c68:	d102      	bne.n	8014c70 <_fstat_r+0x1c>
 8014c6a:	682b      	ldr	r3, [r5, #0]
 8014c6c:	b103      	cbz	r3, 8014c70 <_fstat_r+0x1c>
 8014c6e:	6023      	str	r3, [r4, #0]
 8014c70:	bd38      	pop	{r3, r4, r5, pc}
 8014c72:	bf00      	nop
 8014c74:	24001758 	.word	0x24001758

08014c78 <_isatty_r>:
 8014c78:	b538      	push	{r3, r4, r5, lr}
 8014c7a:	4d06      	ldr	r5, [pc, #24]	; (8014c94 <_isatty_r+0x1c>)
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	4604      	mov	r4, r0
 8014c80:	4608      	mov	r0, r1
 8014c82:	602b      	str	r3, [r5, #0]
 8014c84:	f7f0 faaf 	bl	80051e6 <_isatty>
 8014c88:	1c43      	adds	r3, r0, #1
 8014c8a:	d102      	bne.n	8014c92 <_isatty_r+0x1a>
 8014c8c:	682b      	ldr	r3, [r5, #0]
 8014c8e:	b103      	cbz	r3, 8014c92 <_isatty_r+0x1a>
 8014c90:	6023      	str	r3, [r4, #0]
 8014c92:	bd38      	pop	{r3, r4, r5, pc}
 8014c94:	24001758 	.word	0x24001758

08014c98 <_lseek_r>:
 8014c98:	b538      	push	{r3, r4, r5, lr}
 8014c9a:	4d07      	ldr	r5, [pc, #28]	; (8014cb8 <_lseek_r+0x20>)
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	4608      	mov	r0, r1
 8014ca0:	4611      	mov	r1, r2
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	602a      	str	r2, [r5, #0]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	f7f0 faa8 	bl	80051fc <_lseek>
 8014cac:	1c43      	adds	r3, r0, #1
 8014cae:	d102      	bne.n	8014cb6 <_lseek_r+0x1e>
 8014cb0:	682b      	ldr	r3, [r5, #0]
 8014cb2:	b103      	cbz	r3, 8014cb6 <_lseek_r+0x1e>
 8014cb4:	6023      	str	r3, [r4, #0]
 8014cb6:	bd38      	pop	{r3, r4, r5, pc}
 8014cb8:	24001758 	.word	0x24001758

08014cbc <_read_r>:
 8014cbc:	b538      	push	{r3, r4, r5, lr}
 8014cbe:	4d07      	ldr	r5, [pc, #28]	; (8014cdc <_read_r+0x20>)
 8014cc0:	4604      	mov	r4, r0
 8014cc2:	4608      	mov	r0, r1
 8014cc4:	4611      	mov	r1, r2
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	602a      	str	r2, [r5, #0]
 8014cca:	461a      	mov	r2, r3
 8014ccc:	f7f0 fa36 	bl	800513c <_read>
 8014cd0:	1c43      	adds	r3, r0, #1
 8014cd2:	d102      	bne.n	8014cda <_read_r+0x1e>
 8014cd4:	682b      	ldr	r3, [r5, #0]
 8014cd6:	b103      	cbz	r3, 8014cda <_read_r+0x1e>
 8014cd8:	6023      	str	r3, [r4, #0]
 8014cda:	bd38      	pop	{r3, r4, r5, pc}
 8014cdc:	24001758 	.word	0x24001758

08014ce0 <_init>:
 8014ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ce2:	bf00      	nop
 8014ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ce6:	bc08      	pop	{r3}
 8014ce8:	469e      	mov	lr, r3
 8014cea:	4770      	bx	lr

08014cec <_fini>:
 8014cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cee:	bf00      	nop
 8014cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cf2:	bc08      	pop	{r3}
 8014cf4:	469e      	mov	lr, r3
 8014cf6:	4770      	bx	lr
