
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baa4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800bd44  0800bd44  0001bd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be20  0800be20  0001be20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be28  0800be28  0001be28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800be2c  0800be2c  0001be2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800be30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000864  20000074  0800bea4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008d8  0800bea4  000208d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023952  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003980  00000000  00000000  000439f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001430  00000000  00000000  00047378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001318  00000000  00000000  000487a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000439b  00000000  00000000  00049ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019a97  00000000  00000000  0004de5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167ade  00000000  00000000  000678f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001cf3d0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d58  00000000  00000000  001cf424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bd2c 	.word	0x0800bd2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	0800bd2c 	.word	0x0800bd2c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <RS485Encoder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int16_t RS485Encoder(uint8_t _address)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t _buff[2];
	volatile uint8_t checkbit_odd[7], checkbit_even[7];
	volatile char checkbit_odd_result = 0, checkbit_even_result = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	72fb      	strb	r3, [r7, #11]
 8000686:	2300      	movs	r3, #0
 8000688:	72bb      	strb	r3, [r7, #10]
	static int16_t POSCNT[4];
	HAL_UART_Transmit(&huart4, &_address, 1, 1);
 800068a:	1df9      	adds	r1, r7, #7
 800068c:	2301      	movs	r3, #1
 800068e:	2201      	movs	r2, #1
 8000690:	4858      	ldr	r0, [pc, #352]	; (80007f4 <RS485Encoder+0x17c>)
 8000692:	f008 faed 	bl	8008c70 <HAL_UART_Transmit>
	if(HAL_UART_Receive(&huart4, _buff, 2, 1) == HAL_OK) // Check received data is completed.
 8000696:	f107 011c 	add.w	r1, r7, #28
 800069a:	2301      	movs	r3, #1
 800069c:	2202      	movs	r2, #2
 800069e:	4855      	ldr	r0, [pc, #340]	; (80007f4 <RS485Encoder+0x17c>)
 80006a0:	f008 fb7c 	bl	8008d9c <HAL_UART_Receive>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f040 8096 	bne.w	80007d8 <RS485Encoder+0x160>
	{
		/*** Checksum ***/
		for (register int i = 0; i < 7; i++)
 80006ac:	2400      	movs	r4, #0
 80006ae:	e045      	b.n	800073c <RS485Encoder+0xc4>
		{
			if(i < 3){
 80006b0:	2c02      	cmp	r4, #2
 80006b2:	dc21      	bgt.n	80006f8 <RS485Encoder+0x80>
			  checkbit_odd[i] = (_buff[1] >> (7-(2*(i+1)))) & 0x01;
 80006b4:	7f7b      	ldrb	r3, [r7, #29]
 80006b6:	461a      	mov	r2, r3
 80006b8:	1c63      	adds	r3, r4, #1
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	f1c3 0307 	rsb	r3, r3, #7
 80006c0:	fa42 f303 	asr.w	r3, r2, r3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4423      	add	r3, r4
 80006d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
			  checkbit_even[i] = (_buff[1] >> (6-(2*(i+1)))) & 0x01;
 80006d6:	7f7b      	ldrb	r3, [r7, #29]
 80006d8:	461a      	mov	r2, r3
 80006da:	f1c4 0302 	rsb	r3, r4, #2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	fa42 f303 	asr.w	r3, r2, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4423      	add	r3, r4
 80006f2:	f803 2c14 	strb.w	r2, [r3, #-20]
 80006f6:	e020      	b.n	800073a <RS485Encoder+0xc2>
			}
			else{
			  checkbit_odd[i] = (_buff[0] >> (7-(2*(i-3)))) & 0x01;
 80006f8:	7f3b      	ldrb	r3, [r7, #28]
 80006fa:	461a      	mov	r2, r3
 80006fc:	1ee3      	subs	r3, r4, #3
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	f1c3 0307 	rsb	r3, r3, #7
 8000704:	fa42 f303 	asr.w	r3, r2, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	b2da      	uxtb	r2, r3
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4423      	add	r3, r4
 8000716:	f803 2c0c 	strb.w	r2, [r3, #-12]
			  checkbit_even[i] = (_buff[0] >> (6-(2*(i-3)))) & 0x01;
 800071a:	7f3b      	ldrb	r3, [r7, #28]
 800071c:	461a      	mov	r2, r3
 800071e:	f1c4 0306 	rsb	r3, r4, #6
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	fa42 f303 	asr.w	r3, r2, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4423      	add	r3, r4
 8000736:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (register int i = 0; i < 7; i++)
 800073a:	3401      	adds	r4, #1
 800073c:	2c06      	cmp	r4, #6
 800073e:	ddb7      	ble.n	80006b0 <RS485Encoder+0x38>
			}
		}
		for (register int i = 0; i < 7; i++)
 8000740:	2400      	movs	r4, #0
 8000742:	e016      	b.n	8000772 <RS485Encoder+0xfa>
		{
			checkbit_odd_result ^= checkbit_odd[i];
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4423      	add	r3, r4
 800074a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	7afb      	ldrb	r3, [r7, #11]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4053      	eors	r3, r2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	72fb      	strb	r3, [r7, #11]
			checkbit_even_result ^= checkbit_even[i];
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4423      	add	r3, r4
 8000760:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	7abb      	ldrb	r3, [r7, #10]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4053      	eors	r3, r2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	72bb      	strb	r3, [r7, #10]
		for (register int i = 0; i < 7; i++)
 8000770:	3401      	adds	r4, #1
 8000772:	2c06      	cmp	r4, #6
 8000774:	dde6      	ble.n	8000744 <RS485Encoder+0xcc>
		}
		checkbit_odd_result = !checkbit_odd_result;
 8000776:	7afb      	ldrb	r3, [r7, #11]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	bf0c      	ite	eq
 800077e:	2301      	moveq	r3, #1
 8000780:	2300      	movne	r3, #0
 8000782:	b2db      	uxtb	r3, r3
 8000784:	72fb      	strb	r3, [r7, #11]
		checkbit_even_result = !checkbit_even_result;
 8000786:	7abb      	ldrb	r3, [r7, #10]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf0c      	ite	eq
 800078e:	2301      	moveq	r3, #1
 8000790:	2300      	movne	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	72bb      	strb	r3, [r7, #10]
		if(!(checkbit_odd_result) && (checkbit_even_result)) //  If checksum is correct.
 8000796:	7afb      	ldrb	r3, [r7, #11]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d115      	bne.n	80007ca <RS485Encoder+0x152>
 800079e:	7abb      	ldrb	r3, [r7, #10]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d011      	beq.n	80007ca <RS485Encoder+0x152>
		{
			switch (_address){
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b2c      	cmp	r3, #44	; 0x2c
 80007aa:	d115      	bne.n	80007d8 <RS485Encoder+0x160>
				case ENC_JOINT1_Address:
					POSCNT[0] = _buff[0] + ((_buff[1] & 0x3F) << 8);
 80007ac:	7f3b      	ldrb	r3, [r7, #28]
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	7f7b      	ldrb	r3, [r7, #29]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4413      	add	r3, r2
 80007be:	b29b      	uxth	r3, r3
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <RS485Encoder+0x180>)
 80007c4:	801a      	strh	r2, [r3, #0]
					break;
 80007c6:	bf00      	nop
			switch (_address){
 80007c8:	e006      	b.n	80007d8 <RS485Encoder+0x160>
			}
		}
		else{ //  If checksum isn't correct.
			switch (_address){
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b2c      	cmp	r3, #44	; 0x2c
 80007ce:	d103      	bne.n	80007d8 <RS485Encoder+0x160>
				case ENC_JOINT1_Address:
					return POSCNT[0];
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <RS485Encoder+0x180>)
 80007d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d6:	e008      	b.n	80007ea <RS485Encoder+0x172>
					break;
			}
		}

	}
	switch (_address){
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b2c      	cmp	r3, #44	; 0x2c
 80007dc:	d103      	bne.n	80007e6 <RS485Encoder+0x16e>
		case ENC_JOINT1_Address:
			return POSCNT[0];
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <RS485Encoder+0x180>)
 80007e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e4:	e001      	b.n	80007ea <RS485Encoder+0x172>
			break;
	}
	return -1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd90      	pop	{r4, r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200006a8 	.word	0x200006a8
 80007f8:	20000090 	.word	0x20000090

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f001 fdc4 	bl	800238c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f852 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 fe72 	bl	80014f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800080c:	f000 fd20 	bl	8001250 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000810:	f000 fcd2 	bl	80011b8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000814:	f000 f9ec 	bl	8000bf0 <MX_TIM2_Init>
  MX_UART4_Init();
 8000818:	f000 fc7e 	bl	8001118 <MX_UART4_Init>
  MX_TIM4_Init();
 800081c:	f000 fad8 	bl	8000dd0 <MX_TIM4_Init>
  MX_SPI3_Init();
 8000820:	f000 f8e2 	bl	80009e8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000824:	f000 f936 	bl	8000a94 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000828:	f000 fa5a 	bl	8000ce0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800082c:	f000 fb48 	bl	8000ec0 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000830:	f000 fbce 	bl	8000fd0 <MX_TIM15_Init>
  MX_TIM12_Init();
 8000834:	f000 fb92 	bl	8000f5c <MX_TIM12_Init>
  MX_CRC_Init();
 8000838:	f000 f8b4 	bl	80009a4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	4815      	ldr	r0, [pc, #84]	; (8000898 <main+0x9c>)
 8000842:	f004 fc0f 	bl	8005064 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2102      	movs	r1, #2
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <main+0xa0>)
 800084c:	f004 fc0a 	bl	8005064 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <main+0x9c>)
 8000858:	f004 fc04 	bl	8005064 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <main+0xa4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <main+0xa4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f042 0220 	orr.w	r2, r2, #32
 800086a:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <main+0xa4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <main+0xa4>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800087a:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 800087c:	2204      	movs	r2, #4
 800087e:	4909      	ldr	r1, [pc, #36]	; (80008a4 <main+0xa8>)
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <main+0xa4>)
 8000882:	f008 fb5f 	bl	8008f44 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      printf("%d\n", RS485Encoder(0x2C));
 8000886:	202c      	movs	r0, #44	; 0x2c
 8000888:	f7ff fef6 	bl	8000678 <RS485Encoder>
 800088c:	4603      	mov	r3, r0
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <main+0xac>)
 8000892:	f00a faf5 	bl	800ae80 <iprintf>
 8000896:	e7f6      	b.n	8000886 <main+0x8a>
 8000898:	58020400 	.word	0x58020400
 800089c:	58021000 	.word	0x58021000
 80008a0:	200002d0 	.word	0x200002d0
 80008a4:	200008c0 	.word	0x200008c0
 80008a8:	0800bd44 	.word	0x0800bd44

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	; 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	224c      	movs	r2, #76	; 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f00a fad8 	bl	800ae70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00a fad2 	bl	800ae70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f004 fbfd 	bl	80050cc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b31      	ldr	r3, [pc, #196]	; (800099c <SystemClock_Config+0xf0>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a30      	ldr	r2, [pc, #192]	; (800099c <SystemClock_Config+0xf0>)
 80008dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <SystemClock_Config+0xf0>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <SystemClock_Config+0xf4>)
 80008ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f0:	4a2b      	ldr	r2, [pc, #172]	; (80009a0 <SystemClock_Config+0xf4>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <SystemClock_Config+0xf4>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	bf00      	nop
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <SystemClock_Config+0xf0>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000912:	d1f8      	bne.n	8000906 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000918:	2301      	movs	r3, #1
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000928:	2304      	movs	r3, #4
 800092a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800092c:	233c      	movs	r3, #60	; 0x3c
 800092e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000934:	2306      	movs	r3, #6
 8000936:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800093c:	230c      	movs	r3, #12
 800093e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000940:	2300      	movs	r3, #0
 8000942:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4618      	mov	r0, r3
 800094e:	f004 fbf7 	bl	8005140 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000958:	f000 ff41 	bl	80017de <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	233f      	movs	r3, #63	; 0x3f
 800095e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2303      	movs	r3, #3
 8000962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000968:	2308      	movs	r3, #8
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000970:	2340      	movs	r3, #64	; 0x40
 8000972:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000978:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2104      	movs	r1, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f004 ffec 	bl	8005960 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800098e:	f000 ff26 	bl	80017de <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3770      	adds	r7, #112	; 0x70
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	58024800 	.word	0x58024800
 80009a0:	58000400 	.word	0x58000400

080009a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_CRC_Init+0x3c>)
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <MX_CRC_Init+0x40>)
 80009ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_CRC_Init+0x3c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_CRC_Init+0x3c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_CRC_Init+0x3c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_CRC_Init+0x3c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_CRC_Init+0x3c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_CRC_Init+0x3c>)
 80009ce:	f001 fe8b 	bl	80026e8 <HAL_CRC_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009d8:	f000 ff01 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000428 	.word	0x20000428
 80009e4:	58024c00 	.word	0x58024c00

080009e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009ec:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <MX_SPI3_Init+0xa4>)
 80009ee:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <MX_SPI3_Init+0xa8>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_SPI3_Init+0xa4>)
 80009f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <MX_SPI3_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a02:	2203      	movs	r2, #3
 8000a04:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a18:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_SPI3_Init+0xa4>)
 8000a78:	f006 fe60 	bl	800773c <HAL_SPI_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000a82:	f000 feac 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000055c 	.word	0x2000055c
 8000a90:	40003c00 	.word	0x40003c00

08000a94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09a      	sub	sp, #104	; 0x68
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
 8000ac4:	615a      	str	r2, [r3, #20]
 8000ac6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	222c      	movs	r2, #44	; 0x2c
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00a f9ce 	bl	800ae70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad4:	4b44      	ldr	r3, [pc, #272]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000ad6:	4a45      	ldr	r2, [pc, #276]	; (8000bec <MX_TIM1_Init+0x158>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000ada:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000adc:	22ef      	movs	r2, #239	; 0xef
 8000ade:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000ae8:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000aec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af4:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b00:	4839      	ldr	r0, [pc, #228]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000b02:	f006 ff38 	bl	8007976 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f000 fe67 	bl	80017de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4832      	ldr	r0, [pc, #200]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000b1e:	f007 fa11 	bl	8007f44 <HAL_TIM_ConfigClockSource>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b28:	f000 fe59 	bl	80017de <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b2c:	482e      	ldr	r0, [pc, #184]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000b2e:	f006 ff79 	bl	8007a24 <HAL_TIM_PWM_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b38:	f000 fe51 	bl	80017de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4826      	ldr	r0, [pc, #152]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000b50:	f007 ff1a 	bl	8008988 <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b5a:	f000 fe40 	bl	80017de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5e:	2360      	movs	r3, #96	; 0x60
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000b62:	f240 1339 	movw	r3, #313	; 0x139
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b80:	2204      	movs	r2, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4818      	ldr	r0, [pc, #96]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000b86:	f007 f8cd 	bl	8007d24 <HAL_TIM_PWM_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000b90:	f000 fe25 	bl	80017de <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000bca:	f007 ff65 	bl	8008a98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000bd4:	f000 fe03 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <MX_TIM1_Init+0x154>)
 8000bda:	f000 ff67 	bl	8001aac <HAL_TIM_MspPostInit>

}
 8000bde:	bf00      	nop
 8000be0:	3768      	adds	r7, #104	; 0x68
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000065c 	.word	0x2000065c
 8000bec:	40010000 	.word	0x40010000

08000bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c22:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000c2a:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000c2c:	22ef      	movs	r2, #239	; 0xef
 8000c2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000c38:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c4a:	4824      	ldr	r0, [pc, #144]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000c4c:	f006 fe93 	bl	8007976 <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c56:	f000 fdc2 	bl	80017de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c64:	4619      	mov	r1, r3
 8000c66:	481d      	ldr	r0, [pc, #116]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000c68:	f007 f96c 	bl	8007f44 <HAL_TIM_ConfigClockSource>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c72:	f000 fdb4 	bl	80017de <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000c78:	f006 fed4 	bl	8007a24 <HAL_TIM_PWM_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c82:	f000 fdac 	bl	80017de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4811      	ldr	r0, [pc, #68]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000c96:	f007 fe77 	bl	8008988 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ca0:	f000 fd9d 	bl	80017de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca4:	2360      	movs	r3, #96	; 0x60
 8000ca6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000ca8:	f240 1339 	movw	r3, #313	; 0x139
 8000cac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2208      	movs	r2, #8
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000cbe:	f007 f831 	bl	8007d24 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000cc8:	f000 fd89 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM2_Init+0xec>)
 8000cce:	f000 feed 	bl	8001aac <HAL_TIM_MspPostInit>

}
 8000cd2:	bf00      	nop
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200007b0 	.word	0x200007b0

08000ce0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d00:	463b      	mov	r3, r7
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d14:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <MX_TIM3_Init+0xec>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d1a:	22ef      	movs	r2, #239	; 0xef
 8000d1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d26:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d38:	4823      	ldr	r0, [pc, #140]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d3a:	f006 fe1c 	bl	8007976 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d44:	f000 fd4b 	bl	80017de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d52:	4619      	mov	r1, r3
 8000d54:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d56:	f007 f8f5 	bl	8007f44 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d60:	f000 fd3d 	bl	80017de <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d66:	f006 fe5d 	bl	8007a24 <HAL_TIM_PWM_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d70:	f000 fd35 	bl	80017de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d84:	f007 fe00 	bl	8008988 <HAL_TIMEx_MasterConfigSynchronization>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d8e:	f000 fd26 	bl	80017de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d92:	2360      	movs	r3, #96	; 0x60
 8000d94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000d96:	f240 1339 	movw	r3, #313	; 0x139
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000dac:	f006 ffba 	bl	8007d24 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000db6:	f000 fd12 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000dbc:	f000 fe76 	bl	8001aac <HAL_TIM_MspPostInit>

}
 8000dc0:	bf00      	nop
 8000dc2:	3738      	adds	r7, #56	; 0x38
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000510 	.word	0x20000510
 8000dcc:	40000400 	.word	0x40000400

08000dd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	; 0x38
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
 8000dfe:	615a      	str	r2, [r3, #20]
 8000e00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e04:	4a2d      	ldr	r2, [pc, #180]	; (8000ebc <MX_TIM4_Init+0xec>)
 8000e06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e0a:	22ef      	movs	r2, #239	; 0xef
 8000e0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e16:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000e1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e28:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e2a:	f006 fda4 	bl	8007976 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e34:	f000 fcd3 	bl	80017de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e42:	4619      	mov	r1, r3
 8000e44:	481c      	ldr	r0, [pc, #112]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e46:	f007 f87d 	bl	8007f44 <HAL_TIM_ConfigClockSource>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e50:	f000 fcc5 	bl	80017de <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e54:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e56:	f006 fde5 	bl	8007a24 <HAL_TIM_PWM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e60:	f000 fcbd 	bl	80017de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e74:	f007 fd88 	bl	8008988 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e7e:	f000 fcae 	bl	80017de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e82:	2360      	movs	r3, #96	; 0x60
 8000e84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000e86:	f240 1339 	movw	r3, #313	; 0x139
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	2208      	movs	r2, #8
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000e9c:	f006 ff42 	bl	8007d24 <HAL_TIM_PWM_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000ea6:	f000 fc9a 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <MX_TIM4_Init+0xe8>)
 8000eac:	f000 fdfe 	bl	8001aac <HAL_TIM_MspPostInit>

}
 8000eb0:	bf00      	nop
 8000eb2:	3738      	adds	r7, #56	; 0x38
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000020c 	.word	0x2000020c
 8000ebc:	40000800 	.word	0x40000800

08000ec0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <MX_TIM5_Init+0x98>)
 8000ee2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000ee6:	22ef      	movs	r2, #239	; 0xef
 8000ee8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000ef2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000ef6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000f06:	f006 fd36 	bl	8007976 <HAL_TIM_Base_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000f10:	f000 fc65 	bl	80017de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000f22:	f007 f80f 	bl	8007f44 <HAL_TIM_ConfigClockSource>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000f2c:	f000 fc57 	bl	80017de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000f3e:	f007 fd23 	bl	8008988 <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f48:	f000 fc49 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200004c4 	.word	0x200004c4
 8000f58:	40000c00 	.word	0x40000c00

08000f5c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_TIM12_Init+0x6c>)
 8000f70:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <MX_TIM12_Init+0x70>)
 8000f72:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_TIM12_Init+0x6c>)
 8000f76:	22ef      	movs	r2, #239	; 0xef
 8000f78:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_TIM12_Init+0x6c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_TIM12_Init+0x6c>)
 8000f82:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f86:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_TIM12_Init+0x6c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_TIM12_Init+0x6c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM12_Init+0x6c>)
 8000f96:	f006 fcee 	bl	8007976 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8000fa0:	f000 fc1d 	bl	80017de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <MX_TIM12_Init+0x6c>)
 8000fb0:	f006 ffc8 	bl	8007f44 <HAL_TIM_ConfigClockSource>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8000fba:	f000 fc10 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200007fc 	.word	0x200007fc
 8000fcc:	40001800 	.word	0x40001800

08000fd0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b09a      	sub	sp, #104	; 0x68
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	615a      	str	r2, [r3, #20]
 8001002:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	222c      	movs	r2, #44	; 0x2c
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f009 ff30 	bl	800ae70 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001010:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <MX_TIM15_Init+0x140>)
 8001012:	4a40      	ldr	r2, [pc, #256]	; (8001114 <MX_TIM15_Init+0x144>)
 8001014:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8001016:	4b3e      	ldr	r3, [pc, #248]	; (8001110 <MX_TIM15_Init+0x140>)
 8001018:	22ef      	movs	r2, #239	; 0xef
 800101a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <MX_TIM15_Init+0x140>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <MX_TIM15_Init+0x140>)
 8001024:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001028:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102a:	4b39      	ldr	r3, [pc, #228]	; (8001110 <MX_TIM15_Init+0x140>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001030:	4b37      	ldr	r3, [pc, #220]	; (8001110 <MX_TIM15_Init+0x140>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	4b36      	ldr	r3, [pc, #216]	; (8001110 <MX_TIM15_Init+0x140>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800103c:	4834      	ldr	r0, [pc, #208]	; (8001110 <MX_TIM15_Init+0x140>)
 800103e:	f006 fc9a 	bl	8007976 <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001048:	f000 fbc9 	bl	80017de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001052:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001056:	4619      	mov	r1, r3
 8001058:	482d      	ldr	r0, [pc, #180]	; (8001110 <MX_TIM15_Init+0x140>)
 800105a:	f006 ff73 	bl	8007f44 <HAL_TIM_ConfigClockSource>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001064:	f000 fbbb 	bl	80017de <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001068:	4829      	ldr	r0, [pc, #164]	; (8001110 <MX_TIM15_Init+0x140>)
 800106a:	f006 fcdb 	bl	8007a24 <HAL_TIM_PWM_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001074:	f000 fbb3 	bl	80017de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001080:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001084:	4619      	mov	r1, r3
 8001086:	4822      	ldr	r0, [pc, #136]	; (8001110 <MX_TIM15_Init+0x140>)
 8001088:	f007 fc7e 	bl	8008988 <HAL_TIMEx_MasterConfigSynchronization>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001092:	f000 fba4 	bl	80017de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001096:	2360      	movs	r3, #96	; 0x60
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800109a:	f240 1339 	movw	r3, #313	; 0x139
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b8:	2204      	movs	r2, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4814      	ldr	r0, [pc, #80]	; (8001110 <MX_TIM15_Init+0x140>)
 80010be:	f006 fe31 	bl	8007d24 <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80010c8:	f000 fb89 	bl	80017de <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <MX_TIM15_Init+0x140>)
 80010f4:	f007 fcd0 	bl	8008a98 <HAL_TIMEx_ConfigBreakDeadTime>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80010fe:	f000 fb6e 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001102:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_TIM15_Init+0x140>)
 8001104:	f000 fcd2 	bl	8001aac <HAL_TIM_MspPostInit>

}
 8001108:	bf00      	nop
 800110a:	3768      	adds	r7, #104	; 0x68
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200003dc 	.word	0x200003dc
 8001114:	40014000 	.word	0x40014000

08001118 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <MX_UART4_Init+0x94>)
 800111e:	4a24      	ldr	r2, [pc, #144]	; (80011b0 <MX_UART4_Init+0x98>)
 8001120:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <MX_UART4_Init+0x94>)
 8001124:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <MX_UART4_Init+0x9c>)
 8001126:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <MX_UART4_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_UART4_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_UART4_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_UART4_Init+0x94>)
 800113c:	220c      	movs	r2, #12
 800113e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_UART4_Init+0x94>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_UART4_Init+0x94>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_UART4_Init+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_UART4_Init+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_UART4_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800115e:	2300      	movs	r3, #0
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	4811      	ldr	r0, [pc, #68]	; (80011ac <MX_UART4_Init+0x94>)
 8001166:	f009 fccd 	bl	800ab04 <HAL_RS485Ex_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001170:	f000 fb35 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001174:	2100      	movs	r1, #0
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_UART4_Init+0x94>)
 8001178:	f009 fd85 	bl	800ac86 <HAL_UARTEx_SetTxFifoThreshold>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 8001182:	f000 fb2c 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <MX_UART4_Init+0x94>)
 800118a:	f009 fdba 	bl	800ad02 <HAL_UARTEx_SetRxFifoThreshold>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8001194:	f000 fb23 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_UART4_Init+0x94>)
 800119a:	f009 fd3b 	bl	800ac14 <HAL_UARTEx_DisableFifoMode>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 80011a4:	f000 fb1b 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200006a8 	.word	0x200006a8
 80011b0:	40004c00 	.word	0x40004c00
 80011b4:	001e8480 	.word	0x001e8480

080011b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011be:	4a23      	ldr	r2, [pc, #140]	; (800124c <MX_USART3_UART_Init+0x94>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_USART3_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001200:	4811      	ldr	r0, [pc, #68]	; (8001248 <MX_USART3_UART_Init+0x90>)
 8001202:	f007 fce5 	bl	8008bd0 <HAL_UART_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800120c:	f000 fae7 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_USART3_UART_Init+0x90>)
 8001214:	f009 fd37 	bl	800ac86 <HAL_UARTEx_SetTxFifoThreshold>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800121e:	f000 fade 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001222:	2100      	movs	r1, #0
 8001224:	4808      	ldr	r0, [pc, #32]	; (8001248 <MX_USART3_UART_Init+0x90>)
 8001226:	f009 fd6c 	bl	800ad02 <HAL_UARTEx_SetRxFifoThreshold>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001230:	f000 fad5 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_USART3_UART_Init+0x90>)
 8001236:	f009 fced 	bl	800ac14 <HAL_UARTEx_DisableFifoMode>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 facd 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200002d0 	.word	0x200002d0
 800124c:	40004800 	.word	0x40004800

08001250 <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream3
  *   hdma_memtomem_dma2_stream4
  *   hdma_memtomem_dma2_stream5
  */
static void MX_DMA_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001256:	4b9b      	ldr	r3, [pc, #620]	; (80014c4 <MX_DMA_Init+0x274>)
 8001258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800125c:	4a99      	ldr	r2, [pc, #612]	; (80014c4 <MX_DMA_Init+0x274>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001266:	4b97      	ldr	r3, [pc, #604]	; (80014c4 <MX_DMA_Init+0x274>)
 8001268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001274:	4b93      	ldr	r3, [pc, #588]	; (80014c4 <MX_DMA_Init+0x274>)
 8001276:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800127a:	4a92      	ldr	r2, [pc, #584]	; (80014c4 <MX_DMA_Init+0x274>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001284:	4b8f      	ldr	r3, [pc, #572]	; (80014c4 <MX_DMA_Init+0x274>)
 8001286:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream3 on DMA1_Stream3 */
  hdma_memtomem_dma1_stream3.Instance = DMA1_Stream3;
 8001292:	4b8d      	ldr	r3, [pc, #564]	; (80014c8 <MX_DMA_Init+0x278>)
 8001294:	4a8d      	ldr	r2, [pc, #564]	; (80014cc <MX_DMA_Init+0x27c>)
 8001296:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 8001298:	4b8b      	ldr	r3, [pc, #556]	; (80014c8 <MX_DMA_Init+0x278>)
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800129e:	4b8a      	ldr	r3, [pc, #552]	; (80014c8 <MX_DMA_Init+0x278>)
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 80012a4:	4b88      	ldr	r3, [pc, #544]	; (80014c8 <MX_DMA_Init+0x278>)
 80012a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012aa:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream3.Init.MemInc = DMA_MINC_ENABLE;
 80012ac:	4b86      	ldr	r3, [pc, #536]	; (80014c8 <MX_DMA_Init+0x278>)
 80012ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b2:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b4:	4b84      	ldr	r3, [pc, #528]	; (80014c8 <MX_DMA_Init+0x278>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ba:	4b83      	ldr	r3, [pc, #524]	; (80014c8 <MX_DMA_Init+0x278>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream3.Init.Mode = DMA_NORMAL;
 80012c0:	4b81      	ldr	r3, [pc, #516]	; (80014c8 <MX_DMA_Init+0x278>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream3.Init.Priority = DMA_PRIORITY_LOW;
 80012c6:	4b80      	ldr	r3, [pc, #512]	; (80014c8 <MX_DMA_Init+0x278>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012cc:	4b7e      	ldr	r3, [pc, #504]	; (80014c8 <MX_DMA_Init+0x278>)
 80012ce:	2204      	movs	r2, #4
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012d2:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <MX_DMA_Init+0x278>)
 80012d4:	2203      	movs	r2, #3
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 80012d8:	4b7b      	ldr	r3, [pc, #492]	; (80014c8 <MX_DMA_Init+0x278>)
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012de:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <MX_DMA_Init+0x278>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream3) != HAL_OK)
 80012e4:	4878      	ldr	r0, [pc, #480]	; (80014c8 <MX_DMA_Init+0x278>)
 80012e6:	f001 fae9 	bl	80028bc <HAL_DMA_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 80012f0:	f000 fa75 	bl	80017de <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 80012f4:	4b76      	ldr	r3, [pc, #472]	; (80014d0 <MX_DMA_Init+0x280>)
 80012f6:	4a77      	ldr	r2, [pc, #476]	; (80014d4 <MX_DMA_Init+0x284>)
 80012f8:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 80012fa:	4b75      	ldr	r3, [pc, #468]	; (80014d0 <MX_DMA_Init+0x280>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001300:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <MX_DMA_Init+0x280>)
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 8001306:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <MX_DMA_Init+0x280>)
 8001308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130c:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 800130e:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <MX_DMA_Init+0x280>)
 8001310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001314:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001316:	4b6e      	ldr	r3, [pc, #440]	; (80014d0 <MX_DMA_Init+0x280>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800131c:	4b6c      	ldr	r3, [pc, #432]	; (80014d0 <MX_DMA_Init+0x280>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 8001322:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <MX_DMA_Init+0x280>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 8001328:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <MX_DMA_Init+0x280>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800132e:	4b68      	ldr	r3, [pc, #416]	; (80014d0 <MX_DMA_Init+0x280>)
 8001330:	2204      	movs	r2, #4
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001334:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <MX_DMA_Init+0x280>)
 8001336:	2203      	movs	r2, #3
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 800133a:	4b65      	ldr	r3, [pc, #404]	; (80014d0 <MX_DMA_Init+0x280>)
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001340:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <MX_DMA_Init+0x280>)
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 8001346:	4862      	ldr	r0, [pc, #392]	; (80014d0 <MX_DMA_Init+0x280>)
 8001348:	f001 fab8 	bl	80028bc <HAL_DMA_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_DMA_Init+0x106>
  {
    Error_Handler( );
 8001352:	f000 fa44 	bl	80017de <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <MX_DMA_Init+0x288>)
 8001358:	4a60      	ldr	r2, [pc, #384]	; (80014dc <MX_DMA_Init+0x28c>)
 800135a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 800135c:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <MX_DMA_Init+0x288>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001362:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <MX_DMA_Init+0x288>)
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001368:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <MX_DMA_Init+0x288>)
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8001370:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <MX_DMA_Init+0x288>)
 8001372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001376:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001378:	4b57      	ldr	r3, [pc, #348]	; (80014d8 <MX_DMA_Init+0x288>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800137e:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <MX_DMA_Init+0x288>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 8001384:	4b54      	ldr	r3, [pc, #336]	; (80014d8 <MX_DMA_Init+0x288>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_LOW;
 800138a:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <MX_DMA_Init+0x288>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001390:	4b51      	ldr	r3, [pc, #324]	; (80014d8 <MX_DMA_Init+0x288>)
 8001392:	2204      	movs	r2, #4
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001396:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <MX_DMA_Init+0x288>)
 8001398:	2203      	movs	r2, #3
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 800139c:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <MX_DMA_Init+0x288>)
 800139e:	2200      	movs	r2, #0
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013a2:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <MX_DMA_Init+0x288>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 80013a8:	484b      	ldr	r0, [pc, #300]	; (80014d8 <MX_DMA_Init+0x288>)
 80013aa:	f001 fa87 	bl	80028bc <HAL_DMA_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 80013b4:	f000 fa13 	bl	80017de <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream4 on DMA2_Stream4 */
  hdma_memtomem_dma2_stream4.Instance = DMA2_Stream4;
 80013b8:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <MX_DMA_Init+0x290>)
 80013ba:	4a4a      	ldr	r2, [pc, #296]	; (80014e4 <MX_DMA_Init+0x294>)
 80013bc:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 80013be:	4b48      	ldr	r3, [pc, #288]	; (80014e0 <MX_DMA_Init+0x290>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80013c4:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <MX_DMA_Init+0x290>)
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 80013ca:	4b45      	ldr	r3, [pc, #276]	; (80014e0 <MX_DMA_Init+0x290>)
 80013cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d0:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream4.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <MX_DMA_Init+0x290>)
 80013d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <MX_DMA_Init+0x290>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e0:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <MX_DMA_Init+0x290>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream4.Init.Mode = DMA_NORMAL;
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <MX_DMA_Init+0x290>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream4.Init.Priority = DMA_PRIORITY_LOW;
 80013ec:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <MX_DMA_Init+0x290>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <MX_DMA_Init+0x290>)
 80013f4:	2204      	movs	r2, #4
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_DMA_Init+0x290>)
 80013fa:	2203      	movs	r2, #3
 80013fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <MX_DMA_Init+0x290>)
 8001400:	2200      	movs	r2, #0
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_DMA_Init+0x290>)
 8001406:	2200      	movs	r2, #0
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream4) != HAL_OK)
 800140a:	4835      	ldr	r0, [pc, #212]	; (80014e0 <MX_DMA_Init+0x290>)
 800140c:	f001 fa56 	bl	80028bc <HAL_DMA_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_DMA_Init+0x1ca>
  {
    Error_Handler( );
 8001416:	f000 f9e2 	bl	80017de <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <MX_DMA_Init+0x298>)
 800141c:	4a33      	ldr	r2, [pc, #204]	; (80014ec <MX_DMA_Init+0x29c>)
 800141e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Request = DMA_REQUEST_MEM2MEM;
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <MX_DMA_Init+0x298>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <MX_DMA_Init+0x298>)
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 800142c:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <MX_DMA_Init+0x298>)
 800142e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001432:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <MX_DMA_Init+0x298>)
 8001436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <MX_DMA_Init+0x298>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <MX_DMA_Init+0x298>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <MX_DMA_Init+0x298>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_LOW;
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <MX_DMA_Init+0x298>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <MX_DMA_Init+0x298>)
 8001456:	2204      	movs	r2, #4
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <MX_DMA_Init+0x298>)
 800145c:	2203      	movs	r2, #3
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <MX_DMA_Init+0x298>)
 8001462:	2200      	movs	r2, #0
 8001464:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_DMA_Init+0x298>)
 8001468:	2200      	movs	r2, #0
 800146a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 800146c:	481e      	ldr	r0, [pc, #120]	; (80014e8 <MX_DMA_Init+0x298>)
 800146e:	f001 fa25 	bl	80028bc <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_DMA_Init+0x22c>
  {
    Error_Handler( );
 8001478:	f000 f9b1 	bl	80017de <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	200c      	movs	r0, #12
 8001482:	f001 f8fc 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001486:	200c      	movs	r0, #12
 8001488:	f001 f913 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	200d      	movs	r0, #13
 8001492:	f001 f8f4 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001496:	200d      	movs	r0, #13
 8001498:	f001 f90b 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	2038      	movs	r0, #56	; 0x38
 80014a2:	f001 f8ec 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014a6:	2038      	movs	r0, #56	; 0x38
 80014a8:	f001 f903 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	2039      	movs	r0, #57	; 0x39
 80014b2:	f001 f8e4 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80014b6:	2039      	movs	r0, #57	; 0x39
 80014b8:	f001 f8fb 	bl	80026b2 <HAL_NVIC_EnableIRQ>

}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	58024400 	.word	0x58024400
 80014c8:	20000360 	.word	0x20000360
 80014cc:	40020058 	.word	0x40020058
 80014d0:	20000738 	.word	0x20000738
 80014d4:	40020440 	.word	0x40020440
 80014d8:	200005e4 	.word	0x200005e4
 80014dc:	40020458 	.word	0x40020458
 80014e0:	200000a4 	.word	0x200000a4
 80014e4:	40020470 	.word	0x40020470
 80014e8:	2000011c 	.word	0x2000011c
 80014ec:	40020488 	.word	0x40020488

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001506:	4b7b      	ldr	r3, [pc, #492]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150c:	4a79      	ldr	r2, [pc, #484]	; (80016f4 <MX_GPIO_Init+0x204>)
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001516:	4b77      	ldr	r3, [pc, #476]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b73      	ldr	r3, [pc, #460]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152a:	4a72      	ldr	r2, [pc, #456]	; (80016f4 <MX_GPIO_Init+0x204>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001534:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	4b6c      	ldr	r3, [pc, #432]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	4a6a      	ldr	r2, [pc, #424]	; (80016f4 <MX_GPIO_Init+0x204>)
 800154a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001552:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	4a63      	ldr	r2, [pc, #396]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001570:	4b60      	ldr	r3, [pc, #384]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001584:	4a5b      	ldr	r2, [pc, #364]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158e:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <MX_GPIO_Init+0x204>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800159c:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <MX_GPIO_Init+0x204>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	4a54      	ldr	r2, [pc, #336]	; (80016f4 <MX_GPIO_Init+0x204>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ac:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <MX_GPIO_Init+0x204>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ba:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <MX_GPIO_Init+0x204>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c0:	4a4c      	ldr	r2, [pc, #304]	; (80016f4 <MX_GPIO_Init+0x204>)
 80015c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <MX_GPIO_Init+0x204>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80015d8:	2200      	movs	r2, #0
 80015da:	f644 2121 	movw	r1, #18977	; 0x4a21
 80015de:	4846      	ldr	r0, [pc, #280]	; (80016f8 <MX_GPIO_Init+0x208>)
 80015e0:	f003 fd40 	bl	8005064 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f24c 0102 	movw	r1, #49154	; 0xc002
 80015ea:	4844      	ldr	r0, [pc, #272]	; (80016fc <MX_GPIO_Init+0x20c>)
 80015ec:	f003 fd3a 	bl	8005064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f6:	4842      	ldr	r0, [pc, #264]	; (8001700 <MX_GPIO_Init+0x210>)
 80015f8:	f003 fd34 	bl	8005064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001602:	4840      	ldr	r0, [pc, #256]	; (8001704 <MX_GPIO_Init+0x214>)
 8001604:	f003 fd2e 	bl	8005064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001608:	f644 2321 	movw	r3, #18977	; 0x4a21
 800160c:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4835      	ldr	r0, [pc, #212]	; (80016f8 <MX_GPIO_Init+0x208>)
 8001622:	f003 fb6f 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 8001626:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <MX_GPIO_Init+0x218>)
 800162e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4619      	mov	r1, r3
 800163a:	4830      	ldr	r0, [pc, #192]	; (80016fc <MX_GPIO_Init+0x20c>)
 800163c:	f003 fb62 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001640:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4828      	ldr	r0, [pc, #160]	; (80016fc <MX_GPIO_Init+0x20c>)
 800165a:	f003 fb53 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800165e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	4822      	ldr	r0, [pc, #136]	; (8001700 <MX_GPIO_Init+0x210>)
 8001678:	f003 fb44 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800167c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	4619      	mov	r1, r3
 8001694:	481b      	ldr	r0, [pc, #108]	; (8001704 <MX_GPIO_Init+0x214>)
 8001696:	f003 fb35 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 800169a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_GPIO_Init+0x218>)
 80016a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	4817      	ldr	r0, [pc, #92]	; (800170c <MX_GPIO_Init+0x21c>)
 80016b0:	f003 fb28 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 80016b4:	23c0      	movs	r3, #192	; 0xc0
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_GPIO_Init+0x218>)
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_GPIO_Init+0x208>)
 80016c8:	f003 fb1c 	bl	8004d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2103      	movs	r1, #3
 80016d0:	2017      	movs	r0, #23
 80016d2:	f000 ffd4 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016d6:	2017      	movs	r0, #23
 80016d8:	f000 ffeb 	bl	80026b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2103      	movs	r1, #3
 80016e0:	2028      	movs	r0, #40	; 0x28
 80016e2:	f000 ffcc 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016e6:	2028      	movs	r0, #40	; 0x28
 80016e8:	f000 ffe3 	bl	80026b2 <HAL_NVIC_EnableIRQ>

}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	; 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	58024400 	.word	0x58024400
 80016f8:	58020400 	.word	0x58020400
 80016fc:	58021000 	.word	0x58021000
 8001700:	58020c00 	.word	0x58020c00
 8001704:	58020800 	.word	0x58020800
 8001708:	11110000 	.word	0x11110000
 800170c:	58021800 	.word	0x58021800

08001710 <__io_putchar>:
//{
//
//}
/** Usable for printf function **/
int __io_putchar(int ch)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart3, &*c, 1, 10);
 800171e:	f107 010c 	add.w	r1, r7, #12
 8001722:	230a      	movs	r3, #10
 8001724:	2201      	movs	r2, #1
 8001726:	4804      	ldr	r0, [pc, #16]	; (8001738 <__io_putchar+0x28>)
 8001728:	f007 faa2 	bl	8008c70 <HAL_UART_Transmit>
 return ch;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200002d0 	.word	0x200002d0

0800173c <_write>:

int _write(int file,char *ptr, int len)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e009      	b.n	8001762 <_write+0x26>
 {
 __io_putchar(*ptr++);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ffda 	bl	8001710 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	dbf1      	blt.n	800174e <_write+0x12>
 }
return len;
 800176a:	687b      	ldr	r3, [r7, #4]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a06      	ldr	r2, [pc, #24]	; (8001798 <HAL_UART_RxCpltCallback+0x24>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d104      	bne.n	800178e <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 8001784:	2204      	movs	r2, #4
 8001786:	4905      	ldr	r1, [pc, #20]	; (800179c <HAL_UART_RxCpltCallback+0x28>)
 8001788:	4803      	ldr	r0, [pc, #12]	; (8001798 <HAL_UART_RxCpltCallback+0x24>)
 800178a:	f007 fbdb 	bl	8008f44 <HAL_UART_Receive_IT>
	}
	if(huart == &huart4)
	{

	}
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002d0 	.word	0x200002d0
 800179c:	200008c0 	.word	0x200008c0

080017a0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
	{

	}
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]


}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* Timer12 Interrupt */
  if (htim == &htim12)
  {

  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e2:	b672      	cpsid	i
}
 80017e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <Error_Handler+0x8>

080017e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_MspInit+0x30>)
 80017f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017f4:	4a08      	ldr	r2, [pc, #32]	; (8001818 <HAL_MspInit+0x30>)
 80017f6:	f043 0302 	orr.w	r3, r3, #2
 80017fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_MspInit+0x30>)
 8001800:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	58024400 	.word	0x58024400

0800181c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <HAL_CRC_MspInit+0x3c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10e      	bne.n	800184c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_CRC_MspInit+0x40>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001834:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_CRC_MspInit+0x40>)
 8001836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800183a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_CRC_MspInit+0x40>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	58024c00 	.word	0x58024c00
 800185c:	58024400 	.word	0x58024400

08001860 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0b8      	sub	sp, #224	; 0xe0
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	22bc      	movs	r2, #188	; 0xbc
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f009 faf5 	bl	800ae70 <memset>
  if(hspi->Instance==SPI3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a25      	ldr	r2, [pc, #148]	; (8001920 <HAL_SPI_MspInit+0xc0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d142      	bne.n	8001916 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001896:	2300      	movs	r3, #0
 8001898:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fbea 	bl	8006078 <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80018aa:	f7ff ff98 	bl	80017de <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_SPI_MspInit+0xc4>)
 80018b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <HAL_SPI_MspInit+0xc4>)
 80018b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_SPI_MspInit+0xc4>)
 80018c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_SPI_MspInit+0xc4>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <HAL_SPI_MspInit+0xc4>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_SPI_MspInit+0xc4>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001904:	2306      	movs	r3, #6
 8001906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <HAL_SPI_MspInit+0xc8>)
 8001912:	f003 f9f7 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	37e0      	adds	r7, #224	; 0xe0
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40003c00 	.word	0x40003c00
 8001924:	58024400 	.word	0x58024400
 8001928:	58020800 	.word	0x58020800

0800192c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a55      	ldr	r2, [pc, #340]	; (8001a90 <HAL_TIM_Base_MspInit+0x164>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10f      	bne.n	800195e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800193e:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001944:	4a53      	ldr	r2, [pc, #332]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800194e:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800195c:	e094      	b.n	8001a88 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001966:	d10f      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001968:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 800196a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800196e:	4a49      	ldr	r2, [pc, #292]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001978:	4b46      	ldr	r3, [pc, #280]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 800197a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	6a3b      	ldr	r3, [r7, #32]
}
 8001986:	e07f      	b.n	8001a88 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a42      	ldr	r2, [pc, #264]	; (8001a98 <HAL_TIM_Base_MspInit+0x16c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10f      	bne.n	80019b2 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001992:	4b40      	ldr	r3, [pc, #256]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001998:	4a3e      	ldr	r2, [pc, #248]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 800199a:	f043 0302 	orr.w	r3, r3, #2
 800199e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019a2:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 80019a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	69fb      	ldr	r3, [r7, #28]
}
 80019b0:	e06a      	b.n	8001a88 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM4)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a39      	ldr	r2, [pc, #228]	; (8001a9c <HAL_TIM_Base_MspInit+0x170>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d10f      	bne.n	80019dc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019bc:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 80019be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019c2:	4a34      	ldr	r2, [pc, #208]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 80019ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	69bb      	ldr	r3, [r7, #24]
}
 80019da:	e055      	b.n	8001a88 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM5)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a2f      	ldr	r2, [pc, #188]	; (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d117      	bne.n	8001a16 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019e6:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 80019e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ec:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019f6:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 80019f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	2032      	movs	r0, #50	; 0x32
 8001a0a:	f000 fe38 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a0e:	2032      	movs	r0, #50	; 0x32
 8001a10:	f000 fe4f 	bl	80026b2 <HAL_NVIC_EnableIRQ>
}
 8001a14:	e038      	b.n	8001a88 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM12)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a22      	ldr	r2, [pc, #136]	; (8001aa4 <HAL_TIM_Base_MspInit+0x178>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d117      	bne.n	8001a50 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a26:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001a32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	202b      	movs	r0, #43	; 0x2b
 8001a44:	f000 fe1b 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001a48:	202b      	movs	r0, #43	; 0x2b
 8001a4a:	f000 fe32 	bl	80026b2 <HAL_NVIC_EnableIRQ>
}
 8001a4e:	e01b      	b.n	8001a88 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM15)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d116      	bne.n	8001a88 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a60:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_TIM_Base_MspInit+0x168>)
 8001a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2074      	movs	r0, #116	; 0x74
 8001a7e:	f000 fdfe 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001a82:	2074      	movs	r0, #116	; 0x74
 8001a84:	f000 fe15 	bl	80026b2 <HAL_NVIC_EnableIRQ>
}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40010000 	.word	0x40010000
 8001a94:	58024400 	.word	0x58024400
 8001a98:	40000400 	.word	0x40000400
 8001a9c:	40000800 	.word	0x40000800
 8001aa0:	40000c00 	.word	0x40000c00
 8001aa4:	40001800 	.word	0x40001800
 8001aa8:	40014000 	.word	0x40014000

08001aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a5e      	ldr	r2, [pc, #376]	; (8001c44 <HAL_TIM_MspPostInit+0x198>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d120      	bne.n	8001b10 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ace:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	4a5c      	ldr	r2, [pc, #368]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001ad6:	f043 0310 	orr.w	r3, r3, #16
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ade:	4b5a      	ldr	r3, [pc, #360]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001aec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	4850      	ldr	r0, [pc, #320]	; (8001c4c <HAL_TIM_MspPostInit+0x1a0>)
 8001b0a:	f003 f8fb 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001b0e:	e094      	b.n	8001c3a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b18:	d120      	bne.n	8001b5c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b4b      	ldr	r3, [pc, #300]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8001b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	483e      	ldr	r0, [pc, #248]	; (8001c50 <HAL_TIM_MspPostInit+0x1a4>)
 8001b56:	f003 f8d5 	bl	8004d04 <HAL_GPIO_Init>
}
 8001b5a:	e06e      	b.n	8001c3a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a3c      	ldr	r2, [pc, #240]	; (8001c54 <HAL_TIM_MspPostInit+0x1a8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d11f      	bne.n	8001ba6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	4a36      	ldr	r2, [pc, #216]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b76:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001b84:	2340      	movs	r3, #64	; 0x40
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b94:	2302      	movs	r3, #2
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	482e      	ldr	r0, [pc, #184]	; (8001c58 <HAL_TIM_MspPostInit+0x1ac>)
 8001ba0:	f003 f8b0 	bl	8004d04 <HAL_GPIO_Init>
}
 8001ba4:	e049      	b.n	8001c3a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a2c      	ldr	r2, [pc, #176]	; (8001c5c <HAL_TIM_MspPostInit+0x1b0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d120      	bne.n	8001bf2 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb6:	4a24      	ldr	r2, [pc, #144]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8001bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001be0:	2302      	movs	r3, #2
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	4819      	ldr	r0, [pc, #100]	; (8001c50 <HAL_TIM_MspPostInit+0x1a4>)
 8001bec:	f003 f88a 	bl	8004d04 <HAL_GPIO_Init>
}
 8001bf0:	e023      	b.n	8001c3a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <HAL_TIM_MspPostInit+0x1b4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d11e      	bne.n	8001c3a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001c04:	f043 0310 	orr.w	r3, r3, #16
 8001c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_TIM_MspPostInit+0x19c>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001c1a:	2340      	movs	r3, #64	; 0x40
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <HAL_TIM_MspPostInit+0x1a0>)
 8001c36:	f003 f865 	bl	8004d04 <HAL_GPIO_Init>
}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	; 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40010000 	.word	0x40010000
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	58021000 	.word	0x58021000
 8001c50:	58020400 	.word	0x58020400
 8001c54:	40000400 	.word	0x40000400
 8001c58:	58020000 	.word	0x58020000
 8001c5c:	40000800 	.word	0x40000800
 8001c60:	40014000 	.word	0x40014000

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0bc      	sub	sp, #240	; 0xf0
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c7c:	f107 0320 	add.w	r3, r7, #32
 8001c80:	22bc      	movs	r2, #188	; 0xbc
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f009 f8f3 	bl	800ae70 <memset>
  if(huart->Instance==UART4)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a67      	ldr	r2, [pc, #412]	; (8001e2c <HAL_UART_MspInit+0x1c8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	f040 80db 	bne.w	8001e4c <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c96:	2302      	movs	r3, #2
 8001c98:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f004 f9e7 	bl	8006078 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001cb0:	f7ff fd95 	bl	80017de <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001cb4:	4b5e      	ldr	r3, [pc, #376]	; (8001e30 <HAL_UART_MspInit+0x1cc>)
 8001cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cba:	4a5d      	ldr	r2, [pc, #372]	; (8001e30 <HAL_UART_MspInit+0x1cc>)
 8001cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cc4:	4b5a      	ldr	r3, [pc, #360]	; (8001e30 <HAL_UART_MspInit+0x1cc>)
 8001cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <HAL_UART_MspInit+0x1cc>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	4a55      	ldr	r2, [pc, #340]	; (8001e30 <HAL_UART_MspInit+0x1cc>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce2:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_UART_MspInit+0x1cc>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	; (8001e30 <HAL_UART_MspInit+0x1cc>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	4a4e      	ldr	r2, [pc, #312]	; (8001e30 <HAL_UART_MspInit+0x1cc>)
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d00:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <HAL_UART_MspInit+0x1cc>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d32:	4619      	mov	r1, r3
 8001d34:	483f      	ldr	r0, [pc, #252]	; (8001e34 <HAL_UART_MspInit+0x1d0>)
 8001d36:	f002 ffe5 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d52:	2308      	movs	r3, #8
 8001d54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4836      	ldr	r0, [pc, #216]	; (8001e38 <HAL_UART_MspInit+0x1d4>)
 8001d60:	f002 ffd0 	bl	8004d04 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001d64:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d66:	4a36      	ldr	r2, [pc, #216]	; (8001e40 <HAL_UART_MspInit+0x1dc>)
 8001d68:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001d6a:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d6c:	223f      	movs	r2, #63	; 0x3f
 8001d6e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d70:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d76:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d82:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001da2:	4826      	ldr	r0, [pc, #152]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001da4:	f000 fd8a 	bl	80028bc <HAL_DMA_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001dae:	f7ff fd16 	bl	80017de <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001db6:	67da      	str	r2, [r3, #124]	; 0x7c
 8001db8:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001dc0:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <HAL_UART_MspInit+0x1e4>)
 8001dc2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001dcc:	2240      	movs	r2, #64	; 0x40
 8001dce:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ddc:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001dfc:	4811      	ldr	r0, [pc, #68]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001dfe:	f000 fd5d 	bl	80028bc <HAL_DMA_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001e08:	f7ff fce9 	bl	80017de <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001e10:	679a      	str	r2, [r3, #120]	; 0x78
 8001e12:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2034      	movs	r0, #52	; 0x34
 8001e1e:	f000 fc2e 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e22:	2034      	movs	r0, #52	; 0x34
 8001e24:	f000 fc45 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e28:	e0bd      	b.n	8001fa6 <HAL_UART_MspInit+0x342>
 8001e2a:	bf00      	nop
 8001e2c:	40004c00 	.word	0x40004c00
 8001e30:	58024400 	.word	0x58024400
 8001e34:	58020000 	.word	0x58020000
 8001e38:	58020c00 	.word	0x58020c00
 8001e3c:	20000194 	.word	0x20000194
 8001e40:	40020410 	.word	0x40020410
 8001e44:	20000848 	.word	0x20000848
 8001e48:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a57      	ldr	r2, [pc, #348]	; (8001fb0 <HAL_UART_MspInit+0x34c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	f040 80a7 	bne.w	8001fa6 <HAL_UART_MspInit+0x342>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e62:	f107 0320 	add.w	r3, r7, #32
 8001e66:	4618      	mov	r0, r3
 8001e68:	f004 f906 	bl	8006078 <HAL_RCCEx_PeriphCLKConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001e72:	f7ff fcb4 	bl	80017de <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e76:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <HAL_UART_MspInit+0x350>)
 8001e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e7c:	4a4d      	ldr	r2, [pc, #308]	; (8001fb4 <HAL_UART_MspInit+0x350>)
 8001e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e86:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_UART_MspInit+0x350>)
 8001e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e94:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_UART_MspInit+0x350>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9a:	4a46      	ldr	r2, [pc, #280]	; (8001fb4 <HAL_UART_MspInit+0x350>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea4:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <HAL_UART_MspInit+0x350>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ecc:	2307      	movs	r3, #7
 8001ece:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4837      	ldr	r0, [pc, #220]	; (8001fb8 <HAL_UART_MspInit+0x354>)
 8001eda:	f002 ff13 	bl	8004d04 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001ee0:	4a37      	ldr	r2, [pc, #220]	; (8001fc0 <HAL_UART_MspInit+0x35c>)
 8001ee2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001ee6:	222d      	movs	r2, #45	; 0x2d
 8001ee8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef0:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001efe:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001f12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f16:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f1e:	4827      	ldr	r0, [pc, #156]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001f20:	f000 fccc 	bl	80028bc <HAL_DMA_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8001f2a:	f7ff fc58 	bl	80017de <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001f32:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f34:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <HAL_UART_MspInit+0x358>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f3c:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <HAL_UART_MspInit+0x364>)
 8001f3e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001f40:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f42:	222e      	movs	r2, #46	; 0x2e
 8001f44:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f48:	2240      	movs	r2, #64	; 0x40
 8001f4a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f58:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f72:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001f7a:	4812      	ldr	r0, [pc, #72]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f7c:	f000 fc9e 	bl	80028bc <HAL_DMA_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_UART_MspInit+0x326>
      Error_Handler();
 8001f86:	f7ff fc2a 	bl	80017de <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f8e:	679a      	str	r2, [r3, #120]	; 0x78
 8001f90:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <HAL_UART_MspInit+0x360>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2027      	movs	r0, #39	; 0x27
 8001f9c:	f000 fb6f 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fa0:	2027      	movs	r0, #39	; 0x27
 8001fa2:	f000 fb86 	bl	80026b2 <HAL_NVIC_EnableIRQ>
}
 8001fa6:	bf00      	nop
 8001fa8:	37f0      	adds	r7, #240	; 0xf0
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40004800 	.word	0x40004800
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58020c00 	.word	0x58020c00
 8001fbc:	20000258 	.word	0x20000258
 8001fc0:	40020028 	.word	0x40020028
 8001fc4:	2000044c 	.word	0x2000044c
 8001fc8:	40020040 	.word	0x40020040

08001fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <NMI_Handler+0x4>

08001fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <HardFault_Handler+0x4>

08001fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <MemManage_Handler+0x4>

08001fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <BusFault_Handler+0x4>

08001fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <UsageFault_Handler+0x4>

08001fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002018:	f000 fa2a 	bl	8002470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <DMA1_Stream1_IRQHandler+0x10>)
 8002026:	f001 fd07 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000258 	.word	0x20000258

08002034 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <DMA1_Stream2_IRQHandler+0x10>)
 800203a:	f001 fcfd 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000044c 	.word	0x2000044c

08002048 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800204c:	2040      	movs	r0, #64	; 0x40
 800204e:	f003 f822 	bl	8005096 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002052:	2080      	movs	r0, #128	; 0x80
 8002054:	f003 f81f 	bl	8005096 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <USART3_IRQHandler+0x10>)
 8002062:	f006 ffb5 	bl	8008fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200002d0 	.word	0x200002d0

08002070 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002074:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002078:	f003 f80d 	bl	8005096 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800207c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002080:	f003 f809 	bl	8005096 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002084:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002088:	f003 f805 	bl	8005096 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800208c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002090:	f003 f801 	bl	8005096 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800209e:	f005 fd22 	bl	8007ae6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200007fc 	.word	0x200007fc

080020ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <TIM5_IRQHandler+0x10>)
 80020b2:	f005 fd18 	bl	8007ae6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200004c4 	.word	0x200004c4

080020c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <UART4_IRQHandler+0x10>)
 80020c6:	f006 ff83 	bl	8008fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200006a8 	.word	0x200006a8

080020d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <DMA2_Stream0_IRQHandler+0x10>)
 80020da:	f001 fcad 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000194 	.word	0x20000194

080020e8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <DMA2_Stream1_IRQHandler+0x10>)
 80020ee:	f001 fca3 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000848 	.word	0x20000848

080020fc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <TIM15_IRQHandler+0x10>)
 8002102:	f005 fcf0 	bl	8007ae6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200003dc 	.word	0x200003dc

08002110 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e00a      	b.n	8002138 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002122:	f3af 8000 	nop.w
 8002126:	4601      	mov	r1, r0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf0      	blt.n	8002122 <_read+0x12>
	}

return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_close>:
	}
	return len;
}

int _close(int file)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
	return -1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002172:	605a      	str	r2, [r3, #4]
	return 0;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_isatty>:

int _isatty(int file)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
	return 1;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
	return 0;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021bc:	4a14      	ldr	r2, [pc, #80]	; (8002210 <_sbrk+0x5c>)
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <_sbrk+0x60>)
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <_sbrk+0x64>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <_sbrk+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d207      	bcs.n	80021f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e4:	f008 fe1a 	bl	800ae1c <__errno>
 80021e8:	4603      	mov	r3, r0
 80021ea:	220c      	movs	r2, #12
 80021ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	e009      	b.n	8002208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <_sbrk+0x64>)
 8002204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20020000 	.word	0x20020000
 8002214:	00000400 	.word	0x00000400
 8002218:	20000098 	.word	0x20000098
 800221c:	200008d8 	.word	0x200008d8

08002220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002224:	4b39      	ldr	r3, [pc, #228]	; (800230c <SystemInit+0xec>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	4a38      	ldr	r2, [pc, #224]	; (800230c <SystemInit+0xec>)
 800222c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <SystemInit+0xf0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	2b06      	cmp	r3, #6
 800223e:	d807      	bhi.n	8002250 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002240:	4b33      	ldr	r3, [pc, #204]	; (8002310 <SystemInit+0xf0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 030f 	bic.w	r3, r3, #15
 8002248:	4a31      	ldr	r2, [pc, #196]	; (8002310 <SystemInit+0xf0>)
 800224a:	f043 0307 	orr.w	r3, r3, #7
 800224e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002250:	4b30      	ldr	r3, [pc, #192]	; (8002314 <SystemInit+0xf4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <SystemInit+0xf4>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <SystemInit+0xf4>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002262:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <SystemInit+0xf4>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	492b      	ldr	r1, [pc, #172]	; (8002314 <SystemInit+0xf4>)
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <SystemInit+0xf8>)
 800226a:	4013      	ands	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800226e:	4b28      	ldr	r3, [pc, #160]	; (8002310 <SystemInit+0xf0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <SystemInit+0xf0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 030f 	bic.w	r3, r3, #15
 8002282:	4a23      	ldr	r2, [pc, #140]	; (8002310 <SystemInit+0xf0>)
 8002284:	f043 0307 	orr.w	r3, r3, #7
 8002288:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <SystemInit+0xf4>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002290:	4b20      	ldr	r3, [pc, #128]	; (8002314 <SystemInit+0xf4>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <SystemInit+0xf4>)
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <SystemInit+0xf4>)
 800229e:	4a1f      	ldr	r2, [pc, #124]	; (800231c <SystemInit+0xfc>)
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <SystemInit+0xf4>)
 80022a4:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <SystemInit+0x100>)
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <SystemInit+0xf4>)
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <SystemInit+0x104>)
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <SystemInit+0xf4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <SystemInit+0xf4>)
 80022b6:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <SystemInit+0x104>)
 80022b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <SystemInit+0xf4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <SystemInit+0xf4>)
 80022c2:	4a18      	ldr	r2, [pc, #96]	; (8002324 <SystemInit+0x104>)
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <SystemInit+0xf4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <SystemInit+0xf4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <SystemInit+0xf4>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <SystemInit+0xf4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <SystemInit+0x108>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <SystemInit+0x10c>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ea:	d202      	bcs.n	80022f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <SystemInit+0x110>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <SystemInit+0x114>)
 80022f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022f8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <SystemInit+0xec>)
 80022fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002300:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00
 8002310:	52002000 	.word	0x52002000
 8002314:	58024400 	.word	0x58024400
 8002318:	eaf6ed7f 	.word	0xeaf6ed7f
 800231c:	02020200 	.word	0x02020200
 8002320:	01ff0000 	.word	0x01ff0000
 8002324:	01010280 	.word	0x01010280
 8002328:	5c001000 	.word	0x5c001000
 800232c:	ffff0000 	.word	0xffff0000
 8002330:	51008108 	.word	0x51008108
 8002334:	52004000 	.word	0x52004000

08002338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002370 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800233c:	f7ff ff70 	bl	8002220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002342:	490d      	ldr	r1, [pc, #52]	; (8002378 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002358:	4c0a      	ldr	r4, [pc, #40]	; (8002384 <LoopFillZerobss+0x22>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002366:	f008 fd5f 	bl	800ae28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236a:	f7fe fa47 	bl	80007fc <main>
  bx  lr
 800236e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800237c:	0800be30 	.word	0x0800be30
  ldr r2, =_sbss
 8002380:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002384:	200008d8 	.word	0x200008d8

08002388 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <ADC3_IRQHandler>
	...

0800238c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002392:	2003      	movs	r0, #3
 8002394:	f000 f968 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002398:	f003 fc98 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_Init+0x68>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	4913      	ldr	r1, [pc, #76]	; (80023f8 <HAL_Init+0x6c>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
 80023b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_Init+0x68>)
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <HAL_Init+0x6c>)
 80023c0:	5cd3      	ldrb	r3, [r2, r3]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <HAL_Init+0x70>)
 80023ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <HAL_Init+0x74>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 f814 	bl	8002404 <HAL_InitTick>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e002      	b.n	80023ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023e6:	f7ff f9ff 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	58024400 	.word	0x58024400
 80023f8:	0800bd48 	.word	0x0800bd48
 80023fc:	20000004 	.word	0x20000004
 8002400:	20000000 	.word	0x20000000

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_InitTick+0x60>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e021      	b.n	800245c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_InitTick+0x64>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_InitTick+0x60>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002426:	fbb3 f3f1 	udiv	r3, r3, r1
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f94d 	bl	80026ce <HAL_SYSTICK_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e00e      	b.n	800245c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b0f      	cmp	r3, #15
 8002442:	d80a      	bhi.n	800245a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002444:	2200      	movs	r2, #0
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f000 f917 	bl	800267e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002450:	4a06      	ldr	r2, [pc, #24]	; (800246c <HAL_InitTick+0x68>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000000c 	.word	0x2000000c
 8002468:	20000000 	.word	0x20000000
 800246c:	20000008 	.word	0x20000008

08002470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_IncTick+0x20>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_IncTick+0x24>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4413      	add	r3, r2
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_IncTick+0x24>)
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	2000000c 	.word	0x2000000c
 8002494:	200008c4 	.word	0x200008c4

08002498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return uwTick;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_GetTick+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	200008c4 	.word	0x200008c4

080024b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_GetREVID+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0c1b      	lsrs	r3, r3, #16
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	5c001000 	.word	0x5c001000

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <__NVIC_SetPriorityGrouping+0x40>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f6:	4a04      	ldr	r2, [pc, #16]	; (8002508 <__NVIC_SetPriorityGrouping+0x40>)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	60d3      	str	r3, [r2, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00
 800250c:	05fa0000 	.word	0x05fa0000

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800268c:	f7ff ff40 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f7ff ff90 	bl	80025bc <NVIC_EncodePriority>
 800269c:	4602      	mov	r2, r0
 800269e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff5f 	bl	8002568 <__NVIC_SetPriority>
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff33 	bl	800252c <__NVIC_EnableIRQ>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffa4 	bl	8002624 <SysTick_Config>
 80026dc:	4603      	mov	r3, r0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e054      	b.n	80027a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7f5b      	ldrb	r3, [r3, #29]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff f886 	bl	800181c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a22      	ldr	r2, [pc, #136]	; (80027ac <HAL_CRC_Init+0xc4>)
 8002724:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0218 	bic.w	r2, r2, #24
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	e00c      	b.n	8002752 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6899      	ldr	r1, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	461a      	mov	r2, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f834 	bl	80027b0 <HAL_CRCEx_Polynomial_Set>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e028      	b.n	80027a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	795b      	ldrb	r3, [r3, #5]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f04f 32ff 	mov.w	r2, #4294967295
 8002762:	611a      	str	r2, [r3, #16]
 8002764:	e004      	b.n	8002770 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6912      	ldr	r2, [r2, #16]
 800276e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	04c11db7 	.word	0x04c11db7

080027b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80027c0:	231f      	movs	r3, #31
 80027c2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80027c4:	bf00      	nop
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1e5a      	subs	r2, r3, #1
 80027ca:	613a      	str	r2, [r7, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <HAL_CRCEx_Polynomial_Set+0x34>
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_CRCEx_Polynomial_Set+0x16>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b18      	cmp	r3, #24
 80027e8:	d846      	bhi.n	8002878 <HAL_CRCEx_Polynomial_Set+0xc8>
 80027ea:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	0800287f 	.word	0x0800287f
 80027f4:	08002879 	.word	0x08002879
 80027f8:	08002879 	.word	0x08002879
 80027fc:	08002879 	.word	0x08002879
 8002800:	08002879 	.word	0x08002879
 8002804:	08002879 	.word	0x08002879
 8002808:	08002879 	.word	0x08002879
 800280c:	08002879 	.word	0x08002879
 8002810:	0800286d 	.word	0x0800286d
 8002814:	08002879 	.word	0x08002879
 8002818:	08002879 	.word	0x08002879
 800281c:	08002879 	.word	0x08002879
 8002820:	08002879 	.word	0x08002879
 8002824:	08002879 	.word	0x08002879
 8002828:	08002879 	.word	0x08002879
 800282c:	08002879 	.word	0x08002879
 8002830:	08002861 	.word	0x08002861
 8002834:	08002879 	.word	0x08002879
 8002838:	08002879 	.word	0x08002879
 800283c:	08002879 	.word	0x08002879
 8002840:	08002879 	.word	0x08002879
 8002844:	08002879 	.word	0x08002879
 8002848:	08002879 	.word	0x08002879
 800284c:	08002879 	.word	0x08002879
 8002850:	08002855 	.word	0x08002855
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2b06      	cmp	r3, #6
 8002858:	d913      	bls.n	8002882 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800285e:	e010      	b.n	8002882 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b07      	cmp	r3, #7
 8002864:	d90f      	bls.n	8002886 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800286a:	e00c      	b.n	8002886 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	d90b      	bls.n	800288a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002876:	e008      	b.n	800288a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	75fb      	strb	r3, [r7, #23]
      break;
 800287c:	e006      	b.n	800288c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800287e:	bf00      	nop
 8002880:	e004      	b.n	800288c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002882:	bf00      	nop
 8002884:	e002      	b.n	800288c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002886:	bf00      	nop
 8002888:	e000      	b.n	800288c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800288a:	bf00      	nop
  }
  if (status == HAL_OK)
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10d      	bne.n	80028ae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 0118 	bic.w	r1, r3, #24
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff fde8 	bl	8002498 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e316      	b.n	8002f02 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a66      	ldr	r2, [pc, #408]	; (8002a74 <HAL_DMA_Init+0x1b8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04a      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a65      	ldr	r2, [pc, #404]	; (8002a78 <HAL_DMA_Init+0x1bc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d045      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a63      	ldr	r2, [pc, #396]	; (8002a7c <HAL_DMA_Init+0x1c0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d040      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a62      	ldr	r2, [pc, #392]	; (8002a80 <HAL_DMA_Init+0x1c4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d03b      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a60      	ldr	r2, [pc, #384]	; (8002a84 <HAL_DMA_Init+0x1c8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d036      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5f      	ldr	r2, [pc, #380]	; (8002a88 <HAL_DMA_Init+0x1cc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d031      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5d      	ldr	r2, [pc, #372]	; (8002a8c <HAL_DMA_Init+0x1d0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02c      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_DMA_Init+0x1d4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d027      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a5a      	ldr	r2, [pc, #360]	; (8002a94 <HAL_DMA_Init+0x1d8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d022      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a59      	ldr	r2, [pc, #356]	; (8002a98 <HAL_DMA_Init+0x1dc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d01d      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a57      	ldr	r2, [pc, #348]	; (8002a9c <HAL_DMA_Init+0x1e0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d018      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a56      	ldr	r2, [pc, #344]	; (8002aa0 <HAL_DMA_Init+0x1e4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a54      	ldr	r2, [pc, #336]	; (8002aa4 <HAL_DMA_Init+0x1e8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a53      	ldr	r2, [pc, #332]	; (8002aa8 <HAL_DMA_Init+0x1ec>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a51      	ldr	r2, [pc, #324]	; (8002aac <HAL_DMA_Init+0x1f0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_DMA_Init+0xb8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <HAL_DMA_Init+0x1f4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_DMA_Init+0xbc>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_DMA_Init+0xbe>
 8002978:	2300      	movs	r3, #0
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 813b 	beq.w	8002bf6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a37      	ldr	r2, [pc, #220]	; (8002a74 <HAL_DMA_Init+0x1b8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d04a      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a36      	ldr	r2, [pc, #216]	; (8002a78 <HAL_DMA_Init+0x1bc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d045      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a34      	ldr	r2, [pc, #208]	; (8002a7c <HAL_DMA_Init+0x1c0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d040      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a33      	ldr	r2, [pc, #204]	; (8002a80 <HAL_DMA_Init+0x1c4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d03b      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a31      	ldr	r2, [pc, #196]	; (8002a84 <HAL_DMA_Init+0x1c8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d036      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a30      	ldr	r2, [pc, #192]	; (8002a88 <HAL_DMA_Init+0x1cc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d031      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2e      	ldr	r2, [pc, #184]	; (8002a8c <HAL_DMA_Init+0x1d0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d02c      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <HAL_DMA_Init+0x1d4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d027      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2b      	ldr	r2, [pc, #172]	; (8002a94 <HAL_DMA_Init+0x1d8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d022      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2a      	ldr	r2, [pc, #168]	; (8002a98 <HAL_DMA_Init+0x1dc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d01d      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <HAL_DMA_Init+0x1e0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d018      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <HAL_DMA_Init+0x1e4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d013      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a25      	ldr	r2, [pc, #148]	; (8002aa4 <HAL_DMA_Init+0x1e8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00e      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <HAL_DMA_Init+0x1ec>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a22      	ldr	r2, [pc, #136]	; (8002aac <HAL_DMA_Init+0x1f0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_DMA_Init+0x174>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <HAL_DMA_Init+0x1f4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d108      	bne.n	8002a42 <HAL_DMA_Init+0x186>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e007      	b.n	8002a52 <HAL_DMA_Init+0x196>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a52:	e02f      	b.n	8002ab4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a54:	f7ff fd20 	bl	8002498 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d928      	bls.n	8002ab4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e246      	b.n	8002f02 <HAL_DMA_Init+0x646>
 8002a74:	40020010 	.word	0x40020010
 8002a78:	40020028 	.word	0x40020028
 8002a7c:	40020040 	.word	0x40020040
 8002a80:	40020058 	.word	0x40020058
 8002a84:	40020070 	.word	0x40020070
 8002a88:	40020088 	.word	0x40020088
 8002a8c:	400200a0 	.word	0x400200a0
 8002a90:	400200b8 	.word	0x400200b8
 8002a94:	40020410 	.word	0x40020410
 8002a98:	40020428 	.word	0x40020428
 8002a9c:	40020440 	.word	0x40020440
 8002aa0:	40020458 	.word	0x40020458
 8002aa4:	40020470 	.word	0x40020470
 8002aa8:	40020488 	.word	0x40020488
 8002aac:	400204a0 	.word	0x400204a0
 8002ab0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1c8      	bne.n	8002a54 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4b83      	ldr	r3, [pc, #524]	; (8002cdc <HAL_DMA_Init+0x420>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ada:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d107      	bne.n	8002b18 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	4313      	orrs	r3, r2
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002b18:	4b71      	ldr	r3, [pc, #452]	; (8002ce0 <HAL_DMA_Init+0x424>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b71      	ldr	r3, [pc, #452]	; (8002ce4 <HAL_DMA_Init+0x428>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b24:	d328      	bcc.n	8002b78 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b28      	cmp	r3, #40	; 0x28
 8002b2c:	d903      	bls.n	8002b36 <HAL_DMA_Init+0x27a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b2e      	cmp	r3, #46	; 0x2e
 8002b34:	d917      	bls.n	8002b66 <HAL_DMA_Init+0x2aa>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8002b3c:	d903      	bls.n	8002b46 <HAL_DMA_Init+0x28a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b42      	cmp	r3, #66	; 0x42
 8002b44:	d90f      	bls.n	8002b66 <HAL_DMA_Init+0x2aa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b46      	cmp	r3, #70	; 0x46
 8002b4c:	d903      	bls.n	8002b56 <HAL_DMA_Init+0x29a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b48      	cmp	r3, #72	; 0x48
 8002b54:	d907      	bls.n	8002b66 <HAL_DMA_Init+0x2aa>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b4e      	cmp	r3, #78	; 0x4e
 8002b5c:	d905      	bls.n	8002b6a <HAL_DMA_Init+0x2ae>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b52      	cmp	r3, #82	; 0x52
 8002b64:	d801      	bhi.n	8002b6a <HAL_DMA_Init+0x2ae>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_DMA_Init+0x2b0>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b76:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f023 0307 	bic.w	r3, r3, #7
 8002b8e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d117      	bne.n	8002bd2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f001 ff1b 	bl	80049f0 <DMA_CheckFifoParam>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2240      	movs	r2, #64	; 0x40
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e197      	b.n	8002f02 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f001 fe56 	bl	800488c <DMA_CalcBaseAndBitshift>
 8002be0:	4603      	mov	r3, r0
 8002be2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	223f      	movs	r2, #63	; 0x3f
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	e0cd      	b.n	8002d92 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ce8 <HAL_DMA_Init+0x42c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_Init+0x38a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a39      	ldr	r2, [pc, #228]	; (8002cec <HAL_DMA_Init+0x430>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01d      	beq.n	8002c46 <HAL_DMA_Init+0x38a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a38      	ldr	r2, [pc, #224]	; (8002cf0 <HAL_DMA_Init+0x434>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d018      	beq.n	8002c46 <HAL_DMA_Init+0x38a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a36      	ldr	r2, [pc, #216]	; (8002cf4 <HAL_DMA_Init+0x438>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_DMA_Init+0x38a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a35      	ldr	r2, [pc, #212]	; (8002cf8 <HAL_DMA_Init+0x43c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <HAL_DMA_Init+0x38a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <HAL_DMA_Init+0x440>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_DMA_Init+0x38a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <HAL_DMA_Init+0x444>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_DMA_Init+0x38a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a30      	ldr	r2, [pc, #192]	; (8002d04 <HAL_DMA_Init+0x448>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Init+0x38e>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_DMA_Init+0x390>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8097 	beq.w	8002d80 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a24      	ldr	r2, [pc, #144]	; (8002ce8 <HAL_DMA_Init+0x42c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d021      	beq.n	8002ca0 <HAL_DMA_Init+0x3e4>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a22      	ldr	r2, [pc, #136]	; (8002cec <HAL_DMA_Init+0x430>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01c      	beq.n	8002ca0 <HAL_DMA_Init+0x3e4>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <HAL_DMA_Init+0x434>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d017      	beq.n	8002ca0 <HAL_DMA_Init+0x3e4>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_DMA_Init+0x438>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d012      	beq.n	8002ca0 <HAL_DMA_Init+0x3e4>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <HAL_DMA_Init+0x43c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00d      	beq.n	8002ca0 <HAL_DMA_Init+0x3e4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <HAL_DMA_Init+0x440>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d008      	beq.n	8002ca0 <HAL_DMA_Init+0x3e4>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <HAL_DMA_Init+0x444>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <HAL_DMA_Init+0x3e4>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <HAL_DMA_Init+0x448>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2202      	movs	r2, #2
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_DMA_Init+0x44c>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d020      	beq.n	8002d0c <HAL_DMA_Init+0x450>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b80      	cmp	r3, #128	; 0x80
 8002cd0:	d102      	bne.n	8002cd8 <HAL_DMA_Init+0x41c>
 8002cd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cd6:	e01a      	b.n	8002d0e <HAL_DMA_Init+0x452>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e018      	b.n	8002d0e <HAL_DMA_Init+0x452>
 8002cdc:	fe10803f 	.word	0xfe10803f
 8002ce0:	5c001000 	.word	0x5c001000
 8002ce4:	ffff0000 	.word	0xffff0000
 8002ce8:	58025408 	.word	0x58025408
 8002cec:	5802541c 	.word	0x5802541c
 8002cf0:	58025430 	.word	0x58025430
 8002cf4:	58025444 	.word	0x58025444
 8002cf8:	58025458 	.word	0x58025458
 8002cfc:	5802546c 	.word	0x5802546c
 8002d00:	58025480 	.word	0x58025480
 8002d04:	58025494 	.word	0x58025494
 8002d08:	fffe000f 	.word	0xfffe000f
 8002d0c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68d2      	ldr	r2, [r2, #12]
 8002d12:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d3c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b6e      	ldr	r3, [pc, #440]	; (8002f0c <HAL_DMA_Init+0x650>)
 8002d54:	4413      	add	r3, r2
 8002d56:	4a6e      	ldr	r2, [pc, #440]	; (8002f10 <HAL_DMA_Init+0x654>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	009a      	lsls	r2, r3, #2
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f001 fd91 	bl	800488c <DMA_CalcBaseAndBitshift>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2201      	movs	r2, #1
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	e008      	b.n	8002d92 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2240      	movs	r2, #64	; 0x40
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0b7      	b.n	8002f02 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5f      	ldr	r2, [pc, #380]	; (8002f14 <HAL_DMA_Init+0x658>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d072      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5d      	ldr	r2, [pc, #372]	; (8002f18 <HAL_DMA_Init+0x65c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d06d      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5c      	ldr	r2, [pc, #368]	; (8002f1c <HAL_DMA_Init+0x660>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d068      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5a      	ldr	r2, [pc, #360]	; (8002f20 <HAL_DMA_Init+0x664>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d063      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a59      	ldr	r2, [pc, #356]	; (8002f24 <HAL_DMA_Init+0x668>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d05e      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a57      	ldr	r2, [pc, #348]	; (8002f28 <HAL_DMA_Init+0x66c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d059      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a56      	ldr	r2, [pc, #344]	; (8002f2c <HAL_DMA_Init+0x670>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d054      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a54      	ldr	r2, [pc, #336]	; (8002f30 <HAL_DMA_Init+0x674>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d04f      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a53      	ldr	r2, [pc, #332]	; (8002f34 <HAL_DMA_Init+0x678>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04a      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a51      	ldr	r2, [pc, #324]	; (8002f38 <HAL_DMA_Init+0x67c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d045      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_DMA_Init+0x680>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d040      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a4e      	ldr	r2, [pc, #312]	; (8002f40 <HAL_DMA_Init+0x684>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d03b      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a4d      	ldr	r2, [pc, #308]	; (8002f44 <HAL_DMA_Init+0x688>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d036      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <HAL_DMA_Init+0x68c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d031      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4a      	ldr	r2, [pc, #296]	; (8002f4c <HAL_DMA_Init+0x690>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d02c      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a48      	ldr	r2, [pc, #288]	; (8002f50 <HAL_DMA_Init+0x694>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d027      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a47      	ldr	r2, [pc, #284]	; (8002f54 <HAL_DMA_Init+0x698>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a45      	ldr	r2, [pc, #276]	; (8002f58 <HAL_DMA_Init+0x69c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <HAL_DMA_Init+0x6a0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d018      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a42      	ldr	r2, [pc, #264]	; (8002f60 <HAL_DMA_Init+0x6a4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a41      	ldr	r2, [pc, #260]	; (8002f64 <HAL_DMA_Init+0x6a8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00e      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a3f      	ldr	r2, [pc, #252]	; (8002f68 <HAL_DMA_Init+0x6ac>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a3e      	ldr	r2, [pc, #248]	; (8002f6c <HAL_DMA_Init+0x6b0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_DMA_Init+0x5c6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <HAL_DMA_Init+0x6b4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_DMA_Init+0x5ca>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_DMA_Init+0x5cc>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d032      	beq.n	8002ef2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f001 fe2b 	bl	8004ae8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d102      	bne.n	8002ea0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002eb4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_DMA_Init+0x624>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d80c      	bhi.n	8002ee0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f001 fea8 	bl	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	e008      	b.n	8002ef2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	a7fdabf8 	.word	0xa7fdabf8
 8002f10:	cccccccd 	.word	0xcccccccd
 8002f14:	40020010 	.word	0x40020010
 8002f18:	40020028 	.word	0x40020028
 8002f1c:	40020040 	.word	0x40020040
 8002f20:	40020058 	.word	0x40020058
 8002f24:	40020070 	.word	0x40020070
 8002f28:	40020088 	.word	0x40020088
 8002f2c:	400200a0 	.word	0x400200a0
 8002f30:	400200b8 	.word	0x400200b8
 8002f34:	40020410 	.word	0x40020410
 8002f38:	40020428 	.word	0x40020428
 8002f3c:	40020440 	.word	0x40020440
 8002f40:	40020458 	.word	0x40020458
 8002f44:	40020470 	.word	0x40020470
 8002f48:	40020488 	.word	0x40020488
 8002f4c:	400204a0 	.word	0x400204a0
 8002f50:	400204b8 	.word	0x400204b8
 8002f54:	58025408 	.word	0x58025408
 8002f58:	5802541c 	.word	0x5802541c
 8002f5c:	58025430 	.word	0x58025430
 8002f60:	58025444 	.word	0x58025444
 8002f64:	58025458 	.word	0x58025458
 8002f68:	5802546c 	.word	0x5802546c
 8002f6c:	58025480 	.word	0x58025480
 8002f70:	58025494 	.word	0x58025494

08002f74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7ff fa8c 	bl	8002498 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e2dc      	b.n	8003546 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d008      	beq.n	8002faa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e2cd      	b.n	8003546 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a76      	ldr	r2, [pc, #472]	; (8003188 <HAL_DMA_Abort+0x214>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04a      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a74      	ldr	r2, [pc, #464]	; (800318c <HAL_DMA_Abort+0x218>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d045      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a73      	ldr	r2, [pc, #460]	; (8003190 <HAL_DMA_Abort+0x21c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a71      	ldr	r2, [pc, #452]	; (8003194 <HAL_DMA_Abort+0x220>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d03b      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a70      	ldr	r2, [pc, #448]	; (8003198 <HAL_DMA_Abort+0x224>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d036      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a6e      	ldr	r2, [pc, #440]	; (800319c <HAL_DMA_Abort+0x228>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6d      	ldr	r2, [pc, #436]	; (80031a0 <HAL_DMA_Abort+0x22c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d02c      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a6b      	ldr	r2, [pc, #428]	; (80031a4 <HAL_DMA_Abort+0x230>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d027      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a6a      	ldr	r2, [pc, #424]	; (80031a8 <HAL_DMA_Abort+0x234>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a68      	ldr	r2, [pc, #416]	; (80031ac <HAL_DMA_Abort+0x238>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a67      	ldr	r2, [pc, #412]	; (80031b0 <HAL_DMA_Abort+0x23c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a65      	ldr	r2, [pc, #404]	; (80031b4 <HAL_DMA_Abort+0x240>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a64      	ldr	r2, [pc, #400]	; (80031b8 <HAL_DMA_Abort+0x244>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a62      	ldr	r2, [pc, #392]	; (80031bc <HAL_DMA_Abort+0x248>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a61      	ldr	r2, [pc, #388]	; (80031c0 <HAL_DMA_Abort+0x24c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_DMA_Abort+0xd6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5f      	ldr	r2, [pc, #380]	; (80031c4 <HAL_DMA_Abort+0x250>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d101      	bne.n	800304e <HAL_DMA_Abort+0xda>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_DMA_Abort+0xdc>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 021e 	bic.w	r2, r2, #30
 8003062:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003072:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	e00a      	b.n	8003092 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 020e 	bic.w	r2, r2, #14
 800308a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a3c      	ldr	r2, [pc, #240]	; (8003188 <HAL_DMA_Abort+0x214>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d072      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3a      	ldr	r2, [pc, #232]	; (800318c <HAL_DMA_Abort+0x218>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d06d      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a39      	ldr	r2, [pc, #228]	; (8003190 <HAL_DMA_Abort+0x21c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d068      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a37      	ldr	r2, [pc, #220]	; (8003194 <HAL_DMA_Abort+0x220>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d063      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a36      	ldr	r2, [pc, #216]	; (8003198 <HAL_DMA_Abort+0x224>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d05e      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a34      	ldr	r2, [pc, #208]	; (800319c <HAL_DMA_Abort+0x228>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d059      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a33      	ldr	r2, [pc, #204]	; (80031a0 <HAL_DMA_Abort+0x22c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d054      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_DMA_Abort+0x230>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d04f      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <HAL_DMA_Abort+0x234>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d04a      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2e      	ldr	r2, [pc, #184]	; (80031ac <HAL_DMA_Abort+0x238>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d045      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2d      	ldr	r2, [pc, #180]	; (80031b0 <HAL_DMA_Abort+0x23c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d040      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <HAL_DMA_Abort+0x240>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d03b      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <HAL_DMA_Abort+0x244>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d036      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a28      	ldr	r2, [pc, #160]	; (80031bc <HAL_DMA_Abort+0x248>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d031      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <HAL_DMA_Abort+0x24c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d02c      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <HAL_DMA_Abort+0x250>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d027      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <HAL_DMA_Abort+0x254>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d022      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <HAL_DMA_Abort+0x258>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01d      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_DMA_Abort+0x25c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d018      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <HAL_DMA_Abort+0x260>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <HAL_DMA_Abort+0x264>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00e      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_DMA_Abort+0x268>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d009      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1b      	ldr	r2, [pc, #108]	; (80031e0 <HAL_DMA_Abort+0x26c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <HAL_DMA_Abort+0x20e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <HAL_DMA_Abort+0x270>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d132      	bne.n	80031e8 <HAL_DMA_Abort+0x274>
 8003182:	2301      	movs	r3, #1
 8003184:	e031      	b.n	80031ea <HAL_DMA_Abort+0x276>
 8003186:	bf00      	nop
 8003188:	40020010 	.word	0x40020010
 800318c:	40020028 	.word	0x40020028
 8003190:	40020040 	.word	0x40020040
 8003194:	40020058 	.word	0x40020058
 8003198:	40020070 	.word	0x40020070
 800319c:	40020088 	.word	0x40020088
 80031a0:	400200a0 	.word	0x400200a0
 80031a4:	400200b8 	.word	0x400200b8
 80031a8:	40020410 	.word	0x40020410
 80031ac:	40020428 	.word	0x40020428
 80031b0:	40020440 	.word	0x40020440
 80031b4:	40020458 	.word	0x40020458
 80031b8:	40020470 	.word	0x40020470
 80031bc:	40020488 	.word	0x40020488
 80031c0:	400204a0 	.word	0x400204a0
 80031c4:	400204b8 	.word	0x400204b8
 80031c8:	58025408 	.word	0x58025408
 80031cc:	5802541c 	.word	0x5802541c
 80031d0:	58025430 	.word	0x58025430
 80031d4:	58025444 	.word	0x58025444
 80031d8:	58025458 	.word	0x58025458
 80031dc:	5802546c 	.word	0x5802546c
 80031e0:	58025480 	.word	0x58025480
 80031e4:	58025494 	.word	0x58025494
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a6d      	ldr	r2, [pc, #436]	; (80033b8 <HAL_DMA_Abort+0x444>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d04a      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a6b      	ldr	r2, [pc, #428]	; (80033bc <HAL_DMA_Abort+0x448>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d045      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a6a      	ldr	r2, [pc, #424]	; (80033c0 <HAL_DMA_Abort+0x44c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d040      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a68      	ldr	r2, [pc, #416]	; (80033c4 <HAL_DMA_Abort+0x450>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d03b      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a67      	ldr	r2, [pc, #412]	; (80033c8 <HAL_DMA_Abort+0x454>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d036      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a65      	ldr	r2, [pc, #404]	; (80033cc <HAL_DMA_Abort+0x458>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d031      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a64      	ldr	r2, [pc, #400]	; (80033d0 <HAL_DMA_Abort+0x45c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d02c      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a62      	ldr	r2, [pc, #392]	; (80033d4 <HAL_DMA_Abort+0x460>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d027      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a61      	ldr	r2, [pc, #388]	; (80033d8 <HAL_DMA_Abort+0x464>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5f      	ldr	r2, [pc, #380]	; (80033dc <HAL_DMA_Abort+0x468>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a5e      	ldr	r2, [pc, #376]	; (80033e0 <HAL_DMA_Abort+0x46c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d018      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a5c      	ldr	r2, [pc, #368]	; (80033e4 <HAL_DMA_Abort+0x470>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a5b      	ldr	r2, [pc, #364]	; (80033e8 <HAL_DMA_Abort+0x474>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a59      	ldr	r2, [pc, #356]	; (80033ec <HAL_DMA_Abort+0x478>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <HAL_DMA_Abort+0x47c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_DMA_Abort+0x32a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a56      	ldr	r2, [pc, #344]	; (80033f4 <HAL_DMA_Abort+0x480>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <HAL_DMA_Abort+0x33c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e007      	b.n	80032c0 <HAL_DMA_Abort+0x34c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032c0:	e013      	b.n	80032ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032c2:	f7ff f8e9 	bl	8002498 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	d90c      	bls.n	80032ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e12d      	b.n	8003546 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1e5      	bne.n	80032c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <HAL_DMA_Abort+0x444>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d04a      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <HAL_DMA_Abort+0x448>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d045      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <HAL_DMA_Abort+0x44c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d040      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2a      	ldr	r2, [pc, #168]	; (80033c4 <HAL_DMA_Abort+0x450>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d03b      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <HAL_DMA_Abort+0x454>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d036      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a27      	ldr	r2, [pc, #156]	; (80033cc <HAL_DMA_Abort+0x458>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d031      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <HAL_DMA_Abort+0x45c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d02c      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <HAL_DMA_Abort+0x460>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d027      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <HAL_DMA_Abort+0x464>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d022      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a21      	ldr	r2, [pc, #132]	; (80033dc <HAL_DMA_Abort+0x468>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01d      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <HAL_DMA_Abort+0x46c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d018      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <HAL_DMA_Abort+0x470>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_DMA_Abort+0x474>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00e      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <HAL_DMA_Abort+0x478>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <HAL_DMA_Abort+0x47c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_DMA_Abort+0x422>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_DMA_Abort+0x480>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d101      	bne.n	800339a <HAL_DMA_Abort+0x426>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_DMA_Abort+0x428>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02b      	beq.n	80033f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	223f      	movs	r2, #63	; 0x3f
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	e02a      	b.n	800340e <HAL_DMA_Abort+0x49a>
 80033b8:	40020010 	.word	0x40020010
 80033bc:	40020028 	.word	0x40020028
 80033c0:	40020040 	.word	0x40020040
 80033c4:	40020058 	.word	0x40020058
 80033c8:	40020070 	.word	0x40020070
 80033cc:	40020088 	.word	0x40020088
 80033d0:	400200a0 	.word	0x400200a0
 80033d4:	400200b8 	.word	0x400200b8
 80033d8:	40020410 	.word	0x40020410
 80033dc:	40020428 	.word	0x40020428
 80033e0:	40020440 	.word	0x40020440
 80033e4:	40020458 	.word	0x40020458
 80033e8:	40020470 	.word	0x40020470
 80033ec:	40020488 	.word	0x40020488
 80033f0:	400204a0 	.word	0x400204a0
 80033f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2201      	movs	r2, #1
 8003408:	409a      	lsls	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a4f      	ldr	r2, [pc, #316]	; (8003550 <HAL_DMA_Abort+0x5dc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d072      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a4d      	ldr	r2, [pc, #308]	; (8003554 <HAL_DMA_Abort+0x5e0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d06d      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a4c      	ldr	r2, [pc, #304]	; (8003558 <HAL_DMA_Abort+0x5e4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d068      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a4a      	ldr	r2, [pc, #296]	; (800355c <HAL_DMA_Abort+0x5e8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d063      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a49      	ldr	r2, [pc, #292]	; (8003560 <HAL_DMA_Abort+0x5ec>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d05e      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a47      	ldr	r2, [pc, #284]	; (8003564 <HAL_DMA_Abort+0x5f0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d059      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a46      	ldr	r2, [pc, #280]	; (8003568 <HAL_DMA_Abort+0x5f4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d054      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a44      	ldr	r2, [pc, #272]	; (800356c <HAL_DMA_Abort+0x5f8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04f      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a43      	ldr	r2, [pc, #268]	; (8003570 <HAL_DMA_Abort+0x5fc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04a      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a41      	ldr	r2, [pc, #260]	; (8003574 <HAL_DMA_Abort+0x600>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d045      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a40      	ldr	r2, [pc, #256]	; (8003578 <HAL_DMA_Abort+0x604>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d040      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a3e      	ldr	r2, [pc, #248]	; (800357c <HAL_DMA_Abort+0x608>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d03b      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a3d      	ldr	r2, [pc, #244]	; (8003580 <HAL_DMA_Abort+0x60c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d036      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <HAL_DMA_Abort+0x610>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d031      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <HAL_DMA_Abort+0x614>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d02c      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a38      	ldr	r2, [pc, #224]	; (800358c <HAL_DMA_Abort+0x618>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d027      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a37      	ldr	r2, [pc, #220]	; (8003590 <HAL_DMA_Abort+0x61c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a35      	ldr	r2, [pc, #212]	; (8003594 <HAL_DMA_Abort+0x620>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01d      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a34      	ldr	r2, [pc, #208]	; (8003598 <HAL_DMA_Abort+0x624>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a32      	ldr	r2, [pc, #200]	; (800359c <HAL_DMA_Abort+0x628>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a31      	ldr	r2, [pc, #196]	; (80035a0 <HAL_DMA_Abort+0x62c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2f      	ldr	r2, [pc, #188]	; (80035a4 <HAL_DMA_Abort+0x630>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2e      	ldr	r2, [pc, #184]	; (80035a8 <HAL_DMA_Abort+0x634>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_Abort+0x58a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <HAL_DMA_Abort+0x638>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_DMA_Abort+0x58e>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_DMA_Abort+0x590>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d015      	beq.n	8003534 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003510:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00c      	beq.n	8003534 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003528:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003532:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40020010 	.word	0x40020010
 8003554:	40020028 	.word	0x40020028
 8003558:	40020040 	.word	0x40020040
 800355c:	40020058 	.word	0x40020058
 8003560:	40020070 	.word	0x40020070
 8003564:	40020088 	.word	0x40020088
 8003568:	400200a0 	.word	0x400200a0
 800356c:	400200b8 	.word	0x400200b8
 8003570:	40020410 	.word	0x40020410
 8003574:	40020428 	.word	0x40020428
 8003578:	40020440 	.word	0x40020440
 800357c:	40020458 	.word	0x40020458
 8003580:	40020470 	.word	0x40020470
 8003584:	40020488 	.word	0x40020488
 8003588:	400204a0 	.word	0x400204a0
 800358c:	400204b8 	.word	0x400204b8
 8003590:	58025408 	.word	0x58025408
 8003594:	5802541c 	.word	0x5802541c
 8003598:	58025430 	.word	0x58025430
 800359c:	58025444 	.word	0x58025444
 80035a0:	58025458 	.word	0x58025458
 80035a4:	5802546c 	.word	0x5802546c
 80035a8:	58025480 	.word	0x58025480
 80035ac:	58025494 	.word	0x58025494

080035b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e205      	b.n	80039ce <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d004      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e1fa      	b.n	80039ce <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a8c      	ldr	r2, [pc, #560]	; (8003810 <HAL_DMA_Abort_IT+0x260>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d04a      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a8b      	ldr	r2, [pc, #556]	; (8003814 <HAL_DMA_Abort_IT+0x264>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d045      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a89      	ldr	r2, [pc, #548]	; (8003818 <HAL_DMA_Abort_IT+0x268>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d040      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a88      	ldr	r2, [pc, #544]	; (800381c <HAL_DMA_Abort_IT+0x26c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d03b      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a86      	ldr	r2, [pc, #536]	; (8003820 <HAL_DMA_Abort_IT+0x270>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d036      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a85      	ldr	r2, [pc, #532]	; (8003824 <HAL_DMA_Abort_IT+0x274>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d031      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a83      	ldr	r2, [pc, #524]	; (8003828 <HAL_DMA_Abort_IT+0x278>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02c      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a82      	ldr	r2, [pc, #520]	; (800382c <HAL_DMA_Abort_IT+0x27c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d027      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a80      	ldr	r2, [pc, #512]	; (8003830 <HAL_DMA_Abort_IT+0x280>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a7f      	ldr	r2, [pc, #508]	; (8003834 <HAL_DMA_Abort_IT+0x284>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01d      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a7d      	ldr	r2, [pc, #500]	; (8003838 <HAL_DMA_Abort_IT+0x288>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7c      	ldr	r2, [pc, #496]	; (800383c <HAL_DMA_Abort_IT+0x28c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a7a      	ldr	r2, [pc, #488]	; (8003840 <HAL_DMA_Abort_IT+0x290>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a79      	ldr	r2, [pc, #484]	; (8003844 <HAL_DMA_Abort_IT+0x294>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a77      	ldr	r2, [pc, #476]	; (8003848 <HAL_DMA_Abort_IT+0x298>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a76      	ldr	r2, [pc, #472]	; (800384c <HAL_DMA_Abort_IT+0x29c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_DMA_Abort_IT+0xcc>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_DMA_Abort_IT+0xce>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d065      	beq.n	800374e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2204      	movs	r2, #4
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a60      	ldr	r2, [pc, #384]	; (8003810 <HAL_DMA_Abort_IT+0x260>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d04a      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5e      	ldr	r2, [pc, #376]	; (8003814 <HAL_DMA_Abort_IT+0x264>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d045      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5d      	ldr	r2, [pc, #372]	; (8003818 <HAL_DMA_Abort_IT+0x268>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d040      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5b      	ldr	r2, [pc, #364]	; (800381c <HAL_DMA_Abort_IT+0x26c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d03b      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a5a      	ldr	r2, [pc, #360]	; (8003820 <HAL_DMA_Abort_IT+0x270>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d036      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a58      	ldr	r2, [pc, #352]	; (8003824 <HAL_DMA_Abort_IT+0x274>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d031      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a57      	ldr	r2, [pc, #348]	; (8003828 <HAL_DMA_Abort_IT+0x278>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d02c      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a55      	ldr	r2, [pc, #340]	; (800382c <HAL_DMA_Abort_IT+0x27c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d027      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a54      	ldr	r2, [pc, #336]	; (8003830 <HAL_DMA_Abort_IT+0x280>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d022      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_DMA_Abort_IT+0x284>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01d      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a51      	ldr	r2, [pc, #324]	; (8003838 <HAL_DMA_Abort_IT+0x288>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d018      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a4f      	ldr	r2, [pc, #316]	; (800383c <HAL_DMA_Abort_IT+0x28c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a4e      	ldr	r2, [pc, #312]	; (8003840 <HAL_DMA_Abort_IT+0x290>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00e      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4c      	ldr	r2, [pc, #304]	; (8003844 <HAL_DMA_Abort_IT+0x294>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d009      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4b      	ldr	r2, [pc, #300]	; (8003848 <HAL_DMA_Abort_IT+0x298>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d004      	beq.n	800372a <HAL_DMA_Abort_IT+0x17a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a49      	ldr	r2, [pc, #292]	; (800384c <HAL_DMA_Abort_IT+0x29c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d108      	bne.n	800373c <HAL_DMA_Abort_IT+0x18c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e147      	b.n	80039cc <HAL_DMA_Abort_IT+0x41c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e13e      	b.n	80039cc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 020e 	bic.w	r2, r2, #14
 800375c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2b      	ldr	r2, [pc, #172]	; (8003810 <HAL_DMA_Abort_IT+0x260>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d04a      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a29      	ldr	r2, [pc, #164]	; (8003814 <HAL_DMA_Abort_IT+0x264>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d045      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a28      	ldr	r2, [pc, #160]	; (8003818 <HAL_DMA_Abort_IT+0x268>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d040      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a26      	ldr	r2, [pc, #152]	; (800381c <HAL_DMA_Abort_IT+0x26c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d03b      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a25      	ldr	r2, [pc, #148]	; (8003820 <HAL_DMA_Abort_IT+0x270>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d036      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a23      	ldr	r2, [pc, #140]	; (8003824 <HAL_DMA_Abort_IT+0x274>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d031      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a22      	ldr	r2, [pc, #136]	; (8003828 <HAL_DMA_Abort_IT+0x278>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d02c      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a20      	ldr	r2, [pc, #128]	; (800382c <HAL_DMA_Abort_IT+0x27c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d027      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <HAL_DMA_Abort_IT+0x280>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d022      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <HAL_DMA_Abort_IT+0x284>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01d      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_DMA_Abort_IT+0x288>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <HAL_DMA_Abort_IT+0x28c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_DMA_Abort_IT+0x290>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a17      	ldr	r2, [pc, #92]	; (8003844 <HAL_DMA_Abort_IT+0x294>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_DMA_Abort_IT+0x298>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_DMA_Abort_IT+0x29c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d128      	bne.n	8003850 <HAL_DMA_Abort_IT+0x2a0>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e027      	b.n	8003860 <HAL_DMA_Abort_IT+0x2b0>
 8003810:	40020010 	.word	0x40020010
 8003814:	40020028 	.word	0x40020028
 8003818:	40020040 	.word	0x40020040
 800381c:	40020058 	.word	0x40020058
 8003820:	40020070 	.word	0x40020070
 8003824:	40020088 	.word	0x40020088
 8003828:	400200a0 	.word	0x400200a0
 800382c:	400200b8 	.word	0x400200b8
 8003830:	40020410 	.word	0x40020410
 8003834:	40020428 	.word	0x40020428
 8003838:	40020440 	.word	0x40020440
 800383c:	40020458 	.word	0x40020458
 8003840:	40020470 	.word	0x40020470
 8003844:	40020488 	.word	0x40020488
 8003848:	400204a0 	.word	0x400204a0
 800384c:	400204b8 	.word	0x400204b8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5c      	ldr	r2, [pc, #368]	; (80039d8 <HAL_DMA_Abort_IT+0x428>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d072      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5b      	ldr	r2, [pc, #364]	; (80039dc <HAL_DMA_Abort_IT+0x42c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d06d      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a59      	ldr	r2, [pc, #356]	; (80039e0 <HAL_DMA_Abort_IT+0x430>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d068      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_DMA_Abort_IT+0x434>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d063      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a56      	ldr	r2, [pc, #344]	; (80039e8 <HAL_DMA_Abort_IT+0x438>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d05e      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a55      	ldr	r2, [pc, #340]	; (80039ec <HAL_DMA_Abort_IT+0x43c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d059      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a53      	ldr	r2, [pc, #332]	; (80039f0 <HAL_DMA_Abort_IT+0x440>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d054      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a52      	ldr	r2, [pc, #328]	; (80039f4 <HAL_DMA_Abort_IT+0x444>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d04f      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a50      	ldr	r2, [pc, #320]	; (80039f8 <HAL_DMA_Abort_IT+0x448>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a4f      	ldr	r2, [pc, #316]	; (80039fc <HAL_DMA_Abort_IT+0x44c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a4d      	ldr	r2, [pc, #308]	; (8003a00 <HAL_DMA_Abort_IT+0x450>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a4c      	ldr	r2, [pc, #304]	; (8003a04 <HAL_DMA_Abort_IT+0x454>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a4a      	ldr	r2, [pc, #296]	; (8003a08 <HAL_DMA_Abort_IT+0x458>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a49      	ldr	r2, [pc, #292]	; (8003a0c <HAL_DMA_Abort_IT+0x45c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a47      	ldr	r2, [pc, #284]	; (8003a10 <HAL_DMA_Abort_IT+0x460>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a46      	ldr	r2, [pc, #280]	; (8003a14 <HAL_DMA_Abort_IT+0x464>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a44      	ldr	r2, [pc, #272]	; (8003a18 <HAL_DMA_Abort_IT+0x468>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a43      	ldr	r2, [pc, #268]	; (8003a1c <HAL_DMA_Abort_IT+0x46c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a41      	ldr	r2, [pc, #260]	; (8003a20 <HAL_DMA_Abort_IT+0x470>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <HAL_DMA_Abort_IT+0x474>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a3e      	ldr	r2, [pc, #248]	; (8003a28 <HAL_DMA_Abort_IT+0x478>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a3d      	ldr	r2, [pc, #244]	; (8003a2c <HAL_DMA_Abort_IT+0x47c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <HAL_DMA_Abort_IT+0x480>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_Abort_IT+0x3a0>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <HAL_DMA_Abort_IT+0x484>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d101      	bne.n	8003954 <HAL_DMA_Abort_IT+0x3a4>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_DMA_Abort_IT+0x3a6>
 8003954:	2300      	movs	r3, #0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d028      	beq.n	80039ac <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003968:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	2201      	movs	r2, #1
 800397a:	409a      	lsls	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003988:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40020010 	.word	0x40020010
 80039dc:	40020028 	.word	0x40020028
 80039e0:	40020040 	.word	0x40020040
 80039e4:	40020058 	.word	0x40020058
 80039e8:	40020070 	.word	0x40020070
 80039ec:	40020088 	.word	0x40020088
 80039f0:	400200a0 	.word	0x400200a0
 80039f4:	400200b8 	.word	0x400200b8
 80039f8:	40020410 	.word	0x40020410
 80039fc:	40020428 	.word	0x40020428
 8003a00:	40020440 	.word	0x40020440
 8003a04:	40020458 	.word	0x40020458
 8003a08:	40020470 	.word	0x40020470
 8003a0c:	40020488 	.word	0x40020488
 8003a10:	400204a0 	.word	0x400204a0
 8003a14:	400204b8 	.word	0x400204b8
 8003a18:	58025408 	.word	0x58025408
 8003a1c:	5802541c 	.word	0x5802541c
 8003a20:	58025430 	.word	0x58025430
 8003a24:	58025444 	.word	0x58025444
 8003a28:	58025458 	.word	0x58025458
 8003a2c:	5802546c 	.word	0x5802546c
 8003a30:	58025480 	.word	0x58025480
 8003a34:	58025494 	.word	0x58025494

08003a38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a44:	4b67      	ldr	r3, [pc, #412]	; (8003be4 <HAL_DMA_IRQHandler+0x1ac>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a67      	ldr	r2, [pc, #412]	; (8003be8 <HAL_DMA_IRQHandler+0x1b0>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	0a9b      	lsrs	r3, r3, #10
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5f      	ldr	r2, [pc, #380]	; (8003bec <HAL_DMA_IRQHandler+0x1b4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d04a      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5d      	ldr	r2, [pc, #372]	; (8003bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d045      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5c      	ldr	r2, [pc, #368]	; (8003bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d040      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a5a      	ldr	r2, [pc, #360]	; (8003bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d03b      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a59      	ldr	r2, [pc, #356]	; (8003bfc <HAL_DMA_IRQHandler+0x1c4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d036      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a57      	ldr	r2, [pc, #348]	; (8003c00 <HAL_DMA_IRQHandler+0x1c8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d031      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a56      	ldr	r2, [pc, #344]	; (8003c04 <HAL_DMA_IRQHandler+0x1cc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d02c      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a54      	ldr	r2, [pc, #336]	; (8003c08 <HAL_DMA_IRQHandler+0x1d0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d027      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a53      	ldr	r2, [pc, #332]	; (8003c0c <HAL_DMA_IRQHandler+0x1d4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d022      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a51      	ldr	r2, [pc, #324]	; (8003c10 <HAL_DMA_IRQHandler+0x1d8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01d      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a50      	ldr	r2, [pc, #320]	; (8003c14 <HAL_DMA_IRQHandler+0x1dc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d018      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a4e      	ldr	r2, [pc, #312]	; (8003c18 <HAL_DMA_IRQHandler+0x1e0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a4d      	ldr	r2, [pc, #308]	; (8003c1c <HAL_DMA_IRQHandler+0x1e4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <HAL_DMA_IRQHandler+0x1e8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d009      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a4a      	ldr	r2, [pc, #296]	; (8003c24 <HAL_DMA_IRQHandler+0x1ec>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a48      	ldr	r2, [pc, #288]	; (8003c28 <HAL_DMA_IRQHandler+0x1f0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <HAL_DMA_IRQHandler+0xd6>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_DMA_IRQHandler+0xd8>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 842b 	beq.w	800436c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	2208      	movs	r2, #8
 8003b20:	409a      	lsls	r2, r3
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80a2 	beq.w	8003c70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2e      	ldr	r2, [pc, #184]	; (8003bec <HAL_DMA_IRQHandler+0x1b4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d04a      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d045      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2b      	ldr	r2, [pc, #172]	; (8003bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d040      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2a      	ldr	r2, [pc, #168]	; (8003bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d03b      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <HAL_DMA_IRQHandler+0x1c4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d036      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <HAL_DMA_IRQHandler+0x1c8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d031      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <HAL_DMA_IRQHandler+0x1cc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02c      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <HAL_DMA_IRQHandler+0x1d0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d027      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <HAL_DMA_IRQHandler+0x1d4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d022      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <HAL_DMA_IRQHandler+0x1d8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d01d      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_DMA_IRQHandler+0x1dc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <HAL_DMA_IRQHandler+0x1e0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <HAL_DMA_IRQHandler+0x1e4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_DMA_IRQHandler+0x1e8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <HAL_DMA_IRQHandler+0x1ec>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_DMA_IRQHandler+0x1f0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d12f      	bne.n	8003c2c <HAL_DMA_IRQHandler+0x1f4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bf14      	ite	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	2300      	moveq	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	e02e      	b.n	8003c40 <HAL_DMA_IRQHandler+0x208>
 8003be2:	bf00      	nop
 8003be4:	20000000 	.word	0x20000000
 8003be8:	1b4e81b5 	.word	0x1b4e81b5
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	f043 0201 	orr.w	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d06e      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a69      	ldr	r2, [pc, #420]	; (8003e30 <HAL_DMA_IRQHandler+0x3f8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04a      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a67      	ldr	r2, [pc, #412]	; (8003e34 <HAL_DMA_IRQHandler+0x3fc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d045      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a66      	ldr	r2, [pc, #408]	; (8003e38 <HAL_DMA_IRQHandler+0x400>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d040      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a64      	ldr	r2, [pc, #400]	; (8003e3c <HAL_DMA_IRQHandler+0x404>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d03b      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a63      	ldr	r2, [pc, #396]	; (8003e40 <HAL_DMA_IRQHandler+0x408>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d036      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a61      	ldr	r2, [pc, #388]	; (8003e44 <HAL_DMA_IRQHandler+0x40c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a60      	ldr	r2, [pc, #384]	; (8003e48 <HAL_DMA_IRQHandler+0x410>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d02c      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a5e      	ldr	r2, [pc, #376]	; (8003e4c <HAL_DMA_IRQHandler+0x414>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d027      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a5d      	ldr	r2, [pc, #372]	; (8003e50 <HAL_DMA_IRQHandler+0x418>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a5b      	ldr	r2, [pc, #364]	; (8003e54 <HAL_DMA_IRQHandler+0x41c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a5a      	ldr	r2, [pc, #360]	; (8003e58 <HAL_DMA_IRQHandler+0x420>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	; (8003e5c <HAL_DMA_IRQHandler+0x424>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a57      	ldr	r2, [pc, #348]	; (8003e60 <HAL_DMA_IRQHandler+0x428>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a55      	ldr	r2, [pc, #340]	; (8003e64 <HAL_DMA_IRQHandler+0x42c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a54      	ldr	r2, [pc, #336]	; (8003e68 <HAL_DMA_IRQHandler+0x430>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_DMA_IRQHandler+0x434>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d10a      	bne.n	8003d3c <HAL_DMA_IRQHandler+0x304>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf14      	ite	ne
 8003d34:	2301      	movne	r3, #1
 8003d36:	2300      	moveq	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e003      	b.n	8003d44 <HAL_DMA_IRQHandler+0x30c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2201      	movs	r2, #1
 8003d52:	409a      	lsls	r2, r3
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f043 0202 	orr.w	r2, r3, #2
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 808f 	beq.w	8003e98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <HAL_DMA_IRQHandler+0x3f8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <HAL_DMA_IRQHandler+0x3fc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <HAL_DMA_IRQHandler+0x400>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a27      	ldr	r2, [pc, #156]	; (8003e3c <HAL_DMA_IRQHandler+0x404>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <HAL_DMA_IRQHandler+0x408>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a24      	ldr	r2, [pc, #144]	; (8003e44 <HAL_DMA_IRQHandler+0x40c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_DMA_IRQHandler+0x410>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <HAL_DMA_IRQHandler+0x414>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <HAL_DMA_IRQHandler+0x418>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	; (8003e54 <HAL_DMA_IRQHandler+0x41c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_DMA_IRQHandler+0x420>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <HAL_DMA_IRQHandler+0x424>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <HAL_DMA_IRQHandler+0x428>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <HAL_DMA_IRQHandler+0x42c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <HAL_DMA_IRQHandler+0x430>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <HAL_DMA_IRQHandler+0x434>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d12a      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x438>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e023      	b.n	8003e78 <HAL_DMA_IRQHandler+0x440>
 8003e30:	40020010 	.word	0x40020010
 8003e34:	40020028 	.word	0x40020028
 8003e38:	40020040 	.word	0x40020040
 8003e3c:	40020058 	.word	0x40020058
 8003e40:	40020070 	.word	0x40020070
 8003e44:	40020088 	.word	0x40020088
 8003e48:	400200a0 	.word	0x400200a0
 8003e4c:	400200b8 	.word	0x400200b8
 8003e50:	40020410 	.word	0x40020410
 8003e54:	40020428 	.word	0x40020428
 8003e58:	40020440 	.word	0x40020440
 8003e5c:	40020458 	.word	0x40020458
 8003e60:	40020470 	.word	0x40020470
 8003e64:	40020488 	.word	0x40020488
 8003e68:	400204a0 	.word	0x400204a0
 8003e6c:	400204b8 	.word	0x400204b8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00d      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2204      	movs	r2, #4
 8003e86:	409a      	lsls	r2, r3
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	f043 0204 	orr.w	r2, r3, #4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a6 	beq.w	8003ffa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a85      	ldr	r2, [pc, #532]	; (80040c8 <HAL_DMA_IRQHandler+0x690>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04a      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a83      	ldr	r2, [pc, #524]	; (80040cc <HAL_DMA_IRQHandler+0x694>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d045      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a82      	ldr	r2, [pc, #520]	; (80040d0 <HAL_DMA_IRQHandler+0x698>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a80      	ldr	r2, [pc, #512]	; (80040d4 <HAL_DMA_IRQHandler+0x69c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a7f      	ldr	r2, [pc, #508]	; (80040d8 <HAL_DMA_IRQHandler+0x6a0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d036      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a7d      	ldr	r2, [pc, #500]	; (80040dc <HAL_DMA_IRQHandler+0x6a4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d031      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7c      	ldr	r2, [pc, #496]	; (80040e0 <HAL_DMA_IRQHandler+0x6a8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02c      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a7a      	ldr	r2, [pc, #488]	; (80040e4 <HAL_DMA_IRQHandler+0x6ac>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d027      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a79      	ldr	r2, [pc, #484]	; (80040e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a77      	ldr	r2, [pc, #476]	; (80040ec <HAL_DMA_IRQHandler+0x6b4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a76      	ldr	r2, [pc, #472]	; (80040f0 <HAL_DMA_IRQHandler+0x6b8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a74      	ldr	r2, [pc, #464]	; (80040f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a73      	ldr	r2, [pc, #460]	; (80040f8 <HAL_DMA_IRQHandler+0x6c0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a71      	ldr	r2, [pc, #452]	; (80040fc <HAL_DMA_IRQHandler+0x6c4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a70      	ldr	r2, [pc, #448]	; (8004100 <HAL_DMA_IRQHandler+0x6c8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a6e      	ldr	r2, [pc, #440]	; (8004104 <HAL_DMA_IRQHandler+0x6cc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10a      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x52c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	e009      	b.n	8003f78 <HAL_DMA_IRQHandler+0x540>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bf14      	ite	ne
 8003f72:	2301      	movne	r3, #1
 8003f74:	2300      	moveq	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d03e      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2210      	movs	r2, #16
 8003f86:	409a      	lsls	r2, r3
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d018      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d108      	bne.n	8003fba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d024      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
 8003fb8:	e01f      	b.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01b      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
 8003fca:	e016      	b.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d107      	bne.n	8003fea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0208 	bic.w	r2, r2, #8
 8003fe8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2220      	movs	r2, #32
 8004004:	409a      	lsls	r2, r3
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8110 	beq.w	8004230 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2c      	ldr	r2, [pc, #176]	; (80040c8 <HAL_DMA_IRQHandler+0x690>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d04a      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <HAL_DMA_IRQHandler+0x694>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d045      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <HAL_DMA_IRQHandler+0x698>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d040      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a28      	ldr	r2, [pc, #160]	; (80040d4 <HAL_DMA_IRQHandler+0x69c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d03b      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <HAL_DMA_IRQHandler+0x6a0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d036      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a25      	ldr	r2, [pc, #148]	; (80040dc <HAL_DMA_IRQHandler+0x6a4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d031      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <HAL_DMA_IRQHandler+0x6a8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d02c      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <HAL_DMA_IRQHandler+0x6ac>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d027      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d022      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <HAL_DMA_IRQHandler+0x6b4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d01d      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_DMA_IRQHandler+0x6b8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d018      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <HAL_DMA_IRQHandler+0x6c0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00e      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a19      	ldr	r2, [pc, #100]	; (80040fc <HAL_DMA_IRQHandler+0x6c4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a17      	ldr	r2, [pc, #92]	; (8004100 <HAL_DMA_IRQHandler+0x6c8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a16      	ldr	r2, [pc, #88]	; (8004104 <HAL_DMA_IRQHandler+0x6cc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d12b      	bne.n	8004108 <HAL_DMA_IRQHandler+0x6d0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf14      	ite	ne
 80040be:	2301      	movne	r3, #1
 80040c0:	2300      	moveq	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	e02a      	b.n	800411c <HAL_DMA_IRQHandler+0x6e4>
 80040c6:	bf00      	nop
 80040c8:	40020010 	.word	0x40020010
 80040cc:	40020028 	.word	0x40020028
 80040d0:	40020040 	.word	0x40020040
 80040d4:	40020058 	.word	0x40020058
 80040d8:	40020070 	.word	0x40020070
 80040dc:	40020088 	.word	0x40020088
 80040e0:	400200a0 	.word	0x400200a0
 80040e4:	400200b8 	.word	0x400200b8
 80040e8:	40020410 	.word	0x40020410
 80040ec:	40020428 	.word	0x40020428
 80040f0:	40020440 	.word	0x40020440
 80040f4:	40020458 	.word	0x40020458
 80040f8:	40020470 	.word	0x40020470
 80040fc:	40020488 	.word	0x40020488
 8004100:	400204a0 	.word	0x400204a0
 8004104:	400204b8 	.word	0x400204b8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8087 	beq.w	8004230 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2220      	movs	r2, #32
 800412c:	409a      	lsls	r2, r3
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b04      	cmp	r3, #4
 800413c:	d139      	bne.n	80041b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0216 	bic.w	r2, r2, #22
 800414c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800415c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <HAL_DMA_IRQHandler+0x736>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0208 	bic.w	r2, r2, #8
 800417c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	223f      	movs	r2, #63	; 0x3f
 8004188:	409a      	lsls	r2, r3
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 834a 	beq.w	800483c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	4798      	blx	r3
          }
          return;
 80041b0:	e344      	b.n	800483c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d018      	beq.n	80041f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02c      	beq.n	8004230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
 80041de:	e027      	b.n	8004230 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d023      	beq.n	8004230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
 80041f0:	e01e      	b.n	8004230 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10f      	bne.n	8004220 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0210 	bic.w	r2, r2, #16
 800420e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8306 	beq.w	8004846 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8088 	beq.w	8004358 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2204      	movs	r2, #4
 800424c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a7a      	ldr	r2, [pc, #488]	; (8004440 <HAL_DMA_IRQHandler+0xa08>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d04a      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a79      	ldr	r2, [pc, #484]	; (8004444 <HAL_DMA_IRQHandler+0xa0c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d045      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a77      	ldr	r2, [pc, #476]	; (8004448 <HAL_DMA_IRQHandler+0xa10>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d040      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a76      	ldr	r2, [pc, #472]	; (800444c <HAL_DMA_IRQHandler+0xa14>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d03b      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a74      	ldr	r2, [pc, #464]	; (8004450 <HAL_DMA_IRQHandler+0xa18>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d036      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a73      	ldr	r2, [pc, #460]	; (8004454 <HAL_DMA_IRQHandler+0xa1c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d031      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a71      	ldr	r2, [pc, #452]	; (8004458 <HAL_DMA_IRQHandler+0xa20>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d02c      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a70      	ldr	r2, [pc, #448]	; (800445c <HAL_DMA_IRQHandler+0xa24>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d027      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6e      	ldr	r2, [pc, #440]	; (8004460 <HAL_DMA_IRQHandler+0xa28>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a6d      	ldr	r2, [pc, #436]	; (8004464 <HAL_DMA_IRQHandler+0xa2c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d01d      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a6b      	ldr	r2, [pc, #428]	; (8004468 <HAL_DMA_IRQHandler+0xa30>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a6a      	ldr	r2, [pc, #424]	; (800446c <HAL_DMA_IRQHandler+0xa34>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a68      	ldr	r2, [pc, #416]	; (8004470 <HAL_DMA_IRQHandler+0xa38>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a67      	ldr	r2, [pc, #412]	; (8004474 <HAL_DMA_IRQHandler+0xa3c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a65      	ldr	r2, [pc, #404]	; (8004478 <HAL_DMA_IRQHandler+0xa40>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a64      	ldr	r2, [pc, #400]	; (800447c <HAL_DMA_IRQHandler+0xa44>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d108      	bne.n	8004302 <HAL_DMA_IRQHandler+0x8ca>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e007      	b.n	8004312 <HAL_DMA_IRQHandler+0x8da>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3301      	adds	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431a:	429a      	cmp	r2, r3
 800431c:	d307      	bcc.n	800432e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f2      	bne.n	8004312 <HAL_DMA_IRQHandler+0x8da>
 800432c:	e000      	b.n	8004330 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800432e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d004      	beq.n	8004350 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2203      	movs	r2, #3
 800434a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800434e:	e003      	b.n	8004358 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8272 	beq.w	8004846 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
 800436a:	e26c      	b.n	8004846 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a43      	ldr	r2, [pc, #268]	; (8004480 <HAL_DMA_IRQHandler+0xa48>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d022      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a42      	ldr	r2, [pc, #264]	; (8004484 <HAL_DMA_IRQHandler+0xa4c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d01d      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a40      	ldr	r2, [pc, #256]	; (8004488 <HAL_DMA_IRQHandler+0xa50>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d018      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3f      	ldr	r2, [pc, #252]	; (800448c <HAL_DMA_IRQHandler+0xa54>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3d      	ldr	r2, [pc, #244]	; (8004490 <HAL_DMA_IRQHandler+0xa58>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a3c      	ldr	r2, [pc, #240]	; (8004494 <HAL_DMA_IRQHandler+0xa5c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a3a      	ldr	r2, [pc, #232]	; (8004498 <HAL_DMA_IRQHandler+0xa60>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a39      	ldr	r2, [pc, #228]	; (800449c <HAL_DMA_IRQHandler+0xa64>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d101      	bne.n	80043c0 <HAL_DMA_IRQHandler+0x988>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_DMA_IRQHandler+0x98a>
 80043c0:	2300      	movs	r3, #0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 823f 	beq.w	8004846 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2204      	movs	r2, #4
 80043da:	409a      	lsls	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80cd 	beq.w	8004580 <HAL_DMA_IRQHandler+0xb48>
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80c7 	beq.w	8004580 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	2204      	movs	r2, #4
 80043fc:	409a      	lsls	r2, r3
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d049      	beq.n	80044a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8210 	beq.w	8004840 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004428:	e20a      	b.n	8004840 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8206 	beq.w	8004840 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800443c:	e200      	b.n	8004840 <HAL_DMA_IRQHandler+0xe08>
 800443e:	bf00      	nop
 8004440:	40020010 	.word	0x40020010
 8004444:	40020028 	.word	0x40020028
 8004448:	40020040 	.word	0x40020040
 800444c:	40020058 	.word	0x40020058
 8004450:	40020070 	.word	0x40020070
 8004454:	40020088 	.word	0x40020088
 8004458:	400200a0 	.word	0x400200a0
 800445c:	400200b8 	.word	0x400200b8
 8004460:	40020410 	.word	0x40020410
 8004464:	40020428 	.word	0x40020428
 8004468:	40020440 	.word	0x40020440
 800446c:	40020458 	.word	0x40020458
 8004470:	40020470 	.word	0x40020470
 8004474:	40020488 	.word	0x40020488
 8004478:	400204a0 	.word	0x400204a0
 800447c:	400204b8 	.word	0x400204b8
 8004480:	58025408 	.word	0x58025408
 8004484:	5802541c 	.word	0x5802541c
 8004488:	58025430 	.word	0x58025430
 800448c:	58025444 	.word	0x58025444
 8004490:	58025458 	.word	0x58025458
 8004494:	5802546c 	.word	0x5802546c
 8004498:	58025480 	.word	0x58025480
 800449c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d160      	bne.n	800456c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a8c      	ldr	r2, [pc, #560]	; (80046e0 <HAL_DMA_IRQHandler+0xca8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d04a      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a8a      	ldr	r2, [pc, #552]	; (80046e4 <HAL_DMA_IRQHandler+0xcac>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d045      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a89      	ldr	r2, [pc, #548]	; (80046e8 <HAL_DMA_IRQHandler+0xcb0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d040      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a87      	ldr	r2, [pc, #540]	; (80046ec <HAL_DMA_IRQHandler+0xcb4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d03b      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a86      	ldr	r2, [pc, #536]	; (80046f0 <HAL_DMA_IRQHandler+0xcb8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d036      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a84      	ldr	r2, [pc, #528]	; (80046f4 <HAL_DMA_IRQHandler+0xcbc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d031      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a83      	ldr	r2, [pc, #524]	; (80046f8 <HAL_DMA_IRQHandler+0xcc0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d02c      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a81      	ldr	r2, [pc, #516]	; (80046fc <HAL_DMA_IRQHandler+0xcc4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d027      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a80      	ldr	r2, [pc, #512]	; (8004700 <HAL_DMA_IRQHandler+0xcc8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a7e      	ldr	r2, [pc, #504]	; (8004704 <HAL_DMA_IRQHandler+0xccc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01d      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a7d      	ldr	r2, [pc, #500]	; (8004708 <HAL_DMA_IRQHandler+0xcd0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a7b      	ldr	r2, [pc, #492]	; (800470c <HAL_DMA_IRQHandler+0xcd4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a7a      	ldr	r2, [pc, #488]	; (8004710 <HAL_DMA_IRQHandler+0xcd8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a78      	ldr	r2, [pc, #480]	; (8004714 <HAL_DMA_IRQHandler+0xcdc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a77      	ldr	r2, [pc, #476]	; (8004718 <HAL_DMA_IRQHandler+0xce0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a75      	ldr	r2, [pc, #468]	; (800471c <HAL_DMA_IRQHandler+0xce4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <HAL_DMA_IRQHandler+0xb24>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0208 	bic.w	r2, r2, #8
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e007      	b.n	800456c <HAL_DMA_IRQHandler+0xb34>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0204 	bic.w	r2, r2, #4
 800456a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8165 	beq.w	8004840 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800457e:	e15f      	b.n	8004840 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2202      	movs	r2, #2
 800458a:	409a      	lsls	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80c5 	beq.w	8004720 <HAL_DMA_IRQHandler+0xce8>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80bf 	beq.w	8004720 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2202      	movs	r2, #2
 80045ac:	409a      	lsls	r2, r3
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d018      	beq.n	80045ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 813a 	beq.w	8004844 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d8:	e134      	b.n	8004844 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8130 	beq.w	8004844 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ec:	e12a      	b.n	8004844 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d168      	bne.n	80046ca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a38      	ldr	r2, [pc, #224]	; (80046e0 <HAL_DMA_IRQHandler+0xca8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d04a      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a37      	ldr	r2, [pc, #220]	; (80046e4 <HAL_DMA_IRQHandler+0xcac>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d045      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a35      	ldr	r2, [pc, #212]	; (80046e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d040      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a34      	ldr	r2, [pc, #208]	; (80046ec <HAL_DMA_IRQHandler+0xcb4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d03b      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a32      	ldr	r2, [pc, #200]	; (80046f0 <HAL_DMA_IRQHandler+0xcb8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d036      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a31      	ldr	r2, [pc, #196]	; (80046f4 <HAL_DMA_IRQHandler+0xcbc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d031      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2f      	ldr	r2, [pc, #188]	; (80046f8 <HAL_DMA_IRQHandler+0xcc0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d02c      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a2e      	ldr	r2, [pc, #184]	; (80046fc <HAL_DMA_IRQHandler+0xcc4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d027      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a2c      	ldr	r2, [pc, #176]	; (8004700 <HAL_DMA_IRQHandler+0xcc8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d022      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <HAL_DMA_IRQHandler+0xccc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d01d      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a29      	ldr	r2, [pc, #164]	; (8004708 <HAL_DMA_IRQHandler+0xcd0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d018      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a28      	ldr	r2, [pc, #160]	; (800470c <HAL_DMA_IRQHandler+0xcd4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a26      	ldr	r2, [pc, #152]	; (8004710 <HAL_DMA_IRQHandler+0xcd8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00e      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a25      	ldr	r2, [pc, #148]	; (8004714 <HAL_DMA_IRQHandler+0xcdc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d009      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a23      	ldr	r2, [pc, #140]	; (8004718 <HAL_DMA_IRQHandler+0xce0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d004      	beq.n	8004698 <HAL_DMA_IRQHandler+0xc60>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a22      	ldr	r2, [pc, #136]	; (800471c <HAL_DMA_IRQHandler+0xce4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d108      	bne.n	80046aa <HAL_DMA_IRQHandler+0xc72>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0214 	bic.w	r2, r2, #20
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e007      	b.n	80046ba <HAL_DMA_IRQHandler+0xc82>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 020a 	bic.w	r2, r2, #10
 80046b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80b8 	beq.w	8004844 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046dc:	e0b2      	b.n	8004844 <HAL_DMA_IRQHandler+0xe0c>
 80046de:	bf00      	nop
 80046e0:	40020010 	.word	0x40020010
 80046e4:	40020028 	.word	0x40020028
 80046e8:	40020040 	.word	0x40020040
 80046ec:	40020058 	.word	0x40020058
 80046f0:	40020070 	.word	0x40020070
 80046f4:	40020088 	.word	0x40020088
 80046f8:	400200a0 	.word	0x400200a0
 80046fc:	400200b8 	.word	0x400200b8
 8004700:	40020410 	.word	0x40020410
 8004704:	40020428 	.word	0x40020428
 8004708:	40020440 	.word	0x40020440
 800470c:	40020458 	.word	0x40020458
 8004710:	40020470 	.word	0x40020470
 8004714:	40020488 	.word	0x40020488
 8004718:	400204a0 	.word	0x400204a0
 800471c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2208      	movs	r2, #8
 800472a:	409a      	lsls	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8088 	beq.w	8004846 <HAL_DMA_IRQHandler+0xe0e>
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8082 	beq.w	8004846 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a41      	ldr	r2, [pc, #260]	; (800484c <HAL_DMA_IRQHandler+0xe14>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04a      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3f      	ldr	r2, [pc, #252]	; (8004850 <HAL_DMA_IRQHandler+0xe18>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d045      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a3e      	ldr	r2, [pc, #248]	; (8004854 <HAL_DMA_IRQHandler+0xe1c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d040      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a3c      	ldr	r2, [pc, #240]	; (8004858 <HAL_DMA_IRQHandler+0xe20>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d03b      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3b      	ldr	r2, [pc, #236]	; (800485c <HAL_DMA_IRQHandler+0xe24>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d036      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a39      	ldr	r2, [pc, #228]	; (8004860 <HAL_DMA_IRQHandler+0xe28>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d031      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a38      	ldr	r2, [pc, #224]	; (8004864 <HAL_DMA_IRQHandler+0xe2c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d02c      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a36      	ldr	r2, [pc, #216]	; (8004868 <HAL_DMA_IRQHandler+0xe30>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d027      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a35      	ldr	r2, [pc, #212]	; (800486c <HAL_DMA_IRQHandler+0xe34>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d022      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a33      	ldr	r2, [pc, #204]	; (8004870 <HAL_DMA_IRQHandler+0xe38>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a32      	ldr	r2, [pc, #200]	; (8004874 <HAL_DMA_IRQHandler+0xe3c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d018      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a30      	ldr	r2, [pc, #192]	; (8004878 <HAL_DMA_IRQHandler+0xe40>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2f      	ldr	r2, [pc, #188]	; (800487c <HAL_DMA_IRQHandler+0xe44>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a2d      	ldr	r2, [pc, #180]	; (8004880 <HAL_DMA_IRQHandler+0xe48>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2c      	ldr	r2, [pc, #176]	; (8004884 <HAL_DMA_IRQHandler+0xe4c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <HAL_DMA_IRQHandler+0xe50>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d108      	bne.n	80047f4 <HAL_DMA_IRQHandler+0xdbc>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 021c 	bic.w	r2, r2, #28
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e007      	b.n	8004804 <HAL_DMA_IRQHandler+0xdcc>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 020e 	bic.w	r2, r2, #14
 8004802:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2201      	movs	r2, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
 800483a:	e004      	b.n	8004846 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800483c:	bf00      	nop
 800483e:	e002      	b.n	8004846 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004844:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004846:	3728      	adds	r7, #40	; 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40020010 	.word	0x40020010
 8004850:	40020028 	.word	0x40020028
 8004854:	40020040 	.word	0x40020040
 8004858:	40020058 	.word	0x40020058
 800485c:	40020070 	.word	0x40020070
 8004860:	40020088 	.word	0x40020088
 8004864:	400200a0 	.word	0x400200a0
 8004868:	400200b8 	.word	0x400200b8
 800486c:	40020410 	.word	0x40020410
 8004870:	40020428 	.word	0x40020428
 8004874:	40020440 	.word	0x40020440
 8004878:	40020458 	.word	0x40020458
 800487c:	40020470 	.word	0x40020470
 8004880:	40020488 	.word	0x40020488
 8004884:	400204a0 	.word	0x400204a0
 8004888:	400204b8 	.word	0x400204b8

0800488c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a42      	ldr	r2, [pc, #264]	; (80049a4 <DMA_CalcBaseAndBitshift+0x118>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d04a      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a41      	ldr	r2, [pc, #260]	; (80049a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d045      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a3f      	ldr	r2, [pc, #252]	; (80049ac <DMA_CalcBaseAndBitshift+0x120>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d040      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3e      	ldr	r2, [pc, #248]	; (80049b0 <DMA_CalcBaseAndBitshift+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d03b      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3c      	ldr	r2, [pc, #240]	; (80049b4 <DMA_CalcBaseAndBitshift+0x128>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d036      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a3b      	ldr	r2, [pc, #236]	; (80049b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d031      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a39      	ldr	r2, [pc, #228]	; (80049bc <DMA_CalcBaseAndBitshift+0x130>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02c      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a38      	ldr	r2, [pc, #224]	; (80049c0 <DMA_CalcBaseAndBitshift+0x134>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d027      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a36      	ldr	r2, [pc, #216]	; (80049c4 <DMA_CalcBaseAndBitshift+0x138>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a35      	ldr	r2, [pc, #212]	; (80049c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a33      	ldr	r2, [pc, #204]	; (80049cc <DMA_CalcBaseAndBitshift+0x140>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a32      	ldr	r2, [pc, #200]	; (80049d0 <DMA_CalcBaseAndBitshift+0x144>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a30      	ldr	r2, [pc, #192]	; (80049d4 <DMA_CalcBaseAndBitshift+0x148>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2f      	ldr	r2, [pc, #188]	; (80049d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <DMA_CalcBaseAndBitshift+0x150>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xa8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <DMA_CalcBaseAndBitshift+0x154>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <DMA_CalcBaseAndBitshift+0xac>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <DMA_CalcBaseAndBitshift+0xae>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d024      	beq.n	8004988 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	3b10      	subs	r3, #16
 8004946:	4a27      	ldr	r2, [pc, #156]	; (80049e4 <DMA_CalcBaseAndBitshift+0x158>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	4a24      	ldr	r2, [pc, #144]	; (80049e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004958:	5cd3      	ldrb	r3, [r2, r3]
 800495a:	461a      	mov	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d908      	bls.n	8004978 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <DMA_CalcBaseAndBitshift+0x160>)
 800496e:	4013      	ands	r3, r2
 8004970:	1d1a      	adds	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	659a      	str	r2, [r3, #88]	; 0x58
 8004976:	e00d      	b.n	8004994 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <DMA_CalcBaseAndBitshift+0x160>)
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6593      	str	r3, [r2, #88]	; 0x58
 8004986:	e005      	b.n	8004994 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	40020010 	.word	0x40020010
 80049a8:	40020028 	.word	0x40020028
 80049ac:	40020040 	.word	0x40020040
 80049b0:	40020058 	.word	0x40020058
 80049b4:	40020070 	.word	0x40020070
 80049b8:	40020088 	.word	0x40020088
 80049bc:	400200a0 	.word	0x400200a0
 80049c0:	400200b8 	.word	0x400200b8
 80049c4:	40020410 	.word	0x40020410
 80049c8:	40020428 	.word	0x40020428
 80049cc:	40020440 	.word	0x40020440
 80049d0:	40020458 	.word	0x40020458
 80049d4:	40020470 	.word	0x40020470
 80049d8:	40020488 	.word	0x40020488
 80049dc:	400204a0 	.word	0x400204a0
 80049e0:	400204b8 	.word	0x400204b8
 80049e4:	aaaaaaab 	.word	0xaaaaaaab
 80049e8:	0800bd58 	.word	0x0800bd58
 80049ec:	fffffc00 	.word	0xfffffc00

080049f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d120      	bne.n	8004a46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d858      	bhi.n	8004abe <DMA_CheckFifoParam+0xce>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <DMA_CheckFifoParam+0x24>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004a37 	.word	0x08004a37
 8004a1c:	08004a25 	.word	0x08004a25
 8004a20:	08004abf 	.word	0x08004abf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d048      	beq.n	8004ac2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a34:	e045      	b.n	8004ac2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a3e:	d142      	bne.n	8004ac6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a44:	e03f      	b.n	8004ac6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4e:	d123      	bne.n	8004a98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d838      	bhi.n	8004aca <DMA_CheckFifoParam+0xda>
 8004a58:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <DMA_CheckFifoParam+0x70>)
 8004a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5e:	bf00      	nop
 8004a60:	08004a71 	.word	0x08004a71
 8004a64:	08004a77 	.word	0x08004a77
 8004a68:	08004a71 	.word	0x08004a71
 8004a6c:	08004a89 	.word	0x08004a89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
        break;
 8004a74:	e030      	b.n	8004ad8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d025      	beq.n	8004ace <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a86:	e022      	b.n	8004ace <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a90:	d11f      	bne.n	8004ad2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a96:	e01c      	b.n	8004ad2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d902      	bls.n	8004aa6 <DMA_CheckFifoParam+0xb6>
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d003      	beq.n	8004aac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004aa4:	e018      	b.n	8004ad8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8004aaa:	e015      	b.n	8004ad8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00e      	beq.n	8004ad6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
    break;
 8004abc:	e00b      	b.n	8004ad6 <DMA_CheckFifoParam+0xe6>
        break;
 8004abe:	bf00      	nop
 8004ac0:	e00a      	b.n	8004ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ac2:	bf00      	nop
 8004ac4:	e008      	b.n	8004ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ac6:	bf00      	nop
 8004ac8:	e006      	b.n	8004ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8004aca:	bf00      	nop
 8004acc:	e004      	b.n	8004ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e002      	b.n	8004ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <DMA_CheckFifoParam+0xe8>
    break;
 8004ad6:	bf00      	nop
    }
  }

  return status;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop

08004ae8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a38      	ldr	r2, [pc, #224]	; (8004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d022      	beq.n	8004b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a36      	ldr	r2, [pc, #216]	; (8004be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01d      	beq.n	8004b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d018      	beq.n	8004b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a33      	ldr	r2, [pc, #204]	; (8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a32      	ldr	r2, [pc, #200]	; (8004bec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00e      	beq.n	8004b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a30      	ldr	r2, [pc, #192]	; (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d009      	beq.n	8004b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2f      	ldr	r2, [pc, #188]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2d      	ldr	r2, [pc, #180]	; (8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d101      	bne.n	8004b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01a      	beq.n	8004b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	3b08      	subs	r3, #8
 8004b58:	4a28      	ldr	r2, [pc, #160]	; (8004bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a24      	ldr	r2, [pc, #144]	; (8004c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b84:	e024      	b.n	8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	3b10      	subs	r3, #16
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4a1c      	ldr	r2, [pc, #112]	; (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d806      	bhi.n	8004bae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d902      	bls.n	8004bae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3308      	adds	r3, #8
 8004bac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004bc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2201      	movs	r2, #1
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	58025408 	.word	0x58025408
 8004be0:	5802541c 	.word	0x5802541c
 8004be4:	58025430 	.word	0x58025430
 8004be8:	58025444 	.word	0x58025444
 8004bec:	58025458 	.word	0x58025458
 8004bf0:	5802546c 	.word	0x5802546c
 8004bf4:	58025480 	.word	0x58025480
 8004bf8:	58025494 	.word	0x58025494
 8004bfc:	cccccccd 	.word	0xcccccccd
 8004c00:	16009600 	.word	0x16009600
 8004c04:	58025880 	.word	0x58025880
 8004c08:	aaaaaaab 	.word	0xaaaaaaab
 8004c0c:	400204b8 	.word	0x400204b8
 8004c10:	4002040f 	.word	0x4002040f
 8004c14:	10008200 	.word	0x10008200
 8004c18:	40020880 	.word	0x40020880

08004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d04a      	beq.n	8004cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d847      	bhi.n	8004cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a25      	ldr	r2, [pc, #148]	; (8004cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d022      	beq.n	8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a24      	ldr	r2, [pc, #144]	; (8004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d01d      	beq.n	8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d018      	beq.n	8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a21      	ldr	r2, [pc, #132]	; (8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00e      	beq.n	8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d009      	beq.n	8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d101      	bne.n	8004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ca4:	671a      	str	r2, [r3, #112]	; 0x70
 8004ca6:	e009      	b.n	8004cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004cba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	58025408 	.word	0x58025408
 8004cd8:	5802541c 	.word	0x5802541c
 8004cdc:	58025430 	.word	0x58025430
 8004ce0:	58025444 	.word	0x58025444
 8004ce4:	58025458 	.word	0x58025458
 8004ce8:	5802546c 	.word	0x5802546c
 8004cec:	58025480 	.word	0x58025480
 8004cf0:	58025494 	.word	0x58025494
 8004cf4:	1600963f 	.word	0x1600963f
 8004cf8:	58025940 	.word	0x58025940
 8004cfc:	1000823f 	.word	0x1000823f
 8004d00:	40020940 	.word	0x40020940

08004d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b089      	sub	sp, #36	; 0x24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d12:	4b89      	ldr	r3, [pc, #548]	; (8004f38 <HAL_GPIO_Init+0x234>)
 8004d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d16:	e194      	b.n	8005042 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	4013      	ands	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8186 	beq.w	800503c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d00b      	beq.n	8004d50 <HAL_GPIO_Init+0x4c>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d007      	beq.n	8004d50 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d44:	2b11      	cmp	r3, #17
 8004d46:	d003      	beq.n	8004d50 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b12      	cmp	r3, #18
 8004d4e:	d130      	bne.n	8004db2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d86:	2201      	movs	r2, #1
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4013      	ands	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0201 	and.w	r2, r3, #1
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0xee>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b12      	cmp	r3, #18
 8004df0:	d123      	bne.n	8004e3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	08da      	lsrs	r2, r3, #3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3208      	adds	r2, #8
 8004dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	220f      	movs	r2, #15
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4013      	ands	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	08da      	lsrs	r2, r3, #3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3208      	adds	r2, #8
 8004e34:	69b9      	ldr	r1, [r7, #24]
 8004e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	2203      	movs	r2, #3
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 0203 	and.w	r2, r3, #3
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 80e0 	beq.w	800503c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e7c:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <HAL_GPIO_Init+0x238>)
 8004e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e82:	4a2e      	ldr	r2, [pc, #184]	; (8004f3c <HAL_GPIO_Init+0x238>)
 8004e84:	f043 0302 	orr.w	r3, r3, #2
 8004e88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <HAL_GPIO_Init+0x238>)
 8004e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e9a:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <HAL_GPIO_Init+0x23c>)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	220f      	movs	r2, #15
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <HAL_GPIO_Init+0x240>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d052      	beq.n	8004f6c <HAL_GPIO_Init+0x268>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <HAL_GPIO_Init+0x244>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d031      	beq.n	8004f32 <HAL_GPIO_Init+0x22e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1e      	ldr	r2, [pc, #120]	; (8004f4c <HAL_GPIO_Init+0x248>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d02b      	beq.n	8004f2e <HAL_GPIO_Init+0x22a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_GPIO_Init+0x24c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d025      	beq.n	8004f2a <HAL_GPIO_Init+0x226>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a1c      	ldr	r2, [pc, #112]	; (8004f54 <HAL_GPIO_Init+0x250>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01f      	beq.n	8004f26 <HAL_GPIO_Init+0x222>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a1b      	ldr	r2, [pc, #108]	; (8004f58 <HAL_GPIO_Init+0x254>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d019      	beq.n	8004f22 <HAL_GPIO_Init+0x21e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a1a      	ldr	r2, [pc, #104]	; (8004f5c <HAL_GPIO_Init+0x258>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <HAL_GPIO_Init+0x21a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a19      	ldr	r2, [pc, #100]	; (8004f60 <HAL_GPIO_Init+0x25c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00d      	beq.n	8004f1a <HAL_GPIO_Init+0x216>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <HAL_GPIO_Init+0x260>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <HAL_GPIO_Init+0x212>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a17      	ldr	r2, [pc, #92]	; (8004f68 <HAL_GPIO_Init+0x264>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d101      	bne.n	8004f12 <HAL_GPIO_Init+0x20e>
 8004f0e:	2309      	movs	r3, #9
 8004f10:	e02d      	b.n	8004f6e <HAL_GPIO_Init+0x26a>
 8004f12:	230a      	movs	r3, #10
 8004f14:	e02b      	b.n	8004f6e <HAL_GPIO_Init+0x26a>
 8004f16:	2308      	movs	r3, #8
 8004f18:	e029      	b.n	8004f6e <HAL_GPIO_Init+0x26a>
 8004f1a:	2307      	movs	r3, #7
 8004f1c:	e027      	b.n	8004f6e <HAL_GPIO_Init+0x26a>
 8004f1e:	2306      	movs	r3, #6
 8004f20:	e025      	b.n	8004f6e <HAL_GPIO_Init+0x26a>
 8004f22:	2305      	movs	r3, #5
 8004f24:	e023      	b.n	8004f6e <HAL_GPIO_Init+0x26a>
 8004f26:	2304      	movs	r3, #4
 8004f28:	e021      	b.n	8004f6e <HAL_GPIO_Init+0x26a>
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e01f      	b.n	8004f6e <HAL_GPIO_Init+0x26a>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e01d      	b.n	8004f6e <HAL_GPIO_Init+0x26a>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e01b      	b.n	8004f6e <HAL_GPIO_Init+0x26a>
 8004f36:	bf00      	nop
 8004f38:	58000080 	.word	0x58000080
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	58000400 	.word	0x58000400
 8004f44:	58020000 	.word	0x58020000
 8004f48:	58020400 	.word	0x58020400
 8004f4c:	58020800 	.word	0x58020800
 8004f50:	58020c00 	.word	0x58020c00
 8004f54:	58021000 	.word	0x58021000
 8004f58:	58021400 	.word	0x58021400
 8004f5c:	58021800 	.word	0x58021800
 8004f60:	58021c00 	.word	0x58021c00
 8004f64:	58022000 	.word	0x58022000
 8004f68:	58022400 	.word	0x58022400
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	f002 0203 	and.w	r2, r2, #3
 8004f74:	0092      	lsls	r2, r2, #2
 8004f76:	4093      	lsls	r3, r2
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f7e:	4938      	ldr	r1, [pc, #224]	; (8005060 <HAL_GPIO_Init+0x35c>)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	3302      	adds	r3, #2
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	43db      	mvns	r3, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	43db      	mvns	r3, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800500e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	43db      	mvns	r3, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4013      	ands	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	3301      	adds	r3, #1
 8005040:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	fa22 f303 	lsr.w	r3, r2, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	f47f ae63 	bne.w	8004d18 <HAL_GPIO_Init+0x14>
  }
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	3724      	adds	r7, #36	; 0x24
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	58000400 	.word	0x58000400

08005064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	807b      	strh	r3, [r7, #2]
 8005070:	4613      	mov	r3, r2
 8005072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005074:	787b      	ldrb	r3, [r7, #1]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800507a:	887a      	ldrh	r2, [r7, #2]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005080:	e003      	b.n	800508a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005082:	887b      	ldrh	r3, [r7, #2]
 8005084:	041a      	lsls	r2, r3, #16
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	619a      	str	r2, [r3, #24]
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	4603      	mov	r3, r0
 800509e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80050a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fc fb79 	bl	80017b4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80050d4:	4b19      	ldr	r3, [pc, #100]	; (800513c <HAL_PWREx_ConfigSupply+0x70>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d00a      	beq.n	80050f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050e0:	4b16      	ldr	r3, [pc, #88]	; (800513c <HAL_PWREx_ConfigSupply+0x70>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d001      	beq.n	80050f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e01f      	b.n	8005132 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e01d      	b.n	8005132 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80050f6:	4b11      	ldr	r3, [pc, #68]	; (800513c <HAL_PWREx_ConfigSupply+0x70>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f023 0207 	bic.w	r2, r3, #7
 80050fe:	490f      	ldr	r1, [pc, #60]	; (800513c <HAL_PWREx_ConfigSupply+0x70>)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4313      	orrs	r3, r2
 8005104:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005106:	f7fd f9c7 	bl	8002498 <HAL_GetTick>
 800510a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800510c:	e009      	b.n	8005122 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800510e:	f7fd f9c3 	bl	8002498 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800511c:	d901      	bls.n	8005122 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e007      	b.n	8005132 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_PWREx_ConfigSupply+0x70>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800512a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512e:	d1ee      	bne.n	800510e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	58024800 	.word	0x58024800

08005140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08c      	sub	sp, #48	; 0x30
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e3ff      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8087 	beq.w	800526e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005160:	4b99      	ldr	r3, [pc, #612]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800516a:	4b97      	ldr	r3, [pc, #604]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b10      	cmp	r3, #16
 8005174:	d007      	beq.n	8005186 <HAL_RCC_OscConfig+0x46>
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	2b18      	cmp	r3, #24
 800517a:	d110      	bne.n	800519e <HAL_RCC_OscConfig+0x5e>
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d10b      	bne.n	800519e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005186:	4b90      	ldr	r3, [pc, #576]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d06c      	beq.n	800526c <HAL_RCC_OscConfig+0x12c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d168      	bne.n	800526c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e3d9      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a6:	d106      	bne.n	80051b6 <HAL_RCC_OscConfig+0x76>
 80051a8:	4b87      	ldr	r3, [pc, #540]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a86      	ldr	r2, [pc, #536]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	e02e      	b.n	8005214 <HAL_RCC_OscConfig+0xd4>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCC_OscConfig+0x98>
 80051be:	4b82      	ldr	r3, [pc, #520]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a81      	ldr	r2, [pc, #516]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	4b7f      	ldr	r3, [pc, #508]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a7e      	ldr	r2, [pc, #504]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e01d      	b.n	8005214 <HAL_RCC_OscConfig+0xd4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051e0:	d10c      	bne.n	80051fc <HAL_RCC_OscConfig+0xbc>
 80051e2:	4b79      	ldr	r3, [pc, #484]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a78      	ldr	r2, [pc, #480]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	4b76      	ldr	r3, [pc, #472]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a75      	ldr	r2, [pc, #468]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	e00b      	b.n	8005214 <HAL_RCC_OscConfig+0xd4>
 80051fc:	4b72      	ldr	r3, [pc, #456]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a71      	ldr	r2, [pc, #452]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	4b6f      	ldr	r3, [pc, #444]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a6e      	ldr	r2, [pc, #440]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 800520e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d013      	beq.n	8005244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fd f93c 	bl	8002498 <HAL_GetTick>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005224:	f7fd f938 	bl	8002498 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	; 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e38d      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005236:	4b64      	ldr	r3, [pc, #400]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0xe4>
 8005242:	e014      	b.n	800526e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fd f928 	bl	8002498 <HAL_GetTick>
 8005248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800524c:	f7fd f924 	bl	8002498 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b64      	cmp	r3, #100	; 0x64
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e379      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800525e:	4b5a      	ldr	r3, [pc, #360]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x10c>
 800526a:	e000      	b.n	800526e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800526c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80ae 	beq.w	80053d8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800527c:	4b52      	ldr	r3, [pc, #328]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005284:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005286:	4b50      	ldr	r3, [pc, #320]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <HAL_RCC_OscConfig+0x162>
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	2b18      	cmp	r3, #24
 8005296:	d13a      	bne.n	800530e <HAL_RCC_OscConfig+0x1ce>
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d135      	bne.n	800530e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052a2:	4b49      	ldr	r3, [pc, #292]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_RCC_OscConfig+0x17a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e34b      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ba:	f7fd f8f9 	bl	80024b0 <HAL_GetREVID>
 80052be:	4603      	mov	r3, r0
 80052c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d817      	bhi.n	80052f8 <HAL_RCC_OscConfig+0x1b8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d108      	bne.n	80052e2 <HAL_RCC_OscConfig+0x1a2>
 80052d0:	4b3d      	ldr	r3, [pc, #244]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052d8:	4a3b      	ldr	r2, [pc, #236]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80052da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052de:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052e0:	e07a      	b.n	80053d8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e2:	4b39      	ldr	r3, [pc, #228]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	031b      	lsls	r3, r3, #12
 80052f0:	4935      	ldr	r1, [pc, #212]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f6:	e06f      	b.n	80053d8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f8:	4b33      	ldr	r3, [pc, #204]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	061b      	lsls	r3, r3, #24
 8005306:	4930      	ldr	r1, [pc, #192]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005308:	4313      	orrs	r3, r2
 800530a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800530c:	e064      	b.n	80053d8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d045      	beq.n	80053a2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005316:	4b2c      	ldr	r3, [pc, #176]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 0219 	bic.w	r2, r3, #25
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	4929      	ldr	r1, [pc, #164]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005324:	4313      	orrs	r3, r2
 8005326:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fd f8b6 	bl	8002498 <HAL_GetTick>
 800532c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005330:	f7fd f8b2 	bl	8002498 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e307      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005342:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534e:	f7fd f8af 	bl	80024b0 <HAL_GetREVID>
 8005352:	4603      	mov	r3, r0
 8005354:	f241 0203 	movw	r2, #4099	; 0x1003
 8005358:	4293      	cmp	r3, r2
 800535a:	d817      	bhi.n	800538c <HAL_RCC_OscConfig+0x24c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	d108      	bne.n	8005376 <HAL_RCC_OscConfig+0x236>
 8005364:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800536c:	4a16      	ldr	r2, [pc, #88]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 800536e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005372:	6053      	str	r3, [r2, #4]
 8005374:	e030      	b.n	80053d8 <HAL_RCC_OscConfig+0x298>
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	031b      	lsls	r3, r3, #12
 8005384:	4910      	ldr	r1, [pc, #64]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 8005386:	4313      	orrs	r3, r2
 8005388:	604b      	str	r3, [r1, #4]
 800538a:	e025      	b.n	80053d8 <HAL_RCC_OscConfig+0x298>
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	061b      	lsls	r3, r3, #24
 800539a:	490b      	ldr	r1, [pc, #44]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 800539c:	4313      	orrs	r3, r2
 800539e:	604b      	str	r3, [r1, #4]
 80053a0:	e01a      	b.n	80053d8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <HAL_RCC_OscConfig+0x288>)
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fd f873 	bl	8002498 <HAL_GetTick>
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053b4:	e00a      	b.n	80053cc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053b6:	f7fd f86f 	bl	8002498 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d903      	bls.n	80053cc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e2c4      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
 80053c8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053cc:	4ba4      	ldr	r3, [pc, #656]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1ee      	bne.n	80053b6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 80a9 	beq.w	8005538 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e6:	4b9e      	ldr	r3, [pc, #632]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053f0:	4b9b      	ldr	r3, [pc, #620]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d007      	beq.n	800540c <HAL_RCC_OscConfig+0x2cc>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b18      	cmp	r3, #24
 8005400:	d13a      	bne.n	8005478 <HAL_RCC_OscConfig+0x338>
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d135      	bne.n	8005478 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800540c:	4b94      	ldr	r3, [pc, #592]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_RCC_OscConfig+0x2e4>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	2b80      	cmp	r3, #128	; 0x80
 800541e:	d001      	beq.n	8005424 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e296      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005424:	f7fd f844 	bl	80024b0 <HAL_GetREVID>
 8005428:	4603      	mov	r3, r0
 800542a:	f241 0203 	movw	r2, #4099	; 0x1003
 800542e:	4293      	cmp	r3, r2
 8005430:	d817      	bhi.n	8005462 <HAL_RCC_OscConfig+0x322>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	2b20      	cmp	r3, #32
 8005438:	d108      	bne.n	800544c <HAL_RCC_OscConfig+0x30c>
 800543a:	4b89      	ldr	r3, [pc, #548]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005442:	4a87      	ldr	r2, [pc, #540]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005448:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800544a:	e075      	b.n	8005538 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800544c:	4b84      	ldr	r3, [pc, #528]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	069b      	lsls	r3, r3, #26
 800545a:	4981      	ldr	r1, [pc, #516]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 800545c:	4313      	orrs	r3, r2
 800545e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005460:	e06a      	b.n	8005538 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005462:	4b7f      	ldr	r3, [pc, #508]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	061b      	lsls	r3, r3, #24
 8005470:	497b      	ldr	r1, [pc, #492]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005472:	4313      	orrs	r3, r2
 8005474:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005476:	e05f      	b.n	8005538 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d042      	beq.n	8005506 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005480:	4b77      	ldr	r3, [pc, #476]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a76      	ldr	r2, [pc, #472]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fd f804 	bl	8002498 <HAL_GetTick>
 8005490:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005494:	f7fd f800 	bl	8002498 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e255      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054a6:	4b6e      	ldr	r3, [pc, #440]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054b2:	f7fc fffd 	bl	80024b0 <HAL_GetREVID>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80054bc:	4293      	cmp	r3, r2
 80054be:	d817      	bhi.n	80054f0 <HAL_RCC_OscConfig+0x3b0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d108      	bne.n	80054da <HAL_RCC_OscConfig+0x39a>
 80054c8:	4b65      	ldr	r3, [pc, #404]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054d0:	4a63      	ldr	r2, [pc, #396]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80054d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d6:	6053      	str	r3, [r2, #4]
 80054d8:	e02e      	b.n	8005538 <HAL_RCC_OscConfig+0x3f8>
 80054da:	4b61      	ldr	r3, [pc, #388]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	069b      	lsls	r3, r3, #26
 80054e8:	495d      	ldr	r1, [pc, #372]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	604b      	str	r3, [r1, #4]
 80054ee:	e023      	b.n	8005538 <HAL_RCC_OscConfig+0x3f8>
 80054f0:	4b5b      	ldr	r3, [pc, #364]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	061b      	lsls	r3, r3, #24
 80054fe:	4958      	ldr	r1, [pc, #352]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005500:	4313      	orrs	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
 8005504:	e018      	b.n	8005538 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005506:	4b56      	ldr	r3, [pc, #344]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a55      	ldr	r2, [pc, #340]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 800550c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005512:	f7fc ffc1 	bl	8002498 <HAL_GetTick>
 8005516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800551a:	f7fc ffbd 	bl	8002498 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e212      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800552c:	4b4c      	ldr	r3, [pc, #304]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1f0      	bne.n	800551a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d036      	beq.n	80055b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d019      	beq.n	8005580 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800554c:	4b44      	ldr	r3, [pc, #272]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 800554e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005550:	4a43      	ldr	r2, [pc, #268]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005558:	f7fc ff9e 	bl	8002498 <HAL_GetTick>
 800555c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005560:	f7fc ff9a 	bl	8002498 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e1ef      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005572:	4b3b      	ldr	r3, [pc, #236]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x420>
 800557e:	e018      	b.n	80055b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005580:	4b37      	ldr	r3, [pc, #220]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005584:	4a36      	ldr	r2, [pc, #216]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7fc ff84 	bl	8002498 <HAL_GetTick>
 8005590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005594:	f7fc ff80 	bl	8002498 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e1d5      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055a6:	4b2e      	ldr	r3, [pc, #184]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80055a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d036      	beq.n	800562c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d019      	beq.n	80055fa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055c6:	4b26      	ldr	r3, [pc, #152]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a25      	ldr	r2, [pc, #148]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80055cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055d2:	f7fc ff61 	bl	8002498 <HAL_GetTick>
 80055d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055da:	f7fc ff5d 	bl	8002498 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e1b2      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055ec:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f0      	beq.n	80055da <HAL_RCC_OscConfig+0x49a>
 80055f8:	e018      	b.n	800562c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055fa:	4b19      	ldr	r3, [pc, #100]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a18      	ldr	r2, [pc, #96]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005604:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005606:	f7fc ff47 	bl	8002498 <HAL_GetTick>
 800560a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800560e:	f7fc ff43 	bl	8002498 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e198      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005620:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <HAL_RCC_OscConfig+0x520>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f0      	bne.n	800560e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8085 	beq.w	8005744 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800563a:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <HAL_RCC_OscConfig+0x524>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a09      	ldr	r2, [pc, #36]	; (8005664 <HAL_RCC_OscConfig+0x524>)
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005646:	f7fc ff27 	bl	8002498 <HAL_GetTick>
 800564a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800564c:	e00c      	b.n	8005668 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800564e:	f7fc ff23 	bl	8002498 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b64      	cmp	r3, #100	; 0x64
 800565a:	d905      	bls.n	8005668 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e178      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
 8005660:	58024400 	.word	0x58024400
 8005664:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005668:	4b96      	ldr	r3, [pc, #600]	; (80058c4 <HAL_RCC_OscConfig+0x784>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ec      	beq.n	800564e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d106      	bne.n	800568a <HAL_RCC_OscConfig+0x54a>
 800567c:	4b92      	ldr	r3, [pc, #584]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005680:	4a91      	ldr	r2, [pc, #580]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	6713      	str	r3, [r2, #112]	; 0x70
 8005688:	e02d      	b.n	80056e6 <HAL_RCC_OscConfig+0x5a6>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10c      	bne.n	80056ac <HAL_RCC_OscConfig+0x56c>
 8005692:	4b8d      	ldr	r3, [pc, #564]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	4a8c      	ldr	r2, [pc, #560]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	6713      	str	r3, [r2, #112]	; 0x70
 800569e:	4b8a      	ldr	r3, [pc, #552]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	4a89      	ldr	r2, [pc, #548]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80056a4:	f023 0304 	bic.w	r3, r3, #4
 80056a8:	6713      	str	r3, [r2, #112]	; 0x70
 80056aa:	e01c      	b.n	80056e6 <HAL_RCC_OscConfig+0x5a6>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b05      	cmp	r3, #5
 80056b2:	d10c      	bne.n	80056ce <HAL_RCC_OscConfig+0x58e>
 80056b4:	4b84      	ldr	r3, [pc, #528]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b8:	4a83      	ldr	r2, [pc, #524]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80056ba:	f043 0304 	orr.w	r3, r3, #4
 80056be:	6713      	str	r3, [r2, #112]	; 0x70
 80056c0:	4b81      	ldr	r3, [pc, #516]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	4a80      	ldr	r2, [pc, #512]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	6713      	str	r3, [r2, #112]	; 0x70
 80056cc:	e00b      	b.n	80056e6 <HAL_RCC_OscConfig+0x5a6>
 80056ce:	4b7e      	ldr	r3, [pc, #504]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	4a7d      	ldr	r2, [pc, #500]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	6713      	str	r3, [r2, #112]	; 0x70
 80056da:	4b7b      	ldr	r3, [pc, #492]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	4a7a      	ldr	r2, [pc, #488]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80056e0:	f023 0304 	bic.w	r3, r3, #4
 80056e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d015      	beq.n	800571a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ee:	f7fc fed3 	bl	8002498 <HAL_GetTick>
 80056f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056f4:	e00a      	b.n	800570c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f6:	f7fc fecf 	bl	8002498 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	f241 3288 	movw	r2, #5000	; 0x1388
 8005704:	4293      	cmp	r3, r2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e122      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800570c:	4b6e      	ldr	r3, [pc, #440]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ee      	beq.n	80056f6 <HAL_RCC_OscConfig+0x5b6>
 8005718:	e014      	b.n	8005744 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571a:	f7fc febd 	bl	8002498 <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005720:	e00a      	b.n	8005738 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fc feb9 	bl	8002498 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e10c      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005738:	4b63      	ldr	r3, [pc, #396]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1ee      	bne.n	8005722 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8101 	beq.w	8005950 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800574e:	4b5e      	ldr	r3, [pc, #376]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005756:	2b18      	cmp	r3, #24
 8005758:	f000 80bc 	beq.w	80058d4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2b02      	cmp	r3, #2
 8005762:	f040 8095 	bne.w	8005890 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005766:	4b58      	ldr	r3, [pc, #352]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a57      	ldr	r2, [pc, #348]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800576c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fc fe91 	bl	8002498 <HAL_GetTick>
 8005776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577a:	f7fc fe8d 	bl	8002498 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e0e2      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800578c:	4b4e      	ldr	r3, [pc, #312]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005798:	4b4b      	ldr	r3, [pc, #300]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800579a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800579c:	4b4b      	ldr	r3, [pc, #300]	; (80058cc <HAL_RCC_OscConfig+0x78c>)
 800579e:	4013      	ands	r3, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057a8:	0112      	lsls	r2, r2, #4
 80057aa:	430a      	orrs	r2, r1
 80057ac:	4946      	ldr	r1, [pc, #280]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	628b      	str	r3, [r1, #40]	; 0x28
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	3b01      	subs	r3, #1
 80057b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c0:	3b01      	subs	r3, #1
 80057c2:	025b      	lsls	r3, r3, #9
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	3b01      	subs	r3, #1
 80057ce:	041b      	lsls	r3, r3, #16
 80057d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057da:	3b01      	subs	r3, #1
 80057dc:	061b      	lsls	r3, r3, #24
 80057de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057e2:	4939      	ldr	r1, [pc, #228]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80057e8:	4b37      	ldr	r3, [pc, #220]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	4a36      	ldr	r2, [pc, #216]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057f4:	4b34      	ldr	r3, [pc, #208]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80057f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f8:	4b35      	ldr	r3, [pc, #212]	; (80058d0 <HAL_RCC_OscConfig+0x790>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005800:	00d2      	lsls	r2, r2, #3
 8005802:	4931      	ldr	r1, [pc, #196]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005804:	4313      	orrs	r3, r2
 8005806:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005808:	4b2f      	ldr	r3, [pc, #188]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	f023 020c 	bic.w	r2, r3, #12
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	492c      	ldr	r1, [pc, #176]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005816:	4313      	orrs	r3, r2
 8005818:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800581a:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	f023 0202 	bic.w	r2, r3, #2
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005826:	4928      	ldr	r1, [pc, #160]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005828:	4313      	orrs	r3, r2
 800582a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800582c:	4b26      	ldr	r3, [pc, #152]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	4a25      	ldr	r2, [pc, #148]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005838:	4b23      	ldr	r3, [pc, #140]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800583e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005844:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800584a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800584e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005850:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	4a1c      	ldr	r2, [pc, #112]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800585c:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a19      	ldr	r2, [pc, #100]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fc fe16 	bl	8002498 <HAL_GetTick>
 800586c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005870:	f7fc fe12 	bl	8002498 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e067      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0x730>
 800588e:	e05f      	b.n	8005950 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005890:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a0c      	ldr	r2, [pc, #48]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 8005896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800589a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fc fdfc 	bl	8002498 <HAL_GetTick>
 80058a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a4:	f7fc fdf8 	bl	8002498 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e04d      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b6:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <HAL_RCC_OscConfig+0x788>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x764>
 80058c2:	e045      	b.n	8005950 <HAL_RCC_OscConfig+0x810>
 80058c4:	58024800 	.word	0x58024800
 80058c8:	58024400 	.word	0x58024400
 80058cc:	fffffc0c 	.word	0xfffffc0c
 80058d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058d4:	4b21      	ldr	r3, [pc, #132]	; (800595c <HAL_RCC_OscConfig+0x81c>)
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <HAL_RCC_OscConfig+0x81c>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d031      	beq.n	800594c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f003 0203 	and.w	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d12a      	bne.n	800594c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d122      	bne.n	800594c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005912:	429a      	cmp	r2, r3
 8005914:	d11a      	bne.n	800594c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	0a5b      	lsrs	r3, r3, #9
 800591a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005922:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d111      	bne.n	800594c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	0c1b      	lsrs	r3, r3, #16
 800592c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005936:	429a      	cmp	r2, r3
 8005938:	d108      	bne.n	800594c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	0e1b      	lsrs	r3, r3, #24
 800593e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005948:	429a      	cmp	r2, r3
 800594a:	d001      	beq.n	8005950 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3730      	adds	r7, #48	; 0x30
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	58024400 	.word	0x58024400

08005960 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e19c      	b.n	8005cae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005974:	4b8a      	ldr	r3, [pc, #552]	; (8005ba0 <HAL_RCC_ClockConfig+0x240>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d910      	bls.n	80059a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b87      	ldr	r3, [pc, #540]	; (8005ba0 <HAL_RCC_ClockConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 020f 	bic.w	r2, r3, #15
 800598a:	4985      	ldr	r1, [pc, #532]	; (8005ba0 <HAL_RCC_ClockConfig+0x240>)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	4b83      	ldr	r3, [pc, #524]	; (8005ba0 <HAL_RCC_ClockConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e184      	b.n	8005cae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	4b7b      	ldr	r3, [pc, #492]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059bc:	429a      	cmp	r2, r3
 80059be:	d908      	bls.n	80059d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059c0:	4b78      	ldr	r3, [pc, #480]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	4975      	ldr	r1, [pc, #468]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d010      	beq.n	8005a00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	4b70      	ldr	r3, [pc, #448]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d908      	bls.n	8005a00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059ee:	4b6d      	ldr	r3, [pc, #436]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	496a      	ldr	r1, [pc, #424]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d010      	beq.n	8005a2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	4b64      	ldr	r3, [pc, #400]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d908      	bls.n	8005a2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a1c:	4b61      	ldr	r3, [pc, #388]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	495e      	ldr	r1, [pc, #376]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d010      	beq.n	8005a5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69da      	ldr	r2, [r3, #28]
 8005a3e:	4b59      	ldr	r3, [pc, #356]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d908      	bls.n	8005a5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a4a:	4b56      	ldr	r3, [pc, #344]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	4953      	ldr	r1, [pc, #332]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d010      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d908      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a78:	4b4a      	ldr	r3, [pc, #296]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f023 020f 	bic.w	r2, r3, #15
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4947      	ldr	r1, [pc, #284]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d055      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a96:	4b43      	ldr	r3, [pc, #268]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	4940      	ldr	r1, [pc, #256]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d107      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ab0:	4b3c      	ldr	r3, [pc, #240]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d121      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0f6      	b.n	8005cae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d107      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ac8:	4b36      	ldr	r3, [pc, #216]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d115      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0ea      	b.n	8005cae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d107      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ae0:	4b30      	ldr	r3, [pc, #192]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0de      	b.n	8005cae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005af0:	4b2c      	ldr	r3, [pc, #176]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e0d6      	b.n	8005cae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b00:	4b28      	ldr	r3, [pc, #160]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f023 0207 	bic.w	r2, r3, #7
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4925      	ldr	r1, [pc, #148]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b12:	f7fc fcc1 	bl	8002498 <HAL_GetTick>
 8005b16:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b18:	e00a      	b.n	8005b30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b1a:	f7fc fcbd 	bl	8002498 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e0be      	b.n	8005cae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b30:	4b1c      	ldr	r3, [pc, #112]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d1eb      	bne.n	8005b1a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d010      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d208      	bcs.n	8005b70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b5e:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f023 020f 	bic.w	r2, r3, #15
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	490e      	ldr	r1, [pc, #56]	; (8005ba4 <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <HAL_RCC_ClockConfig+0x240>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d214      	bcs.n	8005ba8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <HAL_RCC_ClockConfig+0x240>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 020f 	bic.w	r2, r3, #15
 8005b86:	4906      	ldr	r1, [pc, #24]	; (8005ba0 <HAL_RCC_ClockConfig+0x240>)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8e:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <HAL_RCC_ClockConfig+0x240>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e086      	b.n	8005cae <HAL_RCC_ClockConfig+0x34e>
 8005ba0:	52002000 	.word	0x52002000
 8005ba4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d010      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	4b3f      	ldr	r3, [pc, #252]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d208      	bcs.n	8005bd6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bc4:	4b3c      	ldr	r3, [pc, #240]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	4939      	ldr	r1, [pc, #228]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d010      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695a      	ldr	r2, [r3, #20]
 8005be6:	4b34      	ldr	r3, [pc, #208]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d208      	bcs.n	8005c04 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bf2:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	492e      	ldr	r1, [pc, #184]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d010      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	699a      	ldr	r2, [r3, #24]
 8005c14:	4b28      	ldr	r3, [pc, #160]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d208      	bcs.n	8005c32 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c20:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	4922      	ldr	r1, [pc, #136]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d010      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69da      	ldr	r2, [r3, #28]
 8005c42:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d208      	bcs.n	8005c60 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c4e:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	4917      	ldr	r1, [pc, #92]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c60:	f000 f834 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	4912      	ldr	r1, [pc, #72]	; (8005cbc <HAL_RCC_ClockConfig+0x35c>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	f003 031f 	and.w	r3, r3, #31
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <HAL_RCC_ClockConfig+0x358>)
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <HAL_RCC_ClockConfig+0x35c>)
 8005c88:	5cd3      	ldrb	r3, [r2, r3]
 8005c8a:	f003 031f 	and.w	r3, r3, #31
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
 8005c94:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <HAL_RCC_ClockConfig+0x360>)
 8005c96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c98:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <HAL_RCC_ClockConfig+0x364>)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <HAL_RCC_ClockConfig+0x368>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fc fbae 	bl	8002404 <HAL_InitTick>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	0800bd48 	.word	0x0800bd48
 8005cc0:	20000004 	.word	0x20000004
 8005cc4:	20000000 	.word	0x20000000
 8005cc8:	20000008 	.word	0x20000008

08005ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b089      	sub	sp, #36	; 0x24
 8005cd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cd2:	4bb3      	ldr	r3, [pc, #716]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cda:	2b18      	cmp	r3, #24
 8005cdc:	f200 8155 	bhi.w	8005f8a <HAL_RCC_GetSysClockFreq+0x2be>
 8005ce0:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d4d 	.word	0x08005d4d
 8005cec:	08005f8b 	.word	0x08005f8b
 8005cf0:	08005f8b 	.word	0x08005f8b
 8005cf4:	08005f8b 	.word	0x08005f8b
 8005cf8:	08005f8b 	.word	0x08005f8b
 8005cfc:	08005f8b 	.word	0x08005f8b
 8005d00:	08005f8b 	.word	0x08005f8b
 8005d04:	08005f8b 	.word	0x08005f8b
 8005d08:	08005d73 	.word	0x08005d73
 8005d0c:	08005f8b 	.word	0x08005f8b
 8005d10:	08005f8b 	.word	0x08005f8b
 8005d14:	08005f8b 	.word	0x08005f8b
 8005d18:	08005f8b 	.word	0x08005f8b
 8005d1c:	08005f8b 	.word	0x08005f8b
 8005d20:	08005f8b 	.word	0x08005f8b
 8005d24:	08005f8b 	.word	0x08005f8b
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	08005f8b 	.word	0x08005f8b
 8005d30:	08005f8b 	.word	0x08005f8b
 8005d34:	08005f8b 	.word	0x08005f8b
 8005d38:	08005f8b 	.word	0x08005f8b
 8005d3c:	08005f8b 	.word	0x08005f8b
 8005d40:	08005f8b 	.word	0x08005f8b
 8005d44:	08005f8b 	.word	0x08005f8b
 8005d48:	08005d7f 	.word	0x08005d7f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d4c:	4b94      	ldr	r3, [pc, #592]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d58:	4b91      	ldr	r3, [pc, #580]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	08db      	lsrs	r3, r3, #3
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	4a90      	ldr	r2, [pc, #576]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
 8005d68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d6a:	e111      	b.n	8005f90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d6c:	4b8d      	ldr	r3, [pc, #564]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d6e:	61bb      	str	r3, [r7, #24]
    break;
 8005d70:	e10e      	b.n	8005f90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d72:	4b8d      	ldr	r3, [pc, #564]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d74:	61bb      	str	r3, [r7, #24]
    break;
 8005d76:	e10b      	b.n	8005f90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d78:	4b8c      	ldr	r3, [pc, #560]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d7a:	61bb      	str	r3, [r7, #24]
    break;
 8005d7c:	e108      	b.n	8005f90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d7e:	4b88      	ldr	r3, [pc, #544]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d88:	4b85      	ldr	r3, [pc, #532]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d92:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d94:	4b82      	ldr	r3, [pc, #520]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d9e:	4b80      	ldr	r3, [pc, #512]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da2:	08db      	lsrs	r3, r3, #3
 8005da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80e1 	beq.w	8005f84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	f000 8083 	beq.w	8005ed0 <HAL_RCC_GetSysClockFreq+0x204>
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	f200 80a1 	bhi.w	8005f14 <HAL_RCC_GetSysClockFreq+0x248>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_RCC_GetSysClockFreq+0x114>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d056      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005dde:	e099      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005de0:	4b6f      	ldr	r3, [pc, #444]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02d      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dec:	4b6c      	ldr	r3, [pc, #432]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	08db      	lsrs	r3, r3, #3
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	4a6b      	ldr	r2, [pc, #428]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	ee07 3a90 	vmov	s15, r3
 8005e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e16:	4b62      	ldr	r3, [pc, #392]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005e46:	e087      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e52:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005fb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5a:	4b51      	ldr	r3, [pc, #324]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8a:	e065      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005fb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9e:	4b40      	ldr	r3, [pc, #256]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eb2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ece:	e043      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eda:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005fbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee2:	4b2f      	ldr	r3, [pc, #188]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ef6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f12:	e021      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005fb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f26:	4b1e      	ldr	r3, [pc, #120]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f58:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	0a5b      	lsrs	r3, r3, #9
 8005f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f62:	3301      	adds	r3, #1
 8005f64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f7c:	ee17 3a90 	vmov	r3, s15
 8005f80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f82:	e005      	b.n	8005f90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    break;
 8005f88:	e002      	b.n	8005f90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f8c:	61bb      	str	r3, [r7, #24]
    break;
 8005f8e:	bf00      	nop
  }

  return sysclockfreq;
 8005f90:	69bb      	ldr	r3, [r7, #24]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3724      	adds	r7, #36	; 0x24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	03d09000 	.word	0x03d09000
 8005fa8:	003d0900 	.word	0x003d0900
 8005fac:	02dc6c00 	.word	0x02dc6c00
 8005fb0:	46000000 	.word	0x46000000
 8005fb4:	4c742400 	.word	0x4c742400
 8005fb8:	4a742400 	.word	0x4a742400
 8005fbc:	4c371b00 	.word	0x4c371b00

08005fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fc6:	f7ff fe81 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	0a1b      	lsrs	r3, r3, #8
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	490f      	ldr	r1, [pc, #60]	; (8006014 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fd8:	5ccb      	ldrb	r3, [r1, r3]
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	4a09      	ldr	r2, [pc, #36]	; (8006014 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fee:	5cd3      	ldrb	r3, [r2, r3]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffa:	4a07      	ldr	r2, [pc, #28]	; (8006018 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ffc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ffe:	4a07      	ldr	r2, [pc, #28]	; (800601c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <HAL_RCC_GetHCLKFreq+0x58>)
 8006006:	681b      	ldr	r3, [r3, #0]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	58024400 	.word	0x58024400
 8006014:	0800bd48 	.word	0x0800bd48
 8006018:	20000004 	.word	0x20000004
 800601c:	20000000 	.word	0x20000000

08006020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006024:	f7ff ffcc 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8006028:	4602      	mov	r2, r0
 800602a:	4b06      	ldr	r3, [pc, #24]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x24>)
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	091b      	lsrs	r3, r3, #4
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	4904      	ldr	r1, [pc, #16]	; (8006048 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006036:	5ccb      	ldrb	r3, [r1, r3]
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd80      	pop	{r7, pc}
 8006044:	58024400 	.word	0x58024400
 8006048:	0800bd48 	.word	0x0800bd48

0800604c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006050:	f7ff ffb6 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8006054:	4602      	mov	r2, r0
 8006056:	4b06      	ldr	r3, [pc, #24]	; (8006070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	0a1b      	lsrs	r3, r3, #8
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	4904      	ldr	r1, [pc, #16]	; (8006074 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006062:	5ccb      	ldrb	r3, [r1, r3]
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800606c:	4618      	mov	r0, r3
 800606e:	bd80      	pop	{r7, pc}
 8006070:	58024400 	.word	0x58024400
 8006074:	0800bd48 	.word	0x0800bd48

08006078 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006080:	2300      	movs	r3, #0
 8006082:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006084:	2300      	movs	r3, #0
 8006086:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d03f      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800609c:	d02a      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800609e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060a2:	d824      	bhi.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060a8:	d018      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ae:	d81e      	bhi.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b8:	d007      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80060ba:	e018      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060bc:	4bab      	ldr	r3, [pc, #684]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	4aaa      	ldr	r2, [pc, #680]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060c8:	e015      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
 80060ce:	2102      	movs	r1, #2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f001 f9cf 	bl	8007474 <RCCEx_PLL2_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060da:	e00c      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3324      	adds	r3, #36	; 0x24
 80060e0:	2102      	movs	r1, #2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 fa78 	bl	80075d8 <RCCEx_PLL3_Config>
 80060e8:	4603      	mov	r3, r0
 80060ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060ec:	e003      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	75fb      	strb	r3, [r7, #23]
      break;
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80060f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d109      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060fc:	4b9b      	ldr	r3, [pc, #620]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006108:	4998      	ldr	r1, [pc, #608]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800610a:	4313      	orrs	r3, r2
 800610c:	650b      	str	r3, [r1, #80]	; 0x50
 800610e:	e001      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611c:	2b00      	cmp	r3, #0
 800611e:	d03d      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006124:	2b04      	cmp	r3, #4
 8006126:	d826      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006128:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006145 	.word	0x08006145
 8006134:	08006153 	.word	0x08006153
 8006138:	08006165 	.word	0x08006165
 800613c:	0800617d 	.word	0x0800617d
 8006140:	0800617d 	.word	0x0800617d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006144:	4b89      	ldr	r3, [pc, #548]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	4a88      	ldr	r2, [pc, #544]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800614a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800614e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006150:	e015      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	2100      	movs	r1, #0
 8006158:	4618      	mov	r0, r3
 800615a:	f001 f98b 	bl	8007474 <RCCEx_PLL2_Config>
 800615e:	4603      	mov	r3, r0
 8006160:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006162:	e00c      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3324      	adds	r3, #36	; 0x24
 8006168:	2100      	movs	r1, #0
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fa34 	bl	80075d8 <RCCEx_PLL3_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006174:	e003      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
      break;
 800617a:	e000      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800617c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d109      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006184:	4b79      	ldr	r3, [pc, #484]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006188:	f023 0207 	bic.w	r2, r3, #7
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006190:	4976      	ldr	r1, [pc, #472]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006192:	4313      	orrs	r3, r2
 8006194:	650b      	str	r3, [r1, #80]	; 0x50
 8006196:	e001      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006198:	7dfb      	ldrb	r3, [r7, #23]
 800619a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d042      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b0:	d02b      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b6:	d825      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061b8:	2bc0      	cmp	r3, #192	; 0xc0
 80061ba:	d028      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80061bc:	2bc0      	cmp	r3, #192	; 0xc0
 80061be:	d821      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061c0:	2b80      	cmp	r3, #128	; 0x80
 80061c2:	d016      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80061c4:	2b80      	cmp	r3, #128	; 0x80
 80061c6:	d81d      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d007      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80061d0:	e018      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d2:	4b66      	ldr	r3, [pc, #408]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	4a65      	ldr	r2, [pc, #404]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80061de:	e017      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 f944 	bl	8007474 <RCCEx_PLL2_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80061f0:	e00e      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3324      	adds	r3, #36	; 0x24
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 f9ed 	bl	80075d8 <RCCEx_PLL3_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006202:	e005      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	75fb      	strb	r3, [r7, #23]
      break;
 8006208:	e002      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800620a:	bf00      	nop
 800620c:	e000      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800620e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006210:	7dfb      	ldrb	r3, [r7, #23]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006216:	4b55      	ldr	r3, [pc, #340]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006222:	4952      	ldr	r1, [pc, #328]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006224:	4313      	orrs	r3, r2
 8006226:	650b      	str	r3, [r1, #80]	; 0x50
 8006228:	e001      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006236:	2b00      	cmp	r3, #0
 8006238:	d049      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006240:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006244:	d030      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006246:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800624a:	d82a      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800624c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006250:	d02c      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006252:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006256:	d824      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800625c:	d018      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800625e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006262:	d81e      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800626c:	d007      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800626e:	e018      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006270:	4b3e      	ldr	r3, [pc, #248]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	4a3d      	ldr	r2, [pc, #244]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800627a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800627c:	e017      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3304      	adds	r3, #4
 8006282:	2100      	movs	r1, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f8f5 	bl	8007474 <RCCEx_PLL2_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800628e:	e00e      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3324      	adds	r3, #36	; 0x24
 8006294:	2100      	movs	r1, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f001 f99e 	bl	80075d8 <RCCEx_PLL3_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062a0:	e005      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	75fb      	strb	r3, [r7, #23]
      break;
 80062a6:	e002      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80062a8:	bf00      	nop
 80062aa:	e000      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80062ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062b4:	4b2d      	ldr	r3, [pc, #180]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062c2:	492a      	ldr	r1, [pc, #168]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	658b      	str	r3, [r1, #88]	; 0x58
 80062c8:	e001      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d04c      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062e4:	d030      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80062e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062ea:	d82a      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80062ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062f0:	d02c      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80062f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062f6:	d824      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80062f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062fc:	d018      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80062fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006302:	d81e      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800630c:	d007      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800630e:	e018      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006310:	4b16      	ldr	r3, [pc, #88]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	4a15      	ldr	r2, [pc, #84]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800631c:	e017      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f001 f8a5 	bl	8007474 <RCCEx_PLL2_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800632e:	e00e      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3324      	adds	r3, #36	; 0x24
 8006334:	2100      	movs	r1, #0
 8006336:	4618      	mov	r0, r3
 8006338:	f001 f94e 	bl	80075d8 <RCCEx_PLL3_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006340:	e005      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
      break;
 8006346:	e002      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006348:	bf00      	nop
 800634a:	e000      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800634c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10d      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006358:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006362:	4902      	ldr	r1, [pc, #8]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006364:	4313      	orrs	r3, r2
 8006366:	658b      	str	r3, [r1, #88]	; 0x58
 8006368:	e004      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800636a:	bf00      	nop
 800636c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d032      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006384:	2b30      	cmp	r3, #48	; 0x30
 8006386:	d01c      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006388:	2b30      	cmp	r3, #48	; 0x30
 800638a:	d817      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d00c      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006390:	2b20      	cmp	r3, #32
 8006392:	d813      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d016      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006398:	2b10      	cmp	r3, #16
 800639a:	d10f      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800639c:	4baf      	ldr	r3, [pc, #700]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4aae      	ldr	r2, [pc, #696]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80063a8:	e00e      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	2102      	movs	r1, #2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 f85f 	bl	8007474 <RCCEx_PLL2_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80063ba:	e005      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	75fb      	strb	r3, [r7, #23]
      break;
 80063c0:	e002      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80063c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063ce:	4ba3      	ldr	r3, [pc, #652]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063da:	49a0      	ldr	r1, [pc, #640]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80063e0:	e001      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d047      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063fa:	d030      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80063fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006400:	d82a      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006402:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006406:	d02c      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006408:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800640c:	d824      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800640e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006412:	d018      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006418:	d81e      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006422:	d007      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006424:	e018      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006426:	4b8d      	ldr	r3, [pc, #564]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	4a8c      	ldr	r2, [pc, #560]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800642c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006430:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006432:	e017      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f001 f81a 	bl	8007474 <RCCEx_PLL2_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006444:	e00e      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3324      	adds	r3, #36	; 0x24
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f001 f8c3 	bl	80075d8 <RCCEx_PLL3_Config>
 8006452:	4603      	mov	r3, r0
 8006454:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006456:	e005      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	75fb      	strb	r3, [r7, #23]
      break;
 800645c:	e002      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800646a:	4b7c      	ldr	r3, [pc, #496]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800646c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006476:	4979      	ldr	r1, [pc, #484]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006478:	4313      	orrs	r3, r2
 800647a:	650b      	str	r3, [r1, #80]	; 0x50
 800647c:	e001      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d049      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006492:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006496:	d02e      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800649c:	d828      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800649e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064a2:	d02a      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x482>
 80064a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064a8:	d822      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064ae:	d026      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x486>
 80064b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064b4:	d81c      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ba:	d010      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x466>
 80064bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c0:	d816      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d01d      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80064c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ca:	d111      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3304      	adds	r3, #4
 80064d0:	2101      	movs	r1, #1
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 ffce 	bl	8007474 <RCCEx_PLL2_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80064dc:	e012      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3324      	adds	r3, #36	; 0x24
 80064e2:	2101      	movs	r1, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 f877 	bl	80075d8 <RCCEx_PLL3_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80064ee:	e009      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	75fb      	strb	r3, [r7, #23]
      break;
 80064f4:	e006      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80064f6:	bf00      	nop
 80064f8:	e004      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80064fa:	bf00      	nop
 80064fc:	e002      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80064fe:	bf00      	nop
 8006500:	e000      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800650a:	4b54      	ldr	r3, [pc, #336]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800650c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006516:	4951      	ldr	r1, [pc, #324]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006518:	4313      	orrs	r3, r2
 800651a:	650b      	str	r3, [r1, #80]	; 0x50
 800651c:	e001      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d04b      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006538:	d02e      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800653a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800653e:	d828      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006544:	d02a      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654a:	d822      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800654c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006550:	d026      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006552:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006556:	d81c      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800655c:	d010      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800655e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006562:	d816      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01d      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800656c:	d111      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	2101      	movs	r1, #1
 8006574:	4618      	mov	r0, r3
 8006576:	f000 ff7d 	bl	8007474 <RCCEx_PLL2_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800657e:	e012      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3324      	adds	r3, #36	; 0x24
 8006584:	2101      	movs	r1, #1
 8006586:	4618      	mov	r0, r3
 8006588:	f001 f826 	bl	80075d8 <RCCEx_PLL3_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006590:	e009      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	75fb      	strb	r3, [r7, #23]
      break;
 8006596:	e006      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006598:	bf00      	nop
 800659a:	e004      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800659c:	bf00      	nop
 800659e:	e002      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065a0:	bf00      	nop
 80065a2:	e000      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065ac:	4b2b      	ldr	r3, [pc, #172]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065ba:	4928      	ldr	r1, [pc, #160]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	658b      	str	r3, [r1, #88]	; 0x58
 80065c0:	e001      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d02f      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065da:	d00e      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80065dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e0:	d814      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d015      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80065e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ea:	d10f      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ec:	4b1b      	ldr	r3, [pc, #108]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	4a1a      	ldr	r2, [pc, #104]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80065f8:	e00c      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3304      	adds	r3, #4
 80065fe:	2101      	movs	r1, #1
 8006600:	4618      	mov	r0, r3
 8006602:	f000 ff37 	bl	8007474 <RCCEx_PLL2_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800660a:	e003      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	75fb      	strb	r3, [r7, #23]
      break;
 8006610:	e000      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800661a:	4b10      	ldr	r3, [pc, #64]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006626:	490d      	ldr	r1, [pc, #52]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006628:	4313      	orrs	r3, r2
 800662a:	650b      	str	r3, [r1, #80]	; 0x50
 800662c:	e001      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d033      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	2b03      	cmp	r3, #3
 8006644:	d81c      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006646:	a201      	add	r2, pc, #4	; (adr r2, 800664c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	08006687 	.word	0x08006687
 8006650:	08006661 	.word	0x08006661
 8006654:	0800666f 	.word	0x0800666f
 8006658:	08006687 	.word	0x08006687
 800665c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006660:	4bb8      	ldr	r3, [pc, #736]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	4ab7      	ldr	r2, [pc, #732]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800666a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800666c:	e00c      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3304      	adds	r3, #4
 8006672:	2102      	movs	r1, #2
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fefd 	bl	8007474 <RCCEx_PLL2_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800667e:	e003      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	75fb      	strb	r3, [r7, #23]
      break;
 8006684:	e000      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006688:	7dfb      	ldrb	r3, [r7, #23]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d109      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800668e:	4bad      	ldr	r3, [pc, #692]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006692:	f023 0203 	bic.w	r2, r3, #3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	49aa      	ldr	r1, [pc, #680]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800669c:	4313      	orrs	r3, r2
 800669e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066a0:	e001      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8086 	beq.w	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066b4:	4ba4      	ldr	r3, [pc, #656]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4aa3      	ldr	r2, [pc, #652]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066c0:	f7fb feea 	bl	8002498 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066c6:	e009      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c8:	f7fb fee6 	bl	8002498 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b64      	cmp	r3, #100	; 0x64
 80066d4:	d902      	bls.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	75fb      	strb	r3, [r7, #23]
        break;
 80066da:	e005      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066dc:	4b9a      	ldr	r3, [pc, #616]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0ef      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d166      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066ee:	4b95      	ldr	r3, [pc, #596]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066f8:	4053      	eors	r3, r2
 80066fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d013      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006702:	4b90      	ldr	r3, [pc, #576]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800670c:	4b8d      	ldr	r3, [pc, #564]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800670e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006710:	4a8c      	ldr	r2, [pc, #560]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006716:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006718:	4b8a      	ldr	r3, [pc, #552]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800671a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671c:	4a89      	ldr	r2, [pc, #548]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800671e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006722:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006724:	4a87      	ldr	r2, [pc, #540]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006734:	d115      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006736:	f7fb feaf 	bl	8002498 <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800673c:	e00b      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673e:	f7fb feab 	bl	8002498 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	f241 3288 	movw	r2, #5000	; 0x1388
 800674c:	4293      	cmp	r3, r2
 800674e:	d902      	bls.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	75fb      	strb	r3, [r7, #23]
            break;
 8006754:	e005      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006756:	4b7b      	ldr	r3, [pc, #492]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0ed      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d126      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800676e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006776:	d10d      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006778:	4b72      	ldr	r3, [pc, #456]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006786:	0919      	lsrs	r1, r3, #4
 8006788:	4b70      	ldr	r3, [pc, #448]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800678a:	400b      	ands	r3, r1
 800678c:	496d      	ldr	r1, [pc, #436]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800678e:	4313      	orrs	r3, r2
 8006790:	610b      	str	r3, [r1, #16]
 8006792:	e005      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006794:	4b6b      	ldr	r3, [pc, #428]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	4a6a      	ldr	r2, [pc, #424]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800679a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800679e:	6113      	str	r3, [r2, #16]
 80067a0:	4b68      	ldr	r3, [pc, #416]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ae:	4965      	ldr	r1, [pc, #404]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	670b      	str	r3, [r1, #112]	; 0x70
 80067b4:	e004      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	75bb      	strb	r3, [r7, #22]
 80067ba:	e001      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d07e      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d0:	2b28      	cmp	r3, #40	; 0x28
 80067d2:	d867      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80067d4:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80067d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067da:	bf00      	nop
 80067dc:	080068ab 	.word	0x080068ab
 80067e0:	080068a5 	.word	0x080068a5
 80067e4:	080068a5 	.word	0x080068a5
 80067e8:	080068a5 	.word	0x080068a5
 80067ec:	080068a5 	.word	0x080068a5
 80067f0:	080068a5 	.word	0x080068a5
 80067f4:	080068a5 	.word	0x080068a5
 80067f8:	080068a5 	.word	0x080068a5
 80067fc:	08006881 	.word	0x08006881
 8006800:	080068a5 	.word	0x080068a5
 8006804:	080068a5 	.word	0x080068a5
 8006808:	080068a5 	.word	0x080068a5
 800680c:	080068a5 	.word	0x080068a5
 8006810:	080068a5 	.word	0x080068a5
 8006814:	080068a5 	.word	0x080068a5
 8006818:	080068a5 	.word	0x080068a5
 800681c:	08006893 	.word	0x08006893
 8006820:	080068a5 	.word	0x080068a5
 8006824:	080068a5 	.word	0x080068a5
 8006828:	080068a5 	.word	0x080068a5
 800682c:	080068a5 	.word	0x080068a5
 8006830:	080068a5 	.word	0x080068a5
 8006834:	080068a5 	.word	0x080068a5
 8006838:	080068a5 	.word	0x080068a5
 800683c:	080068ab 	.word	0x080068ab
 8006840:	080068a5 	.word	0x080068a5
 8006844:	080068a5 	.word	0x080068a5
 8006848:	080068a5 	.word	0x080068a5
 800684c:	080068a5 	.word	0x080068a5
 8006850:	080068a5 	.word	0x080068a5
 8006854:	080068a5 	.word	0x080068a5
 8006858:	080068a5 	.word	0x080068a5
 800685c:	080068ab 	.word	0x080068ab
 8006860:	080068a5 	.word	0x080068a5
 8006864:	080068a5 	.word	0x080068a5
 8006868:	080068a5 	.word	0x080068a5
 800686c:	080068a5 	.word	0x080068a5
 8006870:	080068a5 	.word	0x080068a5
 8006874:	080068a5 	.word	0x080068a5
 8006878:	080068a5 	.word	0x080068a5
 800687c:	080068ab 	.word	0x080068ab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	2101      	movs	r1, #1
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fdf4 	bl	8007474 <RCCEx_PLL2_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006890:	e00c      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3324      	adds	r3, #36	; 0x24
 8006896:	2101      	movs	r1, #1
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fe9d 	bl	80075d8 <RCCEx_PLL3_Config>
 800689e:	4603      	mov	r3, r0
 80068a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068a2:	e003      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
      break;
 80068a8:	e000      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80068aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068b2:	4b24      	ldr	r3, [pc, #144]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068be:	4921      	ldr	r1, [pc, #132]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	654b      	str	r3, [r1, #84]	; 0x54
 80068c4:	e001      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
 80068c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d03e      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d820      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80068de:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	08006927 	.word	0x08006927
 80068e8:	080068fd 	.word	0x080068fd
 80068ec:	0800690f 	.word	0x0800690f
 80068f0:	08006927 	.word	0x08006927
 80068f4:	08006927 	.word	0x08006927
 80068f8:	08006927 	.word	0x08006927
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3304      	adds	r3, #4
 8006900:	2101      	movs	r1, #1
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fdb6 	bl	8007474 <RCCEx_PLL2_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800690c:	e00c      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3324      	adds	r3, #36	; 0x24
 8006912:	2101      	movs	r1, #1
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fe5f 	bl	80075d8 <RCCEx_PLL3_Config>
 800691a:	4603      	mov	r3, r0
 800691c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800691e:	e003      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	75fb      	strb	r3, [r7, #23]
      break;
 8006924:	e000      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d110      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006932:	f023 0207 	bic.w	r2, r3, #7
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693a:	4902      	ldr	r1, [pc, #8]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800693c:	4313      	orrs	r3, r2
 800693e:	654b      	str	r3, [r1, #84]	; 0x54
 8006940:	e008      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006942:	bf00      	nop
 8006944:	58024400 	.word	0x58024400
 8006948:	58024800 	.word	0x58024800
 800694c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d039      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	2b05      	cmp	r3, #5
 8006968:	d820      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x934>
 800696a:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	080069b3 	.word	0x080069b3
 8006974:	08006989 	.word	0x08006989
 8006978:	0800699b 	.word	0x0800699b
 800697c:	080069b3 	.word	0x080069b3
 8006980:	080069b3 	.word	0x080069b3
 8006984:	080069b3 	.word	0x080069b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3304      	adds	r3, #4
 800698c:	2101      	movs	r1, #1
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fd70 	bl	8007474 <RCCEx_PLL2_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006998:	e00c      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3324      	adds	r3, #36	; 0x24
 800699e:	2101      	movs	r1, #1
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fe19 	bl	80075d8 <RCCEx_PLL3_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069aa:	e003      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	75fb      	strb	r3, [r7, #23]
      break;
 80069b0:	e000      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80069b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069ba:	4bb7      	ldr	r3, [pc, #732]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	f023 0207 	bic.w	r2, r3, #7
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c8:	49b3      	ldr	r1, [pc, #716]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	658b      	str	r3, [r1, #88]	; 0x58
 80069ce:	e001      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d04b      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069ea:	d02e      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80069ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069f0:	d828      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80069f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f6:	d02a      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fc:	d822      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80069fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a02:	d026      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006a04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a08:	d81c      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0e:	d010      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a14:	d816      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01d      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a1e:	d111      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3304      	adds	r3, #4
 8006a24:	2100      	movs	r1, #0
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fd24 	bl	8007474 <RCCEx_PLL2_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a30:	e012      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3324      	adds	r3, #36	; 0x24
 8006a36:	2102      	movs	r1, #2
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fdcd 	bl	80075d8 <RCCEx_PLL3_Config>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a42:	e009      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	75fb      	strb	r3, [r7, #23]
      break;
 8006a48:	e006      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a4a:	bf00      	nop
 8006a4c:	e004      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a4e:	bf00      	nop
 8006a50:	e002      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a52:	bf00      	nop
 8006a54:	e000      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a5e:	4b8e      	ldr	r3, [pc, #568]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a6c:	498a      	ldr	r1, [pc, #552]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	654b      	str	r3, [r1, #84]	; 0x54
 8006a72:	e001      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d04b      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a8e:	d02e      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006a90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a94:	d828      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9a:	d02a      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa0:	d822      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006aa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aa6:	d026      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aac:	d81c      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab2:	d010      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab8:	d816      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01d      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac2:	d111      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fcd2 	bl	8007474 <RCCEx_PLL2_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ad4:	e012      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3324      	adds	r3, #36	; 0x24
 8006ada:	2102      	movs	r1, #2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fd7b 	bl	80075d8 <RCCEx_PLL3_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ae6:	e009      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	75fb      	strb	r3, [r7, #23]
      break;
 8006aec:	e006      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006aee:	bf00      	nop
 8006af0:	e004      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006af2:	bf00      	nop
 8006af4:	e002      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006af6:	bf00      	nop
 8006af8:	e000      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b02:	4b65      	ldr	r3, [pc, #404]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b10:	4961      	ldr	r1, [pc, #388]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	658b      	str	r3, [r1, #88]	; 0x58
 8006b16:	e001      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d04b      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b32:	d02e      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006b34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b38:	d828      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3e:	d02a      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b44:	d822      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b4a:	d026      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006b4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b50:	d81c      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b56:	d010      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b5c:	d816      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01d      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b66:	d111      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fc80 	bl	8007474 <RCCEx_PLL2_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b78:	e012      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3324      	adds	r3, #36	; 0x24
 8006b7e:	2102      	movs	r1, #2
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fd29 	bl	80075d8 <RCCEx_PLL3_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b8a:	e009      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b90:	e006      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006b92:	bf00      	nop
 8006b94:	e004      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006b96:	bf00      	nop
 8006b98:	e002      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006b9a:	bf00      	nop
 8006b9c:	e000      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ba6:	4b3c      	ldr	r3, [pc, #240]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bb4:	4938      	ldr	r1, [pc, #224]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	658b      	str	r3, [r1, #88]	; 0x58
 8006bba:	e001      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01a      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd6:	d10a      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3324      	adds	r3, #36	; 0x24
 8006bdc:	2102      	movs	r1, #2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fcfa 	bl	80075d8 <RCCEx_PLL3_Config>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006bee:	4b2a      	ldr	r3, [pc, #168]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bfc:	4926      	ldr	r1, [pc, #152]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d01a      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c18:	d10a      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3324      	adds	r3, #36	; 0x24
 8006c1e:	2102      	movs	r1, #2
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fcd9 	bl	80075d8 <RCCEx_PLL3_Config>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c30:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c3e:	4916      	ldr	r1, [pc, #88]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d036      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c5a:	d01f      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c60:	d817      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6a:	d009      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006c6c:	e011      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3304      	adds	r3, #4
 8006c72:	2100      	movs	r1, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fbfd 	bl	8007474 <RCCEx_PLL2_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c7e:	e00e      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3324      	adds	r3, #36	; 0x24
 8006c84:	2102      	movs	r1, #2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fca6 	bl	80075d8 <RCCEx_PLL3_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c90:	e005      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	75fb      	strb	r3, [r7, #23]
      break;
 8006c96:	e002      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006c98:	58024400 	.word	0x58024400
      break;
 8006c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ca4:	4b93      	ldr	r3, [pc, #588]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006cb2:	4990      	ldr	r1, [pc, #576]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	658b      	str	r3, [r1, #88]	; 0x58
 8006cb8:	e001      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d033      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cd4:	d01c      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006cd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cda:	d816      	bhi.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce0:	d003      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ce6:	d007      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006ce8:	e00f      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cea:	4b82      	ldr	r3, [pc, #520]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	4a81      	ldr	r2, [pc, #516]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006cf6:	e00c      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3324      	adds	r3, #36	; 0x24
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fc6a 	bl	80075d8 <RCCEx_PLL3_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d08:	e003      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d0e:	e000      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d18:	4b76      	ldr	r3, [pc, #472]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d26:	4973      	ldr	r1, [pc, #460]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	654b      	str	r3, [r1, #84]	; 0x54
 8006d2c:	e001      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d029      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d4a:	d007      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006d4c:	e00f      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d4e:	4b69      	ldr	r3, [pc, #420]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d52:	4a68      	ldr	r2, [pc, #416]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d5a:	e00b      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	2102      	movs	r1, #2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fb86 	bl	8007474 <RCCEx_PLL2_Config>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	75fb      	strb	r3, [r7, #23]
      break;
 8006d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d7a:	4b5e      	ldr	r3, [pc, #376]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d86:	495b      	ldr	r1, [pc, #364]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d8c:	e001      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3324      	adds	r3, #36	; 0x24
 8006da2:	2102      	movs	r1, #2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fc17 	bl	80075d8 <RCCEx_PLL3_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d030      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc8:	d017      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dce:	d811      	bhi.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd4:	d013      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dda:	d80b      	bhi.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d010      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de4:	d106      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de6:	4b43      	ldr	r3, [pc, #268]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dea:	4a42      	ldr	r2, [pc, #264]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006df2:	e007      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	75fb      	strb	r3, [r7, #23]
      break;
 8006df8:	e004      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006dfa:	bf00      	nop
 8006dfc:	e002      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006dfe:	bf00      	nop
 8006e00:	e000      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d109      	bne.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e0a:	4b3a      	ldr	r3, [pc, #232]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e16:	4937      	ldr	r1, [pc, #220]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	654b      	str	r3, [r1, #84]	; 0x54
 8006e1c:	e001      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
 8006e20:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e2e:	4b31      	ldr	r3, [pc, #196]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	492e      	ldr	r1, [pc, #184]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d009      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e4c:	4b29      	ldr	r3, [pc, #164]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e5a:	4926      	ldr	r1, [pc, #152]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d008      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e6c:	4b21      	ldr	r3, [pc, #132]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e78:	491e      	ldr	r1, [pc, #120]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00d      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e8a:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e94:	6113      	str	r3, [r2, #16]
 8006e96:	4b17      	ldr	r3, [pc, #92]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ea0:	4914      	ldr	r1, [pc, #80]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da08      	bge.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006eae:	4b11      	ldr	r3, [pc, #68]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eba:	490e      	ldr	r1, [pc, #56]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d009      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ecc:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eda:	4906      	ldr	r1, [pc, #24]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006ee0:	7dbb      	ldrb	r3, [r7, #22]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e000      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	58024400 	.word	0x58024400

08006ef8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006efc:	f7ff f860 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8006f00:	4602      	mov	r2, r0
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	091b      	lsrs	r3, r3, #4
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	4904      	ldr	r1, [pc, #16]	; (8006f20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f0e:	5ccb      	ldrb	r3, [r1, r3]
 8006f10:	f003 031f 	and.w	r3, r3, #31
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	58024400 	.word	0x58024400
 8006f20:	0800bd48 	.word	0x0800bd48

08006f24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b089      	sub	sp, #36	; 0x24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f2c:	4ba1      	ldr	r3, [pc, #644]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	f003 0303 	and.w	r3, r3, #3
 8006f34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006f36:	4b9f      	ldr	r3, [pc, #636]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3a:	0b1b      	lsrs	r3, r3, #12
 8006f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f42:	4b9c      	ldr	r3, [pc, #624]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	091b      	lsrs	r3, r3, #4
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006f4e:	4b99      	ldr	r3, [pc, #612]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f52:	08db      	lsrs	r3, r3, #3
 8006f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	fb02 f303 	mul.w	r3, r2, r3
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8111 	beq.w	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	f000 8083 	beq.w	8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	f200 80a1 	bhi.w	80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d056      	beq.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f8e:	e099      	b.n	80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f90:	4b88      	ldr	r3, [pc, #544]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d02d      	beq.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f9c:	4b85      	ldr	r3, [pc, #532]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	08db      	lsrs	r3, r3, #3
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	4a84      	ldr	r2, [pc, #528]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	ee07 3a90 	vmov	s15, r3
 8006fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b7b      	ldr	r3, [pc, #492]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ff6:	e087      	b.n	8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b6a      	ldr	r3, [pc, #424]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a03 	vldr	s12, [r7, #12]
 800701e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800703a:	e065      	b.n	8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800704a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704e:	4b59      	ldr	r3, [pc, #356]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007062:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800707e:	e043      	b.n	8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800708e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007092:	4b48      	ldr	r3, [pc, #288]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070c2:	e021      	b.n	8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d6:	4b37      	ldr	r3, [pc, #220]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007102:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007106:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007108:	4b2a      	ldr	r3, [pc, #168]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710c:	0a5b      	lsrs	r3, r3, #9
 800710e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800711e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007122:	edd7 6a07 	vldr	s13, [r7, #28]
 8007126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800712a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800712e:	ee17 2a90 	vmov	r2, s15
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007136:	4b1f      	ldr	r3, [pc, #124]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	0c1b      	lsrs	r3, r3, #16
 800713c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800714c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007150:	edd7 6a07 	vldr	s13, [r7, #28]
 8007154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800715c:	ee17 2a90 	vmov	r2, s15
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007164:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007168:	0e1b      	lsrs	r3, r3, #24
 800716a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800717a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800717e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800718a:	ee17 2a90 	vmov	r2, s15
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007192:	e008      	b.n	80071a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]
}
 80071a6:	bf00      	nop
 80071a8:	3724      	adds	r7, #36	; 0x24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	58024400 	.word	0x58024400
 80071b8:	03d09000 	.word	0x03d09000
 80071bc:	46000000 	.word	0x46000000
 80071c0:	4c742400 	.word	0x4c742400
 80071c4:	4a742400 	.word	0x4a742400
 80071c8:	4c371b00 	.word	0x4c371b00

080071cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b089      	sub	sp, #36	; 0x24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071d4:	4ba1      	ldr	r3, [pc, #644]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	f003 0303 	and.w	r3, r3, #3
 80071dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80071de:	4b9f      	ldr	r3, [pc, #636]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	0d1b      	lsrs	r3, r3, #20
 80071e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071ea:	4b9c      	ldr	r3, [pc, #624]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	0a1b      	lsrs	r3, r3, #8
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80071f6:	4b99      	ldr	r3, [pc, #612]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	08db      	lsrs	r3, r3, #3
 80071fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	fb02 f303 	mul.w	r3, r2, r3
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 8111 	beq.w	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b02      	cmp	r3, #2
 800721e:	f000 8083 	beq.w	8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b02      	cmp	r3, #2
 8007226:	f200 80a1 	bhi.w	800736c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d056      	beq.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007236:	e099      	b.n	800736c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007238:	4b88      	ldr	r3, [pc, #544]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d02d      	beq.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007244:	4b85      	ldr	r3, [pc, #532]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	08db      	lsrs	r3, r3, #3
 800724a:	f003 0303 	and.w	r3, r3, #3
 800724e:	4a84      	ldr	r2, [pc, #528]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
 8007254:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	ee07 3a90 	vmov	s15, r3
 800725c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b7b      	ldr	r3, [pc, #492]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800729e:	e087      	b.n	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b6a      	ldr	r3, [pc, #424]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072e2:	e065      	b.n	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800746c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f6:	4b59      	ldr	r3, [pc, #356]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007306:	ed97 6a03 	vldr	s12, [r7, #12]
 800730a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800730e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007326:	e043      	b.n	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733a:	4b48      	ldr	r3, [pc, #288]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734a:	ed97 6a03 	vldr	s12, [r7, #12]
 800734e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800735e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007366:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800736a:	e021      	b.n	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800746c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800737a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800737e:	4b37      	ldr	r3, [pc, #220]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007392:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80073b0:	4b2a      	ldr	r3, [pc, #168]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	0a5b      	lsrs	r3, r3, #9
 80073b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d6:	ee17 2a90 	vmov	r2, s15
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80073de:	4b1f      	ldr	r3, [pc, #124]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	0c1b      	lsrs	r3, r3, #16
 80073e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e8:	ee07 3a90 	vmov	s15, r3
 80073ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80073fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007404:	ee17 2a90 	vmov	r2, s15
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800740c:	4b13      	ldr	r3, [pc, #76]	; (800745c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	0e1b      	lsrs	r3, r3, #24
 8007412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007426:	edd7 6a07 	vldr	s13, [r7, #28]
 800742a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800742e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007432:	ee17 2a90 	vmov	r2, s15
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800743a:	e008      	b.n	800744e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	609a      	str	r2, [r3, #8]
}
 800744e:	bf00      	nop
 8007450:	3724      	adds	r7, #36	; 0x24
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	58024400 	.word	0x58024400
 8007460:	03d09000 	.word	0x03d09000
 8007464:	46000000 	.word	0x46000000
 8007468:	4c742400 	.word	0x4c742400
 800746c:	4a742400 	.word	0x4a742400
 8007470:	4c371b00 	.word	0x4c371b00

08007474 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007482:	4b53      	ldr	r3, [pc, #332]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	2b03      	cmp	r3, #3
 800748c:	d101      	bne.n	8007492 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e099      	b.n	80075c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007492:	4b4f      	ldr	r3, [pc, #316]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a4e      	ldr	r2, [pc, #312]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007498:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800749c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800749e:	f7fa fffb 	bl	8002498 <HAL_GetTick>
 80074a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074a4:	e008      	b.n	80074b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074a6:	f7fa fff7 	bl	8002498 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d901      	bls.n	80074b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e086      	b.n	80075c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074b8:	4b45      	ldr	r3, [pc, #276]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f0      	bne.n	80074a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074c4:	4b42      	ldr	r3, [pc, #264]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	031b      	lsls	r3, r3, #12
 80074d2:	493f      	ldr	r1, [pc, #252]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	628b      	str	r3, [r1, #40]	; 0x28
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	3b01      	subs	r3, #1
 80074de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	025b      	lsls	r3, r3, #9
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	3b01      	subs	r3, #1
 8007502:	061b      	lsls	r3, r3, #24
 8007504:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007508:	4931      	ldr	r1, [pc, #196]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 800750a:	4313      	orrs	r3, r2
 800750c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800750e:	4b30      	ldr	r3, [pc, #192]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	492d      	ldr	r1, [pc, #180]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 800751c:	4313      	orrs	r3, r2
 800751e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007520:	4b2b      	ldr	r3, [pc, #172]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	f023 0220 	bic.w	r2, r3, #32
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	4928      	ldr	r1, [pc, #160]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 800752e:	4313      	orrs	r3, r2
 8007530:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007532:	4b27      	ldr	r3, [pc, #156]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	4a26      	ldr	r2, [pc, #152]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007538:	f023 0310 	bic.w	r3, r3, #16
 800753c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800753e:	4b24      	ldr	r3, [pc, #144]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007542:	4b24      	ldr	r3, [pc, #144]	; (80075d4 <RCCEx_PLL2_Config+0x160>)
 8007544:	4013      	ands	r3, r2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	69d2      	ldr	r2, [r2, #28]
 800754a:	00d2      	lsls	r2, r2, #3
 800754c:	4920      	ldr	r1, [pc, #128]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 800754e:	4313      	orrs	r3, r2
 8007550:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007552:	4b1f      	ldr	r3, [pc, #124]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007556:	4a1e      	ldr	r2, [pc, #120]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007558:	f043 0310 	orr.w	r3, r3, #16
 800755c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d106      	bne.n	8007572 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007564:	4b1a      	ldr	r3, [pc, #104]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	4a19      	ldr	r2, [pc, #100]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 800756a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800756e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007570:	e00f      	b.n	8007592 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d106      	bne.n	8007586 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007578:	4b15      	ldr	r3, [pc, #84]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	4a14      	ldr	r2, [pc, #80]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 800757e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007582:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007584:	e005      	b.n	8007592 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007586:	4b12      	ldr	r3, [pc, #72]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	4a11      	ldr	r2, [pc, #68]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 800758c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007590:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007592:	4b0f      	ldr	r3, [pc, #60]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a0e      	ldr	r2, [pc, #56]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 8007598:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800759c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800759e:	f7fa ff7b 	bl	8002498 <HAL_GetTick>
 80075a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075a4:	e008      	b.n	80075b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075a6:	f7fa ff77 	bl	8002498 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e006      	b.n	80075c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075b8:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <RCCEx_PLL2_Config+0x15c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0f0      	beq.n	80075a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
 80075d4:	ffff0007 	.word	0xffff0007

080075d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075e6:	4b53      	ldr	r3, [pc, #332]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d101      	bne.n	80075f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e099      	b.n	800772a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80075f6:	4b4f      	ldr	r3, [pc, #316]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a4e      	ldr	r2, [pc, #312]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007602:	f7fa ff49 	bl	8002498 <HAL_GetTick>
 8007606:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007608:	e008      	b.n	800761c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800760a:	f7fa ff45 	bl	8002498 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d901      	bls.n	800761c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e086      	b.n	800772a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800761c:	4b45      	ldr	r3, [pc, #276]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1f0      	bne.n	800760a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007628:	4b42      	ldr	r3, [pc, #264]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	051b      	lsls	r3, r3, #20
 8007636:	493f      	ldr	r1, [pc, #252]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 8007638:	4313      	orrs	r3, r2
 800763a:	628b      	str	r3, [r1, #40]	; 0x28
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	3b01      	subs	r3, #1
 8007642:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	3b01      	subs	r3, #1
 800764c:	025b      	lsls	r3, r3, #9
 800764e:	b29b      	uxth	r3, r3
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	3b01      	subs	r3, #1
 8007658:	041b      	lsls	r3, r3, #16
 800765a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	3b01      	subs	r3, #1
 8007666:	061b      	lsls	r3, r3, #24
 8007668:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800766c:	4931      	ldr	r1, [pc, #196]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 800766e:	4313      	orrs	r3, r2
 8007670:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007672:	4b30      	ldr	r3, [pc, #192]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	492d      	ldr	r1, [pc, #180]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 8007680:	4313      	orrs	r3, r2
 8007682:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007684:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	4928      	ldr	r1, [pc, #160]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 8007692:	4313      	orrs	r3, r2
 8007694:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007696:	4b27      	ldr	r3, [pc, #156]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	4a26      	ldr	r2, [pc, #152]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 800769c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076a2:	4b24      	ldr	r3, [pc, #144]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076a6:	4b24      	ldr	r3, [pc, #144]	; (8007738 <RCCEx_PLL3_Config+0x160>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	69d2      	ldr	r2, [r2, #28]
 80076ae:	00d2      	lsls	r2, r2, #3
 80076b0:	4920      	ldr	r1, [pc, #128]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076b6:	4b1f      	ldr	r3, [pc, #124]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	4a1e      	ldr	r2, [pc, #120]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d106      	bne.n	80076d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076c8:	4b1a      	ldr	r3, [pc, #104]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	4a19      	ldr	r2, [pc, #100]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076d4:	e00f      	b.n	80076f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d106      	bne.n	80076ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076dc:	4b15      	ldr	r3, [pc, #84]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	4a14      	ldr	r2, [pc, #80]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076e8:	e005      	b.n	80076f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076ea:	4b12      	ldr	r3, [pc, #72]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ee:	4a11      	ldr	r2, [pc, #68]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80076f6:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a0e      	ldr	r2, [pc, #56]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 80076fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007702:	f7fa fec9 	bl	8002498 <HAL_GetTick>
 8007706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007708:	e008      	b.n	800771c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800770a:	f7fa fec5 	bl	8002498 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e006      	b.n	800772a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <RCCEx_PLL3_Config+0x15c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0f0      	beq.n	800770a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007728:	7bfb      	ldrb	r3, [r7, #15]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	58024400 	.word	0x58024400
 8007738:	ffff0007 	.word	0xffff0007

0800773c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e0eb      	b.n	800792a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a75      	ldr	r2, [pc, #468]	; (8007934 <HAL_SPI_Init+0x1f8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00f      	beq.n	8007782 <HAL_SPI_Init+0x46>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a74      	ldr	r2, [pc, #464]	; (8007938 <HAL_SPI_Init+0x1fc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00a      	beq.n	8007782 <HAL_SPI_Init+0x46>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a72      	ldr	r2, [pc, #456]	; (800793c <HAL_SPI_Init+0x200>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d005      	beq.n	8007782 <HAL_SPI_Init+0x46>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	2b0f      	cmp	r3, #15
 800777c:	d901      	bls.n	8007782 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e0d3      	b.n	800792a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f8dc 	bl	8007940 <SPI_GetPacketSize>
 8007788:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a69      	ldr	r2, [pc, #420]	; (8007934 <HAL_SPI_Init+0x1f8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d00c      	beq.n	80077ae <HAL_SPI_Init+0x72>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a67      	ldr	r2, [pc, #412]	; (8007938 <HAL_SPI_Init+0x1fc>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <HAL_SPI_Init+0x72>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a66      	ldr	r2, [pc, #408]	; (800793c <HAL_SPI_Init+0x200>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d002      	beq.n	80077ae <HAL_SPI_Init+0x72>
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d811      	bhi.n	80077d2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80077b2:	4a60      	ldr	r2, [pc, #384]	; (8007934 <HAL_SPI_Init+0x1f8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d009      	beq.n	80077cc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a5e      	ldr	r2, [pc, #376]	; (8007938 <HAL_SPI_Init+0x1fc>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d004      	beq.n	80077cc <HAL_SPI_Init+0x90>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a5d      	ldr	r2, [pc, #372]	; (800793c <HAL_SPI_Init+0x200>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d104      	bne.n	80077d6 <HAL_SPI_Init+0x9a>
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b10      	cmp	r3, #16
 80077d0:	d901      	bls.n	80077d6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e0a9      	b.n	800792a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d106      	bne.n	80077f0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fa f838 	bl	8001860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0201 	bic.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007810:	d119      	bne.n	8007846 <HAL_SPI_Init+0x10a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800781a:	d103      	bne.n	8007824 <HAL_SPI_Init+0xe8>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	2b00      	cmp	r3, #0
 8007822:	d008      	beq.n	8007836 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10c      	bne.n	8007846 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007834:	d107      	bne.n	8007846 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007844:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69da      	ldr	r2, [r3, #28]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	431a      	orrs	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007858:	ea42 0103 	orr.w	r1, r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789a:	431a      	orrs	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a6:	ea42 0103 	orr.w	r1, r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d113      	bne.n	80078e6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0201 	bic.w	r2, r2, #1
 80078f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40013000 	.word	0x40013000
 8007938:	40003800 	.word	0x40003800
 800793c:	40003c00 	.word	0x40003c00

08007940 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794c:	095b      	lsrs	r3, r3, #5
 800794e:	3301      	adds	r3, #1
 8007950:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	3301      	adds	r3, #1
 8007958:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	3307      	adds	r3, #7
 800795e:	08db      	lsrs	r3, r3, #3
 8007960:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	fb02 f303 	mul.w	r3, r2, r3
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e049      	b.n	8007a1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d106      	bne.n	80079a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7f9 ffc5 	bl	800192c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2202      	movs	r2, #2
 80079a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3304      	adds	r3, #4
 80079b2:	4619      	mov	r1, r3
 80079b4:	4610      	mov	r0, r2
 80079b6:	f000 fbe1 	bl	800817c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e049      	b.n	8007aca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f841 	bl	8007ad2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	f000 fb8a 	bl	800817c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d122      	bne.n	8007b42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d11b      	bne.n	8007b42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f06f 0202 	mvn.w	r2, #2
 8007b12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	f003 0303 	and.w	r3, r3, #3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fb09 	bl	8008140 <HAL_TIM_IC_CaptureCallback>
 8007b2e:	e005      	b.n	8007b3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fafb 	bl	800812c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fb0c 	bl	8008154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d122      	bne.n	8007b96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d11b      	bne.n	8007b96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f06f 0204 	mvn.w	r2, #4
 8007b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fadf 	bl	8008140 <HAL_TIM_IC_CaptureCallback>
 8007b82:	e005      	b.n	8007b90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fad1 	bl	800812c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fae2 	bl	8008154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d122      	bne.n	8007bea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f003 0308 	and.w	r3, r3, #8
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	d11b      	bne.n	8007bea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f06f 0208 	mvn.w	r2, #8
 8007bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f003 0303 	and.w	r3, r3, #3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fab5 	bl	8008140 <HAL_TIM_IC_CaptureCallback>
 8007bd6:	e005      	b.n	8007be4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 faa7 	bl	800812c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fab8 	bl	8008154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f003 0310 	and.w	r3, r3, #16
 8007bf4:	2b10      	cmp	r3, #16
 8007bf6:	d122      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b10      	cmp	r3, #16
 8007c04:	d11b      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f06f 0210 	mvn.w	r2, #16
 8007c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2208      	movs	r2, #8
 8007c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fa8b 	bl	8008140 <HAL_TIM_IC_CaptureCallback>
 8007c2a:	e005      	b.n	8007c38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fa7d 	bl	800812c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa8e 	bl	8008154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d10e      	bne.n	8007c6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d107      	bne.n	8007c6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f06f 0201 	mvn.w	r2, #1
 8007c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7f9 fdb0 	bl	80017ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c74:	2b80      	cmp	r3, #128	; 0x80
 8007c76:	d10e      	bne.n	8007c96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d107      	bne.n	8007c96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 ff89 	bl	8008ba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ca4:	d10e      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb0:	2b80      	cmp	r3, #128	; 0x80
 8007cb2:	d107      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 ff7c 	bl	8008bbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d10e      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b40      	cmp	r3, #64	; 0x40
 8007cde:	d107      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa3c 	bl	8008168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d10e      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d107      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f06f 0220 	mvn.w	r2, #32
 8007d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 ff3c 	bl	8008b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	e0fd      	b.n	8007f3a <HAL_TIM_PWM_ConfigChannel+0x216>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b14      	cmp	r3, #20
 8007d4a:	f200 80f0 	bhi.w	8007f2e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007d4e:	a201      	add	r2, pc, #4	; (adr r2, 8007d54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d54:	08007da9 	.word	0x08007da9
 8007d58:	08007f2f 	.word	0x08007f2f
 8007d5c:	08007f2f 	.word	0x08007f2f
 8007d60:	08007f2f 	.word	0x08007f2f
 8007d64:	08007de9 	.word	0x08007de9
 8007d68:	08007f2f 	.word	0x08007f2f
 8007d6c:	08007f2f 	.word	0x08007f2f
 8007d70:	08007f2f 	.word	0x08007f2f
 8007d74:	08007e2b 	.word	0x08007e2b
 8007d78:	08007f2f 	.word	0x08007f2f
 8007d7c:	08007f2f 	.word	0x08007f2f
 8007d80:	08007f2f 	.word	0x08007f2f
 8007d84:	08007e6b 	.word	0x08007e6b
 8007d88:	08007f2f 	.word	0x08007f2f
 8007d8c:	08007f2f 	.word	0x08007f2f
 8007d90:	08007f2f 	.word	0x08007f2f
 8007d94:	08007ead 	.word	0x08007ead
 8007d98:	08007f2f 	.word	0x08007f2f
 8007d9c:	08007f2f 	.word	0x08007f2f
 8007da0:	08007f2f 	.word	0x08007f2f
 8007da4:	08007eed 	.word	0x08007eed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68b9      	ldr	r1, [r7, #8]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fa7e 	bl	80082b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0208 	orr.w	r2, r2, #8
 8007dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699a      	ldr	r2, [r3, #24]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0204 	bic.w	r2, r2, #4
 8007dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6999      	ldr	r1, [r3, #24]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	691a      	ldr	r2, [r3, #16]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	619a      	str	r2, [r3, #24]
      break;
 8007de6:	e0a3      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 faee 	bl	80083d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699a      	ldr	r2, [r3, #24]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6999      	ldr	r1, [r3, #24]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	021a      	lsls	r2, r3, #8
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	619a      	str	r2, [r3, #24]
      break;
 8007e28:	e082      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 fb57 	bl	80084e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69da      	ldr	r2, [r3, #28]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f042 0208 	orr.w	r2, r2, #8
 8007e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69da      	ldr	r2, [r3, #28]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0204 	bic.w	r2, r2, #4
 8007e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69d9      	ldr	r1, [r3, #28]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	61da      	str	r2, [r3, #28]
      break;
 8007e68:	e062      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fbbd 	bl	80085f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69da      	ldr	r2, [r3, #28]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69da      	ldr	r2, [r3, #28]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69d9      	ldr	r1, [r3, #28]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	021a      	lsls	r2, r3, #8
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	61da      	str	r2, [r3, #28]
      break;
 8007eaa:	e041      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fc04 	bl	80086c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0208 	orr.w	r2, r2, #8
 8007ec6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0204 	bic.w	r2, r2, #4
 8007ed6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	691a      	ldr	r2, [r3, #16]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007eea:	e021      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68b9      	ldr	r1, [r7, #8]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fc46 	bl	8008784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	021a      	lsls	r2, r3, #8
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f2c:	e000      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007f2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop

08007f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <HAL_TIM_ConfigClockSource+0x18>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e0db      	b.n	8008114 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4b69      	ldr	r3, [pc, #420]	; (800811c <HAL_TIM_ConfigClockSource+0x1d8>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a63      	ldr	r2, [pc, #396]	; (8008120 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	f000 80a9 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x1a6>
 8007f98:	4a61      	ldr	r2, [pc, #388]	; (8008120 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	f200 80ae 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 8007fa0:	4a60      	ldr	r2, [pc, #384]	; (8008124 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	f000 80a1 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x1a6>
 8007fa8:	4a5e      	ldr	r2, [pc, #376]	; (8008124 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	f200 80a6 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 8007fb0:	4a5d      	ldr	r2, [pc, #372]	; (8008128 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	f000 8099 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x1a6>
 8007fb8:	4a5b      	ldr	r2, [pc, #364]	; (8008128 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	f200 809e 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 8007fc0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007fc4:	f000 8091 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x1a6>
 8007fc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007fcc:	f200 8096 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 8007fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd4:	f000 8089 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x1a6>
 8007fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fdc:	f200 808e 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 8007fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe4:	d03e      	beq.n	8008064 <HAL_TIM_ConfigClockSource+0x120>
 8007fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fea:	f200 8087 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff2:	f000 8085 	beq.w	8008100 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffa:	d87f      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 8007ffc:	2b70      	cmp	r3, #112	; 0x70
 8007ffe:	d01a      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0xf2>
 8008000:	2b70      	cmp	r3, #112	; 0x70
 8008002:	d87b      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 8008004:	2b60      	cmp	r3, #96	; 0x60
 8008006:	d050      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x166>
 8008008:	2b60      	cmp	r3, #96	; 0x60
 800800a:	d877      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 800800c:	2b50      	cmp	r3, #80	; 0x50
 800800e:	d03c      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x146>
 8008010:	2b50      	cmp	r3, #80	; 0x50
 8008012:	d873      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d058      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x186>
 8008018:	2b40      	cmp	r3, #64	; 0x40
 800801a:	d86f      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 800801c:	2b30      	cmp	r3, #48	; 0x30
 800801e:	d064      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x1a6>
 8008020:	2b30      	cmp	r3, #48	; 0x30
 8008022:	d86b      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 8008024:	2b20      	cmp	r3, #32
 8008026:	d060      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x1a6>
 8008028:	2b20      	cmp	r3, #32
 800802a:	d867      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d05c      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x1a6>
 8008030:	2b10      	cmp	r3, #16
 8008032:	d05a      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008034:	e062      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	6899      	ldr	r1, [r3, #8]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f000 fc7f 	bl	8008948 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008058:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	609a      	str	r2, [r3, #8]
      break;
 8008062:	e04e      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6899      	ldr	r1, [r3, #8]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f000 fc68 	bl	8008948 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008086:	609a      	str	r2, [r3, #8]
      break;
 8008088:	e03b      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	6859      	ldr	r1, [r3, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	461a      	mov	r2, r3
 8008098:	f000 fbd8 	bl	800884c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2150      	movs	r1, #80	; 0x50
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 fc32 	bl	800890c <TIM_ITRx_SetConfig>
      break;
 80080a8:	e02b      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6859      	ldr	r1, [r3, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	461a      	mov	r2, r3
 80080b8:	f000 fbf7 	bl	80088aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2160      	movs	r1, #96	; 0x60
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fc22 	bl	800890c <TIM_ITRx_SetConfig>
      break;
 80080c8:	e01b      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6859      	ldr	r1, [r3, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f000 fbb8 	bl	800884c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2140      	movs	r1, #64	; 0x40
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fc12 	bl	800890c <TIM_ITRx_SetConfig>
      break;
 80080e8:	e00b      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f000 fc09 	bl	800890c <TIM_ITRx_SetConfig>
        break;
 80080fa:	e002      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80080fc:	bf00      	nop
 80080fe:	e000      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008100:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	ffceff88 	.word	0xffceff88
 8008120:	00100040 	.word	0x00100040
 8008124:	00100030 	.word	0x00100030
 8008128:	00100020 	.word	0x00100020

0800812c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a40      	ldr	r2, [pc, #256]	; (8008290 <TIM_Base_SetConfig+0x114>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d013      	beq.n	80081bc <TIM_Base_SetConfig+0x40>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800819a:	d00f      	beq.n	80081bc <TIM_Base_SetConfig+0x40>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a3d      	ldr	r2, [pc, #244]	; (8008294 <TIM_Base_SetConfig+0x118>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00b      	beq.n	80081bc <TIM_Base_SetConfig+0x40>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a3c      	ldr	r2, [pc, #240]	; (8008298 <TIM_Base_SetConfig+0x11c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d007      	beq.n	80081bc <TIM_Base_SetConfig+0x40>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a3b      	ldr	r2, [pc, #236]	; (800829c <TIM_Base_SetConfig+0x120>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d003      	beq.n	80081bc <TIM_Base_SetConfig+0x40>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a3a      	ldr	r2, [pc, #232]	; (80082a0 <TIM_Base_SetConfig+0x124>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d108      	bne.n	80081ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a2f      	ldr	r2, [pc, #188]	; (8008290 <TIM_Base_SetConfig+0x114>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d01f      	beq.n	8008216 <TIM_Base_SetConfig+0x9a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081dc:	d01b      	beq.n	8008216 <TIM_Base_SetConfig+0x9a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a2c      	ldr	r2, [pc, #176]	; (8008294 <TIM_Base_SetConfig+0x118>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d017      	beq.n	8008216 <TIM_Base_SetConfig+0x9a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a2b      	ldr	r2, [pc, #172]	; (8008298 <TIM_Base_SetConfig+0x11c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d013      	beq.n	8008216 <TIM_Base_SetConfig+0x9a>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a2a      	ldr	r2, [pc, #168]	; (800829c <TIM_Base_SetConfig+0x120>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00f      	beq.n	8008216 <TIM_Base_SetConfig+0x9a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a29      	ldr	r2, [pc, #164]	; (80082a0 <TIM_Base_SetConfig+0x124>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00b      	beq.n	8008216 <TIM_Base_SetConfig+0x9a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a28      	ldr	r2, [pc, #160]	; (80082a4 <TIM_Base_SetConfig+0x128>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d007      	beq.n	8008216 <TIM_Base_SetConfig+0x9a>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a27      	ldr	r2, [pc, #156]	; (80082a8 <TIM_Base_SetConfig+0x12c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d003      	beq.n	8008216 <TIM_Base_SetConfig+0x9a>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a26      	ldr	r2, [pc, #152]	; (80082ac <TIM_Base_SetConfig+0x130>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d108      	bne.n	8008228 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800821c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4313      	orrs	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a10      	ldr	r2, [pc, #64]	; (8008290 <TIM_Base_SetConfig+0x114>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00f      	beq.n	8008274 <TIM_Base_SetConfig+0xf8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a12      	ldr	r2, [pc, #72]	; (80082a0 <TIM_Base_SetConfig+0x124>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d00b      	beq.n	8008274 <TIM_Base_SetConfig+0xf8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a11      	ldr	r2, [pc, #68]	; (80082a4 <TIM_Base_SetConfig+0x128>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d007      	beq.n	8008274 <TIM_Base_SetConfig+0xf8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a10      	ldr	r2, [pc, #64]	; (80082a8 <TIM_Base_SetConfig+0x12c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d003      	beq.n	8008274 <TIM_Base_SetConfig+0xf8>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a0f      	ldr	r2, [pc, #60]	; (80082ac <TIM_Base_SetConfig+0x130>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d103      	bne.n	800827c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	615a      	str	r2, [r3, #20]
}
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	40010000 	.word	0x40010000
 8008294:	40000400 	.word	0x40000400
 8008298:	40000800 	.word	0x40000800
 800829c:	40000c00 	.word	0x40000c00
 80082a0:	40010400 	.word	0x40010400
 80082a4:	40014000 	.word	0x40014000
 80082a8:	40014400 	.word	0x40014400
 80082ac:	40014800 	.word	0x40014800

080082b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	f023 0201 	bic.w	r2, r3, #1
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4b37      	ldr	r3, [pc, #220]	; (80083b8 <TIM_OC1_SetConfig+0x108>)
 80082dc:	4013      	ands	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f023 0302 	bic.w	r3, r3, #2
 80082f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	4313      	orrs	r3, r2
 8008302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a2d      	ldr	r2, [pc, #180]	; (80083bc <TIM_OC1_SetConfig+0x10c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00f      	beq.n	800832c <TIM_OC1_SetConfig+0x7c>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a2c      	ldr	r2, [pc, #176]	; (80083c0 <TIM_OC1_SetConfig+0x110>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00b      	beq.n	800832c <TIM_OC1_SetConfig+0x7c>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a2b      	ldr	r2, [pc, #172]	; (80083c4 <TIM_OC1_SetConfig+0x114>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d007      	beq.n	800832c <TIM_OC1_SetConfig+0x7c>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a2a      	ldr	r2, [pc, #168]	; (80083c8 <TIM_OC1_SetConfig+0x118>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d003      	beq.n	800832c <TIM_OC1_SetConfig+0x7c>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a29      	ldr	r2, [pc, #164]	; (80083cc <TIM_OC1_SetConfig+0x11c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d10c      	bne.n	8008346 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f023 0308 	bic.w	r3, r3, #8
 8008332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f023 0304 	bic.w	r3, r3, #4
 8008344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a1c      	ldr	r2, [pc, #112]	; (80083bc <TIM_OC1_SetConfig+0x10c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d00f      	beq.n	800836e <TIM_OC1_SetConfig+0xbe>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a1b      	ldr	r2, [pc, #108]	; (80083c0 <TIM_OC1_SetConfig+0x110>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d00b      	beq.n	800836e <TIM_OC1_SetConfig+0xbe>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a1a      	ldr	r2, [pc, #104]	; (80083c4 <TIM_OC1_SetConfig+0x114>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d007      	beq.n	800836e <TIM_OC1_SetConfig+0xbe>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a19      	ldr	r2, [pc, #100]	; (80083c8 <TIM_OC1_SetConfig+0x118>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d003      	beq.n	800836e <TIM_OC1_SetConfig+0xbe>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a18      	ldr	r2, [pc, #96]	; (80083cc <TIM_OC1_SetConfig+0x11c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d111      	bne.n	8008392 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800837c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4313      	orrs	r3, r2
 8008386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	621a      	str	r2, [r3, #32]
}
 80083ac:	bf00      	nop
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	fffeff8f 	.word	0xfffeff8f
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40010400 	.word	0x40010400
 80083c4:	40014000 	.word	0x40014000
 80083c8:	40014400 	.word	0x40014400
 80083cc:	40014800 	.word	0x40014800

080083d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	f023 0210 	bic.w	r2, r3, #16
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4b34      	ldr	r3, [pc, #208]	; (80084cc <TIM_OC2_SetConfig+0xfc>)
 80083fc:	4013      	ands	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	4313      	orrs	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f023 0320 	bic.w	r3, r3, #32
 800841a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a29      	ldr	r2, [pc, #164]	; (80084d0 <TIM_OC2_SetConfig+0x100>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d003      	beq.n	8008438 <TIM_OC2_SetConfig+0x68>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a28      	ldr	r2, [pc, #160]	; (80084d4 <TIM_OC2_SetConfig+0x104>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d10d      	bne.n	8008454 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800843e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	011b      	lsls	r3, r3, #4
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	4313      	orrs	r3, r2
 800844a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008452:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a1e      	ldr	r2, [pc, #120]	; (80084d0 <TIM_OC2_SetConfig+0x100>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00f      	beq.n	800847c <TIM_OC2_SetConfig+0xac>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a1d      	ldr	r2, [pc, #116]	; (80084d4 <TIM_OC2_SetConfig+0x104>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00b      	beq.n	800847c <TIM_OC2_SetConfig+0xac>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a1c      	ldr	r2, [pc, #112]	; (80084d8 <TIM_OC2_SetConfig+0x108>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d007      	beq.n	800847c <TIM_OC2_SetConfig+0xac>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a1b      	ldr	r2, [pc, #108]	; (80084dc <TIM_OC2_SetConfig+0x10c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d003      	beq.n	800847c <TIM_OC2_SetConfig+0xac>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a1a      	ldr	r2, [pc, #104]	; (80084e0 <TIM_OC2_SetConfig+0x110>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d113      	bne.n	80084a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800848a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	621a      	str	r2, [r3, #32]
}
 80084be:	bf00      	nop
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	feff8fff 	.word	0xfeff8fff
 80084d0:	40010000 	.word	0x40010000
 80084d4:	40010400 	.word	0x40010400
 80084d8:	40014000 	.word	0x40014000
 80084dc:	40014400 	.word	0x40014400
 80084e0:	40014800 	.word	0x40014800

080084e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0303 	bic.w	r3, r3, #3
 800851a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800852c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	021b      	lsls	r3, r3, #8
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	4313      	orrs	r3, r2
 8008538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a27      	ldr	r2, [pc, #156]	; (80085dc <TIM_OC3_SetConfig+0xf8>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d003      	beq.n	800854a <TIM_OC3_SetConfig+0x66>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a26      	ldr	r2, [pc, #152]	; (80085e0 <TIM_OC3_SetConfig+0xfc>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d10d      	bne.n	8008566 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a1c      	ldr	r2, [pc, #112]	; (80085dc <TIM_OC3_SetConfig+0xf8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d00f      	beq.n	800858e <TIM_OC3_SetConfig+0xaa>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a1b      	ldr	r2, [pc, #108]	; (80085e0 <TIM_OC3_SetConfig+0xfc>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00b      	beq.n	800858e <TIM_OC3_SetConfig+0xaa>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a1a      	ldr	r2, [pc, #104]	; (80085e4 <TIM_OC3_SetConfig+0x100>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d007      	beq.n	800858e <TIM_OC3_SetConfig+0xaa>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a19      	ldr	r2, [pc, #100]	; (80085e8 <TIM_OC3_SetConfig+0x104>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d003      	beq.n	800858e <TIM_OC3_SetConfig+0xaa>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a18      	ldr	r2, [pc, #96]	; (80085ec <TIM_OC3_SetConfig+0x108>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d113      	bne.n	80085b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800859c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	621a      	str	r2, [r3, #32]
}
 80085d0:	bf00      	nop
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	40010000 	.word	0x40010000
 80085e0:	40010400 	.word	0x40010400
 80085e4:	40014000 	.word	0x40014000
 80085e8:	40014400 	.word	0x40014400
 80085ec:	40014800 	.word	0x40014800

080085f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800863a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	031b      	lsls	r3, r3, #12
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4313      	orrs	r3, r2
 8008646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a18      	ldr	r2, [pc, #96]	; (80086ac <TIM_OC4_SetConfig+0xbc>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00f      	beq.n	8008670 <TIM_OC4_SetConfig+0x80>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a17      	ldr	r2, [pc, #92]	; (80086b0 <TIM_OC4_SetConfig+0xc0>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d00b      	beq.n	8008670 <TIM_OC4_SetConfig+0x80>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a16      	ldr	r2, [pc, #88]	; (80086b4 <TIM_OC4_SetConfig+0xc4>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d007      	beq.n	8008670 <TIM_OC4_SetConfig+0x80>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a15      	ldr	r2, [pc, #84]	; (80086b8 <TIM_OC4_SetConfig+0xc8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d003      	beq.n	8008670 <TIM_OC4_SetConfig+0x80>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a14      	ldr	r2, [pc, #80]	; (80086bc <TIM_OC4_SetConfig+0xcc>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d109      	bne.n	8008684 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	019b      	lsls	r3, r3, #6
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	621a      	str	r2, [r3, #32]
}
 800869e:	bf00      	nop
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	40010000 	.word	0x40010000
 80086b0:	40010400 	.word	0x40010400
 80086b4:	40014000 	.word	0x40014000
 80086b8:	40014400 	.word	0x40014400
 80086bc:	40014800 	.word	0x40014800

080086c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	041b      	lsls	r3, r3, #16
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	4313      	orrs	r3, r2
 800870c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a17      	ldr	r2, [pc, #92]	; (8008770 <TIM_OC5_SetConfig+0xb0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00f      	beq.n	8008736 <TIM_OC5_SetConfig+0x76>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a16      	ldr	r2, [pc, #88]	; (8008774 <TIM_OC5_SetConfig+0xb4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00b      	beq.n	8008736 <TIM_OC5_SetConfig+0x76>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a15      	ldr	r2, [pc, #84]	; (8008778 <TIM_OC5_SetConfig+0xb8>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d007      	beq.n	8008736 <TIM_OC5_SetConfig+0x76>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a14      	ldr	r2, [pc, #80]	; (800877c <TIM_OC5_SetConfig+0xbc>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d003      	beq.n	8008736 <TIM_OC5_SetConfig+0x76>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a13      	ldr	r2, [pc, #76]	; (8008780 <TIM_OC5_SetConfig+0xc0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d109      	bne.n	800874a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800873c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	621a      	str	r2, [r3, #32]
}
 8008764:	bf00      	nop
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	40010000 	.word	0x40010000
 8008774:	40010400 	.word	0x40010400
 8008778:	40014000 	.word	0x40014000
 800877c:	40014400 	.word	0x40014400
 8008780:	40014800 	.word	0x40014800

08008784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	051b      	lsls	r3, r3, #20
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <TIM_OC6_SetConfig+0xb4>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00f      	beq.n	80087fc <TIM_OC6_SetConfig+0x78>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a17      	ldr	r2, [pc, #92]	; (800883c <TIM_OC6_SetConfig+0xb8>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00b      	beq.n	80087fc <TIM_OC6_SetConfig+0x78>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a16      	ldr	r2, [pc, #88]	; (8008840 <TIM_OC6_SetConfig+0xbc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d007      	beq.n	80087fc <TIM_OC6_SetConfig+0x78>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a15      	ldr	r2, [pc, #84]	; (8008844 <TIM_OC6_SetConfig+0xc0>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_OC6_SetConfig+0x78>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a14      	ldr	r2, [pc, #80]	; (8008848 <TIM_OC6_SetConfig+0xc4>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d109      	bne.n	8008810 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008802:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	029b      	lsls	r3, r3, #10
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40010000 	.word	0x40010000
 800883c:	40010400 	.word	0x40010400
 8008840:	40014000 	.word	0x40014000
 8008844:	40014400 	.word	0x40014400
 8008848:	40014800 	.word	0x40014800

0800884c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a1b      	ldr	r3, [r3, #32]
 800885c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	f023 0201 	bic.w	r2, r3, #1
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f023 030a 	bic.w	r3, r3, #10
 8008888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4313      	orrs	r3, r2
 8008890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	621a      	str	r2, [r3, #32]
}
 800889e:	bf00      	nop
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b087      	sub	sp, #28
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	f023 0210 	bic.w	r2, r3, #16
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	031b      	lsls	r3, r3, #12
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	4313      	orrs	r3, r2
 80088de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	011b      	lsls	r3, r3, #4
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	621a      	str	r2, [r3, #32]
}
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
	...

0800890c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4b09      	ldr	r3, [pc, #36]	; (8008944 <TIM_ITRx_SetConfig+0x38>)
 8008920:	4013      	ands	r3, r2
 8008922:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	f043 0307 	orr.w	r3, r3, #7
 800892e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	609a      	str	r2, [r3, #8]
}
 8008936:	bf00      	nop
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	ffcfff8f 	.word	0xffcfff8f

08008948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	021a      	lsls	r2, r3, #8
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	431a      	orrs	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4313      	orrs	r3, r2
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	609a      	str	r2, [r3, #8]
}
 800897c:	bf00      	nop
 800897e:	371c      	adds	r7, #28
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800899c:	2302      	movs	r3, #2
 800899e:	e068      	b.n	8008a72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a2e      	ldr	r2, [pc, #184]	; (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d004      	beq.n	80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a2d      	ldr	r2, [pc, #180]	; (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d108      	bne.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80089da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a1e      	ldr	r2, [pc, #120]	; (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d01d      	beq.n	8008a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a12:	d018      	beq.n	8008a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a1b      	ldr	r2, [pc, #108]	; (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d013      	beq.n	8008a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a1a      	ldr	r2, [pc, #104]	; (8008a8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d00e      	beq.n	8008a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a18      	ldr	r2, [pc, #96]	; (8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d009      	beq.n	8008a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a13      	ldr	r2, [pc, #76]	; (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d004      	beq.n	8008a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a14      	ldr	r2, [pc, #80]	; (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d10c      	bne.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	40010000 	.word	0x40010000
 8008a84:	40010400 	.word	0x40010400
 8008a88:	40000400 	.word	0x40000400
 8008a8c:	40000800 	.word	0x40000800
 8008a90:	40000c00 	.word	0x40000c00
 8008a94:	40001800 	.word	0x40001800

08008a98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d101      	bne.n	8008ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e065      	b.n	8008b80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	041b      	lsls	r3, r3, #16
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a16      	ldr	r2, [pc, #88]	; (8008b8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d004      	beq.n	8008b42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a14      	ldr	r2, [pc, #80]	; (8008b90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d115      	bne.n	8008b6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	051b      	lsls	r3, r3, #20
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	40010000 	.word	0x40010000
 8008b90:	40010400 	.word	0x40010400

08008b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e042      	b.n	8008c68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d106      	bne.n	8008bfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7f9 f835 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2224      	movs	r2, #36	; 0x24
 8008bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0201 	bic.w	r2, r2, #1
 8008c10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fcac 	bl	8009570 <UART_SetConfig>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e022      	b.n	8008c68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 fa00 	bl	800a030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689a      	ldr	r2, [r3, #8]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 fa87 	bl	800a174 <UART_CheckIdleState>
 8008c66:	4603      	mov	r3, r0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08a      	sub	sp, #40	; 0x28
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	f040 8083 	bne.w	8008d92 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <HAL_UART_Transmit+0x28>
 8008c92:	88fb      	ldrh	r3, [r7, #6]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e07b      	b.n	8008d94 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d101      	bne.n	8008caa <HAL_UART_Transmit+0x3a>
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	e074      	b.n	8008d94 <HAL_UART_Transmit+0x124>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2221      	movs	r2, #33	; 0x21
 8008cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cc2:	f7f9 fbe9 	bl	8002498 <HAL_GetTick>
 8008cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	88fa      	ldrh	r2, [r7, #6]
 8008ccc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	88fa      	ldrh	r2, [r7, #6]
 8008cd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce0:	d108      	bne.n	8008cf4 <HAL_UART_Transmit+0x84>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d104      	bne.n	8008cf4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	61bb      	str	r3, [r7, #24]
 8008cf2:	e003      	b.n	8008cfc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008d04:	e02c      	b.n	8008d60 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2180      	movs	r1, #128	; 0x80
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f001 fa7a 	bl	800a20a <UART_WaitOnFlagUntilTimeout>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e039      	b.n	8008d94 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10b      	bne.n	8008d3e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	3302      	adds	r3, #2
 8008d3a:	61bb      	str	r3, [r7, #24]
 8008d3c:	e007      	b.n	8008d4e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	781a      	ldrb	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1cc      	bne.n	8008d06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2200      	movs	r2, #0
 8008d74:	2140      	movs	r1, #64	; 0x40
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f001 fa47 	bl	800a20a <UART_WaitOnFlagUntilTimeout>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e006      	b.n	8008d94 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e000      	b.n	8008d94 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008d92:	2302      	movs	r3, #2
  }
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3720      	adds	r7, #32
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08a      	sub	sp, #40	; 0x28
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	4613      	mov	r3, r2
 8008daa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db2:	2b20      	cmp	r3, #32
 8008db4:	f040 80c0 	bne.w	8008f38 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <HAL_UART_Receive+0x28>
 8008dbe:	88fb      	ldrh	r3, [r7, #6]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e0b8      	b.n	8008f3a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d101      	bne.n	8008dd6 <HAL_UART_Receive+0x3a>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e0b1      	b.n	8008f3a <HAL_UART_Receive+0x19e>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2222      	movs	r2, #34	; 0x22
 8008dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008df4:	f7f9 fb50 	bl	8002498 <HAL_GetTick>
 8008df8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	88fa      	ldrh	r2, [r7, #6]
 8008dfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	88fa      	ldrh	r2, [r7, #6]
 8008e06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e12:	d10e      	bne.n	8008e32 <HAL_UART_Receive+0x96>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d105      	bne.n	8008e28 <HAL_UART_Receive+0x8c>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008e22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e26:	e02d      	b.n	8008e84 <HAL_UART_Receive+0xe8>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	22ff      	movs	r2, #255	; 0xff
 8008e2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e30:	e028      	b.n	8008e84 <HAL_UART_Receive+0xe8>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10d      	bne.n	8008e56 <HAL_UART_Receive+0xba>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d104      	bne.n	8008e4c <HAL_UART_Receive+0xb0>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	22ff      	movs	r2, #255	; 0xff
 8008e46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e4a:	e01b      	b.n	8008e84 <HAL_UART_Receive+0xe8>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	227f      	movs	r2, #127	; 0x7f
 8008e50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e54:	e016      	b.n	8008e84 <HAL_UART_Receive+0xe8>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e5e:	d10d      	bne.n	8008e7c <HAL_UART_Receive+0xe0>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d104      	bne.n	8008e72 <HAL_UART_Receive+0xd6>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	227f      	movs	r2, #127	; 0x7f
 8008e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e70:	e008      	b.n	8008e84 <HAL_UART_Receive+0xe8>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	223f      	movs	r2, #63	; 0x3f
 8008e76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e7a:	e003      	b.n	8008e84 <HAL_UART_Receive+0xe8>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e8a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e94:	d108      	bne.n	8008ea8 <HAL_UART_Receive+0x10c>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d104      	bne.n	8008ea8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	61bb      	str	r3, [r7, #24]
 8008ea6:	e003      	b.n	8008eb0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008eb8:	e032      	b.n	8008f20 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2120      	movs	r1, #32
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f001 f9a0 	bl	800a20a <UART_WaitOnFlagUntilTimeout>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e032      	b.n	8008f3a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10c      	bne.n	8008ef4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	8a7b      	ldrh	r3, [r7, #18]
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	3302      	adds	r3, #2
 8008ef0:	61bb      	str	r3, [r7, #24]
 8008ef2:	e00c      	b.n	8008f0e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	8a7b      	ldrh	r3, [r7, #18]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	4013      	ands	r3, r2
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1c6      	bne.n	8008eba <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2220      	movs	r2, #32
 8008f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e000      	b.n	8008f3a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8008f38:	2302      	movs	r3, #2
  }
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3720      	adds	r7, #32
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f58:	2b20      	cmp	r3, #32
 8008f5a:	d131      	bne.n	8008fc0 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <HAL_UART_Receive_IT+0x24>
 8008f62:	88fb      	ldrh	r3, [r7, #6]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e02a      	b.n	8008fc2 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <HAL_UART_Receive_IT+0x36>
 8008f76:	2302      	movs	r3, #2
 8008f78:	e023      	b.n	8008fc2 <HAL_UART_Receive_IT+0x7e>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a0f      	ldr	r2, [pc, #60]	; (8008fcc <HAL_UART_Receive_IT+0x88>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d00e      	beq.n	8008fb0 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fae:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008fb0:	88fb      	ldrh	r3, [r7, #6]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	68b9      	ldr	r1, [r7, #8]
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f001 f9a8 	bl	800a30c <UART_Start_Receive_IT>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	e000      	b.n	8008fc2 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008fc0:	2302      	movs	r3, #2
  }
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	58000c00 	.word	0x58000c00

08008fd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d118      	bne.n	8009032 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b00      	cmp	r3, #0
 8009008:	d013      	beq.n	8009032 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d009      	beq.n	8009032 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8282 	beq.w	800952c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	4798      	blx	r3
      }
      return;
 8009030:	e27c      	b.n	800952c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80ef 	beq.w	8009218 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	4b73      	ldr	r3, [pc, #460]	; (800920c <HAL_UART_IRQHandler+0x23c>)
 800903e:	4013      	ands	r3, r2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d105      	bne.n	8009050 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	4b72      	ldr	r3, [pc, #456]	; (8009210 <HAL_UART_IRQHandler+0x240>)
 8009048:	4013      	ands	r3, r2
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 80e4 	beq.w	8009218 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d010      	beq.n	800907c <HAL_UART_IRQHandler+0xac>
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00b      	beq.n	800907c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2201      	movs	r2, #1
 800906a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009072:	f043 0201 	orr.w	r2, r3, #1
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d010      	beq.n	80090a8 <HAL_UART_IRQHandler+0xd8>
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2202      	movs	r2, #2
 8009096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909e:	f043 0204 	orr.w	r2, r3, #4
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	f003 0304 	and.w	r3, r3, #4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d010      	beq.n	80090d4 <HAL_UART_IRQHandler+0x104>
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2204      	movs	r2, #4
 80090c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090ca:	f043 0202 	orr.w	r2, r3, #2
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f003 0308 	and.w	r3, r3, #8
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d015      	beq.n	800910a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	f003 0320 	and.w	r3, r3, #32
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d104      	bne.n	80090f2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	4b48      	ldr	r3, [pc, #288]	; (800920c <HAL_UART_IRQHandler+0x23c>)
 80090ec:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00b      	beq.n	800910a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2208      	movs	r2, #8
 80090f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009100:	f043 0208 	orr.w	r2, r3, #8
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009110:	2b00      	cmp	r3, #0
 8009112:	d011      	beq.n	8009138 <HAL_UART_IRQHandler+0x168>
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00c      	beq.n	8009138 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800912e:	f043 0220 	orr.w	r2, r3, #32
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 81f6 	beq.w	8009530 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b00      	cmp	r3, #0
 800914c:	d011      	beq.n	8009172 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	f003 0320 	and.w	r3, r3, #32
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d007      	beq.n	8009172 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009178:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009184:	2b40      	cmp	r3, #64	; 0x40
 8009186:	d004      	beq.n	8009192 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800918e:	2b00      	cmp	r3, #0
 8009190:	d031      	beq.n	80091f6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 f978 	bl	800a488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a2:	2b40      	cmp	r3, #64	; 0x40
 80091a4:	d123      	bne.n	80091ee <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091b4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d013      	beq.n	80091e6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091c2:	4a14      	ldr	r2, [pc, #80]	; (8009214 <HAL_UART_IRQHandler+0x244>)
 80091c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fa f9f0 	bl	80035b0 <HAL_DMA_Abort_IT>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d017      	beq.n	8009206 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80091e0:	4610      	mov	r0, r2
 80091e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e4:	e00f      	b.n	8009206 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f9ac 	bl	8009544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ec:	e00b      	b.n	8009206 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f9a8 	bl	8009544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f4:	e007      	b.n	8009206 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f9a4 	bl	8009544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009204:	e194      	b.n	8009530 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009206:	bf00      	nop
    return;
 8009208:	e192      	b.n	8009530 <HAL_UART_IRQHandler+0x560>
 800920a:	bf00      	nop
 800920c:	10000001 	.word	0x10000001
 8009210:	04000120 	.word	0x04000120
 8009214:	0800a4ed 	.word	0x0800a4ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800921c:	2b01      	cmp	r3, #1
 800921e:	f040 810f 	bne.w	8009440 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	f003 0310 	and.w	r3, r3, #16
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 8109 	beq.w	8009440 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	f003 0310 	and.w	r3, r3, #16
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 8103 	beq.w	8009440 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2210      	movs	r2, #16
 8009240:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924c:	2b40      	cmp	r3, #64	; 0x40
 800924e:	f040 80bb 	bne.w	80093c8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a96      	ldr	r2, [pc, #600]	; (80094b4 <HAL_UART_IRQHandler+0x4e4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d059      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a94      	ldr	r2, [pc, #592]	; (80094b8 <HAL_UART_IRQHandler+0x4e8>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d053      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a92      	ldr	r2, [pc, #584]	; (80094bc <HAL_UART_IRQHandler+0x4ec>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d04d      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a90      	ldr	r2, [pc, #576]	; (80094c0 <HAL_UART_IRQHandler+0x4f0>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d047      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a8e      	ldr	r2, [pc, #568]	; (80094c4 <HAL_UART_IRQHandler+0x4f4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d041      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a8c      	ldr	r2, [pc, #560]	; (80094c8 <HAL_UART_IRQHandler+0x4f8>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d03b      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a8a      	ldr	r2, [pc, #552]	; (80094cc <HAL_UART_IRQHandler+0x4fc>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d035      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a88      	ldr	r2, [pc, #544]	; (80094d0 <HAL_UART_IRQHandler+0x500>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d02f      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a86      	ldr	r2, [pc, #536]	; (80094d4 <HAL_UART_IRQHandler+0x504>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d029      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a84      	ldr	r2, [pc, #528]	; (80094d8 <HAL_UART_IRQHandler+0x508>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d023      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a82      	ldr	r2, [pc, #520]	; (80094dc <HAL_UART_IRQHandler+0x50c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d01d      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a80      	ldr	r2, [pc, #512]	; (80094e0 <HAL_UART_IRQHandler+0x510>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d017      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a7e      	ldr	r2, [pc, #504]	; (80094e4 <HAL_UART_IRQHandler+0x514>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d011      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a7c      	ldr	r2, [pc, #496]	; (80094e8 <HAL_UART_IRQHandler+0x518>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d00b      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a7a      	ldr	r2, [pc, #488]	; (80094ec <HAL_UART_IRQHandler+0x51c>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d005      	beq.n	8009312 <HAL_UART_IRQHandler+0x342>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a78      	ldr	r2, [pc, #480]	; (80094f0 <HAL_UART_IRQHandler+0x520>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d105      	bne.n	800931e <HAL_UART_IRQHandler+0x34e>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	b29b      	uxth	r3, r3
 800931c:	e004      	b.n	8009328 <HAL_UART_IRQHandler+0x358>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	b29b      	uxth	r3, r3
 8009328:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800932a:	893b      	ldrh	r3, [r7, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8101 	beq.w	8009534 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009338:	893a      	ldrh	r2, [r7, #8]
 800933a:	429a      	cmp	r2, r3
 800933c:	f080 80fa 	bcs.w	8009534 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	893a      	ldrh	r2, [r7, #8]
 8009344:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009352:	d02b      	beq.n	80093ac <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009362:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689a      	ldr	r2, [r3, #8]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0201 	bic.w	r2, r2, #1
 8009372:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009382:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 0210 	bic.w	r2, r2, #16
 80093a0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7f9 fde4 	bl	8002f74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	b29b      	uxth	r3, r3
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f8c9 	bl	8009558 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093c6:	e0b5      	b.n	8009534 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80a8 	beq.w	8009538 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80093e8:	897b      	ldrh	r3, [r7, #10]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 80a4 	beq.w	8009538 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80093fe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6899      	ldr	r1, [r3, #8]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	4b3a      	ldr	r3, [pc, #232]	; (80094f4 <HAL_UART_IRQHandler+0x524>)
 800940c:	400b      	ands	r3, r1
 800940e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2220      	movs	r2, #32
 8009414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0210 	bic.w	r2, r2, #16
 8009432:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009434:	897b      	ldrh	r3, [r7, #10]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f88d 	bl	8009558 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800943e:	e07b      	b.n	8009538 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00d      	beq.n	8009466 <HAL_UART_IRQHandler+0x496>
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d008      	beq.n	8009466 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800945c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f001 fbba 	bl	800abd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009464:	e06b      	b.n	800953e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946c:	2b00      	cmp	r3, #0
 800946e:	d012      	beq.n	8009496 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009476:	2b00      	cmp	r3, #0
 8009478:	d104      	bne.n	8009484 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d008      	beq.n	8009496 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009488:	2b00      	cmp	r3, #0
 800948a:	d057      	beq.n	800953c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	4798      	blx	r3
    }
    return;
 8009494:	e052      	b.n	800953c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	d02b      	beq.n	80094f8 <HAL_UART_IRQHandler+0x528>
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d026      	beq.n	80094f8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f001 f834 	bl	800a518 <UART_EndTransmit_IT>
    return;
 80094b0:	e045      	b.n	800953e <HAL_UART_IRQHandler+0x56e>
 80094b2:	bf00      	nop
 80094b4:	40020010 	.word	0x40020010
 80094b8:	40020028 	.word	0x40020028
 80094bc:	40020040 	.word	0x40020040
 80094c0:	40020058 	.word	0x40020058
 80094c4:	40020070 	.word	0x40020070
 80094c8:	40020088 	.word	0x40020088
 80094cc:	400200a0 	.word	0x400200a0
 80094d0:	400200b8 	.word	0x400200b8
 80094d4:	40020410 	.word	0x40020410
 80094d8:	40020428 	.word	0x40020428
 80094dc:	40020440 	.word	0x40020440
 80094e0:	40020458 	.word	0x40020458
 80094e4:	40020470 	.word	0x40020470
 80094e8:	40020488 	.word	0x40020488
 80094ec:	400204a0 	.word	0x400204a0
 80094f0:	400204b8 	.word	0x400204b8
 80094f4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d008      	beq.n	8009514 <HAL_UART_IRQHandler+0x544>
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 fb77 	bl	800ac00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009512:	e014      	b.n	800953e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00f      	beq.n	800953e <HAL_UART_IRQHandler+0x56e>
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b00      	cmp	r3, #0
 8009522:	da0c      	bge.n	800953e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fb61 	bl	800abec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800952a:	e008      	b.n	800953e <HAL_UART_IRQHandler+0x56e>
      return;
 800952c:	bf00      	nop
 800952e:	e006      	b.n	800953e <HAL_UART_IRQHandler+0x56e>
    return;
 8009530:	bf00      	nop
 8009532:	e004      	b.n	800953e <HAL_UART_IRQHandler+0x56e>
      return;
 8009534:	bf00      	nop
 8009536:	e002      	b.n	800953e <HAL_UART_IRQHandler+0x56e>
      return;
 8009538:	bf00      	nop
 800953a:	e000      	b.n	800953e <HAL_UART_IRQHandler+0x56e>
    return;
 800953c:	bf00      	nop
  }
}
 800953e:	3720      	adds	r7, #32
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009570:	b5b0      	push	{r4, r5, r7, lr}
 8009572:	b08e      	sub	sp, #56	; 0x38
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	689a      	ldr	r2, [r3, #8]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	431a      	orrs	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	431a      	orrs	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	4313      	orrs	r3, r2
 8009594:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	4bbf      	ldr	r3, [pc, #764]	; (800989c <UART_SetConfig+0x32c>)
 800959e:	4013      	ands	r3, r2
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6812      	ldr	r2, [r2, #0]
 80095a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095a6:	430b      	orrs	r3, r1
 80095a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68da      	ldr	r2, [r3, #12]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4ab5      	ldr	r2, [pc, #724]	; (80098a0 <UART_SetConfig+0x330>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d004      	beq.n	80095da <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d6:	4313      	orrs	r3, r2
 80095d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	4bb0      	ldr	r3, [pc, #704]	; (80098a4 <UART_SetConfig+0x334>)
 80095e2:	4013      	ands	r3, r2
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	6812      	ldr	r2, [r2, #0]
 80095e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095ea:	430b      	orrs	r3, r1
 80095ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	f023 010f 	bic.w	r1, r3, #15
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	430a      	orrs	r2, r1
 8009602:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4aa7      	ldr	r2, [pc, #668]	; (80098a8 <UART_SetConfig+0x338>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d176      	bne.n	80096fc <UART_SetConfig+0x18c>
 800960e:	4ba7      	ldr	r3, [pc, #668]	; (80098ac <UART_SetConfig+0x33c>)
 8009610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009616:	2b28      	cmp	r3, #40	; 0x28
 8009618:	d86c      	bhi.n	80096f4 <UART_SetConfig+0x184>
 800961a:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <UART_SetConfig+0xb0>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	080096c5 	.word	0x080096c5
 8009624:	080096f5 	.word	0x080096f5
 8009628:	080096f5 	.word	0x080096f5
 800962c:	080096f5 	.word	0x080096f5
 8009630:	080096f5 	.word	0x080096f5
 8009634:	080096f5 	.word	0x080096f5
 8009638:	080096f5 	.word	0x080096f5
 800963c:	080096f5 	.word	0x080096f5
 8009640:	080096cd 	.word	0x080096cd
 8009644:	080096f5 	.word	0x080096f5
 8009648:	080096f5 	.word	0x080096f5
 800964c:	080096f5 	.word	0x080096f5
 8009650:	080096f5 	.word	0x080096f5
 8009654:	080096f5 	.word	0x080096f5
 8009658:	080096f5 	.word	0x080096f5
 800965c:	080096f5 	.word	0x080096f5
 8009660:	080096d5 	.word	0x080096d5
 8009664:	080096f5 	.word	0x080096f5
 8009668:	080096f5 	.word	0x080096f5
 800966c:	080096f5 	.word	0x080096f5
 8009670:	080096f5 	.word	0x080096f5
 8009674:	080096f5 	.word	0x080096f5
 8009678:	080096f5 	.word	0x080096f5
 800967c:	080096f5 	.word	0x080096f5
 8009680:	080096dd 	.word	0x080096dd
 8009684:	080096f5 	.word	0x080096f5
 8009688:	080096f5 	.word	0x080096f5
 800968c:	080096f5 	.word	0x080096f5
 8009690:	080096f5 	.word	0x080096f5
 8009694:	080096f5 	.word	0x080096f5
 8009698:	080096f5 	.word	0x080096f5
 800969c:	080096f5 	.word	0x080096f5
 80096a0:	080096e5 	.word	0x080096e5
 80096a4:	080096f5 	.word	0x080096f5
 80096a8:	080096f5 	.word	0x080096f5
 80096ac:	080096f5 	.word	0x080096f5
 80096b0:	080096f5 	.word	0x080096f5
 80096b4:	080096f5 	.word	0x080096f5
 80096b8:	080096f5 	.word	0x080096f5
 80096bc:	080096f5 	.word	0x080096f5
 80096c0:	080096ed 	.word	0x080096ed
 80096c4:	2301      	movs	r3, #1
 80096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ca:	e222      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80096cc:	2304      	movs	r3, #4
 80096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d2:	e21e      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80096d4:	2308      	movs	r3, #8
 80096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096da:	e21a      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80096dc:	2310      	movs	r3, #16
 80096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e2:	e216      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80096e4:	2320      	movs	r3, #32
 80096e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ea:	e212      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80096ec:	2340      	movs	r3, #64	; 0x40
 80096ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f2:	e20e      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80096f4:	2380      	movs	r3, #128	; 0x80
 80096f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fa:	e20a      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a6b      	ldr	r2, [pc, #428]	; (80098b0 <UART_SetConfig+0x340>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d130      	bne.n	8009768 <UART_SetConfig+0x1f8>
 8009706:	4b69      	ldr	r3, [pc, #420]	; (80098ac <UART_SetConfig+0x33c>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	2b05      	cmp	r3, #5
 8009710:	d826      	bhi.n	8009760 <UART_SetConfig+0x1f0>
 8009712:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <UART_SetConfig+0x1a8>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	08009731 	.word	0x08009731
 800971c:	08009739 	.word	0x08009739
 8009720:	08009741 	.word	0x08009741
 8009724:	08009749 	.word	0x08009749
 8009728:	08009751 	.word	0x08009751
 800972c:	08009759 	.word	0x08009759
 8009730:	2300      	movs	r3, #0
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	e1ec      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009738:	2304      	movs	r3, #4
 800973a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973e:	e1e8      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009740:	2308      	movs	r3, #8
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009746:	e1e4      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009748:	2310      	movs	r3, #16
 800974a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974e:	e1e0      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009750:	2320      	movs	r3, #32
 8009752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009756:	e1dc      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009758:	2340      	movs	r3, #64	; 0x40
 800975a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800975e:	e1d8      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009760:	2380      	movs	r3, #128	; 0x80
 8009762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009766:	e1d4      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a51      	ldr	r2, [pc, #324]	; (80098b4 <UART_SetConfig+0x344>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d130      	bne.n	80097d4 <UART_SetConfig+0x264>
 8009772:	4b4e      	ldr	r3, [pc, #312]	; (80098ac <UART_SetConfig+0x33c>)
 8009774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b05      	cmp	r3, #5
 800977c:	d826      	bhi.n	80097cc <UART_SetConfig+0x25c>
 800977e:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <UART_SetConfig+0x214>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	0800979d 	.word	0x0800979d
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097ad 	.word	0x080097ad
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097bd 	.word	0x080097bd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	2300      	movs	r3, #0
 800979e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a2:	e1b6      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097aa:	e1b2      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b2:	e1ae      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ba:	e1aa      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80097bc:	2320      	movs	r3, #32
 80097be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097c2:	e1a6      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ca:	e1a2      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80097cc:	2380      	movs	r3, #128	; 0x80
 80097ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d2:	e19e      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a37      	ldr	r2, [pc, #220]	; (80098b8 <UART_SetConfig+0x348>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d130      	bne.n	8009840 <UART_SetConfig+0x2d0>
 80097de:	4b33      	ldr	r3, [pc, #204]	; (80098ac <UART_SetConfig+0x33c>)
 80097e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b05      	cmp	r3, #5
 80097e8:	d826      	bhi.n	8009838 <UART_SetConfig+0x2c8>
 80097ea:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <UART_SetConfig+0x280>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009809 	.word	0x08009809
 80097f4:	08009811 	.word	0x08009811
 80097f8:	08009819 	.word	0x08009819
 80097fc:	08009821 	.word	0x08009821
 8009800:	08009829 	.word	0x08009829
 8009804:	08009831 	.word	0x08009831
 8009808:	2300      	movs	r3, #0
 800980a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980e:	e180      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009810:	2304      	movs	r3, #4
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009816:	e17c      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009818:	2308      	movs	r3, #8
 800981a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981e:	e178      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009820:	2310      	movs	r3, #16
 8009822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009826:	e174      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009828:	2320      	movs	r3, #32
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982e:	e170      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009830:	2340      	movs	r3, #64	; 0x40
 8009832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009836:	e16c      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009838:	2380      	movs	r3, #128	; 0x80
 800983a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983e:	e168      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a1d      	ldr	r2, [pc, #116]	; (80098bc <UART_SetConfig+0x34c>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d142      	bne.n	80098d0 <UART_SetConfig+0x360>
 800984a:	4b18      	ldr	r3, [pc, #96]	; (80098ac <UART_SetConfig+0x33c>)
 800984c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b05      	cmp	r3, #5
 8009854:	d838      	bhi.n	80098c8 <UART_SetConfig+0x358>
 8009856:	a201      	add	r2, pc, #4	; (adr r2, 800985c <UART_SetConfig+0x2ec>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009875 	.word	0x08009875
 8009860:	0800987d 	.word	0x0800987d
 8009864:	08009885 	.word	0x08009885
 8009868:	0800988d 	.word	0x0800988d
 800986c:	08009895 	.word	0x08009895
 8009870:	080098c1 	.word	0x080098c1
 8009874:	2300      	movs	r3, #0
 8009876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987a:	e14a      	b.n	8009b12 <UART_SetConfig+0x5a2>
 800987c:	2304      	movs	r3, #4
 800987e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009882:	e146      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009884:	2308      	movs	r3, #8
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e142      	b.n	8009b12 <UART_SetConfig+0x5a2>
 800988c:	2310      	movs	r3, #16
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e13e      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009894:	2320      	movs	r3, #32
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e13a      	b.n	8009b12 <UART_SetConfig+0x5a2>
 800989c:	cfff69f3 	.word	0xcfff69f3
 80098a0:	58000c00 	.word	0x58000c00
 80098a4:	11fff4ff 	.word	0x11fff4ff
 80098a8:	40011000 	.word	0x40011000
 80098ac:	58024400 	.word	0x58024400
 80098b0:	40004400 	.word	0x40004400
 80098b4:	40004800 	.word	0x40004800
 80098b8:	40004c00 	.word	0x40004c00
 80098bc:	40005000 	.word	0x40005000
 80098c0:	2340      	movs	r3, #64	; 0x40
 80098c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c6:	e124      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80098c8:	2380      	movs	r3, #128	; 0x80
 80098ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ce:	e120      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4acc      	ldr	r2, [pc, #816]	; (8009c08 <UART_SetConfig+0x698>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d176      	bne.n	80099c8 <UART_SetConfig+0x458>
 80098da:	4bcc      	ldr	r3, [pc, #816]	; (8009c0c <UART_SetConfig+0x69c>)
 80098dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098e2:	2b28      	cmp	r3, #40	; 0x28
 80098e4:	d86c      	bhi.n	80099c0 <UART_SetConfig+0x450>
 80098e6:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <UART_SetConfig+0x37c>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009991 	.word	0x08009991
 80098f0:	080099c1 	.word	0x080099c1
 80098f4:	080099c1 	.word	0x080099c1
 80098f8:	080099c1 	.word	0x080099c1
 80098fc:	080099c1 	.word	0x080099c1
 8009900:	080099c1 	.word	0x080099c1
 8009904:	080099c1 	.word	0x080099c1
 8009908:	080099c1 	.word	0x080099c1
 800990c:	08009999 	.word	0x08009999
 8009910:	080099c1 	.word	0x080099c1
 8009914:	080099c1 	.word	0x080099c1
 8009918:	080099c1 	.word	0x080099c1
 800991c:	080099c1 	.word	0x080099c1
 8009920:	080099c1 	.word	0x080099c1
 8009924:	080099c1 	.word	0x080099c1
 8009928:	080099c1 	.word	0x080099c1
 800992c:	080099a1 	.word	0x080099a1
 8009930:	080099c1 	.word	0x080099c1
 8009934:	080099c1 	.word	0x080099c1
 8009938:	080099c1 	.word	0x080099c1
 800993c:	080099c1 	.word	0x080099c1
 8009940:	080099c1 	.word	0x080099c1
 8009944:	080099c1 	.word	0x080099c1
 8009948:	080099c1 	.word	0x080099c1
 800994c:	080099a9 	.word	0x080099a9
 8009950:	080099c1 	.word	0x080099c1
 8009954:	080099c1 	.word	0x080099c1
 8009958:	080099c1 	.word	0x080099c1
 800995c:	080099c1 	.word	0x080099c1
 8009960:	080099c1 	.word	0x080099c1
 8009964:	080099c1 	.word	0x080099c1
 8009968:	080099c1 	.word	0x080099c1
 800996c:	080099b1 	.word	0x080099b1
 8009970:	080099c1 	.word	0x080099c1
 8009974:	080099c1 	.word	0x080099c1
 8009978:	080099c1 	.word	0x080099c1
 800997c:	080099c1 	.word	0x080099c1
 8009980:	080099c1 	.word	0x080099c1
 8009984:	080099c1 	.word	0x080099c1
 8009988:	080099c1 	.word	0x080099c1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	2301      	movs	r3, #1
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009996:	e0bc      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009998:	2304      	movs	r3, #4
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	e0b8      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80099a0:	2308      	movs	r3, #8
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e0b4      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80099a8:	2310      	movs	r3, #16
 80099aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ae:	e0b0      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80099b0:	2320      	movs	r3, #32
 80099b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b6:	e0ac      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80099b8:	2340      	movs	r3, #64	; 0x40
 80099ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099be:	e0a8      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80099c0:	2380      	movs	r3, #128	; 0x80
 80099c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c6:	e0a4      	b.n	8009b12 <UART_SetConfig+0x5a2>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a90      	ldr	r2, [pc, #576]	; (8009c10 <UART_SetConfig+0x6a0>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d130      	bne.n	8009a34 <UART_SetConfig+0x4c4>
 80099d2:	4b8e      	ldr	r3, [pc, #568]	; (8009c0c <UART_SetConfig+0x69c>)
 80099d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	2b05      	cmp	r3, #5
 80099dc:	d826      	bhi.n	8009a2c <UART_SetConfig+0x4bc>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <UART_SetConfig+0x474>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	080099fd 	.word	0x080099fd
 80099e8:	08009a05 	.word	0x08009a05
 80099ec:	08009a0d 	.word	0x08009a0d
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a1d 	.word	0x08009a1d
 80099f8:	08009a25 	.word	0x08009a25
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a02:	e086      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a04:	2304      	movs	r3, #4
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e082      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a0c:	2308      	movs	r3, #8
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e07e      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a14:	2310      	movs	r3, #16
 8009a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1a:	e07a      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a1c:	2320      	movs	r3, #32
 8009a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a22:	e076      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2a:	e072      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a32:	e06e      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a76      	ldr	r2, [pc, #472]	; (8009c14 <UART_SetConfig+0x6a4>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d130      	bne.n	8009aa0 <UART_SetConfig+0x530>
 8009a3e:	4b73      	ldr	r3, [pc, #460]	; (8009c0c <UART_SetConfig+0x69c>)
 8009a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	d826      	bhi.n	8009a98 <UART_SetConfig+0x528>
 8009a4a:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <UART_SetConfig+0x4e0>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009a69 	.word	0x08009a69
 8009a54:	08009a71 	.word	0x08009a71
 8009a58:	08009a79 	.word	0x08009a79
 8009a5c:	08009a81 	.word	0x08009a81
 8009a60:	08009a89 	.word	0x08009a89
 8009a64:	08009a91 	.word	0x08009a91
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6e:	e050      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a70:	2304      	movs	r3, #4
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e04c      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a78:	2308      	movs	r3, #8
 8009a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7e:	e048      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a80:	2310      	movs	r3, #16
 8009a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a86:	e044      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a88:	2320      	movs	r3, #32
 8009a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8e:	e040      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a96:	e03c      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009a98:	2380      	movs	r3, #128	; 0x80
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e038      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a5c      	ldr	r2, [pc, #368]	; (8009c18 <UART_SetConfig+0x6a8>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d130      	bne.n	8009b0c <UART_SetConfig+0x59c>
 8009aaa:	4b58      	ldr	r3, [pc, #352]	; (8009c0c <UART_SetConfig+0x69c>)
 8009aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	2b05      	cmp	r3, #5
 8009ab4:	d826      	bhi.n	8009b04 <UART_SetConfig+0x594>
 8009ab6:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <UART_SetConfig+0x54c>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009ad5 	.word	0x08009ad5
 8009ac0:	08009add 	.word	0x08009add
 8009ac4:	08009ae5 	.word	0x08009ae5
 8009ac8:	08009aed 	.word	0x08009aed
 8009acc:	08009af5 	.word	0x08009af5
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ada:	e01a      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae2:	e016      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aea:	e012      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e00e      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009af4:	2320      	movs	r3, #32
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e00a      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e006      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009b04:	2380      	movs	r3, #128	; 0x80
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e002      	b.n	8009b12 <UART_SetConfig+0x5a2>
 8009b0c:	2380      	movs	r3, #128	; 0x80
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a40      	ldr	r2, [pc, #256]	; (8009c18 <UART_SetConfig+0x6a8>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	f040 80ef 	bne.w	8009cfc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b22:	2b20      	cmp	r3, #32
 8009b24:	dc46      	bgt.n	8009bb4 <UART_SetConfig+0x644>
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	f2c0 8081 	blt.w	8009c2e <UART_SetConfig+0x6be>
 8009b2c:	3b02      	subs	r3, #2
 8009b2e:	2b1e      	cmp	r3, #30
 8009b30:	d87d      	bhi.n	8009c2e <UART_SetConfig+0x6be>
 8009b32:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <UART_SetConfig+0x5c8>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009bbb 	.word	0x08009bbb
 8009b3c:	08009c2f 	.word	0x08009c2f
 8009b40:	08009bc3 	.word	0x08009bc3
 8009b44:	08009c2f 	.word	0x08009c2f
 8009b48:	08009c2f 	.word	0x08009c2f
 8009b4c:	08009c2f 	.word	0x08009c2f
 8009b50:	08009bd3 	.word	0x08009bd3
 8009b54:	08009c2f 	.word	0x08009c2f
 8009b58:	08009c2f 	.word	0x08009c2f
 8009b5c:	08009c2f 	.word	0x08009c2f
 8009b60:	08009c2f 	.word	0x08009c2f
 8009b64:	08009c2f 	.word	0x08009c2f
 8009b68:	08009c2f 	.word	0x08009c2f
 8009b6c:	08009c2f 	.word	0x08009c2f
 8009b70:	08009be3 	.word	0x08009be3
 8009b74:	08009c2f 	.word	0x08009c2f
 8009b78:	08009c2f 	.word	0x08009c2f
 8009b7c:	08009c2f 	.word	0x08009c2f
 8009b80:	08009c2f 	.word	0x08009c2f
 8009b84:	08009c2f 	.word	0x08009c2f
 8009b88:	08009c2f 	.word	0x08009c2f
 8009b8c:	08009c2f 	.word	0x08009c2f
 8009b90:	08009c2f 	.word	0x08009c2f
 8009b94:	08009c2f 	.word	0x08009c2f
 8009b98:	08009c2f 	.word	0x08009c2f
 8009b9c:	08009c2f 	.word	0x08009c2f
 8009ba0:	08009c2f 	.word	0x08009c2f
 8009ba4:	08009c2f 	.word	0x08009c2f
 8009ba8:	08009c2f 	.word	0x08009c2f
 8009bac:	08009c2f 	.word	0x08009c2f
 8009bb0:	08009c21 	.word	0x08009c21
 8009bb4:	2b40      	cmp	r3, #64	; 0x40
 8009bb6:	d036      	beq.n	8009c26 <UART_SetConfig+0x6b6>
 8009bb8:	e039      	b.n	8009c2e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009bba:	f7fd f99d 	bl	8006ef8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009bbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009bc0:	e03b      	b.n	8009c3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bc2:	f107 0314 	add.w	r3, r7, #20
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fd f9ac 	bl	8006f24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bd0:	e033      	b.n	8009c3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bd2:	f107 0308 	add.w	r3, r7, #8
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fd faf8 	bl	80071cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009be0:	e02b      	b.n	8009c3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009be2:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <UART_SetConfig+0x69c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 0320 	and.w	r3, r3, #32
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d009      	beq.n	8009c02 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bee:	4b07      	ldr	r3, [pc, #28]	; (8009c0c <UART_SetConfig+0x69c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	08db      	lsrs	r3, r3, #3
 8009bf4:	f003 0303 	and.w	r3, r3, #3
 8009bf8:	4a08      	ldr	r2, [pc, #32]	; (8009c1c <UART_SetConfig+0x6ac>)
 8009bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c00:	e01b      	b.n	8009c3a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009c02:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <UART_SetConfig+0x6ac>)
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c06:	e018      	b.n	8009c3a <UART_SetConfig+0x6ca>
 8009c08:	40011400 	.word	0x40011400
 8009c0c:	58024400 	.word	0x58024400
 8009c10:	40007800 	.word	0x40007800
 8009c14:	40007c00 	.word	0x40007c00
 8009c18:	58000c00 	.word	0x58000c00
 8009c1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c20:	4bc4      	ldr	r3, [pc, #784]	; (8009f34 <UART_SetConfig+0x9c4>)
 8009c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c24:	e009      	b.n	8009c3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c2c:	e005      	b.n	8009c3a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 81da 	beq.w	8009ff6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	4abc      	ldr	r2, [pc, #752]	; (8009f38 <UART_SetConfig+0x9c8>)
 8009c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c54:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	4413      	add	r3, r2
 8009c60:	6a3a      	ldr	r2, [r7, #32]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d305      	bcc.n	8009c72 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c6c:	6a3a      	ldr	r2, [r7, #32]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d903      	bls.n	8009c7a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009c78:	e1bd      	b.n	8009ff6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f04f 0100 	mov.w	r1, #0
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	4aac      	ldr	r2, [pc, #688]	; (8009f38 <UART_SetConfig+0x9c8>)
 8009c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	f04f 0300 	mov.w	r3, #0
 8009c92:	f7f6 fb75 	bl	8000380 <__aeabi_uldivmod>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	f04f 0200 	mov.w	r2, #0
 8009ca2:	f04f 0300 	mov.w	r3, #0
 8009ca6:	020b      	lsls	r3, r1, #8
 8009ca8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cac:	0202      	lsls	r2, r0, #8
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	6849      	ldr	r1, [r1, #4]
 8009cb2:	0849      	lsrs	r1, r1, #1
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	f04f 0100 	mov.w	r1, #0
 8009cba:	1814      	adds	r4, r2, r0
 8009cbc:	eb43 0501 	adc.w	r5, r3, r1
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f04f 0300 	mov.w	r3, #0
 8009cca:	4620      	mov	r0, r4
 8009ccc:	4629      	mov	r1, r5
 8009cce:	f7f6 fb57 	bl	8000380 <__aeabi_uldivmod>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ce0:	d308      	bcc.n	8009cf4 <UART_SetConfig+0x784>
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce8:	d204      	bcs.n	8009cf4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	e180      	b.n	8009ff6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009cfa:	e17c      	b.n	8009ff6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d04:	f040 80bf 	bne.w	8009e86 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009d08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d0c:	2b20      	cmp	r3, #32
 8009d0e:	dc49      	bgt.n	8009da4 <UART_SetConfig+0x834>
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	db7c      	blt.n	8009e0e <UART_SetConfig+0x89e>
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d87a      	bhi.n	8009e0e <UART_SetConfig+0x89e>
 8009d18:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <UART_SetConfig+0x7b0>)
 8009d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1e:	bf00      	nop
 8009d20:	08009dab 	.word	0x08009dab
 8009d24:	08009db3 	.word	0x08009db3
 8009d28:	08009e0f 	.word	0x08009e0f
 8009d2c:	08009e0f 	.word	0x08009e0f
 8009d30:	08009dbb 	.word	0x08009dbb
 8009d34:	08009e0f 	.word	0x08009e0f
 8009d38:	08009e0f 	.word	0x08009e0f
 8009d3c:	08009e0f 	.word	0x08009e0f
 8009d40:	08009dcb 	.word	0x08009dcb
 8009d44:	08009e0f 	.word	0x08009e0f
 8009d48:	08009e0f 	.word	0x08009e0f
 8009d4c:	08009e0f 	.word	0x08009e0f
 8009d50:	08009e0f 	.word	0x08009e0f
 8009d54:	08009e0f 	.word	0x08009e0f
 8009d58:	08009e0f 	.word	0x08009e0f
 8009d5c:	08009e0f 	.word	0x08009e0f
 8009d60:	08009ddb 	.word	0x08009ddb
 8009d64:	08009e0f 	.word	0x08009e0f
 8009d68:	08009e0f 	.word	0x08009e0f
 8009d6c:	08009e0f 	.word	0x08009e0f
 8009d70:	08009e0f 	.word	0x08009e0f
 8009d74:	08009e0f 	.word	0x08009e0f
 8009d78:	08009e0f 	.word	0x08009e0f
 8009d7c:	08009e0f 	.word	0x08009e0f
 8009d80:	08009e0f 	.word	0x08009e0f
 8009d84:	08009e0f 	.word	0x08009e0f
 8009d88:	08009e0f 	.word	0x08009e0f
 8009d8c:	08009e0f 	.word	0x08009e0f
 8009d90:	08009e0f 	.word	0x08009e0f
 8009d94:	08009e0f 	.word	0x08009e0f
 8009d98:	08009e0f 	.word	0x08009e0f
 8009d9c:	08009e0f 	.word	0x08009e0f
 8009da0:	08009e01 	.word	0x08009e01
 8009da4:	2b40      	cmp	r3, #64	; 0x40
 8009da6:	d02e      	beq.n	8009e06 <UART_SetConfig+0x896>
 8009da8:	e031      	b.n	8009e0e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009daa:	f7fc f939 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 8009dae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009db0:	e033      	b.n	8009e1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009db2:	f7fc f94b 	bl	800604c <HAL_RCC_GetPCLK2Freq>
 8009db6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009db8:	e02f      	b.n	8009e1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dba:	f107 0314 	add.w	r3, r7, #20
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fd f8b0 	bl	8006f24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dc8:	e027      	b.n	8009e1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dca:	f107 0308 	add.w	r3, r7, #8
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fd f9fc 	bl	80071cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dd8:	e01f      	b.n	8009e1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dda:	4b58      	ldr	r3, [pc, #352]	; (8009f3c <UART_SetConfig+0x9cc>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d009      	beq.n	8009dfa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009de6:	4b55      	ldr	r3, [pc, #340]	; (8009f3c <UART_SetConfig+0x9cc>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	08db      	lsrs	r3, r3, #3
 8009dec:	f003 0303 	and.w	r3, r3, #3
 8009df0:	4a53      	ldr	r2, [pc, #332]	; (8009f40 <UART_SetConfig+0x9d0>)
 8009df2:	fa22 f303 	lsr.w	r3, r2, r3
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009df8:	e00f      	b.n	8009e1a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009dfa:	4b51      	ldr	r3, [pc, #324]	; (8009f40 <UART_SetConfig+0x9d0>)
 8009dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dfe:	e00c      	b.n	8009e1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e00:	4b4c      	ldr	r3, [pc, #304]	; (8009f34 <UART_SetConfig+0x9c4>)
 8009e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e04:	e009      	b.n	8009e1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e0c:	e005      	b.n	8009e1a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 80ea 	beq.w	8009ff6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	4a44      	ldr	r2, [pc, #272]	; (8009f38 <UART_SetConfig+0x9c8>)
 8009e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e34:	005a      	lsls	r2, r3, #1
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	085b      	lsrs	r3, r3, #1
 8009e3c:	441a      	add	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4c:	2b0f      	cmp	r3, #15
 8009e4e:	d916      	bls.n	8009e7e <UART_SetConfig+0x90e>
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e56:	d212      	bcs.n	8009e7e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	f023 030f 	bic.w	r3, r3, #15
 8009e60:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	085b      	lsrs	r3, r3, #1
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	f003 0307 	and.w	r3, r3, #7
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e70:	4313      	orrs	r3, r2
 8009e72:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e7a:	60da      	str	r2, [r3, #12]
 8009e7c:	e0bb      	b.n	8009ff6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e84:	e0b7      	b.n	8009ff6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	dc4a      	bgt.n	8009f24 <UART_SetConfig+0x9b4>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f2c0 8086 	blt.w	8009fa0 <UART_SetConfig+0xa30>
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	f200 8083 	bhi.w	8009fa0 <UART_SetConfig+0xa30>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <UART_SetConfig+0x930>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009f2b 	.word	0x08009f2b
 8009ea4:	08009f45 	.word	0x08009f45
 8009ea8:	08009fa1 	.word	0x08009fa1
 8009eac:	08009fa1 	.word	0x08009fa1
 8009eb0:	08009f4d 	.word	0x08009f4d
 8009eb4:	08009fa1 	.word	0x08009fa1
 8009eb8:	08009fa1 	.word	0x08009fa1
 8009ebc:	08009fa1 	.word	0x08009fa1
 8009ec0:	08009f5d 	.word	0x08009f5d
 8009ec4:	08009fa1 	.word	0x08009fa1
 8009ec8:	08009fa1 	.word	0x08009fa1
 8009ecc:	08009fa1 	.word	0x08009fa1
 8009ed0:	08009fa1 	.word	0x08009fa1
 8009ed4:	08009fa1 	.word	0x08009fa1
 8009ed8:	08009fa1 	.word	0x08009fa1
 8009edc:	08009fa1 	.word	0x08009fa1
 8009ee0:	08009f6d 	.word	0x08009f6d
 8009ee4:	08009fa1 	.word	0x08009fa1
 8009ee8:	08009fa1 	.word	0x08009fa1
 8009eec:	08009fa1 	.word	0x08009fa1
 8009ef0:	08009fa1 	.word	0x08009fa1
 8009ef4:	08009fa1 	.word	0x08009fa1
 8009ef8:	08009fa1 	.word	0x08009fa1
 8009efc:	08009fa1 	.word	0x08009fa1
 8009f00:	08009fa1 	.word	0x08009fa1
 8009f04:	08009fa1 	.word	0x08009fa1
 8009f08:	08009fa1 	.word	0x08009fa1
 8009f0c:	08009fa1 	.word	0x08009fa1
 8009f10:	08009fa1 	.word	0x08009fa1
 8009f14:	08009fa1 	.word	0x08009fa1
 8009f18:	08009fa1 	.word	0x08009fa1
 8009f1c:	08009fa1 	.word	0x08009fa1
 8009f20:	08009f93 	.word	0x08009f93
 8009f24:	2b40      	cmp	r3, #64	; 0x40
 8009f26:	d037      	beq.n	8009f98 <UART_SetConfig+0xa28>
 8009f28:	e03a      	b.n	8009fa0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f2a:	f7fc f879 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 8009f2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f30:	e03c      	b.n	8009fac <UART_SetConfig+0xa3c>
 8009f32:	bf00      	nop
 8009f34:	003d0900 	.word	0x003d0900
 8009f38:	0800bd60 	.word	0x0800bd60
 8009f3c:	58024400 	.word	0x58024400
 8009f40:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f44:	f7fc f882 	bl	800604c <HAL_RCC_GetPCLK2Freq>
 8009f48:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f4a:	e02f      	b.n	8009fac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f4c:	f107 0314 	add.w	r3, r7, #20
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fc ffe7 	bl	8006f24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f5a:	e027      	b.n	8009fac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f5c:	f107 0308 	add.w	r3, r7, #8
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fd f933 	bl	80071cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f6a:	e01f      	b.n	8009fac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f6c:	4b2c      	ldr	r3, [pc, #176]	; (800a020 <UART_SetConfig+0xab0>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0320 	and.w	r3, r3, #32
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d009      	beq.n	8009f8c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f78:	4b29      	ldr	r3, [pc, #164]	; (800a020 <UART_SetConfig+0xab0>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	08db      	lsrs	r3, r3, #3
 8009f7e:	f003 0303 	and.w	r3, r3, #3
 8009f82:	4a28      	ldr	r2, [pc, #160]	; (800a024 <UART_SetConfig+0xab4>)
 8009f84:	fa22 f303 	lsr.w	r3, r2, r3
 8009f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f8a:	e00f      	b.n	8009fac <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009f8c:	4b25      	ldr	r3, [pc, #148]	; (800a024 <UART_SetConfig+0xab4>)
 8009f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f90:	e00c      	b.n	8009fac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f92:	4b25      	ldr	r3, [pc, #148]	; (800a028 <UART_SetConfig+0xab8>)
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f96:	e009      	b.n	8009fac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f9e:	e005      	b.n	8009fac <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009faa:	bf00      	nop
    }

    if (pclk != 0U)
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d021      	beq.n	8009ff6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	4a1d      	ldr	r2, [pc, #116]	; (800a02c <UART_SetConfig+0xabc>)
 8009fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	085b      	lsrs	r3, r3, #1
 8009fca:	441a      	add	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fda:	2b0f      	cmp	r3, #15
 8009fdc:	d908      	bls.n	8009ff0 <UART_SetConfig+0xa80>
 8009fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fe4:	d204      	bcs.n	8009ff0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fec:	60da      	str	r2, [r3, #12]
 8009fee:	e002      	b.n	8009ff6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a012:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a016:	4618      	mov	r0, r3
 800a018:	3738      	adds	r7, #56	; 0x38
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bdb0      	pop	{r4, r5, r7, pc}
 800a01e:	bf00      	nop
 800a020:	58024400 	.word	0x58024400
 800a024:	03d09000 	.word	0x03d09000
 800a028:	003d0900 	.word	0x003d0900
 800a02c:	0800bd60 	.word	0x0800bd60

0800a030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00a      	beq.n	800a05a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05e:	f003 0302 	and.w	r3, r3, #2
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00a      	beq.n	800a07c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00a      	beq.n	800a09e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a2:	f003 0308 	and.w	r3, r3, #8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c4:	f003 0310 	and.w	r3, r3, #16
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00a      	beq.n	800a0e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e6:	f003 0320 	and.w	r3, r3, #32
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	430a      	orrs	r2, r1
 800a102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d01a      	beq.n	800a146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	430a      	orrs	r2, r1
 800a124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a12e:	d10a      	bne.n	800a146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	605a      	str	r2, [r3, #4]
  }
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af02      	add	r7, sp, #8
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a184:	f7f8 f988 	bl	8002498 <HAL_GetTick>
 800a188:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0308 	and.w	r3, r3, #8
 800a194:	2b08      	cmp	r3, #8
 800a196:	d10e      	bne.n	800a1b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f82f 	bl	800a20a <UART_WaitOnFlagUntilTimeout>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	e025      	b.n	800a202 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	d10e      	bne.n	800a1e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f819 	bl	800a20a <UART_WaitOnFlagUntilTimeout>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e00f      	b.n	800a202 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2220      	movs	r2, #32
 800a1ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	603b      	str	r3, [r7, #0]
 800a216:	4613      	mov	r3, r2
 800a218:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a21a:	e062      	b.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a222:	d05e      	beq.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a224:	f7f8 f938 	bl	8002498 <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	429a      	cmp	r2, r3
 800a232:	d302      	bcc.n	800a23a <UART_WaitOnFlagUntilTimeout+0x30>
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d11d      	bne.n	800a276 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a248:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f022 0201 	bic.w	r2, r2, #1
 800a258:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2220      	movs	r2, #32
 800a25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2220      	movs	r2, #32
 800a266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e045      	b.n	800a302 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b00      	cmp	r3, #0
 800a282:	d02e      	beq.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a28e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a292:	d126      	bne.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a29c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a2ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0201 	bic.w	r2, r2, #1
 800a2bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2220      	movs	r2, #32
 800a2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2220      	movs	r2, #32
 800a2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e00f      	b.n	800a302 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69da      	ldr	r2, [r3, #28]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	bf0c      	ite	eq
 800a2f2:	2301      	moveq	r3, #1
 800a2f4:	2300      	movne	r3, #0
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d08d      	beq.n	800a21c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
	...

0800a30c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	4613      	mov	r3, r2
 800a318:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	88fa      	ldrh	r2, [r7, #6]
 800a324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	88fa      	ldrh	r2, [r7, #6]
 800a32c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a33e:	d10e      	bne.n	800a35e <UART_Start_Receive_IT+0x52>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d105      	bne.n	800a354 <UART_Start_Receive_IT+0x48>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a34e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a352:	e02d      	b.n	800a3b0 <UART_Start_Receive_IT+0xa4>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	22ff      	movs	r2, #255	; 0xff
 800a358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a35c:	e028      	b.n	800a3b0 <UART_Start_Receive_IT+0xa4>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10d      	bne.n	800a382 <UART_Start_Receive_IT+0x76>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d104      	bne.n	800a378 <UART_Start_Receive_IT+0x6c>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	22ff      	movs	r2, #255	; 0xff
 800a372:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a376:	e01b      	b.n	800a3b0 <UART_Start_Receive_IT+0xa4>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	227f      	movs	r2, #127	; 0x7f
 800a37c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a380:	e016      	b.n	800a3b0 <UART_Start_Receive_IT+0xa4>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a38a:	d10d      	bne.n	800a3a8 <UART_Start_Receive_IT+0x9c>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d104      	bne.n	800a39e <UART_Start_Receive_IT+0x92>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	227f      	movs	r2, #127	; 0x7f
 800a398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a39c:	e008      	b.n	800a3b0 <UART_Start_Receive_IT+0xa4>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	223f      	movs	r2, #63	; 0x3f
 800a3a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3a6:	e003      	b.n	800a3b0 <UART_Start_Receive_IT+0xa4>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2222      	movs	r2, #34	; 0x22
 800a3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689a      	ldr	r2, [r3, #8]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f042 0201 	orr.w	r2, r2, #1
 800a3ce:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3d8:	d12a      	bne.n	800a430 <UART_Start_Receive_IT+0x124>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a3e0:	88fa      	ldrh	r2, [r7, #6]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d324      	bcc.n	800a430 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ee:	d107      	bne.n	800a400 <UART_Start_Receive_IT+0xf4>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d103      	bne.n	800a400 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4a1f      	ldr	r2, [pc, #124]	; (800a478 <UART_Start_Receive_IT+0x16c>)
 800a3fc:	671a      	str	r2, [r3, #112]	; 0x70
 800a3fe:	e002      	b.n	800a406 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4a1e      	ldr	r2, [pc, #120]	; (800a47c <UART_Start_Receive_IT+0x170>)
 800a404:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a41c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689a      	ldr	r2, [r3, #8]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a42c:	609a      	str	r2, [r3, #8]
 800a42e:	e01b      	b.n	800a468 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a438:	d107      	bne.n	800a44a <UART_Start_Receive_IT+0x13e>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d103      	bne.n	800a44a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4a0e      	ldr	r2, [pc, #56]	; (800a480 <UART_Start_Receive_IT+0x174>)
 800a446:	671a      	str	r2, [r3, #112]	; 0x70
 800a448:	e002      	b.n	800a450 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4a0d      	ldr	r2, [pc, #52]	; (800a484 <UART_Start_Receive_IT+0x178>)
 800a44e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a466:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	0800a901 	.word	0x0800a901
 800a47c:	0800a6fd 	.word	0x0800a6fd
 800a480:	0800a625 	.word	0x0800a625
 800a484:	0800a54d 	.word	0x0800a54d

0800a488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a49e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6899      	ldr	r1, [r3, #8]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4b0f      	ldr	r3, [pc, #60]	; (800a4e8 <UART_EndRxTransfer+0x60>)
 800a4ac:	400b      	ands	r3, r1
 800a4ae:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d107      	bne.n	800a4c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 0210 	bic.w	r2, r2, #16
 800a4c6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	effffffe 	.word	0xeffffffe

0800a4ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f7ff f81a 	bl	8009544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a52e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2220      	movs	r2, #32
 800a534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7f7 f92e 	bl	80017a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a55a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a562:	2b22      	cmp	r3, #34	; 0x22
 800a564:	d152      	bne.n	800a60c <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a56e:	89bb      	ldrh	r3, [r7, #12]
 800a570:	b2d9      	uxtb	r1, r3
 800a572:	89fb      	ldrh	r3, [r7, #14]
 800a574:	b2da      	uxtb	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a57a:	400a      	ands	r2, r1
 800a57c:	b2d2      	uxtb	r2, r2
 800a57e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a584:	1c5a      	adds	r2, r3, #1
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a590:	b29b      	uxth	r3, r3
 800a592:	3b01      	subs	r3, #1
 800a594:	b29a      	uxth	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d139      	bne.n	800a61c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a5b6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	689a      	ldr	r2, [r3, #8]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f022 0201 	bic.w	r2, r2, #1
 800a5c6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d10f      	bne.n	800a5fe <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 0210 	bic.w	r2, r2, #16
 800a5ec:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7fe ffae 	bl	8009558 <HAL_UARTEx_RxEventCallback>
 800a5fc:	e002      	b.n	800a604 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7f7 f8b8 	bl	8001774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a60a:	e007      	b.n	800a61c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f042 0208 	orr.w	r2, r2, #8
 800a61a:	619a      	str	r2, [r3, #24]
}
 800a61c:	bf00      	nop
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a632:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63a:	2b22      	cmp	r3, #34	; 0x22
 800a63c:	d152      	bne.n	800a6e4 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a644:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a64a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a64c:	89ba      	ldrh	r2, [r7, #12]
 800a64e:	89fb      	ldrh	r3, [r7, #14]
 800a650:	4013      	ands	r3, r2
 800a652:	b29a      	uxth	r2, r3
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a65c:	1c9a      	adds	r2, r3, #2
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a668:	b29b      	uxth	r3, r3
 800a66a:	3b01      	subs	r3, #1
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d139      	bne.n	800a6f4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a68e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689a      	ldr	r2, [r3, #8]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0201 	bic.w	r2, r2, #1
 800a69e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d10f      	bne.n	800a6d6 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0210 	bic.w	r2, r2, #16
 800a6c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f7fe ff42 	bl	8009558 <HAL_UARTEx_RxEventCallback>
 800a6d4:	e002      	b.n	800a6dc <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7f7 f84c 	bl	8001774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a6e2:	e007      	b.n	800a6f4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	699a      	ldr	r2, [r3, #24]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f042 0208 	orr.w	r2, r2, #8
 800a6f2:	619a      	str	r2, [r3, #24]
}
 800a6f4:	bf00      	nop
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b088      	sub	sp, #32
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a70a:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72a:	2b22      	cmp	r3, #34	; 0x22
 800a72c:	f040 80d8 	bne.w	800a8e0 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a736:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a738:	e0a8      	b.n	800a88c <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a742:	89bb      	ldrh	r3, [r7, #12]
 800a744:	b2d9      	uxtb	r1, r3
 800a746:	8b7b      	ldrh	r3, [r7, #26]
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74e:	400a      	ands	r2, r1
 800a750:	b2d2      	uxtb	r2, r2
 800a752:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a764:	b29b      	uxth	r3, r3
 800a766:	3b01      	subs	r3, #1
 800a768:	b29a      	uxth	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d04d      	beq.n	800a81e <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d010      	beq.n	800a7ae <UART_RxISR_8BIT_FIFOEN+0xb2>
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00b      	beq.n	800a7ae <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2201      	movs	r2, #1
 800a79c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7a4:	f043 0201 	orr.w	r2, r3, #1
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	f003 0302 	and.w	r3, r3, #2
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d010      	beq.n	800a7da <UART_RxISR_8BIT_FIFOEN+0xde>
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00b      	beq.n	800a7da <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7d0:	f043 0204 	orr.w	r2, r3, #4
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	f003 0304 	and.w	r3, r3, #4
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d010      	beq.n	800a806 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2204      	movs	r2, #4
 800a7f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7fc:	f043 0202 	orr.w	r2, r3, #2
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d006      	beq.n	800a81e <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7fe fe97 	bl	8009544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a824:	b29b      	uxth	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d130      	bne.n	800a88c <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a838:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6899      	ldr	r1, [r3, #8]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	4b2c      	ldr	r3, [pc, #176]	; (800a8f8 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800a846:	400b      	ands	r3, r1
 800a848:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2220      	movs	r2, #32
 800a84e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d10f      	bne.n	800a880 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 0210 	bic.w	r2, r2, #16
 800a86e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7fe fe6d 	bl	8009558 <HAL_UARTEx_RxEventCallback>
 800a87e:	e002      	b.n	800a886 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7f6 ff77 	bl	8001774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a88c:	89fb      	ldrh	r3, [r7, #14]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d005      	beq.n	800a89e <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f47f af4e 	bne.w	800a73a <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8a4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a8a6:	897b      	ldrh	r3, [r7, #10]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d021      	beq.n	800a8f0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a8b2:	897a      	ldrh	r2, [r7, #10]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d21b      	bcs.n	800a8f0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689a      	ldr	r2, [r3, #8]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a8c6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a0c      	ldr	r2, [pc, #48]	; (800a8fc <UART_RxISR_8BIT_FIFOEN+0x200>)
 800a8cc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f042 0220 	orr.w	r2, r2, #32
 800a8dc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8de:	e007      	b.n	800a8f0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	699a      	ldr	r2, [r3, #24]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f042 0208 	orr.w	r2, r2, #8
 800a8ee:	619a      	str	r2, [r3, #24]
}
 800a8f0:	bf00      	nop
 800a8f2:	3720      	adds	r7, #32
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	effffffe 	.word	0xeffffffe
 800a8fc:	0800a54d 	.word	0x0800a54d

0800a900 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b08a      	sub	sp, #40	; 0x28
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a90e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	69db      	ldr	r3, [r3, #28]
 800a916:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92e:	2b22      	cmp	r3, #34	; 0x22
 800a930:	f040 80d8 	bne.w	800aae4 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a93a:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a93c:	e0a8      	b.n	800aa90 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a94a:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a94c:	8aba      	ldrh	r2, [r7, #20]
 800a94e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a950:	4013      	ands	r3, r2
 800a952:	b29a      	uxth	r2, r3
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a95c:	1c9a      	adds	r2, r3, #2
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a968:	b29b      	uxth	r3, r3
 800a96a:	3b01      	subs	r3, #1
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97e:	f003 0307 	and.w	r3, r3, #7
 800a982:	2b00      	cmp	r3, #0
 800a984:	d04d      	beq.n	800aa22 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d010      	beq.n	800a9b2 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00b      	beq.n	800a9b2 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9a8:	f043 0201 	orr.w	r2, r3, #1
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d010      	beq.n	800a9de <UART_RxISR_16BIT_FIFOEN+0xde>
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00b      	beq.n	800a9de <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9d4:	f043 0204 	orr.w	r2, r3, #4
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	f003 0304 	and.w	r3, r3, #4
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d010      	beq.n	800aa0a <UART_RxISR_16BIT_FIFOEN+0x10a>
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00b      	beq.n	800aa0a <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2204      	movs	r2, #4
 800a9f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa00:	f043 0202 	orr.w	r2, r3, #2
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d006      	beq.n	800aa22 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7fe fd95 	bl	8009544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d130      	bne.n	800aa90 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa3c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	6899      	ldr	r1, [r3, #8]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	4b2c      	ldr	r3, [pc, #176]	; (800aafc <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800aa4a:	400b      	ands	r3, r1
 800aa4c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2220      	movs	r2, #32
 800aa52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d10f      	bne.n	800aa84 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 0210 	bic.w	r2, r2, #16
 800aa72:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7fe fd6b 	bl	8009558 <HAL_UARTEx_RxEventCallback>
 800aa82:	e002      	b.n	800aa8a <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f7f6 fe75 	bl	8001774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa90:	8afb      	ldrh	r3, [r7, #22]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d005      	beq.n	800aaa2 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800aa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa98:	f003 0320 	and.w	r3, r3, #32
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f47f af4e 	bne.w	800a93e <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aaa8:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aaaa:	89fb      	ldrh	r3, [r7, #14]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d021      	beq.n	800aaf4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aab6:	89fa      	ldrh	r2, [r7, #14]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d21b      	bcs.n	800aaf4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	689a      	ldr	r2, [r3, #8]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aaca:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a0c      	ldr	r2, [pc, #48]	; (800ab00 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800aad0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f042 0220 	orr.w	r2, r2, #32
 800aae0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aae2:	e007      	b.n	800aaf4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	699a      	ldr	r2, [r3, #24]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0208 	orr.w	r2, r2, #8
 800aaf2:	619a      	str	r2, [r3, #24]
}
 800aaf4:	bf00      	nop
 800aaf6:	3728      	adds	r7, #40	; 0x28
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	effffffe 	.word	0xeffffffe
 800ab00:	0800a625 	.word	0x0800a625

0800ab04 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e056      	b.n	800abca <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d106      	bne.n	800ab34 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f7f7 f898 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2224      	movs	r2, #36	; 0x24
 800ab38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 0201 	bic.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7fe fd0f 	bl	8009570 <UART_SetConfig>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d101      	bne.n	800ab5c <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e036      	b.n	800abca <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d002      	beq.n	800ab6a <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f7ff fa63 	bl	800a030 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689a      	ldr	r2, [r3, #8]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab78:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	055b      	lsls	r3, r3, #21
 800ab92:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	041b      	lsls	r3, r3, #16
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	4b0b      	ldr	r3, [pc, #44]	; (800abd4 <HAL_RS485Ex_Init+0xd0>)
 800aba6:	4013      	ands	r3, r2
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	6812      	ldr	r2, [r2, #0]
 800abac:	6979      	ldr	r1, [r7, #20]
 800abae:	430b      	orrs	r3, r1
 800abb0:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f042 0201 	orr.w	r2, r2, #1
 800abc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7ff fad6 	bl	800a174 <UART_CheckIdleState>
 800abc8:	4603      	mov	r3, r0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3718      	adds	r7, #24
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	fc00ffff 	.word	0xfc00ffff

0800abd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d101      	bne.n	800ac2a <HAL_UARTEx_DisableFifoMode+0x16>
 800ac26:	2302      	movs	r3, #2
 800ac28:	e027      	b.n	800ac7a <HAL_UARTEx_DisableFifoMode+0x66>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2224      	movs	r2, #36	; 0x24
 800ac36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0201 	bic.w	r2, r2, #1
 800ac50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d101      	bne.n	800ac9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	e02d      	b.n	800acfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2224      	movs	r2, #36	; 0x24
 800acaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f022 0201 	bic.w	r2, r2, #1
 800acc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	430a      	orrs	r2, r1
 800acd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f850 	bl	800ad80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2220      	movs	r2, #32
 800acec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d101      	bne.n	800ad1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad16:	2302      	movs	r3, #2
 800ad18:	e02d      	b.n	800ad76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2224      	movs	r2, #36	; 0x24
 800ad26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f022 0201 	bic.w	r2, r2, #1
 800ad40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f812 	bl	800ad80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2220      	movs	r2, #32
 800ad68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
	...

0800ad80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d108      	bne.n	800ada2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ada0:	e031      	b.n	800ae06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ada2:	2310      	movs	r3, #16
 800ada4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ada6:	2310      	movs	r3, #16
 800ada8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	0e5b      	lsrs	r3, r3, #25
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f003 0307 	and.w	r3, r3, #7
 800adb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	0f5b      	lsrs	r3, r3, #29
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	f003 0307 	and.w	r3, r3, #7
 800adc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	7b3a      	ldrb	r2, [r7, #12]
 800adce:	4911      	ldr	r1, [pc, #68]	; (800ae14 <UARTEx_SetNbDataToProcess+0x94>)
 800add0:	5c8a      	ldrb	r2, [r1, r2]
 800add2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800add6:	7b3a      	ldrb	r2, [r7, #12]
 800add8:	490f      	ldr	r1, [pc, #60]	; (800ae18 <UARTEx_SetNbDataToProcess+0x98>)
 800adda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800addc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	7b7a      	ldrb	r2, [r7, #13]
 800adec:	4909      	ldr	r1, [pc, #36]	; (800ae14 <UARTEx_SetNbDataToProcess+0x94>)
 800adee:	5c8a      	ldrb	r2, [r1, r2]
 800adf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800adf4:	7b7a      	ldrb	r2, [r7, #13]
 800adf6:	4908      	ldr	r1, [pc, #32]	; (800ae18 <UARTEx_SetNbDataToProcess+0x98>)
 800adf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae06:	bf00      	nop
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	0800bd78 	.word	0x0800bd78
 800ae18:	0800bd80 	.word	0x0800bd80

0800ae1c <__errno>:
 800ae1c:	4b01      	ldr	r3, [pc, #4]	; (800ae24 <__errno+0x8>)
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	20000010 	.word	0x20000010

0800ae28 <__libc_init_array>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	4d0d      	ldr	r5, [pc, #52]	; (800ae60 <__libc_init_array+0x38>)
 800ae2c:	4c0d      	ldr	r4, [pc, #52]	; (800ae64 <__libc_init_array+0x3c>)
 800ae2e:	1b64      	subs	r4, r4, r5
 800ae30:	10a4      	asrs	r4, r4, #2
 800ae32:	2600      	movs	r6, #0
 800ae34:	42a6      	cmp	r6, r4
 800ae36:	d109      	bne.n	800ae4c <__libc_init_array+0x24>
 800ae38:	4d0b      	ldr	r5, [pc, #44]	; (800ae68 <__libc_init_array+0x40>)
 800ae3a:	4c0c      	ldr	r4, [pc, #48]	; (800ae6c <__libc_init_array+0x44>)
 800ae3c:	f000 ff76 	bl	800bd2c <_init>
 800ae40:	1b64      	subs	r4, r4, r5
 800ae42:	10a4      	asrs	r4, r4, #2
 800ae44:	2600      	movs	r6, #0
 800ae46:	42a6      	cmp	r6, r4
 800ae48:	d105      	bne.n	800ae56 <__libc_init_array+0x2e>
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}
 800ae4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae50:	4798      	blx	r3
 800ae52:	3601      	adds	r6, #1
 800ae54:	e7ee      	b.n	800ae34 <__libc_init_array+0xc>
 800ae56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae5a:	4798      	blx	r3
 800ae5c:	3601      	adds	r6, #1
 800ae5e:	e7f2      	b.n	800ae46 <__libc_init_array+0x1e>
 800ae60:	0800be28 	.word	0x0800be28
 800ae64:	0800be28 	.word	0x0800be28
 800ae68:	0800be28 	.word	0x0800be28
 800ae6c:	0800be2c 	.word	0x0800be2c

0800ae70 <memset>:
 800ae70:	4402      	add	r2, r0
 800ae72:	4603      	mov	r3, r0
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d100      	bne.n	800ae7a <memset+0xa>
 800ae78:	4770      	bx	lr
 800ae7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae7e:	e7f9      	b.n	800ae74 <memset+0x4>

0800ae80 <iprintf>:
 800ae80:	b40f      	push	{r0, r1, r2, r3}
 800ae82:	4b0a      	ldr	r3, [pc, #40]	; (800aeac <iprintf+0x2c>)
 800ae84:	b513      	push	{r0, r1, r4, lr}
 800ae86:	681c      	ldr	r4, [r3, #0]
 800ae88:	b124      	cbz	r4, 800ae94 <iprintf+0x14>
 800ae8a:	69a3      	ldr	r3, [r4, #24]
 800ae8c:	b913      	cbnz	r3, 800ae94 <iprintf+0x14>
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f000 f866 	bl	800af60 <__sinit>
 800ae94:	ab05      	add	r3, sp, #20
 800ae96:	9a04      	ldr	r2, [sp, #16]
 800ae98:	68a1      	ldr	r1, [r4, #8]
 800ae9a:	9301      	str	r3, [sp, #4]
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f000 f983 	bl	800b1a8 <_vfiprintf_r>
 800aea2:	b002      	add	sp, #8
 800aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea8:	b004      	add	sp, #16
 800aeaa:	4770      	bx	lr
 800aeac:	20000010 	.word	0x20000010

0800aeb0 <std>:
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	e9c0 3300 	strd	r3, r3, [r0]
 800aeba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aebe:	6083      	str	r3, [r0, #8]
 800aec0:	8181      	strh	r1, [r0, #12]
 800aec2:	6643      	str	r3, [r0, #100]	; 0x64
 800aec4:	81c2      	strh	r2, [r0, #14]
 800aec6:	6183      	str	r3, [r0, #24]
 800aec8:	4619      	mov	r1, r3
 800aeca:	2208      	movs	r2, #8
 800aecc:	305c      	adds	r0, #92	; 0x5c
 800aece:	f7ff ffcf 	bl	800ae70 <memset>
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <std+0x38>)
 800aed4:	6263      	str	r3, [r4, #36]	; 0x24
 800aed6:	4b05      	ldr	r3, [pc, #20]	; (800aeec <std+0x3c>)
 800aed8:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeda:	4b05      	ldr	r3, [pc, #20]	; (800aef0 <std+0x40>)
 800aedc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aede:	4b05      	ldr	r3, [pc, #20]	; (800aef4 <std+0x44>)
 800aee0:	6224      	str	r4, [r4, #32]
 800aee2:	6323      	str	r3, [r4, #48]	; 0x30
 800aee4:	bd10      	pop	{r4, pc}
 800aee6:	bf00      	nop
 800aee8:	0800b751 	.word	0x0800b751
 800aeec:	0800b773 	.word	0x0800b773
 800aef0:	0800b7ab 	.word	0x0800b7ab
 800aef4:	0800b7cf 	.word	0x0800b7cf

0800aef8 <_cleanup_r>:
 800aef8:	4901      	ldr	r1, [pc, #4]	; (800af00 <_cleanup_r+0x8>)
 800aefa:	f000 b8af 	b.w	800b05c <_fwalk_reent>
 800aefe:	bf00      	nop
 800af00:	0800baa9 	.word	0x0800baa9

0800af04 <__sfmoreglue>:
 800af04:	b570      	push	{r4, r5, r6, lr}
 800af06:	1e4a      	subs	r2, r1, #1
 800af08:	2568      	movs	r5, #104	; 0x68
 800af0a:	4355      	muls	r5, r2
 800af0c:	460e      	mov	r6, r1
 800af0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af12:	f000 f8c5 	bl	800b0a0 <_malloc_r>
 800af16:	4604      	mov	r4, r0
 800af18:	b140      	cbz	r0, 800af2c <__sfmoreglue+0x28>
 800af1a:	2100      	movs	r1, #0
 800af1c:	e9c0 1600 	strd	r1, r6, [r0]
 800af20:	300c      	adds	r0, #12
 800af22:	60a0      	str	r0, [r4, #8]
 800af24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af28:	f7ff ffa2 	bl	800ae70 <memset>
 800af2c:	4620      	mov	r0, r4
 800af2e:	bd70      	pop	{r4, r5, r6, pc}

0800af30 <__sfp_lock_acquire>:
 800af30:	4801      	ldr	r0, [pc, #4]	; (800af38 <__sfp_lock_acquire+0x8>)
 800af32:	f000 b8b3 	b.w	800b09c <__retarget_lock_acquire_recursive>
 800af36:	bf00      	nop
 800af38:	200008d0 	.word	0x200008d0

0800af3c <__sfp_lock_release>:
 800af3c:	4801      	ldr	r0, [pc, #4]	; (800af44 <__sfp_lock_release+0x8>)
 800af3e:	f000 b8ae 	b.w	800b09e <__retarget_lock_release_recursive>
 800af42:	bf00      	nop
 800af44:	200008d0 	.word	0x200008d0

0800af48 <__sinit_lock_acquire>:
 800af48:	4801      	ldr	r0, [pc, #4]	; (800af50 <__sinit_lock_acquire+0x8>)
 800af4a:	f000 b8a7 	b.w	800b09c <__retarget_lock_acquire_recursive>
 800af4e:	bf00      	nop
 800af50:	200008cb 	.word	0x200008cb

0800af54 <__sinit_lock_release>:
 800af54:	4801      	ldr	r0, [pc, #4]	; (800af5c <__sinit_lock_release+0x8>)
 800af56:	f000 b8a2 	b.w	800b09e <__retarget_lock_release_recursive>
 800af5a:	bf00      	nop
 800af5c:	200008cb 	.word	0x200008cb

0800af60 <__sinit>:
 800af60:	b510      	push	{r4, lr}
 800af62:	4604      	mov	r4, r0
 800af64:	f7ff fff0 	bl	800af48 <__sinit_lock_acquire>
 800af68:	69a3      	ldr	r3, [r4, #24]
 800af6a:	b11b      	cbz	r3, 800af74 <__sinit+0x14>
 800af6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af70:	f7ff bff0 	b.w	800af54 <__sinit_lock_release>
 800af74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af78:	6523      	str	r3, [r4, #80]	; 0x50
 800af7a:	4b13      	ldr	r3, [pc, #76]	; (800afc8 <__sinit+0x68>)
 800af7c:	4a13      	ldr	r2, [pc, #76]	; (800afcc <__sinit+0x6c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	62a2      	str	r2, [r4, #40]	; 0x28
 800af82:	42a3      	cmp	r3, r4
 800af84:	bf04      	itt	eq
 800af86:	2301      	moveq	r3, #1
 800af88:	61a3      	streq	r3, [r4, #24]
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 f820 	bl	800afd0 <__sfp>
 800af90:	6060      	str	r0, [r4, #4]
 800af92:	4620      	mov	r0, r4
 800af94:	f000 f81c 	bl	800afd0 <__sfp>
 800af98:	60a0      	str	r0, [r4, #8]
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 f818 	bl	800afd0 <__sfp>
 800afa0:	2200      	movs	r2, #0
 800afa2:	60e0      	str	r0, [r4, #12]
 800afa4:	2104      	movs	r1, #4
 800afa6:	6860      	ldr	r0, [r4, #4]
 800afa8:	f7ff ff82 	bl	800aeb0 <std>
 800afac:	68a0      	ldr	r0, [r4, #8]
 800afae:	2201      	movs	r2, #1
 800afb0:	2109      	movs	r1, #9
 800afb2:	f7ff ff7d 	bl	800aeb0 <std>
 800afb6:	68e0      	ldr	r0, [r4, #12]
 800afb8:	2202      	movs	r2, #2
 800afba:	2112      	movs	r1, #18
 800afbc:	f7ff ff78 	bl	800aeb0 <std>
 800afc0:	2301      	movs	r3, #1
 800afc2:	61a3      	str	r3, [r4, #24]
 800afc4:	e7d2      	b.n	800af6c <__sinit+0xc>
 800afc6:	bf00      	nop
 800afc8:	0800bd88 	.word	0x0800bd88
 800afcc:	0800aef9 	.word	0x0800aef9

0800afd0 <__sfp>:
 800afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd2:	4607      	mov	r7, r0
 800afd4:	f7ff ffac 	bl	800af30 <__sfp_lock_acquire>
 800afd8:	4b1e      	ldr	r3, [pc, #120]	; (800b054 <__sfp+0x84>)
 800afda:	681e      	ldr	r6, [r3, #0]
 800afdc:	69b3      	ldr	r3, [r6, #24]
 800afde:	b913      	cbnz	r3, 800afe6 <__sfp+0x16>
 800afe0:	4630      	mov	r0, r6
 800afe2:	f7ff ffbd 	bl	800af60 <__sinit>
 800afe6:	3648      	adds	r6, #72	; 0x48
 800afe8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afec:	3b01      	subs	r3, #1
 800afee:	d503      	bpl.n	800aff8 <__sfp+0x28>
 800aff0:	6833      	ldr	r3, [r6, #0]
 800aff2:	b30b      	cbz	r3, 800b038 <__sfp+0x68>
 800aff4:	6836      	ldr	r6, [r6, #0]
 800aff6:	e7f7      	b.n	800afe8 <__sfp+0x18>
 800aff8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800affc:	b9d5      	cbnz	r5, 800b034 <__sfp+0x64>
 800affe:	4b16      	ldr	r3, [pc, #88]	; (800b058 <__sfp+0x88>)
 800b000:	60e3      	str	r3, [r4, #12]
 800b002:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b006:	6665      	str	r5, [r4, #100]	; 0x64
 800b008:	f000 f847 	bl	800b09a <__retarget_lock_init_recursive>
 800b00c:	f7ff ff96 	bl	800af3c <__sfp_lock_release>
 800b010:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b014:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b018:	6025      	str	r5, [r4, #0]
 800b01a:	61a5      	str	r5, [r4, #24]
 800b01c:	2208      	movs	r2, #8
 800b01e:	4629      	mov	r1, r5
 800b020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b024:	f7ff ff24 	bl	800ae70 <memset>
 800b028:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b02c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b030:	4620      	mov	r0, r4
 800b032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b034:	3468      	adds	r4, #104	; 0x68
 800b036:	e7d9      	b.n	800afec <__sfp+0x1c>
 800b038:	2104      	movs	r1, #4
 800b03a:	4638      	mov	r0, r7
 800b03c:	f7ff ff62 	bl	800af04 <__sfmoreglue>
 800b040:	4604      	mov	r4, r0
 800b042:	6030      	str	r0, [r6, #0]
 800b044:	2800      	cmp	r0, #0
 800b046:	d1d5      	bne.n	800aff4 <__sfp+0x24>
 800b048:	f7ff ff78 	bl	800af3c <__sfp_lock_release>
 800b04c:	230c      	movs	r3, #12
 800b04e:	603b      	str	r3, [r7, #0]
 800b050:	e7ee      	b.n	800b030 <__sfp+0x60>
 800b052:	bf00      	nop
 800b054:	0800bd88 	.word	0x0800bd88
 800b058:	ffff0001 	.word	0xffff0001

0800b05c <_fwalk_reent>:
 800b05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b060:	4606      	mov	r6, r0
 800b062:	4688      	mov	r8, r1
 800b064:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b068:	2700      	movs	r7, #0
 800b06a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b06e:	f1b9 0901 	subs.w	r9, r9, #1
 800b072:	d505      	bpl.n	800b080 <_fwalk_reent+0x24>
 800b074:	6824      	ldr	r4, [r4, #0]
 800b076:	2c00      	cmp	r4, #0
 800b078:	d1f7      	bne.n	800b06a <_fwalk_reent+0xe>
 800b07a:	4638      	mov	r0, r7
 800b07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b080:	89ab      	ldrh	r3, [r5, #12]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d907      	bls.n	800b096 <_fwalk_reent+0x3a>
 800b086:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b08a:	3301      	adds	r3, #1
 800b08c:	d003      	beq.n	800b096 <_fwalk_reent+0x3a>
 800b08e:	4629      	mov	r1, r5
 800b090:	4630      	mov	r0, r6
 800b092:	47c0      	blx	r8
 800b094:	4307      	orrs	r7, r0
 800b096:	3568      	adds	r5, #104	; 0x68
 800b098:	e7e9      	b.n	800b06e <_fwalk_reent+0x12>

0800b09a <__retarget_lock_init_recursive>:
 800b09a:	4770      	bx	lr

0800b09c <__retarget_lock_acquire_recursive>:
 800b09c:	4770      	bx	lr

0800b09e <__retarget_lock_release_recursive>:
 800b09e:	4770      	bx	lr

0800b0a0 <_malloc_r>:
 800b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a2:	1ccd      	adds	r5, r1, #3
 800b0a4:	f025 0503 	bic.w	r5, r5, #3
 800b0a8:	3508      	adds	r5, #8
 800b0aa:	2d0c      	cmp	r5, #12
 800b0ac:	bf38      	it	cc
 800b0ae:	250c      	movcc	r5, #12
 800b0b0:	2d00      	cmp	r5, #0
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	db01      	blt.n	800b0ba <_malloc_r+0x1a>
 800b0b6:	42a9      	cmp	r1, r5
 800b0b8:	d903      	bls.n	800b0c2 <_malloc_r+0x22>
 800b0ba:	230c      	movs	r3, #12
 800b0bc:	6033      	str	r3, [r6, #0]
 800b0be:	2000      	movs	r0, #0
 800b0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0c2:	f000 fda3 	bl	800bc0c <__malloc_lock>
 800b0c6:	4921      	ldr	r1, [pc, #132]	; (800b14c <_malloc_r+0xac>)
 800b0c8:	680a      	ldr	r2, [r1, #0]
 800b0ca:	4614      	mov	r4, r2
 800b0cc:	b99c      	cbnz	r4, 800b0f6 <_malloc_r+0x56>
 800b0ce:	4f20      	ldr	r7, [pc, #128]	; (800b150 <_malloc_r+0xb0>)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	b923      	cbnz	r3, 800b0de <_malloc_r+0x3e>
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	f000 fb2a 	bl	800b730 <_sbrk_r>
 800b0dc:	6038      	str	r0, [r7, #0]
 800b0de:	4629      	mov	r1, r5
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f000 fb25 	bl	800b730 <_sbrk_r>
 800b0e6:	1c43      	adds	r3, r0, #1
 800b0e8:	d123      	bne.n	800b132 <_malloc_r+0x92>
 800b0ea:	230c      	movs	r3, #12
 800b0ec:	6033      	str	r3, [r6, #0]
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f000 fd92 	bl	800bc18 <__malloc_unlock>
 800b0f4:	e7e3      	b.n	800b0be <_malloc_r+0x1e>
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	1b5b      	subs	r3, r3, r5
 800b0fa:	d417      	bmi.n	800b12c <_malloc_r+0x8c>
 800b0fc:	2b0b      	cmp	r3, #11
 800b0fe:	d903      	bls.n	800b108 <_malloc_r+0x68>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	441c      	add	r4, r3
 800b104:	6025      	str	r5, [r4, #0]
 800b106:	e004      	b.n	800b112 <_malloc_r+0x72>
 800b108:	6863      	ldr	r3, [r4, #4]
 800b10a:	42a2      	cmp	r2, r4
 800b10c:	bf0c      	ite	eq
 800b10e:	600b      	streq	r3, [r1, #0]
 800b110:	6053      	strne	r3, [r2, #4]
 800b112:	4630      	mov	r0, r6
 800b114:	f000 fd80 	bl	800bc18 <__malloc_unlock>
 800b118:	f104 000b 	add.w	r0, r4, #11
 800b11c:	1d23      	adds	r3, r4, #4
 800b11e:	f020 0007 	bic.w	r0, r0, #7
 800b122:	1ac2      	subs	r2, r0, r3
 800b124:	d0cc      	beq.n	800b0c0 <_malloc_r+0x20>
 800b126:	1a1b      	subs	r3, r3, r0
 800b128:	50a3      	str	r3, [r4, r2]
 800b12a:	e7c9      	b.n	800b0c0 <_malloc_r+0x20>
 800b12c:	4622      	mov	r2, r4
 800b12e:	6864      	ldr	r4, [r4, #4]
 800b130:	e7cc      	b.n	800b0cc <_malloc_r+0x2c>
 800b132:	1cc4      	adds	r4, r0, #3
 800b134:	f024 0403 	bic.w	r4, r4, #3
 800b138:	42a0      	cmp	r0, r4
 800b13a:	d0e3      	beq.n	800b104 <_malloc_r+0x64>
 800b13c:	1a21      	subs	r1, r4, r0
 800b13e:	4630      	mov	r0, r6
 800b140:	f000 faf6 	bl	800b730 <_sbrk_r>
 800b144:	3001      	adds	r0, #1
 800b146:	d1dd      	bne.n	800b104 <_malloc_r+0x64>
 800b148:	e7cf      	b.n	800b0ea <_malloc_r+0x4a>
 800b14a:	bf00      	nop
 800b14c:	2000009c 	.word	0x2000009c
 800b150:	200000a0 	.word	0x200000a0

0800b154 <__sfputc_r>:
 800b154:	6893      	ldr	r3, [r2, #8]
 800b156:	3b01      	subs	r3, #1
 800b158:	2b00      	cmp	r3, #0
 800b15a:	b410      	push	{r4}
 800b15c:	6093      	str	r3, [r2, #8]
 800b15e:	da08      	bge.n	800b172 <__sfputc_r+0x1e>
 800b160:	6994      	ldr	r4, [r2, #24]
 800b162:	42a3      	cmp	r3, r4
 800b164:	db01      	blt.n	800b16a <__sfputc_r+0x16>
 800b166:	290a      	cmp	r1, #10
 800b168:	d103      	bne.n	800b172 <__sfputc_r+0x1e>
 800b16a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b16e:	f000 bb33 	b.w	800b7d8 <__swbuf_r>
 800b172:	6813      	ldr	r3, [r2, #0]
 800b174:	1c58      	adds	r0, r3, #1
 800b176:	6010      	str	r0, [r2, #0]
 800b178:	7019      	strb	r1, [r3, #0]
 800b17a:	4608      	mov	r0, r1
 800b17c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <__sfputs_r>:
 800b182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b184:	4606      	mov	r6, r0
 800b186:	460f      	mov	r7, r1
 800b188:	4614      	mov	r4, r2
 800b18a:	18d5      	adds	r5, r2, r3
 800b18c:	42ac      	cmp	r4, r5
 800b18e:	d101      	bne.n	800b194 <__sfputs_r+0x12>
 800b190:	2000      	movs	r0, #0
 800b192:	e007      	b.n	800b1a4 <__sfputs_r+0x22>
 800b194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b198:	463a      	mov	r2, r7
 800b19a:	4630      	mov	r0, r6
 800b19c:	f7ff ffda 	bl	800b154 <__sfputc_r>
 800b1a0:	1c43      	adds	r3, r0, #1
 800b1a2:	d1f3      	bne.n	800b18c <__sfputs_r+0xa>
 800b1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1a8 <_vfiprintf_r>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	b09d      	sub	sp, #116	; 0x74
 800b1b0:	4614      	mov	r4, r2
 800b1b2:	4698      	mov	r8, r3
 800b1b4:	4606      	mov	r6, r0
 800b1b6:	b118      	cbz	r0, 800b1c0 <_vfiprintf_r+0x18>
 800b1b8:	6983      	ldr	r3, [r0, #24]
 800b1ba:	b90b      	cbnz	r3, 800b1c0 <_vfiprintf_r+0x18>
 800b1bc:	f7ff fed0 	bl	800af60 <__sinit>
 800b1c0:	4b89      	ldr	r3, [pc, #548]	; (800b3e8 <_vfiprintf_r+0x240>)
 800b1c2:	429d      	cmp	r5, r3
 800b1c4:	d11b      	bne.n	800b1fe <_vfiprintf_r+0x56>
 800b1c6:	6875      	ldr	r5, [r6, #4]
 800b1c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ca:	07d9      	lsls	r1, r3, #31
 800b1cc:	d405      	bmi.n	800b1da <_vfiprintf_r+0x32>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	059a      	lsls	r2, r3, #22
 800b1d2:	d402      	bmi.n	800b1da <_vfiprintf_r+0x32>
 800b1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d6:	f7ff ff61 	bl	800b09c <__retarget_lock_acquire_recursive>
 800b1da:	89ab      	ldrh	r3, [r5, #12]
 800b1dc:	071b      	lsls	r3, r3, #28
 800b1de:	d501      	bpl.n	800b1e4 <_vfiprintf_r+0x3c>
 800b1e0:	692b      	ldr	r3, [r5, #16]
 800b1e2:	b9eb      	cbnz	r3, 800b220 <_vfiprintf_r+0x78>
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f000 fb5a 	bl	800b8a0 <__swsetup_r>
 800b1ec:	b1c0      	cbz	r0, 800b220 <_vfiprintf_r+0x78>
 800b1ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1f0:	07dc      	lsls	r4, r3, #31
 800b1f2:	d50e      	bpl.n	800b212 <_vfiprintf_r+0x6a>
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	b01d      	add	sp, #116	; 0x74
 800b1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fe:	4b7b      	ldr	r3, [pc, #492]	; (800b3ec <_vfiprintf_r+0x244>)
 800b200:	429d      	cmp	r5, r3
 800b202:	d101      	bne.n	800b208 <_vfiprintf_r+0x60>
 800b204:	68b5      	ldr	r5, [r6, #8]
 800b206:	e7df      	b.n	800b1c8 <_vfiprintf_r+0x20>
 800b208:	4b79      	ldr	r3, [pc, #484]	; (800b3f0 <_vfiprintf_r+0x248>)
 800b20a:	429d      	cmp	r5, r3
 800b20c:	bf08      	it	eq
 800b20e:	68f5      	ldreq	r5, [r6, #12]
 800b210:	e7da      	b.n	800b1c8 <_vfiprintf_r+0x20>
 800b212:	89ab      	ldrh	r3, [r5, #12]
 800b214:	0598      	lsls	r0, r3, #22
 800b216:	d4ed      	bmi.n	800b1f4 <_vfiprintf_r+0x4c>
 800b218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b21a:	f7ff ff40 	bl	800b09e <__retarget_lock_release_recursive>
 800b21e:	e7e9      	b.n	800b1f4 <_vfiprintf_r+0x4c>
 800b220:	2300      	movs	r3, #0
 800b222:	9309      	str	r3, [sp, #36]	; 0x24
 800b224:	2320      	movs	r3, #32
 800b226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b22a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b22e:	2330      	movs	r3, #48	; 0x30
 800b230:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3f4 <_vfiprintf_r+0x24c>
 800b234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b238:	f04f 0901 	mov.w	r9, #1
 800b23c:	4623      	mov	r3, r4
 800b23e:	469a      	mov	sl, r3
 800b240:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b244:	b10a      	cbz	r2, 800b24a <_vfiprintf_r+0xa2>
 800b246:	2a25      	cmp	r2, #37	; 0x25
 800b248:	d1f9      	bne.n	800b23e <_vfiprintf_r+0x96>
 800b24a:	ebba 0b04 	subs.w	fp, sl, r4
 800b24e:	d00b      	beq.n	800b268 <_vfiprintf_r+0xc0>
 800b250:	465b      	mov	r3, fp
 800b252:	4622      	mov	r2, r4
 800b254:	4629      	mov	r1, r5
 800b256:	4630      	mov	r0, r6
 800b258:	f7ff ff93 	bl	800b182 <__sfputs_r>
 800b25c:	3001      	adds	r0, #1
 800b25e:	f000 80aa 	beq.w	800b3b6 <_vfiprintf_r+0x20e>
 800b262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b264:	445a      	add	r2, fp
 800b266:	9209      	str	r2, [sp, #36]	; 0x24
 800b268:	f89a 3000 	ldrb.w	r3, [sl]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 80a2 	beq.w	800b3b6 <_vfiprintf_r+0x20e>
 800b272:	2300      	movs	r3, #0
 800b274:	f04f 32ff 	mov.w	r2, #4294967295
 800b278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b27c:	f10a 0a01 	add.w	sl, sl, #1
 800b280:	9304      	str	r3, [sp, #16]
 800b282:	9307      	str	r3, [sp, #28]
 800b284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b288:	931a      	str	r3, [sp, #104]	; 0x68
 800b28a:	4654      	mov	r4, sl
 800b28c:	2205      	movs	r2, #5
 800b28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b292:	4858      	ldr	r0, [pc, #352]	; (800b3f4 <_vfiprintf_r+0x24c>)
 800b294:	f7f5 f824 	bl	80002e0 <memchr>
 800b298:	9a04      	ldr	r2, [sp, #16]
 800b29a:	b9d8      	cbnz	r0, 800b2d4 <_vfiprintf_r+0x12c>
 800b29c:	06d1      	lsls	r1, r2, #27
 800b29e:	bf44      	itt	mi
 800b2a0:	2320      	movmi	r3, #32
 800b2a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2a6:	0713      	lsls	r3, r2, #28
 800b2a8:	bf44      	itt	mi
 800b2aa:	232b      	movmi	r3, #43	; 0x2b
 800b2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2b6:	d015      	beq.n	800b2e4 <_vfiprintf_r+0x13c>
 800b2b8:	9a07      	ldr	r2, [sp, #28]
 800b2ba:	4654      	mov	r4, sl
 800b2bc:	2000      	movs	r0, #0
 800b2be:	f04f 0c0a 	mov.w	ip, #10
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2c8:	3b30      	subs	r3, #48	; 0x30
 800b2ca:	2b09      	cmp	r3, #9
 800b2cc:	d94e      	bls.n	800b36c <_vfiprintf_r+0x1c4>
 800b2ce:	b1b0      	cbz	r0, 800b2fe <_vfiprintf_r+0x156>
 800b2d0:	9207      	str	r2, [sp, #28]
 800b2d2:	e014      	b.n	800b2fe <_vfiprintf_r+0x156>
 800b2d4:	eba0 0308 	sub.w	r3, r0, r8
 800b2d8:	fa09 f303 	lsl.w	r3, r9, r3
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	9304      	str	r3, [sp, #16]
 800b2e0:	46a2      	mov	sl, r4
 800b2e2:	e7d2      	b.n	800b28a <_vfiprintf_r+0xe2>
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	1d19      	adds	r1, r3, #4
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	9103      	str	r1, [sp, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	bfbb      	ittet	lt
 800b2f0:	425b      	neglt	r3, r3
 800b2f2:	f042 0202 	orrlt.w	r2, r2, #2
 800b2f6:	9307      	strge	r3, [sp, #28]
 800b2f8:	9307      	strlt	r3, [sp, #28]
 800b2fa:	bfb8      	it	lt
 800b2fc:	9204      	strlt	r2, [sp, #16]
 800b2fe:	7823      	ldrb	r3, [r4, #0]
 800b300:	2b2e      	cmp	r3, #46	; 0x2e
 800b302:	d10c      	bne.n	800b31e <_vfiprintf_r+0x176>
 800b304:	7863      	ldrb	r3, [r4, #1]
 800b306:	2b2a      	cmp	r3, #42	; 0x2a
 800b308:	d135      	bne.n	800b376 <_vfiprintf_r+0x1ce>
 800b30a:	9b03      	ldr	r3, [sp, #12]
 800b30c:	1d1a      	adds	r2, r3, #4
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	9203      	str	r2, [sp, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	bfb8      	it	lt
 800b316:	f04f 33ff 	movlt.w	r3, #4294967295
 800b31a:	3402      	adds	r4, #2
 800b31c:	9305      	str	r3, [sp, #20]
 800b31e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b404 <_vfiprintf_r+0x25c>
 800b322:	7821      	ldrb	r1, [r4, #0]
 800b324:	2203      	movs	r2, #3
 800b326:	4650      	mov	r0, sl
 800b328:	f7f4 ffda 	bl	80002e0 <memchr>
 800b32c:	b140      	cbz	r0, 800b340 <_vfiprintf_r+0x198>
 800b32e:	2340      	movs	r3, #64	; 0x40
 800b330:	eba0 000a 	sub.w	r0, r0, sl
 800b334:	fa03 f000 	lsl.w	r0, r3, r0
 800b338:	9b04      	ldr	r3, [sp, #16]
 800b33a:	4303      	orrs	r3, r0
 800b33c:	3401      	adds	r4, #1
 800b33e:	9304      	str	r3, [sp, #16]
 800b340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b344:	482c      	ldr	r0, [pc, #176]	; (800b3f8 <_vfiprintf_r+0x250>)
 800b346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b34a:	2206      	movs	r2, #6
 800b34c:	f7f4 ffc8 	bl	80002e0 <memchr>
 800b350:	2800      	cmp	r0, #0
 800b352:	d03f      	beq.n	800b3d4 <_vfiprintf_r+0x22c>
 800b354:	4b29      	ldr	r3, [pc, #164]	; (800b3fc <_vfiprintf_r+0x254>)
 800b356:	bb1b      	cbnz	r3, 800b3a0 <_vfiprintf_r+0x1f8>
 800b358:	9b03      	ldr	r3, [sp, #12]
 800b35a:	3307      	adds	r3, #7
 800b35c:	f023 0307 	bic.w	r3, r3, #7
 800b360:	3308      	adds	r3, #8
 800b362:	9303      	str	r3, [sp, #12]
 800b364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b366:	443b      	add	r3, r7
 800b368:	9309      	str	r3, [sp, #36]	; 0x24
 800b36a:	e767      	b.n	800b23c <_vfiprintf_r+0x94>
 800b36c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b370:	460c      	mov	r4, r1
 800b372:	2001      	movs	r0, #1
 800b374:	e7a5      	b.n	800b2c2 <_vfiprintf_r+0x11a>
 800b376:	2300      	movs	r3, #0
 800b378:	3401      	adds	r4, #1
 800b37a:	9305      	str	r3, [sp, #20]
 800b37c:	4619      	mov	r1, r3
 800b37e:	f04f 0c0a 	mov.w	ip, #10
 800b382:	4620      	mov	r0, r4
 800b384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b388:	3a30      	subs	r2, #48	; 0x30
 800b38a:	2a09      	cmp	r2, #9
 800b38c:	d903      	bls.n	800b396 <_vfiprintf_r+0x1ee>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d0c5      	beq.n	800b31e <_vfiprintf_r+0x176>
 800b392:	9105      	str	r1, [sp, #20]
 800b394:	e7c3      	b.n	800b31e <_vfiprintf_r+0x176>
 800b396:	fb0c 2101 	mla	r1, ip, r1, r2
 800b39a:	4604      	mov	r4, r0
 800b39c:	2301      	movs	r3, #1
 800b39e:	e7f0      	b.n	800b382 <_vfiprintf_r+0x1da>
 800b3a0:	ab03      	add	r3, sp, #12
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	462a      	mov	r2, r5
 800b3a6:	4b16      	ldr	r3, [pc, #88]	; (800b400 <_vfiprintf_r+0x258>)
 800b3a8:	a904      	add	r1, sp, #16
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f3af 8000 	nop.w
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	1c78      	adds	r0, r7, #1
 800b3b4:	d1d6      	bne.n	800b364 <_vfiprintf_r+0x1bc>
 800b3b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3b8:	07d9      	lsls	r1, r3, #31
 800b3ba:	d405      	bmi.n	800b3c8 <_vfiprintf_r+0x220>
 800b3bc:	89ab      	ldrh	r3, [r5, #12]
 800b3be:	059a      	lsls	r2, r3, #22
 800b3c0:	d402      	bmi.n	800b3c8 <_vfiprintf_r+0x220>
 800b3c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3c4:	f7ff fe6b 	bl	800b09e <__retarget_lock_release_recursive>
 800b3c8:	89ab      	ldrh	r3, [r5, #12]
 800b3ca:	065b      	lsls	r3, r3, #25
 800b3cc:	f53f af12 	bmi.w	800b1f4 <_vfiprintf_r+0x4c>
 800b3d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3d2:	e711      	b.n	800b1f8 <_vfiprintf_r+0x50>
 800b3d4:	ab03      	add	r3, sp, #12
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	462a      	mov	r2, r5
 800b3da:	4b09      	ldr	r3, [pc, #36]	; (800b400 <_vfiprintf_r+0x258>)
 800b3dc:	a904      	add	r1, sp, #16
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f000 f880 	bl	800b4e4 <_printf_i>
 800b3e4:	e7e4      	b.n	800b3b0 <_vfiprintf_r+0x208>
 800b3e6:	bf00      	nop
 800b3e8:	0800bdac 	.word	0x0800bdac
 800b3ec:	0800bdcc 	.word	0x0800bdcc
 800b3f0:	0800bd8c 	.word	0x0800bd8c
 800b3f4:	0800bdec 	.word	0x0800bdec
 800b3f8:	0800bdf6 	.word	0x0800bdf6
 800b3fc:	00000000 	.word	0x00000000
 800b400:	0800b183 	.word	0x0800b183
 800b404:	0800bdf2 	.word	0x0800bdf2

0800b408 <_printf_common>:
 800b408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	4616      	mov	r6, r2
 800b40e:	4699      	mov	r9, r3
 800b410:	688a      	ldr	r2, [r1, #8]
 800b412:	690b      	ldr	r3, [r1, #16]
 800b414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b418:	4293      	cmp	r3, r2
 800b41a:	bfb8      	it	lt
 800b41c:	4613      	movlt	r3, r2
 800b41e:	6033      	str	r3, [r6, #0]
 800b420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b424:	4607      	mov	r7, r0
 800b426:	460c      	mov	r4, r1
 800b428:	b10a      	cbz	r2, 800b42e <_printf_common+0x26>
 800b42a:	3301      	adds	r3, #1
 800b42c:	6033      	str	r3, [r6, #0]
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	0699      	lsls	r1, r3, #26
 800b432:	bf42      	ittt	mi
 800b434:	6833      	ldrmi	r3, [r6, #0]
 800b436:	3302      	addmi	r3, #2
 800b438:	6033      	strmi	r3, [r6, #0]
 800b43a:	6825      	ldr	r5, [r4, #0]
 800b43c:	f015 0506 	ands.w	r5, r5, #6
 800b440:	d106      	bne.n	800b450 <_printf_common+0x48>
 800b442:	f104 0a19 	add.w	sl, r4, #25
 800b446:	68e3      	ldr	r3, [r4, #12]
 800b448:	6832      	ldr	r2, [r6, #0]
 800b44a:	1a9b      	subs	r3, r3, r2
 800b44c:	42ab      	cmp	r3, r5
 800b44e:	dc26      	bgt.n	800b49e <_printf_common+0x96>
 800b450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b454:	1e13      	subs	r3, r2, #0
 800b456:	6822      	ldr	r2, [r4, #0]
 800b458:	bf18      	it	ne
 800b45a:	2301      	movne	r3, #1
 800b45c:	0692      	lsls	r2, r2, #26
 800b45e:	d42b      	bmi.n	800b4b8 <_printf_common+0xb0>
 800b460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b464:	4649      	mov	r1, r9
 800b466:	4638      	mov	r0, r7
 800b468:	47c0      	blx	r8
 800b46a:	3001      	adds	r0, #1
 800b46c:	d01e      	beq.n	800b4ac <_printf_common+0xa4>
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	68e5      	ldr	r5, [r4, #12]
 800b472:	6832      	ldr	r2, [r6, #0]
 800b474:	f003 0306 	and.w	r3, r3, #6
 800b478:	2b04      	cmp	r3, #4
 800b47a:	bf08      	it	eq
 800b47c:	1aad      	subeq	r5, r5, r2
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	6922      	ldr	r2, [r4, #16]
 800b482:	bf0c      	ite	eq
 800b484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b488:	2500      	movne	r5, #0
 800b48a:	4293      	cmp	r3, r2
 800b48c:	bfc4      	itt	gt
 800b48e:	1a9b      	subgt	r3, r3, r2
 800b490:	18ed      	addgt	r5, r5, r3
 800b492:	2600      	movs	r6, #0
 800b494:	341a      	adds	r4, #26
 800b496:	42b5      	cmp	r5, r6
 800b498:	d11a      	bne.n	800b4d0 <_printf_common+0xc8>
 800b49a:	2000      	movs	r0, #0
 800b49c:	e008      	b.n	800b4b0 <_printf_common+0xa8>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	4652      	mov	r2, sl
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	47c0      	blx	r8
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	d103      	bne.n	800b4b4 <_printf_common+0xac>
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b4:	3501      	adds	r5, #1
 800b4b6:	e7c6      	b.n	800b446 <_printf_common+0x3e>
 800b4b8:	18e1      	adds	r1, r4, r3
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	2030      	movs	r0, #48	; 0x30
 800b4be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4c2:	4422      	add	r2, r4
 800b4c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	e7c7      	b.n	800b460 <_printf_common+0x58>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	4622      	mov	r2, r4
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	47c0      	blx	r8
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d0e6      	beq.n	800b4ac <_printf_common+0xa4>
 800b4de:	3601      	adds	r6, #1
 800b4e0:	e7d9      	b.n	800b496 <_printf_common+0x8e>
	...

0800b4e4 <_printf_i>:
 800b4e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	4691      	mov	r9, r2
 800b4ec:	7e27      	ldrb	r7, [r4, #24]
 800b4ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4f0:	2f78      	cmp	r7, #120	; 0x78
 800b4f2:	4680      	mov	r8, r0
 800b4f4:	469a      	mov	sl, r3
 800b4f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4fa:	d807      	bhi.n	800b50c <_printf_i+0x28>
 800b4fc:	2f62      	cmp	r7, #98	; 0x62
 800b4fe:	d80a      	bhi.n	800b516 <_printf_i+0x32>
 800b500:	2f00      	cmp	r7, #0
 800b502:	f000 80d8 	beq.w	800b6b6 <_printf_i+0x1d2>
 800b506:	2f58      	cmp	r7, #88	; 0x58
 800b508:	f000 80a3 	beq.w	800b652 <_printf_i+0x16e>
 800b50c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b514:	e03a      	b.n	800b58c <_printf_i+0xa8>
 800b516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b51a:	2b15      	cmp	r3, #21
 800b51c:	d8f6      	bhi.n	800b50c <_printf_i+0x28>
 800b51e:	a001      	add	r0, pc, #4	; (adr r0, 800b524 <_printf_i+0x40>)
 800b520:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b524:	0800b57d 	.word	0x0800b57d
 800b528:	0800b591 	.word	0x0800b591
 800b52c:	0800b50d 	.word	0x0800b50d
 800b530:	0800b50d 	.word	0x0800b50d
 800b534:	0800b50d 	.word	0x0800b50d
 800b538:	0800b50d 	.word	0x0800b50d
 800b53c:	0800b591 	.word	0x0800b591
 800b540:	0800b50d 	.word	0x0800b50d
 800b544:	0800b50d 	.word	0x0800b50d
 800b548:	0800b50d 	.word	0x0800b50d
 800b54c:	0800b50d 	.word	0x0800b50d
 800b550:	0800b69d 	.word	0x0800b69d
 800b554:	0800b5c1 	.word	0x0800b5c1
 800b558:	0800b67f 	.word	0x0800b67f
 800b55c:	0800b50d 	.word	0x0800b50d
 800b560:	0800b50d 	.word	0x0800b50d
 800b564:	0800b6bf 	.word	0x0800b6bf
 800b568:	0800b50d 	.word	0x0800b50d
 800b56c:	0800b5c1 	.word	0x0800b5c1
 800b570:	0800b50d 	.word	0x0800b50d
 800b574:	0800b50d 	.word	0x0800b50d
 800b578:	0800b687 	.word	0x0800b687
 800b57c:	680b      	ldr	r3, [r1, #0]
 800b57e:	1d1a      	adds	r2, r3, #4
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	600a      	str	r2, [r1, #0]
 800b584:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b58c:	2301      	movs	r3, #1
 800b58e:	e0a3      	b.n	800b6d8 <_printf_i+0x1f4>
 800b590:	6825      	ldr	r5, [r4, #0]
 800b592:	6808      	ldr	r0, [r1, #0]
 800b594:	062e      	lsls	r6, r5, #24
 800b596:	f100 0304 	add.w	r3, r0, #4
 800b59a:	d50a      	bpl.n	800b5b2 <_printf_i+0xce>
 800b59c:	6805      	ldr	r5, [r0, #0]
 800b59e:	600b      	str	r3, [r1, #0]
 800b5a0:	2d00      	cmp	r5, #0
 800b5a2:	da03      	bge.n	800b5ac <_printf_i+0xc8>
 800b5a4:	232d      	movs	r3, #45	; 0x2d
 800b5a6:	426d      	negs	r5, r5
 800b5a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ac:	485e      	ldr	r0, [pc, #376]	; (800b728 <_printf_i+0x244>)
 800b5ae:	230a      	movs	r3, #10
 800b5b0:	e019      	b.n	800b5e6 <_printf_i+0x102>
 800b5b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5b6:	6805      	ldr	r5, [r0, #0]
 800b5b8:	600b      	str	r3, [r1, #0]
 800b5ba:	bf18      	it	ne
 800b5bc:	b22d      	sxthne	r5, r5
 800b5be:	e7ef      	b.n	800b5a0 <_printf_i+0xbc>
 800b5c0:	680b      	ldr	r3, [r1, #0]
 800b5c2:	6825      	ldr	r5, [r4, #0]
 800b5c4:	1d18      	adds	r0, r3, #4
 800b5c6:	6008      	str	r0, [r1, #0]
 800b5c8:	0628      	lsls	r0, r5, #24
 800b5ca:	d501      	bpl.n	800b5d0 <_printf_i+0xec>
 800b5cc:	681d      	ldr	r5, [r3, #0]
 800b5ce:	e002      	b.n	800b5d6 <_printf_i+0xf2>
 800b5d0:	0669      	lsls	r1, r5, #25
 800b5d2:	d5fb      	bpl.n	800b5cc <_printf_i+0xe8>
 800b5d4:	881d      	ldrh	r5, [r3, #0]
 800b5d6:	4854      	ldr	r0, [pc, #336]	; (800b728 <_printf_i+0x244>)
 800b5d8:	2f6f      	cmp	r7, #111	; 0x6f
 800b5da:	bf0c      	ite	eq
 800b5dc:	2308      	moveq	r3, #8
 800b5de:	230a      	movne	r3, #10
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5e6:	6866      	ldr	r6, [r4, #4]
 800b5e8:	60a6      	str	r6, [r4, #8]
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	bfa2      	ittt	ge
 800b5ee:	6821      	ldrge	r1, [r4, #0]
 800b5f0:	f021 0104 	bicge.w	r1, r1, #4
 800b5f4:	6021      	strge	r1, [r4, #0]
 800b5f6:	b90d      	cbnz	r5, 800b5fc <_printf_i+0x118>
 800b5f8:	2e00      	cmp	r6, #0
 800b5fa:	d04d      	beq.n	800b698 <_printf_i+0x1b4>
 800b5fc:	4616      	mov	r6, r2
 800b5fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800b602:	fb03 5711 	mls	r7, r3, r1, r5
 800b606:	5dc7      	ldrb	r7, [r0, r7]
 800b608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b60c:	462f      	mov	r7, r5
 800b60e:	42bb      	cmp	r3, r7
 800b610:	460d      	mov	r5, r1
 800b612:	d9f4      	bls.n	800b5fe <_printf_i+0x11a>
 800b614:	2b08      	cmp	r3, #8
 800b616:	d10b      	bne.n	800b630 <_printf_i+0x14c>
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	07df      	lsls	r7, r3, #31
 800b61c:	d508      	bpl.n	800b630 <_printf_i+0x14c>
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	6861      	ldr	r1, [r4, #4]
 800b622:	4299      	cmp	r1, r3
 800b624:	bfde      	ittt	le
 800b626:	2330      	movle	r3, #48	; 0x30
 800b628:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b62c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b630:	1b92      	subs	r2, r2, r6
 800b632:	6122      	str	r2, [r4, #16]
 800b634:	f8cd a000 	str.w	sl, [sp]
 800b638:	464b      	mov	r3, r9
 800b63a:	aa03      	add	r2, sp, #12
 800b63c:	4621      	mov	r1, r4
 800b63e:	4640      	mov	r0, r8
 800b640:	f7ff fee2 	bl	800b408 <_printf_common>
 800b644:	3001      	adds	r0, #1
 800b646:	d14c      	bne.n	800b6e2 <_printf_i+0x1fe>
 800b648:	f04f 30ff 	mov.w	r0, #4294967295
 800b64c:	b004      	add	sp, #16
 800b64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b652:	4835      	ldr	r0, [pc, #212]	; (800b728 <_printf_i+0x244>)
 800b654:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	680e      	ldr	r6, [r1, #0]
 800b65c:	061f      	lsls	r7, r3, #24
 800b65e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b662:	600e      	str	r6, [r1, #0]
 800b664:	d514      	bpl.n	800b690 <_printf_i+0x1ac>
 800b666:	07d9      	lsls	r1, r3, #31
 800b668:	bf44      	itt	mi
 800b66a:	f043 0320 	orrmi.w	r3, r3, #32
 800b66e:	6023      	strmi	r3, [r4, #0]
 800b670:	b91d      	cbnz	r5, 800b67a <_printf_i+0x196>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	f023 0320 	bic.w	r3, r3, #32
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	2310      	movs	r3, #16
 800b67c:	e7b0      	b.n	800b5e0 <_printf_i+0xfc>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	f043 0320 	orr.w	r3, r3, #32
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	2378      	movs	r3, #120	; 0x78
 800b688:	4828      	ldr	r0, [pc, #160]	; (800b72c <_printf_i+0x248>)
 800b68a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b68e:	e7e3      	b.n	800b658 <_printf_i+0x174>
 800b690:	065e      	lsls	r6, r3, #25
 800b692:	bf48      	it	mi
 800b694:	b2ad      	uxthmi	r5, r5
 800b696:	e7e6      	b.n	800b666 <_printf_i+0x182>
 800b698:	4616      	mov	r6, r2
 800b69a:	e7bb      	b.n	800b614 <_printf_i+0x130>
 800b69c:	680b      	ldr	r3, [r1, #0]
 800b69e:	6826      	ldr	r6, [r4, #0]
 800b6a0:	6960      	ldr	r0, [r4, #20]
 800b6a2:	1d1d      	adds	r5, r3, #4
 800b6a4:	600d      	str	r5, [r1, #0]
 800b6a6:	0635      	lsls	r5, r6, #24
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	d501      	bpl.n	800b6b0 <_printf_i+0x1cc>
 800b6ac:	6018      	str	r0, [r3, #0]
 800b6ae:	e002      	b.n	800b6b6 <_printf_i+0x1d2>
 800b6b0:	0671      	lsls	r1, r6, #25
 800b6b2:	d5fb      	bpl.n	800b6ac <_printf_i+0x1c8>
 800b6b4:	8018      	strh	r0, [r3, #0]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	4616      	mov	r6, r2
 800b6bc:	e7ba      	b.n	800b634 <_printf_i+0x150>
 800b6be:	680b      	ldr	r3, [r1, #0]
 800b6c0:	1d1a      	adds	r2, r3, #4
 800b6c2:	600a      	str	r2, [r1, #0]
 800b6c4:	681e      	ldr	r6, [r3, #0]
 800b6c6:	6862      	ldr	r2, [r4, #4]
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	f7f4 fe08 	bl	80002e0 <memchr>
 800b6d0:	b108      	cbz	r0, 800b6d6 <_printf_i+0x1f2>
 800b6d2:	1b80      	subs	r0, r0, r6
 800b6d4:	6060      	str	r0, [r4, #4]
 800b6d6:	6863      	ldr	r3, [r4, #4]
 800b6d8:	6123      	str	r3, [r4, #16]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6e0:	e7a8      	b.n	800b634 <_printf_i+0x150>
 800b6e2:	6923      	ldr	r3, [r4, #16]
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	47d0      	blx	sl
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d0ab      	beq.n	800b648 <_printf_i+0x164>
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	079b      	lsls	r3, r3, #30
 800b6f4:	d413      	bmi.n	800b71e <_printf_i+0x23a>
 800b6f6:	68e0      	ldr	r0, [r4, #12]
 800b6f8:	9b03      	ldr	r3, [sp, #12]
 800b6fa:	4298      	cmp	r0, r3
 800b6fc:	bfb8      	it	lt
 800b6fe:	4618      	movlt	r0, r3
 800b700:	e7a4      	b.n	800b64c <_printf_i+0x168>
 800b702:	2301      	movs	r3, #1
 800b704:	4632      	mov	r2, r6
 800b706:	4649      	mov	r1, r9
 800b708:	4640      	mov	r0, r8
 800b70a:	47d0      	blx	sl
 800b70c:	3001      	adds	r0, #1
 800b70e:	d09b      	beq.n	800b648 <_printf_i+0x164>
 800b710:	3501      	adds	r5, #1
 800b712:	68e3      	ldr	r3, [r4, #12]
 800b714:	9903      	ldr	r1, [sp, #12]
 800b716:	1a5b      	subs	r3, r3, r1
 800b718:	42ab      	cmp	r3, r5
 800b71a:	dcf2      	bgt.n	800b702 <_printf_i+0x21e>
 800b71c:	e7eb      	b.n	800b6f6 <_printf_i+0x212>
 800b71e:	2500      	movs	r5, #0
 800b720:	f104 0619 	add.w	r6, r4, #25
 800b724:	e7f5      	b.n	800b712 <_printf_i+0x22e>
 800b726:	bf00      	nop
 800b728:	0800bdfd 	.word	0x0800bdfd
 800b72c:	0800be0e 	.word	0x0800be0e

0800b730 <_sbrk_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	4d06      	ldr	r5, [pc, #24]	; (800b74c <_sbrk_r+0x1c>)
 800b734:	2300      	movs	r3, #0
 800b736:	4604      	mov	r4, r0
 800b738:	4608      	mov	r0, r1
 800b73a:	602b      	str	r3, [r5, #0]
 800b73c:	f7f6 fd3a 	bl	80021b4 <_sbrk>
 800b740:	1c43      	adds	r3, r0, #1
 800b742:	d102      	bne.n	800b74a <_sbrk_r+0x1a>
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	b103      	cbz	r3, 800b74a <_sbrk_r+0x1a>
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	bd38      	pop	{r3, r4, r5, pc}
 800b74c:	200008d4 	.word	0x200008d4

0800b750 <__sread>:
 800b750:	b510      	push	{r4, lr}
 800b752:	460c      	mov	r4, r1
 800b754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b758:	f000 fab4 	bl	800bcc4 <_read_r>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	bfab      	itete	ge
 800b760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b762:	89a3      	ldrhlt	r3, [r4, #12]
 800b764:	181b      	addge	r3, r3, r0
 800b766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b76a:	bfac      	ite	ge
 800b76c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b76e:	81a3      	strhlt	r3, [r4, #12]
 800b770:	bd10      	pop	{r4, pc}

0800b772 <__swrite>:
 800b772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b776:	461f      	mov	r7, r3
 800b778:	898b      	ldrh	r3, [r1, #12]
 800b77a:	05db      	lsls	r3, r3, #23
 800b77c:	4605      	mov	r5, r0
 800b77e:	460c      	mov	r4, r1
 800b780:	4616      	mov	r6, r2
 800b782:	d505      	bpl.n	800b790 <__swrite+0x1e>
 800b784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b788:	2302      	movs	r3, #2
 800b78a:	2200      	movs	r2, #0
 800b78c:	f000 f9c8 	bl	800bb20 <_lseek_r>
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b79a:	81a3      	strh	r3, [r4, #12]
 800b79c:	4632      	mov	r2, r6
 800b79e:	463b      	mov	r3, r7
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a6:	f000 b869 	b.w	800b87c <_write_r>

0800b7aa <__sseek>:
 800b7aa:	b510      	push	{r4, lr}
 800b7ac:	460c      	mov	r4, r1
 800b7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b2:	f000 f9b5 	bl	800bb20 <_lseek_r>
 800b7b6:	1c43      	adds	r3, r0, #1
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	bf15      	itete	ne
 800b7bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7c6:	81a3      	strheq	r3, [r4, #12]
 800b7c8:	bf18      	it	ne
 800b7ca:	81a3      	strhne	r3, [r4, #12]
 800b7cc:	bd10      	pop	{r4, pc}

0800b7ce <__sclose>:
 800b7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d2:	f000 b8d3 	b.w	800b97c <_close_r>
	...

0800b7d8 <__swbuf_r>:
 800b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7da:	460e      	mov	r6, r1
 800b7dc:	4614      	mov	r4, r2
 800b7de:	4605      	mov	r5, r0
 800b7e0:	b118      	cbz	r0, 800b7ea <__swbuf_r+0x12>
 800b7e2:	6983      	ldr	r3, [r0, #24]
 800b7e4:	b90b      	cbnz	r3, 800b7ea <__swbuf_r+0x12>
 800b7e6:	f7ff fbbb 	bl	800af60 <__sinit>
 800b7ea:	4b21      	ldr	r3, [pc, #132]	; (800b870 <__swbuf_r+0x98>)
 800b7ec:	429c      	cmp	r4, r3
 800b7ee:	d12b      	bne.n	800b848 <__swbuf_r+0x70>
 800b7f0:	686c      	ldr	r4, [r5, #4]
 800b7f2:	69a3      	ldr	r3, [r4, #24]
 800b7f4:	60a3      	str	r3, [r4, #8]
 800b7f6:	89a3      	ldrh	r3, [r4, #12]
 800b7f8:	071a      	lsls	r2, r3, #28
 800b7fa:	d52f      	bpl.n	800b85c <__swbuf_r+0x84>
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	b36b      	cbz	r3, 800b85c <__swbuf_r+0x84>
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	6820      	ldr	r0, [r4, #0]
 800b804:	1ac0      	subs	r0, r0, r3
 800b806:	6963      	ldr	r3, [r4, #20]
 800b808:	b2f6      	uxtb	r6, r6
 800b80a:	4283      	cmp	r3, r0
 800b80c:	4637      	mov	r7, r6
 800b80e:	dc04      	bgt.n	800b81a <__swbuf_r+0x42>
 800b810:	4621      	mov	r1, r4
 800b812:	4628      	mov	r0, r5
 800b814:	f000 f948 	bl	800baa8 <_fflush_r>
 800b818:	bb30      	cbnz	r0, 800b868 <__swbuf_r+0x90>
 800b81a:	68a3      	ldr	r3, [r4, #8]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	60a3      	str	r3, [r4, #8]
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	6022      	str	r2, [r4, #0]
 800b826:	701e      	strb	r6, [r3, #0]
 800b828:	6963      	ldr	r3, [r4, #20]
 800b82a:	3001      	adds	r0, #1
 800b82c:	4283      	cmp	r3, r0
 800b82e:	d004      	beq.n	800b83a <__swbuf_r+0x62>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	07db      	lsls	r3, r3, #31
 800b834:	d506      	bpl.n	800b844 <__swbuf_r+0x6c>
 800b836:	2e0a      	cmp	r6, #10
 800b838:	d104      	bne.n	800b844 <__swbuf_r+0x6c>
 800b83a:	4621      	mov	r1, r4
 800b83c:	4628      	mov	r0, r5
 800b83e:	f000 f933 	bl	800baa8 <_fflush_r>
 800b842:	b988      	cbnz	r0, 800b868 <__swbuf_r+0x90>
 800b844:	4638      	mov	r0, r7
 800b846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b848:	4b0a      	ldr	r3, [pc, #40]	; (800b874 <__swbuf_r+0x9c>)
 800b84a:	429c      	cmp	r4, r3
 800b84c:	d101      	bne.n	800b852 <__swbuf_r+0x7a>
 800b84e:	68ac      	ldr	r4, [r5, #8]
 800b850:	e7cf      	b.n	800b7f2 <__swbuf_r+0x1a>
 800b852:	4b09      	ldr	r3, [pc, #36]	; (800b878 <__swbuf_r+0xa0>)
 800b854:	429c      	cmp	r4, r3
 800b856:	bf08      	it	eq
 800b858:	68ec      	ldreq	r4, [r5, #12]
 800b85a:	e7ca      	b.n	800b7f2 <__swbuf_r+0x1a>
 800b85c:	4621      	mov	r1, r4
 800b85e:	4628      	mov	r0, r5
 800b860:	f000 f81e 	bl	800b8a0 <__swsetup_r>
 800b864:	2800      	cmp	r0, #0
 800b866:	d0cb      	beq.n	800b800 <__swbuf_r+0x28>
 800b868:	f04f 37ff 	mov.w	r7, #4294967295
 800b86c:	e7ea      	b.n	800b844 <__swbuf_r+0x6c>
 800b86e:	bf00      	nop
 800b870:	0800bdac 	.word	0x0800bdac
 800b874:	0800bdcc 	.word	0x0800bdcc
 800b878:	0800bd8c 	.word	0x0800bd8c

0800b87c <_write_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4d07      	ldr	r5, [pc, #28]	; (800b89c <_write_r+0x20>)
 800b880:	4604      	mov	r4, r0
 800b882:	4608      	mov	r0, r1
 800b884:	4611      	mov	r1, r2
 800b886:	2200      	movs	r2, #0
 800b888:	602a      	str	r2, [r5, #0]
 800b88a:	461a      	mov	r2, r3
 800b88c:	f7f5 ff56 	bl	800173c <_write>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <_write_r+0x1e>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	b103      	cbz	r3, 800b89a <_write_r+0x1e>
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	200008d4 	.word	0x200008d4

0800b8a0 <__swsetup_r>:
 800b8a0:	4b32      	ldr	r3, [pc, #200]	; (800b96c <__swsetup_r+0xcc>)
 800b8a2:	b570      	push	{r4, r5, r6, lr}
 800b8a4:	681d      	ldr	r5, [r3, #0]
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	b125      	cbz	r5, 800b8b6 <__swsetup_r+0x16>
 800b8ac:	69ab      	ldr	r3, [r5, #24]
 800b8ae:	b913      	cbnz	r3, 800b8b6 <__swsetup_r+0x16>
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f7ff fb55 	bl	800af60 <__sinit>
 800b8b6:	4b2e      	ldr	r3, [pc, #184]	; (800b970 <__swsetup_r+0xd0>)
 800b8b8:	429c      	cmp	r4, r3
 800b8ba:	d10f      	bne.n	800b8dc <__swsetup_r+0x3c>
 800b8bc:	686c      	ldr	r4, [r5, #4]
 800b8be:	89a3      	ldrh	r3, [r4, #12]
 800b8c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8c4:	0719      	lsls	r1, r3, #28
 800b8c6:	d42c      	bmi.n	800b922 <__swsetup_r+0x82>
 800b8c8:	06dd      	lsls	r5, r3, #27
 800b8ca:	d411      	bmi.n	800b8f0 <__swsetup_r+0x50>
 800b8cc:	2309      	movs	r3, #9
 800b8ce:	6033      	str	r3, [r6, #0]
 800b8d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8d4:	81a3      	strh	r3, [r4, #12]
 800b8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8da:	e03e      	b.n	800b95a <__swsetup_r+0xba>
 800b8dc:	4b25      	ldr	r3, [pc, #148]	; (800b974 <__swsetup_r+0xd4>)
 800b8de:	429c      	cmp	r4, r3
 800b8e0:	d101      	bne.n	800b8e6 <__swsetup_r+0x46>
 800b8e2:	68ac      	ldr	r4, [r5, #8]
 800b8e4:	e7eb      	b.n	800b8be <__swsetup_r+0x1e>
 800b8e6:	4b24      	ldr	r3, [pc, #144]	; (800b978 <__swsetup_r+0xd8>)
 800b8e8:	429c      	cmp	r4, r3
 800b8ea:	bf08      	it	eq
 800b8ec:	68ec      	ldreq	r4, [r5, #12]
 800b8ee:	e7e6      	b.n	800b8be <__swsetup_r+0x1e>
 800b8f0:	0758      	lsls	r0, r3, #29
 800b8f2:	d512      	bpl.n	800b91a <__swsetup_r+0x7a>
 800b8f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8f6:	b141      	cbz	r1, 800b90a <__swsetup_r+0x6a>
 800b8f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8fc:	4299      	cmp	r1, r3
 800b8fe:	d002      	beq.n	800b906 <__swsetup_r+0x66>
 800b900:	4630      	mov	r0, r6
 800b902:	f000 f98f 	bl	800bc24 <_free_r>
 800b906:	2300      	movs	r3, #0
 800b908:	6363      	str	r3, [r4, #52]	; 0x34
 800b90a:	89a3      	ldrh	r3, [r4, #12]
 800b90c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b910:	81a3      	strh	r3, [r4, #12]
 800b912:	2300      	movs	r3, #0
 800b914:	6063      	str	r3, [r4, #4]
 800b916:	6923      	ldr	r3, [r4, #16]
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	f043 0308 	orr.w	r3, r3, #8
 800b920:	81a3      	strh	r3, [r4, #12]
 800b922:	6923      	ldr	r3, [r4, #16]
 800b924:	b94b      	cbnz	r3, 800b93a <__swsetup_r+0x9a>
 800b926:	89a3      	ldrh	r3, [r4, #12]
 800b928:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b92c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b930:	d003      	beq.n	800b93a <__swsetup_r+0x9a>
 800b932:	4621      	mov	r1, r4
 800b934:	4630      	mov	r0, r6
 800b936:	f000 f929 	bl	800bb8c <__smakebuf_r>
 800b93a:	89a0      	ldrh	r0, [r4, #12]
 800b93c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b940:	f010 0301 	ands.w	r3, r0, #1
 800b944:	d00a      	beq.n	800b95c <__swsetup_r+0xbc>
 800b946:	2300      	movs	r3, #0
 800b948:	60a3      	str	r3, [r4, #8]
 800b94a:	6963      	ldr	r3, [r4, #20]
 800b94c:	425b      	negs	r3, r3
 800b94e:	61a3      	str	r3, [r4, #24]
 800b950:	6923      	ldr	r3, [r4, #16]
 800b952:	b943      	cbnz	r3, 800b966 <__swsetup_r+0xc6>
 800b954:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b958:	d1ba      	bne.n	800b8d0 <__swsetup_r+0x30>
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	0781      	lsls	r1, r0, #30
 800b95e:	bf58      	it	pl
 800b960:	6963      	ldrpl	r3, [r4, #20]
 800b962:	60a3      	str	r3, [r4, #8]
 800b964:	e7f4      	b.n	800b950 <__swsetup_r+0xb0>
 800b966:	2000      	movs	r0, #0
 800b968:	e7f7      	b.n	800b95a <__swsetup_r+0xba>
 800b96a:	bf00      	nop
 800b96c:	20000010 	.word	0x20000010
 800b970:	0800bdac 	.word	0x0800bdac
 800b974:	0800bdcc 	.word	0x0800bdcc
 800b978:	0800bd8c 	.word	0x0800bd8c

0800b97c <_close_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4d06      	ldr	r5, [pc, #24]	; (800b998 <_close_r+0x1c>)
 800b980:	2300      	movs	r3, #0
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	602b      	str	r3, [r5, #0]
 800b988:	f7f6 fbdf 	bl	800214a <_close>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d102      	bne.n	800b996 <_close_r+0x1a>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b103      	cbz	r3, 800b996 <_close_r+0x1a>
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	200008d4 	.word	0x200008d4

0800b99c <__sflush_r>:
 800b99c:	898a      	ldrh	r2, [r1, #12]
 800b99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	0710      	lsls	r0, r2, #28
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	d458      	bmi.n	800ba5c <__sflush_r+0xc0>
 800b9aa:	684b      	ldr	r3, [r1, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	dc05      	bgt.n	800b9bc <__sflush_r+0x20>
 800b9b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	dc02      	bgt.n	800b9bc <__sflush_r+0x20>
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9be:	2e00      	cmp	r6, #0
 800b9c0:	d0f9      	beq.n	800b9b6 <__sflush_r+0x1a>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9c8:	682f      	ldr	r7, [r5, #0]
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	d032      	beq.n	800ba34 <__sflush_r+0x98>
 800b9ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	075a      	lsls	r2, r3, #29
 800b9d4:	d505      	bpl.n	800b9e2 <__sflush_r+0x46>
 800b9d6:	6863      	ldr	r3, [r4, #4]
 800b9d8:	1ac0      	subs	r0, r0, r3
 800b9da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9dc:	b10b      	cbz	r3, 800b9e2 <__sflush_r+0x46>
 800b9de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9e0:	1ac0      	subs	r0, r0, r3
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9e8:	6a21      	ldr	r1, [r4, #32]
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	47b0      	blx	r6
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	d106      	bne.n	800ba02 <__sflush_r+0x66>
 800b9f4:	6829      	ldr	r1, [r5, #0]
 800b9f6:	291d      	cmp	r1, #29
 800b9f8:	d82c      	bhi.n	800ba54 <__sflush_r+0xb8>
 800b9fa:	4a2a      	ldr	r2, [pc, #168]	; (800baa4 <__sflush_r+0x108>)
 800b9fc:	40ca      	lsrs	r2, r1
 800b9fe:	07d6      	lsls	r6, r2, #31
 800ba00:	d528      	bpl.n	800ba54 <__sflush_r+0xb8>
 800ba02:	2200      	movs	r2, #0
 800ba04:	6062      	str	r2, [r4, #4]
 800ba06:	04d9      	lsls	r1, r3, #19
 800ba08:	6922      	ldr	r2, [r4, #16]
 800ba0a:	6022      	str	r2, [r4, #0]
 800ba0c:	d504      	bpl.n	800ba18 <__sflush_r+0x7c>
 800ba0e:	1c42      	adds	r2, r0, #1
 800ba10:	d101      	bne.n	800ba16 <__sflush_r+0x7a>
 800ba12:	682b      	ldr	r3, [r5, #0]
 800ba14:	b903      	cbnz	r3, 800ba18 <__sflush_r+0x7c>
 800ba16:	6560      	str	r0, [r4, #84]	; 0x54
 800ba18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba1a:	602f      	str	r7, [r5, #0]
 800ba1c:	2900      	cmp	r1, #0
 800ba1e:	d0ca      	beq.n	800b9b6 <__sflush_r+0x1a>
 800ba20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba24:	4299      	cmp	r1, r3
 800ba26:	d002      	beq.n	800ba2e <__sflush_r+0x92>
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f000 f8fb 	bl	800bc24 <_free_r>
 800ba2e:	2000      	movs	r0, #0
 800ba30:	6360      	str	r0, [r4, #52]	; 0x34
 800ba32:	e7c1      	b.n	800b9b8 <__sflush_r+0x1c>
 800ba34:	6a21      	ldr	r1, [r4, #32]
 800ba36:	2301      	movs	r3, #1
 800ba38:	4628      	mov	r0, r5
 800ba3a:	47b0      	blx	r6
 800ba3c:	1c41      	adds	r1, r0, #1
 800ba3e:	d1c7      	bne.n	800b9d0 <__sflush_r+0x34>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0c4      	beq.n	800b9d0 <__sflush_r+0x34>
 800ba46:	2b1d      	cmp	r3, #29
 800ba48:	d001      	beq.n	800ba4e <__sflush_r+0xb2>
 800ba4a:	2b16      	cmp	r3, #22
 800ba4c:	d101      	bne.n	800ba52 <__sflush_r+0xb6>
 800ba4e:	602f      	str	r7, [r5, #0]
 800ba50:	e7b1      	b.n	800b9b6 <__sflush_r+0x1a>
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba58:	81a3      	strh	r3, [r4, #12]
 800ba5a:	e7ad      	b.n	800b9b8 <__sflush_r+0x1c>
 800ba5c:	690f      	ldr	r7, [r1, #16]
 800ba5e:	2f00      	cmp	r7, #0
 800ba60:	d0a9      	beq.n	800b9b6 <__sflush_r+0x1a>
 800ba62:	0793      	lsls	r3, r2, #30
 800ba64:	680e      	ldr	r6, [r1, #0]
 800ba66:	bf08      	it	eq
 800ba68:	694b      	ldreq	r3, [r1, #20]
 800ba6a:	600f      	str	r7, [r1, #0]
 800ba6c:	bf18      	it	ne
 800ba6e:	2300      	movne	r3, #0
 800ba70:	eba6 0807 	sub.w	r8, r6, r7
 800ba74:	608b      	str	r3, [r1, #8]
 800ba76:	f1b8 0f00 	cmp.w	r8, #0
 800ba7a:	dd9c      	ble.n	800b9b6 <__sflush_r+0x1a>
 800ba7c:	6a21      	ldr	r1, [r4, #32]
 800ba7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba80:	4643      	mov	r3, r8
 800ba82:	463a      	mov	r2, r7
 800ba84:	4628      	mov	r0, r5
 800ba86:	47b0      	blx	r6
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	dc06      	bgt.n	800ba9a <__sflush_r+0xfe>
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba92:	81a3      	strh	r3, [r4, #12]
 800ba94:	f04f 30ff 	mov.w	r0, #4294967295
 800ba98:	e78e      	b.n	800b9b8 <__sflush_r+0x1c>
 800ba9a:	4407      	add	r7, r0
 800ba9c:	eba8 0800 	sub.w	r8, r8, r0
 800baa0:	e7e9      	b.n	800ba76 <__sflush_r+0xda>
 800baa2:	bf00      	nop
 800baa4:	20400001 	.word	0x20400001

0800baa8 <_fflush_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	690b      	ldr	r3, [r1, #16]
 800baac:	4605      	mov	r5, r0
 800baae:	460c      	mov	r4, r1
 800bab0:	b913      	cbnz	r3, 800bab8 <_fflush_r+0x10>
 800bab2:	2500      	movs	r5, #0
 800bab4:	4628      	mov	r0, r5
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	b118      	cbz	r0, 800bac2 <_fflush_r+0x1a>
 800baba:	6983      	ldr	r3, [r0, #24]
 800babc:	b90b      	cbnz	r3, 800bac2 <_fflush_r+0x1a>
 800babe:	f7ff fa4f 	bl	800af60 <__sinit>
 800bac2:	4b14      	ldr	r3, [pc, #80]	; (800bb14 <_fflush_r+0x6c>)
 800bac4:	429c      	cmp	r4, r3
 800bac6:	d11b      	bne.n	800bb00 <_fflush_r+0x58>
 800bac8:	686c      	ldr	r4, [r5, #4]
 800baca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0ef      	beq.n	800bab2 <_fflush_r+0xa>
 800bad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bad4:	07d0      	lsls	r0, r2, #31
 800bad6:	d404      	bmi.n	800bae2 <_fflush_r+0x3a>
 800bad8:	0599      	lsls	r1, r3, #22
 800bada:	d402      	bmi.n	800bae2 <_fflush_r+0x3a>
 800badc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bade:	f7ff fadd 	bl	800b09c <__retarget_lock_acquire_recursive>
 800bae2:	4628      	mov	r0, r5
 800bae4:	4621      	mov	r1, r4
 800bae6:	f7ff ff59 	bl	800b99c <__sflush_r>
 800baea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baec:	07da      	lsls	r2, r3, #31
 800baee:	4605      	mov	r5, r0
 800baf0:	d4e0      	bmi.n	800bab4 <_fflush_r+0xc>
 800baf2:	89a3      	ldrh	r3, [r4, #12]
 800baf4:	059b      	lsls	r3, r3, #22
 800baf6:	d4dd      	bmi.n	800bab4 <_fflush_r+0xc>
 800baf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bafa:	f7ff fad0 	bl	800b09e <__retarget_lock_release_recursive>
 800bafe:	e7d9      	b.n	800bab4 <_fflush_r+0xc>
 800bb00:	4b05      	ldr	r3, [pc, #20]	; (800bb18 <_fflush_r+0x70>)
 800bb02:	429c      	cmp	r4, r3
 800bb04:	d101      	bne.n	800bb0a <_fflush_r+0x62>
 800bb06:	68ac      	ldr	r4, [r5, #8]
 800bb08:	e7df      	b.n	800baca <_fflush_r+0x22>
 800bb0a:	4b04      	ldr	r3, [pc, #16]	; (800bb1c <_fflush_r+0x74>)
 800bb0c:	429c      	cmp	r4, r3
 800bb0e:	bf08      	it	eq
 800bb10:	68ec      	ldreq	r4, [r5, #12]
 800bb12:	e7da      	b.n	800baca <_fflush_r+0x22>
 800bb14:	0800bdac 	.word	0x0800bdac
 800bb18:	0800bdcc 	.word	0x0800bdcc
 800bb1c:	0800bd8c 	.word	0x0800bd8c

0800bb20 <_lseek_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4d07      	ldr	r5, [pc, #28]	; (800bb40 <_lseek_r+0x20>)
 800bb24:	4604      	mov	r4, r0
 800bb26:	4608      	mov	r0, r1
 800bb28:	4611      	mov	r1, r2
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	602a      	str	r2, [r5, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	f7f6 fb32 	bl	8002198 <_lseek>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d102      	bne.n	800bb3e <_lseek_r+0x1e>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	b103      	cbz	r3, 800bb3e <_lseek_r+0x1e>
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	200008d4 	.word	0x200008d4

0800bb44 <__swhatbuf_r>:
 800bb44:	b570      	push	{r4, r5, r6, lr}
 800bb46:	460e      	mov	r6, r1
 800bb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb4c:	2900      	cmp	r1, #0
 800bb4e:	b096      	sub	sp, #88	; 0x58
 800bb50:	4614      	mov	r4, r2
 800bb52:	461d      	mov	r5, r3
 800bb54:	da07      	bge.n	800bb66 <__swhatbuf_r+0x22>
 800bb56:	2300      	movs	r3, #0
 800bb58:	602b      	str	r3, [r5, #0]
 800bb5a:	89b3      	ldrh	r3, [r6, #12]
 800bb5c:	061a      	lsls	r2, r3, #24
 800bb5e:	d410      	bmi.n	800bb82 <__swhatbuf_r+0x3e>
 800bb60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb64:	e00e      	b.n	800bb84 <__swhatbuf_r+0x40>
 800bb66:	466a      	mov	r2, sp
 800bb68:	f000 f8be 	bl	800bce8 <_fstat_r>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	dbf2      	blt.n	800bb56 <__swhatbuf_r+0x12>
 800bb70:	9a01      	ldr	r2, [sp, #4]
 800bb72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb7a:	425a      	negs	r2, r3
 800bb7c:	415a      	adcs	r2, r3
 800bb7e:	602a      	str	r2, [r5, #0]
 800bb80:	e7ee      	b.n	800bb60 <__swhatbuf_r+0x1c>
 800bb82:	2340      	movs	r3, #64	; 0x40
 800bb84:	2000      	movs	r0, #0
 800bb86:	6023      	str	r3, [r4, #0]
 800bb88:	b016      	add	sp, #88	; 0x58
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}

0800bb8c <__smakebuf_r>:
 800bb8c:	898b      	ldrh	r3, [r1, #12]
 800bb8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb90:	079d      	lsls	r5, r3, #30
 800bb92:	4606      	mov	r6, r0
 800bb94:	460c      	mov	r4, r1
 800bb96:	d507      	bpl.n	800bba8 <__smakebuf_r+0x1c>
 800bb98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	6123      	str	r3, [r4, #16]
 800bba0:	2301      	movs	r3, #1
 800bba2:	6163      	str	r3, [r4, #20]
 800bba4:	b002      	add	sp, #8
 800bba6:	bd70      	pop	{r4, r5, r6, pc}
 800bba8:	ab01      	add	r3, sp, #4
 800bbaa:	466a      	mov	r2, sp
 800bbac:	f7ff ffca 	bl	800bb44 <__swhatbuf_r>
 800bbb0:	9900      	ldr	r1, [sp, #0]
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	f7ff fa73 	bl	800b0a0 <_malloc_r>
 800bbba:	b948      	cbnz	r0, 800bbd0 <__smakebuf_r+0x44>
 800bbbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbc0:	059a      	lsls	r2, r3, #22
 800bbc2:	d4ef      	bmi.n	800bba4 <__smakebuf_r+0x18>
 800bbc4:	f023 0303 	bic.w	r3, r3, #3
 800bbc8:	f043 0302 	orr.w	r3, r3, #2
 800bbcc:	81a3      	strh	r3, [r4, #12]
 800bbce:	e7e3      	b.n	800bb98 <__smakebuf_r+0xc>
 800bbd0:	4b0d      	ldr	r3, [pc, #52]	; (800bc08 <__smakebuf_r+0x7c>)
 800bbd2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	6020      	str	r0, [r4, #0]
 800bbd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbdc:	81a3      	strh	r3, [r4, #12]
 800bbde:	9b00      	ldr	r3, [sp, #0]
 800bbe0:	6163      	str	r3, [r4, #20]
 800bbe2:	9b01      	ldr	r3, [sp, #4]
 800bbe4:	6120      	str	r0, [r4, #16]
 800bbe6:	b15b      	cbz	r3, 800bc00 <__smakebuf_r+0x74>
 800bbe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbec:	4630      	mov	r0, r6
 800bbee:	f000 f88d 	bl	800bd0c <_isatty_r>
 800bbf2:	b128      	cbz	r0, 800bc00 <__smakebuf_r+0x74>
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	f023 0303 	bic.w	r3, r3, #3
 800bbfa:	f043 0301 	orr.w	r3, r3, #1
 800bbfe:	81a3      	strh	r3, [r4, #12]
 800bc00:	89a0      	ldrh	r0, [r4, #12]
 800bc02:	4305      	orrs	r5, r0
 800bc04:	81a5      	strh	r5, [r4, #12]
 800bc06:	e7cd      	b.n	800bba4 <__smakebuf_r+0x18>
 800bc08:	0800aef9 	.word	0x0800aef9

0800bc0c <__malloc_lock>:
 800bc0c:	4801      	ldr	r0, [pc, #4]	; (800bc14 <__malloc_lock+0x8>)
 800bc0e:	f7ff ba45 	b.w	800b09c <__retarget_lock_acquire_recursive>
 800bc12:	bf00      	nop
 800bc14:	200008cc 	.word	0x200008cc

0800bc18 <__malloc_unlock>:
 800bc18:	4801      	ldr	r0, [pc, #4]	; (800bc20 <__malloc_unlock+0x8>)
 800bc1a:	f7ff ba40 	b.w	800b09e <__retarget_lock_release_recursive>
 800bc1e:	bf00      	nop
 800bc20:	200008cc 	.word	0x200008cc

0800bc24 <_free_r>:
 800bc24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc26:	2900      	cmp	r1, #0
 800bc28:	d048      	beq.n	800bcbc <_free_r+0x98>
 800bc2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc2e:	9001      	str	r0, [sp, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f1a1 0404 	sub.w	r4, r1, #4
 800bc36:	bfb8      	it	lt
 800bc38:	18e4      	addlt	r4, r4, r3
 800bc3a:	f7ff ffe7 	bl	800bc0c <__malloc_lock>
 800bc3e:	4a20      	ldr	r2, [pc, #128]	; (800bcc0 <_free_r+0x9c>)
 800bc40:	9801      	ldr	r0, [sp, #4]
 800bc42:	6813      	ldr	r3, [r2, #0]
 800bc44:	4615      	mov	r5, r2
 800bc46:	b933      	cbnz	r3, 800bc56 <_free_r+0x32>
 800bc48:	6063      	str	r3, [r4, #4]
 800bc4a:	6014      	str	r4, [r2, #0]
 800bc4c:	b003      	add	sp, #12
 800bc4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc52:	f7ff bfe1 	b.w	800bc18 <__malloc_unlock>
 800bc56:	42a3      	cmp	r3, r4
 800bc58:	d90b      	bls.n	800bc72 <_free_r+0x4e>
 800bc5a:	6821      	ldr	r1, [r4, #0]
 800bc5c:	1862      	adds	r2, r4, r1
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	bf04      	itt	eq
 800bc62:	681a      	ldreq	r2, [r3, #0]
 800bc64:	685b      	ldreq	r3, [r3, #4]
 800bc66:	6063      	str	r3, [r4, #4]
 800bc68:	bf04      	itt	eq
 800bc6a:	1852      	addeq	r2, r2, r1
 800bc6c:	6022      	streq	r2, [r4, #0]
 800bc6e:	602c      	str	r4, [r5, #0]
 800bc70:	e7ec      	b.n	800bc4c <_free_r+0x28>
 800bc72:	461a      	mov	r2, r3
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	b10b      	cbz	r3, 800bc7c <_free_r+0x58>
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	d9fa      	bls.n	800bc72 <_free_r+0x4e>
 800bc7c:	6811      	ldr	r1, [r2, #0]
 800bc7e:	1855      	adds	r5, r2, r1
 800bc80:	42a5      	cmp	r5, r4
 800bc82:	d10b      	bne.n	800bc9c <_free_r+0x78>
 800bc84:	6824      	ldr	r4, [r4, #0]
 800bc86:	4421      	add	r1, r4
 800bc88:	1854      	adds	r4, r2, r1
 800bc8a:	42a3      	cmp	r3, r4
 800bc8c:	6011      	str	r1, [r2, #0]
 800bc8e:	d1dd      	bne.n	800bc4c <_free_r+0x28>
 800bc90:	681c      	ldr	r4, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	6053      	str	r3, [r2, #4]
 800bc96:	4421      	add	r1, r4
 800bc98:	6011      	str	r1, [r2, #0]
 800bc9a:	e7d7      	b.n	800bc4c <_free_r+0x28>
 800bc9c:	d902      	bls.n	800bca4 <_free_r+0x80>
 800bc9e:	230c      	movs	r3, #12
 800bca0:	6003      	str	r3, [r0, #0]
 800bca2:	e7d3      	b.n	800bc4c <_free_r+0x28>
 800bca4:	6825      	ldr	r5, [r4, #0]
 800bca6:	1961      	adds	r1, r4, r5
 800bca8:	428b      	cmp	r3, r1
 800bcaa:	bf04      	itt	eq
 800bcac:	6819      	ldreq	r1, [r3, #0]
 800bcae:	685b      	ldreq	r3, [r3, #4]
 800bcb0:	6063      	str	r3, [r4, #4]
 800bcb2:	bf04      	itt	eq
 800bcb4:	1949      	addeq	r1, r1, r5
 800bcb6:	6021      	streq	r1, [r4, #0]
 800bcb8:	6054      	str	r4, [r2, #4]
 800bcba:	e7c7      	b.n	800bc4c <_free_r+0x28>
 800bcbc:	b003      	add	sp, #12
 800bcbe:	bd30      	pop	{r4, r5, pc}
 800bcc0:	2000009c 	.word	0x2000009c

0800bcc4 <_read_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d07      	ldr	r5, [pc, #28]	; (800bce4 <_read_r+0x20>)
 800bcc8:	4604      	mov	r4, r0
 800bcca:	4608      	mov	r0, r1
 800bccc:	4611      	mov	r1, r2
 800bcce:	2200      	movs	r2, #0
 800bcd0:	602a      	str	r2, [r5, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	f7f6 fa1c 	bl	8002110 <_read>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_read_r+0x1e>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_read_r+0x1e>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	200008d4 	.word	0x200008d4

0800bce8 <_fstat_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d07      	ldr	r5, [pc, #28]	; (800bd08 <_fstat_r+0x20>)
 800bcec:	2300      	movs	r3, #0
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	f7f6 fa34 	bl	8002162 <_fstat>
 800bcfa:	1c43      	adds	r3, r0, #1
 800bcfc:	d102      	bne.n	800bd04 <_fstat_r+0x1c>
 800bcfe:	682b      	ldr	r3, [r5, #0]
 800bd00:	b103      	cbz	r3, 800bd04 <_fstat_r+0x1c>
 800bd02:	6023      	str	r3, [r4, #0]
 800bd04:	bd38      	pop	{r3, r4, r5, pc}
 800bd06:	bf00      	nop
 800bd08:	200008d4 	.word	0x200008d4

0800bd0c <_isatty_r>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4d06      	ldr	r5, [pc, #24]	; (800bd28 <_isatty_r+0x1c>)
 800bd10:	2300      	movs	r3, #0
 800bd12:	4604      	mov	r4, r0
 800bd14:	4608      	mov	r0, r1
 800bd16:	602b      	str	r3, [r5, #0]
 800bd18:	f7f6 fa33 	bl	8002182 <_isatty>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d102      	bne.n	800bd26 <_isatty_r+0x1a>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	b103      	cbz	r3, 800bd26 <_isatty_r+0x1a>
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	200008d4 	.word	0x200008d4

0800bd2c <_init>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	bf00      	nop
 800bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd32:	bc08      	pop	{r3}
 800bd34:	469e      	mov	lr, r3
 800bd36:	4770      	bx	lr

0800bd38 <_fini>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	bf00      	nop
 800bd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3e:	bc08      	pop	{r3}
 800bd40:	469e      	mov	lr, r3
 800bd42:	4770      	bx	lr
