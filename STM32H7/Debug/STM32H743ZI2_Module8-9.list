
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e48  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f44  080150e8  080150e8  000250e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801702c  0801702c  0002702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08017034  08017034  00027034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801703c  0801703c  0002703c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000410  24000000  08017044  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001354  24000410  08017454  00030410  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001764  08017454  00031764  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 10 .debug_info   00042a94  00000000  00000000  0003043e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006012  00000000  00000000  00072ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  00078ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001618  00000000  00000000  0007a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e920  00000000  00000000  0007bce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024b93  00000000  00000000  000ba600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016e18b  00000000  00000000  000df193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024d31e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000075b0  00000000  00000000  0024d374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000410 	.word	0x24000410
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080150d0 	.word	0x080150d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000414 	.word	0x24000414
 80002dc:	080150d0 	.word	0x080150d0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f00e fb68 	bl	800edb0 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f00e fbf5 	bl	800eedc <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	765a      	strb	r2, [r3, #25]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e5b      	ldrb	r3, [r3, #25]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000850:	db0b      	blt.n	800086a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <_ZN5AMT216unwarpEv+0xa0>)
 8000864:	4413      	add	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e020      	b.n	80008ac <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000870:	461a      	mov	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc0c      	bgt.n	800089a <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000886:	461a      	mov	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e008      	b.n	80008ac <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	441a      	add	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	615a      	str	r2, [r3, #20]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	ffffc001 	.word	0xffffc001

080008d4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	695b      	ldr	r3, [r3, #20]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>:
 *  Created on: Apr 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AS5047UABI.h"

AS5047UABI::AS5047UABI(TIM_HandleTypeDef *_enc_htim, uint32_t _ENC_TIM_CHANNEL1, uint32_t _ENC_TIM_CHANNEL2){
 8000906:	b480      	push	{r7}
 8000908:	b085      	sub	sp, #20
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2200      	movs	r2, #0
 8000918:	731a      	strb	r2, [r3, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2204      	movs	r2, #4
 800091e:	735a      	strb	r2, [r3, #13]
	this->enc_htim = _enc_htim;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	601a      	str	r2, [r3, #0]
	this->ENC_TIM_CHANNEL1 = _ENC_TIM_CHANNEL1;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	605a      	str	r2, [r3, #4]
	this->ENC_TIM_CHANNEL2 = _ENC_TIM_CHANNEL2;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	609a      	str	r2, [r3, #8]
}
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4618      	mov	r0, r3
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <_ZN10AS5047UABID1Ev>:
AS5047UABI::~AS5047UABI(){
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

}
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <_ZN10AS5047UABI17EncoderReadEnableEv>:
void AS5047UABI::EncoderReadEnable(){
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL1);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	4619      	mov	r1, r3
 8000968:	4610      	mov	r0, r2
 800096a:	f00d f891 	bl	800da90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL2);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f00d f889 	bl	800da90 <HAL_TIM_Encoder_Start>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <_ZN10AS5047UABI7setZeroEv>:
void AS5047UABI::EncoderReadDisable(){
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL1);
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL2);
}
void AS5047UABI::setZero(){
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	this->enc_htim->Instance->CNT = 0;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <_ZN10AS5047UABI12getMRadAngleEv>:
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 360.0f;
}
float AS5047UABI::getRadAngle(){
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6.28f;
}
float AS5047UABI::getMRadAngle(){
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6280.0f;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b4:	ee07 3a90 	vmov	s15, r3
 80009b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009bc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80009dc <_ZN10AS5047UABI12getMRadAngleEv+0x38>
 80009c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009c4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80009e0 <_ZN10AS5047UABI12getMRadAngleEv+0x3c>
 80009c8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80009cc:	eeb0 0a67 	vmov.f32	s0, s15
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	44ffe000 	.word	0x44ffe000
 80009e0:	45c44000 	.word	0x45c44000

080009e4 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80009ee:	edc7 0a00 	vstr	s1, [r7]
 80009f2:	edd7 0a00 	vldr	s1, [r7]
 80009f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80009fa:	f010 fed5 	bl	80117a8 <atan2f>
 80009fe:	eef0 7a40 	vmov.f32	s15, s0
 8000a02:	eeb0 0a67 	vmov.f32	s0, s15
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a16:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a1a:	f010 fec7 	bl	80117ac <sqrtf>
 8000a1e:	eef0 7a40 	vmov.f32	s15, s0
 8000a22:	eeb0 0a67 	vmov.f32	s0, s15
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a32      	ldr	r2, [pc, #200]	; (8000b00 <_ZN10RobotJointC1Ev+0xd4>)
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	edd3 7a00 	vldr	s15, [r3]
 8000a40:	2002      	movs	r0, #2
 8000a42:	eeb0 0a67 	vmov.f32	s0, s15
 8000a46:	f000 fecb 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000a4a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	edc3 7a01 	vstr	s15, [r3, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	edd3 7a00 	vldr	s15, [r3]
 8000a5e:	2003      	movs	r0, #3
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	f000 febc 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000a68:	eeb0 7b40 	vmov.f64	d7, d0
 8000a6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	edc3 7a02 	vstr	s15, [r3, #8]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	edd3 7a00 	vldr	s15, [r3]
 8000a7c:	2004      	movs	r0, #4
 8000a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a82:	f000 fead 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000a86:	eeb0 7b40 	vmov.f64	d7, d0
 8000a8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	edc3 7a03 	vstr	s15, [r3, #12]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f04f 0200 	mov.w	r2, #0
 8000a9a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000aae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ac2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f04f 0200 	mov.w	r2, #0
 8000acc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f04f 0200 	mov.w	r2, #0
 8000ad6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <_ZN10RobotJointC1Ev+0xd8>)
 8000ae8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <_ZN10RobotJointC1Ev+0xd4>)
 8000af0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	3a83126f 	.word	0x3a83126f
 8000b04:	3dcccccd 	.word	0x3dcccccd

08000b08 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

}
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b090      	sub	sp, #64	; 0x40
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6278      	str	r0, [r7, #36]	; 0x24
 8000b28:	ed87 0a08 	vstr	s0, [r7, #32]
 8000b2c:	edc7 0a07 	vstr	s1, [r7, #28]
 8000b30:	ed87 1a06 	vstr	s2, [r7, #24]
 8000b34:	edc7 1a05 	vstr	s3, [r7, #20]
 8000b38:	ed87 2a04 	vstr	s4, [r7, #16]
 8000b3c:	edc7 2a03 	vstr	s5, [r7, #12]
 8000b40:	ed87 3a02 	vstr	s6, [r7, #8]
 8000b44:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)/1000.0);
 8000b48:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b58:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000d58 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000b5c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b60:	eeb0 0b46 	vmov.f64	d0, d6
 8000b64:	f010 fdd8 	bl	8011718 <sin>
 8000b68:	eeb0 7b40 	vmov.f64	d7, d0
 8000b6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b70:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)/1000.0);
 8000b74:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b84:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8000d58 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000b88:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b8c:	eeb0 0b46 	vmov.f64	d0, d6
 8000b90:	f010 fd7a 	bl	8011688 <cos>
 8000b94:	eeb0 7b40 	vmov.f64	d7, d0
 8000b98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b9c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3/1000.0);
 8000ba0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba8:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000d58 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bac:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bb0:	eeb0 0b46 	vmov.f64	d0, d6
 8000bb4:	f010 fdb0 	bl	8011718 <sin>
 8000bb8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bc0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1/1000.0);
 8000bc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bcc:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000d58 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bd0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bd4:	eeb0 0b46 	vmov.f64	d0, d6
 8000bd8:	f010 fd9e 	bl	8011718 <sin>
 8000bdc:	eeb0 7b40 	vmov.f64	d7, d0
 8000be0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000be4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1/1000.0);
 8000be8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf0:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8000d58 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bf4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bf8:	eeb0 0b46 	vmov.f64	d0, d6
 8000bfc:	f010 fd44 	bl	8011688 <cos>
 8000c00:	eeb0 7b40 	vmov.f64	d7, d0
 8000c04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c08:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000c0c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c10:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000d60 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c18:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12)) * 1000.0;
 8000c1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c20:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c28:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c2c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c34:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c3c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000d64 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000c40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c48:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000d68 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000c56:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c5a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000d68 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000c68:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000c6c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000d60 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c74:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c78:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000d6c <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000c7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c88:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000d70 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000c8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c94:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c9c:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000ca0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ca4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000d64 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000cb0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000cb4:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000d60 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000cb8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000cbc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000cc0:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000d6c <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000cc4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000cc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000ccc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000cd0:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000d70 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000cd4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000cd8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ce0:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000ce4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ce8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000d64 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000cec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000cf0:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000cf8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000d68 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000d06:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d12:	edd7 6a03 	vldr	s13, [r7, #12]
 8000d16:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d26:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000d60 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000d2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d36:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000d3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d42:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000d68 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000d50:	bf00      	nop
 8000d52:	3740      	adds	r7, #64	; 0x40
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	00000000 	.word	0x00000000
 8000d5c:	408f4000 	.word	0x408f4000
 8000d60:	439d8000 	.word	0x439d8000
 8000d64:	43bfa000 	.word	0x43bfa000
 8000d68:	447a0000 	.word	0x447a0000
 8000d6c:	41540000 	.word	0x41540000
 8000d70:	43b90000 	.word	0x43b90000

08000d74 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000d74:	b480      	push	{r7}
 8000d76:	b091      	sub	sp, #68	; 0x44
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	61f8      	str	r0, [r7, #28]
 8000d7c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000d80:	edc7 0a05 	vstr	s1, [r7, #20]
 8000d84:	ed87 1a04 	vstr	s2, [r7, #16]
 8000d88:	edc7 1a03 	vstr	s3, [r7, #12]
 8000d8c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000d90:	edc7 2a01 	vstr	s5, [r7, #4]
 8000d94:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000da8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000dba:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dca:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000dce:	edd7 6a01 	vldr	s13, [r7, #4]
 8000dd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dda:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000de2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000de6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000dea:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000dee:	ed97 7a04 	vldr	s14, [r7, #16]
 8000df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000dfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000e0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e16:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000e1a:	ed97 7a00 	vldr	s14, [r7]
 8000e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e26:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000e2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e32:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000e36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e3e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000e4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e4e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e52:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e5a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000e66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e6a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e76:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000e8a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e92:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000e96:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ea2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ea6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000eaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eae:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000eb2:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000eb6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000eba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ebe:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ec2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000ec6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000eca:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000ece:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ed2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ed6:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000eda:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ede:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ee2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000eec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ef0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef4:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000ef8:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000efc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f04:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f08:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f10:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000f14:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000f18:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f1c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f20:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f28:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000f2c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000f30:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000f34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000f46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f4e:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000f52:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000f56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f5e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f62:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f6a:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000f6e:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000f72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f76:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f7a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000f82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f86:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000f8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f92:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000f96:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f9a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000fb0:	bf00      	nop
 8000fb2:	3744      	adds	r7, #68	; 0x44
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	ed2d 8b08 	vpush	{d8-d11}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fda:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000fe2:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000fea:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000ff2:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000ffa:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001002:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800100a:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a00 	vldr	s14, [r3]
 8001012:	edd7 7a08 	vldr	s15, [r7, #32]
 8001016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800101e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001022:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8001026:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800102a:	edd7 7a00 	vldr	s15, [r7]
 800102e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	edd3 6a00 	vldr	s13, [r3]
 8001038:	edd7 7a08 	vldr	s15, [r7, #32]
 800103c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001044:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	ed93 7a00 	vldr	s14, [r3]
 800104e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001056:	edd7 7a07 	vldr	s15, [r7, #28]
 800105a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001062:	edd7 7a03 	vldr	s15, [r7, #12]
 8001066:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	2004      	movs	r0, #4
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	f000 fbb3 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800107a:	eeb0 7b40 	vmov.f64	d7, d0
 800107e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001082:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001086:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800108a:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	ed93 7a00 	vldr	s14, [r3]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	edd3 5a00 	vldr	s11, [r3]
 800109a:	edd7 7a04 	vldr	s15, [r7, #16]
 800109e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010a6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b2:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010b6:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80010be:	edd7 7a02 	vldr	s15, [r7, #8]
 80010c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	edd3 6a00 	vldr	s13, [r3]
 80010cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80010dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e0:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	2004      	movs	r0, #4
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	f000 fb76 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010f4:	eeb0 7b40 	vmov.f64	d7, d0
 80010f8:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80010fc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001100:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001104:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	ed93 7a00 	vldr	s14, [r3]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	edd3 5a00 	vldr	s11, [r3]
 8001114:	edd7 7a04 	vldr	s15, [r7, #16]
 8001118:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800111c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001120:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001128:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800112c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001130:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8001134:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001138:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8001142:	edd7 7a08 	vldr	s15, [r7, #32]
 8001146:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800114a:	edd7 7a03 	vldr	s15, [r7, #12]
 800114e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	2003      	movs	r0, #3
 800115a:	eeb0 0a67 	vmov.f32	s0, s15
 800115e:	f000 fb3f 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001162:	eeb0 7b40 	vmov.f64	d7, d0
 8001166:	ee29 7b07 	vmul.f64	d7, d9, d7
 800116a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800116e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	ed93 7a00 	vldr	s14, [r3]
 8001178:	edd7 7a04 	vldr	s15, [r7, #16]
 800117c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001180:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001184:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001188:	edd7 7a05 	vldr	s15, [r7, #20]
 800118c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001190:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 8001194:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001198:	edd7 7a00 	vldr	s15, [r7]
 800119c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	edd3 5a00 	vldr	s11, [r3]
 80011a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80011aa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80011ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011b6:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80011be:	edd7 7a02 	vldr	s15, [r7, #8]
 80011c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edd3 6a00 	vldr	s13, [r3]
 80011cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80011dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e0:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	2004      	movs	r0, #4
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	f000 faf6 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011f4:	eeb0 7b40 	vmov.f64	d7, d0
 80011f8:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80011fc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001200:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001204:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edd3 5a00 	vldr	s11, [r3]
 8001214:	edd7 7a04 	vldr	s15, [r7, #16]
 8001218:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800121c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001220:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800122c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001230:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001234:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001238:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	edd7 7a05 	vldr	s15, [r7, #20]
 800124c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001250:	edd7 7a07 	vldr	s15, [r7, #28]
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800125c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001260:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	2004      	movs	r0, #4
 800126c:	eeb0 0a67 	vmov.f32	s0, s15
 8001270:	f000 fab6 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001274:	eeb0 7b40 	vmov.f64	d7, d0
 8001278:	ee29 6b07 	vmul.f64	d6, d9, d7
 800127c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001280:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001284:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	ed93 7a00 	vldr	s14, [r3]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	edd3 5a00 	vldr	s11, [r3]
 8001294:	edd7 7a04 	vldr	s15, [r7, #16]
 8001298:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800129c:	edd7 7a06 	vldr	s15, [r7, #24]
 80012a0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012ac:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80012b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 6a00 	vldr	s13, [r3]
 80012c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	2004      	movs	r0, #4
 80012e2:	eeb0 0a67 	vmov.f32	s0, s15
 80012e6:	f000 fa7b 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012ea:	eeb0 7b40 	vmov.f64	d7, d0
 80012ee:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80012f2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012fa:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	ed93 7a00 	vldr	s14, [r3]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edd3 5a00 	vldr	s11, [r3]
 800130a:	edd7 7a04 	vldr	s15, [r7, #16]
 800130e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001312:	edd7 7a06 	vldr	s15, [r7, #24]
 8001316:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800131a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001322:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001326:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800132a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800132e:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001332:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a00 	vldr	s14, [r3]
 800133c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001344:	edd7 7a07 	vldr	s15, [r7, #28]
 8001348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001350:	edd7 7a03 	vldr	s15, [r7, #12]
 8001354:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	2004      	movs	r0, #4
 8001360:	eeb0 0a67 	vmov.f32	s0, s15
 8001364:	f000 fa3c 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001368:	eeb0 7b40 	vmov.f64	d7, d0
 800136c:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001370:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001374:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001378:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 5a00 	vldr	s11, [r3]
 8001388:	edd7 7a04 	vldr	s15, [r7, #16]
 800138c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001390:	edd7 7a06 	vldr	s15, [r7, #24]
 8001394:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a0:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80013a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	ed93 7a00 	vldr	s14, [r3]
 80013b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80013bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80013cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	2004      	movs	r0, #4
 80013dc:	eeb0 0a67 	vmov.f32	s0, s15
 80013e0:	f000 f9fe 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013e4:	eeb0 7b40 	vmov.f64	d7, d0
 80013e8:	ee29 6b07 	vmul.f64	d6, d9, d7
 80013ec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013f4:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	ed93 7a00 	vldr	s14, [r3]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	edd3 5a00 	vldr	s11, [r3]
 8001404:	edd7 7a04 	vldr	s15, [r7, #16]
 8001408:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800140c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001410:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001418:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800141c:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001420:	ed97 7a07 	vldr	s14, [r7, #28]
 8001424:	edd7 7a02 	vldr	s15, [r7, #8]
 8001428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	edd3 6a00 	vldr	s13, [r3]
 8001432:	edd7 7a05 	vldr	s15, [r7, #20]
 8001436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001442:	edd7 7a03 	vldr	s15, [r7, #12]
 8001446:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	2004      	movs	r0, #4
 8001452:	eeb0 0a67 	vmov.f32	s0, s15
 8001456:	f000 f9c3 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800145a:	eeb0 7b40 	vmov.f64	d7, d0
 800145e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001462:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001466:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800146a:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed93 7a00 	vldr	s14, [r3]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 5a00 	vldr	s11, [r3]
 800147a:	edd7 7a04 	vldr	s15, [r7, #16]
 800147e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001482:	edd7 7a06 	vldr	s15, [r7, #24]
 8001486:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001492:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001496:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800149a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800149e:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014a2:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80014a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014aa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	2003      	movs	r0, #3
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	f000 f991 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014be:	eeb0 7b40 	vmov.f64	d7, d0
 80014c2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80014c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014ca:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	ed93 7a00 	vldr	s14, [r3]
 80014d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014f0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80014f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	edd7 7a04 	vldr	s15, [r7, #16]
 8001508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001518:	edd7 7a03 	vldr	s15, [r7, #12]
 800151c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	2003      	movs	r0, #3
 8001528:	eeb0 0a67 	vmov.f32	s0, s15
 800152c:	f000 f958 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001530:	eeb0 7b40 	vmov.f64	d7, d0
 8001534:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001538:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800153c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001540:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001544:	edd7 7a03 	vldr	s15, [r7, #12]
 8001548:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	2003      	movs	r0, #3
 8001554:	eeb0 0a67 	vmov.f32	s0, s15
 8001558:	f000 f942 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800155c:	eeb0 7b40 	vmov.f64	d7, d0
 8001560:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001564:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001568:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed93 7a00 	vldr	s14, [r3]
 8001572:	edd7 7a04 	vldr	s15, [r7, #16]
 8001576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800157e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001582:	edd7 7a05 	vldr	s15, [r7, #20]
 8001586:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800158a:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	ed93 7a00 	vldr	s14, [r3]
 8001594:	edd7 7a05 	vldr	s15, [r7, #20]
 8001598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159c:	edd7 7a07 	vldr	s15, [r7, #28]
 80015a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80015a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ac:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	2004      	movs	r0, #4
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	f000 f910 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015c0:	eeb0 7b40 	vmov.f64	d7, d0
 80015c4:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80015c8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80015cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015d0:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 5a00 	vldr	s11, [r3]
 80015e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80015e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ec:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80015f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015f8:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015fc:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001600:	ed97 7a07 	vldr	s14, [r7, #28]
 8001604:	edd7 7a02 	vldr	s15, [r7, #8]
 8001608:	ee37 7a27 	vadd.f32	s14, s14, s15
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 6a00 	vldr	s13, [r3]
 8001612:	edd7 7a05 	vldr	s15, [r7, #20]
 8001616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001622:	edd7 7a03 	vldr	s15, [r7, #12]
 8001626:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	2004      	movs	r0, #4
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	f000 f8d3 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800163a:	eeb0 7b40 	vmov.f64	d7, d0
 800163e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001642:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001646:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800164a:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edd3 5a00 	vldr	s11, [r3]
 800165a:	edd7 7a04 	vldr	s15, [r7, #16]
 800165e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001662:	edd7 7a06 	vldr	s15, [r7, #24]
 8001666:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001672:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001676:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800167a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800167e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 8001688:	edd7 7a04 	vldr	s15, [r7, #16]
 800168c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001690:	edd7 7a03 	vldr	s15, [r7, #12]
 8001694:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	2002      	movs	r0, #2
 80016a0:	eeb0 0a67 	vmov.f32	s0, s15
 80016a4:	f000 f89c 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016a8:	eeb0 7b40 	vmov.f64	d7, d0
 80016ac:	ee29 7b07 	vmul.f64	d7, d9, d7
 80016b0:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80016b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	2003      	movs	r0, #3
 80016c4:	eeb0 0a67 	vmov.f32	s0, s15
 80016c8:	f000 f88a 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016cc:	eeb0 7b40 	vmov.f64	d7, d0
 80016d0:	ee29 7b07 	vmul.f64	d7, d9, d7
 80016d4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80016d8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	ed93 7a00 	vldr	s14, [r3]
 80016e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016fa:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 80016fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001702:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	2003      	movs	r0, #3
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	f000 f865 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001716:	eeb0 7b40 	vmov.f64	d7, d0
 800171a:	ee2a 7b07 	vmul.f64	d7, d10, d7
 800171e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001722:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001734:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001738:	ee36 6b07 	vadd.f64	d6, d6, d7
 800173c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001740:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001744:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001748:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800174c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001750:	edd7 7a02 	vldr	s15, [r7, #8]
 8001754:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	edd3 6a00 	vldr	s13, [r3]
 800175e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800176e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001772:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	2004      	movs	r0, #4
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	f000 f82d 	bl	80017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001786:	eeb0 7b40 	vmov.f64	d7, d0
 800178a:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800178e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001792:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001796:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	ed93 7a00 	vldr	s14, [r3]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	edd3 5a00 	vldr	s11, [r3]
 80017a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80017aa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80017ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80017b2:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80017b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017be:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80017c2:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80017c6:	ee38 7b47 	vsub.f64	d7, d8, d7
 80017ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	ecbd 8b08 	vpop	{d8-d11}
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ea:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80017ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	ee06 3a90 	vmov	s13, r3
 80017fa:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80017fe:	eeb0 1b46 	vmov.f64	d1, d6
 8001802:	eeb0 0b47 	vmov.f64	d0, d7
 8001806:	f00f fc7b 	bl	8011100 <pow>
 800180a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800180e:	eeb0 0b47 	vmov.f64	d0, d7
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001822:	edd7 7a01 	vldr	s15, [r7, #4]
 8001826:	fefb 7a67 	vrintm.f32	s15, s15
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001842:	edd7 7a01 	vldr	s15, [r7, #4]
 8001846:	fef8 7a67 	vrinta.f32	s15, s15
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	22b4      	movs	r2, #180	; 0xb4
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	761a      	strb	r2, [r3, #24]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	22ef      	movs	r2, #239	; 0xef
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
}
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f00b ff21 	bl	800d728 <HAL_TIM_PWM_Start>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d13f      	bne.n	8001982 <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691c      	ldr	r4, [r3, #16]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	3301      	adds	r3, #1
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800191c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001ba4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001924:	eeb0 0a67 	vmov.f32	s0, s15
 8001928:	f7ff ff86 	bl	8001838 <_ZSt5roundf>
 800192c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001934:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	3301      	adds	r3, #1
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800194e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	f7ff ff5f 	bl	8001818 <_ZSt5floorf>
 800195a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 800195e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001962:	ee17 3a90 	vmov	r3, s15
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	9600      	str	r6, [sp, #0]
 800196a:	462b      	mov	r3, r5
 800196c:	4622      	mov	r2, r4
 800196e:	6839      	ldr	r1, [r7, #0]
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f9cf 	bl	8001d14 <_ZN10ServoMotor10GripperMapElllll>
 8001976:	4602      	mov	r2, r0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8001980:	e176      	b.n	8001c70 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b04      	cmp	r3, #4
 8001988:	d13f      	bne.n	8001a0a <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691c      	ldr	r4, [r3, #16]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	3301      	adds	r3, #1
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001ba4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ac:	eeb0 0a67 	vmov.f32	s0, s15
 80019b0:	f7ff ff42 	bl	8001838 <_ZSt5roundf>
 80019b4:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80019b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019bc:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	3301      	adds	r3, #1
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d2:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80019d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019da:	eeb0 0a67 	vmov.f32	s0, s15
 80019de:	f7ff ff1b 	bl	8001818 <_ZSt5floorf>
 80019e2:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80019e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ea:	ee17 3a90 	vmov	r3, s15
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	9600      	str	r6, [sp, #0]
 80019f2:	462b      	mov	r3, r5
 80019f4:	4622      	mov	r2, r4
 80019f6:	6839      	ldr	r1, [r7, #0]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f98b 	bl	8001d14 <_ZN10ServoMotor10GripperMapElllll>
 80019fe:	4602      	mov	r2, r0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a08:	e132      	b.n	8001c70 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d13f      	bne.n	8001a92 <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691c      	ldr	r4, [r3, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	3301      	adds	r3, #1
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a2c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001ba4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a34:	eeb0 0a67 	vmov.f32	s0, s15
 8001a38:	f7ff fefe 	bl	8001838 <_ZSt5roundf>
 8001a3c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a44:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	3301      	adds	r3, #1
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a62:	eeb0 0a67 	vmov.f32	s0, s15
 8001a66:	f7ff fed7 	bl	8001818 <_ZSt5floorf>
 8001a6a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a72:	ee17 3a90 	vmov	r3, s15
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	9600      	str	r6, [sp, #0]
 8001a7a:	462b      	mov	r3, r5
 8001a7c:	4622      	mov	r2, r4
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f947 	bl	8001d14 <_ZN10ServoMotor10GripperMapElllll>
 8001a86:	4602      	mov	r2, r0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a90:	e0ee      	b.n	8001c70 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d13f      	bne.n	8001b1a <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691c      	ldr	r4, [r3, #16]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	3301      	adds	r3, #1
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ba4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001abc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac0:	f7ff feba 	bl	8001838 <_ZSt5roundf>
 8001ac4:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001acc:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	3301      	adds	r3, #1
 8001ada:	ee07 3a90 	vmov	s15, r3
 8001ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aea:	eeb0 0a67 	vmov.f32	s0, s15
 8001aee:	f7ff fe93 	bl	8001818 <_ZSt5floorf>
 8001af2:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001af6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001afa:	ee17 3a90 	vmov	r3, s15
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	9600      	str	r6, [sp, #0]
 8001b02:	462b      	mov	r3, r5
 8001b04:	4622      	mov	r2, r4
 8001b06:	6839      	ldr	r1, [r7, #0]
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f903 	bl	8001d14 <_ZN10ServoMotor10GripperMapElllll>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b18:	e0aa      	b.n	8001c70 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d144      	bne.n	8001bac <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691c      	ldr	r4, [r3, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	3301      	adds	r3, #1
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001ba4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b44:	eeb0 0a67 	vmov.f32	s0, s15
 8001b48:	f7ff fe76 	bl	8001838 <_ZSt5roundf>
 8001b4c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b54:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	3301      	adds	r3, #1
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b72:	eeb0 0a67 	vmov.f32	s0, s15
 8001b76:	f7ff fe4f 	bl	8001818 <_ZSt5floorf>
 8001b7a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b82:	ee17 3a90 	vmov	r3, s15
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	9600      	str	r6, [sp, #0]
 8001b8a:	462b      	mov	r3, r5
 8001b8c:	4622      	mov	r2, r4
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f8bf 	bl	8001d14 <_ZN10ServoMotor10GripperMapElllll>
 8001b96:	4602      	mov	r2, r0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ba0:	e066      	b.n	8001c70 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001ba2:	bf00      	nop
 8001ba4:	3d4ccccd 	.word	0x3d4ccccd
 8001ba8:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b14      	cmp	r3, #20
 8001bb2:	d13f      	bne.n	8001c34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691c      	ldr	r4, [r3, #16]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bce:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001ba4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bda:	f7ff fe2d 	bl	8001838 <_ZSt5roundf>
 8001bde:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be6:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfc:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c04:	eeb0 0a67 	vmov.f32	s0, s15
 8001c08:	f7ff fe06 	bl	8001818 <_ZSt5floorf>
 8001c0c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c14:	ee17 3a90 	vmov	r3, s15
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	9600      	str	r6, [sp, #0]
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	4622      	mov	r2, r4
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f876 	bl	8001d14 <_ZN10ServoMotor10GripperMapElllll>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c32:	e01d      	b.n	8001c70 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2200      	movs	r2, #0
 8001c64:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c78 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	761a      	strb	r2, [r3, #24]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	765a      	strb	r2, [r3, #25]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7e5b      	ldrb	r3, [r3, #25]
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff fe09 	bl	80018f0 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001cde:	e000      	b.n	8001ce2 <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001ce0:	bf00      	nop
}
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7e1b      	ldrb	r3, [r3, #24]
 8001cf4:	f083 0301 	eor.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fdf3 	bl	80018f0 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001d0a:	e000      	b.n	8001d0e <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001d0c:	bf00      	nop
}
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	69f9      	ldr	r1, [r7, #28]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	1a8a      	subs	r2, r1, r2
 8001d2e:	fb02 f203 	mul.w	r2, r2, r3
 8001d32:	6839      	ldr	r1, [r7, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1acb      	subs	r3, r1, r3
 8001d38:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	4413      	add	r3, r2
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5a:	eef0 7ae7 	vabs.f32	s15, s15
 8001d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001d7e:	615a      	str	r2, [r3, #20]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001d84:	619a      	str	r2, [r3, #24]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d8c:	61da      	str	r2, [r3, #28]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001d92:	621a      	str	r2, [r3, #32]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	22c7      	movs	r2, #199	; 0xc7
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001db8:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001dbe:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001dc0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001dec <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f82f 	bl	8001e28 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	60da      	str	r2, [r3, #12]
}
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	41a00000 	.word	0x41a00000
 8001de4:	469c4000 	.word	0x469c4000
 8001de8:	43480000 	.word	0x43480000
 8001dec:	00000000 	.word	0x00000000

08001df0 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
}
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f00b fc85 	bl	800d728 <HAL_TIM_PWM_Start>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	ed2d 8b02 	vpush	{d8}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	f7ff ff80 	bl	8001d4c <_ZSt4fabsf>
 8001e4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	bf94      	ite	ls
 8001e60:	2301      	movls	r3, #1
 8001e62:	2300      	movhi	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e01b      	b.n	8001eaa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e78:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7c:	f7ff ff66 	bl	8001d4c <_ZSt4fabsf>
 8001e80:	eeb0 7a40 	vmov.f32	s14, s0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	bfac      	ite	ge
 8001e94:	2301      	movge	r3, #1
 8001e96:	2300      	movlt	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e001      	b.n	8001eaa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	edd3 7a04 	vldr	s15, [r3, #16]
 8001eb0:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800214c <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebc:	f2c0 80db 	blt.w	8002076 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6898      	ldr	r0, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f008 fb61 	bl	800a594 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	3301      	adds	r3, #1
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eec:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002150 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ef8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001efc:	eeb0 0a67 	vmov.f32	s0, s15
 8001f00:	f7ff fc9a 	bl	8001838 <_ZSt5roundf>
 8001f04:	eef0 7a40 	vmov.f32	s15, s0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f12:	ee17 2a90 	vmov	r2, s15
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d113      	bne.n	8001f48 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fa5b 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f32:	eeb0 7b40 	vmov.f64	d7, d0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f40:	ee17 2a90 	vmov	r2, s15
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001f46:	e1e0      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d113      	bne.n	8001f78 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001f5a:	085b      	lsrs	r3, r3, #1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fa43 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f62:	eeb0 7b40 	vmov.f64	d7, d0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f70:	ee17 2a90 	vmov	r2, s15
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f76:	e1c8      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d113      	bne.n	8001fa8 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fa2b 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f92:	eeb0 7b40 	vmov.f64	d7, d0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fa0:	ee17 2a90 	vmov	r2, s15
 8001fa4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001fa6:	e1b0      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	d113      	bne.n	8001fd8 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001fba:	085b      	lsrs	r3, r3, #1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fa13 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fc2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fd0:	ee17 2a90 	vmov	r2, s15
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001fd6:	e198      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d113      	bne.n	8002008 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 f9fb 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001ff2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002000:	ee17 2a90 	vmov	r2, s15
 8002004:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002006:	e180      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b14      	cmp	r3, #20
 800200e:	d113      	bne.n	8002038 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f000 f9e3 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002022:	eeb0 7b40 	vmov.f64	d7, d0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002030:	ee17 2a90 	vmov	r2, s15
 8002034:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002036:	e168      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002074:	e149      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	edd3 7a04 	vldr	s15, [r3, #16]
 800207c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002154 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8002080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002088:	f200 80e5 	bhi.w	8002256 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6898      	ldr	r0, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	b29b      	uxth	r3, r3
 8002096:	2200      	movs	r2, #0
 8002098:	4619      	mov	r1, r3
 800209a:	f008 fa7b 	bl	800a594 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	3301      	adds	r3, #1
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80020b0:	ed97 0a03 	vldr	s0, [r7, #12]
 80020b4:	f7ff fe4a 	bl	8001d4c <_ZSt4fabsf>
 80020b8:	eef0 7a40 	vmov.f32	s15, s0
 80020bc:	ee28 7a27 	vmul.f32	s14, s16, s15
 80020c0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002150 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 80020c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 80020c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020d0:	eeb0 0a67 	vmov.f32	s0, s15
 80020d4:	f7ff fbb0 	bl	8001838 <_ZSt5roundf>
 80020d8:	eef0 7a40 	vmov.f32	s15, s0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e6:	ee17 2a90 	vmov	r2, s15
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d113      	bne.n	800211c <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f971 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002106:	eeb0 7b40 	vmov.f64	d7, d0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002114:	ee17 2a90 	vmov	r2, s15
 8002118:	635a      	str	r2, [r3, #52]	; 0x34
}
 800211a:	e0f6      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d119      	bne.n	8002158 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f959 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002136:	eeb0 7b40 	vmov.f64	d7, d0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002144:	ee17 2a90 	vmov	r2, s15
 8002148:	639a      	str	r2, [r3, #56]	; 0x38
}
 800214a:	e0de      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 800214c:	3a83126f 	.word	0x3a83126f
 8002150:	4d64e1c0 	.word	0x4d64e1c0
 8002154:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d113      	bne.n	8002188 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	4618      	mov	r0, r3
 800216e:	f000 f93b 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002172:	eeb0 7b40 	vmov.f64	d7, d0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002180:	ee17 2a90 	vmov	r2, s15
 8002184:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002186:	e0c0      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d113      	bne.n	80021b8 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	4618      	mov	r0, r3
 800219e:	f000 f923 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021a2:	eeb0 7b40 	vmov.f64	d7, d0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021b0:	ee17 2a90 	vmov	r2, s15
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021b6:	e0a8      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d113      	bne.n	80021e8 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f90b 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021d2:	eeb0 7b40 	vmov.f64	d7, d0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021e0:	ee17 2a90 	vmov	r2, s15
 80021e4:	659a      	str	r2, [r3, #88]	; 0x58
}
 80021e6:	e090      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b14      	cmp	r3, #20
 80021ee:	d113      	bne.n	8002218 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f8f3 	bl	80023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002202:	eeb0 7b40 	vmov.f64	d7, d0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002210:	ee17 2a90 	vmov	r2, s15
 8002214:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002216:	e078      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2200      	movs	r2, #0
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2200      	movs	r2, #0
 800222a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2200      	movs	r2, #0
 8002234:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2200      	movs	r2, #0
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2200      	movs	r2, #0
 8002248:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002254:	e059      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2200      	movs	r2, #0
 8002266:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002268:	e04f      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b04      	cmp	r3, #4
 8002270:	d105      	bne.n	800227e <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800227c:	e045      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b08      	cmp	r3, #8
 8002284:	d105      	bne.n	8002292 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002290:	e03b      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d105      	bne.n	80022a6 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2200      	movs	r2, #0
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80022a4:	e031      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d105      	bne.n	80022ba <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80022b8:	e027      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b14      	cmp	r3, #20
 80022c0:	d105      	bne.n	80022ce <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022cc:	e01d      	b.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2200      	movs	r2, #0
 80022d6:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2200      	movs	r2, #0
 80022fe:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	ecbd 8b02 	vpop	{d8}
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop

08002318 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8002324:	ed97 0a00 	vldr	s0, [r7]
 8002328:	f7ff fd10 	bl	8001d4c <_ZSt4fabsf>
 800232c:	eef0 7a40 	vmov.f32	s15, s0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002352:	eeb0 0b47 	vmov.f64	d0, d7
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ffe5 	bl	800233e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002374:	eeb0 7b40 	vmov.f64	d7, d0
 8002378:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	0000      	movs	r0, r0
 800238c:	0000      	movs	r0, r0
	...

08002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	ed93 7a07 	vldr	s14, [r3, #28]
 80023a2:	edd7 7a00 	vldr	s15, [r7]
 80023a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80023ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 80023c2:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 80023c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 80023ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023ce:	eeb0 0a67 	vmov.f32	s0, s15
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fd28 	bl	8001e28 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	704a95d1 	.word	0x704a95d1
 80023e4:	40b88b2f 	.word	0x40b88b2f

080023e8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023fa:	eeb0 0b47 	vmov.f64	d0, d7
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <MX_CRC_Init+0x54>)
 800240e:	4a14      	ldr	r2, [pc, #80]	; (8002460 <MX_CRC_Init+0x58>)
 8002410:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <MX_CRC_Init+0x54>)
 8002414:	2201      	movs	r2, #1
 8002416:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <MX_CRC_Init+0x54>)
 800241a:	2201      	movs	r2, #1
 800241c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_CRC_Init+0x54>)
 8002420:	f248 0205 	movw	r2, #32773	; 0x8005
 8002424:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <MX_CRC_Init+0x54>)
 8002428:	2208      	movs	r2, #8
 800242a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <MX_CRC_Init+0x54>)
 800242e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002432:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <MX_CRC_Init+0x54>)
 8002436:	2220      	movs	r2, #32
 8002438:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <MX_CRC_Init+0x54>)
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <MX_CRC_Init+0x54>)
 8002442:	2201      	movs	r2, #1
 8002444:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	; (800245c <MX_CRC_Init+0x54>)
 8002448:	f004 febc 	bl	80071c4 <HAL_CRC_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 8002452:	f002 fc6b 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	24000c04 	.word	0x24000c04
 8002460:	58024c00 	.word	0x58024c00

08002464 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <HAL_CRC_MspInit+0x3c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10e      	bne.n	8002494 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_CRC_MspInit+0x40>)
 8002478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247c:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_CRC_MspInit+0x40>)
 800247e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_CRC_MspInit+0x40>)
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	58024c00 	.word	0x58024c00
 80024a4:	58024400 	.word	0x58024400

080024a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024ae:	4b35      	ldr	r3, [pc, #212]	; (8002584 <MX_DMA_Init+0xdc>)
 80024b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024b4:	4a33      	ldr	r2, [pc, #204]	; (8002584 <MX_DMA_Init+0xdc>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <MX_DMA_Init+0xdc>)
 80024c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <MX_DMA_Init+0xdc>)
 80024ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024d2:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <MX_DMA_Init+0xdc>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <MX_DMA_Init+0xdc>)
 80024de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	200b      	movs	r0, #11
 80024f0:	f004 fe27 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80024f4:	200b      	movs	r0, #11
 80024f6:	f004 fe3e 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	200c      	movs	r0, #12
 8002500:	f004 fe1f 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002504:	200c      	movs	r0, #12
 8002506:	f004 fe36 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	200d      	movs	r0, #13
 8002510:	f004 fe17 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002514:	200d      	movs	r0, #13
 8002516:	f004 fe2e 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	200e      	movs	r0, #14
 8002520:	f004 fe0f 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002524:	200e      	movs	r0, #14
 8002526:	f004 fe26 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	200f      	movs	r0, #15
 8002530:	f004 fe07 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002534:	200f      	movs	r0, #15
 8002536:	f004 fe1e 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2010      	movs	r0, #16
 8002540:	f004 fdff 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002544:	2010      	movs	r0, #16
 8002546:	f004 fe16 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	2011      	movs	r0, #17
 8002550:	f004 fdf7 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002554:	2011      	movs	r0, #17
 8002556:	f004 fe0e 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	202f      	movs	r0, #47	; 0x2f
 8002560:	f004 fdef 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002564:	202f      	movs	r0, #47	; 0x2f
 8002566:	f004 fe06 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	2038      	movs	r0, #56	; 0x38
 8002570:	f004 fde7 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002574:	2038      	movs	r0, #56	; 0x38
 8002576:	f004 fdfe 	bl	8007176 <HAL_NVIC_EnableIRQ>

}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	58024400 	.word	0x58024400

08002588 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	; 0x30
 800258c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800259e:	4b87      	ldr	r3, [pc, #540]	; (80027bc <MX_GPIO_Init+0x234>)
 80025a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a4:	4a85      	ldr	r2, [pc, #532]	; (80027bc <MX_GPIO_Init+0x234>)
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ae:	4b83      	ldr	r3, [pc, #524]	; (80027bc <MX_GPIO_Init+0x234>)
 80025b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025bc:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <MX_GPIO_Init+0x234>)
 80025be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c2:	4a7e      	ldr	r2, [pc, #504]	; (80027bc <MX_GPIO_Init+0x234>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025cc:	4b7b      	ldr	r3, [pc, #492]	; (80027bc <MX_GPIO_Init+0x234>)
 80025ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025da:	4b78      	ldr	r3, [pc, #480]	; (80027bc <MX_GPIO_Init+0x234>)
 80025dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e0:	4a76      	ldr	r2, [pc, #472]	; (80027bc <MX_GPIO_Init+0x234>)
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ea:	4b74      	ldr	r3, [pc, #464]	; (80027bc <MX_GPIO_Init+0x234>)
 80025ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	4b70      	ldr	r3, [pc, #448]	; (80027bc <MX_GPIO_Init+0x234>)
 80025fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fe:	4a6f      	ldr	r2, [pc, #444]	; (80027bc <MX_GPIO_Init+0x234>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002608:	4b6c      	ldr	r3, [pc, #432]	; (80027bc <MX_GPIO_Init+0x234>)
 800260a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	4b69      	ldr	r3, [pc, #420]	; (80027bc <MX_GPIO_Init+0x234>)
 8002618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800261c:	4a67      	ldr	r2, [pc, #412]	; (80027bc <MX_GPIO_Init+0x234>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <MX_GPIO_Init+0x234>)
 8002628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002634:	4b61      	ldr	r3, [pc, #388]	; (80027bc <MX_GPIO_Init+0x234>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	4a60      	ldr	r2, [pc, #384]	; (80027bc <MX_GPIO_Init+0x234>)
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002644:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <MX_GPIO_Init+0x234>)
 8002646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002652:	4b5a      	ldr	r3, [pc, #360]	; (80027bc <MX_GPIO_Init+0x234>)
 8002654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <MX_GPIO_Init+0x234>)
 800265a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800265e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002662:	4b56      	ldr	r3, [pc, #344]	; (80027bc <MX_GPIO_Init+0x234>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002670:	2200      	movs	r2, #0
 8002672:	f644 2121 	movw	r1, #18977	; 0x4a21
 8002676:	4852      	ldr	r0, [pc, #328]	; (80027c0 <MX_GPIO_Init+0x238>)
 8002678:	f007 ff8c 	bl	800a594 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 800267c:	2200      	movs	r2, #0
 800267e:	f24c 0102 	movw	r1, #49154	; 0xc002
 8002682:	4850      	ldr	r0, [pc, #320]	; (80027c4 <MX_GPIO_Init+0x23c>)
 8002684:	f007 ff86 	bl	800a594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002688:	2200      	movs	r2, #0
 800268a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800268e:	484e      	ldr	r0, [pc, #312]	; (80027c8 <MX_GPIO_Init+0x240>)
 8002690:	f007 ff80 	bl	800a594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002694:	2200      	movs	r2, #0
 8002696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800269a:	484c      	ldr	r0, [pc, #304]	; (80027cc <MX_GPIO_Init+0x244>)
 800269c:	f007 ff7a 	bl	800a594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a6:	484a      	ldr	r0, [pc, #296]	; (80027d0 <MX_GPIO_Init+0x248>)
 80026a8:	f007 ff74 	bl	800a594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80026ac:	f644 2321 	movw	r3, #18977	; 0x4a21
 80026b0:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 031c 	add.w	r3, r7, #28
 80026c2:	4619      	mov	r1, r3
 80026c4:	483e      	ldr	r0, [pc, #248]	; (80027c0 <MX_GPIO_Init+0x238>)
 80026c6:	f007 fdb5 	bl	800a234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 80026ca:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80026ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	4619      	mov	r1, r3
 80026e0:	4838      	ldr	r0, [pc, #224]	; (80027c4 <MX_GPIO_Init+0x23c>)
 80026e2:	f007 fda7 	bl	800a234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80026e6:	f24c 0302 	movw	r3, #49154	; 0xc002
 80026ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026f8:	f107 031c 	add.w	r3, r7, #28
 80026fc:	4619      	mov	r1, r3
 80026fe:	4831      	ldr	r0, [pc, #196]	; (80027c4 <MX_GPIO_Init+0x23c>)
 8002700:	f007 fd98 	bl	800a234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270a:	2301      	movs	r3, #1
 800270c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002716:	f107 031c 	add.w	r3, r7, #28
 800271a:	4619      	mov	r1, r3
 800271c:	482a      	ldr	r0, [pc, #168]	; (80027c8 <MX_GPIO_Init+0x240>)
 800271e:	f007 fd89 	bl	800a234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	2301      	movs	r3, #1
 800272a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 031c 	add.w	r3, r7, #28
 8002738:	4619      	mov	r1, r3
 800273a:	4824      	ldr	r0, [pc, #144]	; (80027cc <MX_GPIO_Init+0x244>)
 800273c:	f007 fd7a 	bl	800a234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002746:	2301      	movs	r3, #1
 8002748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8002752:	f107 031c 	add.w	r3, r7, #28
 8002756:	4619      	mov	r1, r3
 8002758:	481d      	ldr	r0, [pc, #116]	; (80027d0 <MX_GPIO_Init+0x248>)
 800275a:	f007 fd6b 	bl	800a234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 800275e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002764:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 800276e:	f107 031c 	add.w	r3, r7, #28
 8002772:	4619      	mov	r1, r3
 8002774:	4817      	ldr	r0, [pc, #92]	; (80027d4 <MX_GPIO_Init+0x24c>)
 8002776:	f007 fd5d 	bl	800a234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 800277a:	23c0      	movs	r3, #192	; 0xc0
 800277c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800277e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	4619      	mov	r1, r3
 800278e:	480c      	ldr	r0, [pc, #48]	; (80027c0 <MX_GPIO_Init+0x238>)
 8002790:	f007 fd50 	bl	800a234 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	2017      	movs	r0, #23
 800279a:	f004 fcd2 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800279e:	2017      	movs	r0, #23
 80027a0:	f004 fce9 	bl	8007176 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2100      	movs	r1, #0
 80027a8:	2028      	movs	r0, #40	; 0x28
 80027aa:	f004 fcca 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027ae:	2028      	movs	r0, #40	; 0x28
 80027b0:	f004 fce1 	bl	8007176 <HAL_NVIC_EnableIRQ>

}
 80027b4:	bf00      	nop
 80027b6:	3730      	adds	r7, #48	; 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	58024400 	.word	0x58024400
 80027c0:	58020400 	.word	0x58020400
 80027c4:	58021000 	.word	0x58021000
 80027c8:	58020c00 	.word	0x58020c00
 80027cc:	58020800 	.word	0x58020800
 80027d0:	58020000 	.word	0x58020000
 80027d4:	58021800 	.word	0x58021800

080027d8 <_Z12Insert_queueii>:
volatile float u_q4 = 0.0;

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value) {
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
	if (bot == LIMIT - 1) {
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <_Z12Insert_queueii+0x6c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b13      	cmp	r3, #19
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <_Z12Insert_queueii+0x20>
		return false;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e01e      	b.n	8002836 <_Z12Insert_queueii+0x5e>
	} else {
		if (first == -1) {
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <_Z12Insert_queueii+0x70>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <_Z12Insert_queueii+0x3a>
			first = 0;
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <_Z12Insert_queueii+0x70>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
		}
		bot++;
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <_Z12Insert_queueii+0x6c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <_Z12Insert_queueii+0x6c>)
 800281a:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <_Z12Insert_queueii+0x6c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	490a      	ldr	r1, [pc, #40]	; (800284c <_Z12Insert_queueii+0x74>)
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <_Z12Insert_queueii+0x6c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4908      	ldr	r1, [pc, #32]	; (8002850 <_Z12Insert_queueii+0x78>)
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 8002834:	2301      	movs	r3, #1
	}
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	2400000c 	.word	0x2400000c
 8002848:	24000008 	.word	0x24000008
 800284c:	24000b20 	.word	0x24000b20
 8002850:	24000b70 	.word	0x24000b70

08002854 <_Z10Call_queuev>:

int Call_queue() {
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
	int output;
	if (first == -1 || first > bot) {
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <_Z10Call_queuev+0x94>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d005      	beq.n	8002870 <_Z10Call_queuev+0x1c>
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <_Z10Call_queuev+0x94>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <_Z10Call_queuev+0x98>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	dd01      	ble.n	8002874 <_Z10Call_queuev+0x20>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <_Z10Call_queuev+0x22>
 8002874:	2300      	movs	r3, #0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d026      	beq.n	80028c8 <_Z10Call_queuev+0x74>
		printf("Don't have stack in queue \n");
 800287a:	481d      	ldr	r0, [pc, #116]	; (80028f0 <_Z10Call_queuev+0x9c>)
 800287c:	f010 fc24 	bl	80130c8 <puts>
		for (int num = 0; num <= bot + 1; num++) {
 8002880:	2300      	movs	r3, #0
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <_Z10Call_queuev+0x98>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	bfd4      	ite	le
 8002890:	2301      	movle	r3, #1
 8002892:	2300      	movgt	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <_Z10Call_queuev+0x58>
			queue[num] = 0;
 800289a:	4a16      	ldr	r2, [pc, #88]	; (80028f4 <_Z10Call_queuev+0xa0>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2100      	movs	r1, #0
 80028a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int num = 0; num <= bot + 1; num++) {
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	e7eb      	b.n	8002884 <_Z10Call_queuev+0x30>
		}
		first = -1;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <_Z10Call_queuev+0x94>)
 80028ae:	f04f 32ff 	mov.w	r2, #4294967295
 80028b2:	601a      	str	r2, [r3, #0]
		bot = -1;
 80028b4:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <_Z10Call_queuev+0x98>)
 80028b6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ba:	601a      	str	r2, [r3, #0]
		printf("Clear queue \n");
 80028bc:	480e      	ldr	r0, [pc, #56]	; (80028f8 <_Z10Call_queuev+0xa4>)
 80028be:	f010 fc03 	bl	80130c8 <puts>
		output = 255;
 80028c2:	23ff      	movs	r3, #255	; 0xff
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	e00a      	b.n	80028de <_Z10Call_queuev+0x8a>
	} else {
		output = queue[first];
 80028c8:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <_Z10Call_queuev+0x94>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <_Z10Call_queuev+0xa0>)
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	607b      	str	r3, [r7, #4]
		first++;
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <_Z10Call_queuev+0x94>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	4a03      	ldr	r2, [pc, #12]	; (80028e8 <_Z10Call_queuev+0x94>)
 80028dc:	6013      	str	r3, [r2, #0]
	}
	return output;
 80028de:	687b      	ldr	r3, [r7, #4]

}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	24000008 	.word	0x24000008
 80028ec:	2400000c 	.word	0x2400000c
 80028f0:	080150e8 	.word	0x080150e8
 80028f4:	24000b20 	.word	0x24000b20
 80028f8:	08015104 	.word	0x08015104

080028fc <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4) / 1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y,
		float gripper_linear_z, float gripper_angular_yaw) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b092      	sub	sp, #72	; 0x48
 8002900:	af00      	add	r7, sp, #0
 8002902:	ed87 0a03 	vstr	s0, [r7, #12]
 8002906:	edc7 0a02 	vstr	s1, [r7, #8]
 800290a:	ed87 1a01 	vstr	s2, [r7, #4]
 800290e:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x / 1000.0;
 8002912:	ed97 7a03 	vldr	s14, [r7, #12]
 8002916:	eddf 6a76 	vldr	s13, [pc, #472]	; 8002af0 <_Z6fcb_IKffff+0x1f4>
 800291a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800291e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y / 1000.0;
 8002922:	ed97 7a02 	vldr	s14, [r7, #8]
 8002926:	eddf 6a72 	vldr	s13, [pc, #456]	; 8002af0 <_Z6fcb_IKffff+0x1f4>
 800292a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800292e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z / 1000.0;
 8002932:	ed97 7a01 	vldr	s14, [r7, #4]
 8002936:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8002af0 <_Z6fcb_IKffff+0x1f4>
 800293a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800293e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw / 1000.0;
 8002942:	ed97 7a00 	vldr	s14, [r7]
 8002946:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8002af0 <_Z6fcb_IKffff+0x1f4>
 800294a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800294e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x * x) + (y * y) - (L12 * L12) - (L3 * L3)) / (2 * L12 * L3);
 8002952:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002956:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800295a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800295e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002966:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <_Z6fcb_IKffff+0x1f8>)
 8002968:	edd3 6a00 	vldr	s13, [r3]
 800296c:	4b61      	ldr	r3, [pc, #388]	; (8002af4 <_Z6fcb_IKffff+0x1f8>)
 800296e:	edd3 7a00 	vldr	s15, [r3]
 8002972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002976:	ee37 7a67 	vsub.f32	s14, s14, s15
 800297a:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <_Z6fcb_IKffff+0x1fc>)
 800297c:	edd3 6a00 	vldr	s13, [r3]
 8002980:	4b5d      	ldr	r3, [pc, #372]	; (8002af8 <_Z6fcb_IKffff+0x1fc>)
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800298e:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <_Z6fcb_IKffff+0x1f8>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <_Z6fcb_IKffff+0x1fc>)
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1 - (C3 * C3));
 80029aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ba:	eeb0 0a67 	vmov.f32	s0, s15
 80029be:	f7fe f825 	bl	8000a0c <_ZSt4sqrtf>
 80029c2:	eef0 7a40 	vmov.f32	s15, s0
 80029c6:	eef1 7a67 	vneg.f32	s15, s15
 80029ca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3, C3);
 80029ce:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80029d2:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80029d6:	f7fe f805 	bl	80009e4 <_ZSt5atan2ff>
 80029da:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3 * S3;
 80029de:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <_Z6fcb_IKffff+0x1fc>)
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80029e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3 * C3);
 80029f0:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <_Z6fcb_IKffff+0x1fc>)
 80029f2:	ed93 7a00 	vldr	s14, [r3]
 80029f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fe:	4b3d      	ldr	r3, [pc, #244]	; (8002af4 <_Z6fcb_IKffff+0x1f8>)
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3 * x) + (L123C3 * y);
 8002a0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a10:	eeb1 7a67 	vneg.f32	s14, s15
 8002a14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a1c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a20:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2c:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3 * y) + (L123C3 * x);
 8002a30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a34:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a3c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a40:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4c:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1, C1);
 8002a50:	edd7 0a07 	vldr	s1, [r7, #28]
 8002a54:	ed97 0a08 	vldr	s0, [r7, #32]
 8002a58:	f7fd ffc4 	bl	80009e4 <_ZSt5atan2ff>
 8002a5c:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002a60:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002a64:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a6c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a74:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002a78:	4b20      	ldr	r3, [pc, #128]	; (8002afc <_Z6fcb_IKffff+0x200>)
 8002a7a:	ed93 7a00 	vldr	s14, [r3]
 8002a7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <_Z6fcb_IKffff+0x204>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a90:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <_Z6fcb_IKffff+0x208>)
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9a:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1 * 1000.0;
 8002a9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aa2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002af0 <_Z6fcb_IKffff+0x1f4>
 8002aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <_Z6fcb_IKffff+0x20c>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2 * 1000.0;
 8002ab0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ab4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002af0 <_Z6fcb_IKffff+0x1f4>
 8002ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abc:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <_Z6fcb_IKffff+0x210>)
 8002abe:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3 * 1000.0;
 8002ac2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ac6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002af0 <_Z6fcb_IKffff+0x1f4>
 8002aca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <_Z6fcb_IKffff+0x214>)
 8002ad0:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4 * 1000.0;
 8002ad4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ad8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002af0 <_Z6fcb_IKffff+0x1f4>
 8002adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <_Z6fcb_IKffff+0x218>)
 8002ae2:	edc3 7a00 	vstr	s15, [r3]

}
 8002ae6:	bf00      	nop
 8002ae8:	3748      	adds	r7, #72	; 0x48
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	447a0000 	.word	0x447a0000
 8002af4:	24000218 	.word	0x24000218
 8002af8:	24000214 	.word	0x24000214
 8002afc:	24000224 	.word	0x24000224
 8002b00:	24000220 	.word	0x24000220
 8002b04:	2400021c 	.word	0x2400021c
 8002b08:	24000bd4 	.word	0x24000bd4
 8002b0c:	24000bd8 	.word	0x24000bd8
 8002b10:	24000bdc 	.word	0x24000bdc
 8002b14:	24000be0 	.word	0x24000be0

08002b18 <_Z20Update_State_Machinev>:
float offset_y = 9.5; //10.79371
float offset_x_new = 0;
float offset_y_new = 0;
int indexy;
float pos_x, pos_y;
void Update_State_Machine() {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	ed2d 8b02 	vpush	{d8}
 8002b1e:	af00      	add	r7, sp, #0

	switch (control_state) {
 8002b20:	4bbf      	ldr	r3, [pc, #764]	; (8002e20 <_Z20Update_State_Machinev+0x308>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	3b29      	subs	r3, #41	; 0x29
 8002b28:	2b0f      	cmp	r3, #15
 8002b2a:	f200 838c 	bhi.w	8003246 <_Z20Update_State_Machinev+0x72e>
 8002b2e:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <_Z20Update_State_Machinev+0x1c>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b75 	.word	0x08002b75
 8002b38:	08002e81 	.word	0x08002e81
 8002b3c:	08002edd 	.word	0x08002edd
 8002b40:	08003247 	.word	0x08003247
 8002b44:	08003247 	.word	0x08003247
 8002b48:	08003247 	.word	0x08003247
 8002b4c:	08003247 	.word	0x08003247
 8002b50:	08003247 	.word	0x08003247
 8002b54:	08003247 	.word	0x08003247
 8002b58:	08003247 	.word	0x08003247
 8002b5c:	08003255 	.word	0x08003255
 8002b60:	08002f39 	.word	0x08002f39
 8002b64:	08003255 	.word	0x08003255
 8002b68:	0800305b 	.word	0x0800305b
 8002b6c:	08003255 	.word	0x08003255
 8002b70:	080031a1 	.word	0x080031a1
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002b74:	f7ff fe6e 	bl	8002854 <_Z10Call_queuev>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4aaa      	ldr	r2, [pc, #680]	; (8002e24 <_Z20Update_State_Machinev+0x30c>)
 8002b7c:	6013      	str	r3, [r2, #0]
		if (indexy != 255) {
 8002b7e:	4ba9      	ldr	r3, [pc, #676]	; (8002e24 <_Z20Update_State_Machinev+0x30c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2bff      	cmp	r3, #255	; 0xff
 8002b84:	f000 8131 	beq.w	8002dea <_Z20Update_State_Machinev+0x2d2>
			test_value_r = radias[indexy];
 8002b88:	4ba6      	ldr	r3, [pc, #664]	; (8002e24 <_Z20Update_State_Machinev+0x30c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4aa6      	ldr	r2, [pc, #664]	; (8002e28 <_Z20Update_State_Machinev+0x310>)
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9a:	ee17 2a90 	vmov	r2, s15
 8002b9e:	4ba3      	ldr	r3, [pc, #652]	; (8002e2c <_Z20Update_State_Machinev+0x314>)
 8002ba0:	601a      	str	r2, [r3, #0]
			test_value_theta = theta[indexy];
 8002ba2:	4ba0      	ldr	r3, [pc, #640]	; (8002e24 <_Z20Update_State_Machinev+0x30c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4aa2      	ldr	r2, [pc, #648]	; (8002e30 <_Z20Update_State_Machinev+0x318>)
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb4:	ee17 2a90 	vmov	r2, s15
 8002bb8:	4b9e      	ldr	r3, [pc, #632]	; (8002e34 <_Z20Update_State_Machinev+0x31c>)
 8002bba:	601a      	str	r2, [r3, #0]
			offset_x_new = ((0.16075
					* (test_value_r * cos((test_value_theta) / 1000.0)))
 8002bbc:	4b9b      	ldr	r3, [pc, #620]	; (8002e2c <_Z20Update_State_Machinev+0x314>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	ee07 3a90 	vmov	s15, r3
 8002bc4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002bc8:	4b9a      	ldr	r3, [pc, #616]	; (8002e34 <_Z20Update_State_Machinev+0x31c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bd4:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8002df8 <_Z20Update_State_Machinev+0x2e0>
 8002bd8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002bdc:	eeb0 0b46 	vmov.f64	d0, d6
 8002be0:	f00e fd52 	bl	8011688 <cos>
 8002be4:	eeb0 7b40 	vmov.f64	d7, d0
 8002be8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002bec:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8002e00 <_Z20Update_State_Machinev+0x2e8>
 8002bf0:	ee27 7b06 	vmul.f64	d7, d7, d6
					+ 0.02289) / 10.0;
 8002bf4:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8002e08 <_Z20Update_State_Machinev+0x2f0>
 8002bf8:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002bfc:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002c00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			offset_x_new = ((0.16075
 8002c08:	4b8b      	ldr	r3, [pc, #556]	; (8002e38 <_Z20Update_State_Machinev+0x320>)
 8002c0a:	edc3 7a00 	vstr	s15, [r3]
			offset_y_new = ((0.29560
					* (test_value_r * sin((test_value_theta) / 1000.0)))
 8002c0e:	4b87      	ldr	r3, [pc, #540]	; (8002e2c <_Z20Update_State_Machinev+0x314>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002c1a:	4b86      	ldr	r3, [pc, #536]	; (8002e34 <_Z20Update_State_Machinev+0x31c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c26:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8002df8 <_Z20Update_State_Machinev+0x2e0>
 8002c2a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002c2e:	eeb0 0b46 	vmov.f64	d0, d6
 8002c32:	f00e fd71 	bl	8011718 <sin>
 8002c36:	eeb0 7b40 	vmov.f64	d7, d0
 8002c3a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002c3e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002e10 <_Z20Update_State_Machinev+0x2f8>
 8002c42:	ee27 7b06 	vmul.f64	d7, d7, d6
					+ 1.05911) / 10.0;
 8002c46:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002e18 <_Z20Update_State_Machinev+0x300>
 8002c4a:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002c4e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002c52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			offset_y_new = ((0.29560
 8002c5a:	4b78      	ldr	r3, [pc, #480]	; (8002e3c <_Z20Update_State_Machinev+0x324>)
 8002c5c:	edc3 7a00 	vstr	s15, [r3]
			pos_x = (test_value_r * cos((test_value_theta) / 1000.0)) + offset_x
 8002c60:	4b72      	ldr	r3, [pc, #456]	; (8002e2c <_Z20Update_State_Machinev+0x314>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	ee07 3a90 	vmov	s15, r3
 8002c68:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002c6c:	4b71      	ldr	r3, [pc, #452]	; (8002e34 <_Z20Update_State_Machinev+0x31c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	ee07 3a90 	vmov	s15, r3
 8002c74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c78:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8002df8 <_Z20Update_State_Machinev+0x2e0>
 8002c7c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002c80:	eeb0 0b46 	vmov.f64	d0, d6
 8002c84:	f00e fd00 	bl	8011688 <cos>
 8002c88:	eeb0 7b40 	vmov.f64	d7, d0
 8002c8c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002c90:	4b6b      	ldr	r3, [pc, #428]	; (8002e40 <_Z20Update_State_Machinev+0x328>)
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c9a:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ offset_x_new;
 8002c9e:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <_Z20Update_State_Machinev+0x320>)
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ca8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002cac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			pos_x = (test_value_r * cos((test_value_theta) / 1000.0)) + offset_x
 8002cb0:	4b64      	ldr	r3, [pc, #400]	; (8002e44 <_Z20Update_State_Machinev+0x32c>)
 8002cb2:	edc3 7a00 	vstr	s15, [r3]
			pos_y = (test_value_r * sin((test_value_theta) / 1000.0)) + offset_y
 8002cb6:	4b5d      	ldr	r3, [pc, #372]	; (8002e2c <_Z20Update_State_Machinev+0x314>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	; (8002e34 <_Z20Update_State_Machinev+0x31c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cce:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8002df8 <_Z20Update_State_Machinev+0x2e0>
 8002cd2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002cd6:	eeb0 0b46 	vmov.f64	d0, d6
 8002cda:	f00e fd1d 	bl	8011718 <sin>
 8002cde:	eeb0 7b40 	vmov.f64	d7, d0
 8002ce2:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002ce6:	4b58      	ldr	r3, [pc, #352]	; (8002e48 <_Z20Update_State_Machinev+0x330>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cf0:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ offset_y_new;
 8002cf4:	4b51      	ldr	r3, [pc, #324]	; (8002e3c <_Z20Update_State_Machinev+0x324>)
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cfe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			pos_y = (test_value_r * sin((test_value_theta) / 1000.0)) + offset_y
 8002d06:	4b51      	ldr	r3, [pc, #324]	; (8002e4c <_Z20Update_State_Machinev+0x334>)
 8002d08:	edc3 7a00 	vstr	s15, [r3]
			fcb_IK(pos_x, pos_y, 0, 0);
 8002d0c:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <_Z20Update_State_Machinev+0x32c>)
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	4b4e      	ldr	r3, [pc, #312]	; (8002e4c <_Z20Update_State_Machinev+0x334>)
 8002d14:	ed93 7a00 	vldr	s14, [r3]
 8002d18:	eddf 1a4d 	vldr	s3, [pc, #308]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002d1c:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002d20:	eef0 0a47 	vmov.f32	s1, s14
 8002d24:	eeb0 0a67 	vmov.f32	s0, s15
 8002d28:	f7ff fde8 	bl	80028fc <_Z6fcb_IKffff>
			Max_Time = 7;
 8002d2c:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <_Z20Update_State_Machinev+0x33c>)
 8002d2e:	4a4a      	ldr	r2, [pc, #296]	; (8002e58 <_Z20Update_State_Machinev+0x340>)
 8002d30:	601a      	str	r2, [r3, #0]
			fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder,
 8002d32:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <_Z20Update_State_Machinev+0x33c>)
 8002d34:	edd3 7a00 	vldr	s15, [r3]
 8002d38:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <_Z20Update_State_Machinev+0x344>)
 8002d3a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002d3e:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <_Z20Update_State_Machinev+0x348>)
 8002d40:	edd3 6a00 	vldr	s13, [r3]
 8002d44:	ed9f 3a42 	vldr	s6, [pc, #264]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002d48:	eddf 2a41 	vldr	s5, [pc, #260]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002d4c:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002d50:	eddf 1a3f 	vldr	s3, [pc, #252]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002d54:	eeb0 1a66 	vmov.f32	s2, s13
 8002d58:	eef0 0a47 	vmov.f32	s1, s14
 8002d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d60:	483e      	ldr	r0, [pc, #248]	; (8002e5c <_Z20Update_State_Machinev+0x344>)
 8002d62:	f7fe f807 	bl	8000d74 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
					Planning_q1, 0.0, 0.0, 0.0, 0.0);
			fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder,
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <_Z20Update_State_Machinev+0x33c>)
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	4b3d      	ldr	r3, [pc, #244]	; (8002e64 <_Z20Update_State_Machinev+0x34c>)
 8002d6e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002d72:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <_Z20Update_State_Machinev+0x350>)
 8002d74:	edd3 6a00 	vldr	s13, [r3]
 8002d78:	ed9f 3a35 	vldr	s6, [pc, #212]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002d7c:	eddf 2a34 	vldr	s5, [pc, #208]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002d80:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002d84:	eddf 1a32 	vldr	s3, [pc, #200]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002d88:	eeb0 1a66 	vmov.f32	s2, s13
 8002d8c:	eef0 0a47 	vmov.f32	s1, s14
 8002d90:	eeb0 0a67 	vmov.f32	s0, s15
 8002d94:	4833      	ldr	r0, [pc, #204]	; (8002e64 <_Z20Update_State_Machinev+0x34c>)
 8002d96:	f7fd ffed 	bl	8000d74 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
					Planning_q3, 0.0, 0.0, 0.0, 0.0);
			fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder,
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <_Z20Update_State_Machinev+0x33c>)
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <_Z20Update_State_Machinev+0x354>)
 8002da2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002da6:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <_Z20Update_State_Machinev+0x358>)
 8002da8:	edd3 6a00 	vldr	s13, [r3]
 8002dac:	ed9f 3a28 	vldr	s6, [pc, #160]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002db0:	eddf 2a27 	vldr	s5, [pc, #156]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002db4:	ed9f 2a26 	vldr	s4, [pc, #152]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002db8:	eddf 1a25 	vldr	s3, [pc, #148]	; 8002e50 <_Z20Update_State_Machinev+0x338>
 8002dbc:	eeb0 1a66 	vmov.f32	s2, s13
 8002dc0:	eef0 0a47 	vmov.f32	s1, s14
 8002dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc8:	4828      	ldr	r0, [pc, #160]	; (8002e6c <_Z20Update_State_Machinev+0x354>)
 8002dca:	f7fd ffd3 	bl	8000d74 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
					Planning_q4, 0.0, 0.0, 0.0, 0.0);
			t = 0;
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <_Z20Update_State_Machinev+0x35c>)
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
			joint13_on = true;
 8002dd6:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <_Z20Update_State_Machinev+0x360>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim14);
 8002ddc:	4827      	ldr	r0, [pc, #156]	; (8002e7c <_Z20Update_State_Machinev+0x364>)
 8002dde:	f00a fb9b 	bl	800d518 <HAL_TIM_Base_Start_IT>
			control_state = 52;
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <_Z20Update_State_Machinev+0x308>)
 8002de4:	2234      	movs	r2, #52	; 0x34
 8002de6:	701a      	strb	r2, [r3, #0]
		}

//		Planning_q1
//		Planning_q3

		break;
 8002de8:	e235      	b.n	8003256 <_Z20Update_State_Machinev+0x73e>
			control_state = 0;
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <_Z20Update_State_Machinev+0x308>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
		break;
 8002df0:	e231      	b.n	8003256 <_Z20Update_State_Machinev+0x73e>
 8002df2:	bf00      	nop
 8002df4:	f3af 8000 	nop.w
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	408f4000 	.word	0x408f4000
 8002e00:	bc6a7efa 	.word	0xbc6a7efa
 8002e04:	3fc49374 	.word	0x3fc49374
 8002e08:	e59f2baa 	.word	0xe59f2baa
 8002e0c:	3f977079 	.word	0x3f977079
 8002e10:	432ca57a 	.word	0x432ca57a
 8002e14:	3fd2eb1c 	.word	0x3fd2eb1c
 8002e18:	53cddd6e 	.word	0x53cddd6e
 8002e1c:	3ff0f21d 	.word	0x3ff0f21d
 8002e20:	24000bc8 	.word	0x24000bc8
 8002e24:	24000bec 	.word	0x24000bec
 8002e28:	24000110 	.word	0x24000110
 8002e2c:	24000bc0 	.word	0x24000bc0
 8002e30:	24000010 	.word	0x24000010
 8002e34:	24000bc4 	.word	0x24000bc4
 8002e38:	24000be4 	.word	0x24000be4
 8002e3c:	24000be8 	.word	0x24000be8
 8002e40:	24000228 	.word	0x24000228
 8002e44:	24000bf0 	.word	0x24000bf0
 8002e48:	2400022c 	.word	0x2400022c
 8002e4c:	24000bf4 	.word	0x24000bf4
 8002e50:	00000000 	.word	0x00000000
 8002e54:	24000acc 	.word	0x24000acc
 8002e58:	40e00000 	.word	0x40e00000
 8002e5c:	2400053c 	.word	0x2400053c
 8002e60:	24000bd4 	.word	0x24000bd4
 8002e64:	24000704 	.word	0x24000704
 8002e68:	24000bdc 	.word	0x24000bdc
 8002e6c:	240007e8 	.word	0x240007e8
 8002e70:	24000be0 	.word	0x24000be0
 8002e74:	24000bd0 	.word	0x24000bd0
 8002e78:	24000b1e 	.word	0x24000b1e
 8002e7c:	24001098 	.word	0x24001098

	case 42:
		Max_Time = 12;
 8002e80:	4bb2      	ldr	r3, [pc, #712]	; (800314c <_Z20Update_State_Machinev+0x634>)
 8002e82:	4ab3      	ldr	r2, [pc, #716]	; (8003150 <_Z20Update_State_Machinev+0x638>)
 8002e84:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002e86:	4bb3      	ldr	r3, [pc, #716]	; (8003154 <_Z20Update_State_Machinev+0x63c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002e8c:	4baf      	ldr	r3, [pc, #700]	; (800314c <_Z20Update_State_Machinev+0x634>)
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	4bb1      	ldr	r3, [pc, #708]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8002e94:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e98:	4bb0      	ldr	r3, [pc, #704]	; (800315c <_Z20Update_State_Machinev+0x644>)
 8002e9a:	edd3 6a00 	vldr	s13, [r3]
 8002e9e:	ed9f 3ab0 	vldr	s6, [pc, #704]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002ea2:	eddf 2aaf 	vldr	s5, [pc, #700]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002ea6:	ed9f 2aae 	vldr	s4, [pc, #696]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002eaa:	eddf 1aad 	vldr	s3, [pc, #692]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002eae:	eeb0 1a66 	vmov.f32	s2, s13
 8002eb2:	eef0 0a47 	vmov.f32	s1, s14
 8002eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eba:	48a7      	ldr	r0, [pc, #668]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8002ebc:	f7fd ff5a 	bl	8000d74 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Down, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8002ec0:	4ba8      	ldr	r3, [pc, #672]	; (8003164 <_Z20Update_State_Machinev+0x64c>)
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002ec8:	48a7      	ldr	r0, [pc, #668]	; (8003168 <_Z20Update_State_Machinev+0x650>)
 8002eca:	f00a fb25 	bl	800d518 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002ece:	4ba7      	ldr	r3, [pc, #668]	; (800316c <_Z20Update_State_Machinev+0x654>)
 8002ed0:	2236      	movs	r2, #54	; 0x36
 8002ed2:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002ed4:	4ba6      	ldr	r3, [pc, #664]	; (8003170 <_Z20Update_State_Machinev+0x658>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
		break;
 8002eda:	e1bc      	b.n	8003256 <_Z20Update_State_Machinev+0x73e>

	case 43:
		Max_Time = 12;
 8002edc:	4b9b      	ldr	r3, [pc, #620]	; (800314c <_Z20Update_State_Machinev+0x634>)
 8002ede:	4a9c      	ldr	r2, [pc, #624]	; (8003150 <_Z20Update_State_Machinev+0x638>)
 8002ee0:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002ee2:	4b9c      	ldr	r3, [pc, #624]	; (8003154 <_Z20Update_State_Machinev+0x63c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002ee8:	4b98      	ldr	r3, [pc, #608]	; (800314c <_Z20Update_State_Machinev+0x634>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	4b9a      	ldr	r3, [pc, #616]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8002ef0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002ef4:	4b9f      	ldr	r3, [pc, #636]	; (8003174 <_Z20Update_State_Machinev+0x65c>)
 8002ef6:	edd3 6a00 	vldr	s13, [r3]
 8002efa:	ed9f 3a99 	vldr	s6, [pc, #612]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002efe:	eddf 2a98 	vldr	s5, [pc, #608]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002f02:	ed9f 2a97 	vldr	s4, [pc, #604]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002f06:	eddf 1a96 	vldr	s3, [pc, #600]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002f0a:	eeb0 1a66 	vmov.f32	s2, s13
 8002f0e:	eef0 0a47 	vmov.f32	s1, s14
 8002f12:	eeb0 0a67 	vmov.f32	s0, s15
 8002f16:	4890      	ldr	r0, [pc, #576]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8002f18:	f7fd ff2c 	bl	8000d74 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Up, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8002f1c:	4b91      	ldr	r3, [pc, #580]	; (8003164 <_Z20Update_State_Machinev+0x64c>)
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002f24:	4890      	ldr	r0, [pc, #576]	; (8003168 <_Z20Update_State_Machinev+0x650>)
 8002f26:	f00a faf7 	bl	800d518 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8002f2a:	4b90      	ldr	r3, [pc, #576]	; (800316c <_Z20Update_State_Machinev+0x654>)
 8002f2c:	2238      	movs	r2, #56	; 0x38
 8002f2e:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f30:	4b8f      	ldr	r3, [pc, #572]	; (8003170 <_Z20Update_State_Machinev+0x658>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
		break;
 8002f36:	e18e      	b.n	8003256 <_Z20Update_State_Machinev+0x73e>

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002f38:	488b      	ldr	r0, [pc, #556]	; (8003168 <_Z20Update_State_Machinev+0x650>)
 8002f3a:	f00a fb65 	bl	800d608 <HAL_TIM_Base_Stop_IT>
		fcb_joint1.Goal_Velocity = 0;
 8002f3e:	4b8e      	ldr	r3, [pc, #568]	; (8003178 <_Z20Update_State_Machinev+0x660>)
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 8002f46:	4b8d      	ldr	r3, [pc, #564]	; (800317c <_Z20Update_State_Machinev+0x664>)
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8002f4e:	4b8c      	ldr	r3, [pc, #560]	; (8003180 <_Z20Update_State_Machinev+0x668>)
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 8002f56:	4b88      	ldr	r3, [pc, #544]	; (8003178 <_Z20Update_State_Machinev+0x660>)
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8002f60:	4b87      	ldr	r3, [pc, #540]	; (8003180 <_Z20Update_State_Machinev+0x668>)
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8002f6a:	4b84      	ldr	r3, [pc, #528]	; (800317c <_Z20Update_State_Machinev+0x664>)
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002f74:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002f78:	4882      	ldr	r0, [pc, #520]	; (8003184 <_Z20Update_State_Machinev+0x66c>)
 8002f7a:	f7ff fa09 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002f7e:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002f82:	4881      	ldr	r0, [pc, #516]	; (8003188 <_Z20Update_State_Machinev+0x670>)
 8002f84:	f7ff fa04 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002f88:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003160 <_Z20Update_State_Machinev+0x648>
 8002f8c:	487f      	ldr	r0, [pc, #508]	; (800318c <_Z20Update_State_Machinev+0x674>)
 8002f8e:	f7ff f9ff 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.kalman_pos;
 8002f92:	4b79      	ldr	r3, [pc, #484]	; (8003178 <_Z20Update_State_Machinev+0x660>)
 8002f94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f98:	4a77      	ldr	r2, [pc, #476]	; (8003178 <_Z20Update_State_Machinev+0x660>)
 8002f9a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.kalman_pos;
 8002f9e:	4b77      	ldr	r3, [pc, #476]	; (800317c <_Z20Update_State_Machinev+0x664>)
 8002fa0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002fa4:	4a75      	ldr	r2, [pc, #468]	; (800317c <_Z20Update_State_Machinev+0x664>)
 8002fa6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.kalman_pos;
 8002faa:	4b75      	ldr	r3, [pc, #468]	; (8003180 <_Z20Update_State_Machinev+0x668>)
 8002fac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002fb0:	4a73      	ldr	r2, [pc, #460]	; (8003180 <_Z20Update_State_Machinev+0x668>)
 8002fb2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
//		fcb_joint1.C0 = fcb_joint1.Goal_Position;
//		fcb_joint4.C0 = fcb_joint4.Goal_Position;
//		fcb_joint3.C0 = fcb_joint3.Goal_Position;

		fcb_joint1.C1 = 0;
 8002fb6:	4b70      	ldr	r3, [pc, #448]	; (8003178 <_Z20Update_State_Machinev+0x660>)
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 8002fc0:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <_Z20Update_State_Machinev+0x668>)
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 8002fca:	4b6b      	ldr	r3, [pc, #428]	; (8003178 <_Z20Update_State_Machinev+0x660>)
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 8002fd4:	4b6a      	ldr	r3, [pc, #424]	; (8003180 <_Z20Update_State_Machinev+0x668>)
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 8002fde:	4b66      	ldr	r3, [pc, #408]	; (8003178 <_Z20Update_State_Machinev+0x660>)
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 8002fe8:	4b65      	ldr	r3, [pc, #404]	; (8003180 <_Z20Update_State_Machinev+0x668>)
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 8002ff2:	4b61      	ldr	r3, [pc, #388]	; (8003178 <_Z20Update_State_Machinev+0x660>)
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 8002ffc:	4b60      	ldr	r3, [pc, #384]	; (8003180 <_Z20Update_State_Machinev+0x668>)
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <_Z20Update_State_Machinev+0x660>)
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8003010:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <_Z20Update_State_Machinev+0x668>)
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 800301a:	4b58      	ldr	r3, [pc, #352]	; (800317c <_Z20Update_State_Machinev+0x664>)
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8003024:	4b55      	ldr	r3, [pc, #340]	; (800317c <_Z20Update_State_Machinev+0x664>)
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 800302e:	4b53      	ldr	r3, [pc, #332]	; (800317c <_Z20Update_State_Machinev+0x664>)
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 8003038:	4b50      	ldr	r3, [pc, #320]	; (800317c <_Z20Update_State_Machinev+0x664>)
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 8003042:	4b4e      	ldr	r3, [pc, #312]	; (800317c <_Z20Update_State_Machinev+0x664>)
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 800304c:	4b47      	ldr	r3, [pc, #284]	; (800316c <_Z20Update_State_Machinev+0x654>)
 800304e:	222a      	movs	r2, #42	; 0x2a
 8003050:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003052:	4b47      	ldr	r3, [pc, #284]	; (8003170 <_Z20Update_State_Machinev+0x658>)
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
		break;
 8003058:	e0fd      	b.n	8003256 <_Z20Update_State_Machinev+0x73e>

//		State_FIN = true;
		break;

	case 54:
		HAL_TIM_Base_Stop_IT(&htim14);
 800305a:	4843      	ldr	r0, [pc, #268]	; (8003168 <_Z20Update_State_Machinev+0x650>)
 800305c:	f00a fad4 	bl	800d608 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.Goal_Velocity = 0;
 8003060:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8003068:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003160 <_Z20Update_State_Machinev+0x648>
 800306c:	4848      	ldr	r0, [pc, #288]	; (8003190 <_Z20Update_State_Machinev+0x678>)
 800306e:	f7ff f98f 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8003072:	4b39      	ldr	r3, [pc, #228]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	4a38      	ldr	r2, [pc, #224]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8003078:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 800307c:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <_Z20Update_State_Machinev+0x660>)
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8003086:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <_Z20Update_State_Machinev+0x668>)
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003090:	4b3a      	ldr	r3, [pc, #232]	; (800317c <_Z20Update_State_Machinev+0x664>)
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800309a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003160 <_Z20Update_State_Machinev+0x648>
 800309e:	4839      	ldr	r0, [pc, #228]	; (8003184 <_Z20Update_State_Machinev+0x66c>)
 80030a0:	f7ff f976 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80030a4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003160 <_Z20Update_State_Machinev+0x648>
 80030a8:	4837      	ldr	r0, [pc, #220]	; (8003188 <_Z20Update_State_Machinev+0x670>)
 80030aa:	f7ff f971 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80030ae:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003160 <_Z20Update_State_Machinev+0x648>
 80030b2:	4836      	ldr	r0, [pc, #216]	; (800318c <_Z20Update_State_Machinev+0x674>)
 80030b4:	f7ff f96c 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		if (Gripper_State[first - 1] == 1) {
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <_Z20Update_State_Machinev+0x67c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3b01      	subs	r3, #1
 80030be:	4a36      	ldr	r2, [pc, #216]	; (8003198 <_Z20Update_State_Machinev+0x680>)
 80030c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <_Z20Update_State_Machinev+0x5c2>
			gripper.GripperClose();
 80030d2:	4832      	ldr	r0, [pc, #200]	; (800319c <_Z20Update_State_Machinev+0x684>)
 80030d4:	f7fe fdf2 	bl	8001cbc <_ZN10ServoMotor12GripperCloseEv>
 80030d8:	e00f      	b.n	80030fa <_Z20Update_State_Machinev+0x5e2>
		} else if (Gripper_State[first - 1] == 2) {
 80030da:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <_Z20Update_State_Machinev+0x67c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3b01      	subs	r3, #1
 80030e0:	4a2d      	ldr	r2, [pc, #180]	; (8003198 <_Z20Update_State_Machinev+0x680>)
 80030e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <_Z20Update_State_Machinev+0x5e2>
			gripper.GripperOpen();
 80030f4:	4829      	ldr	r0, [pc, #164]	; (800319c <_Z20Update_State_Machinev+0x684>)
 80030f6:	f7fe fdf7 	bl	8001ce8 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <_Z20Update_State_Machinev+0x640>)
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <_Z20Update_State_Machinev+0x654>)
 8003140:	222b      	movs	r2, #43	; 0x2b
 8003142:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <_Z20Update_State_Machinev+0x658>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
		break;
 800314a:	e084      	b.n	8003256 <_Z20Update_State_Machinev+0x73e>
 800314c:	24000acc 	.word	0x24000acc
 8003150:	41400000 	.word	0x41400000
 8003154:	24000b1e 	.word	0x24000b1e
 8003158:	24000620 	.word	0x24000620
 800315c:	24000004 	.word	0x24000004
 8003160:	00000000 	.word	0x00000000
 8003164:	24000bd0 	.word	0x24000bd0
 8003168:	24001098 	.word	0x24001098
 800316c:	24000bc8 	.word	0x24000bc8
 8003170:	24000ac8 	.word	0x24000ac8
 8003174:	24000000 	.word	0x24000000
 8003178:	2400053c 	.word	0x2400053c
 800317c:	240007e8 	.word	0x240007e8
 8003180:	24000704 	.word	0x24000704
 8003184:	2400049c 	.word	0x2400049c
 8003188:	24000514 	.word	0x24000514
 800318c:	240004ec 	.word	0x240004ec
 8003190:	240004c4 	.word	0x240004c4
 8003194:	24000008 	.word	0x24000008
 8003198:	24000b70 	.word	0x24000b70
 800319c:	24000a94 	.word	0x24000a94
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 80031a0:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <_Z20Update_State_Machinev+0x748>)
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 80031a8:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003264 <_Z20Update_State_Machinev+0x74c>
 80031ac:	482e      	ldr	r0, [pc, #184]	; (8003268 <_Z20Update_State_Machinev+0x750>)
 80031ae:	f7ff f8ef 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <_Z20Update_State_Machinev+0x748>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4a2a      	ldr	r2, [pc, #168]	; (8003260 <_Z20Update_State_Machinev+0x748>)
 80031b8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 80031bc:	4b2b      	ldr	r3, [pc, #172]	; (800326c <_Z20Update_State_Machinev+0x754>)
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 80031c6:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <_Z20Update_State_Machinev+0x758>)
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 80031d0:	4b28      	ldr	r3, [pc, #160]	; (8003274 <_Z20Update_State_Machinev+0x75c>)
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 80031da:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8003264 <_Z20Update_State_Machinev+0x74c>
 80031de:	4826      	ldr	r0, [pc, #152]	; (8003278 <_Z20Update_State_Machinev+0x760>)
 80031e0:	f7ff f8d6 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80031e4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003264 <_Z20Update_State_Machinev+0x74c>
 80031e8:	4824      	ldr	r0, [pc, #144]	; (800327c <_Z20Update_State_Machinev+0x764>)
 80031ea:	f7ff f8d1 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80031ee:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8003264 <_Z20Update_State_Machinev+0x74c>
 80031f2:	4823      	ldr	r0, [pc, #140]	; (8003280 <_Z20Update_State_Machinev+0x768>)
 80031f4:	f7ff f8cc 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 80031f8:	4822      	ldr	r0, [pc, #136]	; (8003284 <_Z20Update_State_Machinev+0x76c>)
 80031fa:	f00a fa05 	bl	800d608 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.C1 = 0;
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <_Z20Update_State_Machinev+0x748>)
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003208:	4b15      	ldr	r3, [pc, #84]	; (8003260 <_Z20Update_State_Machinev+0x748>)
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003212:	4b13      	ldr	r3, [pc, #76]	; (8003260 <_Z20Update_State_Machinev+0x748>)
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 800321c:	4b10      	ldr	r3, [pc, #64]	; (8003260 <_Z20Update_State_Machinev+0x748>)
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <_Z20Update_State_Machinev+0x748>)
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <_Z20Update_State_Machinev+0x748>)
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <_Z20Update_State_Machinev+0x770>)
 800323a:	2229      	movs	r2, #41	; 0x29
 800323c:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <_Z20Update_State_Machinev+0x774>)
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
		break;
 8003244:	e007      	b.n	8003256 <_Z20Update_State_Machinev+0x73e>

	default:
		control_state = 0;
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <_Z20Update_State_Machinev+0x770>)
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <_Z20Update_State_Machinev+0x774>)
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
		break;
 8003252:	e000      	b.n	8003256 <_Z20Update_State_Machinev+0x73e>
		break;
 8003254:	bf00      	nop
	}
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	ecbd 8b02 	vpop	{d8}
 800325e:	bd80      	pop	{r7, pc}
 8003260:	24000620 	.word	0x24000620
 8003264:	00000000 	.word	0x00000000
 8003268:	240004c4 	.word	0x240004c4
 800326c:	2400053c 	.word	0x2400053c
 8003270:	24000704 	.word	0x24000704
 8003274:	240007e8 	.word	0x240007e8
 8003278:	2400049c 	.word	0x2400049c
 800327c:	24000514 	.word	0x24000514
 8003280:	240004ec 	.word	0x240004ec
 8003284:	24001098 	.word	0x24001098
 8003288:	24000bc8 	.word	0x24000bc8
 800328c:	24000ac8 	.word	0x24000ac8

08003290 <HAL_UARTEx_RxEventCallback>:
float box_q4[30];
float idx, idy;

#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003290:	b5b0      	push	{r4, r5, r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a8f      	ldr	r2, [pc, #572]	; (80034dc <HAL_UARTEx_RxEventCallback+0x24c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	f040 8188 	bne.w	80035b6 <HAL_UARTEx_RxEventCallback+0x326>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80032a6:	4a8e      	ldr	r2, [pc, #568]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80032a8:	4b8e      	ldr	r3, [pc, #568]	; (80034e4 <HAL_UARTEx_RxEventCallback+0x254>)
 80032aa:	4614      	mov	r4, r2
 80032ac:	461d      	mov	r5, r3
 80032ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032b2:	682b      	ldr	r3, [r5, #0]
 80032b4:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80032b6:	2214      	movs	r2, #20
 80032b8:	2100      	movs	r1, #0
 80032ba:	488a      	ldr	r0, [pc, #552]	; (80034e4 <HAL_UARTEx_RxEventCallback+0x254>)
 80032bc:	f00f fa4c 	bl	8012758 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 80032c0:	887b      	ldrh	r3, [r7, #2]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	f240 8166 	bls.w	8003594 <HAL_UARTEx_RxEventCallback+0x304>
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	2b14      	cmp	r3, #20
 80032cc:	f200 8162 	bhi.w	8003594 <HAL_UARTEx_RxEventCallback+0x304>
			cmdDataSize = Size - 2;	// Calculate data length.
 80032d0:	887b      	ldrh	r3, [r7, #2]
 80032d2:	3b02      	subs	r3, #2
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	4b84      	ldr	r3, [pc, #528]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 80032d8:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 80032da:	4b83      	ldr	r3, [pc, #524]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	497f      	ldr	r1, [pc, #508]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80032e4:	4881      	ldr	r0, [pc, #516]	; (80034ec <HAL_UARTEx_RxEventCallback+0x25c>)
 80032e6:	f003 ffd1 	bl	800728c <HAL_CRC_Calculate>
 80032ea:	4603      	mov	r3, r0
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	4b80      	ldr	r3, [pc, #512]	; (80034f0 <HAL_UARTEx_RxEventCallback+0x260>)
 80032f0:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80032f2:	4b7d      	ldr	r3, [pc, #500]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b79      	ldr	r3, [pc, #484]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80032fc:	5c9b      	ldrb	r3, [r3, r2]
 80032fe:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8003300:	b21a      	sxth	r2, r3
 8003302:	4b79      	ldr	r3, [pc, #484]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b29b      	uxth	r3, r3
 8003308:	3301      	adds	r3, #1
 800330a:	4975      	ldr	r1, [pc, #468]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800330c:	5ccb      	ldrb	r3, [r1, r3]
 800330e:	b21b      	sxth	r3, r3
 8003310:	4313      	orrs	r3, r2
 8003312:	b21b      	sxth	r3, r3
 8003314:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8003316:	4b77      	ldr	r3, [pc, #476]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x264>)
 8003318:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800331a:	4b75      	ldr	r3, [pc, #468]	; (80034f0 <HAL_UARTEx_RxEventCallback+0x260>)
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b29a      	uxth	r2, r3
 8003320:	4b74      	ldr	r3, [pc, #464]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x264>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	429a      	cmp	r2, r3
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8151 	beq.w	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003336:	2201      	movs	r2, #1
 8003338:	2102      	movs	r1, #2
 800333a:	486f      	ldr	r0, [pc, #444]	; (80034f8 <HAL_UARTEx_RxEventCallback+0x268>)
 800333c:	f007 f92a 	bl	800a594 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003340:	2200      	movs	r2, #0
 8003342:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003346:	486d      	ldr	r0, [pc, #436]	; (80034fc <HAL_UARTEx_RxEventCallback+0x26c>)
 8003348:	f007 f924 	bl	800a594 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 800334c:	4b64      	ldr	r3, [pc, #400]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b61      	cmp	r3, #97	; 0x61
 8003352:	d106      	bne.n	8003362 <HAL_UARTEx_RxEventCallback+0xd2>
 8003354:	4b64      	ldr	r3, [pc, #400]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b05      	cmp	r3, #5
 800335c:	d101      	bne.n	8003362 <HAL_UARTEx_RxEventCallback+0xd2>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_UARTEx_RxEventCallback+0xd4>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d014      	beq.n	8003392 <HAL_UARTEx_RxEventCallback+0x102>
						{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8003368:	4b5d      	ldr	r3, [pc, #372]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	b25a      	sxtb	r2, r3
 800336e:	4b64      	ldr	r3, [pc, #400]	; (8003500 <HAL_UARTEx_RxEventCallback+0x270>)
 8003370:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003374:	789b      	ldrb	r3, [r3, #2]
 8003376:	b25a      	sxtb	r2, r3
 8003378:	4b62      	ldr	r3, [pc, #392]	; (8003504 <HAL_UARTEx_RxEventCallback+0x274>)
 800337a:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 800337c:	4b58      	ldr	r3, [pc, #352]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800337e:	78db      	ldrb	r3, [r3, #3]
 8003380:	b25a      	sxtb	r2, r3
 8003382:	4b61      	ldr	r3, [pc, #388]	; (8003508 <HAL_UARTEx_RxEventCallback+0x278>)
 8003384:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8003386:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003388:	791b      	ldrb	r3, [r3, #4]
 800338a:	b25a      	sxtb	r2, r3
 800338c:	4b5f      	ldr	r3, [pc, #380]	; (800350c <HAL_UARTEx_RxEventCallback+0x27c>)
 800338e:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
					pyaw = Old_Rx_Buffer[7];
				}

			}
 8003390:	e122      	b.n	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 8003392:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b71      	cmp	r3, #113	; 0x71
 8003398:	d106      	bne.n	80033a8 <HAL_UARTEx_RxEventCallback+0x118>
 800339a:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b05      	cmp	r3, #5
 80033a2:	d101      	bne.n	80033a8 <HAL_UARTEx_RxEventCallback+0x118>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_UARTEx_RxEventCallback+0x11a>
 80033a8:	2300      	movs	r3, #0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d014      	beq.n	80033d8 <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 80033ae:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	b25a      	sxtb	r2, r3
 80033b4:	4b56      	ldr	r3, [pc, #344]	; (8003510 <HAL_UARTEx_RxEventCallback+0x280>)
 80033b6:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80033b8:	4b49      	ldr	r3, [pc, #292]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80033ba:	789b      	ldrb	r3, [r3, #2]
 80033bc:	b25a      	sxtb	r2, r3
 80033be:	4b55      	ldr	r3, [pc, #340]	; (8003514 <HAL_UARTEx_RxEventCallback+0x284>)
 80033c0:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80033c4:	78db      	ldrb	r3, [r3, #3]
 80033c6:	b25a      	sxtb	r2, r3
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_UARTEx_RxEventCallback+0x288>)
 80033ca:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80033cc:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80033ce:	791b      	ldrb	r3, [r3, #4]
 80033d0:	b25a      	sxtb	r2, r3
 80033d2:	4b52      	ldr	r3, [pc, #328]	; (800351c <HAL_UARTEx_RxEventCallback+0x28c>)
 80033d4:	701a      	strb	r2, [r3, #0]
			}
 80033d6:	e0ff      	b.n	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2) {
 80033d8:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b85      	cmp	r3, #133	; 0x85
 80033de:	d106      	bne.n	80033ee <HAL_UARTEx_RxEventCallback+0x15e>
 80033e0:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d101      	bne.n	80033ee <HAL_UARTEx_RxEventCallback+0x15e>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_UARTEx_RxEventCallback+0x160>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 80033f4:	4b4a      	ldr	r3, [pc, #296]	; (8003520 <HAL_UARTEx_RxEventCallback+0x290>)
 80033f6:	2233      	movs	r2, #51	; 0x33
 80033f8:	701a      	strb	r2, [r3, #0]
			}
 80033fa:	e0ed      	b.n	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 80033fc:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b86      	cmp	r3, #134	; 0x86
 8003402:	d106      	bne.n	8003412 <HAL_UARTEx_RxEventCallback+0x182>
 8003404:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b03      	cmp	r3, #3
 800340c:	d101      	bne.n	8003412 <HAL_UARTEx_RxEventCallback+0x182>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_UARTEx_RxEventCallback+0x184>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 8003418:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 800341e:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003420:	789b      	ldrb	r3, [r3, #2]
 8003422:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 8003424:	68f9      	ldr	r1, [r7, #12]
 8003426:	6938      	ldr	r0, [r7, #16]
 8003428:	f7ff f9d6 	bl	80027d8 <_Z12Insert_queueii>
			}
 800342c:	e0d4      	b.n	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2) {
 800342e:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b87      	cmp	r3, #135	; 0x87
 8003434:	d106      	bne.n	8003444 <HAL_UARTEx_RxEventCallback+0x1b4>
 8003436:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d101      	bne.n	8003444 <HAL_UARTEx_RxEventCallback+0x1b4>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_UARTEx_RxEventCallback+0x1b6>
 8003444:	2300      	movs	r3, #0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 800344a:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800344c:	785b      	ldrb	r3, [r3, #1]
 800344e:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 8003450:	4a33      	ldr	r2, [pc, #204]	; (8003520 <HAL_UARTEx_RxEventCallback+0x290>)
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 8003456:	f7ff fb5f 	bl	8002b18 <_Z20Update_State_Machinev>
			}
 800345a:	e0bd      	b.n	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2) {
 800345c:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b89      	cmp	r3, #137	; 0x89
 8003462:	d106      	bne.n	8003472 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d101      	bne.n	8003472 <HAL_UARTEx_RxEventCallback+0x1e2>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_UARTEx_RxEventCallback+0x1e4>
 8003472:	2300      	movs	r3, #0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 8003478:	f7ff fb4e 	bl	8002b18 <_Z20Update_State_Machinev>
			}
 800347c:	e0ac      	b.n	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b81      	cmp	r3, #129	; 0x81
 8003484:	d106      	bne.n	8003494 <HAL_UARTEx_RxEventCallback+0x204>
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d101      	bne.n	8003494 <HAL_UARTEx_RxEventCallback+0x204>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_UARTEx_RxEventCallback+0x206>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d015      	beq.n	80034c6 <HAL_UARTEx_RxEventCallback+0x236>
					gripperstate = Old_Rx_Buffer[1];
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800349c:	785b      	ldrb	r3, [r3, #1]
 800349e:	461a      	mov	r2, r3
 80034a0:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_UARTEx_RxEventCallback+0x294>)
 80034a2:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 80034a4:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <HAL_UARTEx_RxEventCallback+0x294>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 80034b6:	481c      	ldr	r0, [pc, #112]	; (8003528 <HAL_UARTEx_RxEventCallback+0x298>)
 80034b8:	f7fe fc16 	bl	8001ce8 <_ZN10ServoMotor11GripperOpenEv>
			}
 80034bc:	e08c      	b.n	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
						gripper.GripperClose();
 80034be:	481a      	ldr	r0, [pc, #104]	; (8003528 <HAL_UARTEx_RxEventCallback+0x298>)
 80034c0:	f7fe fbfc 	bl	8001cbc <_ZN10ServoMotor12GripperCloseEv>
			}
 80034c4:	e088      	b.n	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b91      	cmp	r3, #145	; 0x91
 80034cc:	d12e      	bne.n	800352c <HAL_UARTEx_RxEventCallback+0x29c>
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_UARTEx_RxEventCallback+0x258>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d129      	bne.n	800352c <HAL_UARTEx_RxEventCallback+0x29c>
 80034d8:	2301      	movs	r3, #1
 80034da:	e028      	b.n	800352e <HAL_UARTEx_RxEventCallback+0x29e>
 80034dc:	240013c0 	.word	0x240013c0
 80034e0:	24000af0 	.word	0x24000af0
 80034e4:	24000b04 	.word	0x24000b04
 80034e8:	24000b18 	.word	0x24000b18
 80034ec:	24000c04 	.word	0x24000c04
 80034f0:	24000ae8 	.word	0x24000ae8
 80034f4:	24000aea 	.word	0x24000aea
 80034f8:	58021000 	.word	0x58021000
 80034fc:	58020400 	.word	0x58020400
 8003500:	24000ad0 	.word	0x24000ad0
 8003504:	24000ad1 	.word	0x24000ad1
 8003508:	24000ad2 	.word	0x24000ad2
 800350c:	24000ad3 	.word	0x24000ad3
 8003510:	24000ad4 	.word	0x24000ad4
 8003514:	24000ad5 	.word	0x24000ad5
 8003518:	24000ad6 	.word	0x24000ad6
 800351c:	24000ad7 	.word	0x24000ad7
 8003520:	24000bc8 	.word	0x24000bc8
 8003524:	24000aec 	.word	0x24000aec
 8003528:	24000a94 	.word	0x24000a94
 800352c:	2300      	movs	r3, #0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d052      	beq.n	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8003532:	4b5f      	ldr	r3, [pc, #380]	; (80036b0 <HAL_UARTEx_RxEventCallback+0x420>)
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	4a5d      	ldr	r2, [pc, #372]	; (80036b0 <HAL_UARTEx_RxEventCallback+0x420>)
 800353a:	7892      	ldrb	r2, [r2, #2]
 800353c:	4313      	orrs	r3, r2
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003546:	4b5b      	ldr	r3, [pc, #364]	; (80036b4 <HAL_UARTEx_RxEventCallback+0x424>)
 8003548:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
 800354c:	4b58      	ldr	r3, [pc, #352]	; (80036b0 <HAL_UARTEx_RxEventCallback+0x420>)
 800354e:	78db      	ldrb	r3, [r3, #3]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	4a57      	ldr	r2, [pc, #348]	; (80036b0 <HAL_UARTEx_RxEventCallback+0x420>)
 8003554:	7912      	ldrb	r2, [r2, #4]
 8003556:	4313      	orrs	r3, r2
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003560:	4b55      	ldr	r3, [pc, #340]	; (80036b8 <HAL_UARTEx_RxEventCallback+0x428>)
 8003562:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
 8003566:	4b52      	ldr	r3, [pc, #328]	; (80036b0 <HAL_UARTEx_RxEventCallback+0x420>)
 8003568:	795b      	ldrb	r3, [r3, #5]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_UARTEx_RxEventCallback+0x420>)
 800356e:	7992      	ldrb	r2, [r2, #6]
 8003570:	4313      	orrs	r3, r2
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357a:	4b50      	ldr	r3, [pc, #320]	; (80036bc <HAL_UARTEx_RxEventCallback+0x42c>)
 800357c:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8003580:	4b4b      	ldr	r3, [pc, #300]	; (80036b0 <HAL_UARTEx_RxEventCallback+0x420>)
 8003582:	79db      	ldrb	r3, [r3, #7]
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358c:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <HAL_UARTEx_RxEventCallback+0x430>)
 800358e:	edc3 7a00 	vstr	s15, [r3]
			}
 8003592:	e021      	b.n	80035d8 <HAL_UARTEx_RxEventCallback+0x348>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003594:	2200      	movs	r2, #0
 8003596:	2102      	movs	r1, #2
 8003598:	484a      	ldr	r0, [pc, #296]	; (80036c4 <HAL_UARTEx_RxEventCallback+0x434>)
 800359a:	f006 fffb 	bl	800a594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800359e:	2201      	movs	r2, #1
 80035a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035a4:	4848      	ldr	r0, [pc, #288]	; (80036c8 <HAL_UARTEx_RxEventCallback+0x438>)
 80035a6:	f006 fff5 	bl	800a594 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 80035aa:	220c      	movs	r2, #12
 80035ac:	4947      	ldr	r1, [pc, #284]	; (80036cc <HAL_UARTEx_RxEventCallback+0x43c>)
 80035ae:	4848      	ldr	r0, [pc, #288]	; (80036d0 <HAL_UARTEx_RxEventCallback+0x440>)
 80035b0:	f00b fd68 	bl	800f084 <HAL_UART_Transmit_DMA>
 80035b4:	e011      	b.n	80035da <HAL_UARTEx_RxEventCallback+0x34a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2102      	movs	r1, #2
 80035ba:	4842      	ldr	r0, [pc, #264]	; (80036c4 <HAL_UARTEx_RxEventCallback+0x434>)
 80035bc:	f006 ffea 	bl	800a594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80035c0:	2201      	movs	r2, #1
 80035c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035c6:	4840      	ldr	r0, [pc, #256]	; (80036c8 <HAL_UARTEx_RxEventCallback+0x438>)
 80035c8:	f006 ffe4 	bl	800a594 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 80035cc:	2215      	movs	r2, #21
 80035ce:	4941      	ldr	r1, [pc, #260]	; (80036d4 <HAL_UARTEx_RxEventCallback+0x444>)
 80035d0:	483f      	ldr	r0, [pc, #252]	; (80036d0 <HAL_UARTEx_RxEventCallback+0x440>)
 80035d2:	f00b fd57 	bl	800f084 <HAL_UART_Transmit_DMA>
 80035d6:	e000      	b.n	80035da <HAL_UARTEx_RxEventCallback+0x34a>
			}
 80035d8:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80035da:	2214      	movs	r2, #20
 80035dc:	493e      	ldr	r1, [pc, #248]	; (80036d8 <HAL_UARTEx_RxEventCallback+0x448>)
 80035de:	483c      	ldr	r0, [pc, #240]	; (80036d0 <HAL_UARTEx_RxEventCallback+0x440>)
 80035e0:	f00d fcad 	bl	8010f3e <HAL_UARTEx_ReceiveToIdle_DMA>
	Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80035e4:	4b3d      	ldr	r3, [pc, #244]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a3d      	ldr	r2, [pc, #244]	; (80036e0 <HAL_UARTEx_RxEventCallback+0x450>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d04a      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 80035ee:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a3c      	ldr	r2, [pc, #240]	; (80036e4 <HAL_UARTEx_RxEventCallback+0x454>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d045      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 80035f8:	4b38      	ldr	r3, [pc, #224]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <HAL_UARTEx_RxEventCallback+0x458>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d040      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a39      	ldr	r2, [pc, #228]	; (80036ec <HAL_UARTEx_RxEventCallback+0x45c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d03b      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a37      	ldr	r2, [pc, #220]	; (80036f0 <HAL_UARTEx_RxEventCallback+0x460>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d036      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003616:	4b31      	ldr	r3, [pc, #196]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a36      	ldr	r2, [pc, #216]	; (80036f4 <HAL_UARTEx_RxEventCallback+0x464>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d031      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003620:	4b2e      	ldr	r3, [pc, #184]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a34      	ldr	r2, [pc, #208]	; (80036f8 <HAL_UARTEx_RxEventCallback+0x468>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d02c      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 800362a:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a33      	ldr	r2, [pc, #204]	; (80036fc <HAL_UARTEx_RxEventCallback+0x46c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d027      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003634:	4b29      	ldr	r3, [pc, #164]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a31      	ldr	r2, [pc, #196]	; (8003700 <HAL_UARTEx_RxEventCallback+0x470>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d022      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 800363e:	4b27      	ldr	r3, [pc, #156]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a30      	ldr	r2, [pc, #192]	; (8003704 <HAL_UARTEx_RxEventCallback+0x474>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d01d      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003648:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2e      	ldr	r2, [pc, #184]	; (8003708 <HAL_UARTEx_RxEventCallback+0x478>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d018      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2d      	ldr	r2, [pc, #180]	; (800370c <HAL_UARTEx_RxEventCallback+0x47c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 800365c:	4b1f      	ldr	r3, [pc, #124]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <HAL_UARTEx_RxEventCallback+0x480>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00e      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <HAL_UARTEx_RxEventCallback+0x484>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d009      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a28      	ldr	r2, [pc, #160]	; (8003718 <HAL_UARTEx_RxEventCallback+0x488>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_UARTEx_RxEventCallback+0x3f4>
 800367a:	4b18      	ldr	r3, [pc, #96]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a27      	ldr	r2, [pc, #156]	; (800371c <HAL_UARTEx_RxEventCallback+0x48c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d108      	bne.n	8003696 <HAL_UARTEx_RxEventCallback+0x406>
 8003684:	4b15      	ldr	r3, [pc, #84]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4b14      	ldr	r3, [pc, #80]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0208 	bic.w	r2, r2, #8
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e008      	b.n	80036a8 <HAL_UARTEx_RxEventCallback+0x418>
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0204 	bic.w	r2, r2, #4
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bdb0      	pop	{r4, r5, r7, pc}
 80036b0:	24000af0 	.word	0x24000af0
 80036b4:	24000ad8 	.word	0x24000ad8
 80036b8:	24000adc 	.word	0x24000adc
 80036bc:	24000ae0 	.word	0x24000ae0
 80036c0:	24000ae4 	.word	0x24000ae4
 80036c4:	58021000 	.word	0x58021000
 80036c8:	58020400 	.word	0x58020400
 80036cc:	08015114 	.word	0x08015114
 80036d0:	240013c0 	.word	0x240013c0
 80036d4:	08015124 	.word	0x08015124
 80036d8:	24000b04 	.word	0x24000b04
 80036dc:	24001348 	.word	0x24001348
 80036e0:	40020010 	.word	0x40020010
 80036e4:	40020028 	.word	0x40020028
 80036e8:	40020040 	.word	0x40020040
 80036ec:	40020058 	.word	0x40020058
 80036f0:	40020070 	.word	0x40020070
 80036f4:	40020088 	.word	0x40020088
 80036f8:	400200a0 	.word	0x400200a0
 80036fc:	400200b8 	.word	0x400200b8
 8003700:	40020410 	.word	0x40020410
 8003704:	40020428 	.word	0x40020428
 8003708:	40020440 	.word	0x40020440
 800370c:	40020458 	.word	0x40020458
 8003710:	40020470 	.word	0x40020470
 8003714:	40020488 	.word	0x40020488
 8003718:	400204a0 	.word	0x400204a0
 800371c:	400204b8 	.word	0x400204b8

08003720 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4ac9      	ldr	r2, [pc, #804]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800372c:	4293      	cmp	r3, r2
 800372e:	f040 80bc 	bne.w	80038aa <HAL_TIM_PeriodElapsedCallback+0x18a>
		encoderJ1.AMT21_Read();
 8003732:	48c8      	ldr	r0, [pc, #800]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003734:	f7fc ffc7 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003738:	48c6      	ldr	r0, [pc, #792]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800373a:	f7fc fff3 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	4bc5      	ldr	r3, [pc, #788]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003744:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8003746:	4bc4      	ldr	r3, [pc, #784]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d110      	bne.n	8003770 <HAL_TIM_PeriodElapsedCallback+0x50>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 800374e:	48c1      	ldr	r0, [pc, #772]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003750:	f7fd f84c 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003754:	4603      	mov	r3, r0
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800375e:	ed9f 5bba 	vldr	d5, [pc, #744]	; 8003a48 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003762:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003766:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800376a:	4bbc      	ldr	r3, [pc, #752]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800376c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003770:	48bb      	ldr	r0, [pc, #748]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003772:	f7fc ffa8 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003776:	48ba      	ldr	r0, [pc, #744]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003778:	f7fc ffd4 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	4bb8      	ldr	r3, [pc, #736]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003782:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 8003784:	4bb7      	ldr	r3, [pc, #732]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d112      	bne.n	80037b2 <HAL_TIM_PeriodElapsedCallback+0x92>
			encoderJ2.unwarp();
 800378c:	48b4      	ldr	r0, [pc, #720]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800378e:	f7fd f84f 	bl	8000830 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8003792:	48b3      	ldr	r0, [pc, #716]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003794:	f7fd f8ab 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 8003798:	ee07 0a90 	vmov	s15, r0
 800379c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80037a0:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 8003a48 <HAL_TIM_PeriodElapsedCallback+0x328>
 80037a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80037a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037ac:	4bae      	ldr	r3, [pc, #696]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80037ae:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 80037b2:	48ae      	ldr	r0, [pc, #696]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80037b4:	f7fc ff87 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80037b8:	48ac      	ldr	r0, [pc, #688]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80037ba:	f7fc ffb3 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	4bab      	ldr	r3, [pc, #684]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80037c4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80037c6:	4baa      	ldr	r3, [pc, #680]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d110      	bne.n	80037f0 <HAL_TIM_PeriodElapsedCallback+0xd0>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 80037ce:	48a7      	ldr	r0, [pc, #668]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80037d0:	f7fd f80c 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80037d4:	4603      	mov	r3, r0
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80037de:	ed9f 5b9a 	vldr	d5, [pc, #616]	; 8003a48 <HAL_TIM_PeriodElapsedCallback+0x328>
 80037e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80037e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037ea:	4ba2      	ldr	r3, [pc, #648]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80037ec:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 80037f0:	48a1      	ldr	r0, [pc, #644]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80037f2:	f7fc ff68 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80037f6:	48a0      	ldr	r0, [pc, #640]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80037f8:	f7fc ff94 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	4b9e      	ldr	r3, [pc, #632]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003802:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003804:	4b9d      	ldr	r3, [pc, #628]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d110      	bne.n	800382e <HAL_TIM_PeriodElapsedCallback+0x10e>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609;
 800380c:	489a      	ldr	r0, [pc, #616]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800380e:	f7fc ffed 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003812:	4603      	mov	r3, r0
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800381c:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8003a48 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003820:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003824:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003828:	4b95      	ldr	r3, [pc, #596]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800382a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//			stepperJ1.StepperSetFrequency(dq1);
//			stepperJ2.StepperSetFrequency(dq2*10.0);
//			stepperJ3.StepperSetFrequency(dq3);
//			stepperJ4.StepperSetFrequency(dq4);

		fcb_X.UpdateIVK(fcb_joint1.Encoder, 0.0, fcb_joint3.Encoder, 0.0, dx,
 800382e:	4b8b      	ldr	r3, [pc, #556]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003830:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003834:	4b8f      	ldr	r3, [pc, #572]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003836:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800383a:	4b92      	ldr	r3, [pc, #584]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b25b      	sxtb	r3, r3
 8003840:	ee06 3a90 	vmov	s13, r3
 8003844:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003848:	4b8f      	ldr	r3, [pc, #572]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b25b      	sxtb	r3, r3
 800384e:	ee06 3a10 	vmov	s12, r3
 8003852:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003856:	4b8d      	ldr	r3, [pc, #564]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	b25b      	sxtb	r3, r3
 800385c:	ee05 3a90 	vmov	s11, r3
 8003860:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003864:	eddf 3a8a 	vldr	s7, [pc, #552]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x370>
 8003868:	eeb0 3a65 	vmov.f32	s6, s11
 800386c:	eef0 2a46 	vmov.f32	s5, s12
 8003870:	eeb0 2a66 	vmov.f32	s4, s13
 8003874:	eddf 1a86 	vldr	s3, [pc, #536]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x370>
 8003878:	eeb0 1a47 	vmov.f32	s2, s14
 800387c:	eddf 0a84 	vldr	s1, [pc, #528]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x370>
 8003880:	eeb0 0a67 	vmov.f32	s0, s15
 8003884:	4883      	ldr	r0, [pc, #524]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8003886:	f7fd f94b 	bl	8000b20 <_ZN10RobotJoint9UpdateIVKEffffffff>
				dy, dz, 0.0);

		stepperJ1.StepperOpenLoopSpeedM(fcb_X.w_q1);
 800388a:	4b82      	ldr	r3, [pc, #520]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800388c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003890:	eeb0 0a67 	vmov.f32	s0, s15
 8003894:	4880      	ldr	r0, [pc, #512]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8003896:	f7fe fd7b 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
		stepperJ3.StepperOpenLoopSpeedM(fcb_X.w_q3);
 800389a:	4b7e      	ldr	r3, [pc, #504]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800389c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80038a0:	eeb0 0a67 	vmov.f32	s0, s15
 80038a4:	487d      	ldr	r0, [pc, #500]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80038a6:	f7fe fd73 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
//					stepperJ4.StepperOpenLoopSpeed(u_q4/num);

	}

	if (htim == &htim16) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a7c      	ldr	r2, [pc, #496]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	f040 8101 	bne.w	8003ab6 <HAL_TIM_PeriodElapsedCallback+0x396>
		encoderJ1.AMT21_Read();
 80038b4:	4867      	ldr	r0, [pc, #412]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80038b6:	f7fc ff06 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80038ba:	4866      	ldr	r0, [pc, #408]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80038bc:	f7fc ff32 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b64      	ldr	r3, [pc, #400]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038c6:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80038c8:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d110      	bne.n	80038f2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 80038d0:	4860      	ldr	r0, [pc, #384]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80038d2:	f7fc ff8b 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80038d6:	4603      	mov	r3, r0
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038e0:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8003a48 <HAL_TIM_PeriodElapsedCallback+0x328>
 80038e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038ec:	4b5b      	ldr	r3, [pc, #364]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038ee:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 80038f2:	485b      	ldr	r0, [pc, #364]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80038f4:	f7fc fee7 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 80038f8:	4859      	ldr	r0, [pc, #356]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80038fa:	f7fc ff13 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80038fe:	4603      	mov	r3, r0
 8003900:	461a      	mov	r2, r3
 8003902:	4b58      	ldr	r3, [pc, #352]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003904:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 8003906:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d112      	bne.n	8003934 <HAL_TIM_PeriodElapsedCallback+0x214>
			encoderJ2.unwarp();
 800390e:	4854      	ldr	r0, [pc, #336]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003910:	f7fc ff8e 	bl	8000830 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8003914:	4852      	ldr	r0, [pc, #328]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003916:	f7fc ffea 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 800391a:	ee07 0a90 	vmov	s15, r0
 800391e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003922:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8003a48 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003926:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800392a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800392e:	4b4e      	ldr	r3, [pc, #312]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003930:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 8003934:	484d      	ldr	r0, [pc, #308]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003936:	f7fc fec6 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 800393a:	484c      	ldr	r0, [pc, #304]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800393c:	f7fc fef2 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003946:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003948:	4b49      	ldr	r3, [pc, #292]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d110      	bne.n	8003972 <HAL_TIM_PeriodElapsedCallback+0x252>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8003950:	4846      	ldr	r0, [pc, #280]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003952:	f7fc ff4b 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003956:	4603      	mov	r3, r0
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003960:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8003a48 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003964:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003968:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800396c:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800396e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003972:	4841      	ldr	r0, [pc, #260]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003974:	f7fc fea7 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003978:	483f      	ldr	r0, [pc, #252]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800397a:	f7fc fed3 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800397e:	4603      	mov	r3, r0
 8003980:	461a      	mov	r2, r3
 8003982:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003984:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003986:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d110      	bne.n	80039b0 <HAL_TIM_PeriodElapsedCallback+0x290>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609;
 800398e:	483a      	ldr	r0, [pc, #232]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003990:	f7fc ff2c 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003994:	4603      	mov	r3, r0
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800399e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8003a48 <HAL_TIM_PeriodElapsedCallback+0x328>
 80039a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80039a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80039aa:	4b35      	ldr	r3, [pc, #212]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80039ac:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//		current_angle = chessSPIEncoder.getRawRotation();
//		current_angle_map = chessSPIEncoder.read2angle(current_angle);
//		angle = current_angle_map - zero_position_map;
//		angle = chessSPIEncoder.normalize(angle);

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 80039b0:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80039b2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80039b6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ba:	4828      	ldr	r0, [pc, #160]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80039bc:	f7fd fafe 	bl	8000fbc <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80039c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039c6:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80039c8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 80039cc:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80039ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039d2:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80039d4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint2.KalmanFillter(fcb_joint2.Encoder);
 80039d8:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80039da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80039de:	eeb0 0a67 	vmov.f32	s0, s15
 80039e2:	4821      	ldr	r0, [pc, #132]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80039e4:	f7fd faea 	bl	8000fbc <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint2.kalman_pos = fcb_joint2.X11;
 80039e8:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80039ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80039f0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint2.kalman_velo = fcb_joint2.X21;
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80039f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039fa:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80039fc:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003a00:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003a02:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003a06:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0a:	481a      	ldr	r0, [pc, #104]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003a0c:	f7fd fad6 	bl	8000fbc <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003a10:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003a12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a16:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003a18:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003a1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a22:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003a24:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		if (State_FIN) {
 8003a28:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d041      	beq.n	8003ab6 <HAL_TIM_PeriodElapsedCallback+0x396>
			Balloon++;
 8003a32:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3301      	adds	r3, #1
 8003a38:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003a3a:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 8003a3c:	f7ff f86c 	bl	8002b18 <_Z20Update_State_Machinev>
 8003a40:	e034      	b.n	8003aac <HAL_TIM_PeriodElapsedCallback+0x38c>
 8003a42:	bf00      	nop
 8003a44:	f3af 8000 	nop.w
 8003a48:	645a1cac 	.word	0x645a1cac
 8003a4c:	4004df3b 	.word	0x4004df3b
 8003a50:	24000ed0 	.word	0x24000ed0
 8003a54:	2400042c 	.word	0x2400042c
 8003a58:	24000ab0 	.word	0x24000ab0
 8003a5c:	2400053c 	.word	0x2400053c
 8003a60:	24000448 	.word	0x24000448
 8003a64:	24000ab1 	.word	0x24000ab1
 8003a68:	24000620 	.word	0x24000620
 8003a6c:	24000464 	.word	0x24000464
 8003a70:	24000ab2 	.word	0x24000ab2
 8003a74:	24000704 	.word	0x24000704
 8003a78:	24000480 	.word	0x24000480
 8003a7c:	24000ab3 	.word	0x24000ab3
 8003a80:	240007e8 	.word	0x240007e8
 8003a84:	24000ad4 	.word	0x24000ad4
 8003a88:	24000ad5 	.word	0x24000ad5
 8003a8c:	24000ad6 	.word	0x24000ad6
 8003a90:	00000000 	.word	0x00000000
 8003a94:	240009b0 	.word	0x240009b0
 8003a98:	2400049c 	.word	0x2400049c
 8003a9c:	240004ec 	.word	0x240004ec
 8003aa0:	24001130 	.word	0x24001130
 8003aa4:	24000ac8 	.word	0x24000ac8
 8003aa8:	24000bcc 	.word	0x24000bcc
			Update_State_Machine();
 8003aac:	f7ff f834 	bl	8002b18 <_Z20Update_State_Machinev>
			State_FIN = false;
 8003ab0:	4bde      	ldr	r3, [pc, #888]	; (8003e2c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
		}

	}

	if (htim == &htim14) {
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4add      	ldr	r2, [pc, #884]	; (8003e30 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	f040 8514 	bne.w	80044e8 <HAL_TIM_PeriodElapsedCallback+0xdc8>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 8003ac0:	4bdc      	ldr	r3, [pc, #880]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003ac2:	ed93 7a00 	vldr	s14, [r3]
 8003ac6:	4bdb      	ldr	r3, [pc, #876]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float t3 = t * t * t;
 8003ad4:	4bd7      	ldr	r3, [pc, #860]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003ad6:	ed93 7a00 	vldr	s14, [r3]
 8003ada:	4bd6      	ldr	r3, [pc, #856]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003adc:	edd3 7a00 	vldr	s15, [r3]
 8003ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ae4:	4bd3      	ldr	r3, [pc, #844]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003ae6:	edd3 7a00 	vldr	s15, [r3]
 8003aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aee:	edc7 7a08 	vstr	s15, [r7, #32]
		float t4 = t * t * t * t;
 8003af2:	4bd0      	ldr	r3, [pc, #832]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003af4:	ed93 7a00 	vldr	s14, [r3]
 8003af8:	4bce      	ldr	r3, [pc, #824]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b02:	4bcc      	ldr	r3, [pc, #816]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b04:	edd3 7a00 	vldr	s15, [r3]
 8003b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b0c:	4bc9      	ldr	r3, [pc, #804]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b16:	edc7 7a07 	vstr	s15, [r7, #28]
		float t5 = t * t * t * t * t;
 8003b1a:	4bc6      	ldr	r3, [pc, #792]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b1c:	ed93 7a00 	vldr	s14, [r3]
 8003b20:	4bc4      	ldr	r3, [pc, #784]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b22:	edd3 7a00 	vldr	s15, [r3]
 8003b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b2a:	4bc2      	ldr	r3, [pc, #776]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b2c:	edd3 7a00 	vldr	s15, [r3]
 8003b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b34:	4bbf      	ldr	r3, [pc, #764]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b3e:	4bbd      	ldr	r3, [pc, #756]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b40:	edd3 7a00 	vldr	s15, [r3]
 8003b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b48:	edc7 7a06 	vstr	s15, [r7, #24]
////	fcb_joint1.Goal_Position = fcb_X.q1;
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;

		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003b4c:	4bba      	ldr	r3, [pc, #744]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b4e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003b52:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b56:	4bb8      	ldr	r3, [pc, #736]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b58:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003b5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b60:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003b64:	4bb3      	ldr	r3, [pc, #716]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b6e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b72:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint1.C3 * t2) + (4.0 * fcb_joint1.C4 * t3)
 8003b76:	4bb0      	ldr	r3, [pc, #704]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b78:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003b7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b80:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003b84:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b90:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b94:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b98:	4ba7      	ldr	r3, [pc, #668]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b9a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003b9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ba2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ba6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003baa:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bb2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bb6:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint1.C5 * t4);
 8003bba:	4b9f      	ldr	r3, [pc, #636]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003bbc:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003bc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bc4:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003bc8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bd4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003bdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003be0:	4b95      	ldr	r3, [pc, #596]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003be2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003be6:	4b94      	ldr	r3, [pc, #592]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003be8:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003bec:	4b92      	ldr	r3, [pc, #584]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003bee:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003bf2:	4b90      	ldr	r3, [pc, #576]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C2 * t2) + (fcb_joint1.C3 * t3)
 8003c00:	4b8d      	ldr	r3, [pc, #564]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c02:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003c06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c12:	4b89      	ldr	r3, [pc, #548]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c14:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003c18:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c20:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C4 * t4) + (fcb_joint1.C5 * t5));
 8003c24:	4b84      	ldr	r3, [pc, #528]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c26:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003c2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c36:	4b80      	ldr	r3, [pc, #512]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c38:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003c3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c44:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003c48:	4b7b      	ldr	r3, [pc, #492]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c4a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003c4e:	4b7b      	ldr	r3, [pc, #492]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c50:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003c54:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c58:	4b78      	ldr	r3, [pc, #480]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c5a:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003c5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c62:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003c66:	4b73      	ldr	r3, [pc, #460]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003c68:	edd3 7a00 	vldr	s15, [r3]
 8003c6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c70:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c74:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint2.C3 * t2) + (4.0 * fcb_joint2.C4 * t3)
 8003c78:	4b70      	ldr	r3, [pc, #448]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c7a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003c7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c82:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003c86:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003c8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c9a:	4b68      	ldr	r3, [pc, #416]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c9c:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ca4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ca8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cac:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cb8:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint2.C5 * t4);
 8003cbc:	4b5f      	ldr	r3, [pc, #380]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003cbe:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cc6:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003cca:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cce:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cd6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003cde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003ce2:	4b56      	ldr	r3, [pc, #344]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003ce4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003ce8:	4b54      	ldr	r3, [pc, #336]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003cea:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003cee:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003cf0:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003cf4:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003cf6:	edd3 7a00 	vldr	s15, [r3]
 8003cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C2 * t2) + (fcb_joint2.C3 * t3)
 8003d02:	4b4e      	ldr	r3, [pc, #312]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d04:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003d08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d14:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d16:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003d1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d22:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C4 * t4) + (fcb_joint2.C5 * t5));
 8003d26:	4b45      	ldr	r3, [pc, #276]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d28:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003d2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d38:	4b40      	ldr	r3, [pc, #256]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d3a:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003d3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d46:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003d4a:	4b3c      	ldr	r3, [pc, #240]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d4c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003d50:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003d52:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003d56:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d5a:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003d5c:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d64:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003d68:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003d6a:	edd3 7a00 	vldr	s15, [r3]
 8003d6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d72:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d76:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint3.C3 * t2) + (4.0 * fcb_joint3.C4 * t3)
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003d7c:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003d80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d84:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003d88:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003d8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d98:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003d9e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003da2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003da6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003daa:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003dae:	edd7 7a08 	vldr	s15, [r7, #32]
 8003db2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003db6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dba:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint3.C5 * t4);
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003dc0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003dc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dc8:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003dcc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003dd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dd8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ddc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003de0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003de4:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003de6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003dec:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003df2:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003df8:	edd3 7a00 	vldr	s15, [r3]
 8003dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e00:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C2 * t2) + (fcb_joint3.C3 * t3)
 8003e04:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003e06:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003e0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003e18:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003e1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e28:	e00c      	b.n	8003e44 <HAL_TIM_PeriodElapsedCallback+0x724>
 8003e2a:	bf00      	nop
 8003e2c:	24000ac8 	.word	0x24000ac8
 8003e30:	24001098 	.word	0x24001098
 8003e34:	24000bd0 	.word	0x24000bd0
 8003e38:	2400053c 	.word	0x2400053c
 8003e3c:	24000620 	.word	0x24000620
 8003e40:	24000704 	.word	0x24000704
				+ (fcb_joint3.C4 * t4) + (fcb_joint3.C5 * t5));
 8003e44:	4bc9      	ldr	r3, [pc, #804]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003e46:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003e4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e56:	4bc5      	ldr	r3, [pc, #788]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003e58:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003e5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e64:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003e68:	4bc0      	ldr	r3, [pc, #768]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003e6a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003e6e:	4bc0      	ldr	r3, [pc, #768]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e70:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003e74:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e78:	4bbd      	ldr	r3, [pc, #756]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e7a:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003e7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e82:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003e86:	4bbb      	ldr	r3, [pc, #748]	; (8004174 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e90:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e94:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint4.C3 * t2) + (4.0 * fcb_joint4.C4 * t3)
 8003e98:	4bb5      	ldr	r3, [pc, #724]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e9a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003e9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ea2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ea6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003eaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003eae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eb2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003eb6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003eba:	4bad      	ldr	r3, [pc, #692]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003ebc:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003ec0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ec4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ec8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ecc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ed0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ed4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ed8:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint4.C5 * t4);
 8003edc:	4ba4      	ldr	r3, [pc, #656]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003ede:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003ee2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ee6:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003eea:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003eee:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ef2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ef6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003efa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003efe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003f02:	4b9b      	ldr	r3, [pc, #620]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003f04:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 8003f08:	4b99      	ldr	r3, [pc, #612]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003f0a:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003f0e:	4b98      	ldr	r3, [pc, #608]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003f10:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003f14:	4b97      	ldr	r3, [pc, #604]	; (8004174 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003f16:	edd3 7a00 	vldr	s15, [r3]
 8003f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f1e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C2 * t2) + (fcb_joint4.C3 * t3)
 8003f22:	4b93      	ldr	r3, [pc, #588]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003f24:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003f28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f34:	4b8e      	ldr	r3, [pc, #568]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003f36:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003f3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f42:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C4 * t4) + (fcb_joint4.C5 * t5));
 8003f46:	4b8a      	ldr	r3, [pc, #552]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003f48:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003f4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f58:	4b85      	ldr	r3, [pc, #532]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003f5a:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003f5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f66:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 8003f6a:	4b81      	ldr	r3, [pc, #516]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003f6c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;

		fcb_joint1.Kp_p = 0.4;
 8003f70:	4b81      	ldr	r3, [pc, #516]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f72:	4a82      	ldr	r2, [pc, #520]	; (800417c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003f74:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8003f76:	4b80      	ldr	r3, [pc, #512]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 8003f7e:	4b7e      	ldr	r3, [pc, #504]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint2.Kp_p = 0.03;
 8003f86:	4b7e      	ldr	r3, [pc, #504]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003f88:	4a7e      	ldr	r2, [pc, #504]	; (8004184 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003f8a:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint2.Ki_p = 0.0;
 8003f8c:	4b7c      	ldr	r3, [pc, #496]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint2.Kd_p = 0.0;
 8003f94:	4b7a      	ldr	r3, [pc, #488]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint3.Kp_p = 0.15;
 8003f9c:	4b73      	ldr	r3, [pc, #460]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f9e:	4a7a      	ldr	r2, [pc, #488]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003fa0:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8003fa2:	4b72      	ldr	r3, [pc, #456]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 8003faa:	4b70      	ldr	r3, [pc, #448]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	669a      	str	r2, [r3, #104]	; 0x68
//		fcb_joint1.Kd_p = 0.0;
//		fcb_joint3.Kp_p = 0.0;
//		fcb_joint3.Ki_p = 0.0;
//		fcb_joint3.Kd_p = 0.0;

		fcb_joint1.Kp_v = 0.0; // 3.2
 8003fb2:	4b71      	ldr	r3, [pc, #452]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 8003fba:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8003fc2:	4b6d      	ldr	r3, [pc, #436]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint2.Kp_v = 0.0; // 3.2
 8003fca:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint2.Ki_v = 0.0;
 8003fd2:	4b6b      	ldr	r3, [pc, #428]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint2.Kd_v = 0.0;
 8003fda:	4b69      	ldr	r3, [pc, #420]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint3.Kp_v = 0.0; // 3.2
 8003fe2:	4b62      	ldr	r3, [pc, #392]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8003fea:	4b60      	ldr	r3, [pc, #384]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 8003ff2:	4b5e      	ldr	r3, [pc, #376]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 8003ffa:	4b5f      	ldr	r3, [pc, #380]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003ffc:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004000:	4b5d      	ldr	r3, [pc, #372]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004002:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800400a:	4b5b      	ldr	r3, [pc, #364]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800400c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 8004010:	4b56      	ldr	r3, [pc, #344]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8004012:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004016:	4b55      	ldr	r3, [pc, #340]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8004018:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800401c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004020:	4b52      	ldr	r3, [pc, #328]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8004022:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8004026:	4b54      	ldr	r3, [pc, #336]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004028:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800402c:	4b52      	ldr	r3, [pc, #328]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800402e:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004036:	4b50      	ldr	r3, [pc, #320]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004038:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 800403c:	4b4b      	ldr	r3, [pc, #300]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 800403e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004042:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8004044:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800404c:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 800404e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint2.Error_p = fcb_joint2.Goal_Position - fcb_joint2.kalman_pos;
 8004052:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8004054:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004058:	4b49      	ldr	r3, [pc, #292]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 800405a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800405e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004062:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8004064:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint2.Error_v = fcb_joint2.Goal_Velocity - fcb_joint2.kalman_velo;
 8004068:	4b45      	ldr	r3, [pc, #276]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 800406a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800406e:	4b44      	ldr	r3, [pc, #272]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8004070:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004078:	4b41      	ldr	r3, [pc, #260]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 800407a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 800407e:	4b3e      	ldr	r3, [pc, #248]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004080:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8004084:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004086:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800408a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800408e:	4b3a      	ldr	r3, [pc, #232]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004090:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8004094:	4b35      	ldr	r3, [pc, #212]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8004096:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800409a:	4b34      	ldr	r3, [pc, #208]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 800409c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80040a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040a4:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 80040a6:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 80040aa:	4b33      	ldr	r3, [pc, #204]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 80040ac:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80040b0:	4b31      	ldr	r3, [pc, #196]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 80040b2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80040b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 80040bc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 80040c0:	4b2a      	ldr	r3, [pc, #168]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 80040c2:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 80040c8:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80040cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d0:	4b26      	ldr	r3, [pc, #152]	; (800416c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 80040d2:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint2.Sum_Error_p += fcb_joint2.Error_p;
 80040d6:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80040d8:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80040dc:	4b28      	ldr	r3, [pc, #160]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80040de:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80040e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e6:	4b26      	ldr	r3, [pc, #152]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80040e8:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint2.Sum_Error_v += fcb_joint2.Error_v;
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80040ee:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80040f2:	4b23      	ldr	r3, [pc, #140]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80040f4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80040f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fc:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80040fe:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 8004102:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004104:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint1.Kp_p * fcb_joint1.Error_p)
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800410a:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800410e:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004110:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004118:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p)
 800411c:	4b16      	ldr	r3, [pc, #88]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800411e:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004124:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800412c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p))
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004132:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004138:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 800413c:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800413e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004142:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800414a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kp_v * fcb_joint1.Error_v)
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004150:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004156:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800415a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800415e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v)
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004164:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8004168:	e010      	b.n	800418c <HAL_TIM_PeriodElapsedCallback+0xa6c>
 800416a:	bf00      	nop
 800416c:	24000704 	.word	0x24000704
 8004170:	240007e8 	.word	0x240007e8
 8004174:	24000bd0 	.word	0x24000bd0
 8004178:	2400053c 	.word	0x2400053c
 800417c:	3ecccccd 	.word	0x3ecccccd
 8004180:	24000620 	.word	0x24000620
 8004184:	3cf5c28f 	.word	0x3cf5c28f
 8004188:	3e19999a 	.word	0x3e19999a
 800418c:	4b65      	ldr	r3, [pc, #404]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800418e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004196:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v));
 800419a:	4b62      	ldr	r3, [pc, #392]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800419c:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80041a0:	4b60      	ldr	r3, [pc, #384]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80041a2:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80041a6:	4b5f      	ldr	r3, [pc, #380]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80041a8:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80041ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041b4:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 80041b8:	4b5a      	ldr	r3, [pc, #360]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80041ba:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 80041be:	4b5a      	ldr	r3, [pc, #360]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041c0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint2.Kp_p * fcb_joint2.Error_p)
 80041c4:	4b58      	ldr	r3, [pc, #352]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041c6:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80041ca:	4b57      	ldr	r3, [pc, #348]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041cc:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80041d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041d4:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p)
 80041d8:	4b53      	ldr	r3, [pc, #332]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041da:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80041de:	4b52      	ldr	r3, [pc, #328]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041e0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80041e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041e8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p))
 80041ec:	4b4e      	ldr	r3, [pc, #312]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041ee:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80041f2:	4b4d      	ldr	r3, [pc, #308]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041f4:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80041f8:	4b4b      	ldr	r3, [pc, #300]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041fa:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80041fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004206:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kp_v * fcb_joint2.Error_v)
 800420a:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800420c:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8004210:	4b45      	ldr	r3, [pc, #276]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004212:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800421a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v)
 800421e:	4b42      	ldr	r3, [pc, #264]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004220:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004226:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800422a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800422e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_v * (fcb_joint2.Error_v - fcb_joint2.Old_v));
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004234:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8004238:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800423a:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 800423e:	4b3a      	ldr	r3, [pc, #232]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004240:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004244:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800424c:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8004250:	4b35      	ldr	r3, [pc, #212]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004252:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 8004256:	4b35      	ldr	r3, [pc, #212]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004258:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint3.Kp_p * fcb_joint3.Error_p)
 800425c:	4b33      	ldr	r3, [pc, #204]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800425e:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8004262:	4b32      	ldr	r3, [pc, #200]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004264:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800426c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p)
 8004270:	4b2e      	ldr	r3, [pc, #184]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004272:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004276:	4b2d      	ldr	r3, [pc, #180]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004278:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800427c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004280:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p))
 8004284:	4b29      	ldr	r3, [pc, #164]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004286:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800428a:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800428c:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8004290:	4b26      	ldr	r3, [pc, #152]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004292:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004296:	ee76 7a67 	vsub.f32	s15, s12, s15
 800429a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800429e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kp_v * fcb_joint3.Error_v)
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80042a4:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80042a8:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80042aa:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80042ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042b2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v)
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80042b8:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80042be:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80042c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042c6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v));
 80042ca:	4b18      	ldr	r3, [pc, #96]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80042cc:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80042d0:	4b16      	ldr	r3, [pc, #88]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80042d2:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80042d8:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80042dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80042e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042e4:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 80042e8:	4b10      	ldr	r3, [pc, #64]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80042ea:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
		if (joint13_on) {
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d025      	beq.n	8004344 <HAL_TIM_PeriodElapsedCallback+0xc24>
			stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80042fa:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80042fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004302:	480c      	ldr	r0, [pc, #48]	; (8004334 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 8004304:	f7fe f844 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(0.0);
 8004308:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004340 <HAL_TIM_PeriodElapsedCallback+0xc20>
 800430c:	480a      	ldr	r0, [pc, #40]	; (8004338 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800430e:	f7fe f83f 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004314:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004318:	eeb0 0a67 	vmov.f32	s0, s15
 800431c:	4807      	ldr	r0, [pc, #28]	; (800433c <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 800431e:	f7fe f837 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
 8004322:	e021      	b.n	8004368 <HAL_TIM_PeriodElapsedCallback+0xc48>
 8004324:	2400053c 	.word	0x2400053c
 8004328:	24000620 	.word	0x24000620
 800432c:	24000704 	.word	0x24000704
 8004330:	24000b1e 	.word	0x24000b1e
 8004334:	2400049c 	.word	0x2400049c
 8004338:	240004c4 	.word	0x240004c4
 800433c:	240004ec 	.word	0x240004ec
 8004340:	00000000 	.word	0x00000000
		} else {
			stepperJ1.StepperOpenLoopSpeedM(0.0);
 8004344:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8004340 <HAL_TIM_PeriodElapsedCallback+0xc20>
 8004348:	48ad      	ldr	r0, [pc, #692]	; (8004600 <HAL_TIM_PeriodElapsedCallback+0xee0>)
 800434a:	f7fe f821 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0.0);
 800434e:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8004604 <HAL_TIM_PeriodElapsedCallback+0xee4>
 8004352:	48ad      	ldr	r0, [pc, #692]	; (8004608 <HAL_TIM_PeriodElapsedCallback+0xee8>)
 8004354:	f7fe f81c 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 8004358:	4bac      	ldr	r3, [pc, #688]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800435a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800435e:	eeb0 0a67 	vmov.f32	s0, s15
 8004362:	48ab      	ldr	r0, [pc, #684]	; (8004610 <HAL_TIM_PeriodElapsedCallback+0xef0>)
 8004364:	f7fe f814 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
//
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(0);
		stepperJ4.StepperOpenLoopSpeedM(0);
 8004368:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 8004604 <HAL_TIM_PeriodElapsedCallback+0xee4>
 800436c:	48a9      	ldr	r0, [pc, #676]	; (8004614 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 800436e:	f7fe f80f 	bl	8002390 <_ZN7Stepper21StepperOpenLoopSpeedMEf>

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8004372:	4ba9      	ldr	r3, [pc, #676]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004376:	4aa8      	ldr	r2, [pc, #672]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004378:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint2.Old_Error_p = fcb_joint2.Error_p;
 800437a:	4ba4      	ldr	r3, [pc, #656]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800437c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437e:	4aa3      	ldr	r2, [pc, #652]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004380:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8004382:	4ba6      	ldr	r3, [pc, #664]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004386:	4aa5      	ldr	r2, [pc, #660]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004388:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 800438a:	4ba3      	ldr	r3, [pc, #652]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004390:	4aa1      	ldr	r2, [pc, #644]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004392:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint2.Old_Error_v = fcb_joint2.Error_v;
 8004396:	4b9d      	ldr	r3, [pc, #628]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439c:	4a9b      	ldr	r2, [pc, #620]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800439e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 80043a2:	4b9e      	ldr	r3, [pc, #632]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80043a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a8:	4a9c      	ldr	r2, [pc, #624]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80043aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 80043ae:	4b9a      	ldr	r3, [pc, #616]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043b4:	4a98      	ldr	r2, [pc, #608]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 80043ba:	4b98      	ldr	r3, [pc, #608]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80043bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043c0:	4a96      	ldr	r2, [pc, #600]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80043c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_p = fcb_joint2.kalman_pos;
 80043c6:	4b91      	ldr	r3, [pc, #580]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80043c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043cc:	4a8f      	ldr	r2, [pc, #572]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80043ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_v = fcb_joint2.kalman_velo;
 80043d2:	4b8e      	ldr	r3, [pc, #568]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80043d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043d8:	4a8c      	ldr	r2, [pc, #560]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80043da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 80043de:	4b8e      	ldr	r3, [pc, #568]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043e4:	4a8c      	ldr	r2, [pc, #560]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 80043ea:	4b8b      	ldr	r3, [pc, #556]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043f0:	4a8a      	ldr	r2, [pc, #552]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80043f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		t = t + sample_time_500;
 80043f6:	4b8a      	ldr	r3, [pc, #552]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80043f8:	ed93 7a00 	vldr	s14, [r3]
 80043fc:	4b89      	ldr	r3, [pc, #548]	; (8004624 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 80043fe:	edd3 7a00 	vldr	s15, [r3]
 8004402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004406:	4b86      	ldr	r3, [pc, #536]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8004408:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time) {
 800440c:	4b84      	ldr	r3, [pc, #528]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800440e:	ed93 7a00 	vldr	s14, [r3]
 8004412:	4b85      	ldr	r3, [pc, #532]	; (8004628 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 8004414:	edd3 7a00 	vldr	s15, [r3]
 8004418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800441c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004420:	bfac      	ite	ge
 8004422:	2301      	movge	r3, #1
 8004424:	2300      	movlt	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d05d      	beq.n	80044e8 <HAL_TIM_PeriodElapsedCallback+0xdc8>
			t = (int) 0;
 800442c:	4b7c      	ldr	r3, [pc, #496]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 8004434:	4b78      	ldr	r3, [pc, #480]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint2.Sum_Error_p = 0;
 800443e:	4b73      	ldr	r3, [pc, #460]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8004448:	4b74      	ldr	r3, [pc, #464]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			fcb_joint1.Sum_Error_v = 0;
 8004452:	4b71      	ldr	r3, [pc, #452]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint2.Sum_Error_v = 0;
 800445c:	4b6b      	ldr	r3, [pc, #428]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 8004466:	4b6d      	ldr	r3, [pc, #436]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

			fcb_joint1.Old_Error_p = 0;
 8004470:	4b69      	ldr	r3, [pc, #420]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint2.Old_Error_p = 0;
 8004478:	4b64      	ldr	r3, [pc, #400]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 8004480:	4b66      	ldr	r3, [pc, #408]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	67da      	str	r2, [r3, #124]	; 0x7c

			fcb_joint1.Old_Error_v = 0;
 8004488:	4b63      	ldr	r3, [pc, #396]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint2.Old_Error_v = 0;
 8004492:	4b5e      	ldr	r3, [pc, #376]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 800449c:	4b5f      	ldr	r3, [pc, #380]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			fcb_joint1.Old_p = 0;
 80044a6:	4b5c      	ldr	r3, [pc, #368]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint2.Old_p = 0;
 80044b0:	4b56      	ldr	r3, [pc, #344]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 80044ba:	4b58      	ldr	r3, [pc, #352]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

			fcb_joint1.Old_v = 0;
 80044c4:	4b54      	ldr	r3, [pc, #336]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint2.Old_v = 0;
 80044ce:	4b4f      	ldr	r3, [pc, #316]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 80044d8:	4b50      	ldr	r3, [pc, #320]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 80044e2:	4b52      	ldr	r3, [pc, #328]	; (800462c <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	701a      	strb	r2, [r3, #0]
		}

	}
	if (htim == &htim17) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a51      	ldr	r2, [pc, #324]	; (8004630 <HAL_TIM_PeriodElapsedCallback+0xf10>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	f040 8083 	bne.w	80045f8 <HAL_TIM_PeriodElapsedCallback+0xed8>
		uint8_t encoder_state[12] = { (uint8_t) (((int16_t) fcb_joint1.Encoder
 80044f2:	4b49      	ldr	r3, [pc, #292]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80044f4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80044f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044fc:	ee17 3a90 	vmov	r3, s15
 8004500:	b21b      	sxth	r3, r3
				>> 16) & 0xFF), (uint8_t) (((int16_t) fcb_joint1.Encoder >> 8)
 8004502:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int32_t) fcb_joint3.Encoder >> 16) & 0xFF),
				(uint8_t) (((int16_t) fcb_joint3.Encoder >> 8) & 0xFF),
				(uint8_t) (((int16_t) fcb_joint3.Encoder) & 0xFF),
				(uint8_t) (((int32_t) fcb_joint4.Encoder >> 16) & 0xFF),
				(uint8_t) (((int16_t) fcb_joint4.Encoder >> 8) & 0xFF),
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 8004504:	b2db      	uxtb	r3, r3
 8004506:	733b      	strb	r3, [r7, #12]
				>> 16) & 0xFF), (uint8_t) (((int16_t) fcb_joint1.Encoder >> 8)
 8004508:	4b43      	ldr	r3, [pc, #268]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800450a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800450e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004512:	ee17 3a90 	vmov	r3, s15
 8004516:	b21b      	sxth	r3, r3
 8004518:	121b      	asrs	r3, r3, #8
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 800451a:	b2db      	uxtb	r3, r3
 800451c:	737b      	strb	r3, [r7, #13]
				& 0xFF), (uint8_t) (((int16_t) fcb_joint1.Encoder) & 0xFF),
 800451e:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004520:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004528:	ee17 3a90 	vmov	r3, s15
 800452c:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 800452e:	b2db      	uxtb	r3, r3
 8004530:	73bb      	strb	r3, [r7, #14]
				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 16) & 0xFF),
 8004532:	4b36      	ldr	r3, [pc, #216]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004534:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800453c:	ee17 3a90 	vmov	r3, s15
 8004540:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 8004542:	b2db      	uxtb	r3, r3
 8004544:	73fb      	strb	r3, [r7, #15]
				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 8) & 0xFF),
 8004546:	4b31      	ldr	r3, [pc, #196]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004548:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800454c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004550:	ee17 3a90 	vmov	r3, s15
 8004554:	121b      	asrs	r3, r3, #8
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 8004556:	b2db      	uxtb	r3, r3
 8004558:	743b      	strb	r3, [r7, #16]
				(uint8_t) (((int32_t) fcb_joint2.Encoder) & 0xFF),
 800455a:	4b2c      	ldr	r3, [pc, #176]	; (800460c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800455c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004564:	edc7 7a00 	vstr	s15, [r7]
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	747b      	strb	r3, [r7, #17]
				(uint8_t) (((int32_t) fcb_joint3.Encoder >> 16) & 0xFF),
 800456e:	4b2b      	ldr	r3, [pc, #172]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004570:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004578:	ee17 3a90 	vmov	r3, s15
 800457c:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 800457e:	b2db      	uxtb	r3, r3
 8004580:	74bb      	strb	r3, [r7, #18]
				(uint8_t) (((int16_t) fcb_joint3.Encoder >> 8) & 0xFF),
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004584:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800458c:	ee17 3a90 	vmov	r3, s15
 8004590:	b21b      	sxth	r3, r3
 8004592:	121b      	asrs	r3, r3, #8
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 8004594:	b2db      	uxtb	r3, r3
 8004596:	74fb      	strb	r3, [r7, #19]
				(uint8_t) (((int16_t) fcb_joint3.Encoder) & 0xFF),
 8004598:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800459a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800459e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045a2:	ee17 3a90 	vmov	r3, s15
 80045a6:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	753b      	strb	r3, [r7, #20]
				(uint8_t) (((int32_t) fcb_joint4.Encoder >> 16) & 0xFF),
 80045ac:	4b21      	ldr	r3, [pc, #132]	; (8004634 <HAL_TIM_PeriodElapsedCallback+0xf14>)
 80045ae:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80045b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045b6:	ee17 3a90 	vmov	r3, s15
 80045ba:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	757b      	strb	r3, [r7, #21]
				(uint8_t) (((int16_t) fcb_joint4.Encoder >> 8) & 0xFF),
 80045c0:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <HAL_TIM_PeriodElapsedCallback+0xf14>)
 80045c2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80045c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045ca:	ee17 3a90 	vmov	r3, s15
 80045ce:	b21b      	sxth	r3, r3
 80045d0:	121b      	asrs	r3, r3, #8
				(uint8_t) (((int16_t) fcb_joint4.Encoder) & 0xFF), };
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	75bb      	strb	r3, [r7, #22]
 80045d6:	4b17      	ldr	r3, [pc, #92]	; (8004634 <HAL_TIM_PeriodElapsedCallback+0xf14>)
 80045d8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80045dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e0:	ee17 3a90 	vmov	r3, s15
 80045e4:	b21b      	sxth	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &encoder_state, 12);
 80045ea:	f107 030c 	add.w	r3, r7, #12
 80045ee:	220c      	movs	r2, #12
 80045f0:	4619      	mov	r1, r3
 80045f2:	4811      	ldr	r0, [pc, #68]	; (8004638 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 80045f4:	f00a fd46 	bl	800f084 <HAL_UART_Transmit_DMA>
	}
}
 80045f8:	bf00      	nop
 80045fa:	3728      	adds	r7, #40	; 0x28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	2400049c 	.word	0x2400049c
 8004604:	00000000 	.word	0x00000000
 8004608:	240004ec 	.word	0x240004ec
 800460c:	24000620 	.word	0x24000620
 8004610:	240004c4 	.word	0x240004c4
 8004614:	24000514 	.word	0x24000514
 8004618:	2400053c 	.word	0x2400053c
 800461c:	24000704 	.word	0x24000704
 8004620:	24000bd0 	.word	0x24000bd0
 8004624:	24000210 	.word	0x24000210
 8004628:	24000acc 	.word	0x24000acc
 800462c:	24000ac8 	.word	0x24000ac8
 8004630:	24000e84 	.word	0x24000e84
 8004634:	240007e8 	.word	0x240007e8
 8004638:	24001648 	.word	0x24001648
 800463c:	00000000 	.word	0x00000000

08004640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004644:	f002 fbe0 	bl	8006e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004648:	f000 fab8 	bl	8004bbc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800464c:	f7fd ff9c 	bl	8002588 <MX_GPIO_Init>
  MX_DMA_Init();
 8004650:	f7fd ff2a 	bl	80024a8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8004654:	f002 f876 	bl	8006744 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004658:	f001 f8e0 	bl	800581c <MX_TIM2_Init>
  MX_UART4_Init();
 800465c:	f001 ff84 	bl	8006568 <MX_UART4_Init>
  MX_TIM4_Init();
 8004660:	f001 f9cc 	bl	80059fc <MX_TIM4_Init>
  MX_SPI3_Init();
 8004664:	f000 fc5c 	bl	8004f20 <MX_SPI3_Init>
  MX_TIM1_Init();
 8004668:	f001 f82a 	bl	80056c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800466c:	f001 f94e 	bl	800590c <MX_TIM3_Init>
  MX_TIM5_Init();
 8004670:	f001 fa3c 	bl	8005aec <MX_TIM5_Init>
  MX_TIM15_Init();
 8004674:	f001 fbd0 	bl	8005e18 <MX_TIM15_Init>
  MX_CRC_Init();
 8004678:	f7fd fec6 	bl	8002408 <MX_CRC_Init>
  MX_UART7_Init();
 800467c:	f001 ffc8 	bl	8006610 <MX_UART7_Init>
  MX_TIM6_Init();
 8004680:	f001 fa82 	bl	8005b88 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004684:	f001 fab6 	bl	8005bf4 <MX_TIM7_Init>
  MX_TIM12_Init();
 8004688:	f001 fb44 	bl	8005d14 <MX_TIM12_Init>
  MX_TIM13_Init();
 800468c:	f001 fb7c 	bl	8005d88 <MX_TIM13_Init>
  MX_TIM14_Init();
 8004690:	f001 fb9e 	bl	8005dd0 <MX_TIM14_Init>
  MX_TIM16_Init();
 8004694:	f001 fc64 	bl	8005f60 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8004698:	f002 f808 	bl	80066ac <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800469c:	f001 fc86 	bl	8005fac <MX_TIM17_Init>
  MX_TIM8_Init();
 80046a0:	f001 fade 	bl	8005c60 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80046a4:	2214      	movs	r2, #20
 80046a6:	496a      	ldr	r1, [pc, #424]	; (8004850 <main+0x210>)
 80046a8:	486a      	ldr	r0, [pc, #424]	; (8004854 <main+0x214>)
 80046aa:	f00c fc48 	bl	8010f3e <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80046ae:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <main+0x218>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6a      	ldr	r2, [pc, #424]	; (800485c <main+0x21c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d04a      	beq.n	800474e <main+0x10e>
 80046b8:	4b67      	ldr	r3, [pc, #412]	; (8004858 <main+0x218>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a68      	ldr	r2, [pc, #416]	; (8004860 <main+0x220>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d045      	beq.n	800474e <main+0x10e>
 80046c2:	4b65      	ldr	r3, [pc, #404]	; (8004858 <main+0x218>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a67      	ldr	r2, [pc, #412]	; (8004864 <main+0x224>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d040      	beq.n	800474e <main+0x10e>
 80046cc:	4b62      	ldr	r3, [pc, #392]	; (8004858 <main+0x218>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a65      	ldr	r2, [pc, #404]	; (8004868 <main+0x228>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d03b      	beq.n	800474e <main+0x10e>
 80046d6:	4b60      	ldr	r3, [pc, #384]	; (8004858 <main+0x218>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a64      	ldr	r2, [pc, #400]	; (800486c <main+0x22c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d036      	beq.n	800474e <main+0x10e>
 80046e0:	4b5d      	ldr	r3, [pc, #372]	; (8004858 <main+0x218>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a62      	ldr	r2, [pc, #392]	; (8004870 <main+0x230>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d031      	beq.n	800474e <main+0x10e>
 80046ea:	4b5b      	ldr	r3, [pc, #364]	; (8004858 <main+0x218>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a61      	ldr	r2, [pc, #388]	; (8004874 <main+0x234>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d02c      	beq.n	800474e <main+0x10e>
 80046f4:	4b58      	ldr	r3, [pc, #352]	; (8004858 <main+0x218>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a5f      	ldr	r2, [pc, #380]	; (8004878 <main+0x238>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d027      	beq.n	800474e <main+0x10e>
 80046fe:	4b56      	ldr	r3, [pc, #344]	; (8004858 <main+0x218>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a5e      	ldr	r2, [pc, #376]	; (800487c <main+0x23c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d022      	beq.n	800474e <main+0x10e>
 8004708:	4b53      	ldr	r3, [pc, #332]	; (8004858 <main+0x218>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a5c      	ldr	r2, [pc, #368]	; (8004880 <main+0x240>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01d      	beq.n	800474e <main+0x10e>
 8004712:	4b51      	ldr	r3, [pc, #324]	; (8004858 <main+0x218>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a5b      	ldr	r2, [pc, #364]	; (8004884 <main+0x244>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d018      	beq.n	800474e <main+0x10e>
 800471c:	4b4e      	ldr	r3, [pc, #312]	; (8004858 <main+0x218>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a59      	ldr	r2, [pc, #356]	; (8004888 <main+0x248>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <main+0x10e>
 8004726:	4b4c      	ldr	r3, [pc, #304]	; (8004858 <main+0x218>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a58      	ldr	r2, [pc, #352]	; (800488c <main+0x24c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00e      	beq.n	800474e <main+0x10e>
 8004730:	4b49      	ldr	r3, [pc, #292]	; (8004858 <main+0x218>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a56      	ldr	r2, [pc, #344]	; (8004890 <main+0x250>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d009      	beq.n	800474e <main+0x10e>
 800473a:	4b47      	ldr	r3, [pc, #284]	; (8004858 <main+0x218>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a55      	ldr	r2, [pc, #340]	; (8004894 <main+0x254>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <main+0x10e>
 8004744:	4b44      	ldr	r3, [pc, #272]	; (8004858 <main+0x218>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a53      	ldr	r2, [pc, #332]	; (8004898 <main+0x258>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d108      	bne.n	8004760 <main+0x120>
 800474e:	4b42      	ldr	r3, [pc, #264]	; (8004858 <main+0x218>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4b40      	ldr	r3, [pc, #256]	; (8004858 <main+0x218>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0208 	bic.w	r2, r2, #8
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e007      	b.n	8004770 <main+0x130>
 8004760:	4b3d      	ldr	r3, [pc, #244]	; (8004858 <main+0x218>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b3c      	ldr	r3, [pc, #240]	; (8004858 <main+0x218>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0204 	bic.w	r2, r2, #4
 800476e:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8004770:	2201      	movs	r2, #1
 8004772:	2101      	movs	r1, #1
 8004774:	4849      	ldr	r0, [pc, #292]	; (800489c <main+0x25c>)
 8004776:	f005 ff0d 	bl	800a594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800477a:	2201      	movs	r2, #1
 800477c:	2102      	movs	r1, #2
 800477e:	4848      	ldr	r0, [pc, #288]	; (80048a0 <main+0x260>)
 8004780:	f005 ff08 	bl	800a594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004784:	2200      	movs	r2, #0
 8004786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800478a:	4844      	ldr	r0, [pc, #272]	; (800489c <main+0x25c>)
 800478c:	f005 ff02 	bl	800a594 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8004790:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80048c4 <main+0x284>
 8004794:	4843      	ldr	r0, [pc, #268]	; (80048a4 <main+0x264>)
 8004796:	f7fd fb47 	bl	8001e28 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 800479a:	2108      	movs	r1, #8
 800479c:	4841      	ldr	r0, [pc, #260]	; (80048a4 <main+0x264>)
 800479e:	f7fd fddf 	bl	8002360 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 80047a2:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80048a8 <main+0x268>
 80047a6:	483f      	ldr	r0, [pc, #252]	; (80048a4 <main+0x264>)
 80047a8:	f7fd fdb6 	bl	8002318 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80047ac:	483d      	ldr	r0, [pc, #244]	; (80048a4 <main+0x264>)
 80047ae:	f7fd fb2a 	bl	8001e06 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 80047b2:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80048c4 <main+0x284>
 80047b6:	483d      	ldr	r0, [pc, #244]	; (80048ac <main+0x26c>)
 80047b8:	f7fd fb36 	bl	8001e28 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 80047bc:	2110      	movs	r1, #16
 80047be:	483b      	ldr	r0, [pc, #236]	; (80048ac <main+0x26c>)
 80047c0:	f7fd fdce 	bl	8002360 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 80047c4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80047c8:	4838      	ldr	r0, [pc, #224]	; (80048ac <main+0x26c>)
 80047ca:	f7fd fda5 	bl	8002318 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 80047ce:	4837      	ldr	r0, [pc, #220]	; (80048ac <main+0x26c>)
 80047d0:	f7fd fb19 	bl	8001e06 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 80047d4:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80048c4 <main+0x284>
 80047d8:	4835      	ldr	r0, [pc, #212]	; (80048b0 <main+0x270>)
 80047da:	f7fd fb25 	bl	8001e28 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 80047de:	2110      	movs	r1, #16
 80047e0:	4833      	ldr	r0, [pc, #204]	; (80048b0 <main+0x270>)
 80047e2:	f7fd fdbd 	bl	8002360 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 80047e6:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80047ea:	4831      	ldr	r0, [pc, #196]	; (80048b0 <main+0x270>)
 80047ec:	f7fd fd94 	bl	8002318 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80047f0:	482f      	ldr	r0, [pc, #188]	; (80048b0 <main+0x270>)
 80047f2:	f7fd fb08 	bl	8001e06 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 80047f6:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80048c4 <main+0x284>
 80047fa:	482e      	ldr	r0, [pc, #184]	; (80048b4 <main+0x274>)
 80047fc:	f7fd fb14 	bl	8001e28 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(1);
 8004800:	2101      	movs	r1, #1
 8004802:	482c      	ldr	r0, [pc, #176]	; (80048b4 <main+0x274>)
 8004804:	f7fd fdac 	bl	8002360 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8004808:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800480c:	4829      	ldr	r0, [pc, #164]	; (80048b4 <main+0x274>)
 800480e:	f7fd fd83 	bl	8002318 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 8004812:	4828      	ldr	r0, [pc, #160]	; (80048b4 <main+0x274>)
 8004814:	f7fd faf7 	bl	8001e06 <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 8004818:	2191      	movs	r1, #145	; 0x91
 800481a:	4827      	ldr	r0, [pc, #156]	; (80048b8 <main+0x278>)
 800481c:	f7fd fa3d 	bl	8001c9a <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 8004820:	2139      	movs	r1, #57	; 0x39
 8004822:	4825      	ldr	r0, [pc, #148]	; (80048b8 <main+0x278>)
 8004824:	f7fd fa28 	bl	8001c78 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 8004828:	4823      	ldr	r0, [pc, #140]	; (80048b8 <main+0x278>)
 800482a:	f7fd f850 	bl	80018ce <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 800482e:	4822      	ldr	r0, [pc, #136]	; (80048b8 <main+0x278>)
 8004830:	f7fd fa44 	bl	8001cbc <_ZN10ServoMotor12GripperCloseEv>
	while (!Limit_sw_Z_Top) {
 8004834:	4b21      	ldr	r3, [pc, #132]	; (80048bc <main+0x27c>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f083 0301 	eor.w	r3, r3, #1
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d041      	beq.n	80048c8 <main+0x288>
		stepperJ2.StepperSetFrequency(1200.0f);
 8004844:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80048c0 <main+0x280>
 8004848:	4818      	ldr	r0, [pc, #96]	; (80048ac <main+0x26c>)
 800484a:	f7fd faed 	bl	8001e28 <_ZN7Stepper19StepperSetFrequencyEf>
	while (!Limit_sw_Z_Top) {
 800484e:	e7f1      	b.n	8004834 <main+0x1f4>
 8004850:	24000b04 	.word	0x24000b04
 8004854:	240013c0 	.word	0x240013c0
 8004858:	24001348 	.word	0x24001348
 800485c:	40020010 	.word	0x40020010
 8004860:	40020028 	.word	0x40020028
 8004864:	40020040 	.word	0x40020040
 8004868:	40020058 	.word	0x40020058
 800486c:	40020070 	.word	0x40020070
 8004870:	40020088 	.word	0x40020088
 8004874:	400200a0 	.word	0x400200a0
 8004878:	400200b8 	.word	0x400200b8
 800487c:	40020410 	.word	0x40020410
 8004880:	40020428 	.word	0x40020428
 8004884:	40020440 	.word	0x40020440
 8004888:	40020458 	.word	0x40020458
 800488c:	40020470 	.word	0x40020470
 8004890:	40020488 	.word	0x40020488
 8004894:	400204a0 	.word	0x400204a0
 8004898:	400204b8 	.word	0x400204b8
 800489c:	58020400 	.word	0x58020400
 80048a0:	58021000 	.word	0x58021000
 80048a4:	2400049c 	.word	0x2400049c
 80048a8:	42280000 	.word	0x42280000
 80048ac:	240004c4 	.word	0x240004c4
 80048b0:	240004ec 	.word	0x240004ec
 80048b4:	24000514 	.word	0x24000514
 80048b8:	24000a94 	.word	0x24000a94
 80048bc:	24000b1b 	.word	0x24000b1b
 80048c0:	44960000 	.word	0x44960000
 80048c4:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 80048c8:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80048c4 <main+0x284>
 80048cc:	489e      	ldr	r0, [pc, #632]	; (8004b48 <main+0x508>)
 80048ce:	f7fd faab 	bl	8001e28 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 80048d2:	20c8      	movs	r0, #200	; 0xc8
 80048d4:	f002 fb2a 	bl	8006f2c <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 80048d8:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8004b4c <main+0x50c>
 80048dc:	489a      	ldr	r0, [pc, #616]	; (8004b48 <main+0x508>)
 80048de:	f7fd faa3 	bl	8001e28 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 80048e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80048e6:	f002 fb21 	bl	8006f2c <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 80048ea:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8004b50 <main+0x510>
 80048ee:	4896      	ldr	r0, [pc, #600]	; (8004b48 <main+0x508>)
 80048f0:	f7fd fa9a 	bl	8001e28 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 80048f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048f8:	f002 fb18 	bl	8006f2c <HAL_Delay>
	gripper.GripperOpen();
 80048fc:	4895      	ldr	r0, [pc, #596]	; (8004b54 <main+0x514>)
 80048fe:	f7fd f9f3 	bl	8001ce8 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 8004902:	4b95      	ldr	r3, [pc, #596]	; (8004b58 <main+0x518>)
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]

	encoderJ1.AMT21_Read();
 8004908:	4894      	ldr	r0, [pc, #592]	; (8004b5c <main+0x51c>)
 800490a:	f7fb fedc 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 800490e:	4893      	ldr	r0, [pc, #588]	; (8004b5c <main+0x51c>)
 8004910:	f7fb ff08 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004914:	4603      	mov	r3, r0
 8004916:	461a      	mov	r2, r3
 8004918:	4b91      	ldr	r3, [pc, #580]	; (8004b60 <main+0x520>)
 800491a:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 800491c:	4b90      	ldr	r3, [pc, #576]	; (8004b60 <main+0x520>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d110      	bne.n	8004946 <main+0x306>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 8004924:	488d      	ldr	r0, [pc, #564]	; (8004b5c <main+0x51c>)
 8004926:	f7fb ff61 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 800492a:	4603      	mov	r3, r0
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004934:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8004b40 <main+0x500>
 8004938:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800493c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004940:	4b88      	ldr	r3, [pc, #544]	; (8004b64 <main+0x524>)
 8004942:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ2.AMT21_Read();
 8004946:	4888      	ldr	r0, [pc, #544]	; (8004b68 <main+0x528>)
 8004948:	f7fb febd 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 800494c:	4886      	ldr	r0, [pc, #536]	; (8004b68 <main+0x528>)
 800494e:	f7fb fee9 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004952:	4603      	mov	r3, r0
 8004954:	461a      	mov	r2, r3
 8004956:	4b85      	ldr	r3, [pc, #532]	; (8004b6c <main+0x52c>)
 8004958:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 800495a:	4b84      	ldr	r3, [pc, #528]	; (8004b6c <main+0x52c>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d115      	bne.n	800498e <main+0x34e>
		encoderJ2.unwarp();
 8004962:	4881      	ldr	r0, [pc, #516]	; (8004b68 <main+0x528>)
 8004964:	f7fb ff64 	bl	8000830 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 8004968:	487f      	ldr	r0, [pc, #508]	; (8004b68 <main+0x528>)
 800496a:	f7fb ffb3 	bl	80008d4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 800496e:	487e      	ldr	r0, [pc, #504]	; (8004b68 <main+0x528>)
 8004970:	f7fb ffbd 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 8004974:	ee07 0a90 	vmov	s15, r0
 8004978:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800497c:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8004b40 <main+0x500>
 8004980:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004984:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004988:	4b79      	ldr	r3, [pc, #484]	; (8004b70 <main+0x530>)
 800498a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ3.AMT21_Read();
 800498e:	4879      	ldr	r0, [pc, #484]	; (8004b74 <main+0x534>)
 8004990:	f7fb fe99 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8004994:	4877      	ldr	r0, [pc, #476]	; (8004b74 <main+0x534>)
 8004996:	f7fb fec5 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	4b76      	ldr	r3, [pc, #472]	; (8004b78 <main+0x538>)
 80049a0:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 80049a2:	4b75      	ldr	r3, [pc, #468]	; (8004b78 <main+0x538>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d110      	bne.n	80049cc <main+0x38c>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 80049aa:	4872      	ldr	r0, [pc, #456]	; (8004b74 <main+0x534>)
 80049ac:	f7fb ff1e 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80049b0:	4603      	mov	r3, r0
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80049ba:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8004b40 <main+0x500>
 80049be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80049c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80049c6:	4b6d      	ldr	r3, [pc, #436]	; (8004b7c <main+0x53c>)
 80049c8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ4.AMT21_Read();
 80049cc:	486c      	ldr	r0, [pc, #432]	; (8004b80 <main+0x540>)
 80049ce:	f7fb fe7a 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80049d2:	486b      	ldr	r0, [pc, #428]	; (8004b80 <main+0x540>)
 80049d4:	f7fb fea6 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80049d8:	4603      	mov	r3, r0
 80049da:	461a      	mov	r2, r3
 80049dc:	4b69      	ldr	r3, [pc, #420]	; (8004b84 <main+0x544>)
 80049de:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 80049e0:	4b68      	ldr	r3, [pc, #416]	; (8004b84 <main+0x544>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d110      	bne.n	8004a0a <main+0x3ca>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609;
 80049e8:	4865      	ldr	r0, [pc, #404]	; (8004b80 <main+0x540>)
 80049ea:	f7fb feff 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80049ee:	4603      	mov	r3, r0
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80049f8:	ed9f 5b51 	vldr	d5, [pc, #324]	; 8004b40 <main+0x500>
 80049fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004a00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004a04:	4b60      	ldr	r3, [pc, #384]	; (8004b88 <main+0x548>)
 8004a06:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

//	angle_chess = chessSPIEncoder.readAngle();
//	  zero_position = chessSPIEncoder.getRawRotation();
//	  zero_position_map = chessSPIEncoder.read2angle(zero_position);

	fcb_joint1.p11 = 3.60381982 / 100000000.0;
 8004a0a:	4b56      	ldr	r3, [pc, #344]	; (8004b64 <main+0x524>)
 8004a0c:	4a5f      	ldr	r2, [pc, #380]	; (8004b8c <main+0x54c>)
 8004a0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 8004a12:	4b54      	ldr	r3, [pc, #336]	; (8004b64 <main+0x524>)
 8004a14:	4a5e      	ldr	r2, [pc, #376]	; (8004b90 <main+0x550>)
 8004a16:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 8004a1a:	4b52      	ldr	r3, [pc, #328]	; (8004b64 <main+0x524>)
 8004a1c:	4a5d      	ldr	r2, [pc, #372]	; (8004b94 <main+0x554>)
 8004a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 8004a22:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <main+0x524>)
 8004a24:	4a5c      	ldr	r2, [pc, #368]	; (8004b98 <main+0x558>)
 8004a26:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 8004a2a:	4b54      	ldr	r3, [pc, #336]	; (8004b7c <main+0x53c>)
 8004a2c:	4a57      	ldr	r2, [pc, #348]	; (8004b8c <main+0x54c>)
 8004a2e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 8004a32:	4b52      	ldr	r3, [pc, #328]	; (8004b7c <main+0x53c>)
 8004a34:	4a56      	ldr	r2, [pc, #344]	; (8004b90 <main+0x550>)
 8004a36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 8004a3a:	4b50      	ldr	r3, [pc, #320]	; (8004b7c <main+0x53c>)
 8004a3c:	4a55      	ldr	r2, [pc, #340]	; (8004b94 <main+0x554>)
 8004a3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 8004a42:	4b4e      	ldr	r3, [pc, #312]	; (8004b7c <main+0x53c>)
 8004a44:	4a54      	ldr	r2, [pc, #336]	; (8004b98 <main+0x558>)
 8004a46:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint1.Q = 0.001;
 8004a4a:	4b46      	ldr	r3, [pc, #280]	; (8004b64 <main+0x524>)
 8004a4c:	4a53      	ldr	r2, [pc, #332]	; (8004b9c <main+0x55c>)
 8004a4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.0000003;
 8004a52:	4b44      	ldr	r3, [pc, #272]	; (8004b64 <main+0x524>)
 8004a54:	4a52      	ldr	r2, [pc, #328]	; (8004ba0 <main+0x560>)
 8004a56:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint2.Q = 0.001;
 8004a5a:	4b45      	ldr	r3, [pc, #276]	; (8004b70 <main+0x530>)
 8004a5c:	4a4f      	ldr	r2, [pc, #316]	; (8004b9c <main+0x55c>)
 8004a5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint2.R = 0.00003;
 8004a62:	4b43      	ldr	r3, [pc, #268]	; (8004b70 <main+0x530>)
 8004a64:	4a4f      	ldr	r2, [pc, #316]	; (8004ba4 <main+0x564>)
 8004a66:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 8004a6a:	4b44      	ldr	r3, [pc, #272]	; (8004b7c <main+0x53c>)
 8004a6c:	4a4b      	ldr	r2, [pc, #300]	; (8004b9c <main+0x55c>)
 8004a6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000001;
 8004a72:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <main+0x53c>)
 8004a74:	4a4c      	ldr	r2, [pc, #304]	; (8004ba8 <main+0x568>)
 8004a76:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 8004a7a:	4b3a      	ldr	r3, [pc, #232]	; (8004b64 <main+0x524>)
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	4a39      	ldr	r2, [pc, #228]	; (8004b64 <main+0x524>)
 8004a80:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 8004a84:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <main+0x524>)
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 8004a8e:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <main+0x524>)
 8004a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a94:	4a33      	ldr	r2, [pc, #204]	; (8004b64 <main+0x524>)
 8004a96:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 8004a9a:	4b32      	ldr	r3, [pc, #200]	; (8004b64 <main+0x524>)
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 8004aa4:	4b2f      	ldr	r3, [pc, #188]	; (8004b64 <main+0x524>)
 8004aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa8:	4a2e      	ldr	r2, [pc, #184]	; (8004b64 <main+0x524>)
 8004aaa:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint2.X11 = fcb_joint2.Encoder;
 8004aac:	4b30      	ldr	r3, [pc, #192]	; (8004b70 <main+0x530>)
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	4a2f      	ldr	r2, [pc, #188]	; (8004b70 <main+0x530>)
 8004ab2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint2.X21 = 0.0;
 8004ab6:	4b2e      	ldr	r3, [pc, #184]	; (8004b70 <main+0x530>)
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint2.kalman_pos = fcb_joint2.X11;
 8004ac0:	4b2b      	ldr	r3, [pc, #172]	; (8004b70 <main+0x530>)
 8004ac2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ac6:	4a2a      	ldr	r2, [pc, #168]	; (8004b70 <main+0x530>)
 8004ac8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint2.kalman_velo = 0.0;
 8004acc:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <main+0x530>)
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint2.Goal_Position = fcb_joint2.Encoder;
 8004ad6:	4b26      	ldr	r3, [pc, #152]	; (8004b70 <main+0x530>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	4a25      	ldr	r2, [pc, #148]	; (8004b70 <main+0x530>)
 8004adc:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 8004ade:	4b27      	ldr	r3, [pc, #156]	; (8004b7c <main+0x53c>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	4a26      	ldr	r2, [pc, #152]	; (8004b7c <main+0x53c>)
 8004ae4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 8004ae8:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <main+0x53c>)
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 8004af2:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <main+0x53c>)
 8004af4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004af8:	4a20      	ldr	r2, [pc, #128]	; (8004b7c <main+0x53c>)
 8004afa:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 8004afe:	4b1f      	ldr	r3, [pc, #124]	; (8004b7c <main+0x53c>)
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 8004b08:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <main+0x53c>)
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <main+0x53c>)
 8004b0e:	6493      	str	r3, [r2, #72]	; 0x48
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	chessABIEncoder.setZero();
 8004b10:	4826      	ldr	r0, [pc, #152]	; (8004bac <main+0x56c>)
 8004b12:	f7fb ff38 	bl	8000986 <_ZN10AS5047UABI7setZeroEv>
	chessABIEncoder.EncoderReadEnable();
 8004b16:	4825      	ldr	r0, [pc, #148]	; (8004bac <main+0x56c>)
 8004b18:	f7fb ff1d 	bl	8000956 <_ZN10AS5047UABI17EncoderReadEnableEv>
	chessABIEncoder.setZero();
 8004b1c:	4823      	ldr	r0, [pc, #140]	; (8004bac <main+0x56c>)
 8004b1e:	f7fb ff32 	bl	8000986 <_ZN10AS5047UABI7setZeroEv>
	HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 8004b22:	4823      	ldr	r0, [pc, #140]	; (8004bb0 <main+0x570>)
 8004b24:	f008 fcf8 	bl	800d518 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 8004b28:	4822      	ldr	r0, [pc, #136]	; (8004bb4 <main+0x574>)
 8004b2a:	f008 fcf5 	bl	800d518 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		angle_chess = chessABIEncoder.getMRadAngle();
 8004b2e:	481f      	ldr	r0, [pc, #124]	; (8004bac <main+0x56c>)
 8004b30:	f7fb ff38 	bl	80009a4 <_ZN10AS5047UABI12getMRadAngleEv>
 8004b34:	eef0 7a40 	vmov.f32	s15, s0
 8004b38:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <main+0x578>)
 8004b3a:	edc3 7a00 	vstr	s15, [r3]
 8004b3e:	e7f6      	b.n	8004b2e <main+0x4ee>
 8004b40:	645a1cac 	.word	0x645a1cac
 8004b44:	4004df3b 	.word	0x4004df3b
 8004b48:	240004c4 	.word	0x240004c4
 8004b4c:	c4480000 	.word	0xc4480000
 8004b50:	00000000 	.word	0x00000000
 8004b54:	24000a94 	.word	0x24000a94
 8004b58:	24000b1b 	.word	0x24000b1b
 8004b5c:	2400042c 	.word	0x2400042c
 8004b60:	24000ab0 	.word	0x24000ab0
 8004b64:	2400053c 	.word	0x2400053c
 8004b68:	24000448 	.word	0x24000448
 8004b6c:	24000ab1 	.word	0x24000ab1
 8004b70:	24000620 	.word	0x24000620
 8004b74:	24000464 	.word	0x24000464
 8004b78:	24000ab2 	.word	0x24000ab2
 8004b7c:	24000704 	.word	0x24000704
 8004b80:	24000480 	.word	0x24000480
 8004b84:	24000ab3 	.word	0x24000ab3
 8004b88:	240007e8 	.word	0x240007e8
 8004b8c:	331ac86b 	.word	0x331ac86b
 8004b90:	33e9d3b8 	.word	0x33e9d3b8
 8004b94:	33e9d3bd 	.word	0x33e9d3bd
 8004b98:	3531278c 	.word	0x3531278c
 8004b9c:	3a83126f 	.word	0x3a83126f
 8004ba0:	34a10fb0 	.word	0x34a10fb0
 8004ba4:	37fba882 	.word	0x37fba882
 8004ba8:	358637bd 	.word	0x358637bd
 8004bac:	24000ab4 	.word	0x24000ab4
 8004bb0:	24001130 	.word	0x24001130
 8004bb4:	24000e84 	.word	0x24000e84
 8004bb8:	24000ac4 	.word	0x24000ac4

08004bbc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b09c      	sub	sp, #112	; 0x70
 8004bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc6:	224c      	movs	r2, #76	; 0x4c
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f00d fdc4 	bl	8012758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bd0:	1d3b      	adds	r3, r7, #4
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f00d fdbe 	bl	8012758 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004bdc:	2002      	movs	r0, #2
 8004bde:	f005 fd0d 	bl	800a5fc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004be2:	2300      	movs	r3, #0
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	4b38      	ldr	r3, [pc, #224]	; (8004cc8 <_Z18SystemClock_Configv+0x10c>)
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	4a37      	ldr	r2, [pc, #220]	; (8004cc8 <_Z18SystemClock_Configv+0x10c>)
 8004bec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf0:	6193      	str	r3, [r2, #24]
 8004bf2:	4b35      	ldr	r3, [pc, #212]	; (8004cc8 <_Z18SystemClock_Configv+0x10c>)
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4b33      	ldr	r3, [pc, #204]	; (8004ccc <_Z18SystemClock_Configv+0x110>)
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	4a32      	ldr	r2, [pc, #200]	; (8004ccc <_Z18SystemClock_Configv+0x110>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c08:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <_Z18SystemClock_Configv+0x110>)
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004c14:	4b2c      	ldr	r3, [pc, #176]	; (8004cc8 <_Z18SystemClock_Configv+0x10c>)
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c20:	bf14      	ite	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	2300      	moveq	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d000      	beq.n	8004c2e <_Z18SystemClock_Configv+0x72>
 8004c2c:	e7f2      	b.n	8004c14 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004c32:	2301      	movs	r3, #1
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c36:	2340      	movs	r3, #64	; 0x40
 8004c38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004c42:	2304      	movs	r3, #4
 8004c44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004c46:	233c      	movs	r3, #60	; 0x3c
 8004c48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 96;
 8004c4e:	2360      	movs	r3, #96	; 0x60
 8004c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004c52:	2302      	movs	r3, #2
 8004c54:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004c56:	230c      	movs	r3, #12
 8004c58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c66:	4618      	mov	r0, r3
 8004c68:	f005 fd02 	bl	800a670 <HAL_RCC_OscConfig>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004c7c:	f000 f856 	bl	8004d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c80:	233f      	movs	r3, #63	; 0x3f
 8004c82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c84:	2303      	movs	r3, #3
 8004c86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004c90:	2340      	movs	r3, #64	; 0x40
 8004c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004c94:	2340      	movs	r3, #64	; 0x40
 8004c96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004c9e:	2340      	movs	r3, #64	; 0x40
 8004ca0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	2104      	movs	r1, #4
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f006 f90e 	bl	800aec8 <HAL_RCC_ClockConfig>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bf14      	ite	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	2300      	moveq	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004cbc:	f000 f836 	bl	8004d2c <Error_Handler>
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	3770      	adds	r7, #112	; 0x70
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	58024800 	.word	0x58024800
 8004ccc:	58000400 	.word	0x58000400

08004cd0 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 //
 //}
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LM_Z_BOTTOM_Pin) {	// Limit Switch Bottom Z-axis
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce0:	d102      	bne.n	8004ce8 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <HAL_GPIO_EXTI_Callback+0x4c>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_Z_TOP_Pin) {	// Limit Switch Top Z-axis
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cee:	d102      	bne.n	8004cf6 <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_GPIO_EXTI_Callback+0x50>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_SERVO_Pin) {	// Limit Switch Servo
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	2b80      	cmp	r3, #128	; 0x80
 8004cfa:	d102      	bne.n	8004d02 <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_GPIO_EXTI_Callback+0x54>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_LED_Pin) {	// Limit Switch LED on Cabinet
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d102      	bne.n	8004d0e <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 8004d08:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <HAL_GPIO_EXTI_Callback+0x58>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
	}

}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	24000b1a 	.word	0x24000b1a
 8004d20:	24000b1b 	.word	0x24000b1b
 8004d24:	24000b1c 	.word	0x24000b1c
 8004d28:	24000b1d 	.word	0x24000b1d

08004d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004d30:	2200      	movs	r2, #0
 8004d32:	2101      	movs	r1, #1
 8004d34:	4808      	ldr	r0, [pc, #32]	; (8004d58 <Error_Handler+0x2c>)
 8004d36:	f005 fc2d 	bl	800a594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	4807      	ldr	r0, [pc, #28]	; (8004d5c <Error_Handler+0x30>)
 8004d40:	f005 fc28 	bl	800a594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004d44:	2201      	movs	r2, #1
 8004d46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d4a:	4803      	ldr	r0, [pc, #12]	; (8004d58 <Error_Handler+0x2c>)
 8004d4c:	f005 fc22 	bl	800a594 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d50:	b672      	cpsid	i
}
 8004d52:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004d54:	e7fe      	b.n	8004d54 <Error_Handler+0x28>
 8004d56:	bf00      	nop
 8004d58:	58020400 	.word	0x58020400
 8004d5c:	58021000 	.word	0x58021000

08004d60 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d158      	bne.n	8004e22 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d153      	bne.n	8004e22 <_Z41__static_initialization_and_destruction_0ii+0xc2>
AMT21 encoderJ1(&huart4, 0xD4);
 8004d7a:	22d4      	movs	r2, #212	; 0xd4
 8004d7c:	4947      	ldr	r1, [pc, #284]	; (8004e9c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004d7e:	4848      	ldr	r0, [pc, #288]	; (8004ea0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004d80:	f7fb fc82 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 8004d84:	22b4      	movs	r2, #180	; 0xb4
 8004d86:	4945      	ldr	r1, [pc, #276]	; (8004e9c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004d88:	4846      	ldr	r0, [pc, #280]	; (8004ea4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004d8a:	f7fb fc7d 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004d8e:	22c4      	movs	r2, #196	; 0xc4
 8004d90:	4942      	ldr	r1, [pc, #264]	; (8004e9c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004d92:	4845      	ldr	r0, [pc, #276]	; (8004ea8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004d94:	f7fb fc78 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004d98:	22a4      	movs	r2, #164	; 0xa4
 8004d9a:	4940      	ldr	r1, [pc, #256]	; (8004e9c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004d9c:	4843      	ldr	r0, [pc, #268]	; (8004eac <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004d9e:	f7fb fc73 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004da2:	2320      	movs	r3, #32
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	4b42      	ldr	r3, [pc, #264]	; (8004eb0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	4942      	ldr	r1, [pc, #264]	; (8004eb4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004dac:	4842      	ldr	r0, [pc, #264]	; (8004eb8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004dae:	f7fc ffdd 	bl	8001d6c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004db2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	4b40      	ldr	r3, [pc, #256]	; (8004ebc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004dba:	2204      	movs	r2, #4
 8004dbc:	4940      	ldr	r1, [pc, #256]	; (8004ec0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004dbe:	4841      	ldr	r0, [pc, #260]	; (8004ec4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004dc0:	f7fc ffd4 	bl	8001d6c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	4b3c      	ldr	r3, [pc, #240]	; (8004ebc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004dcc:	2204      	movs	r2, #4
 8004dce:	493e      	ldr	r1, [pc, #248]	; (8004ec8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004dd0:	483e      	ldr	r0, [pc, #248]	; (8004ecc <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004dd2:	f7fc ffcb 	bl	8001d6c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004dd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	4b34      	ldr	r3, [pc, #208]	; (8004eb0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004dde:	2208      	movs	r2, #8
 8004de0:	493b      	ldr	r1, [pc, #236]	; (8004ed0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004de2:	483c      	ldr	r0, [pc, #240]	; (8004ed4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004de4:	f7fc ffc2 	bl	8001d6c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004de8:	483b      	ldr	r0, [pc, #236]	; (8004ed8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004dea:	f7fb fe1f 	bl	8000a2c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004dee:	483b      	ldr	r0, [pc, #236]	; (8004edc <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004df0:	f7fb fe1c 	bl	8000a2c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8004df4:	483a      	ldr	r0, [pc, #232]	; (8004ee0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004df6:	f7fb fe19 	bl	8000a2c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004dfa:	483a      	ldr	r0, [pc, #232]	; (8004ee4 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004dfc:	f7fb fe16 	bl	8000a2c <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004e00:	4839      	ldr	r0, [pc, #228]	; (8004ee8 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004e02:	f7fb fe13 	bl	8000a2c <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8004e06:	4839      	ldr	r0, [pc, #228]	; (8004eec <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004e08:	f7fb fe10 	bl	8000a2c <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	4938      	ldr	r1, [pc, #224]	; (8004ef0 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004e10:	4838      	ldr	r0, [pc, #224]	; (8004ef4 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004e12:	f7fc fd21 	bl	8001858 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
AS5047UABI chessABIEncoder(&htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8004e16:	2304      	movs	r3, #4
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4937      	ldr	r1, [pc, #220]	; (8004ef8 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004e1c:	4837      	ldr	r0, [pc, #220]	; (8004efc <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004e1e:	f7fb fd72 	bl	8000906 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d134      	bne.n	8004e92 <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d12f      	bne.n	8004e92 <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004e32:	4832      	ldr	r0, [pc, #200]	; (8004efc <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004e34:	f7fb fd84 	bl	8000940 <_ZN10AS5047UABID1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004e38:	482e      	ldr	r0, [pc, #184]	; (8004ef4 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004e3a:	f7fc fd3d 	bl	80018b8 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004e3e:	482b      	ldr	r0, [pc, #172]	; (8004eec <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004e40:	f7fb fe62 	bl	8000b08 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8004e44:	4828      	ldr	r0, [pc, #160]	; (8004ee8 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004e46:	f7fb fe5f 	bl	8000b08 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8004e4a:	4826      	ldr	r0, [pc, #152]	; (8004ee4 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004e4c:	f7fb fe5c 	bl	8000b08 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8004e50:	4823      	ldr	r0, [pc, #140]	; (8004ee0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004e52:	f7fb fe59 	bl	8000b08 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8004e56:	4821      	ldr	r0, [pc, #132]	; (8004edc <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004e58:	f7fb fe56 	bl	8000b08 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8004e5c:	481e      	ldr	r0, [pc, #120]	; (8004ed8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004e5e:	f7fb fe53 	bl	8000b08 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004e62:	481c      	ldr	r0, [pc, #112]	; (8004ed4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004e64:	f7fc ffc4 	bl	8001df0 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004e68:	4818      	ldr	r0, [pc, #96]	; (8004ecc <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004e6a:	f7fc ffc1 	bl	8001df0 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004e6e:	4815      	ldr	r0, [pc, #84]	; (8004ec4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004e70:	f7fc ffbe 	bl	8001df0 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004e74:	4810      	ldr	r0, [pc, #64]	; (8004eb8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004e76:	f7fc ffbb 	bl	8001df0 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8004e7a:	480c      	ldr	r0, [pc, #48]	; (8004eac <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004e7c:	f7fb fc18 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8004e80:	4809      	ldr	r0, [pc, #36]	; (8004ea8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004e82:	f7fb fc15 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8004e86:	4807      	ldr	r0, [pc, #28]	; (8004ea4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004e88:	f7fb fc12 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004e8c:	4804      	ldr	r0, [pc, #16]	; (8004ea0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004e8e:	f7fb fc0f 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	240015b8 	.word	0x240015b8
 8004ea0:	2400042c 	.word	0x2400042c
 8004ea4:	24000448 	.word	0x24000448
 8004ea8:	24000464 	.word	0x24000464
 8004eac:	24000480 	.word	0x24000480
 8004eb0:	58020400 	.word	0x58020400
 8004eb4:	24000f1c 	.word	0x24000f1c
 8004eb8:	2400049c 	.word	0x2400049c
 8004ebc:	58021000 	.word	0x58021000
 8004ec0:	24001000 	.word	0x24001000
 8004ec4:	240004c4 	.word	0x240004c4
 8004ec8:	24000e38 	.word	0x24000e38
 8004ecc:	240004ec 	.word	0x240004ec
 8004ed0:	2400104c 	.word	0x2400104c
 8004ed4:	24000514 	.word	0x24000514
 8004ed8:	2400053c 	.word	0x2400053c
 8004edc:	24000620 	.word	0x24000620
 8004ee0:	24000704 	.word	0x24000704
 8004ee4:	240007e8 	.word	0x240007e8
 8004ee8:	240008cc 	.word	0x240008cc
 8004eec:	240009b0 	.word	0x240009b0
 8004ef0:	24000dec 	.word	0x24000dec
 8004ef4:	24000a94 	.word	0x24000a94
 8004ef8:	24000da0 	.word	0x24000da0
 8004efc:	24000ab4 	.word	0x24000ab4

08004f00 <_GLOBAL__sub_I_TIM_MS>:
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f08:	2001      	movs	r0, #1
 8004f0a:	f7ff ff29 	bl	8004d60 <_Z41__static_initialization_and_destruction_0ii>
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <_GLOBAL__sub_D_TIM_MS>:
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f7ff ff21 	bl	8004d60 <_Z41__static_initialization_and_destruction_0ii>
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004f24:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f26:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <MX_SPI3_Init+0xac>)
 8004f28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004f2a:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f2c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004f30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004f32:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f38:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f3a:	2207      	movs	r2, #7
 8004f3c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004f44:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f4a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004f4c:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f52:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004f54:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f56:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004f5a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f62:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f68:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004f6e:	4b16      	ldr	r3, [pc, #88]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f74:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f7a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004f7c:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004fa0:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004fa6:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004fb2:	4805      	ldr	r0, [pc, #20]	; (8004fc8 <MX_SPI3_Init+0xa8>)
 8004fb4:	f007 fe76 	bl	800cca4 <HAL_SPI_Init>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8004fbe:	f7ff feb5 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	24000c28 	.word	0x24000c28
 8004fcc:	40003c00 	.word	0x40003c00

08004fd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b0b8      	sub	sp, #224	; 0xe0
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fe8:	f107 0310 	add.w	r3, r7, #16
 8004fec:	22bc      	movs	r2, #188	; 0xbc
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f00d fbb1 	bl	8012758 <memset>
  if(spiHandle->Instance==SPI3)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a56      	ldr	r2, [pc, #344]	; (8005154 <HAL_SPI_MspInit+0x184>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	f040 80a5 	bne.w	800514c <HAL_SPI_MspInit+0x17c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8005002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005006:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8005008:	2300      	movs	r3, #0
 800500a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800500c:	f107 0310 	add.w	r3, r7, #16
 8005010:	4618      	mov	r0, r3
 8005012:	f006 fae5 	bl	800b5e0 <HAL_RCCEx_PeriphCLKConfig>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800501c:	f7ff fe86 	bl	8004d2c <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005020:	4b4d      	ldr	r3, [pc, #308]	; (8005158 <HAL_SPI_MspInit+0x188>)
 8005022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005026:	4a4c      	ldr	r2, [pc, #304]	; (8005158 <HAL_SPI_MspInit+0x188>)
 8005028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005030:	4b49      	ldr	r3, [pc, #292]	; (8005158 <HAL_SPI_MspInit+0x188>)
 8005032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800503e:	4b46      	ldr	r3, [pc, #280]	; (8005158 <HAL_SPI_MspInit+0x188>)
 8005040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005044:	4a44      	ldr	r2, [pc, #272]	; (8005158 <HAL_SPI_MspInit+0x188>)
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800504e:	4b42      	ldr	r3, [pc, #264]	; (8005158 <HAL_SPI_MspInit+0x188>)
 8005050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800505c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005060:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005064:	2302      	movs	r3, #2
 8005066:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	2300      	movs	r3, #0
 800506c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005070:	2300      	movs	r3, #0
 8005072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005076:	2306      	movs	r3, #6
 8005078:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800507c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005080:	4619      	mov	r1, r3
 8005082:	4836      	ldr	r0, [pc, #216]	; (800515c <HAL_SPI_MspInit+0x18c>)
 8005084:	f005 f8d6 	bl	800a234 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8005088:	4b35      	ldr	r3, [pc, #212]	; (8005160 <HAL_SPI_MspInit+0x190>)
 800508a:	4a36      	ldr	r2, [pc, #216]	; (8005164 <HAL_SPI_MspInit+0x194>)
 800508c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800508e:	4b34      	ldr	r3, [pc, #208]	; (8005160 <HAL_SPI_MspInit+0x190>)
 8005090:	223e      	movs	r2, #62	; 0x3e
 8005092:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005094:	4b32      	ldr	r3, [pc, #200]	; (8005160 <HAL_SPI_MspInit+0x190>)
 8005096:	2240      	movs	r2, #64	; 0x40
 8005098:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800509a:	4b31      	ldr	r3, [pc, #196]	; (8005160 <HAL_SPI_MspInit+0x190>)
 800509c:	2200      	movs	r2, #0
 800509e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050a0:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <HAL_SPI_MspInit+0x190>)
 80050a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050a6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050a8:	4b2d      	ldr	r3, [pc, #180]	; (8005160 <HAL_SPI_MspInit+0x190>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050ae:	4b2c      	ldr	r3, [pc, #176]	; (8005160 <HAL_SPI_MspInit+0x190>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80050b4:	4b2a      	ldr	r3, [pc, #168]	; (8005160 <HAL_SPI_MspInit+0x190>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80050ba:	4b29      	ldr	r3, [pc, #164]	; (8005160 <HAL_SPI_MspInit+0x190>)
 80050bc:	2200      	movs	r2, #0
 80050be:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050c0:	4b27      	ldr	r3, [pc, #156]	; (8005160 <HAL_SPI_MspInit+0x190>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80050c6:	4826      	ldr	r0, [pc, #152]	; (8005160 <HAL_SPI_MspInit+0x190>)
 80050c8:	f002 fa7a 	bl	80075c0 <HAL_DMA_Init>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80050d2:	f7ff fe2b 	bl	8004d2c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a21      	ldr	r2, [pc, #132]	; (8005160 <HAL_SPI_MspInit+0x190>)
 80050da:	679a      	str	r2, [r3, #120]	; 0x78
 80050dc:	4a20      	ldr	r2, [pc, #128]	; (8005160 <HAL_SPI_MspInit+0x190>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Stream0;
 80050e2:	4b21      	ldr	r3, [pc, #132]	; (8005168 <HAL_SPI_MspInit+0x198>)
 80050e4:	4a21      	ldr	r2, [pc, #132]	; (800516c <HAL_SPI_MspInit+0x19c>)
 80050e6:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <HAL_SPI_MspInit+0x198>)
 80050ea:	223d      	movs	r2, #61	; 0x3d
 80050ec:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050ee:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <HAL_SPI_MspInit+0x198>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050f4:	4b1c      	ldr	r3, [pc, #112]	; (8005168 <HAL_SPI_MspInit+0x198>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <HAL_SPI_MspInit+0x198>)
 80050fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005100:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005102:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_SPI_MspInit+0x198>)
 8005104:	2200      	movs	r2, #0
 8005106:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005108:	4b17      	ldr	r3, [pc, #92]	; (8005168 <HAL_SPI_MspInit+0x198>)
 800510a:	2200      	movs	r2, #0
 800510c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_SPI_MspInit+0x198>)
 8005110:	2200      	movs	r2, #0
 8005112:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005114:	4b14      	ldr	r3, [pc, #80]	; (8005168 <HAL_SPI_MspInit+0x198>)
 8005116:	2200      	movs	r2, #0
 8005118:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800511a:	4b13      	ldr	r3, [pc, #76]	; (8005168 <HAL_SPI_MspInit+0x198>)
 800511c:	2200      	movs	r2, #0
 800511e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005120:	4811      	ldr	r0, [pc, #68]	; (8005168 <HAL_SPI_MspInit+0x198>)
 8005122:	f002 fa4d 	bl	80075c0 <HAL_DMA_Init>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 800512c:	f7ff fdfe 	bl	8004d2c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a0d      	ldr	r2, [pc, #52]	; (8005168 <HAL_SPI_MspInit+0x198>)
 8005134:	67da      	str	r2, [r3, #124]	; 0x7c
 8005136:	4a0c      	ldr	r2, [pc, #48]	; (8005168 <HAL_SPI_MspInit+0x198>)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800513c:	2200      	movs	r2, #0
 800513e:	2100      	movs	r1, #0
 8005140:	2033      	movs	r0, #51	; 0x33
 8005142:	f001 fffe 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005146:	2033      	movs	r0, #51	; 0x33
 8005148:	f002 f815 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800514c:	bf00      	nop
 800514e:	37e0      	adds	r7, #224	; 0xe0
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40003c00 	.word	0x40003c00
 8005158:	58024400 	.word	0x58024400
 800515c:	58020800 	.word	0x58020800
 8005160:	24000cb0 	.word	0x24000cb0
 8005164:	400200b8 	.word	0x400200b8
 8005168:	24000d28 	.word	0x24000d28
 800516c:	40020410 	.word	0x40020410

08005170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <HAL_MspInit+0x30>)
 8005178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800517c:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <HAL_MspInit+0x30>)
 800517e:	f043 0302 	orr.w	r3, r3, #2
 8005182:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005186:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <HAL_MspInit+0x30>)
 8005188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	607b      	str	r3, [r7, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	58024400 	.word	0x58024400

080051a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051a8:	e7fe      	b.n	80051a8 <NMI_Handler+0x4>

080051aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051ae:	e7fe      	b.n	80051ae <HardFault_Handler+0x4>

080051b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051b4:	e7fe      	b.n	80051b4 <MemManage_Handler+0x4>

080051b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051b6:	b480      	push	{r7}
 80051b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051ba:	e7fe      	b.n	80051ba <BusFault_Handler+0x4>

080051bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051c0:	e7fe      	b.n	80051c0 <UsageFault_Handler+0x4>

080051c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051c6:	bf00      	nop
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051de:	b480      	push	{r7}
 80051e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051e2:	bf00      	nop
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051f0:	f001 fe7c 	bl	8006eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80051f4:	f001 ffd9 	bl	80071aa <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80051f8:	bf00      	nop
 80051fa:	bd80      	pop	{r7, pc}

080051fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8005200:	4802      	ldr	r0, [pc, #8]	; (800520c <DMA1_Stream0_IRQHandler+0x10>)
 8005202:	f003 fd05 	bl	8008c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005206:	bf00      	nop
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	240014c8 	.word	0x240014c8

08005210 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005214:	4802      	ldr	r0, [pc, #8]	; (8005220 <DMA1_Stream1_IRQHandler+0x10>)
 8005216:	f003 fcfb 	bl	8008c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800521a:	bf00      	nop
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	24001348 	.word	0x24001348

08005224 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005228:	4802      	ldr	r0, [pc, #8]	; (8005234 <DMA1_Stream2_IRQHandler+0x10>)
 800522a:	f003 fcf1 	bl	8008c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	24001450 	.word	0x24001450

08005238 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800523c:	4802      	ldr	r0, [pc, #8]	; (8005248 <DMA1_Stream3_IRQHandler+0x10>)
 800523e:	f003 fce7 	bl	8008c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	240011c8 	.word	0x240011c8

0800524c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005250:	4802      	ldr	r0, [pc, #8]	; (800525c <DMA1_Stream4_IRQHandler+0x10>)
 8005252:	f003 fcdd 	bl	8008c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	240016d8 	.word	0x240016d8

08005260 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005264:	4802      	ldr	r0, [pc, #8]	; (8005270 <DMA1_Stream5_IRQHandler+0x10>)
 8005266:	f003 fcd3 	bl	8008c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800526a:	bf00      	nop
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	24001240 	.word	0x24001240

08005274 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005278:	4802      	ldr	r0, [pc, #8]	; (8005284 <DMA1_Stream6_IRQHandler+0x10>)
 800527a:	f003 fcc9 	bl	8008c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	24001540 	.word	0x24001540

08005288 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 800528c:	2040      	movs	r0, #64	; 0x40
 800528e:	f005 f99a 	bl	800a5c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8005292:	2080      	movs	r0, #128	; 0x80
 8005294:	f005 f997 	bl	800a5c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005298:	bf00      	nop
 800529a:	bd80      	pop	{r7, pc}

0800529c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80052a0:	4802      	ldr	r0, [pc, #8]	; (80052ac <USART2_IRQHandler+0x10>)
 80052a2:	f009 ff81 	bl	800f1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	24001648 	.word	0x24001648

080052b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80052b4:	4802      	ldr	r0, [pc, #8]	; (80052c0 <USART3_IRQHandler+0x10>)
 80052b6:	f009 ff77 	bl	800f1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	240013c0 	.word	0x240013c0

080052c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 80052c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80052cc:	f005 f97b 	bl	800a5c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 80052d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80052d4:	f005 f977 	bl	800a5c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 80052d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80052dc:	f005 f973 	bl	800a5c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 80052e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80052e4:	f005 f96f 	bl	800a5c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80052e8:	bf00      	nop
 80052ea:	bd80      	pop	{r7, pc}

080052ec <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80052f0:	4803      	ldr	r0, [pc, #12]	; (8005300 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80052f2:	f008 fc5b 	bl	800dbac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80052f6:	4803      	ldr	r0, [pc, #12]	; (8005304 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80052f8:	f008 fc58 	bl	800dbac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80052fc:	bf00      	nop
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	24000da0 	.word	0x24000da0
 8005304:	240010e4 	.word	0x240010e4

08005308 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800530c:	4803      	ldr	r0, [pc, #12]	; (800531c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800530e:	f008 fc4d 	bl	800dbac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005312:	4803      	ldr	r0, [pc, #12]	; (8005320 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005314:	f008 fc4a 	bl	800dbac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005318:	bf00      	nop
 800531a:	bd80      	pop	{r7, pc}
 800531c:	24000da0 	.word	0x24000da0
 8005320:	24000f68 	.word	0x24000f68

08005324 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005328:	4803      	ldr	r0, [pc, #12]	; (8005338 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800532a:	f008 fc3f 	bl	800dbac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800532e:	4803      	ldr	r0, [pc, #12]	; (800533c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8005330:	f008 fc3c 	bl	800dbac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005334:	bf00      	nop
 8005336:	bd80      	pop	{r7, pc}
 8005338:	24000da0 	.word	0x24000da0
 800533c:	24001098 	.word	0x24001098

08005340 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005344:	4802      	ldr	r0, [pc, #8]	; (8005350 <TIM8_CC_IRQHandler+0x10>)
 8005346:	f008 fc31 	bl	800dbac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	24000da0 	.word	0x24000da0

08005354 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005358:	4802      	ldr	r0, [pc, #8]	; (8005364 <DMA1_Stream7_IRQHandler+0x10>)
 800535a:	f003 fc59 	bl	8008c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	24000cb0 	.word	0x24000cb0

08005368 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800536c:	4802      	ldr	r0, [pc, #8]	; (8005378 <TIM5_IRQHandler+0x10>)
 800536e:	f008 fc1d 	bl	800dbac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	24000ed0 	.word	0x24000ed0

0800537c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005380:	4802      	ldr	r0, [pc, #8]	; (800538c <SPI3_IRQHandler+0x10>)
 8005382:	f007 fd95 	bl	800ceb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	24000c28 	.word	0x24000c28

08005390 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005394:	4802      	ldr	r0, [pc, #8]	; (80053a0 <UART4_IRQHandler+0x10>)
 8005396:	f009 ff07 	bl	800f1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	240015b8 	.word	0x240015b8

080053a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80053a8:	4802      	ldr	r0, [pc, #8]	; (80053b4 <TIM6_DAC_IRQHandler+0x10>)
 80053aa:	f008 fbff 	bl	800dbac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80053ae:	bf00      	nop
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	24000fb4 	.word	0x24000fb4

080053b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80053bc:	4802      	ldr	r0, [pc, #8]	; (80053c8 <TIM7_IRQHandler+0x10>)
 80053be:	f008 fbf5 	bl	800dbac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	2400117c 	.word	0x2400117c

080053cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80053d0:	4802      	ldr	r0, [pc, #8]	; (80053dc <DMA2_Stream0_IRQHandler+0x10>)
 80053d2:	f003 fc1d 	bl	8008c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	24000d28 	.word	0x24000d28

080053e0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80053e4:	4802      	ldr	r0, [pc, #8]	; (80053f0 <UART7_IRQHandler+0x10>)
 80053e6:	f009 fedf 	bl	800f1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80053ea:	bf00      	nop
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	240012b8 	.word	0x240012b8

080053f4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80053f8:	4802      	ldr	r0, [pc, #8]	; (8005404 <TIM16_IRQHandler+0x10>)
 80053fa:	f008 fbd7 	bl	800dbac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	24001130 	.word	0x24001130

08005408 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800540c:	4802      	ldr	r0, [pc, #8]	; (8005418 <TIM17_IRQHandler+0x10>)
 800540e:	f008 fbcd 	bl	800dbac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005412:	bf00      	nop
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	24000e84 	.word	0x24000e84

0800541c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
	return 1;
 8005420:	2301      	movs	r3, #1
}
 8005422:	4618      	mov	r0, r3
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <_kill>:

int _kill(int pid, int sig)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005436:	f00d f965 	bl	8012704 <__errno>
 800543a:	4603      	mov	r3, r0
 800543c:	2216      	movs	r2, #22
 800543e:	601a      	str	r2, [r3, #0]
	return -1;
 8005440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <_exit>:

void _exit (int status)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005454:	f04f 31ff 	mov.w	r1, #4294967295
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff ffe7 	bl	800542c <_kill>
	while (1) {}		/* Make sure we hang here */
 800545e:	e7fe      	b.n	800545e <_exit+0x12>

08005460 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e00a      	b.n	8005488 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005472:	f3af 8000 	nop.w
 8005476:	4601      	mov	r1, r0
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	60ba      	str	r2, [r7, #8]
 800547e:	b2ca      	uxtb	r2, r1
 8005480:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	3301      	adds	r3, #1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	429a      	cmp	r2, r3
 800548e:	dbf0      	blt.n	8005472 <_read+0x12>
	}

return len;
 8005490:	687b      	ldr	r3, [r7, #4]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b086      	sub	sp, #24
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	e009      	b.n	80054c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	60ba      	str	r2, [r7, #8]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	3301      	adds	r3, #1
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	dbf1      	blt.n	80054ac <_write+0x12>
	}
	return len;
 80054c8:	687b      	ldr	r3, [r7, #4]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <_close>:

int _close(int file)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
	return -1;
 80054da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054fa:	605a      	str	r2, [r3, #4]
	return 0;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <_isatty>:

int _isatty(int file)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
	return 1;
 8005512:	2301      	movs	r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
	return 0;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005544:	4a14      	ldr	r2, [pc, #80]	; (8005598 <_sbrk+0x5c>)
 8005546:	4b15      	ldr	r3, [pc, #84]	; (800559c <_sbrk+0x60>)
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005550:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <_sbrk+0x64>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <_sbrk+0x64>)
 800555a:	4a12      	ldr	r2, [pc, #72]	; (80055a4 <_sbrk+0x68>)
 800555c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800555e:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <_sbrk+0x64>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	429a      	cmp	r2, r3
 800556a:	d207      	bcs.n	800557c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800556c:	f00d f8ca 	bl	8012704 <__errno>
 8005570:	4603      	mov	r3, r0
 8005572:	220c      	movs	r2, #12
 8005574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005576:	f04f 33ff 	mov.w	r3, #4294967295
 800557a:	e009      	b.n	8005590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <_sbrk+0x64>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <_sbrk+0x64>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4413      	add	r3, r2
 800558a:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <_sbrk+0x64>)
 800558c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800558e:	68fb      	ldr	r3, [r7, #12]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	24001d68 	.word	0x24001d68
 800559c:	00000400 	.word	0x00000400
 80055a0:	24000bf8 	.word	0x24000bf8
 80055a4:	24001768 	.word	0x24001768

080055a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80055ac:	4b39      	ldr	r3, [pc, #228]	; (8005694 <SystemInit+0xec>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b2:	4a38      	ldr	r2, [pc, #224]	; (8005694 <SystemInit+0xec>)
 80055b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80055bc:	4b36      	ldr	r3, [pc, #216]	; (8005698 <SystemInit+0xf0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	2b06      	cmp	r3, #6
 80055c6:	d807      	bhi.n	80055d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80055c8:	4b33      	ldr	r3, [pc, #204]	; (8005698 <SystemInit+0xf0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f023 030f 	bic.w	r3, r3, #15
 80055d0:	4a31      	ldr	r2, [pc, #196]	; (8005698 <SystemInit+0xf0>)
 80055d2:	f043 0307 	orr.w	r3, r3, #7
 80055d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80055d8:	4b30      	ldr	r3, [pc, #192]	; (800569c <SystemInit+0xf4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2f      	ldr	r2, [pc, #188]	; (800569c <SystemInit+0xf4>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80055e4:	4b2d      	ldr	r3, [pc, #180]	; (800569c <SystemInit+0xf4>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80055ea:	4b2c      	ldr	r3, [pc, #176]	; (800569c <SystemInit+0xf4>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	492b      	ldr	r1, [pc, #172]	; (800569c <SystemInit+0xf4>)
 80055f0:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <SystemInit+0xf8>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80055f6:	4b28      	ldr	r3, [pc, #160]	; (8005698 <SystemInit+0xf0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005602:	4b25      	ldr	r3, [pc, #148]	; (8005698 <SystemInit+0xf0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 030f 	bic.w	r3, r3, #15
 800560a:	4a23      	ldr	r2, [pc, #140]	; (8005698 <SystemInit+0xf0>)
 800560c:	f043 0307 	orr.w	r3, r3, #7
 8005610:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005612:	4b22      	ldr	r3, [pc, #136]	; (800569c <SystemInit+0xf4>)
 8005614:	2200      	movs	r2, #0
 8005616:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005618:	4b20      	ldr	r3, [pc, #128]	; (800569c <SystemInit+0xf4>)
 800561a:	2200      	movs	r2, #0
 800561c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800561e:	4b1f      	ldr	r3, [pc, #124]	; (800569c <SystemInit+0xf4>)
 8005620:	2200      	movs	r2, #0
 8005622:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005624:	4b1d      	ldr	r3, [pc, #116]	; (800569c <SystemInit+0xf4>)
 8005626:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <SystemInit+0xfc>)
 8005628:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800562a:	4b1c      	ldr	r3, [pc, #112]	; (800569c <SystemInit+0xf4>)
 800562c:	4a1e      	ldr	r2, [pc, #120]	; (80056a8 <SystemInit+0x100>)
 800562e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005630:	4b1a      	ldr	r3, [pc, #104]	; (800569c <SystemInit+0xf4>)
 8005632:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <SystemInit+0x104>)
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005636:	4b19      	ldr	r3, [pc, #100]	; (800569c <SystemInit+0xf4>)
 8005638:	2200      	movs	r2, #0
 800563a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800563c:	4b17      	ldr	r3, [pc, #92]	; (800569c <SystemInit+0xf4>)
 800563e:	4a1b      	ldr	r2, [pc, #108]	; (80056ac <SystemInit+0x104>)
 8005640:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005642:	4b16      	ldr	r3, [pc, #88]	; (800569c <SystemInit+0xf4>)
 8005644:	2200      	movs	r2, #0
 8005646:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <SystemInit+0xf4>)
 800564a:	4a18      	ldr	r2, [pc, #96]	; (80056ac <SystemInit+0x104>)
 800564c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <SystemInit+0xf4>)
 8005650:	2200      	movs	r2, #0
 8005652:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005654:	4b11      	ldr	r3, [pc, #68]	; (800569c <SystemInit+0xf4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a10      	ldr	r2, [pc, #64]	; (800569c <SystemInit+0xf4>)
 800565a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800565e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <SystemInit+0xf4>)
 8005662:	2200      	movs	r2, #0
 8005664:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <SystemInit+0x108>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <SystemInit+0x10c>)
 800566c:	4013      	ands	r3, r2
 800566e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005672:	d202      	bcs.n	800567a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005674:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <SystemInit+0x110>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800567a:	4b10      	ldr	r3, [pc, #64]	; (80056bc <SystemInit+0x114>)
 800567c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005680:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005682:	4b04      	ldr	r3, [pc, #16]	; (8005694 <SystemInit+0xec>)
 8005684:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005688:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800568a:	bf00      	nop
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	e000ed00 	.word	0xe000ed00
 8005698:	52002000 	.word	0x52002000
 800569c:	58024400 	.word	0x58024400
 80056a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80056a4:	02020200 	.word	0x02020200
 80056a8:	01ff0000 	.word	0x01ff0000
 80056ac:	01010280 	.word	0x01010280
 80056b0:	5c001000 	.word	0x5c001000
 80056b4:	ffff0000 	.word	0xffff0000
 80056b8:	51008108 	.word	0x51008108
 80056bc:	52004000 	.word	0x52004000

080056c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b09a      	sub	sp, #104	; 0x68
 80056c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]
 80056d0:	609a      	str	r2, [r3, #8]
 80056d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	605a      	str	r2, [r3, #4]
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	60da      	str	r2, [r3, #12]
 80056ee:	611a      	str	r2, [r3, #16]
 80056f0:	615a      	str	r2, [r3, #20]
 80056f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80056f4:	1d3b      	adds	r3, r7, #4
 80056f6:	222c      	movs	r2, #44	; 0x2c
 80056f8:	2100      	movs	r1, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	f00d f82c 	bl	8012758 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005700:	4b44      	ldr	r3, [pc, #272]	; (8005814 <MX_TIM1_Init+0x154>)
 8005702:	4a45      	ldr	r2, [pc, #276]	; (8005818 <MX_TIM1_Init+0x158>)
 8005704:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8005706:	4b43      	ldr	r3, [pc, #268]	; (8005814 <MX_TIM1_Init+0x154>)
 8005708:	22c7      	movs	r2, #199	; 0xc7
 800570a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800570c:	4b41      	ldr	r3, [pc, #260]	; (8005814 <MX_TIM1_Init+0x154>)
 800570e:	2200      	movs	r2, #0
 8005710:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8005712:	4b40      	ldr	r3, [pc, #256]	; (8005814 <MX_TIM1_Init+0x154>)
 8005714:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005718:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800571a:	4b3e      	ldr	r3, [pc, #248]	; (8005814 <MX_TIM1_Init+0x154>)
 800571c:	2200      	movs	r2, #0
 800571e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005720:	4b3c      	ldr	r3, [pc, #240]	; (8005814 <MX_TIM1_Init+0x154>)
 8005722:	2200      	movs	r2, #0
 8005724:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005726:	4b3b      	ldr	r3, [pc, #236]	; (8005814 <MX_TIM1_Init+0x154>)
 8005728:	2280      	movs	r2, #128	; 0x80
 800572a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800572c:	4839      	ldr	r0, [pc, #228]	; (8005814 <MX_TIM1_Init+0x154>)
 800572e:	f007 fe9c 	bl	800d46a <HAL_TIM_Base_Init>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005738:	f7ff faf8 	bl	8004d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800573c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005740:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005742:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005746:	4619      	mov	r1, r3
 8005748:	4832      	ldr	r0, [pc, #200]	; (8005814 <MX_TIM1_Init+0x154>)
 800574a:	f008 fc63 	bl	800e014 <HAL_TIM_ConfigClockSource>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005754:	f7ff faea 	bl	8004d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005758:	482e      	ldr	r0, [pc, #184]	; (8005814 <MX_TIM1_Init+0x154>)
 800575a:	f007 ff84 	bl	800d666 <HAL_TIM_PWM_Init>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005764:	f7ff fae2 	bl	8004d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005768:	2300      	movs	r3, #0
 800576a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800576c:	2300      	movs	r3, #0
 800576e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005770:	2300      	movs	r3, #0
 8005772:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005774:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005778:	4619      	mov	r1, r3
 800577a:	4826      	ldr	r0, [pc, #152]	; (8005814 <MX_TIM1_Init+0x154>)
 800577c:	f009 f99e 	bl	800eabc <HAL_TIMEx_MasterConfigSynchronization>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005786:	f7ff fad1 	bl	8004d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800578a:	2360      	movs	r3, #96	; 0x60
 800578c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800578e:	f240 1339 	movw	r3, #313	; 0x139
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005794:	2300      	movs	r3, #0
 8005796:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005798:	2300      	movs	r3, #0
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800579c:	2300      	movs	r3, #0
 800579e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80057a0:	2300      	movs	r3, #0
 80057a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80057a4:	2300      	movs	r3, #0
 80057a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80057a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057ac:	2204      	movs	r2, #4
 80057ae:	4619      	mov	r1, r3
 80057b0:	4818      	ldr	r0, [pc, #96]	; (8005814 <MX_TIM1_Init+0x154>)
 80057b2:	f008 fb1b 	bl	800ddec <HAL_TIM_PWM_ConfigChannel>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80057bc:	f7ff fab6 	bl	8004d2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80057d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80057de:	2300      	movs	r3, #0
 80057e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80057e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80057f0:	1d3b      	adds	r3, r7, #4
 80057f2:	4619      	mov	r1, r3
 80057f4:	4807      	ldr	r0, [pc, #28]	; (8005814 <MX_TIM1_Init+0x154>)
 80057f6:	f009 f9ef 	bl	800ebd8 <HAL_TIMEx_ConfigBreakDeadTime>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8005800:	f7ff fa94 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005804:	4803      	ldr	r0, [pc, #12]	; (8005814 <MX_TIM1_Init+0x154>)
 8005806:	f000 fdd3 	bl	80063b0 <HAL_TIM_MspPostInit>

}
 800580a:	bf00      	nop
 800580c:	3768      	adds	r7, #104	; 0x68
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	24001000 	.word	0x24001000
 8005818:	40010000 	.word	0x40010000

0800581c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	605a      	str	r2, [r3, #4]
 800582c:	609a      	str	r2, [r3, #8]
 800582e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005830:	f107 031c 	add.w	r3, r7, #28
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800583c:	463b      	mov	r3, r7
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	605a      	str	r2, [r3, #4]
 8005844:	609a      	str	r2, [r3, #8]
 8005846:	60da      	str	r2, [r3, #12]
 8005848:	611a      	str	r2, [r3, #16]
 800584a:	615a      	str	r2, [r3, #20]
 800584c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800584e:	4b2e      	ldr	r3, [pc, #184]	; (8005908 <MX_TIM2_Init+0xec>)
 8005850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005854:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8005856:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <MX_TIM2_Init+0xec>)
 8005858:	22c7      	movs	r2, #199	; 0xc7
 800585a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800585c:	4b2a      	ldr	r3, [pc, #168]	; (8005908 <MX_TIM2_Init+0xec>)
 800585e:	2200      	movs	r2, #0
 8005860:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8005862:	4b29      	ldr	r3, [pc, #164]	; (8005908 <MX_TIM2_Init+0xec>)
 8005864:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800586a:	4b27      	ldr	r3, [pc, #156]	; (8005908 <MX_TIM2_Init+0xec>)
 800586c:	2200      	movs	r2, #0
 800586e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005870:	4b25      	ldr	r3, [pc, #148]	; (8005908 <MX_TIM2_Init+0xec>)
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005876:	4824      	ldr	r0, [pc, #144]	; (8005908 <MX_TIM2_Init+0xec>)
 8005878:	f007 fdf7 	bl	800d46a <HAL_TIM_Base_Init>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005882:	f7ff fa53 	bl	8004d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800588c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005890:	4619      	mov	r1, r3
 8005892:	481d      	ldr	r0, [pc, #116]	; (8005908 <MX_TIM2_Init+0xec>)
 8005894:	f008 fbbe 	bl	800e014 <HAL_TIM_ConfigClockSource>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800589e:	f7ff fa45 	bl	8004d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80058a2:	4819      	ldr	r0, [pc, #100]	; (8005908 <MX_TIM2_Init+0xec>)
 80058a4:	f007 fedf 	bl	800d666 <HAL_TIM_PWM_Init>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80058ae:	f7ff fa3d 	bl	8004d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80058ba:	f107 031c 	add.w	r3, r7, #28
 80058be:	4619      	mov	r1, r3
 80058c0:	4811      	ldr	r0, [pc, #68]	; (8005908 <MX_TIM2_Init+0xec>)
 80058c2:	f009 f8fb 	bl	800eabc <HAL_TIMEx_MasterConfigSynchronization>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80058cc:	f7ff fa2e 	bl	8004d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058d0:	2360      	movs	r3, #96	; 0x60
 80058d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80058d4:	f240 1339 	movw	r3, #313	; 0x139
 80058d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058da:	2300      	movs	r3, #0
 80058dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058de:	2300      	movs	r3, #0
 80058e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80058e2:	463b      	mov	r3, r7
 80058e4:	2208      	movs	r2, #8
 80058e6:	4619      	mov	r1, r3
 80058e8:	4807      	ldr	r0, [pc, #28]	; (8005908 <MX_TIM2_Init+0xec>)
 80058ea:	f008 fa7f 	bl	800ddec <HAL_TIM_PWM_ConfigChannel>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80058f4:	f7ff fa1a 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80058f8:	4803      	ldr	r0, [pc, #12]	; (8005908 <MX_TIM2_Init+0xec>)
 80058fa:	f000 fd59 	bl	80063b0 <HAL_TIM_MspPostInit>

}
 80058fe:	bf00      	nop
 8005900:	3738      	adds	r7, #56	; 0x38
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	2400104c 	.word	0x2400104c

0800590c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08e      	sub	sp, #56	; 0x38
 8005910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
 800591c:	609a      	str	r2, [r3, #8]
 800591e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005920:	f107 031c 	add.w	r3, r7, #28
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800592c:	463b      	mov	r3, r7
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	605a      	str	r2, [r3, #4]
 8005934:	609a      	str	r2, [r3, #8]
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	611a      	str	r2, [r3, #16]
 800593a:	615a      	str	r2, [r3, #20]
 800593c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800593e:	4b2d      	ldr	r3, [pc, #180]	; (80059f4 <MX_TIM3_Init+0xe8>)
 8005940:	4a2d      	ldr	r2, [pc, #180]	; (80059f8 <MX_TIM3_Init+0xec>)
 8005942:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005944:	4b2b      	ldr	r3, [pc, #172]	; (80059f4 <MX_TIM3_Init+0xe8>)
 8005946:	22c7      	movs	r2, #199	; 0xc7
 8005948:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800594a:	4b2a      	ldr	r3, [pc, #168]	; (80059f4 <MX_TIM3_Init+0xe8>)
 800594c:	2200      	movs	r2, #0
 800594e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8005950:	4b28      	ldr	r3, [pc, #160]	; (80059f4 <MX_TIM3_Init+0xe8>)
 8005952:	f640 125f 	movw	r2, #2399	; 0x95f
 8005956:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005958:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <MX_TIM3_Init+0xe8>)
 800595a:	2200      	movs	r2, #0
 800595c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800595e:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <MX_TIM3_Init+0xe8>)
 8005960:	2280      	movs	r2, #128	; 0x80
 8005962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005964:	4823      	ldr	r0, [pc, #140]	; (80059f4 <MX_TIM3_Init+0xe8>)
 8005966:	f007 fd80 	bl	800d46a <HAL_TIM_Base_Init>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005970:	f7ff f9dc 	bl	8004d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800597a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800597e:	4619      	mov	r1, r3
 8005980:	481c      	ldr	r0, [pc, #112]	; (80059f4 <MX_TIM3_Init+0xe8>)
 8005982:	f008 fb47 	bl	800e014 <HAL_TIM_ConfigClockSource>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800598c:	f7ff f9ce 	bl	8004d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005990:	4818      	ldr	r0, [pc, #96]	; (80059f4 <MX_TIM3_Init+0xe8>)
 8005992:	f007 fe68 	bl	800d666 <HAL_TIM_PWM_Init>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800599c:	f7ff f9c6 	bl	8004d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80059a8:	f107 031c 	add.w	r3, r7, #28
 80059ac:	4619      	mov	r1, r3
 80059ae:	4811      	ldr	r0, [pc, #68]	; (80059f4 <MX_TIM3_Init+0xe8>)
 80059b0:	f009 f884 	bl	800eabc <HAL_TIMEx_MasterConfigSynchronization>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80059ba:	f7ff f9b7 	bl	8004d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059be:	2360      	movs	r3, #96	; 0x60
 80059c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059ce:	463b      	mov	r3, r7
 80059d0:	2200      	movs	r2, #0
 80059d2:	4619      	mov	r1, r3
 80059d4:	4807      	ldr	r0, [pc, #28]	; (80059f4 <MX_TIM3_Init+0xe8>)
 80059d6:	f008 fa09 	bl	800ddec <HAL_TIM_PWM_ConfigChannel>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80059e0:	f7ff f9a4 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80059e4:	4803      	ldr	r0, [pc, #12]	; (80059f4 <MX_TIM3_Init+0xe8>)
 80059e6:	f000 fce3 	bl	80063b0 <HAL_TIM_MspPostInit>

}
 80059ea:	bf00      	nop
 80059ec:	3738      	adds	r7, #56	; 0x38
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	24000f1c 	.word	0x24000f1c
 80059f8:	40000400 	.word	0x40000400

080059fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08e      	sub	sp, #56	; 0x38
 8005a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	605a      	str	r2, [r3, #4]
 8005a0c:	609a      	str	r2, [r3, #8]
 8005a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a10:	f107 031c 	add.w	r3, r7, #28
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	605a      	str	r2, [r3, #4]
 8005a24:	609a      	str	r2, [r3, #8]
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	611a      	str	r2, [r3, #16]
 8005a2a:	615a      	str	r2, [r3, #20]
 8005a2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005a2e:	4b2d      	ldr	r3, [pc, #180]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005a30:	4a2d      	ldr	r2, [pc, #180]	; (8005ae8 <MX_TIM4_Init+0xec>)
 8005a32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005a34:	4b2b      	ldr	r3, [pc, #172]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005a36:	22ef      	movs	r2, #239	; 0xef
 8005a38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8005a40:	4b28      	ldr	r3, [pc, #160]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005a42:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005a46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a48:	4b26      	ldr	r3, [pc, #152]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a4e:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005a50:	2280      	movs	r2, #128	; 0x80
 8005a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005a54:	4823      	ldr	r0, [pc, #140]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005a56:	f007 fd08 	bl	800d46a <HAL_TIM_Base_Init>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005a60:	f7ff f964 	bl	8004d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a6e:	4619      	mov	r1, r3
 8005a70:	481c      	ldr	r0, [pc, #112]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005a72:	f008 facf 	bl	800e014 <HAL_TIM_ConfigClockSource>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005a7c:	f7ff f956 	bl	8004d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005a80:	4818      	ldr	r0, [pc, #96]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005a82:	f007 fdf0 	bl	800d666 <HAL_TIM_PWM_Init>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005a8c:	f7ff f94e 	bl	8004d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005a98:	f107 031c 	add.w	r3, r7, #28
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4811      	ldr	r0, [pc, #68]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005aa0:	f009 f80c 	bl	800eabc <HAL_TIMEx_MasterConfigSynchronization>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005aaa:	f7ff f93f 	bl	8004d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005aae:	2360      	movs	r3, #96	; 0x60
 8005ab0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005abe:	463b      	mov	r3, r7
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4807      	ldr	r0, [pc, #28]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005ac6:	f008 f991 	bl	800ddec <HAL_TIM_PWM_ConfigChannel>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005ad0:	f7ff f92c 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005ad4:	4803      	ldr	r0, [pc, #12]	; (8005ae4 <MX_TIM4_Init+0xe8>)
 8005ad6:	f000 fc6b 	bl	80063b0 <HAL_TIM_MspPostInit>

}
 8005ada:	bf00      	nop
 8005adc:	3738      	adds	r7, #56	; 0x38
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	24000dec 	.word	0x24000dec
 8005ae8:	40000800 	.word	0x40000800

08005aec <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005af2:	f107 0310 	add.w	r3, r7, #16
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <MX_TIM5_Init+0x94>)
 8005b0c:	4a1d      	ldr	r2, [pc, #116]	; (8005b84 <MX_TIM5_Init+0x98>)
 8005b0e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8005b10:	4b1b      	ldr	r3, [pc, #108]	; (8005b80 <MX_TIM5_Init+0x94>)
 8005b12:	22c7      	movs	r2, #199	; 0xc7
 8005b14:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b16:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <MX_TIM5_Init+0x94>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005b1c:	4b18      	ldr	r3, [pc, #96]	; (8005b80 <MX_TIM5_Init+0x94>)
 8005b1e:	f642 62df 	movw	r2, #11999	; 0x2edf
 8005b22:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b24:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <MX_TIM5_Init+0x94>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <MX_TIM5_Init+0x94>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005b30:	4813      	ldr	r0, [pc, #76]	; (8005b80 <MX_TIM5_Init+0x94>)
 8005b32:	f007 fc9a 	bl	800d46a <HAL_TIM_Base_Init>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005b3c:	f7ff f8f6 	bl	8004d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005b46:	f107 0310 	add.w	r3, r7, #16
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	480c      	ldr	r0, [pc, #48]	; (8005b80 <MX_TIM5_Init+0x94>)
 8005b4e:	f008 fa61 	bl	800e014 <HAL_TIM_ConfigClockSource>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005b58:	f7ff f8e8 	bl	8004d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005b64:	1d3b      	adds	r3, r7, #4
 8005b66:	4619      	mov	r1, r3
 8005b68:	4805      	ldr	r0, [pc, #20]	; (8005b80 <MX_TIM5_Init+0x94>)
 8005b6a:	f008 ffa7 	bl	800eabc <HAL_TIMEx_MasterConfigSynchronization>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005b74:	f7ff f8da 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005b78:	bf00      	nop
 8005b7a:	3720      	adds	r7, #32
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	24000ed0 	.word	0x24000ed0
 8005b84:	40000c00 	.word	0x40000c00

08005b88 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b8e:	1d3b      	adds	r3, r7, #4
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	605a      	str	r2, [r3, #4]
 8005b96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005b98:	4b14      	ldr	r3, [pc, #80]	; (8005bec <MX_TIM6_Init+0x64>)
 8005b9a:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <MX_TIM6_Init+0x68>)
 8005b9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <MX_TIM6_Init+0x64>)
 8005ba0:	22c7      	movs	r2, #199	; 0xc7
 8005ba2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ba4:	4b11      	ldr	r3, [pc, #68]	; (8005bec <MX_TIM6_Init+0x64>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8005baa:	4b10      	ldr	r3, [pc, #64]	; (8005bec <MX_TIM6_Init+0x64>)
 8005bac:	f241 726f 	movw	r2, #5999	; 0x176f
 8005bb0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005bb2:	4b0e      	ldr	r3, [pc, #56]	; (8005bec <MX_TIM6_Init+0x64>)
 8005bb4:	2280      	movs	r2, #128	; 0x80
 8005bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005bb8:	480c      	ldr	r0, [pc, #48]	; (8005bec <MX_TIM6_Init+0x64>)
 8005bba:	f007 fc56 	bl	800d46a <HAL_TIM_Base_Init>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005bc4:	f7ff f8b2 	bl	8004d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005bd0:	1d3b      	adds	r3, r7, #4
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4805      	ldr	r0, [pc, #20]	; (8005bec <MX_TIM6_Init+0x64>)
 8005bd6:	f008 ff71 	bl	800eabc <HAL_TIMEx_MasterConfigSynchronization>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005be0:	f7ff f8a4 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	24000fb4 	.word	0x24000fb4
 8005bf0:	40001000 	.word	0x40001000

08005bf4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005c04:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <MX_TIM7_Init+0x64>)
 8005c06:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <MX_TIM7_Init+0x68>)
 8005c08:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005c0a:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <MX_TIM7_Init+0x64>)
 8005c0c:	22c7      	movs	r2, #199	; 0xc7
 8005c0e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c10:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <MX_TIM7_Init+0x64>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <MX_TIM7_Init+0x64>)
 8005c18:	f240 42af 	movw	r2, #1199	; 0x4af
 8005c1c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c1e:	4b0e      	ldr	r3, [pc, #56]	; (8005c58 <MX_TIM7_Init+0x64>)
 8005c20:	2280      	movs	r2, #128	; 0x80
 8005c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005c24:	480c      	ldr	r0, [pc, #48]	; (8005c58 <MX_TIM7_Init+0x64>)
 8005c26:	f007 fc20 	bl	800d46a <HAL_TIM_Base_Init>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005c30:	f7ff f87c 	bl	8004d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c34:	2300      	movs	r3, #0
 8005c36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005c3c:	1d3b      	adds	r3, r7, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4805      	ldr	r0, [pc, #20]	; (8005c58 <MX_TIM7_Init+0x64>)
 8005c42:	f008 ff3b 	bl	800eabc <HAL_TIMEx_MasterConfigSynchronization>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005c4c:	f7ff f86e 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	2400117c 	.word	0x2400117c
 8005c5c:	40001400 	.word	0x40001400

08005c60 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08c      	sub	sp, #48	; 0x30
 8005c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005c66:	f107 030c 	add.w	r3, r7, #12
 8005c6a:	2224      	movs	r2, #36	; 0x24
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f00c fd72 	bl	8012758 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c74:	463b      	mov	r3, r7
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	605a      	str	r2, [r3, #4]
 8005c7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005c7e:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <MX_TIM8_Init+0xac>)
 8005c80:	4a23      	ldr	r2, [pc, #140]	; (8005d10 <MX_TIM8_Init+0xb0>)
 8005c82:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005c84:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <MX_TIM8_Init+0xac>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c8a:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <MX_TIM8_Init+0xac>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2048-1;
 8005c90:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <MX_TIM8_Init+0xac>)
 8005c92:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005c96:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c98:	4b1c      	ldr	r3, [pc, #112]	; (8005d0c <MX_TIM8_Init+0xac>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <MX_TIM8_Init+0xac>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ca4:	4b19      	ldr	r3, [pc, #100]	; (8005d0c <MX_TIM8_Init+0xac>)
 8005ca6:	2280      	movs	r2, #128	; 0x80
 8005ca8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005caa:	2303      	movs	r3, #3
 8005cac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005cba:	230f      	movs	r3, #15
 8005cbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005cca:	230f      	movs	r3, #15
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005cce:	f107 030c 	add.w	r3, r7, #12
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	480d      	ldr	r0, [pc, #52]	; (8005d0c <MX_TIM8_Init+0xac>)
 8005cd6:	f007 fe35 	bl	800d944 <HAL_TIM_Encoder_Init>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005ce0:	f7ff f824 	bl	8004d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4805      	ldr	r0, [pc, #20]	; (8005d0c <MX_TIM8_Init+0xac>)
 8005cf6:	f008 fee1 	bl	800eabc <HAL_TIMEx_MasterConfigSynchronization>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005d00:	f7ff f814 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005d04:	bf00      	nop
 8005d06:	3730      	adds	r7, #48	; 0x30
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	24000da0 	.word	0x24000da0
 8005d10:	40010400 	.word	0x40010400

08005d14 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	605a      	str	r2, [r3, #4]
 8005d22:	609a      	str	r2, [r3, #8]
 8005d24:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005d26:	4b16      	ldr	r3, [pc, #88]	; (8005d80 <MX_TIM12_Init+0x6c>)
 8005d28:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <MX_TIM12_Init+0x70>)
 8005d2a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005d2c:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <MX_TIM12_Init+0x6c>)
 8005d2e:	22c7      	movs	r2, #199	; 0xc7
 8005d30:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <MX_TIM12_Init+0x6c>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005d38:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <MX_TIM12_Init+0x6c>)
 8005d3a:	f240 2257 	movw	r2, #599	; 0x257
 8005d3e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d40:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <MX_TIM12_Init+0x6c>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d46:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <MX_TIM12_Init+0x6c>)
 8005d48:	2280      	movs	r2, #128	; 0x80
 8005d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005d4c:	480c      	ldr	r0, [pc, #48]	; (8005d80 <MX_TIM12_Init+0x6c>)
 8005d4e:	f007 fb8c 	bl	800d46a <HAL_TIM_Base_Init>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005d58:	f7fe ffe8 	bl	8004d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d60:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005d62:	463b      	mov	r3, r7
 8005d64:	4619      	mov	r1, r3
 8005d66:	4806      	ldr	r0, [pc, #24]	; (8005d80 <MX_TIM12_Init+0x6c>)
 8005d68:	f008 f954 	bl	800e014 <HAL_TIM_ConfigClockSource>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8005d72:	f7fe ffdb 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	240010e4 	.word	0x240010e4
 8005d84:	40001800 	.word	0x40001800

08005d88 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <MX_TIM13_Init+0x40>)
 8005d8e:	4a0f      	ldr	r2, [pc, #60]	; (8005dcc <MX_TIM13_Init+0x44>)
 8005d90:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8005d92:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <MX_TIM13_Init+0x40>)
 8005d94:	22c7      	movs	r2, #199	; 0xc7
 8005d96:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <MX_TIM13_Init+0x40>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <MX_TIM13_Init+0x40>)
 8005da0:	f240 2257 	movw	r2, #599	; 0x257
 8005da4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005da6:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <MX_TIM13_Init+0x40>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <MX_TIM13_Init+0x40>)
 8005dae:	2280      	movs	r2, #128	; 0x80
 8005db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005db2:	4805      	ldr	r0, [pc, #20]	; (8005dc8 <MX_TIM13_Init+0x40>)
 8005db4:	f007 fb59 	bl	800d46a <HAL_TIM_Base_Init>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005dbe:	f7fe ffb5 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005dc2:	bf00      	nop
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	24000f68 	.word	0x24000f68
 8005dcc:	40001c00 	.word	0x40001c00

08005dd0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005dd4:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <MX_TIM14_Init+0x40>)
 8005dd6:	4a0f      	ldr	r2, [pc, #60]	; (8005e14 <MX_TIM14_Init+0x44>)
 8005dd8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005dda:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <MX_TIM14_Init+0x40>)
 8005ddc:	22c7      	movs	r2, #199	; 0xc7
 8005dde:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005de0:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <MX_TIM14_Init+0x40>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8005de6:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <MX_TIM14_Init+0x40>)
 8005de8:	f640 125f 	movw	r2, #2399	; 0x95f
 8005dec:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <MX_TIM14_Init+0x40>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005df4:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <MX_TIM14_Init+0x40>)
 8005df6:	2280      	movs	r2, #128	; 0x80
 8005df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005dfa:	4805      	ldr	r0, [pc, #20]	; (8005e10 <MX_TIM14_Init+0x40>)
 8005dfc:	f007 fb35 	bl	800d46a <HAL_TIM_Base_Init>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005e06:	f7fe ff91 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	24001098 	.word	0x24001098
 8005e14:	40002000 	.word	0x40002000

08005e18 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b09a      	sub	sp, #104	; 0x68
 8005e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	605a      	str	r2, [r3, #4]
 8005e28:	609a      	str	r2, [r3, #8]
 8005e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	609a      	str	r2, [r3, #8]
 8005e44:	60da      	str	r2, [r3, #12]
 8005e46:	611a      	str	r2, [r3, #16]
 8005e48:	615a      	str	r2, [r3, #20]
 8005e4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e4c:	1d3b      	adds	r3, r7, #4
 8005e4e:	222c      	movs	r2, #44	; 0x2c
 8005e50:	2100      	movs	r1, #0
 8005e52:	4618      	mov	r0, r3
 8005e54:	f00c fc80 	bl	8012758 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005e58:	4b3f      	ldr	r3, [pc, #252]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005e5a:	4a40      	ldr	r2, [pc, #256]	; (8005f5c <MX_TIM15_Init+0x144>)
 8005e5c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8005e5e:	4b3e      	ldr	r3, [pc, #248]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005e60:	22ef      	movs	r2, #239	; 0xef
 8005e62:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e64:	4b3c      	ldr	r3, [pc, #240]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8005e6a:	4b3b      	ldr	r3, [pc, #236]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005e6c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005e70:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e72:	4b39      	ldr	r3, [pc, #228]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005e78:	4b37      	ldr	r3, [pc, #220]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e7e:	4b36      	ldr	r3, [pc, #216]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005e80:	2280      	movs	r2, #128	; 0x80
 8005e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005e84:	4834      	ldr	r0, [pc, #208]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005e86:	f007 faf0 	bl	800d46a <HAL_TIM_Base_Init>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8005e90:	f7fe ff4c 	bl	8004d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e98:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005e9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	482d      	ldr	r0, [pc, #180]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005ea2:	f008 f8b7 	bl	800e014 <HAL_TIM_ConfigClockSource>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005eac:	f7fe ff3e 	bl	8004d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005eb0:	4829      	ldr	r0, [pc, #164]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005eb2:	f007 fbd8 	bl	800d666 <HAL_TIM_PWM_Init>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005ebc:	f7fe ff36 	bl	8004d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005ec8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4822      	ldr	r0, [pc, #136]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005ed0:	f008 fdf4 	bl	800eabc <HAL_TIMEx_MasterConfigSynchronization>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8005eda:	f7fe ff27 	bl	8004d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ede:	2360      	movs	r3, #96	; 0x60
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8005ee2:	f240 1339 	movw	r3, #313	; 0x139
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005eec:	2300      	movs	r3, #0
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005efc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f00:	2204      	movs	r2, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4814      	ldr	r0, [pc, #80]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005f06:	f007 ff71 	bl	800ddec <HAL_TIM_PWM_ConfigChannel>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005f10:	f7fe ff0c 	bl	8004d2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f32:	2300      	movs	r3, #0
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005f36:	1d3b      	adds	r3, r7, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4807      	ldr	r0, [pc, #28]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005f3c:	f008 fe4c 	bl	800ebd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8005f46:	f7fe fef1 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005f4a:	4803      	ldr	r0, [pc, #12]	; (8005f58 <MX_TIM15_Init+0x140>)
 8005f4c:	f000 fa30 	bl	80063b0 <HAL_TIM_MspPostInit>

}
 8005f50:	bf00      	nop
 8005f52:	3768      	adds	r7, #104	; 0x68
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	24000e38 	.word	0x24000e38
 8005f5c:	40014000 	.word	0x40014000

08005f60 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005f64:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <MX_TIM16_Init+0x44>)
 8005f66:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <MX_TIM16_Init+0x48>)
 8005f68:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8005f6a:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <MX_TIM16_Init+0x44>)
 8005f6c:	22ef      	movs	r2, #239	; 0xef
 8005f6e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f70:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <MX_TIM16_Init+0x44>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <MX_TIM16_Init+0x44>)
 8005f78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f7c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <MX_TIM16_Init+0x44>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005f84:	4b07      	ldr	r3, [pc, #28]	; (8005fa4 <MX_TIM16_Init+0x44>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f8a:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <MX_TIM16_Init+0x44>)
 8005f8c:	2280      	movs	r2, #128	; 0x80
 8005f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005f90:	4804      	ldr	r0, [pc, #16]	; (8005fa4 <MX_TIM16_Init+0x44>)
 8005f92:	f007 fa6a 	bl	800d46a <HAL_TIM_Base_Init>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005f9c:	f7fe fec6 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005fa0:	bf00      	nop
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	24001130 	.word	0x24001130
 8005fa8:	40014400 	.word	0x40014400

08005fac <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005fb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ff0 <MX_TIM17_Init+0x44>)
 8005fb2:	4a10      	ldr	r2, [pc, #64]	; (8005ff4 <MX_TIM17_Init+0x48>)
 8005fb4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 240-1;
 8005fb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <MX_TIM17_Init+0x44>)
 8005fb8:	22ef      	movs	r2, #239	; 0xef
 8005fba:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <MX_TIM17_Init+0x44>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <MX_TIM17_Init+0x44>)
 8005fc4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005fc8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <MX_TIM17_Init+0x44>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005fd0:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <MX_TIM17_Init+0x44>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <MX_TIM17_Init+0x44>)
 8005fd8:	2280      	movs	r2, #128	; 0x80
 8005fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005fdc:	4804      	ldr	r0, [pc, #16]	; (8005ff0 <MX_TIM17_Init+0x44>)
 8005fde:	f007 fa44 	bl	800d46a <HAL_TIM_Base_Init>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8005fe8:	f7fe fea0 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005fec:	bf00      	nop
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	24000e84 	.word	0x24000e84
 8005ff4:	40014800 	.word	0x40014800

08005ff8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b090      	sub	sp, #64	; 0x40
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4aa8      	ldr	r2, [pc, #672]	; (80062a8 <HAL_TIM_Base_MspInit+0x2b0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d10f      	bne.n	800602a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800600a:	4ba8      	ldr	r3, [pc, #672]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 800600c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006010:	4aa6      	ldr	r2, [pc, #664]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800601a:	4ba4      	ldr	r3, [pc, #656]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 800601c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006028:	e13a      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006032:	d10f      	bne.n	8006054 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006034:	4b9d      	ldr	r3, [pc, #628]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800603a:	4a9c      	ldr	r2, [pc, #624]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 800603c:	f043 0301 	orr.w	r3, r3, #1
 8006040:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006044:	4b99      	ldr	r3, [pc, #612]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006052:	e125      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a95      	ldr	r2, [pc, #596]	; (80062b0 <HAL_TIM_Base_MspInit+0x2b8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d10f      	bne.n	800607e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800605e:	4b93      	ldr	r3, [pc, #588]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006064:	4a91      	ldr	r2, [pc, #580]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006066:	f043 0302 	orr.w	r3, r3, #2
 800606a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800606e:	4b8f      	ldr	r3, [pc, #572]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800607c:	e110      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a8c      	ldr	r2, [pc, #560]	; (80062b4 <HAL_TIM_Base_MspInit+0x2bc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d10f      	bne.n	80060a8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006088:	4b88      	ldr	r3, [pc, #544]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 800608a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800608e:	4a87      	ldr	r2, [pc, #540]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006090:	f043 0304 	orr.w	r3, r3, #4
 8006094:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006098:	4b84      	ldr	r3, [pc, #528]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 800609a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80060a6:	e0fb      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a82      	ldr	r2, [pc, #520]	; (80062b8 <HAL_TIM_Base_MspInit+0x2c0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d117      	bne.n	80060e2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80060b2:	4b7e      	ldr	r3, [pc, #504]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80060b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060b8:	4a7c      	ldr	r2, [pc, #496]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80060ba:	f043 0308 	orr.w	r3, r3, #8
 80060be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80060c2:	4b7a      	ldr	r3, [pc, #488]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80060c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80060d0:	2200      	movs	r2, #0
 80060d2:	2100      	movs	r1, #0
 80060d4:	2032      	movs	r0, #50	; 0x32
 80060d6:	f001 f834 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80060da:	2032      	movs	r0, #50	; 0x32
 80060dc:	f001 f84b 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 80060e0:	e0de      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a75      	ldr	r2, [pc, #468]	; (80062bc <HAL_TIM_Base_MspInit+0x2c4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d117      	bne.n	800611c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80060ec:	4b6f      	ldr	r3, [pc, #444]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80060ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060f2:	4a6e      	ldr	r2, [pc, #440]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80060f4:	f043 0310 	orr.w	r3, r3, #16
 80060f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80060fc:	4b6b      	ldr	r3, [pc, #428]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80060fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800610a:	2200      	movs	r2, #0
 800610c:	2100      	movs	r1, #0
 800610e:	2036      	movs	r0, #54	; 0x36
 8006110:	f001 f817 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006114:	2036      	movs	r0, #54	; 0x36
 8006116:	f001 f82e 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 800611a:	e0c1      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a67      	ldr	r2, [pc, #412]	; (80062c0 <HAL_TIM_Base_MspInit+0x2c8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d117      	bne.n	8006156 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006126:	4b61      	ldr	r3, [pc, #388]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800612c:	4a5f      	ldr	r2, [pc, #380]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 800612e:	f043 0320 	orr.w	r3, r3, #32
 8006132:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006136:	4b5d      	ldr	r3, [pc, #372]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006144:	2200      	movs	r2, #0
 8006146:	2100      	movs	r1, #0
 8006148:	2037      	movs	r0, #55	; 0x37
 800614a:	f000 fffa 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800614e:	2037      	movs	r0, #55	; 0x37
 8006150:	f001 f811 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 8006154:	e0a4      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a5a      	ldr	r2, [pc, #360]	; (80062c4 <HAL_TIM_Base_MspInit+0x2cc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d117      	bne.n	8006190 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8006160:	4b52      	ldr	r3, [pc, #328]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006166:	4a51      	ldr	r2, [pc, #324]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800616c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006170:	4b4e      	ldr	r3, [pc, #312]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	623b      	str	r3, [r7, #32]
 800617c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800617e:	2200      	movs	r2, #0
 8006180:	2100      	movs	r1, #0
 8006182:	202b      	movs	r0, #43	; 0x2b
 8006184:	f000 ffdd 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8006188:	202b      	movs	r0, #43	; 0x2b
 800618a:	f000 fff4 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 800618e:	e087      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a4c      	ldr	r2, [pc, #304]	; (80062c8 <HAL_TIM_Base_MspInit+0x2d0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d117      	bne.n	80061ca <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800619a:	4b44      	ldr	r3, [pc, #272]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 800619c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061a0:	4a42      	ldr	r2, [pc, #264]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061aa:	4b40      	ldr	r3, [pc, #256]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80061ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80061b8:	2200      	movs	r2, #0
 80061ba:	2100      	movs	r1, #0
 80061bc:	202c      	movs	r0, #44	; 0x2c
 80061be:	f000 ffc0 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80061c2:	202c      	movs	r0, #44	; 0x2c
 80061c4:	f000 ffd7 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 80061c8:	e06a      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a3f      	ldr	r2, [pc, #252]	; (80062cc <HAL_TIM_Base_MspInit+0x2d4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d117      	bne.n	8006204 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80061d4:	4b35      	ldr	r3, [pc, #212]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80061d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061da:	4a34      	ldr	r2, [pc, #208]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80061dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061e4:	4b31      	ldr	r3, [pc, #196]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 80061e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80061f2:	2200      	movs	r2, #0
 80061f4:	2100      	movs	r1, #0
 80061f6:	202d      	movs	r0, #45	; 0x2d
 80061f8:	f000 ffa3 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80061fc:	202d      	movs	r0, #45	; 0x2d
 80061fe:	f000 ffba 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 8006202:	e04d      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a31      	ldr	r2, [pc, #196]	; (80062d0 <HAL_TIM_Base_MspInit+0x2d8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d10f      	bne.n	800622e <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800620e:	4b27      	ldr	r3, [pc, #156]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006214:	4a25      	ldr	r2, [pc, #148]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800621e:	4b23      	ldr	r3, [pc, #140]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	697b      	ldr	r3, [r7, #20]
}
 800622c:	e038      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a28      	ldr	r2, [pc, #160]	; (80062d4 <HAL_TIM_Base_MspInit+0x2dc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d117      	bne.n	8006268 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006238:	4b1c      	ldr	r3, [pc, #112]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 800623a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800623e:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006244:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006248:	4b18      	ldr	r3, [pc, #96]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 800624a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800624e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8006256:	2200      	movs	r2, #0
 8006258:	2100      	movs	r1, #0
 800625a:	2075      	movs	r0, #117	; 0x75
 800625c:	f000 ff71 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8006260:	2075      	movs	r0, #117	; 0x75
 8006262:	f000 ff88 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 8006266:	e01b      	b.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <HAL_TIM_Base_MspInit+0x2e0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d116      	bne.n	80062a0 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006272:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006278:	4a0c      	ldr	r2, [pc, #48]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 800627a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800627e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006282:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <HAL_TIM_Base_MspInit+0x2b4>)
 8006284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8006290:	2200      	movs	r2, #0
 8006292:	2100      	movs	r1, #0
 8006294:	2076      	movs	r0, #118	; 0x76
 8006296:	f000 ff54 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800629a:	2076      	movs	r0, #118	; 0x76
 800629c:	f000 ff6b 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 80062a0:	bf00      	nop
 80062a2:	3740      	adds	r7, #64	; 0x40
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40010000 	.word	0x40010000
 80062ac:	58024400 	.word	0x58024400
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40001000 	.word	0x40001000
 80062c0:	40001400 	.word	0x40001400
 80062c4:	40001800 	.word	0x40001800
 80062c8:	40001c00 	.word	0x40001c00
 80062cc:	40002000 	.word	0x40002000
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40014400 	.word	0x40014400
 80062d8:	40014800 	.word	0x40014800

080062dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e4:	f107 0314 	add.w	r3, r7, #20
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	605a      	str	r2, [r3, #4]
 80062ee:	609a      	str	r2, [r3, #8]
 80062f0:	60da      	str	r2, [r3, #12]
 80062f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <HAL_TIM_Encoder_MspInit+0xc8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d14d      	bne.n	800639a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80062fe:	4b2a      	ldr	r3, [pc, #168]	; (80063a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006304:	4a28      	ldr	r2, [pc, #160]	; (80063a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006306:	f043 0302 	orr.w	r3, r3, #2
 800630a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800630e:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800631c:	4b22      	ldr	r3, [pc, #136]	; (80063a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800631e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006322:	4a21      	ldr	r2, [pc, #132]	; (80063a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006324:	f043 0304 	orr.w	r3, r3, #4
 8006328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800632c:	4b1e      	ldr	r3, [pc, #120]	; (80063a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800632e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800633a:	23c0      	movs	r3, #192	; 0xc0
 800633c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800633e:	2302      	movs	r3, #2
 8006340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006346:	2300      	movs	r3, #0
 8006348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800634a:	2303      	movs	r3, #3
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800634e:	f107 0314 	add.w	r3, r7, #20
 8006352:	4619      	mov	r1, r3
 8006354:	4815      	ldr	r0, [pc, #84]	; (80063ac <HAL_TIM_Encoder_MspInit+0xd0>)
 8006356:	f003 ff6d 	bl	800a234 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800635a:	2200      	movs	r2, #0
 800635c:	2100      	movs	r1, #0
 800635e:	202b      	movs	r0, #43	; 0x2b
 8006360:	f000 feef 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8006364:	202b      	movs	r0, #43	; 0x2b
 8006366:	f000 ff06 	bl	8007176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800636a:	2200      	movs	r2, #0
 800636c:	2100      	movs	r1, #0
 800636e:	202c      	movs	r0, #44	; 0x2c
 8006370:	f000 fee7 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006374:	202c      	movs	r0, #44	; 0x2c
 8006376:	f000 fefe 	bl	8007176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800637a:	2200      	movs	r2, #0
 800637c:	2100      	movs	r1, #0
 800637e:	202d      	movs	r0, #45	; 0x2d
 8006380:	f000 fedf 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006384:	202d      	movs	r0, #45	; 0x2d
 8006386:	f000 fef6 	bl	8007176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800638a:	2200      	movs	r2, #0
 800638c:	2100      	movs	r1, #0
 800638e:	202e      	movs	r0, #46	; 0x2e
 8006390:	f000 fed7 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8006394:	202e      	movs	r0, #46	; 0x2e
 8006396:	f000 feee 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800639a:	bf00      	nop
 800639c:	3728      	adds	r7, #40	; 0x28
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40010400 	.word	0x40010400
 80063a8:	58024400 	.word	0x58024400
 80063ac:	58020800 	.word	0x58020800

080063b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08c      	sub	sp, #48	; 0x30
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063b8:	f107 031c 	add.w	r3, r7, #28
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	609a      	str	r2, [r3, #8]
 80063c4:	60da      	str	r2, [r3, #12]
 80063c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5e      	ldr	r2, [pc, #376]	; (8006548 <HAL_TIM_MspPostInit+0x198>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d120      	bne.n	8006414 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80063d2:	4b5e      	ldr	r3, [pc, #376]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 80063d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063d8:	4a5c      	ldr	r2, [pc, #368]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 80063da:	f043 0310 	orr.w	r3, r3, #16
 80063de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80063e2:	4b5a      	ldr	r3, [pc, #360]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 80063e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80063f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063f6:	2302      	movs	r3, #2
 80063f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063fe:	2300      	movs	r3, #0
 8006400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006402:	2301      	movs	r3, #1
 8006404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8006406:	f107 031c 	add.w	r3, r7, #28
 800640a:	4619      	mov	r1, r3
 800640c:	4850      	ldr	r0, [pc, #320]	; (8006550 <HAL_TIM_MspPostInit+0x1a0>)
 800640e:	f003 ff11 	bl	800a234 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8006412:	e094      	b.n	800653e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641c:	d120      	bne.n	8006460 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800641e:	4b4b      	ldr	r3, [pc, #300]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 8006420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006424:	4a49      	ldr	r2, [pc, #292]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 8006426:	f043 0302 	orr.w	r3, r3, #2
 800642a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800642e:	4b47      	ldr	r3, [pc, #284]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 8006430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 800643c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006442:	2302      	movs	r3, #2
 8006444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006446:	2300      	movs	r3, #0
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800644a:	2300      	movs	r3, #0
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800644e:	2301      	movs	r3, #1
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8006452:	f107 031c 	add.w	r3, r7, #28
 8006456:	4619      	mov	r1, r3
 8006458:	483e      	ldr	r0, [pc, #248]	; (8006554 <HAL_TIM_MspPostInit+0x1a4>)
 800645a:	f003 feeb 	bl	800a234 <HAL_GPIO_Init>
}
 800645e:	e06e      	b.n	800653e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a3c      	ldr	r2, [pc, #240]	; (8006558 <HAL_TIM_MspPostInit+0x1a8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d11f      	bne.n	80064aa <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800646a:	4b38      	ldr	r3, [pc, #224]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 800646c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006470:	4a36      	ldr	r2, [pc, #216]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800647a:	4b34      	ldr	r3, [pc, #208]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 800647c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8006488:	2340      	movs	r3, #64	; 0x40
 800648a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800648c:	2302      	movs	r3, #2
 800648e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006490:	2300      	movs	r3, #0
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006494:	2300      	movs	r3, #0
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006498:	2302      	movs	r3, #2
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 800649c:	f107 031c 	add.w	r3, r7, #28
 80064a0:	4619      	mov	r1, r3
 80064a2:	482e      	ldr	r0, [pc, #184]	; (800655c <HAL_TIM_MspPostInit+0x1ac>)
 80064a4:	f003 fec6 	bl	800a234 <HAL_GPIO_Init>
}
 80064a8:	e049      	b.n	800653e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2c      	ldr	r2, [pc, #176]	; (8006560 <HAL_TIM_MspPostInit+0x1b0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d120      	bne.n	80064f6 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064b4:	4b25      	ldr	r3, [pc, #148]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 80064b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ba:	4a24      	ldr	r2, [pc, #144]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 80064bc:	f043 0302 	orr.w	r3, r3, #2
 80064c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064c4:	4b21      	ldr	r3, [pc, #132]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 80064c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80064d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d8:	2302      	movs	r3, #2
 80064da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064e0:	2300      	movs	r3, #0
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80064e4:	2302      	movs	r3, #2
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80064e8:	f107 031c 	add.w	r3, r7, #28
 80064ec:	4619      	mov	r1, r3
 80064ee:	4819      	ldr	r0, [pc, #100]	; (8006554 <HAL_TIM_MspPostInit+0x1a4>)
 80064f0:	f003 fea0 	bl	800a234 <HAL_GPIO_Init>
}
 80064f4:	e023      	b.n	800653e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1a      	ldr	r2, [pc, #104]	; (8006564 <HAL_TIM_MspPostInit+0x1b4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d11e      	bne.n	800653e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006500:	4b12      	ldr	r3, [pc, #72]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 8006502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006506:	4a11      	ldr	r2, [pc, #68]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 8006508:	f043 0310 	orr.w	r3, r3, #16
 800650c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006510:	4b0e      	ldr	r3, [pc, #56]	; (800654c <HAL_TIM_MspPostInit+0x19c>)
 8006512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	60bb      	str	r3, [r7, #8]
 800651c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800651e:	2340      	movs	r3, #64	; 0x40
 8006520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006522:	2302      	movs	r3, #2
 8006524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006526:	2300      	movs	r3, #0
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800652a:	2300      	movs	r3, #0
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800652e:	2304      	movs	r3, #4
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8006532:	f107 031c 	add.w	r3, r7, #28
 8006536:	4619      	mov	r1, r3
 8006538:	4805      	ldr	r0, [pc, #20]	; (8006550 <HAL_TIM_MspPostInit+0x1a0>)
 800653a:	f003 fe7b 	bl	800a234 <HAL_GPIO_Init>
}
 800653e:	bf00      	nop
 8006540:	3730      	adds	r7, #48	; 0x30
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000
 800654c:	58024400 	.word	0x58024400
 8006550:	58021000 	.word	0x58021000
 8006554:	58020400 	.word	0x58020400
 8006558:	40000400 	.word	0x40000400
 800655c:	58020000 	.word	0x58020000
 8006560:	40000800 	.word	0x40000800
 8006564:	40014000 	.word	0x40014000

08006568 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800656c:	4b25      	ldr	r3, [pc, #148]	; (8006604 <MX_UART4_Init+0x9c>)
 800656e:	4a26      	ldr	r2, [pc, #152]	; (8006608 <MX_UART4_Init+0xa0>)
 8006570:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8006572:	4b24      	ldr	r3, [pc, #144]	; (8006604 <MX_UART4_Init+0x9c>)
 8006574:	4a25      	ldr	r2, [pc, #148]	; (800660c <MX_UART4_Init+0xa4>)
 8006576:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006578:	4b22      	ldr	r3, [pc, #136]	; (8006604 <MX_UART4_Init+0x9c>)
 800657a:	2200      	movs	r2, #0
 800657c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <MX_UART4_Init+0x9c>)
 8006580:	2200      	movs	r2, #0
 8006582:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006584:	4b1f      	ldr	r3, [pc, #124]	; (8006604 <MX_UART4_Init+0x9c>)
 8006586:	2200      	movs	r2, #0
 8006588:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800658a:	4b1e      	ldr	r3, [pc, #120]	; (8006604 <MX_UART4_Init+0x9c>)
 800658c:	220c      	movs	r2, #12
 800658e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006590:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <MX_UART4_Init+0x9c>)
 8006592:	2200      	movs	r2, #0
 8006594:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006596:	4b1b      	ldr	r3, [pc, #108]	; (8006604 <MX_UART4_Init+0x9c>)
 8006598:	2200      	movs	r2, #0
 800659a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800659c:	4b19      	ldr	r3, [pc, #100]	; (8006604 <MX_UART4_Init+0x9c>)
 800659e:	2200      	movs	r2, #0
 80065a0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80065a2:	4b18      	ldr	r3, [pc, #96]	; (8006604 <MX_UART4_Init+0x9c>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80065a8:	4b16      	ldr	r3, [pc, #88]	; (8006604 <MX_UART4_Init+0x9c>)
 80065aa:	2208      	movs	r2, #8
 80065ac:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80065ae:	4b15      	ldr	r3, [pc, #84]	; (8006604 <MX_UART4_Init+0x9c>)
 80065b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80065b6:	4813      	ldr	r0, [pc, #76]	; (8006604 <MX_UART4_Init+0x9c>)
 80065b8:	f008 fbaa 	bl	800ed10 <HAL_UART_Init>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80065c2:	f7fe fbb3 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80065c6:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80065ca:	480e      	ldr	r0, [pc, #56]	; (8006604 <MX_UART4_Init+0x9c>)
 80065cc:	f00a fc3b 	bl	8010e46 <HAL_UARTEx_SetTxFifoThreshold>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <MX_UART4_Init+0x72>
  {
    Error_Handler();
 80065d6:	f7fe fba9 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80065da:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80065de:	4809      	ldr	r0, [pc, #36]	; (8006604 <MX_UART4_Init+0x9c>)
 80065e0:	f00a fc6f 	bl	8010ec2 <HAL_UARTEx_SetRxFifoThreshold>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <MX_UART4_Init+0x86>
  {
    Error_Handler();
 80065ea:	f7fe fb9f 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80065ee:	4805      	ldr	r0, [pc, #20]	; (8006604 <MX_UART4_Init+0x9c>)
 80065f0:	f00a fbb5 	bl	8010d5e <HAL_UARTEx_EnableFifoMode>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <MX_UART4_Init+0x96>
  {
    Error_Handler();
 80065fa:	f7fe fb97 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80065fe:	bf00      	nop
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	240015b8 	.word	0x240015b8
 8006608:	40004c00 	.word	0x40004c00
 800660c:	001e8480 	.word	0x001e8480

08006610 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006614:	4b23      	ldr	r3, [pc, #140]	; (80066a4 <MX_UART7_Init+0x94>)
 8006616:	4a24      	ldr	r2, [pc, #144]	; (80066a8 <MX_UART7_Init+0x98>)
 8006618:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800661a:	4b22      	ldr	r3, [pc, #136]	; (80066a4 <MX_UART7_Init+0x94>)
 800661c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006620:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006622:	4b20      	ldr	r3, [pc, #128]	; (80066a4 <MX_UART7_Init+0x94>)
 8006624:	2200      	movs	r2, #0
 8006626:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006628:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <MX_UART7_Init+0x94>)
 800662a:	2200      	movs	r2, #0
 800662c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800662e:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <MX_UART7_Init+0x94>)
 8006630:	2200      	movs	r2, #0
 8006632:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006634:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <MX_UART7_Init+0x94>)
 8006636:	220c      	movs	r2, #12
 8006638:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800663a:	4b1a      	ldr	r3, [pc, #104]	; (80066a4 <MX_UART7_Init+0x94>)
 800663c:	2200      	movs	r2, #0
 800663e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006640:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <MX_UART7_Init+0x94>)
 8006642:	2200      	movs	r2, #0
 8006644:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006646:	4b17      	ldr	r3, [pc, #92]	; (80066a4 <MX_UART7_Init+0x94>)
 8006648:	2200      	movs	r2, #0
 800664a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800664c:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <MX_UART7_Init+0x94>)
 800664e:	2200      	movs	r2, #0
 8006650:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006652:	4b14      	ldr	r3, [pc, #80]	; (80066a4 <MX_UART7_Init+0x94>)
 8006654:	2200      	movs	r2, #0
 8006656:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006658:	4812      	ldr	r0, [pc, #72]	; (80066a4 <MX_UART7_Init+0x94>)
 800665a:	f008 fb59 	bl	800ed10 <HAL_UART_Init>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8006664:	f7fe fb62 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8006668:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800666c:	480d      	ldr	r0, [pc, #52]	; (80066a4 <MX_UART7_Init+0x94>)
 800666e:	f00a fbea 	bl	8010e46 <HAL_UARTEx_SetTxFifoThreshold>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8006678:	f7fe fb58 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800667c:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8006680:	4808      	ldr	r0, [pc, #32]	; (80066a4 <MX_UART7_Init+0x94>)
 8006682:	f00a fc1e 	bl	8010ec2 <HAL_UARTEx_SetRxFifoThreshold>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 800668c:	f7fe fb4e 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8006690:	4804      	ldr	r0, [pc, #16]	; (80066a4 <MX_UART7_Init+0x94>)
 8006692:	f00a fb64 	bl	8010d5e <HAL_UARTEx_EnableFifoMode>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 800669c:	f7fe fb46 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80066a0:	bf00      	nop
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	240012b8 	.word	0x240012b8
 80066a8:	40007800 	.word	0x40007800

080066ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80066b0:	4b22      	ldr	r3, [pc, #136]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066b2:	4a23      	ldr	r2, [pc, #140]	; (8006740 <MX_USART2_UART_Init+0x94>)
 80066b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80066b6:	4b21      	ldr	r3, [pc, #132]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066be:	4b1f      	ldr	r3, [pc, #124]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80066c4:	4b1d      	ldr	r3, [pc, #116]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80066ca:	4b1c      	ldr	r3, [pc, #112]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066d2:	220c      	movs	r2, #12
 80066d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066d6:	4b19      	ldr	r3, [pc, #100]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066d8:	2200      	movs	r2, #0
 80066da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80066dc:	4b17      	ldr	r3, [pc, #92]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066de:	2200      	movs	r2, #0
 80066e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80066e2:	4b16      	ldr	r3, [pc, #88]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80066e8:	4b14      	ldr	r3, [pc, #80]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80066ee:	4b13      	ldr	r3, [pc, #76]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80066f4:	4811      	ldr	r0, [pc, #68]	; (800673c <MX_USART2_UART_Init+0x90>)
 80066f6:	f008 fb0b 	bl	800ed10 <HAL_UART_Init>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006700:	f7fe fb14 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006704:	2100      	movs	r1, #0
 8006706:	480d      	ldr	r0, [pc, #52]	; (800673c <MX_USART2_UART_Init+0x90>)
 8006708:	f00a fb9d 	bl	8010e46 <HAL_UARTEx_SetTxFifoThreshold>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006712:	f7fe fb0b 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006716:	2100      	movs	r1, #0
 8006718:	4808      	ldr	r0, [pc, #32]	; (800673c <MX_USART2_UART_Init+0x90>)
 800671a:	f00a fbd2 	bl	8010ec2 <HAL_UARTEx_SetRxFifoThreshold>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006724:	f7fe fb02 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006728:	4804      	ldr	r0, [pc, #16]	; (800673c <MX_USART2_UART_Init+0x90>)
 800672a:	f00a fb53 	bl	8010dd4 <HAL_UARTEx_DisableFifoMode>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006734:	f7fe fafa 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006738:	bf00      	nop
 800673a:	bd80      	pop	{r7, pc}
 800673c:	24001648 	.word	0x24001648
 8006740:	40004400 	.word	0x40004400

08006744 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006748:	4b22      	ldr	r3, [pc, #136]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 800674a:	4a23      	ldr	r2, [pc, #140]	; (80067d8 <MX_USART3_UART_Init+0x94>)
 800674c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800674e:	4b21      	ldr	r3, [pc, #132]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 8006750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006754:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006756:	4b1f      	ldr	r3, [pc, #124]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 8006758:	2200      	movs	r2, #0
 800675a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800675c:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 800675e:	2200      	movs	r2, #0
 8006760:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006762:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 8006764:	2200      	movs	r2, #0
 8006766:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006768:	4b1a      	ldr	r3, [pc, #104]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 800676a:	220c      	movs	r2, #12
 800676c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800676e:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 8006770:	2200      	movs	r2, #0
 8006772:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006774:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 8006776:	2200      	movs	r2, #0
 8006778:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800677a:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 800677c:	2200      	movs	r2, #0
 800677e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006780:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 8006782:	2200      	movs	r2, #0
 8006784:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006786:	4b13      	ldr	r3, [pc, #76]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 8006788:	2200      	movs	r2, #0
 800678a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800678c:	4811      	ldr	r0, [pc, #68]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 800678e:	f008 fabf 	bl	800ed10 <HAL_UART_Init>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006798:	f7fe fac8 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800679c:	2100      	movs	r1, #0
 800679e:	480d      	ldr	r0, [pc, #52]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 80067a0:	f00a fb51 	bl	8010e46 <HAL_UARTEx_SetTxFifoThreshold>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80067aa:	f7fe fabf 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80067ae:	2100      	movs	r1, #0
 80067b0:	4808      	ldr	r0, [pc, #32]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 80067b2:	f00a fb86 	bl	8010ec2 <HAL_UARTEx_SetRxFifoThreshold>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80067bc:	f7fe fab6 	bl	8004d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80067c0:	4804      	ldr	r0, [pc, #16]	; (80067d4 <MX_USART3_UART_Init+0x90>)
 80067c2:	f00a fb07 	bl	8010dd4 <HAL_UARTEx_DisableFifoMode>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80067cc:	f7fe faae 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80067d0:	bf00      	nop
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	240013c0 	.word	0x240013c0
 80067d8:	40004800 	.word	0x40004800

080067dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b0be      	sub	sp, #248	; 0xf8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	609a      	str	r2, [r3, #8]
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80067f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067f8:	22bc      	movs	r2, #188	; 0xbc
 80067fa:	2100      	movs	r1, #0
 80067fc:	4618      	mov	r0, r3
 80067fe:	f00b ffab 	bl	8012758 <memset>
  if(uartHandle->Instance==UART4)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4aa1      	ldr	r2, [pc, #644]	; (8006a8c <HAL_UART_MspInit+0x2b0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	f040 80b7 	bne.w	800697c <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800680e:	2302      	movs	r3, #2
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006812:	2300      	movs	r3, #0
 8006814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800681c:	4618      	mov	r0, r3
 800681e:	f004 fedf 	bl	800b5e0 <HAL_RCCEx_PeriphCLKConfig>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006828:	f7fe fa80 	bl	8004d2c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800682c:	4b98      	ldr	r3, [pc, #608]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 800682e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006832:	4a97      	ldr	r2, [pc, #604]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 8006834:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006838:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800683c:	4b94      	ldr	r3, [pc, #592]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 800683e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800684a:	4b91      	ldr	r3, [pc, #580]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 800684c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006850:	4a8f      	ldr	r2, [pc, #572]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 8006852:	f043 0308 	orr.w	r3, r3, #8
 8006856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800685a:	4b8d      	ldr	r3, [pc, #564]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 800685c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	623b      	str	r3, [r7, #32]
 8006866:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006868:	2303      	movs	r3, #3
 800686a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800686e:	2302      	movs	r3, #2
 8006870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006874:	2300      	movs	r3, #0
 8006876:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800687a:	2300      	movs	r3, #0
 800687c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006880:	2308      	movs	r3, #8
 8006882:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006886:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800688a:	4619      	mov	r1, r3
 800688c:	4881      	ldr	r0, [pc, #516]	; (8006a94 <HAL_UART_MspInit+0x2b8>)
 800688e:	f003 fcd1 	bl	800a234 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8006892:	4b81      	ldr	r3, [pc, #516]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 8006894:	4a81      	ldr	r2, [pc, #516]	; (8006a9c <HAL_UART_MspInit+0x2c0>)
 8006896:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8006898:	4b7f      	ldr	r3, [pc, #508]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 800689a:	223f      	movs	r2, #63	; 0x3f
 800689c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800689e:	4b7e      	ldr	r3, [pc, #504]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068a4:	4b7c      	ldr	r3, [pc, #496]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068aa:	4b7b      	ldr	r3, [pc, #492]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068b0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068b2:	4b79      	ldr	r3, [pc, #484]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068b8:	4b77      	ldr	r3, [pc, #476]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80068be:	4b76      	ldr	r3, [pc, #472]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80068c4:	4b74      	ldr	r3, [pc, #464]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80068ca:	4b73      	ldr	r3, [pc, #460]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068cc:	2204      	movs	r2, #4
 80068ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80068d0:	4b71      	ldr	r3, [pc, #452]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068d2:	2203      	movs	r2, #3
 80068d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80068d6:	4b70      	ldr	r3, [pc, #448]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068d8:	2200      	movs	r2, #0
 80068da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80068dc:	4b6e      	ldr	r3, [pc, #440]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80068e2:	486d      	ldr	r0, [pc, #436]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068e4:	f000 fe6c 	bl	80075c0 <HAL_DMA_Init>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80068ee:	f7fe fa1d 	bl	8004d2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a68      	ldr	r2, [pc, #416]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068f6:	67da      	str	r2, [r3, #124]	; 0x7c
 80068f8:	4a67      	ldr	r2, [pc, #412]	; (8006a98 <HAL_UART_MspInit+0x2bc>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80068fe:	4b68      	ldr	r3, [pc, #416]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006900:	4a68      	ldr	r2, [pc, #416]	; (8006aa4 <HAL_UART_MspInit+0x2c8>)
 8006902:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006904:	4b66      	ldr	r3, [pc, #408]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006906:	2240      	movs	r2, #64	; 0x40
 8006908:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800690a:	4b65      	ldr	r3, [pc, #404]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 800690c:	2240      	movs	r2, #64	; 0x40
 800690e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006910:	4b63      	ldr	r3, [pc, #396]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006912:	2200      	movs	r2, #0
 8006914:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006916:	4b62      	ldr	r3, [pc, #392]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800691c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800691e:	4b60      	ldr	r3, [pc, #384]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006920:	2200      	movs	r2, #0
 8006922:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006924:	4b5e      	ldr	r3, [pc, #376]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006926:	2200      	movs	r2, #0
 8006928:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800692a:	4b5d      	ldr	r3, [pc, #372]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 800692c:	2200      	movs	r2, #0
 800692e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006930:	4b5b      	ldr	r3, [pc, #364]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006932:	2200      	movs	r2, #0
 8006934:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006936:	4b5a      	ldr	r3, [pc, #360]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006938:	2204      	movs	r2, #4
 800693a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800693c:	4b58      	ldr	r3, [pc, #352]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 800693e:	2203      	movs	r2, #3
 8006940:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006942:	4b57      	ldr	r3, [pc, #348]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006944:	2200      	movs	r2, #0
 8006946:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006948:	4b55      	ldr	r3, [pc, #340]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 800694a:	2200      	movs	r2, #0
 800694c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800694e:	4854      	ldr	r0, [pc, #336]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006950:	f000 fe36 	bl	80075c0 <HAL_DMA_Init>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800695a:	f7fe f9e7 	bl	8004d2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a4f      	ldr	r2, [pc, #316]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006962:	679a      	str	r2, [r3, #120]	; 0x78
 8006964:	4a4e      	ldr	r2, [pc, #312]	; (8006aa0 <HAL_UART_MspInit+0x2c4>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800696a:	2200      	movs	r2, #0
 800696c:	2100      	movs	r1, #0
 800696e:	2034      	movs	r0, #52	; 0x34
 8006970:	f000 fbe7 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006974:	2034      	movs	r0, #52	; 0x34
 8006976:	f000 fbfe 	bl	8007176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800697a:	e1fe      	b.n	8006d7a <HAL_UART_MspInit+0x59e>
  else if(uartHandle->Instance==UART7)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a49      	ldr	r2, [pc, #292]	; (8006aa8 <HAL_UART_MspInit+0x2cc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	f040 8098 	bne.w	8006ab8 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006988:	2302      	movs	r3, #2
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800698c:	2300      	movs	r3, #0
 800698e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006996:	4618      	mov	r0, r3
 8006998:	f004 fe22 	bl	800b5e0 <HAL_RCCEx_PeriphCLKConfig>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80069a2:	f7fe f9c3 	bl	8004d2c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80069a6:	4b3a      	ldr	r3, [pc, #232]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 80069a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069ac:	4a38      	ldr	r2, [pc, #224]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 80069ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80069b6:	4b36      	ldr	r3, [pc, #216]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 80069b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069c4:	4b32      	ldr	r3, [pc, #200]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 80069c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069ca:	4a31      	ldr	r2, [pc, #196]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 80069cc:	f043 0310 	orr.w	r3, r3, #16
 80069d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069d4:	4b2e      	ldr	r3, [pc, #184]	; (8006a90 <HAL_UART_MspInit+0x2b4>)
 80069d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80069e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80069e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ea:	2302      	movs	r3, #2
 80069ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069f6:	2300      	movs	r3, #0
 80069f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80069fc:	2307      	movs	r3, #7
 80069fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006a06:	4619      	mov	r1, r3
 8006a08:	4828      	ldr	r0, [pc, #160]	; (8006aac <HAL_UART_MspInit+0x2d0>)
 8006a0a:	f003 fc13 	bl	800a234 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8006a0e:	4b28      	ldr	r3, [pc, #160]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a10:	4a28      	ldr	r2, [pc, #160]	; (8006ab4 <HAL_UART_MspInit+0x2d8>)
 8006a12:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006a14:	4b26      	ldr	r3, [pc, #152]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a16:	2250      	movs	r2, #80	; 0x50
 8006a18:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a1a:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a1c:	2240      	movs	r2, #64	; 0x40
 8006a1e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a20:	4b23      	ldr	r3, [pc, #140]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a26:	4b22      	ldr	r3, [pc, #136]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a2c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a2e:	4b20      	ldr	r3, [pc, #128]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a34:	4b1e      	ldr	r3, [pc, #120]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8006a3a:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006a40:	4b1b      	ldr	r3, [pc, #108]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a46:	4b1a      	ldr	r3, [pc, #104]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a48:	2204      	movs	r2, #4
 8006a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a4c:	4b18      	ldr	r3, [pc, #96]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a4e:	2203      	movs	r2, #3
 8006a50:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006a52:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a58:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8006a5e:	4814      	ldr	r0, [pc, #80]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a60:	f000 fdae 	bl	80075c0 <HAL_DMA_Init>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <HAL_UART_MspInit+0x292>
      Error_Handler();
 8006a6a:	f7fe f95f 	bl	8004d2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a0f      	ldr	r2, [pc, #60]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a72:	679a      	str	r2, [r3, #120]	; 0x78
 8006a74:	4a0e      	ldr	r2, [pc, #56]	; (8006ab0 <HAL_UART_MspInit+0x2d4>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	2052      	movs	r0, #82	; 0x52
 8006a80:	f000 fb5f 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006a84:	2052      	movs	r0, #82	; 0x52
 8006a86:	f000 fb76 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 8006a8a:	e176      	b.n	8006d7a <HAL_UART_MspInit+0x59e>
 8006a8c:	40004c00 	.word	0x40004c00
 8006a90:	58024400 	.word	0x58024400
 8006a94:	58020c00 	.word	0x58020c00
 8006a98:	240011c8 	.word	0x240011c8
 8006a9c:	40020058 	.word	0x40020058
 8006aa0:	240016d8 	.word	0x240016d8
 8006aa4:	40020070 	.word	0x40020070
 8006aa8:	40007800 	.word	0x40007800
 8006aac:	58021000 	.word	0x58021000
 8006ab0:	240014c8 	.word	0x240014c8
 8006ab4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4ab1      	ldr	r2, [pc, #708]	; (8006d84 <HAL_UART_MspInit+0x5a8>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	f040 80a5 	bne.w	8006c0e <HAL_UART_MspInit+0x432>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f004 fd84 	bl	800b5e0 <HAL_RCCEx_PeriphCLKConfig>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8006ade:	f7fe f925 	bl	8004d2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ae2:	4ba9      	ldr	r3, [pc, #676]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ae8:	4aa7      	ldr	r2, [pc, #668]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006af2:	4ba5      	ldr	r3, [pc, #660]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b00:	4ba1      	ldr	r3, [pc, #644]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b06:	4aa0      	ldr	r2, [pc, #640]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006b08:	f043 0308 	orr.w	r3, r3, #8
 8006b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b10:	4b9d      	ldr	r3, [pc, #628]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	613b      	str	r3, [r7, #16]
 8006b1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006b1e:	2360      	movs	r3, #96	; 0x60
 8006b20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b24:	2302      	movs	r3, #2
 8006b26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b30:	2300      	movs	r3, #0
 8006b32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b36:	2307      	movs	r3, #7
 8006b38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b40:	4619      	mov	r1, r3
 8006b42:	4892      	ldr	r0, [pc, #584]	; (8006d8c <HAL_UART_MspInit+0x5b0>)
 8006b44:	f003 fb76 	bl	800a234 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006b48:	4b91      	ldr	r3, [pc, #580]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b4a:	4a92      	ldr	r2, [pc, #584]	; (8006d94 <HAL_UART_MspInit+0x5b8>)
 8006b4c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006b4e:	4b90      	ldr	r3, [pc, #576]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b50:	222b      	movs	r2, #43	; 0x2b
 8006b52:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b54:	4b8e      	ldr	r3, [pc, #568]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b5a:	4b8d      	ldr	r3, [pc, #564]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b60:	4b8b      	ldr	r3, [pc, #556]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b66:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b68:	4b89      	ldr	r3, [pc, #548]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b6e:	4b88      	ldr	r3, [pc, #544]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006b74:	4b86      	ldr	r3, [pc, #536]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006b7a:	4b85      	ldr	r3, [pc, #532]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b80:	4b83      	ldr	r3, [pc, #524]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006b86:	4882      	ldr	r0, [pc, #520]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b88:	f000 fd1a 	bl	80075c0 <HAL_DMA_Init>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8006b92:	f7fe f8cb 	bl	8004d2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a7d      	ldr	r2, [pc, #500]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b9a:	67da      	str	r2, [r3, #124]	; 0x7c
 8006b9c:	4a7c      	ldr	r2, [pc, #496]	; (8006d90 <HAL_UART_MspInit+0x5b4>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006ba2:	4b7d      	ldr	r3, [pc, #500]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006ba4:	4a7d      	ldr	r2, [pc, #500]	; (8006d9c <HAL_UART_MspInit+0x5c0>)
 8006ba6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006ba8:	4b7b      	ldr	r3, [pc, #492]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006baa:	222c      	movs	r2, #44	; 0x2c
 8006bac:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006bae:	4b7a      	ldr	r3, [pc, #488]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006bb0:	2240      	movs	r2, #64	; 0x40
 8006bb2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bb4:	4b78      	ldr	r3, [pc, #480]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006bba:	4b77      	ldr	r3, [pc, #476]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bc0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006bc2:	4b75      	ldr	r3, [pc, #468]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006bc8:	4b73      	ldr	r3, [pc, #460]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006bce:	4b72      	ldr	r3, [pc, #456]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006bd4:	4b70      	ldr	r3, [pc, #448]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006bda:	4b6f      	ldr	r3, [pc, #444]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006be0:	486d      	ldr	r0, [pc, #436]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006be2:	f000 fced 	bl	80075c0 <HAL_DMA_Init>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <HAL_UART_MspInit+0x414>
      Error_Handler();
 8006bec:	f7fe f89e 	bl	8004d2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a69      	ldr	r2, [pc, #420]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006bf4:	679a      	str	r2, [r3, #120]	; 0x78
 8006bf6:	4a68      	ldr	r2, [pc, #416]	; (8006d98 <HAL_UART_MspInit+0x5bc>)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2100      	movs	r1, #0
 8006c00:	2026      	movs	r0, #38	; 0x26
 8006c02:	f000 fa9e 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006c06:	2026      	movs	r0, #38	; 0x26
 8006c08:	f000 fab5 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 8006c0c:	e0b5      	b.n	8006d7a <HAL_UART_MspInit+0x59e>
  else if(uartHandle->Instance==USART3)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a63      	ldr	r2, [pc, #396]	; (8006da0 <HAL_UART_MspInit+0x5c4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	f040 80b0 	bne.w	8006d7a <HAL_UART_MspInit+0x59e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f004 fcd9 	bl	800b5e0 <HAL_RCCEx_PeriphCLKConfig>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_UART_MspInit+0x45c>
      Error_Handler();
 8006c34:	f7fe f87a 	bl	8004d2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006c38:	4b53      	ldr	r3, [pc, #332]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c3e:	4a52      	ldr	r2, [pc, #328]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c48:	4b4f      	ldr	r3, [pc, #316]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006c4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c56:	4b4c      	ldr	r3, [pc, #304]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c5c:	4a4a      	ldr	r2, [pc, #296]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006c5e:	f043 0308 	orr.w	r3, r3, #8
 8006c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c66:	4b48      	ldr	r3, [pc, #288]	; (8006d88 <HAL_UART_MspInit+0x5ac>)
 8006c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006c74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006c8e:	2307      	movs	r3, #7
 8006c90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	483c      	ldr	r0, [pc, #240]	; (8006d8c <HAL_UART_MspInit+0x5b0>)
 8006c9c:	f003 faca 	bl	800a234 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006ca0:	4b40      	ldr	r3, [pc, #256]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006ca2:	4a41      	ldr	r2, [pc, #260]	; (8006da8 <HAL_UART_MspInit+0x5cc>)
 8006ca4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006ca6:	4b3f      	ldr	r3, [pc, #252]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006ca8:	222d      	movs	r2, #45	; 0x2d
 8006caa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cac:	4b3d      	ldr	r3, [pc, #244]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cb2:	4b3c      	ldr	r3, [pc, #240]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cb8:	4b3a      	ldr	r3, [pc, #232]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cbe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cc0:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cc6:	4b37      	ldr	r3, [pc, #220]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006ccc:	4b35      	ldr	r3, [pc, #212]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006cd2:	4b34      	ldr	r3, [pc, #208]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006cd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006cd8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cda:	4b32      	ldr	r3, [pc, #200]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006ce0:	4830      	ldr	r0, [pc, #192]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006ce2:	f000 fc6d 	bl	80075c0 <HAL_DMA_Init>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_UART_MspInit+0x514>
      Error_Handler();
 8006cec:	f7fe f81e 	bl	8004d2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a2c      	ldr	r2, [pc, #176]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006cf4:	67da      	str	r2, [r3, #124]	; 0x7c
 8006cf6:	4a2b      	ldr	r2, [pc, #172]	; (8006da4 <HAL_UART_MspInit+0x5c8>)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8006cfc:	4b2b      	ldr	r3, [pc, #172]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006cfe:	4a2c      	ldr	r2, [pc, #176]	; (8006db0 <HAL_UART_MspInit+0x5d4>)
 8006d00:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006d02:	4b2a      	ldr	r3, [pc, #168]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d04:	222e      	movs	r2, #46	; 0x2e
 8006d06:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d08:	4b28      	ldr	r3, [pc, #160]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d0a:	2240      	movs	r2, #64	; 0x40
 8006d0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d0e:	4b27      	ldr	r3, [pc, #156]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d14:	4b25      	ldr	r3, [pc, #148]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d1a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d1c:	4b23      	ldr	r3, [pc, #140]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d22:	4b22      	ldr	r3, [pc, #136]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006d28:	4b20      	ldr	r3, [pc, #128]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006d2e:	4b1f      	ldr	r3, [pc, #124]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d34:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006d36:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d38:	2204      	movs	r2, #4
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006d3c:	4b1b      	ldr	r3, [pc, #108]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d3e:	2203      	movs	r2, #3
 8006d40:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006d42:	4b1a      	ldr	r3, [pc, #104]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006d48:	4b18      	ldr	r3, [pc, #96]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006d4e:	4817      	ldr	r0, [pc, #92]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d50:	f000 fc36 	bl	80075c0 <HAL_DMA_Init>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_UART_MspInit+0x582>
      Error_Handler();
 8006d5a:	f7fd ffe7 	bl	8004d2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a12      	ldr	r2, [pc, #72]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d62:	679a      	str	r2, [r3, #120]	; 0x78
 8006d64:	4a11      	ldr	r2, [pc, #68]	; (8006dac <HAL_UART_MspInit+0x5d0>)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	2027      	movs	r0, #39	; 0x27
 8006d70:	f000 f9e7 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006d74:	2027      	movs	r0, #39	; 0x27
 8006d76:	f000 f9fe 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 8006d7a:	bf00      	nop
 8006d7c:	37f8      	adds	r7, #248	; 0xf8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40004400 	.word	0x40004400
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	58020c00 	.word	0x58020c00
 8006d90:	24001240 	.word	0x24001240
 8006d94:	40020088 	.word	0x40020088
 8006d98:	24001540 	.word	0x24001540
 8006d9c:	400200a0 	.word	0x400200a0
 8006da0:	40004800 	.word	0x40004800
 8006da4:	24001348 	.word	0x24001348
 8006da8:	40020028 	.word	0x40020028
 8006dac:	24001450 	.word	0x24001450
 8006db0:	40020040 	.word	0x40020040

08006db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006dec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006db8:	f7fe fbf6 	bl	80055a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006dbc:	480c      	ldr	r0, [pc, #48]	; (8006df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006dbe:	490d      	ldr	r1, [pc, #52]	; (8006df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006dc0:	4a0d      	ldr	r2, [pc, #52]	; (8006df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006dc4:	e002      	b.n	8006dcc <LoopCopyDataInit>

08006dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006dca:	3304      	adds	r3, #4

08006dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006dd0:	d3f9      	bcc.n	8006dc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006dd4:	4c0a      	ldr	r4, [pc, #40]	; (8006e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006dd8:	e001      	b.n	8006dde <LoopFillZerobss>

08006dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ddc:	3204      	adds	r2, #4

08006dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006de0:	d3fb      	bcc.n	8006dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006de2:	f00b fc95 	bl	8012710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006de6:	f7fd fc2b 	bl	8004640 <main>
  bx  lr
 8006dea:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006dec:	24001d68 	.word	0x24001d68
  ldr r0, =_sdata
 8006df0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006df4:	24000410 	.word	0x24000410
  ldr r2, =_sidata
 8006df8:	08017044 	.word	0x08017044
  ldr r2, =_sbss
 8006dfc:	24000410 	.word	0x24000410
  ldr r4, =_ebss
 8006e00:	24001764 	.word	0x24001764

08006e04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e04:	e7fe      	b.n	8006e04 <ADC3_IRQHandler>
	...

08006e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e0e:	2003      	movs	r0, #3
 8006e10:	f000 f98c 	bl	800712c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e14:	f004 fa0e 	bl	800b234 <HAL_RCC_GetSysClockFreq>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <HAL_Init+0x68>)
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	0a1b      	lsrs	r3, r3, #8
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	4913      	ldr	r1, [pc, #76]	; (8006e74 <HAL_Init+0x6c>)
 8006e26:	5ccb      	ldrb	r3, [r1, r3]
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e32:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <HAL_Init+0x68>)
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	4a0e      	ldr	r2, [pc, #56]	; (8006e74 <HAL_Init+0x6c>)
 8006e3c:	5cd3      	ldrb	r3, [r2, r3]
 8006e3e:	f003 031f 	and.w	r3, r3, #31
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	fa22 f303 	lsr.w	r3, r2, r3
 8006e48:	4a0b      	ldr	r2, [pc, #44]	; (8006e78 <HAL_Init+0x70>)
 8006e4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e4c:	4a0b      	ldr	r2, [pc, #44]	; (8006e7c <HAL_Init+0x74>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006e52:	2000      	movs	r0, #0
 8006e54:	f000 f814 	bl	8006e80 <HAL_InitTick>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e002      	b.n	8006e68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006e62:	f7fe f985 	bl	8005170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	58024400 	.word	0x58024400
 8006e74:	0801513c 	.word	0x0801513c
 8006e78:	24000234 	.word	0x24000234
 8006e7c:	24000230 	.word	0x24000230

08006e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <HAL_InitTick+0x60>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e021      	b.n	8006ed8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006e94:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <HAL_InitTick+0x64>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <HAL_InitTick+0x60>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 f971 	bl	8007192 <HAL_SYSTICK_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e00e      	b.n	8006ed8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b0f      	cmp	r3, #15
 8006ebe:	d80a      	bhi.n	8006ed6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec8:	f000 f93b 	bl	8007142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ecc:	4a06      	ldr	r2, [pc, #24]	; (8006ee8 <HAL_InitTick+0x68>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e000      	b.n	8006ed8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	2400023c 	.word	0x2400023c
 8006ee4:	24000230 	.word	0x24000230
 8006ee8:	24000238 	.word	0x24000238

08006eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006ef0:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <HAL_IncTick+0x20>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <HAL_IncTick+0x24>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4413      	add	r3, r2
 8006efc:	4a04      	ldr	r2, [pc, #16]	; (8006f10 <HAL_IncTick+0x24>)
 8006efe:	6013      	str	r3, [r2, #0]
}
 8006f00:	bf00      	nop
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	2400023c 	.word	0x2400023c
 8006f10:	24001750 	.word	0x24001750

08006f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return uwTick;
 8006f18:	4b03      	ldr	r3, [pc, #12]	; (8006f28 <HAL_GetTick+0x14>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	24001750 	.word	0x24001750

08006f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f34:	f7ff ffee 	bl	8006f14 <HAL_GetTick>
 8006f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f44:	d005      	beq.n	8006f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f46:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <HAL_Delay+0x44>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f52:	bf00      	nop
 8006f54:	f7ff ffde 	bl	8006f14 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d8f7      	bhi.n	8006f54 <HAL_Delay+0x28>
  {
  }
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	2400023c 	.word	0x2400023c

08006f74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006f78:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <HAL_GetREVID+0x14>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	0c1b      	lsrs	r3, r3, #16
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	5c001000 	.word	0x5c001000

08006f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <__NVIC_SetPriorityGrouping+0x40>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fa8:	4013      	ands	r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006fb4:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fba:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <__NVIC_SetPriorityGrouping+0x40>)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	60d3      	str	r3, [r2, #12]
}
 8006fc0:	bf00      	nop
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	e000ed00 	.word	0xe000ed00
 8006fd0:	05fa0000 	.word	0x05fa0000

08006fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fd8:	4b04      	ldr	r3, [pc, #16]	; (8006fec <__NVIC_GetPriorityGrouping+0x18>)
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	0a1b      	lsrs	r3, r3, #8
 8006fde:	f003 0307 	and.w	r3, r3, #7
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	e000ed00 	.word	0xe000ed00

08006ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	db0b      	blt.n	800701a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	f003 021f 	and.w	r2, r3, #31
 8007008:	4907      	ldr	r1, [pc, #28]	; (8007028 <__NVIC_EnableIRQ+0x38>)
 800700a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	2001      	movs	r0, #1
 8007012:	fa00 f202 	lsl.w	r2, r0, r2
 8007016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	e000e100 	.word	0xe000e100

0800702c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	6039      	str	r1, [r7, #0]
 8007036:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800703c:	2b00      	cmp	r3, #0
 800703e:	db0a      	blt.n	8007056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	490c      	ldr	r1, [pc, #48]	; (8007078 <__NVIC_SetPriority+0x4c>)
 8007046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800704a:	0112      	lsls	r2, r2, #4
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	440b      	add	r3, r1
 8007050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007054:	e00a      	b.n	800706c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	b2da      	uxtb	r2, r3
 800705a:	4908      	ldr	r1, [pc, #32]	; (800707c <__NVIC_SetPriority+0x50>)
 800705c:	88fb      	ldrh	r3, [r7, #6]
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	3b04      	subs	r3, #4
 8007064:	0112      	lsls	r2, r2, #4
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	440b      	add	r3, r1
 800706a:	761a      	strb	r2, [r3, #24]
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	e000e100 	.word	0xe000e100
 800707c:	e000ed00 	.word	0xe000ed00

08007080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007080:	b480      	push	{r7}
 8007082:	b089      	sub	sp, #36	; 0x24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f1c3 0307 	rsb	r3, r3, #7
 800709a:	2b04      	cmp	r3, #4
 800709c:	bf28      	it	cs
 800709e:	2304      	movcs	r3, #4
 80070a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	3304      	adds	r3, #4
 80070a6:	2b06      	cmp	r3, #6
 80070a8:	d902      	bls.n	80070b0 <NVIC_EncodePriority+0x30>
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	3b03      	subs	r3, #3
 80070ae:	e000      	b.n	80070b2 <NVIC_EncodePriority+0x32>
 80070b0:	2300      	movs	r3, #0
 80070b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070b4:	f04f 32ff 	mov.w	r2, #4294967295
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	43da      	mvns	r2, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	401a      	ands	r2, r3
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070c8:	f04f 31ff 	mov.w	r1, #4294967295
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	fa01 f303 	lsl.w	r3, r1, r3
 80070d2:	43d9      	mvns	r1, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070d8:	4313      	orrs	r3, r2
         );
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3724      	adds	r7, #36	; 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070f8:	d301      	bcc.n	80070fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070fa:	2301      	movs	r3, #1
 80070fc:	e00f      	b.n	800711e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070fe:	4a0a      	ldr	r2, [pc, #40]	; (8007128 <SysTick_Config+0x40>)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3b01      	subs	r3, #1
 8007104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007106:	210f      	movs	r1, #15
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	f7ff ff8e 	bl	800702c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <SysTick_Config+0x40>)
 8007112:	2200      	movs	r2, #0
 8007114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007116:	4b04      	ldr	r3, [pc, #16]	; (8007128 <SysTick_Config+0x40>)
 8007118:	2207      	movs	r2, #7
 800711a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	e000e010 	.word	0xe000e010

0800712c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff ff29 	bl	8006f8c <__NVIC_SetPriorityGrouping>
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b086      	sub	sp, #24
 8007146:	af00      	add	r7, sp, #0
 8007148:	4603      	mov	r3, r0
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607a      	str	r2, [r7, #4]
 800714e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007150:	f7ff ff40 	bl	8006fd4 <__NVIC_GetPriorityGrouping>
 8007154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	6978      	ldr	r0, [r7, #20]
 800715c:	f7ff ff90 	bl	8007080 <NVIC_EncodePriority>
 8007160:	4602      	mov	r2, r0
 8007162:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007166:	4611      	mov	r1, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff ff5f 	bl	800702c <__NVIC_SetPriority>
}
 800716e:	bf00      	nop
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	4603      	mov	r3, r0
 800717e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff ff33 	bl	8006ff0 <__NVIC_EnableIRQ>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff ffa4 	bl	80070e8 <SysTick_Config>
 80071a0:	4603      	mov	r3, r0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80071ae:	f000 f802 	bl	80071b6 <HAL_SYSTICK_Callback>
}
 80071b2:	bf00      	nop
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80071b6:	b480      	push	{r7}
 80071b8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80071ba:	bf00      	nop
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e054      	b.n	8007280 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	7f5b      	ldrb	r3, [r3, #29]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fb f93c 	bl	8002464 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	791b      	ldrb	r3, [r3, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10c      	bne.n	8007214 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a22      	ldr	r2, [pc, #136]	; (8007288 <HAL_CRC_Init+0xc4>)
 8007200:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0218 	bic.w	r2, r2, #24
 8007210:	609a      	str	r2, [r3, #8]
 8007212:	e00c      	b.n	800722e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6899      	ldr	r1, [r3, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	461a      	mov	r2, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f948 	bl	80074b4 <HAL_CRCEx_Polynomial_Set>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e028      	b.n	8007280 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	795b      	ldrb	r3, [r3, #5]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d105      	bne.n	8007242 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f04f 32ff 	mov.w	r2, #4294967295
 800723e:	611a      	str	r2, [r3, #16]
 8007240:	e004      	b.n	800724c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6912      	ldr	r2, [r2, #16]
 800724a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695a      	ldr	r2, [r3, #20]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	04c11db7 	.word	0x04c11db7

0800728c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2202      	movs	r2, #2
 80072a0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0201 	orr.w	r2, r2, #1
 80072b0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d006      	beq.n	80072c8 <HAL_CRC_Calculate+0x3c>
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d829      	bhi.n	8007312 <HAL_CRC_Calculate+0x86>
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d019      	beq.n	80072f6 <HAL_CRC_Calculate+0x6a>
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d01e      	beq.n	8007304 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80072c6:	e024      	b.n	8007312 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	e00a      	b.n	80072e4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	3301      	adds	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d3f0      	bcc.n	80072ce <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	613b      	str	r3, [r7, #16]
      break;
 80072f4:	e00e      	b.n	8007314 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 f812 	bl	8007324 <CRC_Handle_8>
 8007300:	6138      	str	r0, [r7, #16]
      break;
 8007302:	e007      	b.n	8007314 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f899 	bl	8007440 <CRC_Handle_16>
 800730e:	6138      	str	r0, [r7, #16]
      break;
 8007310:	e000      	b.n	8007314 <HAL_CRC_Calculate+0x88>
      break;
 8007312:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800731a:	693b      	ldr	r3, [r7, #16]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8007324:	b480      	push	{r7}
 8007326:	b089      	sub	sp, #36	; 0x24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]
 8007334:	e023      	b.n	800737e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	4413      	add	r3, r2
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	3301      	adds	r3, #1
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	440b      	add	r3, r1
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007350:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	3302      	adds	r3, #2
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	440b      	add	r3, r1
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007360:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	3303      	adds	r3, #3
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	440b      	add	r3, r1
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007374:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	3301      	adds	r3, #1
 800737c:	61fb      	str	r3, [r7, #28]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	089b      	lsrs	r3, r3, #2
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	429a      	cmp	r2, r3
 8007386:	d3d6      	bcc.n	8007336 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d04d      	beq.n	800742e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	2b01      	cmp	r3, #1
 800739a:	d107      	bne.n	80073ac <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	4413      	add	r3, r2
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	6812      	ldr	r2, [r2, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d116      	bne.n	80073e4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	4413      	add	r3, r2
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	b21a      	sxth	r2, r3
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	3301      	adds	r3, #1
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	440b      	add	r3, r1
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	b21b      	sxth	r3, r3
 80073d2:	4313      	orrs	r3, r2
 80073d4:	b21b      	sxth	r3, r3
 80073d6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	8b7a      	ldrh	r2, [r7, #26]
 80073e2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d11f      	bne.n	800742e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	4413      	add	r3, r2
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	b21a      	sxth	r2, r3
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	3301      	adds	r3, #1
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	440b      	add	r3, r1
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	b21b      	sxth	r3, r3
 800740a:	4313      	orrs	r3, r2
 800740c:	b21b      	sxth	r3, r3
 800740e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	8b7a      	ldrh	r2, [r7, #26]
 800741a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	3302      	adds	r3, #2
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	4413      	add	r3, r2
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3724      	adds	r7, #36	; 0x24
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	e013      	b.n	800747a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	4413      	add	r3, r2
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	041a      	lsls	r2, r3, #16
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	3302      	adds	r3, #2
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	440b      	add	r3, r1
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	4619      	mov	r1, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	3301      	adds	r3, #1
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	085b      	lsrs	r3, r3, #1
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	429a      	cmp	r2, r3
 8007482:	d3e6      	bcc.n	8007452 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d009      	beq.n	80074a2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	4413      	add	r3, r2
 800749c:	881a      	ldrh	r2, [r3, #0]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80074c4:	231f      	movs	r3, #31
 80074c6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80074c8:	bf00      	nop
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1e5a      	subs	r2, r3, #1
 80074ce:	613a      	str	r2, [r7, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d009      	beq.n	80074e8 <HAL_CRCEx_Polynomial_Set+0x34>
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	fa22 f303 	lsr.w	r3, r2, r3
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0f0      	beq.n	80074ca <HAL_CRCEx_Polynomial_Set+0x16>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b18      	cmp	r3, #24
 80074ec:	d846      	bhi.n	800757c <HAL_CRCEx_Polynomial_Set+0xc8>
 80074ee:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	08007583 	.word	0x08007583
 80074f8:	0800757d 	.word	0x0800757d
 80074fc:	0800757d 	.word	0x0800757d
 8007500:	0800757d 	.word	0x0800757d
 8007504:	0800757d 	.word	0x0800757d
 8007508:	0800757d 	.word	0x0800757d
 800750c:	0800757d 	.word	0x0800757d
 8007510:	0800757d 	.word	0x0800757d
 8007514:	08007571 	.word	0x08007571
 8007518:	0800757d 	.word	0x0800757d
 800751c:	0800757d 	.word	0x0800757d
 8007520:	0800757d 	.word	0x0800757d
 8007524:	0800757d 	.word	0x0800757d
 8007528:	0800757d 	.word	0x0800757d
 800752c:	0800757d 	.word	0x0800757d
 8007530:	0800757d 	.word	0x0800757d
 8007534:	08007565 	.word	0x08007565
 8007538:	0800757d 	.word	0x0800757d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	0800757d 	.word	0x0800757d
 8007544:	0800757d 	.word	0x0800757d
 8007548:	0800757d 	.word	0x0800757d
 800754c:	0800757d 	.word	0x0800757d
 8007550:	0800757d 	.word	0x0800757d
 8007554:	08007559 	.word	0x08007559
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b06      	cmp	r3, #6
 800755c:	d913      	bls.n	8007586 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007562:	e010      	b.n	8007586 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	2b07      	cmp	r3, #7
 8007568:	d90f      	bls.n	800758a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800756e:	e00c      	b.n	800758a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b0f      	cmp	r3, #15
 8007574:	d90b      	bls.n	800758e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800757a:	e008      	b.n	800758e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	75fb      	strb	r3, [r7, #23]
      break;
 8007580:	e006      	b.n	8007590 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007582:	bf00      	nop
 8007584:	e004      	b.n	8007590 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007586:	bf00      	nop
 8007588:	e002      	b.n	8007590 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800758a:	bf00      	nop
 800758c:	e000      	b.n	8007590 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800758e:	bf00      	nop
  }
  if (status == HAL_OK)
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10d      	bne.n	80075b2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f023 0118 	bic.w	r1, r3, #24
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80075c8:	f7ff fca4 	bl	8006f14 <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e316      	b.n	8007c06 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a66      	ldr	r2, [pc, #408]	; (8007778 <HAL_DMA_Init+0x1b8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d04a      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a65      	ldr	r2, [pc, #404]	; (800777c <HAL_DMA_Init+0x1bc>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d045      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a63      	ldr	r2, [pc, #396]	; (8007780 <HAL_DMA_Init+0x1c0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d040      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a62      	ldr	r2, [pc, #392]	; (8007784 <HAL_DMA_Init+0x1c4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d03b      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a60      	ldr	r2, [pc, #384]	; (8007788 <HAL_DMA_Init+0x1c8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d036      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a5f      	ldr	r2, [pc, #380]	; (800778c <HAL_DMA_Init+0x1cc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d031      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a5d      	ldr	r2, [pc, #372]	; (8007790 <HAL_DMA_Init+0x1d0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d02c      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a5c      	ldr	r2, [pc, #368]	; (8007794 <HAL_DMA_Init+0x1d4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d027      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a5a      	ldr	r2, [pc, #360]	; (8007798 <HAL_DMA_Init+0x1d8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d022      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a59      	ldr	r2, [pc, #356]	; (800779c <HAL_DMA_Init+0x1dc>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d01d      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a57      	ldr	r2, [pc, #348]	; (80077a0 <HAL_DMA_Init+0x1e0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d018      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a56      	ldr	r2, [pc, #344]	; (80077a4 <HAL_DMA_Init+0x1e4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a54      	ldr	r2, [pc, #336]	; (80077a8 <HAL_DMA_Init+0x1e8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00e      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a53      	ldr	r2, [pc, #332]	; (80077ac <HAL_DMA_Init+0x1ec>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d009      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a51      	ldr	r2, [pc, #324]	; (80077b0 <HAL_DMA_Init+0x1f0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <HAL_DMA_Init+0xb8>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a50      	ldr	r2, [pc, #320]	; (80077b4 <HAL_DMA_Init+0x1f4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d101      	bne.n	800767c <HAL_DMA_Init+0xbc>
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <HAL_DMA_Init+0xbe>
 800767c:	2300      	movs	r3, #0
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 813b 	beq.w	80078fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a37      	ldr	r2, [pc, #220]	; (8007778 <HAL_DMA_Init+0x1b8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d04a      	beq.n	8007734 <HAL_DMA_Init+0x174>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a36      	ldr	r2, [pc, #216]	; (800777c <HAL_DMA_Init+0x1bc>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d045      	beq.n	8007734 <HAL_DMA_Init+0x174>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a34      	ldr	r2, [pc, #208]	; (8007780 <HAL_DMA_Init+0x1c0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d040      	beq.n	8007734 <HAL_DMA_Init+0x174>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a33      	ldr	r2, [pc, #204]	; (8007784 <HAL_DMA_Init+0x1c4>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d03b      	beq.n	8007734 <HAL_DMA_Init+0x174>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a31      	ldr	r2, [pc, #196]	; (8007788 <HAL_DMA_Init+0x1c8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d036      	beq.n	8007734 <HAL_DMA_Init+0x174>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a30      	ldr	r2, [pc, #192]	; (800778c <HAL_DMA_Init+0x1cc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d031      	beq.n	8007734 <HAL_DMA_Init+0x174>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a2e      	ldr	r2, [pc, #184]	; (8007790 <HAL_DMA_Init+0x1d0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d02c      	beq.n	8007734 <HAL_DMA_Init+0x174>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a2d      	ldr	r2, [pc, #180]	; (8007794 <HAL_DMA_Init+0x1d4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d027      	beq.n	8007734 <HAL_DMA_Init+0x174>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a2b      	ldr	r2, [pc, #172]	; (8007798 <HAL_DMA_Init+0x1d8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d022      	beq.n	8007734 <HAL_DMA_Init+0x174>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a2a      	ldr	r2, [pc, #168]	; (800779c <HAL_DMA_Init+0x1dc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d01d      	beq.n	8007734 <HAL_DMA_Init+0x174>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a28      	ldr	r2, [pc, #160]	; (80077a0 <HAL_DMA_Init+0x1e0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d018      	beq.n	8007734 <HAL_DMA_Init+0x174>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a27      	ldr	r2, [pc, #156]	; (80077a4 <HAL_DMA_Init+0x1e4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d013      	beq.n	8007734 <HAL_DMA_Init+0x174>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a25      	ldr	r2, [pc, #148]	; (80077a8 <HAL_DMA_Init+0x1e8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00e      	beq.n	8007734 <HAL_DMA_Init+0x174>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a24      	ldr	r2, [pc, #144]	; (80077ac <HAL_DMA_Init+0x1ec>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d009      	beq.n	8007734 <HAL_DMA_Init+0x174>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a22      	ldr	r2, [pc, #136]	; (80077b0 <HAL_DMA_Init+0x1f0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d004      	beq.n	8007734 <HAL_DMA_Init+0x174>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <HAL_DMA_Init+0x1f4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d108      	bne.n	8007746 <HAL_DMA_Init+0x186>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0201 	bic.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	e007      	b.n	8007756 <HAL_DMA_Init+0x196>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0201 	bic.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007756:	e02f      	b.n	80077b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007758:	f7ff fbdc 	bl	8006f14 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b05      	cmp	r3, #5
 8007764:	d928      	bls.n	80077b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2203      	movs	r2, #3
 8007770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e246      	b.n	8007c06 <HAL_DMA_Init+0x646>
 8007778:	40020010 	.word	0x40020010
 800777c:	40020028 	.word	0x40020028
 8007780:	40020040 	.word	0x40020040
 8007784:	40020058 	.word	0x40020058
 8007788:	40020070 	.word	0x40020070
 800778c:	40020088 	.word	0x40020088
 8007790:	400200a0 	.word	0x400200a0
 8007794:	400200b8 	.word	0x400200b8
 8007798:	40020410 	.word	0x40020410
 800779c:	40020428 	.word	0x40020428
 80077a0:	40020440 	.word	0x40020440
 80077a4:	40020458 	.word	0x40020458
 80077a8:	40020470 	.word	0x40020470
 80077ac:	40020488 	.word	0x40020488
 80077b0:	400204a0 	.word	0x400204a0
 80077b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1c8      	bne.n	8007758 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4b83      	ldr	r3, [pc, #524]	; (80079e0 <HAL_DMA_Init+0x420>)
 80077d2:	4013      	ands	r3, r2
 80077d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80077de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	2b04      	cmp	r3, #4
 800780a:	d107      	bne.n	800781c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	4313      	orrs	r3, r2
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	4313      	orrs	r3, r2
 800781a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800781c:	4b71      	ldr	r3, [pc, #452]	; (80079e4 <HAL_DMA_Init+0x424>)
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	4b71      	ldr	r3, [pc, #452]	; (80079e8 <HAL_DMA_Init+0x428>)
 8007822:	4013      	ands	r3, r2
 8007824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007828:	d328      	bcc.n	800787c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2b28      	cmp	r3, #40	; 0x28
 8007830:	d903      	bls.n	800783a <HAL_DMA_Init+0x27a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b2e      	cmp	r3, #46	; 0x2e
 8007838:	d917      	bls.n	800786a <HAL_DMA_Init+0x2aa>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b3e      	cmp	r3, #62	; 0x3e
 8007840:	d903      	bls.n	800784a <HAL_DMA_Init+0x28a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2b42      	cmp	r3, #66	; 0x42
 8007848:	d90f      	bls.n	800786a <HAL_DMA_Init+0x2aa>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2b46      	cmp	r3, #70	; 0x46
 8007850:	d903      	bls.n	800785a <HAL_DMA_Init+0x29a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2b48      	cmp	r3, #72	; 0x48
 8007858:	d907      	bls.n	800786a <HAL_DMA_Init+0x2aa>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2b4e      	cmp	r3, #78	; 0x4e
 8007860:	d905      	bls.n	800786e <HAL_DMA_Init+0x2ae>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2b52      	cmp	r3, #82	; 0x52
 8007868:	d801      	bhi.n	800786e <HAL_DMA_Init+0x2ae>
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <HAL_DMA_Init+0x2b0>
 800786e:	2300      	movs	r3, #0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800787a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f023 0307 	bic.w	r3, r3, #7
 8007892:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d117      	bne.n	80078d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00e      	beq.n	80078d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f002 fb31 	bl	8009f20 <DMA_CheckFifoParam>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2240      	movs	r2, #64	; 0x40
 80078c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e197      	b.n	8007c06 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f002 fa6c 	bl	8009dbc <DMA_CalcBaseAndBitshift>
 80078e4:	4603      	mov	r3, r0
 80078e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	223f      	movs	r2, #63	; 0x3f
 80078f2:	409a      	lsls	r2, r3
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	609a      	str	r2, [r3, #8]
 80078f8:	e0cd      	b.n	8007a96 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a3b      	ldr	r2, [pc, #236]	; (80079ec <HAL_DMA_Init+0x42c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d022      	beq.n	800794a <HAL_DMA_Init+0x38a>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a39      	ldr	r2, [pc, #228]	; (80079f0 <HAL_DMA_Init+0x430>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d01d      	beq.n	800794a <HAL_DMA_Init+0x38a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a38      	ldr	r2, [pc, #224]	; (80079f4 <HAL_DMA_Init+0x434>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d018      	beq.n	800794a <HAL_DMA_Init+0x38a>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a36      	ldr	r2, [pc, #216]	; (80079f8 <HAL_DMA_Init+0x438>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d013      	beq.n	800794a <HAL_DMA_Init+0x38a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a35      	ldr	r2, [pc, #212]	; (80079fc <HAL_DMA_Init+0x43c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00e      	beq.n	800794a <HAL_DMA_Init+0x38a>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a33      	ldr	r2, [pc, #204]	; (8007a00 <HAL_DMA_Init+0x440>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d009      	beq.n	800794a <HAL_DMA_Init+0x38a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a32      	ldr	r2, [pc, #200]	; (8007a04 <HAL_DMA_Init+0x444>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d004      	beq.n	800794a <HAL_DMA_Init+0x38a>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a30      	ldr	r2, [pc, #192]	; (8007a08 <HAL_DMA_Init+0x448>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d101      	bne.n	800794e <HAL_DMA_Init+0x38e>
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <HAL_DMA_Init+0x390>
 800794e:	2300      	movs	r3, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8097 	beq.w	8007a84 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a24      	ldr	r2, [pc, #144]	; (80079ec <HAL_DMA_Init+0x42c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d021      	beq.n	80079a4 <HAL_DMA_Init+0x3e4>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a22      	ldr	r2, [pc, #136]	; (80079f0 <HAL_DMA_Init+0x430>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01c      	beq.n	80079a4 <HAL_DMA_Init+0x3e4>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a21      	ldr	r2, [pc, #132]	; (80079f4 <HAL_DMA_Init+0x434>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d017      	beq.n	80079a4 <HAL_DMA_Init+0x3e4>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a1f      	ldr	r2, [pc, #124]	; (80079f8 <HAL_DMA_Init+0x438>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d012      	beq.n	80079a4 <HAL_DMA_Init+0x3e4>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a1e      	ldr	r2, [pc, #120]	; (80079fc <HAL_DMA_Init+0x43c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00d      	beq.n	80079a4 <HAL_DMA_Init+0x3e4>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <HAL_DMA_Init+0x440>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d008      	beq.n	80079a4 <HAL_DMA_Init+0x3e4>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <HAL_DMA_Init+0x444>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d003      	beq.n	80079a4 <HAL_DMA_Init+0x3e4>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a19      	ldr	r2, [pc, #100]	; (8007a08 <HAL_DMA_Init+0x448>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4b12      	ldr	r3, [pc, #72]	; (8007a0c <HAL_DMA_Init+0x44c>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2b40      	cmp	r3, #64	; 0x40
 80079cc:	d020      	beq.n	8007a10 <HAL_DMA_Init+0x450>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b80      	cmp	r3, #128	; 0x80
 80079d4:	d102      	bne.n	80079dc <HAL_DMA_Init+0x41c>
 80079d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079da:	e01a      	b.n	8007a12 <HAL_DMA_Init+0x452>
 80079dc:	2300      	movs	r3, #0
 80079de:	e018      	b.n	8007a12 <HAL_DMA_Init+0x452>
 80079e0:	fe10803f 	.word	0xfe10803f
 80079e4:	5c001000 	.word	0x5c001000
 80079e8:	ffff0000 	.word	0xffff0000
 80079ec:	58025408 	.word	0x58025408
 80079f0:	5802541c 	.word	0x5802541c
 80079f4:	58025430 	.word	0x58025430
 80079f8:	58025444 	.word	0x58025444
 80079fc:	58025458 	.word	0x58025458
 8007a00:	5802546c 	.word	0x5802546c
 8007a04:	58025480 	.word	0x58025480
 8007a08:	58025494 	.word	0x58025494
 8007a0c:	fffe000f 	.word	0xfffe000f
 8007a10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	68d2      	ldr	r2, [r2, #12]
 8007a16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007a18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007a20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007a28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007a30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007a38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007a40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	4b6e      	ldr	r3, [pc, #440]	; (8007c10 <HAL_DMA_Init+0x650>)
 8007a58:	4413      	add	r3, r2
 8007a5a:	4a6e      	ldr	r2, [pc, #440]	; (8007c14 <HAL_DMA_Init+0x654>)
 8007a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a60:	091b      	lsrs	r3, r3, #4
 8007a62:	009a      	lsls	r2, r3, #2
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f002 f9a7 	bl	8009dbc <DMA_CalcBaseAndBitshift>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a76:	f003 031f 	and.w	r3, r3, #31
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	409a      	lsls	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	605a      	str	r2, [r3, #4]
 8007a82:	e008      	b.n	8007a96 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2240      	movs	r2, #64	; 0x40
 8007a88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e0b7      	b.n	8007c06 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a5f      	ldr	r2, [pc, #380]	; (8007c18 <HAL_DMA_Init+0x658>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d072      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a5d      	ldr	r2, [pc, #372]	; (8007c1c <HAL_DMA_Init+0x65c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d06d      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a5c      	ldr	r2, [pc, #368]	; (8007c20 <HAL_DMA_Init+0x660>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d068      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a5a      	ldr	r2, [pc, #360]	; (8007c24 <HAL_DMA_Init+0x664>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d063      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a59      	ldr	r2, [pc, #356]	; (8007c28 <HAL_DMA_Init+0x668>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d05e      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a57      	ldr	r2, [pc, #348]	; (8007c2c <HAL_DMA_Init+0x66c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d059      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a56      	ldr	r2, [pc, #344]	; (8007c30 <HAL_DMA_Init+0x670>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d054      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a54      	ldr	r2, [pc, #336]	; (8007c34 <HAL_DMA_Init+0x674>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d04f      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a53      	ldr	r2, [pc, #332]	; (8007c38 <HAL_DMA_Init+0x678>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d04a      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a51      	ldr	r2, [pc, #324]	; (8007c3c <HAL_DMA_Init+0x67c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d045      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a50      	ldr	r2, [pc, #320]	; (8007c40 <HAL_DMA_Init+0x680>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d040      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a4e      	ldr	r2, [pc, #312]	; (8007c44 <HAL_DMA_Init+0x684>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d03b      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a4d      	ldr	r2, [pc, #308]	; (8007c48 <HAL_DMA_Init+0x688>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d036      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a4b      	ldr	r2, [pc, #300]	; (8007c4c <HAL_DMA_Init+0x68c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d031      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a4a      	ldr	r2, [pc, #296]	; (8007c50 <HAL_DMA_Init+0x690>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d02c      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a48      	ldr	r2, [pc, #288]	; (8007c54 <HAL_DMA_Init+0x694>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d027      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a47      	ldr	r2, [pc, #284]	; (8007c58 <HAL_DMA_Init+0x698>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d022      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a45      	ldr	r2, [pc, #276]	; (8007c5c <HAL_DMA_Init+0x69c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d01d      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a44      	ldr	r2, [pc, #272]	; (8007c60 <HAL_DMA_Init+0x6a0>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d018      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a42      	ldr	r2, [pc, #264]	; (8007c64 <HAL_DMA_Init+0x6a4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d013      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a41      	ldr	r2, [pc, #260]	; (8007c68 <HAL_DMA_Init+0x6a8>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00e      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a3f      	ldr	r2, [pc, #252]	; (8007c6c <HAL_DMA_Init+0x6ac>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d009      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a3e      	ldr	r2, [pc, #248]	; (8007c70 <HAL_DMA_Init+0x6b0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d004      	beq.n	8007b86 <HAL_DMA_Init+0x5c6>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a3c      	ldr	r2, [pc, #240]	; (8007c74 <HAL_DMA_Init+0x6b4>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d101      	bne.n	8007b8a <HAL_DMA_Init+0x5ca>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <HAL_DMA_Init+0x5cc>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d032      	beq.n	8007bf6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f002 fa41 	bl	800a018 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b80      	cmp	r3, #128	; 0x80
 8007b9c:	d102      	bne.n	8007ba4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007bb8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d010      	beq.n	8007be4 <HAL_DMA_Init+0x624>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d80c      	bhi.n	8007be4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f002 fabe 	bl	800a14c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007be0:	605a      	str	r2, [r3, #4]
 8007be2:	e008      	b.n	8007bf6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	a7fdabf8 	.word	0xa7fdabf8
 8007c14:	cccccccd 	.word	0xcccccccd
 8007c18:	40020010 	.word	0x40020010
 8007c1c:	40020028 	.word	0x40020028
 8007c20:	40020040 	.word	0x40020040
 8007c24:	40020058 	.word	0x40020058
 8007c28:	40020070 	.word	0x40020070
 8007c2c:	40020088 	.word	0x40020088
 8007c30:	400200a0 	.word	0x400200a0
 8007c34:	400200b8 	.word	0x400200b8
 8007c38:	40020410 	.word	0x40020410
 8007c3c:	40020428 	.word	0x40020428
 8007c40:	40020440 	.word	0x40020440
 8007c44:	40020458 	.word	0x40020458
 8007c48:	40020470 	.word	0x40020470
 8007c4c:	40020488 	.word	0x40020488
 8007c50:	400204a0 	.word	0x400204a0
 8007c54:	400204b8 	.word	0x400204b8
 8007c58:	58025408 	.word	0x58025408
 8007c5c:	5802541c 	.word	0x5802541c
 8007c60:	58025430 	.word	0x58025430
 8007c64:	58025444 	.word	0x58025444
 8007c68:	58025458 	.word	0x58025458
 8007c6c:	5802546c 	.word	0x5802546c
 8007c70:	58025480 	.word	0x58025480
 8007c74:	58025494 	.word	0x58025494

08007c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e226      	b.n	80080e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_DMA_Start_IT+0x2a>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e21f      	b.n	80080e2 <HAL_DMA_Start_IT+0x46a>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	f040 820a 	bne.w	80080cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a68      	ldr	r2, [pc, #416]	; (8007e6c <HAL_DMA_Start_IT+0x1f4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d04a      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a66      	ldr	r2, [pc, #408]	; (8007e70 <HAL_DMA_Start_IT+0x1f8>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d045      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a65      	ldr	r2, [pc, #404]	; (8007e74 <HAL_DMA_Start_IT+0x1fc>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d040      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a63      	ldr	r2, [pc, #396]	; (8007e78 <HAL_DMA_Start_IT+0x200>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d03b      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a62      	ldr	r2, [pc, #392]	; (8007e7c <HAL_DMA_Start_IT+0x204>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d036      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a60      	ldr	r2, [pc, #384]	; (8007e80 <HAL_DMA_Start_IT+0x208>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d031      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a5f      	ldr	r2, [pc, #380]	; (8007e84 <HAL_DMA_Start_IT+0x20c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d02c      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a5d      	ldr	r2, [pc, #372]	; (8007e88 <HAL_DMA_Start_IT+0x210>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d027      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a5c      	ldr	r2, [pc, #368]	; (8007e8c <HAL_DMA_Start_IT+0x214>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d022      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a5a      	ldr	r2, [pc, #360]	; (8007e90 <HAL_DMA_Start_IT+0x218>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d01d      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a59      	ldr	r2, [pc, #356]	; (8007e94 <HAL_DMA_Start_IT+0x21c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d018      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a57      	ldr	r2, [pc, #348]	; (8007e98 <HAL_DMA_Start_IT+0x220>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d013      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a56      	ldr	r2, [pc, #344]	; (8007e9c <HAL_DMA_Start_IT+0x224>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00e      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a54      	ldr	r2, [pc, #336]	; (8007ea0 <HAL_DMA_Start_IT+0x228>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d009      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a53      	ldr	r2, [pc, #332]	; (8007ea4 <HAL_DMA_Start_IT+0x22c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d004      	beq.n	8007d66 <HAL_DMA_Start_IT+0xee>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a51      	ldr	r2, [pc, #324]	; (8007ea8 <HAL_DMA_Start_IT+0x230>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d108      	bne.n	8007d78 <HAL_DMA_Start_IT+0x100>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0201 	bic.w	r2, r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	e007      	b.n	8007d88 <HAL_DMA_Start_IT+0x110>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0201 	bic.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f001 fe68 	bl	8009a64 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a34      	ldr	r2, [pc, #208]	; (8007e6c <HAL_DMA_Start_IT+0x1f4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d04a      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a33      	ldr	r2, [pc, #204]	; (8007e70 <HAL_DMA_Start_IT+0x1f8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d045      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a31      	ldr	r2, [pc, #196]	; (8007e74 <HAL_DMA_Start_IT+0x1fc>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d040      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a30      	ldr	r2, [pc, #192]	; (8007e78 <HAL_DMA_Start_IT+0x200>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d03b      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a2e      	ldr	r2, [pc, #184]	; (8007e7c <HAL_DMA_Start_IT+0x204>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d036      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a2d      	ldr	r2, [pc, #180]	; (8007e80 <HAL_DMA_Start_IT+0x208>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d031      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a2b      	ldr	r2, [pc, #172]	; (8007e84 <HAL_DMA_Start_IT+0x20c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d02c      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a2a      	ldr	r2, [pc, #168]	; (8007e88 <HAL_DMA_Start_IT+0x210>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d027      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a28      	ldr	r2, [pc, #160]	; (8007e8c <HAL_DMA_Start_IT+0x214>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d022      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a27      	ldr	r2, [pc, #156]	; (8007e90 <HAL_DMA_Start_IT+0x218>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d01d      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a25      	ldr	r2, [pc, #148]	; (8007e94 <HAL_DMA_Start_IT+0x21c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d018      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a24      	ldr	r2, [pc, #144]	; (8007e98 <HAL_DMA_Start_IT+0x220>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d013      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a22      	ldr	r2, [pc, #136]	; (8007e9c <HAL_DMA_Start_IT+0x224>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00e      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a21      	ldr	r2, [pc, #132]	; (8007ea0 <HAL_DMA_Start_IT+0x228>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d009      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a1f      	ldr	r2, [pc, #124]	; (8007ea4 <HAL_DMA_Start_IT+0x22c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d004      	beq.n	8007e34 <HAL_DMA_Start_IT+0x1bc>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <HAL_DMA_Start_IT+0x230>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d101      	bne.n	8007e38 <HAL_DMA_Start_IT+0x1c0>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <HAL_DMA_Start_IT+0x1c2>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d036      	beq.n	8007eac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f023 021e 	bic.w	r2, r3, #30
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 0216 	orr.w	r2, r2, #22
 8007e50:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d03e      	beq.n	8007ed8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f042 0208 	orr.w	r2, r2, #8
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	e035      	b.n	8007ed8 <HAL_DMA_Start_IT+0x260>
 8007e6c:	40020010 	.word	0x40020010
 8007e70:	40020028 	.word	0x40020028
 8007e74:	40020040 	.word	0x40020040
 8007e78:	40020058 	.word	0x40020058
 8007e7c:	40020070 	.word	0x40020070
 8007e80:	40020088 	.word	0x40020088
 8007e84:	400200a0 	.word	0x400200a0
 8007e88:	400200b8 	.word	0x400200b8
 8007e8c:	40020410 	.word	0x40020410
 8007e90:	40020428 	.word	0x40020428
 8007e94:	40020440 	.word	0x40020440
 8007e98:	40020458 	.word	0x40020458
 8007e9c:	40020470 	.word	0x40020470
 8007ea0:	40020488 	.word	0x40020488
 8007ea4:	400204a0 	.word	0x400204a0
 8007ea8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f023 020e 	bic.w	r2, r3, #14
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 020a 	orr.w	r2, r2, #10
 8007ebe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0204 	orr.w	r2, r2, #4
 8007ed6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a83      	ldr	r2, [pc, #524]	; (80080ec <HAL_DMA_Start_IT+0x474>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d072      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a82      	ldr	r2, [pc, #520]	; (80080f0 <HAL_DMA_Start_IT+0x478>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d06d      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a80      	ldr	r2, [pc, #512]	; (80080f4 <HAL_DMA_Start_IT+0x47c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d068      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a7f      	ldr	r2, [pc, #508]	; (80080f8 <HAL_DMA_Start_IT+0x480>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d063      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a7d      	ldr	r2, [pc, #500]	; (80080fc <HAL_DMA_Start_IT+0x484>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d05e      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a7c      	ldr	r2, [pc, #496]	; (8008100 <HAL_DMA_Start_IT+0x488>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d059      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a7a      	ldr	r2, [pc, #488]	; (8008104 <HAL_DMA_Start_IT+0x48c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d054      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a79      	ldr	r2, [pc, #484]	; (8008108 <HAL_DMA_Start_IT+0x490>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d04f      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a77      	ldr	r2, [pc, #476]	; (800810c <HAL_DMA_Start_IT+0x494>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d04a      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a76      	ldr	r2, [pc, #472]	; (8008110 <HAL_DMA_Start_IT+0x498>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d045      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a74      	ldr	r2, [pc, #464]	; (8008114 <HAL_DMA_Start_IT+0x49c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d040      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a73      	ldr	r2, [pc, #460]	; (8008118 <HAL_DMA_Start_IT+0x4a0>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d03b      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a71      	ldr	r2, [pc, #452]	; (800811c <HAL_DMA_Start_IT+0x4a4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d036      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a70      	ldr	r2, [pc, #448]	; (8008120 <HAL_DMA_Start_IT+0x4a8>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d031      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a6e      	ldr	r2, [pc, #440]	; (8008124 <HAL_DMA_Start_IT+0x4ac>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d02c      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a6d      	ldr	r2, [pc, #436]	; (8008128 <HAL_DMA_Start_IT+0x4b0>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d027      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a6b      	ldr	r2, [pc, #428]	; (800812c <HAL_DMA_Start_IT+0x4b4>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d022      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a6a      	ldr	r2, [pc, #424]	; (8008130 <HAL_DMA_Start_IT+0x4b8>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d01d      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a68      	ldr	r2, [pc, #416]	; (8008134 <HAL_DMA_Start_IT+0x4bc>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d018      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a67      	ldr	r2, [pc, #412]	; (8008138 <HAL_DMA_Start_IT+0x4c0>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d013      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a65      	ldr	r2, [pc, #404]	; (800813c <HAL_DMA_Start_IT+0x4c4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a64      	ldr	r2, [pc, #400]	; (8008140 <HAL_DMA_Start_IT+0x4c8>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d009      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a62      	ldr	r2, [pc, #392]	; (8008144 <HAL_DMA_Start_IT+0x4cc>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_DMA_Start_IT+0x350>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a61      	ldr	r2, [pc, #388]	; (8008148 <HAL_DMA_Start_IT+0x4d0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d101      	bne.n	8007fcc <HAL_DMA_Start_IT+0x354>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e000      	b.n	8007fce <HAL_DMA_Start_IT+0x356>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d01a      	beq.n	8008008 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d007      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d007      	beq.n	8008008 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008006:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a37      	ldr	r2, [pc, #220]	; (80080ec <HAL_DMA_Start_IT+0x474>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d04a      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a36      	ldr	r2, [pc, #216]	; (80080f0 <HAL_DMA_Start_IT+0x478>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d045      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a34      	ldr	r2, [pc, #208]	; (80080f4 <HAL_DMA_Start_IT+0x47c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d040      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a33      	ldr	r2, [pc, #204]	; (80080f8 <HAL_DMA_Start_IT+0x480>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d03b      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a31      	ldr	r2, [pc, #196]	; (80080fc <HAL_DMA_Start_IT+0x484>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d036      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a30      	ldr	r2, [pc, #192]	; (8008100 <HAL_DMA_Start_IT+0x488>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d031      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a2e      	ldr	r2, [pc, #184]	; (8008104 <HAL_DMA_Start_IT+0x48c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d02c      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a2d      	ldr	r2, [pc, #180]	; (8008108 <HAL_DMA_Start_IT+0x490>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d027      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a2b      	ldr	r2, [pc, #172]	; (800810c <HAL_DMA_Start_IT+0x494>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d022      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a2a      	ldr	r2, [pc, #168]	; (8008110 <HAL_DMA_Start_IT+0x498>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d01d      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a28      	ldr	r2, [pc, #160]	; (8008114 <HAL_DMA_Start_IT+0x49c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d018      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a27      	ldr	r2, [pc, #156]	; (8008118 <HAL_DMA_Start_IT+0x4a0>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d013      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a25      	ldr	r2, [pc, #148]	; (800811c <HAL_DMA_Start_IT+0x4a4>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00e      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a24      	ldr	r2, [pc, #144]	; (8008120 <HAL_DMA_Start_IT+0x4a8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d009      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a22      	ldr	r2, [pc, #136]	; (8008124 <HAL_DMA_Start_IT+0x4ac>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d004      	beq.n	80080a8 <HAL_DMA_Start_IT+0x430>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a21      	ldr	r2, [pc, #132]	; (8008128 <HAL_DMA_Start_IT+0x4b0>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d108      	bne.n	80080ba <HAL_DMA_Start_IT+0x442>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f042 0201 	orr.w	r2, r2, #1
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	e012      	b.n	80080e0 <HAL_DMA_Start_IT+0x468>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f042 0201 	orr.w	r2, r2, #1
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	e009      	b.n	80080e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80080e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	40020010 	.word	0x40020010
 80080f0:	40020028 	.word	0x40020028
 80080f4:	40020040 	.word	0x40020040
 80080f8:	40020058 	.word	0x40020058
 80080fc:	40020070 	.word	0x40020070
 8008100:	40020088 	.word	0x40020088
 8008104:	400200a0 	.word	0x400200a0
 8008108:	400200b8 	.word	0x400200b8
 800810c:	40020410 	.word	0x40020410
 8008110:	40020428 	.word	0x40020428
 8008114:	40020440 	.word	0x40020440
 8008118:	40020458 	.word	0x40020458
 800811c:	40020470 	.word	0x40020470
 8008120:	40020488 	.word	0x40020488
 8008124:	400204a0 	.word	0x400204a0
 8008128:	400204b8 	.word	0x400204b8
 800812c:	58025408 	.word	0x58025408
 8008130:	5802541c 	.word	0x5802541c
 8008134:	58025430 	.word	0x58025430
 8008138:	58025444 	.word	0x58025444
 800813c:	58025458 	.word	0x58025458
 8008140:	5802546c 	.word	0x5802546c
 8008144:	58025480 	.word	0x58025480
 8008148:	58025494 	.word	0x58025494

0800814c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008154:	f7fe fede 	bl	8006f14 <HAL_GetTick>
 8008158:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e2dc      	b.n	800871e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d008      	beq.n	8008182 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2280      	movs	r2, #128	; 0x80
 8008174:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e2cd      	b.n	800871e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a76      	ldr	r2, [pc, #472]	; (8008360 <HAL_DMA_Abort+0x214>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d04a      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a74      	ldr	r2, [pc, #464]	; (8008364 <HAL_DMA_Abort+0x218>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d045      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a73      	ldr	r2, [pc, #460]	; (8008368 <HAL_DMA_Abort+0x21c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d040      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a71      	ldr	r2, [pc, #452]	; (800836c <HAL_DMA_Abort+0x220>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d03b      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a70      	ldr	r2, [pc, #448]	; (8008370 <HAL_DMA_Abort+0x224>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d036      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a6e      	ldr	r2, [pc, #440]	; (8008374 <HAL_DMA_Abort+0x228>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d031      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a6d      	ldr	r2, [pc, #436]	; (8008378 <HAL_DMA_Abort+0x22c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d02c      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a6b      	ldr	r2, [pc, #428]	; (800837c <HAL_DMA_Abort+0x230>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d027      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a6a      	ldr	r2, [pc, #424]	; (8008380 <HAL_DMA_Abort+0x234>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d022      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a68      	ldr	r2, [pc, #416]	; (8008384 <HAL_DMA_Abort+0x238>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d01d      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a67      	ldr	r2, [pc, #412]	; (8008388 <HAL_DMA_Abort+0x23c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d018      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a65      	ldr	r2, [pc, #404]	; (800838c <HAL_DMA_Abort+0x240>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a64      	ldr	r2, [pc, #400]	; (8008390 <HAL_DMA_Abort+0x244>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00e      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a62      	ldr	r2, [pc, #392]	; (8008394 <HAL_DMA_Abort+0x248>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d009      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a61      	ldr	r2, [pc, #388]	; (8008398 <HAL_DMA_Abort+0x24c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d004      	beq.n	8008222 <HAL_DMA_Abort+0xd6>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a5f      	ldr	r2, [pc, #380]	; (800839c <HAL_DMA_Abort+0x250>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d101      	bne.n	8008226 <HAL_DMA_Abort+0xda>
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <HAL_DMA_Abort+0xdc>
 8008226:	2300      	movs	r3, #0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d013      	beq.n	8008254 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 021e 	bic.w	r2, r2, #30
 800823a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	695a      	ldr	r2, [r3, #20]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800824a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	e00a      	b.n	800826a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f022 020e 	bic.w	r2, r2, #14
 8008262:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a3c      	ldr	r2, [pc, #240]	; (8008360 <HAL_DMA_Abort+0x214>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d072      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a3a      	ldr	r2, [pc, #232]	; (8008364 <HAL_DMA_Abort+0x218>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d06d      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a39      	ldr	r2, [pc, #228]	; (8008368 <HAL_DMA_Abort+0x21c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d068      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a37      	ldr	r2, [pc, #220]	; (800836c <HAL_DMA_Abort+0x220>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d063      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a36      	ldr	r2, [pc, #216]	; (8008370 <HAL_DMA_Abort+0x224>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d05e      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a34      	ldr	r2, [pc, #208]	; (8008374 <HAL_DMA_Abort+0x228>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d059      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a33      	ldr	r2, [pc, #204]	; (8008378 <HAL_DMA_Abort+0x22c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d054      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a31      	ldr	r2, [pc, #196]	; (800837c <HAL_DMA_Abort+0x230>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d04f      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a30      	ldr	r2, [pc, #192]	; (8008380 <HAL_DMA_Abort+0x234>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d04a      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a2e      	ldr	r2, [pc, #184]	; (8008384 <HAL_DMA_Abort+0x238>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d045      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a2d      	ldr	r2, [pc, #180]	; (8008388 <HAL_DMA_Abort+0x23c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d040      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a2b      	ldr	r2, [pc, #172]	; (800838c <HAL_DMA_Abort+0x240>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d03b      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a2a      	ldr	r2, [pc, #168]	; (8008390 <HAL_DMA_Abort+0x244>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d036      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a28      	ldr	r2, [pc, #160]	; (8008394 <HAL_DMA_Abort+0x248>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d031      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a27      	ldr	r2, [pc, #156]	; (8008398 <HAL_DMA_Abort+0x24c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d02c      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a25      	ldr	r2, [pc, #148]	; (800839c <HAL_DMA_Abort+0x250>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d027      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a24      	ldr	r2, [pc, #144]	; (80083a0 <HAL_DMA_Abort+0x254>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d022      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a22      	ldr	r2, [pc, #136]	; (80083a4 <HAL_DMA_Abort+0x258>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d01d      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a21      	ldr	r2, [pc, #132]	; (80083a8 <HAL_DMA_Abort+0x25c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d018      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1f      	ldr	r2, [pc, #124]	; (80083ac <HAL_DMA_Abort+0x260>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d013      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1e      	ldr	r2, [pc, #120]	; (80083b0 <HAL_DMA_Abort+0x264>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d00e      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a1c      	ldr	r2, [pc, #112]	; (80083b4 <HAL_DMA_Abort+0x268>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d009      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1b      	ldr	r2, [pc, #108]	; (80083b8 <HAL_DMA_Abort+0x26c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d004      	beq.n	800835a <HAL_DMA_Abort+0x20e>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a19      	ldr	r2, [pc, #100]	; (80083bc <HAL_DMA_Abort+0x270>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d132      	bne.n	80083c0 <HAL_DMA_Abort+0x274>
 800835a:	2301      	movs	r3, #1
 800835c:	e031      	b.n	80083c2 <HAL_DMA_Abort+0x276>
 800835e:	bf00      	nop
 8008360:	40020010 	.word	0x40020010
 8008364:	40020028 	.word	0x40020028
 8008368:	40020040 	.word	0x40020040
 800836c:	40020058 	.word	0x40020058
 8008370:	40020070 	.word	0x40020070
 8008374:	40020088 	.word	0x40020088
 8008378:	400200a0 	.word	0x400200a0
 800837c:	400200b8 	.word	0x400200b8
 8008380:	40020410 	.word	0x40020410
 8008384:	40020428 	.word	0x40020428
 8008388:	40020440 	.word	0x40020440
 800838c:	40020458 	.word	0x40020458
 8008390:	40020470 	.word	0x40020470
 8008394:	40020488 	.word	0x40020488
 8008398:	400204a0 	.word	0x400204a0
 800839c:	400204b8 	.word	0x400204b8
 80083a0:	58025408 	.word	0x58025408
 80083a4:	5802541c 	.word	0x5802541c
 80083a8:	58025430 	.word	0x58025430
 80083ac:	58025444 	.word	0x58025444
 80083b0:	58025458 	.word	0x58025458
 80083b4:	5802546c 	.word	0x5802546c
 80083b8:	58025480 	.word	0x58025480
 80083bc:	58025494 	.word	0x58025494
 80083c0:	2300      	movs	r3, #0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a6d      	ldr	r2, [pc, #436]	; (8008590 <HAL_DMA_Abort+0x444>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d04a      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a6b      	ldr	r2, [pc, #428]	; (8008594 <HAL_DMA_Abort+0x448>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d045      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a6a      	ldr	r2, [pc, #424]	; (8008598 <HAL_DMA_Abort+0x44c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d040      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a68      	ldr	r2, [pc, #416]	; (800859c <HAL_DMA_Abort+0x450>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d03b      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a67      	ldr	r2, [pc, #412]	; (80085a0 <HAL_DMA_Abort+0x454>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d036      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a65      	ldr	r2, [pc, #404]	; (80085a4 <HAL_DMA_Abort+0x458>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d031      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a64      	ldr	r2, [pc, #400]	; (80085a8 <HAL_DMA_Abort+0x45c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d02c      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a62      	ldr	r2, [pc, #392]	; (80085ac <HAL_DMA_Abort+0x460>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d027      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a61      	ldr	r2, [pc, #388]	; (80085b0 <HAL_DMA_Abort+0x464>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d022      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a5f      	ldr	r2, [pc, #380]	; (80085b4 <HAL_DMA_Abort+0x468>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d01d      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a5e      	ldr	r2, [pc, #376]	; (80085b8 <HAL_DMA_Abort+0x46c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d018      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a5c      	ldr	r2, [pc, #368]	; (80085bc <HAL_DMA_Abort+0x470>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d013      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a5b      	ldr	r2, [pc, #364]	; (80085c0 <HAL_DMA_Abort+0x474>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00e      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a59      	ldr	r2, [pc, #356]	; (80085c4 <HAL_DMA_Abort+0x478>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d009      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a58      	ldr	r2, [pc, #352]	; (80085c8 <HAL_DMA_Abort+0x47c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d004      	beq.n	8008476 <HAL_DMA_Abort+0x32a>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a56      	ldr	r2, [pc, #344]	; (80085cc <HAL_DMA_Abort+0x480>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d108      	bne.n	8008488 <HAL_DMA_Abort+0x33c>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0201 	bic.w	r2, r2, #1
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e007      	b.n	8008498 <HAL_DMA_Abort+0x34c>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0201 	bic.w	r2, r2, #1
 8008496:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008498:	e013      	b.n	80084c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800849a:	f7fe fd3b 	bl	8006f14 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b05      	cmp	r3, #5
 80084a6:	d90c      	bls.n	80084c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2203      	movs	r2, #3
 80084b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e12d      	b.n	800871e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e5      	bne.n	800849a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a2f      	ldr	r2, [pc, #188]	; (8008590 <HAL_DMA_Abort+0x444>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d04a      	beq.n	800856e <HAL_DMA_Abort+0x422>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a2d      	ldr	r2, [pc, #180]	; (8008594 <HAL_DMA_Abort+0x448>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d045      	beq.n	800856e <HAL_DMA_Abort+0x422>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a2c      	ldr	r2, [pc, #176]	; (8008598 <HAL_DMA_Abort+0x44c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d040      	beq.n	800856e <HAL_DMA_Abort+0x422>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a2a      	ldr	r2, [pc, #168]	; (800859c <HAL_DMA_Abort+0x450>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d03b      	beq.n	800856e <HAL_DMA_Abort+0x422>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a29      	ldr	r2, [pc, #164]	; (80085a0 <HAL_DMA_Abort+0x454>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d036      	beq.n	800856e <HAL_DMA_Abort+0x422>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a27      	ldr	r2, [pc, #156]	; (80085a4 <HAL_DMA_Abort+0x458>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d031      	beq.n	800856e <HAL_DMA_Abort+0x422>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a26      	ldr	r2, [pc, #152]	; (80085a8 <HAL_DMA_Abort+0x45c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d02c      	beq.n	800856e <HAL_DMA_Abort+0x422>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a24      	ldr	r2, [pc, #144]	; (80085ac <HAL_DMA_Abort+0x460>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d027      	beq.n	800856e <HAL_DMA_Abort+0x422>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a23      	ldr	r2, [pc, #140]	; (80085b0 <HAL_DMA_Abort+0x464>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d022      	beq.n	800856e <HAL_DMA_Abort+0x422>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a21      	ldr	r2, [pc, #132]	; (80085b4 <HAL_DMA_Abort+0x468>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d01d      	beq.n	800856e <HAL_DMA_Abort+0x422>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <HAL_DMA_Abort+0x46c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d018      	beq.n	800856e <HAL_DMA_Abort+0x422>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a1e      	ldr	r2, [pc, #120]	; (80085bc <HAL_DMA_Abort+0x470>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d013      	beq.n	800856e <HAL_DMA_Abort+0x422>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a1d      	ldr	r2, [pc, #116]	; (80085c0 <HAL_DMA_Abort+0x474>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00e      	beq.n	800856e <HAL_DMA_Abort+0x422>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a1b      	ldr	r2, [pc, #108]	; (80085c4 <HAL_DMA_Abort+0x478>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d009      	beq.n	800856e <HAL_DMA_Abort+0x422>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a1a      	ldr	r2, [pc, #104]	; (80085c8 <HAL_DMA_Abort+0x47c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d004      	beq.n	800856e <HAL_DMA_Abort+0x422>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a18      	ldr	r2, [pc, #96]	; (80085cc <HAL_DMA_Abort+0x480>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d101      	bne.n	8008572 <HAL_DMA_Abort+0x426>
 800856e:	2301      	movs	r3, #1
 8008570:	e000      	b.n	8008574 <HAL_DMA_Abort+0x428>
 8008572:	2300      	movs	r3, #0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d02b      	beq.n	80085d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008582:	f003 031f 	and.w	r3, r3, #31
 8008586:	223f      	movs	r2, #63	; 0x3f
 8008588:	409a      	lsls	r2, r3
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	609a      	str	r2, [r3, #8]
 800858e:	e02a      	b.n	80085e6 <HAL_DMA_Abort+0x49a>
 8008590:	40020010 	.word	0x40020010
 8008594:	40020028 	.word	0x40020028
 8008598:	40020040 	.word	0x40020040
 800859c:	40020058 	.word	0x40020058
 80085a0:	40020070 	.word	0x40020070
 80085a4:	40020088 	.word	0x40020088
 80085a8:	400200a0 	.word	0x400200a0
 80085ac:	400200b8 	.word	0x400200b8
 80085b0:	40020410 	.word	0x40020410
 80085b4:	40020428 	.word	0x40020428
 80085b8:	40020440 	.word	0x40020440
 80085bc:	40020458 	.word	0x40020458
 80085c0:	40020470 	.word	0x40020470
 80085c4:	40020488 	.word	0x40020488
 80085c8:	400204a0 	.word	0x400204a0
 80085cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085da:	f003 031f 	and.w	r3, r3, #31
 80085de:	2201      	movs	r2, #1
 80085e0:	409a      	lsls	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a4f      	ldr	r2, [pc, #316]	; (8008728 <HAL_DMA_Abort+0x5dc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d072      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a4d      	ldr	r2, [pc, #308]	; (800872c <HAL_DMA_Abort+0x5e0>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d06d      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a4c      	ldr	r2, [pc, #304]	; (8008730 <HAL_DMA_Abort+0x5e4>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d068      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a4a      	ldr	r2, [pc, #296]	; (8008734 <HAL_DMA_Abort+0x5e8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d063      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a49      	ldr	r2, [pc, #292]	; (8008738 <HAL_DMA_Abort+0x5ec>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d05e      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a47      	ldr	r2, [pc, #284]	; (800873c <HAL_DMA_Abort+0x5f0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d059      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a46      	ldr	r2, [pc, #280]	; (8008740 <HAL_DMA_Abort+0x5f4>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d054      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a44      	ldr	r2, [pc, #272]	; (8008744 <HAL_DMA_Abort+0x5f8>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d04f      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a43      	ldr	r2, [pc, #268]	; (8008748 <HAL_DMA_Abort+0x5fc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d04a      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a41      	ldr	r2, [pc, #260]	; (800874c <HAL_DMA_Abort+0x600>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d045      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a40      	ldr	r2, [pc, #256]	; (8008750 <HAL_DMA_Abort+0x604>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d040      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a3e      	ldr	r2, [pc, #248]	; (8008754 <HAL_DMA_Abort+0x608>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d03b      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a3d      	ldr	r2, [pc, #244]	; (8008758 <HAL_DMA_Abort+0x60c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d036      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a3b      	ldr	r2, [pc, #236]	; (800875c <HAL_DMA_Abort+0x610>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d031      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a3a      	ldr	r2, [pc, #232]	; (8008760 <HAL_DMA_Abort+0x614>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d02c      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a38      	ldr	r2, [pc, #224]	; (8008764 <HAL_DMA_Abort+0x618>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d027      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a37      	ldr	r2, [pc, #220]	; (8008768 <HAL_DMA_Abort+0x61c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d022      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a35      	ldr	r2, [pc, #212]	; (800876c <HAL_DMA_Abort+0x620>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d01d      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a34      	ldr	r2, [pc, #208]	; (8008770 <HAL_DMA_Abort+0x624>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d018      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a32      	ldr	r2, [pc, #200]	; (8008774 <HAL_DMA_Abort+0x628>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d013      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a31      	ldr	r2, [pc, #196]	; (8008778 <HAL_DMA_Abort+0x62c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d00e      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a2f      	ldr	r2, [pc, #188]	; (800877c <HAL_DMA_Abort+0x630>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d009      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a2e      	ldr	r2, [pc, #184]	; (8008780 <HAL_DMA_Abort+0x634>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d004      	beq.n	80086d6 <HAL_DMA_Abort+0x58a>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a2c      	ldr	r2, [pc, #176]	; (8008784 <HAL_DMA_Abort+0x638>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d101      	bne.n	80086da <HAL_DMA_Abort+0x58e>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <HAL_DMA_Abort+0x590>
 80086da:	2300      	movs	r3, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d015      	beq.n	800870c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80086e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00c      	beq.n	800870c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008700:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800870a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	40020010 	.word	0x40020010
 800872c:	40020028 	.word	0x40020028
 8008730:	40020040 	.word	0x40020040
 8008734:	40020058 	.word	0x40020058
 8008738:	40020070 	.word	0x40020070
 800873c:	40020088 	.word	0x40020088
 8008740:	400200a0 	.word	0x400200a0
 8008744:	400200b8 	.word	0x400200b8
 8008748:	40020410 	.word	0x40020410
 800874c:	40020428 	.word	0x40020428
 8008750:	40020440 	.word	0x40020440
 8008754:	40020458 	.word	0x40020458
 8008758:	40020470 	.word	0x40020470
 800875c:	40020488 	.word	0x40020488
 8008760:	400204a0 	.word	0x400204a0
 8008764:	400204b8 	.word	0x400204b8
 8008768:	58025408 	.word	0x58025408
 800876c:	5802541c 	.word	0x5802541c
 8008770:	58025430 	.word	0x58025430
 8008774:	58025444 	.word	0x58025444
 8008778:	58025458 	.word	0x58025458
 800877c:	5802546c 	.word	0x5802546c
 8008780:	58025480 	.word	0x58025480
 8008784:	58025494 	.word	0x58025494

08008788 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e205      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d004      	beq.n	80087b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2280      	movs	r2, #128	; 0x80
 80087aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e1fa      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a8c      	ldr	r2, [pc, #560]	; (80089e8 <HAL_DMA_Abort_IT+0x260>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d04a      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a8b      	ldr	r2, [pc, #556]	; (80089ec <HAL_DMA_Abort_IT+0x264>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d045      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a89      	ldr	r2, [pc, #548]	; (80089f0 <HAL_DMA_Abort_IT+0x268>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d040      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a88      	ldr	r2, [pc, #544]	; (80089f4 <HAL_DMA_Abort_IT+0x26c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d03b      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a86      	ldr	r2, [pc, #536]	; (80089f8 <HAL_DMA_Abort_IT+0x270>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d036      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a85      	ldr	r2, [pc, #532]	; (80089fc <HAL_DMA_Abort_IT+0x274>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d031      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a83      	ldr	r2, [pc, #524]	; (8008a00 <HAL_DMA_Abort_IT+0x278>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d02c      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a82      	ldr	r2, [pc, #520]	; (8008a04 <HAL_DMA_Abort_IT+0x27c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d027      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a80      	ldr	r2, [pc, #512]	; (8008a08 <HAL_DMA_Abort_IT+0x280>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d022      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a7f      	ldr	r2, [pc, #508]	; (8008a0c <HAL_DMA_Abort_IT+0x284>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d01d      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a7d      	ldr	r2, [pc, #500]	; (8008a10 <HAL_DMA_Abort_IT+0x288>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d018      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a7c      	ldr	r2, [pc, #496]	; (8008a14 <HAL_DMA_Abort_IT+0x28c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d013      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a7a      	ldr	r2, [pc, #488]	; (8008a18 <HAL_DMA_Abort_IT+0x290>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00e      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a79      	ldr	r2, [pc, #484]	; (8008a1c <HAL_DMA_Abort_IT+0x294>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d009      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a77      	ldr	r2, [pc, #476]	; (8008a20 <HAL_DMA_Abort_IT+0x298>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d004      	beq.n	8008850 <HAL_DMA_Abort_IT+0xc8>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a76      	ldr	r2, [pc, #472]	; (8008a24 <HAL_DMA_Abort_IT+0x29c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d101      	bne.n	8008854 <HAL_DMA_Abort_IT+0xcc>
 8008850:	2301      	movs	r3, #1
 8008852:	e000      	b.n	8008856 <HAL_DMA_Abort_IT+0xce>
 8008854:	2300      	movs	r3, #0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d065      	beq.n	8008926 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2204      	movs	r2, #4
 800885e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a60      	ldr	r2, [pc, #384]	; (80089e8 <HAL_DMA_Abort_IT+0x260>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d04a      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a5e      	ldr	r2, [pc, #376]	; (80089ec <HAL_DMA_Abort_IT+0x264>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d045      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a5d      	ldr	r2, [pc, #372]	; (80089f0 <HAL_DMA_Abort_IT+0x268>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d040      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a5b      	ldr	r2, [pc, #364]	; (80089f4 <HAL_DMA_Abort_IT+0x26c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d03b      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a5a      	ldr	r2, [pc, #360]	; (80089f8 <HAL_DMA_Abort_IT+0x270>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d036      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a58      	ldr	r2, [pc, #352]	; (80089fc <HAL_DMA_Abort_IT+0x274>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d031      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a57      	ldr	r2, [pc, #348]	; (8008a00 <HAL_DMA_Abort_IT+0x278>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d02c      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a55      	ldr	r2, [pc, #340]	; (8008a04 <HAL_DMA_Abort_IT+0x27c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d027      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a54      	ldr	r2, [pc, #336]	; (8008a08 <HAL_DMA_Abort_IT+0x280>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d022      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a52      	ldr	r2, [pc, #328]	; (8008a0c <HAL_DMA_Abort_IT+0x284>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d01d      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a51      	ldr	r2, [pc, #324]	; (8008a10 <HAL_DMA_Abort_IT+0x288>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d018      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a4f      	ldr	r2, [pc, #316]	; (8008a14 <HAL_DMA_Abort_IT+0x28c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d013      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a4e      	ldr	r2, [pc, #312]	; (8008a18 <HAL_DMA_Abort_IT+0x290>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00e      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a4c      	ldr	r2, [pc, #304]	; (8008a1c <HAL_DMA_Abort_IT+0x294>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d009      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a4b      	ldr	r2, [pc, #300]	; (8008a20 <HAL_DMA_Abort_IT+0x298>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d004      	beq.n	8008902 <HAL_DMA_Abort_IT+0x17a>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a49      	ldr	r2, [pc, #292]	; (8008a24 <HAL_DMA_Abort_IT+0x29c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d108      	bne.n	8008914 <HAL_DMA_Abort_IT+0x18c>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0201 	bic.w	r2, r2, #1
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	e147      	b.n	8008ba4 <HAL_DMA_Abort_IT+0x41c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0201 	bic.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e13e      	b.n	8008ba4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 020e 	bic.w	r2, r2, #14
 8008934:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a2b      	ldr	r2, [pc, #172]	; (80089e8 <HAL_DMA_Abort_IT+0x260>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d04a      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a29      	ldr	r2, [pc, #164]	; (80089ec <HAL_DMA_Abort_IT+0x264>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d045      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a28      	ldr	r2, [pc, #160]	; (80089f0 <HAL_DMA_Abort_IT+0x268>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d040      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a26      	ldr	r2, [pc, #152]	; (80089f4 <HAL_DMA_Abort_IT+0x26c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d03b      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a25      	ldr	r2, [pc, #148]	; (80089f8 <HAL_DMA_Abort_IT+0x270>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d036      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a23      	ldr	r2, [pc, #140]	; (80089fc <HAL_DMA_Abort_IT+0x274>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d031      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a22      	ldr	r2, [pc, #136]	; (8008a00 <HAL_DMA_Abort_IT+0x278>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d02c      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a20      	ldr	r2, [pc, #128]	; (8008a04 <HAL_DMA_Abort_IT+0x27c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d027      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1f      	ldr	r2, [pc, #124]	; (8008a08 <HAL_DMA_Abort_IT+0x280>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d022      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a1d      	ldr	r2, [pc, #116]	; (8008a0c <HAL_DMA_Abort_IT+0x284>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d01d      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a1c      	ldr	r2, [pc, #112]	; (8008a10 <HAL_DMA_Abort_IT+0x288>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d018      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a1a      	ldr	r2, [pc, #104]	; (8008a14 <HAL_DMA_Abort_IT+0x28c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d013      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a19      	ldr	r2, [pc, #100]	; (8008a18 <HAL_DMA_Abort_IT+0x290>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00e      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a17      	ldr	r2, [pc, #92]	; (8008a1c <HAL_DMA_Abort_IT+0x294>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d009      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a16      	ldr	r2, [pc, #88]	; (8008a20 <HAL_DMA_Abort_IT+0x298>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d004      	beq.n	80089d6 <HAL_DMA_Abort_IT+0x24e>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a14      	ldr	r2, [pc, #80]	; (8008a24 <HAL_DMA_Abort_IT+0x29c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d128      	bne.n	8008a28 <HAL_DMA_Abort_IT+0x2a0>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0201 	bic.w	r2, r2, #1
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	e027      	b.n	8008a38 <HAL_DMA_Abort_IT+0x2b0>
 80089e8:	40020010 	.word	0x40020010
 80089ec:	40020028 	.word	0x40020028
 80089f0:	40020040 	.word	0x40020040
 80089f4:	40020058 	.word	0x40020058
 80089f8:	40020070 	.word	0x40020070
 80089fc:	40020088 	.word	0x40020088
 8008a00:	400200a0 	.word	0x400200a0
 8008a04:	400200b8 	.word	0x400200b8
 8008a08:	40020410 	.word	0x40020410
 8008a0c:	40020428 	.word	0x40020428
 8008a10:	40020440 	.word	0x40020440
 8008a14:	40020458 	.word	0x40020458
 8008a18:	40020470 	.word	0x40020470
 8008a1c:	40020488 	.word	0x40020488
 8008a20:	400204a0 	.word	0x400204a0
 8008a24:	400204b8 	.word	0x400204b8
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0201 	bic.w	r2, r2, #1
 8008a36:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a5c      	ldr	r2, [pc, #368]	; (8008bb0 <HAL_DMA_Abort_IT+0x428>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d072      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a5b      	ldr	r2, [pc, #364]	; (8008bb4 <HAL_DMA_Abort_IT+0x42c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d06d      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a59      	ldr	r2, [pc, #356]	; (8008bb8 <HAL_DMA_Abort_IT+0x430>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d068      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a58      	ldr	r2, [pc, #352]	; (8008bbc <HAL_DMA_Abort_IT+0x434>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d063      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a56      	ldr	r2, [pc, #344]	; (8008bc0 <HAL_DMA_Abort_IT+0x438>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d05e      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a55      	ldr	r2, [pc, #340]	; (8008bc4 <HAL_DMA_Abort_IT+0x43c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d059      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a53      	ldr	r2, [pc, #332]	; (8008bc8 <HAL_DMA_Abort_IT+0x440>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d054      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a52      	ldr	r2, [pc, #328]	; (8008bcc <HAL_DMA_Abort_IT+0x444>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d04f      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a50      	ldr	r2, [pc, #320]	; (8008bd0 <HAL_DMA_Abort_IT+0x448>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d04a      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a4f      	ldr	r2, [pc, #316]	; (8008bd4 <HAL_DMA_Abort_IT+0x44c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d045      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a4d      	ldr	r2, [pc, #308]	; (8008bd8 <HAL_DMA_Abort_IT+0x450>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d040      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a4c      	ldr	r2, [pc, #304]	; (8008bdc <HAL_DMA_Abort_IT+0x454>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d03b      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a4a      	ldr	r2, [pc, #296]	; (8008be0 <HAL_DMA_Abort_IT+0x458>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d036      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a49      	ldr	r2, [pc, #292]	; (8008be4 <HAL_DMA_Abort_IT+0x45c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d031      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a47      	ldr	r2, [pc, #284]	; (8008be8 <HAL_DMA_Abort_IT+0x460>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d02c      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a46      	ldr	r2, [pc, #280]	; (8008bec <HAL_DMA_Abort_IT+0x464>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d027      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a44      	ldr	r2, [pc, #272]	; (8008bf0 <HAL_DMA_Abort_IT+0x468>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d022      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a43      	ldr	r2, [pc, #268]	; (8008bf4 <HAL_DMA_Abort_IT+0x46c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d01d      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a41      	ldr	r2, [pc, #260]	; (8008bf8 <HAL_DMA_Abort_IT+0x470>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d018      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a40      	ldr	r2, [pc, #256]	; (8008bfc <HAL_DMA_Abort_IT+0x474>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d013      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a3e      	ldr	r2, [pc, #248]	; (8008c00 <HAL_DMA_Abort_IT+0x478>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d00e      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a3d      	ldr	r2, [pc, #244]	; (8008c04 <HAL_DMA_Abort_IT+0x47c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d009      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a3b      	ldr	r2, [pc, #236]	; (8008c08 <HAL_DMA_Abort_IT+0x480>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d004      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x3a0>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a3a      	ldr	r2, [pc, #232]	; (8008c0c <HAL_DMA_Abort_IT+0x484>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d101      	bne.n	8008b2c <HAL_DMA_Abort_IT+0x3a4>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <HAL_DMA_Abort_IT+0x3a6>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d028      	beq.n	8008b84 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b40:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b46:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b4c:	f003 031f 	and.w	r3, r3, #31
 8008b50:	2201      	movs	r2, #1
 8008b52:	409a      	lsls	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008b60:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00c      	beq.n	8008b84 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b78:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008b82:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	40020010 	.word	0x40020010
 8008bb4:	40020028 	.word	0x40020028
 8008bb8:	40020040 	.word	0x40020040
 8008bbc:	40020058 	.word	0x40020058
 8008bc0:	40020070 	.word	0x40020070
 8008bc4:	40020088 	.word	0x40020088
 8008bc8:	400200a0 	.word	0x400200a0
 8008bcc:	400200b8 	.word	0x400200b8
 8008bd0:	40020410 	.word	0x40020410
 8008bd4:	40020428 	.word	0x40020428
 8008bd8:	40020440 	.word	0x40020440
 8008bdc:	40020458 	.word	0x40020458
 8008be0:	40020470 	.word	0x40020470
 8008be4:	40020488 	.word	0x40020488
 8008be8:	400204a0 	.word	0x400204a0
 8008bec:	400204b8 	.word	0x400204b8
 8008bf0:	58025408 	.word	0x58025408
 8008bf4:	5802541c 	.word	0x5802541c
 8008bf8:	58025430 	.word	0x58025430
 8008bfc:	58025444 	.word	0x58025444
 8008c00:	58025458 	.word	0x58025458
 8008c04:	5802546c 	.word	0x5802546c
 8008c08:	58025480 	.word	0x58025480
 8008c0c:	58025494 	.word	0x58025494

08008c10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08a      	sub	sp, #40	; 0x28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c1c:	4b67      	ldr	r3, [pc, #412]	; (8008dbc <HAL_DMA_IRQHandler+0x1ac>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a67      	ldr	r2, [pc, #412]	; (8008dc0 <HAL_DMA_IRQHandler+0x1b0>)
 8008c22:	fba2 2303 	umull	r2, r3, r2, r3
 8008c26:	0a9b      	lsrs	r3, r3, #10
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c34:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a5f      	ldr	r2, [pc, #380]	; (8008dc4 <HAL_DMA_IRQHandler+0x1b4>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d04a      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a5d      	ldr	r2, [pc, #372]	; (8008dc8 <HAL_DMA_IRQHandler+0x1b8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d045      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a5c      	ldr	r2, [pc, #368]	; (8008dcc <HAL_DMA_IRQHandler+0x1bc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d040      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a5a      	ldr	r2, [pc, #360]	; (8008dd0 <HAL_DMA_IRQHandler+0x1c0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d03b      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a59      	ldr	r2, [pc, #356]	; (8008dd4 <HAL_DMA_IRQHandler+0x1c4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d036      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a57      	ldr	r2, [pc, #348]	; (8008dd8 <HAL_DMA_IRQHandler+0x1c8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d031      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a56      	ldr	r2, [pc, #344]	; (8008ddc <HAL_DMA_IRQHandler+0x1cc>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d02c      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a54      	ldr	r2, [pc, #336]	; (8008de0 <HAL_DMA_IRQHandler+0x1d0>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d027      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a53      	ldr	r2, [pc, #332]	; (8008de4 <HAL_DMA_IRQHandler+0x1d4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d022      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a51      	ldr	r2, [pc, #324]	; (8008de8 <HAL_DMA_IRQHandler+0x1d8>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d01d      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a50      	ldr	r2, [pc, #320]	; (8008dec <HAL_DMA_IRQHandler+0x1dc>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d018      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a4e      	ldr	r2, [pc, #312]	; (8008df0 <HAL_DMA_IRQHandler+0x1e0>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d013      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a4d      	ldr	r2, [pc, #308]	; (8008df4 <HAL_DMA_IRQHandler+0x1e4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d00e      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a4b      	ldr	r2, [pc, #300]	; (8008df8 <HAL_DMA_IRQHandler+0x1e8>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d009      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a4a      	ldr	r2, [pc, #296]	; (8008dfc <HAL_DMA_IRQHandler+0x1ec>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d004      	beq.n	8008ce2 <HAL_DMA_IRQHandler+0xd2>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a48      	ldr	r2, [pc, #288]	; (8008e00 <HAL_DMA_IRQHandler+0x1f0>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d101      	bne.n	8008ce6 <HAL_DMA_IRQHandler+0xd6>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e000      	b.n	8008ce8 <HAL_DMA_IRQHandler+0xd8>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 842b 	beq.w	8009544 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf2:	f003 031f 	and.w	r3, r3, #31
 8008cf6:	2208      	movs	r2, #8
 8008cf8:	409a      	lsls	r2, r3
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80a2 	beq.w	8008e48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a2e      	ldr	r2, [pc, #184]	; (8008dc4 <HAL_DMA_IRQHandler+0x1b4>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d04a      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a2d      	ldr	r2, [pc, #180]	; (8008dc8 <HAL_DMA_IRQHandler+0x1b8>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d045      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a2b      	ldr	r2, [pc, #172]	; (8008dcc <HAL_DMA_IRQHandler+0x1bc>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d040      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a2a      	ldr	r2, [pc, #168]	; (8008dd0 <HAL_DMA_IRQHandler+0x1c0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d03b      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a28      	ldr	r2, [pc, #160]	; (8008dd4 <HAL_DMA_IRQHandler+0x1c4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d036      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a27      	ldr	r2, [pc, #156]	; (8008dd8 <HAL_DMA_IRQHandler+0x1c8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d031      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a25      	ldr	r2, [pc, #148]	; (8008ddc <HAL_DMA_IRQHandler+0x1cc>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d02c      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a24      	ldr	r2, [pc, #144]	; (8008de0 <HAL_DMA_IRQHandler+0x1d0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d027      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a22      	ldr	r2, [pc, #136]	; (8008de4 <HAL_DMA_IRQHandler+0x1d4>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d022      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a21      	ldr	r2, [pc, #132]	; (8008de8 <HAL_DMA_IRQHandler+0x1d8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d01d      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a1f      	ldr	r2, [pc, #124]	; (8008dec <HAL_DMA_IRQHandler+0x1dc>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d018      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a1e      	ldr	r2, [pc, #120]	; (8008df0 <HAL_DMA_IRQHandler+0x1e0>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d013      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a1c      	ldr	r2, [pc, #112]	; (8008df4 <HAL_DMA_IRQHandler+0x1e4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d00e      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a1b      	ldr	r2, [pc, #108]	; (8008df8 <HAL_DMA_IRQHandler+0x1e8>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d009      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a19      	ldr	r2, [pc, #100]	; (8008dfc <HAL_DMA_IRQHandler+0x1ec>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d004      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x194>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a18      	ldr	r2, [pc, #96]	; (8008e00 <HAL_DMA_IRQHandler+0x1f0>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d12f      	bne.n	8008e04 <HAL_DMA_IRQHandler+0x1f4>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0304 	and.w	r3, r3, #4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	bf14      	ite	ne
 8008db2:	2301      	movne	r3, #1
 8008db4:	2300      	moveq	r3, #0
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	e02e      	b.n	8008e18 <HAL_DMA_IRQHandler+0x208>
 8008dba:	bf00      	nop
 8008dbc:	24000230 	.word	0x24000230
 8008dc0:	1b4e81b5 	.word	0x1b4e81b5
 8008dc4:	40020010 	.word	0x40020010
 8008dc8:	40020028 	.word	0x40020028
 8008dcc:	40020040 	.word	0x40020040
 8008dd0:	40020058 	.word	0x40020058
 8008dd4:	40020070 	.word	0x40020070
 8008dd8:	40020088 	.word	0x40020088
 8008ddc:	400200a0 	.word	0x400200a0
 8008de0:	400200b8 	.word	0x400200b8
 8008de4:	40020410 	.word	0x40020410
 8008de8:	40020428 	.word	0x40020428
 8008dec:	40020440 	.word	0x40020440
 8008df0:	40020458 	.word	0x40020458
 8008df4:	40020470 	.word	0x40020470
 8008df8:	40020488 	.word	0x40020488
 8008dfc:	400204a0 	.word	0x400204a0
 8008e00:	400204b8 	.word	0x400204b8
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0308 	and.w	r3, r3, #8
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	bf14      	ite	ne
 8008e12:	2301      	movne	r3, #1
 8008e14:	2300      	moveq	r3, #0
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d015      	beq.n	8008e48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 0204 	bic.w	r2, r2, #4
 8008e2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e30:	f003 031f 	and.w	r3, r3, #31
 8008e34:	2208      	movs	r2, #8
 8008e36:	409a      	lsls	r2, r3
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e40:	f043 0201 	orr.w	r2, r3, #1
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e4c:	f003 031f 	and.w	r3, r3, #31
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	fa22 f303 	lsr.w	r3, r2, r3
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d06e      	beq.n	8008f3c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a69      	ldr	r2, [pc, #420]	; (8009008 <HAL_DMA_IRQHandler+0x3f8>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d04a      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a67      	ldr	r2, [pc, #412]	; (800900c <HAL_DMA_IRQHandler+0x3fc>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d045      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a66      	ldr	r2, [pc, #408]	; (8009010 <HAL_DMA_IRQHandler+0x400>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d040      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a64      	ldr	r2, [pc, #400]	; (8009014 <HAL_DMA_IRQHandler+0x404>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d03b      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a63      	ldr	r2, [pc, #396]	; (8009018 <HAL_DMA_IRQHandler+0x408>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d036      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a61      	ldr	r2, [pc, #388]	; (800901c <HAL_DMA_IRQHandler+0x40c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d031      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a60      	ldr	r2, [pc, #384]	; (8009020 <HAL_DMA_IRQHandler+0x410>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d02c      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a5e      	ldr	r2, [pc, #376]	; (8009024 <HAL_DMA_IRQHandler+0x414>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d027      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a5d      	ldr	r2, [pc, #372]	; (8009028 <HAL_DMA_IRQHandler+0x418>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d022      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a5b      	ldr	r2, [pc, #364]	; (800902c <HAL_DMA_IRQHandler+0x41c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d01d      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a5a      	ldr	r2, [pc, #360]	; (8009030 <HAL_DMA_IRQHandler+0x420>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d018      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a58      	ldr	r2, [pc, #352]	; (8009034 <HAL_DMA_IRQHandler+0x424>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d013      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a57      	ldr	r2, [pc, #348]	; (8009038 <HAL_DMA_IRQHandler+0x428>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d00e      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a55      	ldr	r2, [pc, #340]	; (800903c <HAL_DMA_IRQHandler+0x42c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d009      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a54      	ldr	r2, [pc, #336]	; (8009040 <HAL_DMA_IRQHandler+0x430>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d004      	beq.n	8008efe <HAL_DMA_IRQHandler+0x2ee>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a52      	ldr	r2, [pc, #328]	; (8009044 <HAL_DMA_IRQHandler+0x434>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d10a      	bne.n	8008f14 <HAL_DMA_IRQHandler+0x304>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	bf14      	ite	ne
 8008f0c:	2301      	movne	r3, #1
 8008f0e:	2300      	moveq	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	e003      	b.n	8008f1c <HAL_DMA_IRQHandler+0x30c>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00d      	beq.n	8008f3c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f24:	f003 031f 	and.w	r3, r3, #31
 8008f28:	2201      	movs	r2, #1
 8008f2a:	409a      	lsls	r2, r3
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f34:	f043 0202 	orr.w	r2, r3, #2
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f40:	f003 031f 	and.w	r3, r3, #31
 8008f44:	2204      	movs	r2, #4
 8008f46:	409a      	lsls	r2, r3
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 808f 	beq.w	8009070 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a2c      	ldr	r2, [pc, #176]	; (8009008 <HAL_DMA_IRQHandler+0x3f8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d04a      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a2a      	ldr	r2, [pc, #168]	; (800900c <HAL_DMA_IRQHandler+0x3fc>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d045      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a29      	ldr	r2, [pc, #164]	; (8009010 <HAL_DMA_IRQHandler+0x400>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d040      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a27      	ldr	r2, [pc, #156]	; (8009014 <HAL_DMA_IRQHandler+0x404>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d03b      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a26      	ldr	r2, [pc, #152]	; (8009018 <HAL_DMA_IRQHandler+0x408>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d036      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a24      	ldr	r2, [pc, #144]	; (800901c <HAL_DMA_IRQHandler+0x40c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d031      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a23      	ldr	r2, [pc, #140]	; (8009020 <HAL_DMA_IRQHandler+0x410>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d02c      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a21      	ldr	r2, [pc, #132]	; (8009024 <HAL_DMA_IRQHandler+0x414>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d027      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a20      	ldr	r2, [pc, #128]	; (8009028 <HAL_DMA_IRQHandler+0x418>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d022      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a1e      	ldr	r2, [pc, #120]	; (800902c <HAL_DMA_IRQHandler+0x41c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d01d      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a1d      	ldr	r2, [pc, #116]	; (8009030 <HAL_DMA_IRQHandler+0x420>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d018      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a1b      	ldr	r2, [pc, #108]	; (8009034 <HAL_DMA_IRQHandler+0x424>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d013      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a1a      	ldr	r2, [pc, #104]	; (8009038 <HAL_DMA_IRQHandler+0x428>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d00e      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a18      	ldr	r2, [pc, #96]	; (800903c <HAL_DMA_IRQHandler+0x42c>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d009      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a17      	ldr	r2, [pc, #92]	; (8009040 <HAL_DMA_IRQHandler+0x430>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d004      	beq.n	8008ff2 <HAL_DMA_IRQHandler+0x3e2>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a15      	ldr	r2, [pc, #84]	; (8009044 <HAL_DMA_IRQHandler+0x434>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d12a      	bne.n	8009048 <HAL_DMA_IRQHandler+0x438>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bf14      	ite	ne
 8009000:	2301      	movne	r3, #1
 8009002:	2300      	moveq	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	e023      	b.n	8009050 <HAL_DMA_IRQHandler+0x440>
 8009008:	40020010 	.word	0x40020010
 800900c:	40020028 	.word	0x40020028
 8009010:	40020040 	.word	0x40020040
 8009014:	40020058 	.word	0x40020058
 8009018:	40020070 	.word	0x40020070
 800901c:	40020088 	.word	0x40020088
 8009020:	400200a0 	.word	0x400200a0
 8009024:	400200b8 	.word	0x400200b8
 8009028:	40020410 	.word	0x40020410
 800902c:	40020428 	.word	0x40020428
 8009030:	40020440 	.word	0x40020440
 8009034:	40020458 	.word	0x40020458
 8009038:	40020470 	.word	0x40020470
 800903c:	40020488 	.word	0x40020488
 8009040:	400204a0 	.word	0x400204a0
 8009044:	400204b8 	.word	0x400204b8
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2300      	movs	r3, #0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00d      	beq.n	8009070 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009058:	f003 031f 	and.w	r3, r3, #31
 800905c:	2204      	movs	r2, #4
 800905e:	409a      	lsls	r2, r3
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009068:	f043 0204 	orr.w	r2, r3, #4
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009074:	f003 031f 	and.w	r3, r3, #31
 8009078:	2210      	movs	r2, #16
 800907a:	409a      	lsls	r2, r3
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	4013      	ands	r3, r2
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 80a6 	beq.w	80091d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a85      	ldr	r2, [pc, #532]	; (80092a0 <HAL_DMA_IRQHandler+0x690>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d04a      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a83      	ldr	r2, [pc, #524]	; (80092a4 <HAL_DMA_IRQHandler+0x694>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d045      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a82      	ldr	r2, [pc, #520]	; (80092a8 <HAL_DMA_IRQHandler+0x698>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d040      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a80      	ldr	r2, [pc, #512]	; (80092ac <HAL_DMA_IRQHandler+0x69c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d03b      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a7f      	ldr	r2, [pc, #508]	; (80092b0 <HAL_DMA_IRQHandler+0x6a0>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d036      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a7d      	ldr	r2, [pc, #500]	; (80092b4 <HAL_DMA_IRQHandler+0x6a4>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d031      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a7c      	ldr	r2, [pc, #496]	; (80092b8 <HAL_DMA_IRQHandler+0x6a8>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d02c      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a7a      	ldr	r2, [pc, #488]	; (80092bc <HAL_DMA_IRQHandler+0x6ac>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d027      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a79      	ldr	r2, [pc, #484]	; (80092c0 <HAL_DMA_IRQHandler+0x6b0>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d022      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a77      	ldr	r2, [pc, #476]	; (80092c4 <HAL_DMA_IRQHandler+0x6b4>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d01d      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a76      	ldr	r2, [pc, #472]	; (80092c8 <HAL_DMA_IRQHandler+0x6b8>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d018      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a74      	ldr	r2, [pc, #464]	; (80092cc <HAL_DMA_IRQHandler+0x6bc>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d013      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a73      	ldr	r2, [pc, #460]	; (80092d0 <HAL_DMA_IRQHandler+0x6c0>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00e      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a71      	ldr	r2, [pc, #452]	; (80092d4 <HAL_DMA_IRQHandler+0x6c4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d009      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a70      	ldr	r2, [pc, #448]	; (80092d8 <HAL_DMA_IRQHandler+0x6c8>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d004      	beq.n	8009126 <HAL_DMA_IRQHandler+0x516>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a6e      	ldr	r2, [pc, #440]	; (80092dc <HAL_DMA_IRQHandler+0x6cc>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d10a      	bne.n	800913c <HAL_DMA_IRQHandler+0x52c>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0308 	and.w	r3, r3, #8
 8009130:	2b00      	cmp	r3, #0
 8009132:	bf14      	ite	ne
 8009134:	2301      	movne	r3, #1
 8009136:	2300      	moveq	r3, #0
 8009138:	b2db      	uxtb	r3, r3
 800913a:	e009      	b.n	8009150 <HAL_DMA_IRQHandler+0x540>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0304 	and.w	r3, r3, #4
 8009146:	2b00      	cmp	r3, #0
 8009148:	bf14      	ite	ne
 800914a:	2301      	movne	r3, #1
 800914c:	2300      	moveq	r3, #0
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b00      	cmp	r3, #0
 8009152:	d03e      	beq.n	80091d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009158:	f003 031f 	and.w	r3, r3, #31
 800915c:	2210      	movs	r2, #16
 800915e:	409a      	lsls	r2, r3
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d018      	beq.n	80091a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d108      	bne.n	8009192 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	2b00      	cmp	r3, #0
 8009186:	d024      	beq.n	80091d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
 8009190:	e01f      	b.n	80091d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009196:	2b00      	cmp	r3, #0
 8009198:	d01b      	beq.n	80091d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	4798      	blx	r3
 80091a2:	e016      	b.n	80091d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d107      	bne.n	80091c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f022 0208 	bic.w	r2, r2, #8
 80091c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d6:	f003 031f 	and.w	r3, r3, #31
 80091da:	2220      	movs	r2, #32
 80091dc:	409a      	lsls	r2, r3
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	4013      	ands	r3, r2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8110 	beq.w	8009408 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a2c      	ldr	r2, [pc, #176]	; (80092a0 <HAL_DMA_IRQHandler+0x690>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d04a      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a2b      	ldr	r2, [pc, #172]	; (80092a4 <HAL_DMA_IRQHandler+0x694>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d045      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a29      	ldr	r2, [pc, #164]	; (80092a8 <HAL_DMA_IRQHandler+0x698>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d040      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a28      	ldr	r2, [pc, #160]	; (80092ac <HAL_DMA_IRQHandler+0x69c>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d03b      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a26      	ldr	r2, [pc, #152]	; (80092b0 <HAL_DMA_IRQHandler+0x6a0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d036      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a25      	ldr	r2, [pc, #148]	; (80092b4 <HAL_DMA_IRQHandler+0x6a4>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d031      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a23      	ldr	r2, [pc, #140]	; (80092b8 <HAL_DMA_IRQHandler+0x6a8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d02c      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a22      	ldr	r2, [pc, #136]	; (80092bc <HAL_DMA_IRQHandler+0x6ac>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d027      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a20      	ldr	r2, [pc, #128]	; (80092c0 <HAL_DMA_IRQHandler+0x6b0>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d022      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a1f      	ldr	r2, [pc, #124]	; (80092c4 <HAL_DMA_IRQHandler+0x6b4>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d01d      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a1d      	ldr	r2, [pc, #116]	; (80092c8 <HAL_DMA_IRQHandler+0x6b8>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d018      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a1c      	ldr	r2, [pc, #112]	; (80092cc <HAL_DMA_IRQHandler+0x6bc>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d013      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a1a      	ldr	r2, [pc, #104]	; (80092d0 <HAL_DMA_IRQHandler+0x6c0>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d00e      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a19      	ldr	r2, [pc, #100]	; (80092d4 <HAL_DMA_IRQHandler+0x6c4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d009      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a17      	ldr	r2, [pc, #92]	; (80092d8 <HAL_DMA_IRQHandler+0x6c8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d004      	beq.n	8009288 <HAL_DMA_IRQHandler+0x678>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a16      	ldr	r2, [pc, #88]	; (80092dc <HAL_DMA_IRQHandler+0x6cc>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d12b      	bne.n	80092e0 <HAL_DMA_IRQHandler+0x6d0>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0310 	and.w	r3, r3, #16
 8009292:	2b00      	cmp	r3, #0
 8009294:	bf14      	ite	ne
 8009296:	2301      	movne	r3, #1
 8009298:	2300      	moveq	r3, #0
 800929a:	b2db      	uxtb	r3, r3
 800929c:	e02a      	b.n	80092f4 <HAL_DMA_IRQHandler+0x6e4>
 800929e:	bf00      	nop
 80092a0:	40020010 	.word	0x40020010
 80092a4:	40020028 	.word	0x40020028
 80092a8:	40020040 	.word	0x40020040
 80092ac:	40020058 	.word	0x40020058
 80092b0:	40020070 	.word	0x40020070
 80092b4:	40020088 	.word	0x40020088
 80092b8:	400200a0 	.word	0x400200a0
 80092bc:	400200b8 	.word	0x400200b8
 80092c0:	40020410 	.word	0x40020410
 80092c4:	40020428 	.word	0x40020428
 80092c8:	40020440 	.word	0x40020440
 80092cc:	40020458 	.word	0x40020458
 80092d0:	40020470 	.word	0x40020470
 80092d4:	40020488 	.word	0x40020488
 80092d8:	400204a0 	.word	0x400204a0
 80092dc:	400204b8 	.word	0x400204b8
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	bf14      	ite	ne
 80092ee:	2301      	movne	r3, #1
 80092f0:	2300      	moveq	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 8087 	beq.w	8009408 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092fe:	f003 031f 	and.w	r3, r3, #31
 8009302:	2220      	movs	r2, #32
 8009304:	409a      	lsls	r2, r3
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b04      	cmp	r3, #4
 8009314:	d139      	bne.n	800938a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0216 	bic.w	r2, r2, #22
 8009324:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	695a      	ldr	r2, [r3, #20]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009334:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933a:	2b00      	cmp	r3, #0
 800933c:	d103      	bne.n	8009346 <HAL_DMA_IRQHandler+0x736>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f022 0208 	bic.w	r2, r2, #8
 8009354:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800935a:	f003 031f 	and.w	r3, r3, #31
 800935e:	223f      	movs	r2, #63	; 0x3f
 8009360:	409a      	lsls	r2, r3
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 834a 	beq.w	8009a14 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	4798      	blx	r3
          }
          return;
 8009388:	e344      	b.n	8009a14 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d018      	beq.n	80093ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d108      	bne.n	80093b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d02c      	beq.n	8009408 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	4798      	blx	r3
 80093b6:	e027      	b.n	8009408 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d023      	beq.n	8009408 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	4798      	blx	r3
 80093c8:	e01e      	b.n	8009408 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10f      	bne.n	80093f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0210 	bic.w	r2, r2, #16
 80093e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 8306 	beq.w	8009a1e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 8088 	beq.w	8009530 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2204      	movs	r2, #4
 8009424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a7a      	ldr	r2, [pc, #488]	; (8009618 <HAL_DMA_IRQHandler+0xa08>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d04a      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a79      	ldr	r2, [pc, #484]	; (800961c <HAL_DMA_IRQHandler+0xa0c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d045      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a77      	ldr	r2, [pc, #476]	; (8009620 <HAL_DMA_IRQHandler+0xa10>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d040      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a76      	ldr	r2, [pc, #472]	; (8009624 <HAL_DMA_IRQHandler+0xa14>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d03b      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a74      	ldr	r2, [pc, #464]	; (8009628 <HAL_DMA_IRQHandler+0xa18>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d036      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a73      	ldr	r2, [pc, #460]	; (800962c <HAL_DMA_IRQHandler+0xa1c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d031      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a71      	ldr	r2, [pc, #452]	; (8009630 <HAL_DMA_IRQHandler+0xa20>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d02c      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a70      	ldr	r2, [pc, #448]	; (8009634 <HAL_DMA_IRQHandler+0xa24>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d027      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a6e      	ldr	r2, [pc, #440]	; (8009638 <HAL_DMA_IRQHandler+0xa28>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d022      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a6d      	ldr	r2, [pc, #436]	; (800963c <HAL_DMA_IRQHandler+0xa2c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d01d      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a6b      	ldr	r2, [pc, #428]	; (8009640 <HAL_DMA_IRQHandler+0xa30>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d018      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a6a      	ldr	r2, [pc, #424]	; (8009644 <HAL_DMA_IRQHandler+0xa34>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d013      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a68      	ldr	r2, [pc, #416]	; (8009648 <HAL_DMA_IRQHandler+0xa38>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00e      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a67      	ldr	r2, [pc, #412]	; (800964c <HAL_DMA_IRQHandler+0xa3c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d009      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a65      	ldr	r2, [pc, #404]	; (8009650 <HAL_DMA_IRQHandler+0xa40>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d004      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x8b8>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a64      	ldr	r2, [pc, #400]	; (8009654 <HAL_DMA_IRQHandler+0xa44>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d108      	bne.n	80094da <HAL_DMA_IRQHandler+0x8ca>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0201 	bic.w	r2, r2, #1
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	e007      	b.n	80094ea <HAL_DMA_IRQHandler+0x8da>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0201 	bic.w	r2, r2, #1
 80094e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3301      	adds	r3, #1
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d307      	bcc.n	8009506 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1f2      	bne.n	80094ea <HAL_DMA_IRQHandler+0x8da>
 8009504:	e000      	b.n	8009508 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009506:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d004      	beq.n	8009520 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2203      	movs	r2, #3
 800951a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800951e:	e003      	b.n	8009528 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8272 	beq.w	8009a1e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	4798      	blx	r3
 8009542:	e26c      	b.n	8009a1e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a43      	ldr	r2, [pc, #268]	; (8009658 <HAL_DMA_IRQHandler+0xa48>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d022      	beq.n	8009594 <HAL_DMA_IRQHandler+0x984>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a42      	ldr	r2, [pc, #264]	; (800965c <HAL_DMA_IRQHandler+0xa4c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d01d      	beq.n	8009594 <HAL_DMA_IRQHandler+0x984>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a40      	ldr	r2, [pc, #256]	; (8009660 <HAL_DMA_IRQHandler+0xa50>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d018      	beq.n	8009594 <HAL_DMA_IRQHandler+0x984>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a3f      	ldr	r2, [pc, #252]	; (8009664 <HAL_DMA_IRQHandler+0xa54>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d013      	beq.n	8009594 <HAL_DMA_IRQHandler+0x984>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a3d      	ldr	r2, [pc, #244]	; (8009668 <HAL_DMA_IRQHandler+0xa58>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d00e      	beq.n	8009594 <HAL_DMA_IRQHandler+0x984>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a3c      	ldr	r2, [pc, #240]	; (800966c <HAL_DMA_IRQHandler+0xa5c>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d009      	beq.n	8009594 <HAL_DMA_IRQHandler+0x984>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a3a      	ldr	r2, [pc, #232]	; (8009670 <HAL_DMA_IRQHandler+0xa60>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d004      	beq.n	8009594 <HAL_DMA_IRQHandler+0x984>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a39      	ldr	r2, [pc, #228]	; (8009674 <HAL_DMA_IRQHandler+0xa64>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d101      	bne.n	8009598 <HAL_DMA_IRQHandler+0x988>
 8009594:	2301      	movs	r3, #1
 8009596:	e000      	b.n	800959a <HAL_DMA_IRQHandler+0x98a>
 8009598:	2300      	movs	r3, #0
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 823f 	beq.w	8009a1e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ac:	f003 031f 	and.w	r3, r3, #31
 80095b0:	2204      	movs	r2, #4
 80095b2:	409a      	lsls	r2, r3
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	4013      	ands	r3, r2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 80cd 	beq.w	8009758 <HAL_DMA_IRQHandler+0xb48>
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 80c7 	beq.w	8009758 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ce:	f003 031f 	and.w	r3, r3, #31
 80095d2:	2204      	movs	r2, #4
 80095d4:	409a      	lsls	r2, r3
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d049      	beq.n	8009678 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d109      	bne.n	8009602 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 8210 	beq.w	8009a18 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009600:	e20a      	b.n	8009a18 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 8206 	beq.w	8009a18 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009614:	e200      	b.n	8009a18 <HAL_DMA_IRQHandler+0xe08>
 8009616:	bf00      	nop
 8009618:	40020010 	.word	0x40020010
 800961c:	40020028 	.word	0x40020028
 8009620:	40020040 	.word	0x40020040
 8009624:	40020058 	.word	0x40020058
 8009628:	40020070 	.word	0x40020070
 800962c:	40020088 	.word	0x40020088
 8009630:	400200a0 	.word	0x400200a0
 8009634:	400200b8 	.word	0x400200b8
 8009638:	40020410 	.word	0x40020410
 800963c:	40020428 	.word	0x40020428
 8009640:	40020440 	.word	0x40020440
 8009644:	40020458 	.word	0x40020458
 8009648:	40020470 	.word	0x40020470
 800964c:	40020488 	.word	0x40020488
 8009650:	400204a0 	.word	0x400204a0
 8009654:	400204b8 	.word	0x400204b8
 8009658:	58025408 	.word	0x58025408
 800965c:	5802541c 	.word	0x5802541c
 8009660:	58025430 	.word	0x58025430
 8009664:	58025444 	.word	0x58025444
 8009668:	58025458 	.word	0x58025458
 800966c:	5802546c 	.word	0x5802546c
 8009670:	58025480 	.word	0x58025480
 8009674:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f003 0320 	and.w	r3, r3, #32
 800967e:	2b00      	cmp	r3, #0
 8009680:	d160      	bne.n	8009744 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a8c      	ldr	r2, [pc, #560]	; (80098b8 <HAL_DMA_IRQHandler+0xca8>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d04a      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a8a      	ldr	r2, [pc, #552]	; (80098bc <HAL_DMA_IRQHandler+0xcac>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d045      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a89      	ldr	r2, [pc, #548]	; (80098c0 <HAL_DMA_IRQHandler+0xcb0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d040      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a87      	ldr	r2, [pc, #540]	; (80098c4 <HAL_DMA_IRQHandler+0xcb4>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d03b      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a86      	ldr	r2, [pc, #536]	; (80098c8 <HAL_DMA_IRQHandler+0xcb8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d036      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a84      	ldr	r2, [pc, #528]	; (80098cc <HAL_DMA_IRQHandler+0xcbc>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d031      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a83      	ldr	r2, [pc, #524]	; (80098d0 <HAL_DMA_IRQHandler+0xcc0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d02c      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a81      	ldr	r2, [pc, #516]	; (80098d4 <HAL_DMA_IRQHandler+0xcc4>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d027      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a80      	ldr	r2, [pc, #512]	; (80098d8 <HAL_DMA_IRQHandler+0xcc8>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d022      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a7e      	ldr	r2, [pc, #504]	; (80098dc <HAL_DMA_IRQHandler+0xccc>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d01d      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a7d      	ldr	r2, [pc, #500]	; (80098e0 <HAL_DMA_IRQHandler+0xcd0>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d018      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a7b      	ldr	r2, [pc, #492]	; (80098e4 <HAL_DMA_IRQHandler+0xcd4>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d013      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a7a      	ldr	r2, [pc, #488]	; (80098e8 <HAL_DMA_IRQHandler+0xcd8>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d00e      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a78      	ldr	r2, [pc, #480]	; (80098ec <HAL_DMA_IRQHandler+0xcdc>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d009      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a77      	ldr	r2, [pc, #476]	; (80098f0 <HAL_DMA_IRQHandler+0xce0>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d004      	beq.n	8009722 <HAL_DMA_IRQHandler+0xb12>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a75      	ldr	r2, [pc, #468]	; (80098f4 <HAL_DMA_IRQHandler+0xce4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d108      	bne.n	8009734 <HAL_DMA_IRQHandler+0xb24>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 0208 	bic.w	r2, r2, #8
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	e007      	b.n	8009744 <HAL_DMA_IRQHandler+0xb34>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0204 	bic.w	r2, r2, #4
 8009742:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 8165 	beq.w	8009a18 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009756:	e15f      	b.n	8009a18 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800975c:	f003 031f 	and.w	r3, r3, #31
 8009760:	2202      	movs	r2, #2
 8009762:	409a      	lsls	r2, r3
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	4013      	ands	r3, r2
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 80c5 	beq.w	80098f8 <HAL_DMA_IRQHandler+0xce8>
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f003 0302 	and.w	r3, r3, #2
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80bf 	beq.w	80098f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800977e:	f003 031f 	and.w	r3, r3, #31
 8009782:	2202      	movs	r2, #2
 8009784:	409a      	lsls	r2, r3
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d018      	beq.n	80097c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d109      	bne.n	80097b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 813a 	beq.w	8009a1c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097b0:	e134      	b.n	8009a1c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 8130 	beq.w	8009a1c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097c4:	e12a      	b.n	8009a1c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f003 0320 	and.w	r3, r3, #32
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d168      	bne.n	80098a2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a38      	ldr	r2, [pc, #224]	; (80098b8 <HAL_DMA_IRQHandler+0xca8>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d04a      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a37      	ldr	r2, [pc, #220]	; (80098bc <HAL_DMA_IRQHandler+0xcac>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d045      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a35      	ldr	r2, [pc, #212]	; (80098c0 <HAL_DMA_IRQHandler+0xcb0>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d040      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a34      	ldr	r2, [pc, #208]	; (80098c4 <HAL_DMA_IRQHandler+0xcb4>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d03b      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a32      	ldr	r2, [pc, #200]	; (80098c8 <HAL_DMA_IRQHandler+0xcb8>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d036      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a31      	ldr	r2, [pc, #196]	; (80098cc <HAL_DMA_IRQHandler+0xcbc>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d031      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a2f      	ldr	r2, [pc, #188]	; (80098d0 <HAL_DMA_IRQHandler+0xcc0>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d02c      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a2e      	ldr	r2, [pc, #184]	; (80098d4 <HAL_DMA_IRQHandler+0xcc4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d027      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a2c      	ldr	r2, [pc, #176]	; (80098d8 <HAL_DMA_IRQHandler+0xcc8>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d022      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a2b      	ldr	r2, [pc, #172]	; (80098dc <HAL_DMA_IRQHandler+0xccc>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d01d      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a29      	ldr	r2, [pc, #164]	; (80098e0 <HAL_DMA_IRQHandler+0xcd0>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d018      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a28      	ldr	r2, [pc, #160]	; (80098e4 <HAL_DMA_IRQHandler+0xcd4>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d013      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a26      	ldr	r2, [pc, #152]	; (80098e8 <HAL_DMA_IRQHandler+0xcd8>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d00e      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a25      	ldr	r2, [pc, #148]	; (80098ec <HAL_DMA_IRQHandler+0xcdc>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d009      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a23      	ldr	r2, [pc, #140]	; (80098f0 <HAL_DMA_IRQHandler+0xce0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d004      	beq.n	8009870 <HAL_DMA_IRQHandler+0xc60>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a22      	ldr	r2, [pc, #136]	; (80098f4 <HAL_DMA_IRQHandler+0xce4>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d108      	bne.n	8009882 <HAL_DMA_IRQHandler+0xc72>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0214 	bic.w	r2, r2, #20
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	e007      	b.n	8009892 <HAL_DMA_IRQHandler+0xc82>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 020a 	bic.w	r2, r2, #10
 8009890:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 80b8 	beq.w	8009a1c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098b4:	e0b2      	b.n	8009a1c <HAL_DMA_IRQHandler+0xe0c>
 80098b6:	bf00      	nop
 80098b8:	40020010 	.word	0x40020010
 80098bc:	40020028 	.word	0x40020028
 80098c0:	40020040 	.word	0x40020040
 80098c4:	40020058 	.word	0x40020058
 80098c8:	40020070 	.word	0x40020070
 80098cc:	40020088 	.word	0x40020088
 80098d0:	400200a0 	.word	0x400200a0
 80098d4:	400200b8 	.word	0x400200b8
 80098d8:	40020410 	.word	0x40020410
 80098dc:	40020428 	.word	0x40020428
 80098e0:	40020440 	.word	0x40020440
 80098e4:	40020458 	.word	0x40020458
 80098e8:	40020470 	.word	0x40020470
 80098ec:	40020488 	.word	0x40020488
 80098f0:	400204a0 	.word	0x400204a0
 80098f4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098fc:	f003 031f 	and.w	r3, r3, #31
 8009900:	2208      	movs	r2, #8
 8009902:	409a      	lsls	r2, r3
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	4013      	ands	r3, r2
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 8088 	beq.w	8009a1e <HAL_DMA_IRQHandler+0xe0e>
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f003 0308 	and.w	r3, r3, #8
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8082 	beq.w	8009a1e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a41      	ldr	r2, [pc, #260]	; (8009a24 <HAL_DMA_IRQHandler+0xe14>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d04a      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a3f      	ldr	r2, [pc, #252]	; (8009a28 <HAL_DMA_IRQHandler+0xe18>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d045      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a3e      	ldr	r2, [pc, #248]	; (8009a2c <HAL_DMA_IRQHandler+0xe1c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d040      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a3c      	ldr	r2, [pc, #240]	; (8009a30 <HAL_DMA_IRQHandler+0xe20>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d03b      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a3b      	ldr	r2, [pc, #236]	; (8009a34 <HAL_DMA_IRQHandler+0xe24>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d036      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a39      	ldr	r2, [pc, #228]	; (8009a38 <HAL_DMA_IRQHandler+0xe28>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d031      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a38      	ldr	r2, [pc, #224]	; (8009a3c <HAL_DMA_IRQHandler+0xe2c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d02c      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a36      	ldr	r2, [pc, #216]	; (8009a40 <HAL_DMA_IRQHandler+0xe30>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d027      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a35      	ldr	r2, [pc, #212]	; (8009a44 <HAL_DMA_IRQHandler+0xe34>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d022      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a33      	ldr	r2, [pc, #204]	; (8009a48 <HAL_DMA_IRQHandler+0xe38>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d01d      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a32      	ldr	r2, [pc, #200]	; (8009a4c <HAL_DMA_IRQHandler+0xe3c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d018      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a30      	ldr	r2, [pc, #192]	; (8009a50 <HAL_DMA_IRQHandler+0xe40>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d013      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a2f      	ldr	r2, [pc, #188]	; (8009a54 <HAL_DMA_IRQHandler+0xe44>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d00e      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a2d      	ldr	r2, [pc, #180]	; (8009a58 <HAL_DMA_IRQHandler+0xe48>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d009      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a2c      	ldr	r2, [pc, #176]	; (8009a5c <HAL_DMA_IRQHandler+0xe4c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d004      	beq.n	80099ba <HAL_DMA_IRQHandler+0xdaa>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a2a      	ldr	r2, [pc, #168]	; (8009a60 <HAL_DMA_IRQHandler+0xe50>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d108      	bne.n	80099cc <HAL_DMA_IRQHandler+0xdbc>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 021c 	bic.w	r2, r2, #28
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	e007      	b.n	80099dc <HAL_DMA_IRQHandler+0xdcc>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 020e 	bic.w	r2, r2, #14
 80099da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099e0:	f003 031f 	and.w	r3, r3, #31
 80099e4:	2201      	movs	r2, #1
 80099e6:	409a      	lsls	r2, r3
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d009      	beq.n	8009a1e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	4798      	blx	r3
 8009a12:	e004      	b.n	8009a1e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009a14:	bf00      	nop
 8009a16:	e002      	b.n	8009a1e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a18:	bf00      	nop
 8009a1a:	e000      	b.n	8009a1e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a1c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009a1e:	3728      	adds	r7, #40	; 0x28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	40020010 	.word	0x40020010
 8009a28:	40020028 	.word	0x40020028
 8009a2c:	40020040 	.word	0x40020040
 8009a30:	40020058 	.word	0x40020058
 8009a34:	40020070 	.word	0x40020070
 8009a38:	40020088 	.word	0x40020088
 8009a3c:	400200a0 	.word	0x400200a0
 8009a40:	400200b8 	.word	0x400200b8
 8009a44:	40020410 	.word	0x40020410
 8009a48:	40020428 	.word	0x40020428
 8009a4c:	40020440 	.word	0x40020440
 8009a50:	40020458 	.word	0x40020458
 8009a54:	40020470 	.word	0x40020470
 8009a58:	40020488 	.word	0x40020488
 8009a5c:	400204a0 	.word	0x400204a0
 8009a60:	400204b8 	.word	0x400204b8

08009a64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a76:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a7c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a84      	ldr	r2, [pc, #528]	; (8009c94 <DMA_SetConfig+0x230>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d072      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a82      	ldr	r2, [pc, #520]	; (8009c98 <DMA_SetConfig+0x234>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d06d      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a81      	ldr	r2, [pc, #516]	; (8009c9c <DMA_SetConfig+0x238>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d068      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a7f      	ldr	r2, [pc, #508]	; (8009ca0 <DMA_SetConfig+0x23c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d063      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a7e      	ldr	r2, [pc, #504]	; (8009ca4 <DMA_SetConfig+0x240>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d05e      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a7c      	ldr	r2, [pc, #496]	; (8009ca8 <DMA_SetConfig+0x244>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d059      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a7b      	ldr	r2, [pc, #492]	; (8009cac <DMA_SetConfig+0x248>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d054      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a79      	ldr	r2, [pc, #484]	; (8009cb0 <DMA_SetConfig+0x24c>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d04f      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a78      	ldr	r2, [pc, #480]	; (8009cb4 <DMA_SetConfig+0x250>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d04a      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a76      	ldr	r2, [pc, #472]	; (8009cb8 <DMA_SetConfig+0x254>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d045      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a75      	ldr	r2, [pc, #468]	; (8009cbc <DMA_SetConfig+0x258>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d040      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a73      	ldr	r2, [pc, #460]	; (8009cc0 <DMA_SetConfig+0x25c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d03b      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a72      	ldr	r2, [pc, #456]	; (8009cc4 <DMA_SetConfig+0x260>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d036      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a70      	ldr	r2, [pc, #448]	; (8009cc8 <DMA_SetConfig+0x264>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d031      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a6f      	ldr	r2, [pc, #444]	; (8009ccc <DMA_SetConfig+0x268>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d02c      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a6d      	ldr	r2, [pc, #436]	; (8009cd0 <DMA_SetConfig+0x26c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d027      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a6c      	ldr	r2, [pc, #432]	; (8009cd4 <DMA_SetConfig+0x270>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d022      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a6a      	ldr	r2, [pc, #424]	; (8009cd8 <DMA_SetConfig+0x274>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d01d      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a69      	ldr	r2, [pc, #420]	; (8009cdc <DMA_SetConfig+0x278>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d018      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a67      	ldr	r2, [pc, #412]	; (8009ce0 <DMA_SetConfig+0x27c>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d013      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a66      	ldr	r2, [pc, #408]	; (8009ce4 <DMA_SetConfig+0x280>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00e      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a64      	ldr	r2, [pc, #400]	; (8009ce8 <DMA_SetConfig+0x284>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d009      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a63      	ldr	r2, [pc, #396]	; (8009cec <DMA_SetConfig+0x288>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d004      	beq.n	8009b6e <DMA_SetConfig+0x10a>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a61      	ldr	r2, [pc, #388]	; (8009cf0 <DMA_SetConfig+0x28c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d101      	bne.n	8009b72 <DMA_SetConfig+0x10e>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e000      	b.n	8009b74 <DMA_SetConfig+0x110>
 8009b72:	2300      	movs	r3, #0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00d      	beq.n	8009b94 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009b80:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d004      	beq.n	8009b94 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009b92:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a3e      	ldr	r2, [pc, #248]	; (8009c94 <DMA_SetConfig+0x230>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d04a      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a3d      	ldr	r2, [pc, #244]	; (8009c98 <DMA_SetConfig+0x234>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d045      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a3b      	ldr	r2, [pc, #236]	; (8009c9c <DMA_SetConfig+0x238>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d040      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a3a      	ldr	r2, [pc, #232]	; (8009ca0 <DMA_SetConfig+0x23c>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d03b      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a38      	ldr	r2, [pc, #224]	; (8009ca4 <DMA_SetConfig+0x240>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d036      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a37      	ldr	r2, [pc, #220]	; (8009ca8 <DMA_SetConfig+0x244>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d031      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a35      	ldr	r2, [pc, #212]	; (8009cac <DMA_SetConfig+0x248>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d02c      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a34      	ldr	r2, [pc, #208]	; (8009cb0 <DMA_SetConfig+0x24c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d027      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a32      	ldr	r2, [pc, #200]	; (8009cb4 <DMA_SetConfig+0x250>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d022      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a31      	ldr	r2, [pc, #196]	; (8009cb8 <DMA_SetConfig+0x254>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d01d      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a2f      	ldr	r2, [pc, #188]	; (8009cbc <DMA_SetConfig+0x258>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d018      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a2e      	ldr	r2, [pc, #184]	; (8009cc0 <DMA_SetConfig+0x25c>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d013      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a2c      	ldr	r2, [pc, #176]	; (8009cc4 <DMA_SetConfig+0x260>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d00e      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a2b      	ldr	r2, [pc, #172]	; (8009cc8 <DMA_SetConfig+0x264>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d009      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a29      	ldr	r2, [pc, #164]	; (8009ccc <DMA_SetConfig+0x268>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d004      	beq.n	8009c34 <DMA_SetConfig+0x1d0>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a28      	ldr	r2, [pc, #160]	; (8009cd0 <DMA_SetConfig+0x26c>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d101      	bne.n	8009c38 <DMA_SetConfig+0x1d4>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e000      	b.n	8009c3a <DMA_SetConfig+0x1d6>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d05a      	beq.n	8009cf4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c42:	f003 031f 	and.w	r3, r3, #31
 8009c46:	223f      	movs	r2, #63	; 0x3f
 8009c48:	409a      	lsls	r2, r3
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009c5c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	2b40      	cmp	r3, #64	; 0x40
 8009c6c:	d108      	bne.n	8009c80 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009c7e:	e087      	b.n	8009d90 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	60da      	str	r2, [r3, #12]
}
 8009c90:	e07e      	b.n	8009d90 <DMA_SetConfig+0x32c>
 8009c92:	bf00      	nop
 8009c94:	40020010 	.word	0x40020010
 8009c98:	40020028 	.word	0x40020028
 8009c9c:	40020040 	.word	0x40020040
 8009ca0:	40020058 	.word	0x40020058
 8009ca4:	40020070 	.word	0x40020070
 8009ca8:	40020088 	.word	0x40020088
 8009cac:	400200a0 	.word	0x400200a0
 8009cb0:	400200b8 	.word	0x400200b8
 8009cb4:	40020410 	.word	0x40020410
 8009cb8:	40020428 	.word	0x40020428
 8009cbc:	40020440 	.word	0x40020440
 8009cc0:	40020458 	.word	0x40020458
 8009cc4:	40020470 	.word	0x40020470
 8009cc8:	40020488 	.word	0x40020488
 8009ccc:	400204a0 	.word	0x400204a0
 8009cd0:	400204b8 	.word	0x400204b8
 8009cd4:	58025408 	.word	0x58025408
 8009cd8:	5802541c 	.word	0x5802541c
 8009cdc:	58025430 	.word	0x58025430
 8009ce0:	58025444 	.word	0x58025444
 8009ce4:	58025458 	.word	0x58025458
 8009ce8:	5802546c 	.word	0x5802546c
 8009cec:	58025480 	.word	0x58025480
 8009cf0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a28      	ldr	r2, [pc, #160]	; (8009d9c <DMA_SetConfig+0x338>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d022      	beq.n	8009d44 <DMA_SetConfig+0x2e0>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a27      	ldr	r2, [pc, #156]	; (8009da0 <DMA_SetConfig+0x33c>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d01d      	beq.n	8009d44 <DMA_SetConfig+0x2e0>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a25      	ldr	r2, [pc, #148]	; (8009da4 <DMA_SetConfig+0x340>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d018      	beq.n	8009d44 <DMA_SetConfig+0x2e0>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a24      	ldr	r2, [pc, #144]	; (8009da8 <DMA_SetConfig+0x344>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d013      	beq.n	8009d44 <DMA_SetConfig+0x2e0>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a22      	ldr	r2, [pc, #136]	; (8009dac <DMA_SetConfig+0x348>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d00e      	beq.n	8009d44 <DMA_SetConfig+0x2e0>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a21      	ldr	r2, [pc, #132]	; (8009db0 <DMA_SetConfig+0x34c>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d009      	beq.n	8009d44 <DMA_SetConfig+0x2e0>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a1f      	ldr	r2, [pc, #124]	; (8009db4 <DMA_SetConfig+0x350>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d004      	beq.n	8009d44 <DMA_SetConfig+0x2e0>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a1e      	ldr	r2, [pc, #120]	; (8009db8 <DMA_SetConfig+0x354>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d101      	bne.n	8009d48 <DMA_SetConfig+0x2e4>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e000      	b.n	8009d4a <DMA_SetConfig+0x2e6>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d020      	beq.n	8009d90 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d52:	f003 031f 	and.w	r3, r3, #31
 8009d56:	2201      	movs	r2, #1
 8009d58:	409a      	lsls	r2, r3
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	2b40      	cmp	r3, #64	; 0x40
 8009d6c:	d108      	bne.n	8009d80 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	60da      	str	r2, [r3, #12]
}
 8009d7e:	e007      	b.n	8009d90 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	60da      	str	r2, [r3, #12]
}
 8009d90:	bf00      	nop
 8009d92:	371c      	adds	r7, #28
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	58025408 	.word	0x58025408
 8009da0:	5802541c 	.word	0x5802541c
 8009da4:	58025430 	.word	0x58025430
 8009da8:	58025444 	.word	0x58025444
 8009dac:	58025458 	.word	0x58025458
 8009db0:	5802546c 	.word	0x5802546c
 8009db4:	58025480 	.word	0x58025480
 8009db8:	58025494 	.word	0x58025494

08009dbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a42      	ldr	r2, [pc, #264]	; (8009ed4 <DMA_CalcBaseAndBitshift+0x118>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d04a      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a41      	ldr	r2, [pc, #260]	; (8009ed8 <DMA_CalcBaseAndBitshift+0x11c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d045      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a3f      	ldr	r2, [pc, #252]	; (8009edc <DMA_CalcBaseAndBitshift+0x120>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d040      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a3e      	ldr	r2, [pc, #248]	; (8009ee0 <DMA_CalcBaseAndBitshift+0x124>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d03b      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a3c      	ldr	r2, [pc, #240]	; (8009ee4 <DMA_CalcBaseAndBitshift+0x128>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d036      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a3b      	ldr	r2, [pc, #236]	; (8009ee8 <DMA_CalcBaseAndBitshift+0x12c>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d031      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a39      	ldr	r2, [pc, #228]	; (8009eec <DMA_CalcBaseAndBitshift+0x130>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d02c      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a38      	ldr	r2, [pc, #224]	; (8009ef0 <DMA_CalcBaseAndBitshift+0x134>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d027      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a36      	ldr	r2, [pc, #216]	; (8009ef4 <DMA_CalcBaseAndBitshift+0x138>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d022      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a35      	ldr	r2, [pc, #212]	; (8009ef8 <DMA_CalcBaseAndBitshift+0x13c>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d01d      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a33      	ldr	r2, [pc, #204]	; (8009efc <DMA_CalcBaseAndBitshift+0x140>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d018      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a32      	ldr	r2, [pc, #200]	; (8009f00 <DMA_CalcBaseAndBitshift+0x144>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d013      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a30      	ldr	r2, [pc, #192]	; (8009f04 <DMA_CalcBaseAndBitshift+0x148>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d00e      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a2f      	ldr	r2, [pc, #188]	; (8009f08 <DMA_CalcBaseAndBitshift+0x14c>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d009      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a2d      	ldr	r2, [pc, #180]	; (8009f0c <DMA_CalcBaseAndBitshift+0x150>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d004      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xa8>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a2c      	ldr	r2, [pc, #176]	; (8009f10 <DMA_CalcBaseAndBitshift+0x154>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d101      	bne.n	8009e68 <DMA_CalcBaseAndBitshift+0xac>
 8009e64:	2301      	movs	r3, #1
 8009e66:	e000      	b.n	8009e6a <DMA_CalcBaseAndBitshift+0xae>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d024      	beq.n	8009eb8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	3b10      	subs	r3, #16
 8009e76:	4a27      	ldr	r2, [pc, #156]	; (8009f14 <DMA_CalcBaseAndBitshift+0x158>)
 8009e78:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7c:	091b      	lsrs	r3, r3, #4
 8009e7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f003 0307 	and.w	r3, r3, #7
 8009e86:	4a24      	ldr	r2, [pc, #144]	; (8009f18 <DMA_CalcBaseAndBitshift+0x15c>)
 8009e88:	5cd3      	ldrb	r3, [r2, r3]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d908      	bls.n	8009ea8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4b1f      	ldr	r3, [pc, #124]	; (8009f1c <DMA_CalcBaseAndBitshift+0x160>)
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	1d1a      	adds	r2, r3, #4
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	659a      	str	r2, [r3, #88]	; 0x58
 8009ea6:	e00d      	b.n	8009ec4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	461a      	mov	r2, r3
 8009eae:	4b1b      	ldr	r3, [pc, #108]	; (8009f1c <DMA_CalcBaseAndBitshift+0x160>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8009eb6:	e005      	b.n	8009ec4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	40020010 	.word	0x40020010
 8009ed8:	40020028 	.word	0x40020028
 8009edc:	40020040 	.word	0x40020040
 8009ee0:	40020058 	.word	0x40020058
 8009ee4:	40020070 	.word	0x40020070
 8009ee8:	40020088 	.word	0x40020088
 8009eec:	400200a0 	.word	0x400200a0
 8009ef0:	400200b8 	.word	0x400200b8
 8009ef4:	40020410 	.word	0x40020410
 8009ef8:	40020428 	.word	0x40020428
 8009efc:	40020440 	.word	0x40020440
 8009f00:	40020458 	.word	0x40020458
 8009f04:	40020470 	.word	0x40020470
 8009f08:	40020488 	.word	0x40020488
 8009f0c:	400204a0 	.word	0x400204a0
 8009f10:	400204b8 	.word	0x400204b8
 8009f14:	aaaaaaab 	.word	0xaaaaaaab
 8009f18:	0801514c 	.word	0x0801514c
 8009f1c:	fffffc00 	.word	0xfffffc00

08009f20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d120      	bne.n	8009f76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f38:	2b03      	cmp	r3, #3
 8009f3a:	d858      	bhi.n	8009fee <DMA_CheckFifoParam+0xce>
 8009f3c:	a201      	add	r2, pc, #4	; (adr r2, 8009f44 <DMA_CheckFifoParam+0x24>)
 8009f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f42:	bf00      	nop
 8009f44:	08009f55 	.word	0x08009f55
 8009f48:	08009f67 	.word	0x08009f67
 8009f4c:	08009f55 	.word	0x08009f55
 8009f50:	08009fef 	.word	0x08009fef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d048      	beq.n	8009ff2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f64:	e045      	b.n	8009ff2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009f6e:	d142      	bne.n	8009ff6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f74:	e03f      	b.n	8009ff6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f7e:	d123      	bne.n	8009fc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d838      	bhi.n	8009ffa <DMA_CheckFifoParam+0xda>
 8009f88:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <DMA_CheckFifoParam+0x70>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fa1 	.word	0x08009fa1
 8009f94:	08009fa7 	.word	0x08009fa7
 8009f98:	08009fa1 	.word	0x08009fa1
 8009f9c:	08009fb9 	.word	0x08009fb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	73fb      	strb	r3, [r7, #15]
        break;
 8009fa4:	e030      	b.n	800a008 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d025      	beq.n	8009ffe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009fb6:	e022      	b.n	8009ffe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009fc0:	d11f      	bne.n	800a002 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009fc6:	e01c      	b.n	800a002 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d902      	bls.n	8009fd6 <DMA_CheckFifoParam+0xb6>
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d003      	beq.n	8009fdc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009fd4:	e018      	b.n	800a008 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	73fb      	strb	r3, [r7, #15]
        break;
 8009fda:	e015      	b.n	800a008 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00e      	beq.n	800a006 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	73fb      	strb	r3, [r7, #15]
    break;
 8009fec:	e00b      	b.n	800a006 <DMA_CheckFifoParam+0xe6>
        break;
 8009fee:	bf00      	nop
 8009ff0:	e00a      	b.n	800a008 <DMA_CheckFifoParam+0xe8>
        break;
 8009ff2:	bf00      	nop
 8009ff4:	e008      	b.n	800a008 <DMA_CheckFifoParam+0xe8>
        break;
 8009ff6:	bf00      	nop
 8009ff8:	e006      	b.n	800a008 <DMA_CheckFifoParam+0xe8>
        break;
 8009ffa:	bf00      	nop
 8009ffc:	e004      	b.n	800a008 <DMA_CheckFifoParam+0xe8>
        break;
 8009ffe:	bf00      	nop
 800a000:	e002      	b.n	800a008 <DMA_CheckFifoParam+0xe8>
        break;
 800a002:	bf00      	nop
 800a004:	e000      	b.n	800a008 <DMA_CheckFifoParam+0xe8>
    break;
 800a006:	bf00      	nop
    }
  }

  return status;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop

0800a018 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a38      	ldr	r2, [pc, #224]	; (800a10c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d022      	beq.n	800a076 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a36      	ldr	r2, [pc, #216]	; (800a110 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d01d      	beq.n	800a076 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a35      	ldr	r2, [pc, #212]	; (800a114 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d018      	beq.n	800a076 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a33      	ldr	r2, [pc, #204]	; (800a118 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d013      	beq.n	800a076 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a32      	ldr	r2, [pc, #200]	; (800a11c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d00e      	beq.n	800a076 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a30      	ldr	r2, [pc, #192]	; (800a120 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d009      	beq.n	800a076 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a2f      	ldr	r2, [pc, #188]	; (800a124 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d004      	beq.n	800a076 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a2d      	ldr	r2, [pc, #180]	; (800a128 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d101      	bne.n	800a07a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a076:	2301      	movs	r3, #1
 800a078:	e000      	b.n	800a07c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a07a:	2300      	movs	r3, #0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01a      	beq.n	800a0b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	3b08      	subs	r3, #8
 800a088:	4a28      	ldr	r2, [pc, #160]	; (800a12c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a08a:	fba2 2303 	umull	r2, r3, r2, r3
 800a08e:	091b      	lsrs	r3, r3, #4
 800a090:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4b26      	ldr	r3, [pc, #152]	; (800a130 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	461a      	mov	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a24      	ldr	r2, [pc, #144]	; (800a134 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a0a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f003 031f 	and.w	r3, r3, #31
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	409a      	lsls	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a0b4:	e024      	b.n	800a100 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	3b10      	subs	r3, #16
 800a0be:	4a1e      	ldr	r2, [pc, #120]	; (800a138 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a0c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c4:	091b      	lsrs	r3, r3, #4
 800a0c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	4a1c      	ldr	r2, [pc, #112]	; (800a13c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d806      	bhi.n	800a0de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	4a1b      	ldr	r2, [pc, #108]	; (800a140 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d902      	bls.n	800a0de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	3308      	adds	r3, #8
 800a0dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	4b18      	ldr	r3, [pc, #96]	; (800a144 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a0e2:	4413      	add	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a16      	ldr	r2, [pc, #88]	; (800a148 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a0f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f003 031f 	and.w	r3, r3, #31
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	409a      	lsls	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a100:	bf00      	nop
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	58025408 	.word	0x58025408
 800a110:	5802541c 	.word	0x5802541c
 800a114:	58025430 	.word	0x58025430
 800a118:	58025444 	.word	0x58025444
 800a11c:	58025458 	.word	0x58025458
 800a120:	5802546c 	.word	0x5802546c
 800a124:	58025480 	.word	0x58025480
 800a128:	58025494 	.word	0x58025494
 800a12c:	cccccccd 	.word	0xcccccccd
 800a130:	16009600 	.word	0x16009600
 800a134:	58025880 	.word	0x58025880
 800a138:	aaaaaaab 	.word	0xaaaaaaab
 800a13c:	400204b8 	.word	0x400204b8
 800a140:	4002040f 	.word	0x4002040f
 800a144:	10008200 	.word	0x10008200
 800a148:	40020880 	.word	0x40020880

0800a14c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d04a      	beq.n	800a1f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2b08      	cmp	r3, #8
 800a166:	d847      	bhi.n	800a1f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a25      	ldr	r2, [pc, #148]	; (800a204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d022      	beq.n	800a1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a24      	ldr	r2, [pc, #144]	; (800a208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d01d      	beq.n	800a1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a22      	ldr	r2, [pc, #136]	; (800a20c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d018      	beq.n	800a1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a21      	ldr	r2, [pc, #132]	; (800a210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d013      	beq.n	800a1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a1f      	ldr	r2, [pc, #124]	; (800a214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00e      	beq.n	800a1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a1e      	ldr	r2, [pc, #120]	; (800a218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d009      	beq.n	800a1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a1c      	ldr	r2, [pc, #112]	; (800a21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d004      	beq.n	800a1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a1b      	ldr	r2, [pc, #108]	; (800a220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d101      	bne.n	800a1bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00a      	beq.n	800a1d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	4b17      	ldr	r3, [pc, #92]	; (800a224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a1c6:	4413      	add	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a15      	ldr	r2, [pc, #84]	; (800a228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a1d4:	671a      	str	r2, [r3, #112]	; 0x70
 800a1d6:	e009      	b.n	800a1ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	4b14      	ldr	r3, [pc, #80]	; (800a22c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a11      	ldr	r2, [pc, #68]	; (800a230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a1ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	409a      	lsls	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a1f8:	bf00      	nop
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	58025408 	.word	0x58025408
 800a208:	5802541c 	.word	0x5802541c
 800a20c:	58025430 	.word	0x58025430
 800a210:	58025444 	.word	0x58025444
 800a214:	58025458 	.word	0x58025458
 800a218:	5802546c 	.word	0x5802546c
 800a21c:	58025480 	.word	0x58025480
 800a220:	58025494 	.word	0x58025494
 800a224:	1600963f 	.word	0x1600963f
 800a228:	58025940 	.word	0x58025940
 800a22c:	1000823f 	.word	0x1000823f
 800a230:	40020940 	.word	0x40020940

0800a234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a234:	b480      	push	{r7}
 800a236:	b089      	sub	sp, #36	; 0x24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a23e:	2300      	movs	r3, #0
 800a240:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a242:	4b89      	ldr	r3, [pc, #548]	; (800a468 <HAL_GPIO_Init+0x234>)
 800a244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a246:	e194      	b.n	800a572 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	2101      	movs	r1, #1
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	fa01 f303 	lsl.w	r3, r1, r3
 800a254:	4013      	ands	r3, r2
 800a256:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 8186 	beq.w	800a56c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f003 0303 	and.w	r3, r3, #3
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d005      	beq.n	800a278 <HAL_GPIO_Init+0x44>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	f003 0303 	and.w	r3, r3, #3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d130      	bne.n	800a2da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	005b      	lsls	r3, r3, #1
 800a282:	2203      	movs	r2, #3
 800a284:	fa02 f303 	lsl.w	r3, r2, r3
 800a288:	43db      	mvns	r3, r3
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	4013      	ands	r3, r2
 800a28e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	68da      	ldr	r2, [r3, #12]
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	69ba      	ldr	r2, [r7, #24]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	69ba      	ldr	r2, [r7, #24]
 800a2a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b6:	43db      	mvns	r3, r3
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	091b      	lsrs	r3, r3, #4
 800a2c4:	f003 0201 	and.w	r2, r3, #1
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ce:	69ba      	ldr	r2, [r7, #24]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	69ba      	ldr	r2, [r7, #24]
 800a2d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f003 0303 	and.w	r3, r3, #3
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d017      	beq.n	800a316 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	2203      	movs	r2, #3
 800a2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f6:	43db      	mvns	r3, r3
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	689a      	ldr	r2, [r3, #8]
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	005b      	lsls	r3, r3, #1
 800a306:	fa02 f303 	lsl.w	r3, r2, r3
 800a30a:	69ba      	ldr	r2, [r7, #24]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	69ba      	ldr	r2, [r7, #24]
 800a314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f003 0303 	and.w	r3, r3, #3
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d123      	bne.n	800a36a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	08da      	lsrs	r2, r3, #3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3208      	adds	r2, #8
 800a32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	220f      	movs	r2, #15
 800a33a:	fa02 f303 	lsl.w	r3, r2, r3
 800a33e:	43db      	mvns	r3, r3
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	4013      	ands	r3, r2
 800a344:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	691a      	ldr	r2, [r3, #16]
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	f003 0307 	and.w	r3, r3, #7
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	fa02 f303 	lsl.w	r3, r2, r3
 800a356:	69ba      	ldr	r2, [r7, #24]
 800a358:	4313      	orrs	r3, r2
 800a35a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	08da      	lsrs	r2, r3, #3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3208      	adds	r2, #8
 800a364:	69b9      	ldr	r1, [r7, #24]
 800a366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	005b      	lsls	r3, r3, #1
 800a374:	2203      	movs	r2, #3
 800a376:	fa02 f303 	lsl.w	r3, r2, r3
 800a37a:	43db      	mvns	r3, r3
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	4013      	ands	r3, r2
 800a380:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	f003 0203 	and.w	r2, r3, #3
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	005b      	lsls	r3, r3, #1
 800a38e:	fa02 f303 	lsl.w	r3, r2, r3
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	4313      	orrs	r3, r2
 800a396:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	69ba      	ldr	r2, [r7, #24]
 800a39c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f000 80e0 	beq.w	800a56c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3ac:	4b2f      	ldr	r3, [pc, #188]	; (800a46c <HAL_GPIO_Init+0x238>)
 800a3ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3b2:	4a2e      	ldr	r2, [pc, #184]	; (800a46c <HAL_GPIO_Init+0x238>)
 800a3b4:	f043 0302 	orr.w	r3, r3, #2
 800a3b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a3bc:	4b2b      	ldr	r3, [pc, #172]	; (800a46c <HAL_GPIO_Init+0x238>)
 800a3be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3c2:	f003 0302 	and.w	r3, r3, #2
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a3ca:	4a29      	ldr	r2, [pc, #164]	; (800a470 <HAL_GPIO_Init+0x23c>)
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	089b      	lsrs	r3, r3, #2
 800a3d0:	3302      	adds	r3, #2
 800a3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	f003 0303 	and.w	r3, r3, #3
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	220f      	movs	r2, #15
 800a3e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e6:	43db      	mvns	r3, r3
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a20      	ldr	r2, [pc, #128]	; (800a474 <HAL_GPIO_Init+0x240>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d052      	beq.n	800a49c <HAL_GPIO_Init+0x268>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a1f      	ldr	r2, [pc, #124]	; (800a478 <HAL_GPIO_Init+0x244>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d031      	beq.n	800a462 <HAL_GPIO_Init+0x22e>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a1e      	ldr	r2, [pc, #120]	; (800a47c <HAL_GPIO_Init+0x248>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d02b      	beq.n	800a45e <HAL_GPIO_Init+0x22a>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a1d      	ldr	r2, [pc, #116]	; (800a480 <HAL_GPIO_Init+0x24c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d025      	beq.n	800a45a <HAL_GPIO_Init+0x226>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a1c      	ldr	r2, [pc, #112]	; (800a484 <HAL_GPIO_Init+0x250>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d01f      	beq.n	800a456 <HAL_GPIO_Init+0x222>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a1b      	ldr	r2, [pc, #108]	; (800a488 <HAL_GPIO_Init+0x254>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d019      	beq.n	800a452 <HAL_GPIO_Init+0x21e>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a1a      	ldr	r2, [pc, #104]	; (800a48c <HAL_GPIO_Init+0x258>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d013      	beq.n	800a44e <HAL_GPIO_Init+0x21a>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a19      	ldr	r2, [pc, #100]	; (800a490 <HAL_GPIO_Init+0x25c>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00d      	beq.n	800a44a <HAL_GPIO_Init+0x216>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a18      	ldr	r2, [pc, #96]	; (800a494 <HAL_GPIO_Init+0x260>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d007      	beq.n	800a446 <HAL_GPIO_Init+0x212>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a17      	ldr	r2, [pc, #92]	; (800a498 <HAL_GPIO_Init+0x264>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d101      	bne.n	800a442 <HAL_GPIO_Init+0x20e>
 800a43e:	2309      	movs	r3, #9
 800a440:	e02d      	b.n	800a49e <HAL_GPIO_Init+0x26a>
 800a442:	230a      	movs	r3, #10
 800a444:	e02b      	b.n	800a49e <HAL_GPIO_Init+0x26a>
 800a446:	2308      	movs	r3, #8
 800a448:	e029      	b.n	800a49e <HAL_GPIO_Init+0x26a>
 800a44a:	2307      	movs	r3, #7
 800a44c:	e027      	b.n	800a49e <HAL_GPIO_Init+0x26a>
 800a44e:	2306      	movs	r3, #6
 800a450:	e025      	b.n	800a49e <HAL_GPIO_Init+0x26a>
 800a452:	2305      	movs	r3, #5
 800a454:	e023      	b.n	800a49e <HAL_GPIO_Init+0x26a>
 800a456:	2304      	movs	r3, #4
 800a458:	e021      	b.n	800a49e <HAL_GPIO_Init+0x26a>
 800a45a:	2303      	movs	r3, #3
 800a45c:	e01f      	b.n	800a49e <HAL_GPIO_Init+0x26a>
 800a45e:	2302      	movs	r3, #2
 800a460:	e01d      	b.n	800a49e <HAL_GPIO_Init+0x26a>
 800a462:	2301      	movs	r3, #1
 800a464:	e01b      	b.n	800a49e <HAL_GPIO_Init+0x26a>
 800a466:	bf00      	nop
 800a468:	58000080 	.word	0x58000080
 800a46c:	58024400 	.word	0x58024400
 800a470:	58000400 	.word	0x58000400
 800a474:	58020000 	.word	0x58020000
 800a478:	58020400 	.word	0x58020400
 800a47c:	58020800 	.word	0x58020800
 800a480:	58020c00 	.word	0x58020c00
 800a484:	58021000 	.word	0x58021000
 800a488:	58021400 	.word	0x58021400
 800a48c:	58021800 	.word	0x58021800
 800a490:	58021c00 	.word	0x58021c00
 800a494:	58022000 	.word	0x58022000
 800a498:	58022400 	.word	0x58022400
 800a49c:	2300      	movs	r3, #0
 800a49e:	69fa      	ldr	r2, [r7, #28]
 800a4a0:	f002 0203 	and.w	r2, r2, #3
 800a4a4:	0092      	lsls	r2, r2, #2
 800a4a6:	4093      	lsls	r3, r2
 800a4a8:	69ba      	ldr	r2, [r7, #24]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a4ae:	4938      	ldr	r1, [pc, #224]	; (800a590 <HAL_GPIO_Init+0x35c>)
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	089b      	lsrs	r3, r3, #2
 800a4b4:	3302      	adds	r3, #2
 800a4b6:	69ba      	ldr	r2, [r7, #24]
 800a4b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a4bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	43db      	mvns	r3, r3
 800a4c8:	69ba      	ldr	r2, [r7, #24]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a4e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a4ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	43db      	mvns	r3, r3
 800a4f6:	69ba      	ldr	r2, [r7, #24]
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a508:	69ba      	ldr	r2, [r7, #24]
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	43db      	mvns	r3, r3
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	4013      	ands	r3, r2
 800a526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	4313      	orrs	r3, r2
 800a53a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	43db      	mvns	r3, r3
 800a54c:	69ba      	ldr	r2, [r7, #24]
 800a54e:	4013      	ands	r3, r2
 800a550:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a55e:	69ba      	ldr	r2, [r7, #24]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	4313      	orrs	r3, r2
 800a564:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	3301      	adds	r3, #1
 800a570:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	fa22 f303 	lsr.w	r3, r2, r3
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f47f ae63 	bne.w	800a248 <HAL_GPIO_Init+0x14>
  }
}
 800a582:	bf00      	nop
 800a584:	bf00      	nop
 800a586:	3724      	adds	r7, #36	; 0x24
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	58000400 	.word	0x58000400

0800a594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	807b      	strh	r3, [r7, #2]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a5a4:	787b      	ldrb	r3, [r7, #1]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a5aa:	887a      	ldrh	r2, [r7, #2]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a5b0:	e003      	b.n	800a5ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a5b2:	887b      	ldrh	r3, [r7, #2]
 800a5b4:	041a      	lsls	r2, r3, #16
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	619a      	str	r2, [r3, #24]
}
 800a5ba:	bf00      	nop
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a5d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a5d8:	88fb      	ldrh	r3, [r7, #6]
 800a5da:	4013      	ands	r3, r2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d008      	beq.n	800a5f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a5e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5e4:	88fb      	ldrh	r3, [r7, #6]
 800a5e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fa fb6f 	bl	8004cd0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a604:	4b19      	ldr	r3, [pc, #100]	; (800a66c <HAL_PWREx_ConfigSupply+0x70>)
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b04      	cmp	r3, #4
 800a60e:	d00a      	beq.n	800a626 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a610:	4b16      	ldr	r3, [pc, #88]	; (800a66c <HAL_PWREx_ConfigSupply+0x70>)
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	f003 0307 	and.w	r3, r3, #7
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d001      	beq.n	800a622 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e01f      	b.n	800a662 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	e01d      	b.n	800a662 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a626:	4b11      	ldr	r3, [pc, #68]	; (800a66c <HAL_PWREx_ConfigSupply+0x70>)
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f023 0207 	bic.w	r2, r3, #7
 800a62e:	490f      	ldr	r1, [pc, #60]	; (800a66c <HAL_PWREx_ConfigSupply+0x70>)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4313      	orrs	r3, r2
 800a634:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a636:	f7fc fc6d 	bl	8006f14 <HAL_GetTick>
 800a63a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a63c:	e009      	b.n	800a652 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a63e:	f7fc fc69 	bl	8006f14 <HAL_GetTick>
 800a642:	4602      	mov	r2, r0
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	1ad3      	subs	r3, r2, r3
 800a648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a64c:	d901      	bls.n	800a652 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e007      	b.n	800a662 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a652:	4b06      	ldr	r3, [pc, #24]	; (800a66c <HAL_PWREx_ConfigSupply+0x70>)
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a65a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65e:	d1ee      	bne.n	800a63e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	58024800 	.word	0x58024800

0800a670 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08c      	sub	sp, #48	; 0x30
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d102      	bne.n	800a684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	f000 bc1c 	b.w	800aebc <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 8087 	beq.w	800a7a0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a692:	4b9e      	ldr	r3, [pc, #632]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a69a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a69c:	4b9b      	ldr	r3, [pc, #620]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	2b10      	cmp	r3, #16
 800a6a6:	d007      	beq.n	800a6b8 <HAL_RCC_OscConfig+0x48>
 800a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6aa:	2b18      	cmp	r3, #24
 800a6ac:	d110      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x60>
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	f003 0303 	and.w	r3, r3, #3
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d10b      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6b8:	4b94      	ldr	r3, [pc, #592]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d06c      	beq.n	800a79e <HAL_RCC_OscConfig+0x12e>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d168      	bne.n	800a79e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e3f5      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6d8:	d106      	bne.n	800a6e8 <HAL_RCC_OscConfig+0x78>
 800a6da:	4b8c      	ldr	r3, [pc, #560]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a8b      	ldr	r2, [pc, #556]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a6e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6e4:	6013      	str	r3, [r2, #0]
 800a6e6:	e02e      	b.n	800a746 <HAL_RCC_OscConfig+0xd6>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10c      	bne.n	800a70a <HAL_RCC_OscConfig+0x9a>
 800a6f0:	4b86      	ldr	r3, [pc, #536]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a85      	ldr	r2, [pc, #532]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a6f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	4b83      	ldr	r3, [pc, #524]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a82      	ldr	r2, [pc, #520]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	e01d      	b.n	800a746 <HAL_RCC_OscConfig+0xd6>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a712:	d10c      	bne.n	800a72e <HAL_RCC_OscConfig+0xbe>
 800a714:	4b7d      	ldr	r3, [pc, #500]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a7c      	ldr	r2, [pc, #496]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a71a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	4b7a      	ldr	r3, [pc, #488]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a79      	ldr	r2, [pc, #484]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	e00b      	b.n	800a746 <HAL_RCC_OscConfig+0xd6>
 800a72e:	4b77      	ldr	r3, [pc, #476]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a76      	ldr	r2, [pc, #472]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	4b74      	ldr	r3, [pc, #464]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a73      	ldr	r2, [pc, #460]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a744:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d013      	beq.n	800a776 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a74e:	f7fc fbe1 	bl	8006f14 <HAL_GetTick>
 800a752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a754:	e008      	b.n	800a768 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a756:	f7fc fbdd 	bl	8006f14 <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	2b64      	cmp	r3, #100	; 0x64
 800a762:	d901      	bls.n	800a768 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e3a9      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a768:	4b68      	ldr	r3, [pc, #416]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d0f0      	beq.n	800a756 <HAL_RCC_OscConfig+0xe6>
 800a774:	e014      	b.n	800a7a0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a776:	f7fc fbcd 	bl	8006f14 <HAL_GetTick>
 800a77a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a77c:	e008      	b.n	800a790 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a77e:	f7fc fbc9 	bl	8006f14 <HAL_GetTick>
 800a782:	4602      	mov	r2, r0
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	2b64      	cmp	r3, #100	; 0x64
 800a78a:	d901      	bls.n	800a790 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e395      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a790:	4b5e      	ldr	r3, [pc, #376]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1f0      	bne.n	800a77e <HAL_RCC_OscConfig+0x10e>
 800a79c:	e000      	b.n	800a7a0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a79e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0302 	and.w	r3, r3, #2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 80ca 	beq.w	800a942 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7ae:	4b57      	ldr	r3, [pc, #348]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7b8:	4b54      	ldr	r3, [pc, #336]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7bc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d007      	beq.n	800a7d4 <HAL_RCC_OscConfig+0x164>
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	2b18      	cmp	r3, #24
 800a7c8:	d156      	bne.n	800a878 <HAL_RCC_OscConfig+0x208>
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d151      	bne.n	800a878 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7d4:	4b4d      	ldr	r3, [pc, #308]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d005      	beq.n	800a7ec <HAL_RCC_OscConfig+0x17c>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e367      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7ec:	4b47      	ldr	r3, [pc, #284]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f023 0219 	bic.w	r2, r3, #25
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	4944      	ldr	r1, [pc, #272]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a7fe:	f7fc fb89 	bl	8006f14 <HAL_GetTick>
 800a802:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a804:	e008      	b.n	800a818 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a806:	f7fc fb85 	bl	8006f14 <HAL_GetTick>
 800a80a:	4602      	mov	r2, r0
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	2b02      	cmp	r3, #2
 800a812:	d901      	bls.n	800a818 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a814:	2303      	movs	r3, #3
 800a816:	e351      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a818:	4b3c      	ldr	r3, [pc, #240]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 0304 	and.w	r3, r3, #4
 800a820:	2b00      	cmp	r3, #0
 800a822:	d0f0      	beq.n	800a806 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a824:	f7fc fba6 	bl	8006f74 <HAL_GetREVID>
 800a828:	4603      	mov	r3, r0
 800a82a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a82e:	4293      	cmp	r3, r2
 800a830:	d817      	bhi.n	800a862 <HAL_RCC_OscConfig+0x1f2>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	2b40      	cmp	r3, #64	; 0x40
 800a838:	d108      	bne.n	800a84c <HAL_RCC_OscConfig+0x1dc>
 800a83a:	4b34      	ldr	r3, [pc, #208]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a842:	4a32      	ldr	r2, [pc, #200]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a848:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a84a:	e07a      	b.n	800a942 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a84c:	4b2f      	ldr	r3, [pc, #188]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	031b      	lsls	r3, r3, #12
 800a85a:	492c      	ldr	r1, [pc, #176]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a85c:	4313      	orrs	r3, r2
 800a85e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a860:	e06f      	b.n	800a942 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a862:	4b2a      	ldr	r3, [pc, #168]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	061b      	lsls	r3, r3, #24
 800a870:	4926      	ldr	r1, [pc, #152]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a872:	4313      	orrs	r3, r2
 800a874:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a876:	e064      	b.n	800a942 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d047      	beq.n	800a910 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a880:	4b22      	ldr	r3, [pc, #136]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f023 0219 	bic.w	r2, r3, #25
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	491f      	ldr	r1, [pc, #124]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a88e:	4313      	orrs	r3, r2
 800a890:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a892:	f7fc fb3f 	bl	8006f14 <HAL_GetTick>
 800a896:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a898:	e008      	b.n	800a8ac <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a89a:	f7fc fb3b 	bl	8006f14 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d901      	bls.n	800a8ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e307      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8ac:	4b17      	ldr	r3, [pc, #92]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 0304 	and.w	r3, r3, #4
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d0f0      	beq.n	800a89a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8b8:	f7fc fb5c 	bl	8006f74 <HAL_GetREVID>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f241 0203 	movw	r2, #4099	; 0x1003
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d817      	bhi.n	800a8f6 <HAL_RCC_OscConfig+0x286>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	2b40      	cmp	r3, #64	; 0x40
 800a8cc:	d108      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x270>
 800a8ce:	4b0f      	ldr	r3, [pc, #60]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a8d6:	4a0d      	ldr	r2, [pc, #52]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a8d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8dc:	6053      	str	r3, [r2, #4]
 800a8de:	e030      	b.n	800a942 <HAL_RCC_OscConfig+0x2d2>
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	031b      	lsls	r3, r3, #12
 800a8ee:	4907      	ldr	r1, [pc, #28]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	604b      	str	r3, [r1, #4]
 800a8f4:	e025      	b.n	800a942 <HAL_RCC_OscConfig+0x2d2>
 800a8f6:	4b05      	ldr	r3, [pc, #20]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	061b      	lsls	r3, r3, #24
 800a904:	4901      	ldr	r1, [pc, #4]	; (800a90c <HAL_RCC_OscConfig+0x29c>)
 800a906:	4313      	orrs	r3, r2
 800a908:	604b      	str	r3, [r1, #4]
 800a90a:	e01a      	b.n	800a942 <HAL_RCC_OscConfig+0x2d2>
 800a90c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a910:	4b9e      	ldr	r3, [pc, #632]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a9d      	ldr	r2, [pc, #628]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a916:	f023 0301 	bic.w	r3, r3, #1
 800a91a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a91c:	f7fc fafa 	bl	8006f14 <HAL_GetTick>
 800a920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a922:	e008      	b.n	800a936 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a924:	f7fc faf6 	bl	8006f14 <HAL_GetTick>
 800a928:	4602      	mov	r2, r0
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d901      	bls.n	800a936 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800a932:	2303      	movs	r3, #3
 800a934:	e2c2      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a936:	4b95      	ldr	r3, [pc, #596]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0304 	and.w	r3, r3, #4
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1f0      	bne.n	800a924 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0310 	and.w	r3, r3, #16
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 80a9 	beq.w	800aaa2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a950:	4b8e      	ldr	r3, [pc, #568]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a958:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a95a:	4b8c      	ldr	r3, [pc, #560]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	2b08      	cmp	r3, #8
 800a964:	d007      	beq.n	800a976 <HAL_RCC_OscConfig+0x306>
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b18      	cmp	r3, #24
 800a96a:	d13a      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x372>
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f003 0303 	and.w	r3, r3, #3
 800a972:	2b01      	cmp	r3, #1
 800a974:	d135      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a976:	4b85      	ldr	r3, [pc, #532]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d005      	beq.n	800a98e <HAL_RCC_OscConfig+0x31e>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	69db      	ldr	r3, [r3, #28]
 800a986:	2b80      	cmp	r3, #128	; 0x80
 800a988:	d001      	beq.n	800a98e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e296      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a98e:	f7fc faf1 	bl	8006f74 <HAL_GetREVID>
 800a992:	4603      	mov	r3, r0
 800a994:	f241 0203 	movw	r2, #4099	; 0x1003
 800a998:	4293      	cmp	r3, r2
 800a99a:	d817      	bhi.n	800a9cc <HAL_RCC_OscConfig+0x35c>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	d108      	bne.n	800a9b6 <HAL_RCC_OscConfig+0x346>
 800a9a4:	4b79      	ldr	r3, [pc, #484]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a9ac:	4a77      	ldr	r2, [pc, #476]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a9ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9b2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9b4:	e075      	b.n	800aaa2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9b6:	4b75      	ldr	r3, [pc, #468]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	069b      	lsls	r3, r3, #26
 800a9c4:	4971      	ldr	r1, [pc, #452]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9ca:	e06a      	b.n	800aaa2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9cc:	4b6f      	ldr	r3, [pc, #444]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	061b      	lsls	r3, r3, #24
 800a9da:	496c      	ldr	r1, [pc, #432]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9e0:	e05f      	b.n	800aaa2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d042      	beq.n	800aa70 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a9ea:	4b68      	ldr	r3, [pc, #416]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a67      	ldr	r2, [pc, #412]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800a9f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9f6:	f7fc fa8d 	bl	8006f14 <HAL_GetTick>
 800a9fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9fc:	e008      	b.n	800aa10 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a9fe:	f7fc fa89 	bl	8006f14 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d901      	bls.n	800aa10 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e255      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa10:	4b5e      	ldr	r3, [pc, #376]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d0f0      	beq.n	800a9fe <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa1c:	f7fc faaa 	bl	8006f74 <HAL_GetREVID>
 800aa20:	4603      	mov	r3, r0
 800aa22:	f241 0203 	movw	r2, #4099	; 0x1003
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d817      	bhi.n	800aa5a <HAL_RCC_OscConfig+0x3ea>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	2b20      	cmp	r3, #32
 800aa30:	d108      	bne.n	800aa44 <HAL_RCC_OscConfig+0x3d4>
 800aa32:	4b56      	ldr	r3, [pc, #344]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800aa3a:	4a54      	ldr	r2, [pc, #336]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aa3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa40:	6053      	str	r3, [r2, #4]
 800aa42:	e02e      	b.n	800aaa2 <HAL_RCC_OscConfig+0x432>
 800aa44:	4b51      	ldr	r3, [pc, #324]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	069b      	lsls	r3, r3, #26
 800aa52:	494e      	ldr	r1, [pc, #312]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aa54:	4313      	orrs	r3, r2
 800aa56:	604b      	str	r3, [r1, #4]
 800aa58:	e023      	b.n	800aaa2 <HAL_RCC_OscConfig+0x432>
 800aa5a:	4b4c      	ldr	r3, [pc, #304]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	061b      	lsls	r3, r3, #24
 800aa68:	4948      	ldr	r1, [pc, #288]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	60cb      	str	r3, [r1, #12]
 800aa6e:	e018      	b.n	800aaa2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aa70:	4b46      	ldr	r3, [pc, #280]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a45      	ldr	r2, [pc, #276]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aa76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa7c:	f7fc fa4a 	bl	8006f14 <HAL_GetTick>
 800aa80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa82:	e008      	b.n	800aa96 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800aa84:	f7fc fa46 	bl	8006f14 <HAL_GetTick>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d901      	bls.n	800aa96 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e212      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa96:	4b3d      	ldr	r3, [pc, #244]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1f0      	bne.n	800aa84 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f003 0308 	and.w	r3, r3, #8
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d036      	beq.n	800ab1c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d019      	beq.n	800aaea <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aab6:	4b35      	ldr	r3, [pc, #212]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaba:	4a34      	ldr	r2, [pc, #208]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aabc:	f043 0301 	orr.w	r3, r3, #1
 800aac0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aac2:	f7fc fa27 	bl	8006f14 <HAL_GetTick>
 800aac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aac8:	e008      	b.n	800aadc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aaca:	f7fc fa23 	bl	8006f14 <HAL_GetTick>
 800aace:	4602      	mov	r2, r0
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d901      	bls.n	800aadc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	e1ef      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aadc:	4b2b      	ldr	r3, [pc, #172]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aae0:	f003 0302 	and.w	r3, r3, #2
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d0f0      	beq.n	800aaca <HAL_RCC_OscConfig+0x45a>
 800aae8:	e018      	b.n	800ab1c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aaea:	4b28      	ldr	r3, [pc, #160]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aaec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaee:	4a27      	ldr	r2, [pc, #156]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800aaf0:	f023 0301 	bic.w	r3, r3, #1
 800aaf4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaf6:	f7fc fa0d 	bl	8006f14 <HAL_GetTick>
 800aafa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aafc:	e008      	b.n	800ab10 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aafe:	f7fc fa09 	bl	8006f14 <HAL_GetTick>
 800ab02:	4602      	mov	r2, r0
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d901      	bls.n	800ab10 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e1d5      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab10:	4b1e      	ldr	r3, [pc, #120]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800ab12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab14:	f003 0302 	and.w	r3, r3, #2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1f0      	bne.n	800aafe <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0320 	and.w	r3, r3, #32
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d039      	beq.n	800ab9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d019      	beq.n	800ab64 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ab30:	4b16      	ldr	r3, [pc, #88]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a15      	ldr	r2, [pc, #84]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800ab36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab3c:	f7fc f9ea 	bl	8006f14 <HAL_GetTick>
 800ab40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ab42:	e008      	b.n	800ab56 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ab44:	f7fc f9e6 	bl	8006f14 <HAL_GetTick>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d901      	bls.n	800ab56 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e1b2      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ab56:	4b0d      	ldr	r3, [pc, #52]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d0f0      	beq.n	800ab44 <HAL_RCC_OscConfig+0x4d4>
 800ab62:	e01b      	b.n	800ab9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ab64:	4b09      	ldr	r3, [pc, #36]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a08      	ldr	r2, [pc, #32]	; (800ab8c <HAL_RCC_OscConfig+0x51c>)
 800ab6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab70:	f7fc f9d0 	bl	8006f14 <HAL_GetTick>
 800ab74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab76:	e00b      	b.n	800ab90 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ab78:	f7fc f9cc 	bl	8006f14 <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d904      	bls.n	800ab90 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e198      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
 800ab8a:	bf00      	nop
 800ab8c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab90:	4ba3      	ldr	r3, [pc, #652]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1ed      	bne.n	800ab78 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 0304 	and.w	r3, r3, #4
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 8081 	beq.w	800acac <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800abaa:	4b9e      	ldr	r3, [pc, #632]	; (800ae24 <HAL_RCC_OscConfig+0x7b4>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a9d      	ldr	r2, [pc, #628]	; (800ae24 <HAL_RCC_OscConfig+0x7b4>)
 800abb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800abb6:	f7fc f9ad 	bl	8006f14 <HAL_GetTick>
 800abba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abbc:	e008      	b.n	800abd0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800abbe:	f7fc f9a9 	bl	8006f14 <HAL_GetTick>
 800abc2:	4602      	mov	r2, r0
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	2b64      	cmp	r3, #100	; 0x64
 800abca:	d901      	bls.n	800abd0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	e175      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abd0:	4b94      	ldr	r3, [pc, #592]	; (800ae24 <HAL_RCC_OscConfig+0x7b4>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d0f0      	beq.n	800abbe <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d106      	bne.n	800abf2 <HAL_RCC_OscConfig+0x582>
 800abe4:	4b8e      	ldr	r3, [pc, #568]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800abe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe8:	4a8d      	ldr	r2, [pc, #564]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800abea:	f043 0301 	orr.w	r3, r3, #1
 800abee:	6713      	str	r3, [r2, #112]	; 0x70
 800abf0:	e02d      	b.n	800ac4e <HAL_RCC_OscConfig+0x5de>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10c      	bne.n	800ac14 <HAL_RCC_OscConfig+0x5a4>
 800abfa:	4b89      	ldr	r3, [pc, #548]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800abfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfe:	4a88      	ldr	r2, [pc, #544]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac00:	f023 0301 	bic.w	r3, r3, #1
 800ac04:	6713      	str	r3, [r2, #112]	; 0x70
 800ac06:	4b86      	ldr	r3, [pc, #536]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac0a:	4a85      	ldr	r2, [pc, #532]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac0c:	f023 0304 	bic.w	r3, r3, #4
 800ac10:	6713      	str	r3, [r2, #112]	; 0x70
 800ac12:	e01c      	b.n	800ac4e <HAL_RCC_OscConfig+0x5de>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	2b05      	cmp	r3, #5
 800ac1a:	d10c      	bne.n	800ac36 <HAL_RCC_OscConfig+0x5c6>
 800ac1c:	4b80      	ldr	r3, [pc, #512]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac20:	4a7f      	ldr	r2, [pc, #508]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac22:	f043 0304 	orr.w	r3, r3, #4
 800ac26:	6713      	str	r3, [r2, #112]	; 0x70
 800ac28:	4b7d      	ldr	r3, [pc, #500]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2c:	4a7c      	ldr	r2, [pc, #496]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac2e:	f043 0301 	orr.w	r3, r3, #1
 800ac32:	6713      	str	r3, [r2, #112]	; 0x70
 800ac34:	e00b      	b.n	800ac4e <HAL_RCC_OscConfig+0x5de>
 800ac36:	4b7a      	ldr	r3, [pc, #488]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac3a:	4a79      	ldr	r2, [pc, #484]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac3c:	f023 0301 	bic.w	r3, r3, #1
 800ac40:	6713      	str	r3, [r2, #112]	; 0x70
 800ac42:	4b77      	ldr	r3, [pc, #476]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac46:	4a76      	ldr	r2, [pc, #472]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac48:	f023 0304 	bic.w	r3, r3, #4
 800ac4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d015      	beq.n	800ac82 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac56:	f7fc f95d 	bl	8006f14 <HAL_GetTick>
 800ac5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac5c:	e00a      	b.n	800ac74 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac5e:	f7fc f959 	bl	8006f14 <HAL_GetTick>
 800ac62:	4602      	mov	r2, r0
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d901      	bls.n	800ac74 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e123      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac74:	4b6a      	ldr	r3, [pc, #424]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ac76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac78:	f003 0302 	and.w	r3, r3, #2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d0ee      	beq.n	800ac5e <HAL_RCC_OscConfig+0x5ee>
 800ac80:	e014      	b.n	800acac <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac82:	f7fc f947 	bl	8006f14 <HAL_GetTick>
 800ac86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac88:	e00a      	b.n	800aca0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac8a:	f7fc f943 	bl	8006f14 <HAL_GetTick>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d901      	bls.n	800aca0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e10d      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aca0:	4b5f      	ldr	r3, [pc, #380]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800aca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca4:	f003 0302 	and.w	r3, r3, #2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1ee      	bne.n	800ac8a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 8102 	beq.w	800aeba <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800acb6:	4b5a      	ldr	r3, [pc, #360]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acbe:	2b18      	cmp	r3, #24
 800acc0:	f000 80bd 	beq.w	800ae3e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	2b02      	cmp	r3, #2
 800acca:	f040 8095 	bne.w	800adf8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acce:	4b54      	ldr	r3, [pc, #336]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a53      	ldr	r2, [pc, #332]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800acd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acda:	f7fc f91b 	bl	8006f14 <HAL_GetTick>
 800acde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ace0:	e008      	b.n	800acf4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ace2:	f7fc f917 	bl	8006f14 <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	2b02      	cmp	r3, #2
 800acee:	d901      	bls.n	800acf4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e0e3      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acf4:	4b4a      	ldr	r3, [pc, #296]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1f0      	bne.n	800ace2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad00:	4b47      	ldr	r3, [pc, #284]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad04:	4b48      	ldr	r3, [pc, #288]	; (800ae28 <HAL_RCC_OscConfig+0x7b8>)
 800ad06:	4013      	ands	r3, r2
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ad10:	0112      	lsls	r2, r2, #4
 800ad12:	430a      	orrs	r2, r1
 800ad14:	4942      	ldr	r1, [pc, #264]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad16:	4313      	orrs	r3, r2
 800ad18:	628b      	str	r3, [r1, #40]	; 0x28
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	025b      	lsls	r3, r3, #9
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad34:	3b01      	subs	r3, #1
 800ad36:	041b      	lsls	r3, r3, #16
 800ad38:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad42:	3b01      	subs	r3, #1
 800ad44:	061b      	lsls	r3, r3, #24
 800ad46:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad4a:	4935      	ldr	r1, [pc, #212]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800ad50:	4b33      	ldr	r3, [pc, #204]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad54:	4a32      	ldr	r2, [pc, #200]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad56:	f023 0301 	bic.w	r3, r3, #1
 800ad5a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad5c:	4b30      	ldr	r3, [pc, #192]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad60:	4b32      	ldr	r3, [pc, #200]	; (800ae2c <HAL_RCC_OscConfig+0x7bc>)
 800ad62:	4013      	ands	r3, r2
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ad68:	00d2      	lsls	r2, r2, #3
 800ad6a:	492d      	ldr	r1, [pc, #180]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad70:	4b2b      	ldr	r3, [pc, #172]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	f023 020c 	bic.w	r2, r3, #12
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7c:	4928      	ldr	r1, [pc, #160]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad82:	4b27      	ldr	r3, [pc, #156]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad86:	f023 0202 	bic.w	r2, r3, #2
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8e:	4924      	ldr	r1, [pc, #144]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad94:	4b22      	ldr	r3, [pc, #136]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	4a21      	ldr	r2, [pc, #132]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ad9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ada0:	4b1f      	ldr	r3, [pc, #124]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ada2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada4:	4a1e      	ldr	r2, [pc, #120]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800ada6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800adac:	4b1c      	ldr	r3, [pc, #112]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	4a1b      	ldr	r2, [pc, #108]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800adb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800adb8:	4b19      	ldr	r3, [pc, #100]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbc:	4a18      	ldr	r2, [pc, #96]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800adbe:	f043 0301 	orr.w	r3, r3, #1
 800adc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800adc4:	4b16      	ldr	r3, [pc, #88]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a15      	ldr	r2, [pc, #84]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800adca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800add0:	f7fc f8a0 	bl	8006f14 <HAL_GetTick>
 800add4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800add6:	e008      	b.n	800adea <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800add8:	f7fc f89c 	bl	8006f14 <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d901      	bls.n	800adea <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e068      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800adea:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0f0      	beq.n	800add8 <HAL_RCC_OscConfig+0x768>
 800adf6:	e060      	b.n	800aeba <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adf8:	4b09      	ldr	r3, [pc, #36]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a08      	ldr	r2, [pc, #32]	; (800ae20 <HAL_RCC_OscConfig+0x7b0>)
 800adfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae04:	f7fc f886 	bl	8006f14 <HAL_GetTick>
 800ae08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae0a:	e011      	b.n	800ae30 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae0c:	f7fc f882 	bl	8006f14 <HAL_GetTick>
 800ae10:	4602      	mov	r2, r0
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	d90a      	bls.n	800ae30 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	e04e      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
 800ae1e:	bf00      	nop
 800ae20:	58024400 	.word	0x58024400
 800ae24:	58024800 	.word	0x58024800
 800ae28:	fffffc0c 	.word	0xfffffc0c
 800ae2c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae30:	4b24      	ldr	r3, [pc, #144]	; (800aec4 <HAL_RCC_OscConfig+0x854>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e7      	bne.n	800ae0c <HAL_RCC_OscConfig+0x79c>
 800ae3c:	e03d      	b.n	800aeba <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ae3e:	4b21      	ldr	r3, [pc, #132]	; (800aec4 <HAL_RCC_OscConfig+0x854>)
 800ae40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae42:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ae44:	4b1f      	ldr	r3, [pc, #124]	; (800aec4 <HAL_RCC_OscConfig+0x854>)
 800ae46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae48:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d031      	beq.n	800aeb6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	f003 0203 	and.w	r2, r3, #3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d12a      	bne.n	800aeb6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	091b      	lsrs	r3, r3, #4
 800ae64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d122      	bne.n	800aeb6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d11a      	bne.n	800aeb6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	0a5b      	lsrs	r3, r3, #9
 800ae84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae8c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d111      	bne.n	800aeb6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	0c1b      	lsrs	r3, r3, #16
 800ae96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d108      	bne.n	800aeb6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	0e1b      	lsrs	r3, r3, #24
 800aea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d001      	beq.n	800aeba <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e000      	b.n	800aebc <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3730      	adds	r7, #48	; 0x30
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	58024400 	.word	0x58024400

0800aec8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e19c      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aedc:	4b8a      	ldr	r3, [pc, #552]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 030f 	and.w	r3, r3, #15
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d910      	bls.n	800af0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeea:	4b87      	ldr	r3, [pc, #540]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f023 020f 	bic.w	r2, r3, #15
 800aef2:	4985      	ldr	r1, [pc, #532]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aefa:	4b83      	ldr	r3, [pc, #524]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 030f 	and.w	r3, r3, #15
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d001      	beq.n	800af0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e184      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b00      	cmp	r3, #0
 800af16:	d010      	beq.n	800af3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	691a      	ldr	r2, [r3, #16]
 800af1c:	4b7b      	ldr	r3, [pc, #492]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af24:	429a      	cmp	r2, r3
 800af26:	d908      	bls.n	800af3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af28:	4b78      	ldr	r3, [pc, #480]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	4975      	ldr	r1, [pc, #468]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af36:	4313      	orrs	r3, r2
 800af38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0308 	and.w	r3, r3, #8
 800af42:	2b00      	cmp	r3, #0
 800af44:	d010      	beq.n	800af68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	695a      	ldr	r2, [r3, #20]
 800af4a:	4b70      	ldr	r3, [pc, #448]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af52:	429a      	cmp	r2, r3
 800af54:	d908      	bls.n	800af68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af56:	4b6d      	ldr	r3, [pc, #436]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	496a      	ldr	r1, [pc, #424]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af64:	4313      	orrs	r3, r2
 800af66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0310 	and.w	r3, r3, #16
 800af70:	2b00      	cmp	r3, #0
 800af72:	d010      	beq.n	800af96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	699a      	ldr	r2, [r3, #24]
 800af78:	4b64      	ldr	r3, [pc, #400]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af7a:	69db      	ldr	r3, [r3, #28]
 800af7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af80:	429a      	cmp	r2, r3
 800af82:	d908      	bls.n	800af96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af84:	4b61      	ldr	r3, [pc, #388]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af86:	69db      	ldr	r3, [r3, #28]
 800af88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	495e      	ldr	r1, [pc, #376]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af92:	4313      	orrs	r3, r2
 800af94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 0320 	and.w	r3, r3, #32
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d010      	beq.n	800afc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	69da      	ldr	r2, [r3, #28]
 800afa6:	4b59      	ldr	r3, [pc, #356]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afae:	429a      	cmp	r2, r3
 800afb0:	d908      	bls.n	800afc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800afb2:	4b56      	ldr	r3, [pc, #344]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	4953      	ldr	r1, [pc, #332]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afc0:	4313      	orrs	r3, r2
 800afc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d010      	beq.n	800aff2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	4b4d      	ldr	r3, [pc, #308]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	f003 030f 	and.w	r3, r3, #15
 800afdc:	429a      	cmp	r2, r3
 800afde:	d908      	bls.n	800aff2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afe0:	4b4a      	ldr	r3, [pc, #296]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	f023 020f 	bic.w	r2, r3, #15
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	4947      	ldr	r1, [pc, #284]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d055      	beq.n	800b0aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800affe:	4b43      	ldr	r3, [pc, #268]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	4940      	ldr	r1, [pc, #256]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	2b02      	cmp	r3, #2
 800b016:	d107      	bne.n	800b028 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b018:	4b3c      	ldr	r3, [pc, #240]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d121      	bne.n	800b068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e0f6      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d107      	bne.n	800b040 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b030:	4b36      	ldr	r3, [pc, #216]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d115      	bne.n	800b068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e0ea      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d107      	bne.n	800b058 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b048:	4b30      	ldr	r3, [pc, #192]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b050:	2b00      	cmp	r3, #0
 800b052:	d109      	bne.n	800b068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e0de      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b058:	4b2c      	ldr	r3, [pc, #176]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0304 	and.w	r3, r3, #4
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e0d6      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b068:	4b28      	ldr	r3, [pc, #160]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	f023 0207 	bic.w	r2, r3, #7
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	4925      	ldr	r1, [pc, #148]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b076:	4313      	orrs	r3, r2
 800b078:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b07a:	f7fb ff4b 	bl	8006f14 <HAL_GetTick>
 800b07e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b080:	e00a      	b.n	800b098 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b082:	f7fb ff47 	bl	8006f14 <HAL_GetTick>
 800b086:	4602      	mov	r2, r0
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b090:	4293      	cmp	r3, r2
 800b092:	d901      	bls.n	800b098 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	e0be      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b098:	4b1c      	ldr	r3, [pc, #112]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d1eb      	bne.n	800b082 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d010      	beq.n	800b0d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68da      	ldr	r2, [r3, #12]
 800b0ba:	4b14      	ldr	r3, [pc, #80]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	f003 030f 	and.w	r3, r3, #15
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d208      	bcs.n	800b0d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0c6:	4b11      	ldr	r3, [pc, #68]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	f023 020f 	bic.w	r2, r3, #15
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	490e      	ldr	r1, [pc, #56]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b0d8:	4b0b      	ldr	r3, [pc, #44]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 030f 	and.w	r3, r3, #15
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d214      	bcs.n	800b110 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0e6:	4b08      	ldr	r3, [pc, #32]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f023 020f 	bic.w	r2, r3, #15
 800b0ee:	4906      	ldr	r1, [pc, #24]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0f6:	4b04      	ldr	r3, [pc, #16]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 030f 	and.w	r3, r3, #15
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d005      	beq.n	800b110 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e086      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
 800b108:	52002000 	.word	0x52002000
 800b10c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d010      	beq.n	800b13e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	691a      	ldr	r2, [r3, #16]
 800b120:	4b3f      	ldr	r3, [pc, #252]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b128:	429a      	cmp	r2, r3
 800b12a:	d208      	bcs.n	800b13e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b12c:	4b3c      	ldr	r3, [pc, #240]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	4939      	ldr	r1, [pc, #228]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b13a:	4313      	orrs	r3, r2
 800b13c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0308 	and.w	r3, r3, #8
 800b146:	2b00      	cmp	r3, #0
 800b148:	d010      	beq.n	800b16c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	695a      	ldr	r2, [r3, #20]
 800b14e:	4b34      	ldr	r3, [pc, #208]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b156:	429a      	cmp	r2, r3
 800b158:	d208      	bcs.n	800b16c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b15a:	4b31      	ldr	r3, [pc, #196]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	492e      	ldr	r1, [pc, #184]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b168:	4313      	orrs	r3, r2
 800b16a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0310 	and.w	r3, r3, #16
 800b174:	2b00      	cmp	r3, #0
 800b176:	d010      	beq.n	800b19a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	699a      	ldr	r2, [r3, #24]
 800b17c:	4b28      	ldr	r3, [pc, #160]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b17e:	69db      	ldr	r3, [r3, #28]
 800b180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b184:	429a      	cmp	r2, r3
 800b186:	d208      	bcs.n	800b19a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b188:	4b25      	ldr	r3, [pc, #148]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b18a:	69db      	ldr	r3, [r3, #28]
 800b18c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	4922      	ldr	r1, [pc, #136]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b196:	4313      	orrs	r3, r2
 800b198:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0320 	and.w	r3, r3, #32
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d010      	beq.n	800b1c8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	69da      	ldr	r2, [r3, #28]
 800b1aa:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d208      	bcs.n	800b1c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b1b6:	4b1a      	ldr	r3, [pc, #104]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	4917      	ldr	r1, [pc, #92]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b1c8:	f000 f834 	bl	800b234 <HAL_RCC_GetSysClockFreq>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	4b14      	ldr	r3, [pc, #80]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	0a1b      	lsrs	r3, r3, #8
 800b1d4:	f003 030f 	and.w	r3, r3, #15
 800b1d8:	4912      	ldr	r1, [pc, #72]	; (800b224 <HAL_RCC_ClockConfig+0x35c>)
 800b1da:	5ccb      	ldrb	r3, [r1, r3]
 800b1dc:	f003 031f 	and.w	r3, r3, #31
 800b1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1e6:	4b0e      	ldr	r3, [pc, #56]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	f003 030f 	and.w	r3, r3, #15
 800b1ee:	4a0d      	ldr	r2, [pc, #52]	; (800b224 <HAL_RCC_ClockConfig+0x35c>)
 800b1f0:	5cd3      	ldrb	r3, [r2, r3]
 800b1f2:	f003 031f 	and.w	r3, r3, #31
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1fc:	4a0a      	ldr	r2, [pc, #40]	; (800b228 <HAL_RCC_ClockConfig+0x360>)
 800b1fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b200:	4a0a      	ldr	r2, [pc, #40]	; (800b22c <HAL_RCC_ClockConfig+0x364>)
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b206:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <HAL_RCC_ClockConfig+0x368>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fb fe38 	bl	8006e80 <HAL_InitTick>
 800b210:	4603      	mov	r3, r0
 800b212:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b214:	7bfb      	ldrb	r3, [r7, #15]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	58024400 	.word	0x58024400
 800b224:	0801513c 	.word	0x0801513c
 800b228:	24000234 	.word	0x24000234
 800b22c:	24000230 	.word	0x24000230
 800b230:	24000238 	.word	0x24000238

0800b234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b234:	b480      	push	{r7}
 800b236:	b089      	sub	sp, #36	; 0x24
 800b238:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b23a:	4bb3      	ldr	r3, [pc, #716]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b242:	2b18      	cmp	r3, #24
 800b244:	f200 8155 	bhi.w	800b4f2 <HAL_RCC_GetSysClockFreq+0x2be>
 800b248:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24e:	bf00      	nop
 800b250:	0800b2b5 	.word	0x0800b2b5
 800b254:	0800b4f3 	.word	0x0800b4f3
 800b258:	0800b4f3 	.word	0x0800b4f3
 800b25c:	0800b4f3 	.word	0x0800b4f3
 800b260:	0800b4f3 	.word	0x0800b4f3
 800b264:	0800b4f3 	.word	0x0800b4f3
 800b268:	0800b4f3 	.word	0x0800b4f3
 800b26c:	0800b4f3 	.word	0x0800b4f3
 800b270:	0800b2db 	.word	0x0800b2db
 800b274:	0800b4f3 	.word	0x0800b4f3
 800b278:	0800b4f3 	.word	0x0800b4f3
 800b27c:	0800b4f3 	.word	0x0800b4f3
 800b280:	0800b4f3 	.word	0x0800b4f3
 800b284:	0800b4f3 	.word	0x0800b4f3
 800b288:	0800b4f3 	.word	0x0800b4f3
 800b28c:	0800b4f3 	.word	0x0800b4f3
 800b290:	0800b2e1 	.word	0x0800b2e1
 800b294:	0800b4f3 	.word	0x0800b4f3
 800b298:	0800b4f3 	.word	0x0800b4f3
 800b29c:	0800b4f3 	.word	0x0800b4f3
 800b2a0:	0800b4f3 	.word	0x0800b4f3
 800b2a4:	0800b4f3 	.word	0x0800b4f3
 800b2a8:	0800b4f3 	.word	0x0800b4f3
 800b2ac:	0800b4f3 	.word	0x0800b4f3
 800b2b0:	0800b2e7 	.word	0x0800b2e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2b4:	4b94      	ldr	r3, [pc, #592]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0320 	and.w	r3, r3, #32
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d009      	beq.n	800b2d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2c0:	4b91      	ldr	r3, [pc, #580]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	08db      	lsrs	r3, r3, #3
 800b2c6:	f003 0303 	and.w	r3, r3, #3
 800b2ca:	4a90      	ldr	r2, [pc, #576]	; (800b50c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b2d2:	e111      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b2d4:	4b8d      	ldr	r3, [pc, #564]	; (800b50c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2d6:	61bb      	str	r3, [r7, #24]
    break;
 800b2d8:	e10e      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b2da:	4b8d      	ldr	r3, [pc, #564]	; (800b510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b2dc:	61bb      	str	r3, [r7, #24]
    break;
 800b2de:	e10b      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b2e0:	4b8c      	ldr	r3, [pc, #560]	; (800b514 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b2e2:	61bb      	str	r3, [r7, #24]
    break;
 800b2e4:	e108      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2e6:	4b88      	ldr	r3, [pc, #544]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ea:	f003 0303 	and.w	r3, r3, #3
 800b2ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b2f0:	4b85      	ldr	r3, [pc, #532]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f4:	091b      	lsrs	r3, r3, #4
 800b2f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b2fc:	4b82      	ldr	r3, [pc, #520]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b306:	4b80      	ldr	r3, [pc, #512]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30a:	08db      	lsrs	r3, r3, #3
 800b30c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	fb02 f303 	mul.w	r3, r2, r3
 800b316:	ee07 3a90 	vmov	s15, r3
 800b31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	f000 80e1 	beq.w	800b4ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	f000 8083 	beq.w	800b438 <HAL_RCC_GetSysClockFreq+0x204>
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b02      	cmp	r3, #2
 800b336:	f200 80a1 	bhi.w	800b47c <HAL_RCC_GetSysClockFreq+0x248>
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <HAL_RCC_GetSysClockFreq+0x114>
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d056      	beq.n	800b3f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b346:	e099      	b.n	800b47c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b348:	4b6f      	ldr	r3, [pc, #444]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 0320 	and.w	r3, r3, #32
 800b350:	2b00      	cmp	r3, #0
 800b352:	d02d      	beq.n	800b3b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b354:	4b6c      	ldr	r3, [pc, #432]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	08db      	lsrs	r3, r3, #3
 800b35a:	f003 0303 	and.w	r3, r3, #3
 800b35e:	4a6b      	ldr	r2, [pc, #428]	; (800b50c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b360:	fa22 f303 	lsr.w	r3, r2, r3
 800b364:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	ee07 3a90 	vmov	s15, r3
 800b36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b37e:	4b62      	ldr	r3, [pc, #392]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b386:	ee07 3a90 	vmov	s15, r3
 800b38a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b38e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b392:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b39a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b39e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b3ae:	e087      	b.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	ee07 3a90 	vmov	s15, r3
 800b3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b51c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c2:	4b51      	ldr	r3, [pc, #324]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3f2:	e065      	b.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b520 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b406:	4b40      	ldr	r3, [pc, #256]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b416:	ed97 6a02 	vldr	s12, [r7, #8]
 800b41a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b436:	e043      	b.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	ee07 3a90 	vmov	s15, r3
 800b43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b442:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b524 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44a:	4b2f      	ldr	r3, [pc, #188]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b45e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b47a:	e021      	b.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b486:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b520 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48e:	4b1e      	ldr	r3, [pc, #120]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b496:	ee07 3a90 	vmov	s15, r3
 800b49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b4c0:	4b11      	ldr	r3, [pc, #68]	; (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c4:	0a5b      	lsrs	r3, r3, #9
 800b4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	ee07 3a90 	vmov	s15, r3
 800b4d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b4d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4e4:	ee17 3a90 	vmov	r3, s15
 800b4e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b4ea:	e005      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	61bb      	str	r3, [r7, #24]
    break;
 800b4f0:	e002      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b4f2:	4b07      	ldr	r3, [pc, #28]	; (800b510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b4f4:	61bb      	str	r3, [r7, #24]
    break;
 800b4f6:	bf00      	nop
  }

  return sysclockfreq;
 800b4f8:	69bb      	ldr	r3, [r7, #24]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3724      	adds	r7, #36	; 0x24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	58024400 	.word	0x58024400
 800b50c:	03d09000 	.word	0x03d09000
 800b510:	003d0900 	.word	0x003d0900
 800b514:	02dc6c00 	.word	0x02dc6c00
 800b518:	46000000 	.word	0x46000000
 800b51c:	4c742400 	.word	0x4c742400
 800b520:	4a742400 	.word	0x4a742400
 800b524:	4c371b00 	.word	0x4c371b00

0800b528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b52e:	f7ff fe81 	bl	800b234 <HAL_RCC_GetSysClockFreq>
 800b532:	4602      	mov	r2, r0
 800b534:	4b10      	ldr	r3, [pc, #64]	; (800b578 <HAL_RCC_GetHCLKFreq+0x50>)
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	0a1b      	lsrs	r3, r3, #8
 800b53a:	f003 030f 	and.w	r3, r3, #15
 800b53e:	490f      	ldr	r1, [pc, #60]	; (800b57c <HAL_RCC_GetHCLKFreq+0x54>)
 800b540:	5ccb      	ldrb	r3, [r1, r3]
 800b542:	f003 031f 	and.w	r3, r3, #31
 800b546:	fa22 f303 	lsr.w	r3, r2, r3
 800b54a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b54c:	4b0a      	ldr	r3, [pc, #40]	; (800b578 <HAL_RCC_GetHCLKFreq+0x50>)
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	f003 030f 	and.w	r3, r3, #15
 800b554:	4a09      	ldr	r2, [pc, #36]	; (800b57c <HAL_RCC_GetHCLKFreq+0x54>)
 800b556:	5cd3      	ldrb	r3, [r2, r3]
 800b558:	f003 031f 	and.w	r3, r3, #31
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	fa22 f303 	lsr.w	r3, r2, r3
 800b562:	4a07      	ldr	r2, [pc, #28]	; (800b580 <HAL_RCC_GetHCLKFreq+0x58>)
 800b564:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b566:	4a07      	ldr	r2, [pc, #28]	; (800b584 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b56c:	4b04      	ldr	r3, [pc, #16]	; (800b580 <HAL_RCC_GetHCLKFreq+0x58>)
 800b56e:	681b      	ldr	r3, [r3, #0]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	58024400 	.word	0x58024400
 800b57c:	0801513c 	.word	0x0801513c
 800b580:	24000234 	.word	0x24000234
 800b584:	24000230 	.word	0x24000230

0800b588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b58c:	f7ff ffcc 	bl	800b528 <HAL_RCC_GetHCLKFreq>
 800b590:	4602      	mov	r2, r0
 800b592:	4b06      	ldr	r3, [pc, #24]	; (800b5ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	091b      	lsrs	r3, r3, #4
 800b598:	f003 0307 	and.w	r3, r3, #7
 800b59c:	4904      	ldr	r1, [pc, #16]	; (800b5b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b59e:	5ccb      	ldrb	r3, [r1, r3]
 800b5a0:	f003 031f 	and.w	r3, r3, #31
 800b5a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	58024400 	.word	0x58024400
 800b5b0:	0801513c 	.word	0x0801513c

0800b5b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b5b8:	f7ff ffb6 	bl	800b528 <HAL_RCC_GetHCLKFreq>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5c0:	69db      	ldr	r3, [r3, #28]
 800b5c2:	0a1b      	lsrs	r3, r3, #8
 800b5c4:	f003 0307 	and.w	r3, r3, #7
 800b5c8:	4904      	ldr	r1, [pc, #16]	; (800b5dc <HAL_RCC_GetPCLK2Freq+0x28>)
 800b5ca:	5ccb      	ldrb	r3, [r1, r3]
 800b5cc:	f003 031f 	and.w	r3, r3, #31
 800b5d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	58024400 	.word	0x58024400
 800b5dc:	0801513c 	.word	0x0801513c

0800b5e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d03f      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b604:	d02a      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b606:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b60a:	d824      	bhi.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b60c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b610:	d018      	beq.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b616:	d81e      	bhi.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d003      	beq.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b61c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b620:	d007      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b622:	e018      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b624:	4bab      	ldr	r3, [pc, #684]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b628:	4aaa      	ldr	r2, [pc, #680]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b62a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b62e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b630:	e015      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3304      	adds	r3, #4
 800b636:	2102      	movs	r1, #2
 800b638:	4618      	mov	r0, r3
 800b63a:	f001 f9cf 	bl	800c9dc <RCCEx_PLL2_Config>
 800b63e:	4603      	mov	r3, r0
 800b640:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b642:	e00c      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3324      	adds	r3, #36	; 0x24
 800b648:	2102      	movs	r1, #2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f001 fa78 	bl	800cb40 <RCCEx_PLL3_Config>
 800b650:	4603      	mov	r3, r0
 800b652:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b654:	e003      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	75fb      	strb	r3, [r7, #23]
      break;
 800b65a:	e000      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b65c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b65e:	7dfb      	ldrb	r3, [r7, #23]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d109      	bne.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b664:	4b9b      	ldr	r3, [pc, #620]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b670:	4998      	ldr	r1, [pc, #608]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b672:	4313      	orrs	r3, r2
 800b674:	650b      	str	r3, [r1, #80]	; 0x50
 800b676:	e001      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b678:	7dfb      	ldrb	r3, [r7, #23]
 800b67a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b684:	2b00      	cmp	r3, #0
 800b686:	d03d      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68c:	2b04      	cmp	r3, #4
 800b68e:	d826      	bhi.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b690:	a201      	add	r2, pc, #4	; (adr r2, 800b698 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b696:	bf00      	nop
 800b698:	0800b6ad 	.word	0x0800b6ad
 800b69c:	0800b6bb 	.word	0x0800b6bb
 800b6a0:	0800b6cd 	.word	0x0800b6cd
 800b6a4:	0800b6e5 	.word	0x0800b6e5
 800b6a8:	0800b6e5 	.word	0x0800b6e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6ac:	4b89      	ldr	r3, [pc, #548]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b0:	4a88      	ldr	r2, [pc, #544]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b6b8:	e015      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3304      	adds	r3, #4
 800b6be:	2100      	movs	r1, #0
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f001 f98b 	bl	800c9dc <RCCEx_PLL2_Config>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b6ca:	e00c      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	3324      	adds	r3, #36	; 0x24
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 fa34 	bl	800cb40 <RCCEx_PLL3_Config>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b6dc:	e003      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b6e2:	e000      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b6e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6e6:	7dfb      	ldrb	r3, [r7, #23]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d109      	bne.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6ec:	4b79      	ldr	r3, [pc, #484]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6f0:	f023 0207 	bic.w	r2, r3, #7
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f8:	4976      	ldr	r1, [pc, #472]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	650b      	str	r3, [r1, #80]	; 0x50
 800b6fe:	e001      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d042      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b718:	d02b      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b71a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b71e:	d825      	bhi.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b720:	2bc0      	cmp	r3, #192	; 0xc0
 800b722:	d028      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b724:	2bc0      	cmp	r3, #192	; 0xc0
 800b726:	d821      	bhi.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b728:	2b80      	cmp	r3, #128	; 0x80
 800b72a:	d016      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b72c:	2b80      	cmp	r3, #128	; 0x80
 800b72e:	d81d      	bhi.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b734:	2b40      	cmp	r3, #64	; 0x40
 800b736:	d007      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b738:	e018      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b73a:	4b66      	ldr	r3, [pc, #408]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73e:	4a65      	ldr	r2, [pc, #404]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b744:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b746:	e017      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3304      	adds	r3, #4
 800b74c:	2100      	movs	r1, #0
 800b74e:	4618      	mov	r0, r3
 800b750:	f001 f944 	bl	800c9dc <RCCEx_PLL2_Config>
 800b754:	4603      	mov	r3, r0
 800b756:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b758:	e00e      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3324      	adds	r3, #36	; 0x24
 800b75e:	2100      	movs	r1, #0
 800b760:	4618      	mov	r0, r3
 800b762:	f001 f9ed 	bl	800cb40 <RCCEx_PLL3_Config>
 800b766:	4603      	mov	r3, r0
 800b768:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b76a:	e005      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	75fb      	strb	r3, [r7, #23]
      break;
 800b770:	e002      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b772:	bf00      	nop
 800b774:	e000      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b776:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d109      	bne.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b77e:	4b55      	ldr	r3, [pc, #340]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b782:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b78a:	4952      	ldr	r1, [pc, #328]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b78c:	4313      	orrs	r3, r2
 800b78e:	650b      	str	r3, [r1, #80]	; 0x50
 800b790:	e001      	b.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d049      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b7a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b7ac:	d030      	beq.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b7ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b7b2:	d82a      	bhi.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b7b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b7b8:	d02c      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b7ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b7be:	d824      	bhi.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b7c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7c4:	d018      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b7c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7ca:	d81e      	bhi.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b7d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7d4:	d007      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b7d6:	e018      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d8:	4b3e      	ldr	r3, [pc, #248]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	4a3d      	ldr	r2, [pc, #244]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b7e4:	e017      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f001 f8f5 	bl	800c9dc <RCCEx_PLL2_Config>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b7f6:	e00e      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3324      	adds	r3, #36	; 0x24
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	4618      	mov	r0, r3
 800b800:	f001 f99e 	bl	800cb40 <RCCEx_PLL3_Config>
 800b804:	4603      	mov	r3, r0
 800b806:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b808:	e005      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	75fb      	strb	r3, [r7, #23]
      break;
 800b80e:	e002      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b810:	bf00      	nop
 800b812:	e000      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b814:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b816:	7dfb      	ldrb	r3, [r7, #23]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10a      	bne.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b81c:	4b2d      	ldr	r3, [pc, #180]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b81e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b820:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b82a:	492a      	ldr	r1, [pc, #168]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b82c:	4313      	orrs	r3, r2
 800b82e:	658b      	str	r3, [r1, #88]	; 0x58
 800b830:	e001      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b832:	7dfb      	ldrb	r3, [r7, #23]
 800b834:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d04c      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b84c:	d030      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b84e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b852:	d82a      	bhi.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b854:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b858:	d02c      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800b85a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b85e:	d824      	bhi.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b864:	d018      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b86a:	d81e      	bhi.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d003      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b874:	d007      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b876:	e018      	b.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b878:	4b16      	ldr	r3, [pc, #88]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87c:	4a15      	ldr	r2, [pc, #84]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b87e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b884:	e017      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3304      	adds	r3, #4
 800b88a:	2100      	movs	r1, #0
 800b88c:	4618      	mov	r0, r3
 800b88e:	f001 f8a5 	bl	800c9dc <RCCEx_PLL2_Config>
 800b892:	4603      	mov	r3, r0
 800b894:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b896:	e00e      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3324      	adds	r3, #36	; 0x24
 800b89c:	2100      	movs	r1, #0
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f001 f94e 	bl	800cb40 <RCCEx_PLL3_Config>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b8a8:	e005      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b8ae:	e002      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b8b0:	bf00      	nop
 800b8b2:	e000      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b8b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10d      	bne.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b8bc:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b8ca:	4902      	ldr	r1, [pc, #8]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	658b      	str	r3, [r1, #88]	; 0x58
 800b8d0:	e004      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b8d2:	bf00      	nop
 800b8d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
 800b8da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d032      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ec:	2b30      	cmp	r3, #48	; 0x30
 800b8ee:	d01c      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b8f0:	2b30      	cmp	r3, #48	; 0x30
 800b8f2:	d817      	bhi.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b8f4:	2b20      	cmp	r3, #32
 800b8f6:	d00c      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b8f8:	2b20      	cmp	r3, #32
 800b8fa:	d813      	bhi.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d016      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b900:	2b10      	cmp	r3, #16
 800b902:	d10f      	bne.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b904:	4baf      	ldr	r3, [pc, #700]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b908:	4aae      	ldr	r2, [pc, #696]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b90a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b90e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b910:	e00e      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	3304      	adds	r3, #4
 800b916:	2102      	movs	r1, #2
 800b918:	4618      	mov	r0, r3
 800b91a:	f001 f85f 	bl	800c9dc <RCCEx_PLL2_Config>
 800b91e:	4603      	mov	r3, r0
 800b920:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b922:	e005      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	75fb      	strb	r3, [r7, #23]
      break;
 800b928:	e002      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b92a:	bf00      	nop
 800b92c:	e000      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b92e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b930:	7dfb      	ldrb	r3, [r7, #23]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d109      	bne.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b936:	4ba3      	ldr	r3, [pc, #652]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b93a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b942:	49a0      	ldr	r1, [pc, #640]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b944:	4313      	orrs	r3, r2
 800b946:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b948:	e001      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
 800b94c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d047      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b95e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b962:	d030      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b968:	d82a      	bhi.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b96a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b96e:	d02c      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b974:	d824      	bhi.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b97a:	d018      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b97c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b980:	d81e      	bhi.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b982:	2b00      	cmp	r3, #0
 800b984:	d003      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b98a:	d007      	beq.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b98c:	e018      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b98e:	4b8d      	ldr	r3, [pc, #564]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b992:	4a8c      	ldr	r2, [pc, #560]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b998:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b99a:	e017      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f001 f81a 	bl	800c9dc <RCCEx_PLL2_Config>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b9ac:	e00e      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	3324      	adds	r3, #36	; 0x24
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 f8c3 	bl	800cb40 <RCCEx_PLL3_Config>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b9be:	e005      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c4:	e002      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b9c6:	bf00      	nop
 800b9c8:	e000      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b9ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9cc:	7dfb      	ldrb	r3, [r7, #23]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d109      	bne.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b9d2:	4b7c      	ldr	r3, [pc, #496]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9de:	4979      	ldr	r1, [pc, #484]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	650b      	str	r3, [r1, #80]	; 0x50
 800b9e4:	e001      	b.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
 800b9e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d049      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9fe:	d02e      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800ba00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba04:	d828      	bhi.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ba06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba0a:	d02a      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800ba0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba10:	d822      	bhi.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ba12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba16:	d026      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800ba18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba1c:	d81c      	bhi.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ba1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba22:	d010      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800ba24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba28:	d816      	bhi.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d01d      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800ba2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba32:	d111      	bne.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3304      	adds	r3, #4
 800ba38:	2101      	movs	r1, #1
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 ffce 	bl	800c9dc <RCCEx_PLL2_Config>
 800ba40:	4603      	mov	r3, r0
 800ba42:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ba44:	e012      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3324      	adds	r3, #36	; 0x24
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f001 f877 	bl	800cb40 <RCCEx_PLL3_Config>
 800ba52:	4603      	mov	r3, r0
 800ba54:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ba56:	e009      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba5c:	e006      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ba5e:	bf00      	nop
 800ba60:	e004      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ba62:	bf00      	nop
 800ba64:	e002      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ba66:	bf00      	nop
 800ba68:	e000      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ba6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d109      	bne.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ba72:	4b54      	ldr	r3, [pc, #336]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ba74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba76:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba7e:	4951      	ldr	r1, [pc, #324]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ba80:	4313      	orrs	r3, r2
 800ba82:	650b      	str	r3, [r1, #80]	; 0x50
 800ba84:	e001      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba86:	7dfb      	ldrb	r3, [r7, #23]
 800ba88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d04b      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ba9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800baa0:	d02e      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800baa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800baa6:	d828      	bhi.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800baa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baac:	d02a      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800baae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bab2:	d822      	bhi.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bab4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bab8:	d026      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800baba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800babe:	d81c      	bhi.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bac4:	d010      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800bac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baca:	d816      	bhi.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01d      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800bad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bad4:	d111      	bne.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	3304      	adds	r3, #4
 800bada:	2101      	movs	r1, #1
 800badc:	4618      	mov	r0, r3
 800bade:	f000 ff7d 	bl	800c9dc <RCCEx_PLL2_Config>
 800bae2:	4603      	mov	r3, r0
 800bae4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bae6:	e012      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	3324      	adds	r3, #36	; 0x24
 800baec:	2101      	movs	r1, #1
 800baee:	4618      	mov	r0, r3
 800baf0:	f001 f826 	bl	800cb40 <RCCEx_PLL3_Config>
 800baf4:	4603      	mov	r3, r0
 800baf6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800baf8:	e009      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	75fb      	strb	r3, [r7, #23]
      break;
 800bafe:	e006      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bb00:	bf00      	nop
 800bb02:	e004      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bb04:	bf00      	nop
 800bb06:	e002      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bb08:	bf00      	nop
 800bb0a:	e000      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bb0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb0e:	7dfb      	ldrb	r3, [r7, #23]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10a      	bne.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bb14:	4b2b      	ldr	r3, [pc, #172]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb18:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bb22:	4928      	ldr	r1, [pc, #160]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb24:	4313      	orrs	r3, r2
 800bb26:	658b      	str	r3, [r1, #88]	; 0x58
 800bb28:	e001      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d02f      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb42:	d00e      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bb44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb48:	d814      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d015      	beq.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800bb4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb52:	d10f      	bne.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb54:	4b1b      	ldr	r3, [pc, #108]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb58:	4a1a      	ldr	r2, [pc, #104]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bb60:	e00c      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3304      	adds	r3, #4
 800bb66:	2101      	movs	r1, #1
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 ff37 	bl	800c9dc <RCCEx_PLL2_Config>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bb72:	e003      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	75fb      	strb	r3, [r7, #23]
      break;
 800bb78:	e000      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800bb7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d109      	bne.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb82:	4b10      	ldr	r3, [pc, #64]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb8e:	490d      	ldr	r1, [pc, #52]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb90:	4313      	orrs	r3, r2
 800bb92:	650b      	str	r3, [r1, #80]	; 0x50
 800bb94:	e001      	b.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb96:	7dfb      	ldrb	r3, [r7, #23]
 800bb98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d033      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d81c      	bhi.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800bbae:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800bbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb4:	0800bbef 	.word	0x0800bbef
 800bbb8:	0800bbc9 	.word	0x0800bbc9
 800bbbc:	0800bbd7 	.word	0x0800bbd7
 800bbc0:	0800bbef 	.word	0x0800bbef
 800bbc4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbc8:	4bb8      	ldr	r3, [pc, #736]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	4ab7      	ldr	r2, [pc, #732]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bbd4:	e00c      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	3304      	adds	r3, #4
 800bbda:	2102      	movs	r1, #2
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f000 fefd 	bl	800c9dc <RCCEx_PLL2_Config>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bbe6:	e003      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	75fb      	strb	r3, [r7, #23]
      break;
 800bbec:	e000      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bbee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d109      	bne.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bbf6:	4bad      	ldr	r3, [pc, #692]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbfa:	f023 0203 	bic.w	r2, r3, #3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc02:	49aa      	ldr	r1, [pc, #680]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bc08:	e001      	b.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0a:	7dfb      	ldrb	r3, [r7, #23]
 800bc0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f000 8086 	beq.w	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc1c:	4ba4      	ldr	r3, [pc, #656]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4aa3      	ldr	r2, [pc, #652]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bc22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc28:	f7fb f974 	bl	8006f14 <HAL_GetTick>
 800bc2c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc2e:	e009      	b.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc30:	f7fb f970 	bl	8006f14 <HAL_GetTick>
 800bc34:	4602      	mov	r2, r0
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	2b64      	cmp	r3, #100	; 0x64
 800bc3c:	d902      	bls.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	75fb      	strb	r3, [r7, #23]
        break;
 800bc42:	e005      	b.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc44:	4b9a      	ldr	r3, [pc, #616]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d0ef      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d166      	bne.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bc56:	4b95      	ldr	r3, [pc, #596]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc60:	4053      	eors	r3, r2
 800bc62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d013      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc6a:	4b90      	ldr	r3, [pc, #576]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc74:	4b8d      	ldr	r3, [pc, #564]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc78:	4a8c      	ldr	r2, [pc, #560]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc80:	4b8a      	ldr	r3, [pc, #552]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc84:	4a89      	ldr	r2, [pc, #548]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bc8c:	4a87      	ldr	r2, [pc, #540]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc9c:	d115      	bne.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc9e:	f7fb f939 	bl	8006f14 <HAL_GetTick>
 800bca2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bca4:	e00b      	b.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bca6:	f7fb f935 	bl	8006f14 <HAL_GetTick>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d902      	bls.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	75fb      	strb	r3, [r7, #23]
            break;
 800bcbc:	e005      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bcbe:	4b7b      	ldr	r3, [pc, #492]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bcc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcc2:	f003 0302 	and.w	r3, r3, #2
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d0ed      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d126      	bne.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bcd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcde:	d10d      	bne.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800bce0:	4b72      	ldr	r3, [pc, #456]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bcee:	0919      	lsrs	r1, r3, #4
 800bcf0:	4b70      	ldr	r3, [pc, #448]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800bcf2:	400b      	ands	r3, r1
 800bcf4:	496d      	ldr	r1, [pc, #436]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	610b      	str	r3, [r1, #16]
 800bcfa:	e005      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800bcfc:	4b6b      	ldr	r3, [pc, #428]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	4a6a      	ldr	r2, [pc, #424]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bd02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bd06:	6113      	str	r3, [r2, #16]
 800bd08:	4b68      	ldr	r3, [pc, #416]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bd0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd16:	4965      	ldr	r1, [pc, #404]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	670b      	str	r3, [r1, #112]	; 0x70
 800bd1c:	e004      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
 800bd20:	75bb      	strb	r3, [r7, #22]
 800bd22:	e001      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd24:	7dfb      	ldrb	r3, [r7, #23]
 800bd26:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 0301 	and.w	r3, r3, #1
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d07e      	beq.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd38:	2b28      	cmp	r3, #40	; 0x28
 800bd3a:	d867      	bhi.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800bd3c:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800bd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd42:	bf00      	nop
 800bd44:	0800be13 	.word	0x0800be13
 800bd48:	0800be0d 	.word	0x0800be0d
 800bd4c:	0800be0d 	.word	0x0800be0d
 800bd50:	0800be0d 	.word	0x0800be0d
 800bd54:	0800be0d 	.word	0x0800be0d
 800bd58:	0800be0d 	.word	0x0800be0d
 800bd5c:	0800be0d 	.word	0x0800be0d
 800bd60:	0800be0d 	.word	0x0800be0d
 800bd64:	0800bde9 	.word	0x0800bde9
 800bd68:	0800be0d 	.word	0x0800be0d
 800bd6c:	0800be0d 	.word	0x0800be0d
 800bd70:	0800be0d 	.word	0x0800be0d
 800bd74:	0800be0d 	.word	0x0800be0d
 800bd78:	0800be0d 	.word	0x0800be0d
 800bd7c:	0800be0d 	.word	0x0800be0d
 800bd80:	0800be0d 	.word	0x0800be0d
 800bd84:	0800bdfb 	.word	0x0800bdfb
 800bd88:	0800be0d 	.word	0x0800be0d
 800bd8c:	0800be0d 	.word	0x0800be0d
 800bd90:	0800be0d 	.word	0x0800be0d
 800bd94:	0800be0d 	.word	0x0800be0d
 800bd98:	0800be0d 	.word	0x0800be0d
 800bd9c:	0800be0d 	.word	0x0800be0d
 800bda0:	0800be0d 	.word	0x0800be0d
 800bda4:	0800be13 	.word	0x0800be13
 800bda8:	0800be0d 	.word	0x0800be0d
 800bdac:	0800be0d 	.word	0x0800be0d
 800bdb0:	0800be0d 	.word	0x0800be0d
 800bdb4:	0800be0d 	.word	0x0800be0d
 800bdb8:	0800be0d 	.word	0x0800be0d
 800bdbc:	0800be0d 	.word	0x0800be0d
 800bdc0:	0800be0d 	.word	0x0800be0d
 800bdc4:	0800be13 	.word	0x0800be13
 800bdc8:	0800be0d 	.word	0x0800be0d
 800bdcc:	0800be0d 	.word	0x0800be0d
 800bdd0:	0800be0d 	.word	0x0800be0d
 800bdd4:	0800be0d 	.word	0x0800be0d
 800bdd8:	0800be0d 	.word	0x0800be0d
 800bddc:	0800be0d 	.word	0x0800be0d
 800bde0:	0800be0d 	.word	0x0800be0d
 800bde4:	0800be13 	.word	0x0800be13
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	3304      	adds	r3, #4
 800bdec:	2101      	movs	r1, #1
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 fdf4 	bl	800c9dc <RCCEx_PLL2_Config>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bdf8:	e00c      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	3324      	adds	r3, #36	; 0x24
 800bdfe:	2101      	movs	r1, #1
 800be00:	4618      	mov	r0, r3
 800be02:	f000 fe9d 	bl	800cb40 <RCCEx_PLL3_Config>
 800be06:	4603      	mov	r3, r0
 800be08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800be0a:	e003      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	75fb      	strb	r3, [r7, #23]
      break;
 800be10:	e000      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800be12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be14:	7dfb      	ldrb	r3, [r7, #23]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d109      	bne.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800be1a:	4b24      	ldr	r3, [pc, #144]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be26:	4921      	ldr	r1, [pc, #132]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be28:	4313      	orrs	r3, r2
 800be2a:	654b      	str	r3, [r1, #84]	; 0x54
 800be2c:	e001      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
 800be30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 0302 	and.w	r3, r3, #2
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d03e      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be42:	2b05      	cmp	r3, #5
 800be44:	d820      	bhi.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800be46:	a201      	add	r2, pc, #4	; (adr r2, 800be4c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800be48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4c:	0800be8f 	.word	0x0800be8f
 800be50:	0800be65 	.word	0x0800be65
 800be54:	0800be77 	.word	0x0800be77
 800be58:	0800be8f 	.word	0x0800be8f
 800be5c:	0800be8f 	.word	0x0800be8f
 800be60:	0800be8f 	.word	0x0800be8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	3304      	adds	r3, #4
 800be68:	2101      	movs	r1, #1
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 fdb6 	bl	800c9dc <RCCEx_PLL2_Config>
 800be70:	4603      	mov	r3, r0
 800be72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800be74:	e00c      	b.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	3324      	adds	r3, #36	; 0x24
 800be7a:	2101      	movs	r1, #1
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 fe5f 	bl	800cb40 <RCCEx_PLL3_Config>
 800be82:	4603      	mov	r3, r0
 800be84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800be86:	e003      	b.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	75fb      	strb	r3, [r7, #23]
      break;
 800be8c:	e000      	b.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800be8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be90:	7dfb      	ldrb	r3, [r7, #23]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d110      	bne.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800be96:	4b05      	ldr	r3, [pc, #20]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be9a:	f023 0207 	bic.w	r2, r3, #7
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bea2:	4902      	ldr	r1, [pc, #8]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bea4:	4313      	orrs	r3, r2
 800bea6:	654b      	str	r3, [r1, #84]	; 0x54
 800bea8:	e008      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800beaa:	bf00      	nop
 800beac:	58024400 	.word	0x58024400
 800beb0:	58024800 	.word	0x58024800
 800beb4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb8:	7dfb      	ldrb	r3, [r7, #23]
 800beba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 0304 	and.w	r3, r3, #4
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d039      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bece:	2b05      	cmp	r3, #5
 800bed0:	d820      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800bed2:	a201      	add	r2, pc, #4	; (adr r2, 800bed8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800bed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed8:	0800bf1b 	.word	0x0800bf1b
 800bedc:	0800bef1 	.word	0x0800bef1
 800bee0:	0800bf03 	.word	0x0800bf03
 800bee4:	0800bf1b 	.word	0x0800bf1b
 800bee8:	0800bf1b 	.word	0x0800bf1b
 800beec:	0800bf1b 	.word	0x0800bf1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3304      	adds	r3, #4
 800bef4:	2101      	movs	r1, #1
 800bef6:	4618      	mov	r0, r3
 800bef8:	f000 fd70 	bl	800c9dc <RCCEx_PLL2_Config>
 800befc:	4603      	mov	r3, r0
 800befe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bf00:	e00c      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	3324      	adds	r3, #36	; 0x24
 800bf06:	2101      	movs	r1, #1
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 fe19 	bl	800cb40 <RCCEx_PLL3_Config>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bf12:	e003      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	75fb      	strb	r3, [r7, #23]
      break;
 800bf18:	e000      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800bf1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10a      	bne.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf22:	4bb7      	ldr	r3, [pc, #732]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bf24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf26:	f023 0207 	bic.w	r2, r3, #7
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf30:	49b3      	ldr	r1, [pc, #716]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bf32:	4313      	orrs	r3, r2
 800bf34:	658b      	str	r3, [r1, #88]	; 0x58
 800bf36:	e001      	b.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0320 	and.w	r3, r3, #32
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d04b      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf52:	d02e      	beq.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800bf54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf58:	d828      	bhi.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bf5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf5e:	d02a      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bf60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf64:	d822      	bhi.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bf66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf6a:	d026      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800bf6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf70:	d81c      	bhi.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bf72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf76:	d010      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800bf78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf7c:	d816      	bhi.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d01d      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bf82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf86:	d111      	bne.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 fd24 	bl	800c9dc <RCCEx_PLL2_Config>
 800bf94:	4603      	mov	r3, r0
 800bf96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bf98:	e012      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	3324      	adds	r3, #36	; 0x24
 800bf9e:	2102      	movs	r1, #2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f000 fdcd 	bl	800cb40 <RCCEx_PLL3_Config>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bfaa:	e009      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	75fb      	strb	r3, [r7, #23]
      break;
 800bfb0:	e006      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bfb2:	bf00      	nop
 800bfb4:	e004      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bfb6:	bf00      	nop
 800bfb8:	e002      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bfba:	bf00      	nop
 800bfbc:	e000      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bfbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10a      	bne.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bfc6:	4b8e      	ldr	r3, [pc, #568]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfd4:	498a      	ldr	r1, [pc, #552]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	654b      	str	r3, [r1, #84]	; 0x54
 800bfda:	e001      	b.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfdc:	7dfb      	ldrb	r3, [r7, #23]
 800bfde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d04b      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bff2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bff6:	d02e      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800bff8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bffc:	d828      	bhi.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c002:	d02a      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c008:	d822      	bhi.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c00a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c00e:	d026      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c010:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c014:	d81c      	bhi.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c01a:	d010      	beq.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800c01c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c020:	d816      	bhi.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c022:	2b00      	cmp	r3, #0
 800c024:	d01d      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c02a:	d111      	bne.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3304      	adds	r3, #4
 800c030:	2100      	movs	r1, #0
 800c032:	4618      	mov	r0, r3
 800c034:	f000 fcd2 	bl	800c9dc <RCCEx_PLL2_Config>
 800c038:	4603      	mov	r3, r0
 800c03a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c03c:	e012      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3324      	adds	r3, #36	; 0x24
 800c042:	2102      	movs	r1, #2
 800c044:	4618      	mov	r0, r3
 800c046:	f000 fd7b 	bl	800cb40 <RCCEx_PLL3_Config>
 800c04a:	4603      	mov	r3, r0
 800c04c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c04e:	e009      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	75fb      	strb	r3, [r7, #23]
      break;
 800c054:	e006      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c056:	bf00      	nop
 800c058:	e004      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c05a:	bf00      	nop
 800c05c:	e002      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c05e:	bf00      	nop
 800c060:	e000      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c062:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c064:	7dfb      	ldrb	r3, [r7, #23]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10a      	bne.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c06a:	4b65      	ldr	r3, [pc, #404]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c06e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c078:	4961      	ldr	r1, [pc, #388]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c07a:	4313      	orrs	r3, r2
 800c07c:	658b      	str	r3, [r1, #88]	; 0x58
 800c07e:	e001      	b.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c080:	7dfb      	ldrb	r3, [r7, #23]
 800c082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d04b      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c096:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c09a:	d02e      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800c09c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c0a0:	d828      	bhi.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c0a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0a6:	d02a      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800c0a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0ac:	d822      	bhi.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c0ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c0b2:	d026      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c0b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c0b8:	d81c      	bhi.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c0ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0be:	d010      	beq.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800c0c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0c4:	d816      	bhi.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d01d      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c0ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0ce:	d111      	bne.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 fc80 	bl	800c9dc <RCCEx_PLL2_Config>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c0e0:	e012      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	3324      	adds	r3, #36	; 0x24
 800c0e6:	2102      	movs	r1, #2
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 fd29 	bl	800cb40 <RCCEx_PLL3_Config>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c0f2:	e009      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	75fb      	strb	r3, [r7, #23]
      break;
 800c0f8:	e006      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c0fa:	bf00      	nop
 800c0fc:	e004      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c0fe:	bf00      	nop
 800c100:	e002      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c102:	bf00      	nop
 800c104:	e000      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c106:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c108:	7dfb      	ldrb	r3, [r7, #23]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10a      	bne.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c10e:	4b3c      	ldr	r3, [pc, #240]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c11c:	4938      	ldr	r1, [pc, #224]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c11e:	4313      	orrs	r3, r2
 800c120:	658b      	str	r3, [r1, #88]	; 0x58
 800c122:	e001      	b.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c124:	7dfb      	ldrb	r3, [r7, #23]
 800c126:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0308 	and.w	r3, r3, #8
 800c130:	2b00      	cmp	r3, #0
 800c132:	d01a      	beq.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c13a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c13e:	d10a      	bne.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3324      	adds	r3, #36	; 0x24
 800c144:	2102      	movs	r1, #2
 800c146:	4618      	mov	r0, r3
 800c148:	f000 fcfa 	bl	800cb40 <RCCEx_PLL3_Config>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c156:	4b2a      	ldr	r3, [pc, #168]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c164:	4926      	ldr	r1, [pc, #152]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c166:	4313      	orrs	r3, r2
 800c168:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 0310 	and.w	r3, r3, #16
 800c172:	2b00      	cmp	r3, #0
 800c174:	d01a      	beq.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c17c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c180:	d10a      	bne.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	3324      	adds	r3, #36	; 0x24
 800c186:	2102      	movs	r1, #2
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 fcd9 	bl	800cb40 <RCCEx_PLL3_Config>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d001      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c198:	4b19      	ldr	r3, [pc, #100]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c19a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c19c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1a6:	4916      	ldr	r1, [pc, #88]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d036      	beq.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1c2:	d01f      	beq.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c1c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1c8:	d817      	bhi.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800c1ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1d2:	d009      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800c1d4:	e011      	b.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	3304      	adds	r3, #4
 800c1da:	2100      	movs	r1, #0
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f000 fbfd 	bl	800c9dc <RCCEx_PLL2_Config>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c1e6:	e00e      	b.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3324      	adds	r3, #36	; 0x24
 800c1ec:	2102      	movs	r1, #2
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 fca6 	bl	800cb40 <RCCEx_PLL3_Config>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c1f8:	e005      	b.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	75fb      	strb	r3, [r7, #23]
      break;
 800c1fe:	e002      	b.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800c200:	58024400 	.word	0x58024400
      break;
 800c204:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c206:	7dfb      	ldrb	r3, [r7, #23]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10a      	bne.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c20c:	4b93      	ldr	r3, [pc, #588]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c20e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c21a:	4990      	ldr	r1, [pc, #576]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c21c:	4313      	orrs	r3, r2
 800c21e:	658b      	str	r3, [r1, #88]	; 0x58
 800c220:	e001      	b.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d033      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c238:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c23c:	d01c      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800c23e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c242:	d816      	bhi.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800c244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c248:	d003      	beq.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800c24a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c24e:	d007      	beq.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800c250:	e00f      	b.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c252:	4b82      	ldr	r3, [pc, #520]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c256:	4a81      	ldr	r2, [pc, #516]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c25c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c25e:	e00c      	b.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3324      	adds	r3, #36	; 0x24
 800c264:	2101      	movs	r1, #1
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fc6a 	bl	800cb40 <RCCEx_PLL3_Config>
 800c26c:	4603      	mov	r3, r0
 800c26e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c270:	e003      	b.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	75fb      	strb	r3, [r7, #23]
      break;
 800c276:	e000      	b.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800c278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c27a:	7dfb      	ldrb	r3, [r7, #23]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10a      	bne.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c280:	4b76      	ldr	r3, [pc, #472]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c284:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c28e:	4973      	ldr	r1, [pc, #460]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c290:	4313      	orrs	r3, r2
 800c292:	654b      	str	r3, [r1, #84]	; 0x54
 800c294:	e001      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c296:	7dfb      	ldrb	r3, [r7, #23]
 800c298:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d029      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800c2ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2b2:	d007      	beq.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800c2b4:	e00f      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2b6:	4b69      	ldr	r3, [pc, #420]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ba:	4a68      	ldr	r2, [pc, #416]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c2c2:	e00b      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	2102      	movs	r1, #2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 fb86 	bl	800c9dc <RCCEx_PLL2_Config>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c2d4:	e002      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	75fb      	strb	r3, [r7, #23]
      break;
 800c2da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d109      	bne.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c2e2:	4b5e      	ldr	r3, [pc, #376]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ee:	495b      	ldr	r1, [pc, #364]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c2f4:	e001      	b.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
 800c2f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00a      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3324      	adds	r3, #36	; 0x24
 800c30a:	2102      	movs	r1, #2
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 fc17 	bl	800cb40 <RCCEx_PLL3_Config>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d001      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c324:	2b00      	cmp	r3, #0
 800c326:	d030      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c32c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c330:	d017      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800c332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c336:	d811      	bhi.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c33c:	d013      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c33e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c342:	d80b      	bhi.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c344:	2b00      	cmp	r3, #0
 800c346:	d010      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c34c:	d106      	bne.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c34e:	4b43      	ldr	r3, [pc, #268]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c352:	4a42      	ldr	r2, [pc, #264]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c358:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c35a:	e007      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	75fb      	strb	r3, [r7, #23]
      break;
 800c360:	e004      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c362:	bf00      	nop
 800c364:	e002      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c366:	bf00      	nop
 800c368:	e000      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c36a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c36c:	7dfb      	ldrb	r3, [r7, #23]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d109      	bne.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c372:	4b3a      	ldr	r3, [pc, #232]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c376:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c37e:	4937      	ldr	r1, [pc, #220]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c380:	4313      	orrs	r3, r2
 800c382:	654b      	str	r3, [r1, #84]	; 0x54
 800c384:	e001      	b.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c386:	7dfb      	ldrb	r3, [r7, #23]
 800c388:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d008      	beq.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c396:	4b31      	ldr	r3, [pc, #196]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c39a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3a2:	492e      	ldr	r1, [pc, #184]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d009      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c3b4:	4b29      	ldr	r3, [pc, #164]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c3c2:	4926      	ldr	r1, [pc, #152]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d008      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c3d4:	4b21      	ldr	r3, [pc, #132]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3e0:	491e      	ldr	r1, [pc, #120]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00d      	beq.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c3f2:	4b1a      	ldr	r3, [pc, #104]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	4a19      	ldr	r2, [pc, #100]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c3fc:	6113      	str	r3, [r2, #16]
 800c3fe:	4b17      	ldr	r3, [pc, #92]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c400:	691a      	ldr	r2, [r3, #16]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c408:	4914      	ldr	r1, [pc, #80]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	da08      	bge.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c416:	4b11      	ldr	r3, [pc, #68]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c41a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c422:	490e      	ldr	r1, [pc, #56]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c424:	4313      	orrs	r3, r2
 800c426:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c430:	2b00      	cmp	r3, #0
 800c432:	d009      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c434:	4b09      	ldr	r3, [pc, #36]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c438:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c442:	4906      	ldr	r1, [pc, #24]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c444:	4313      	orrs	r3, r2
 800c446:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c448:	7dbb      	ldrb	r3, [r7, #22]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	e000      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
}
 800c454:	4618      	mov	r0, r3
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	58024400 	.word	0x58024400

0800c460 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c464:	f7ff f860 	bl	800b528 <HAL_RCC_GetHCLKFreq>
 800c468:	4602      	mov	r2, r0
 800c46a:	4b06      	ldr	r3, [pc, #24]	; (800c484 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c46c:	6a1b      	ldr	r3, [r3, #32]
 800c46e:	091b      	lsrs	r3, r3, #4
 800c470:	f003 0307 	and.w	r3, r3, #7
 800c474:	4904      	ldr	r1, [pc, #16]	; (800c488 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c476:	5ccb      	ldrb	r3, [r1, r3]
 800c478:	f003 031f 	and.w	r3, r3, #31
 800c47c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c480:	4618      	mov	r0, r3
 800c482:	bd80      	pop	{r7, pc}
 800c484:	58024400 	.word	0x58024400
 800c488:	0801513c 	.word	0x0801513c

0800c48c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b089      	sub	sp, #36	; 0x24
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c494:	4ba1      	ldr	r3, [pc, #644]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c498:	f003 0303 	and.w	r3, r3, #3
 800c49c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c49e:	4b9f      	ldr	r3, [pc, #636]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a2:	0b1b      	lsrs	r3, r3, #12
 800c4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c4aa:	4b9c      	ldr	r3, [pc, #624]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ae:	091b      	lsrs	r3, r3, #4
 800c4b0:	f003 0301 	and.w	r3, r3, #1
 800c4b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c4b6:	4b99      	ldr	r3, [pc, #612]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ba:	08db      	lsrs	r3, r3, #3
 800c4bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	fb02 f303 	mul.w	r3, r2, r3
 800c4c6:	ee07 3a90 	vmov	s15, r3
 800c4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 8111 	beq.w	800c6fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	f000 8083 	beq.w	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	f200 80a1 	bhi.w	800c62c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d003      	beq.n	800c4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d056      	beq.n	800c5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c4f6:	e099      	b.n	800c62c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4f8:	4b88      	ldr	r3, [pc, #544]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 0320 	and.w	r3, r3, #32
 800c500:	2b00      	cmp	r3, #0
 800c502:	d02d      	beq.n	800c560 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c504:	4b85      	ldr	r3, [pc, #532]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	08db      	lsrs	r3, r3, #3
 800c50a:	f003 0303 	and.w	r3, r3, #3
 800c50e:	4a84      	ldr	r2, [pc, #528]	; (800c720 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c510:	fa22 f303 	lsr.w	r3, r2, r3
 800c514:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	ee07 3a90 	vmov	s15, r3
 800c51c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	ee07 3a90 	vmov	s15, r3
 800c526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c52e:	4b7b      	ldr	r3, [pc, #492]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c536:	ee07 3a90 	vmov	s15, r3
 800c53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c53e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c542:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c54e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c55a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c55e:	e087      	b.n	800c670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	ee07 3a90 	vmov	s15, r3
 800c566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c56a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c728 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c572:	4b6a      	ldr	r3, [pc, #424]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c57a:	ee07 3a90 	vmov	s15, r3
 800c57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c582:	ed97 6a03 	vldr	s12, [r7, #12]
 800c586:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c59e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5a2:	e065      	b.n	800c670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	ee07 3a90 	vmov	s15, r3
 800c5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c72c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c5b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5b6:	4b59      	ldr	r3, [pc, #356]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5be:	ee07 3a90 	vmov	s15, r3
 800c5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5e6:	e043      	b.n	800c670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	ee07 3a90 	vmov	s15, r3
 800c5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c730 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5fa:	4b48      	ldr	r3, [pc, #288]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c602:	ee07 3a90 	vmov	s15, r3
 800c606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c60a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c60e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c62a:	e021      	b.n	800c670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	ee07 3a90 	vmov	s15, r3
 800c632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c636:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c72c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c63e:	4b37      	ldr	r3, [pc, #220]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c646:	ee07 3a90 	vmov	s15, r3
 800c64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c652:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c66a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c66e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c670:	4b2a      	ldr	r3, [pc, #168]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c674:	0a5b      	lsrs	r3, r3, #9
 800c676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c67a:	ee07 3a90 	vmov	s15, r3
 800c67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c68a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c68e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c696:	ee17 2a90 	vmov	r2, s15
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c69e:	4b1f      	ldr	r3, [pc, #124]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a2:	0c1b      	lsrs	r3, r3, #16
 800c6a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6a8:	ee07 3a90 	vmov	s15, r3
 800c6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6c4:	ee17 2a90 	vmov	r2, s15
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c6cc:	4b13      	ldr	r3, [pc, #76]	; (800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d0:	0e1b      	lsrs	r3, r3, #24
 800c6d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6d6:	ee07 3a90 	vmov	s15, r3
 800c6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6f2:	ee17 2a90 	vmov	r2, s15
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c6fa:	e008      	b.n	800c70e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	609a      	str	r2, [r3, #8]
}
 800c70e:	bf00      	nop
 800c710:	3724      	adds	r7, #36	; 0x24
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	58024400 	.word	0x58024400
 800c720:	03d09000 	.word	0x03d09000
 800c724:	46000000 	.word	0x46000000
 800c728:	4c742400 	.word	0x4c742400
 800c72c:	4a742400 	.word	0x4a742400
 800c730:	4c371b00 	.word	0x4c371b00

0800c734 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c734:	b480      	push	{r7}
 800c736:	b089      	sub	sp, #36	; 0x24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c73c:	4ba1      	ldr	r3, [pc, #644]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c740:	f003 0303 	and.w	r3, r3, #3
 800c744:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c746:	4b9f      	ldr	r3, [pc, #636]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74a:	0d1b      	lsrs	r3, r3, #20
 800c74c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c750:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c752:	4b9c      	ldr	r3, [pc, #624]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c756:	0a1b      	lsrs	r3, r3, #8
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c75e:	4b99      	ldr	r3, [pc, #612]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c762:	08db      	lsrs	r3, r3, #3
 800c764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c768:	693a      	ldr	r2, [r7, #16]
 800c76a:	fb02 f303 	mul.w	r3, r2, r3
 800c76e:	ee07 3a90 	vmov	s15, r3
 800c772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c776:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f000 8111 	beq.w	800c9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	2b02      	cmp	r3, #2
 800c786:	f000 8083 	beq.w	800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	f200 80a1 	bhi.w	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d003      	beq.n	800c7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d056      	beq.n	800c84c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c79e:	e099      	b.n	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7a0:	4b88      	ldr	r3, [pc, #544]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f003 0320 	and.w	r3, r3, #32
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d02d      	beq.n	800c808 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c7ac:	4b85      	ldr	r3, [pc, #532]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	08db      	lsrs	r3, r3, #3
 800c7b2:	f003 0303 	and.w	r3, r3, #3
 800c7b6:	4a84      	ldr	r2, [pc, #528]	; (800c9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c7bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	ee07 3a90 	vmov	s15, r3
 800c7c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	ee07 3a90 	vmov	s15, r3
 800c7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7d6:	4b7b      	ldr	r3, [pc, #492]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7de:	ee07 3a90 	vmov	s15, r3
 800c7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c802:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c806:	e087      	b.n	800c918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	ee07 3a90 	vmov	s15, r3
 800c80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c812:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c81a:	4b6a      	ldr	r3, [pc, #424]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c822:	ee07 3a90 	vmov	s15, r3
 800c826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c82a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c82e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c83a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c846:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c84a:	e065      	b.n	800c918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	ee07 3a90 	vmov	s15, r3
 800c852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c856:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c85e:	4b59      	ldr	r3, [pc, #356]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c866:	ee07 3a90 	vmov	s15, r3
 800c86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c86e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c872:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c87e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c88a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c88e:	e043      	b.n	800c918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	ee07 3a90 	vmov	s15, r3
 800c896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c89a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8a2:	4b48      	ldr	r3, [pc, #288]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8aa:	ee07 3a90 	vmov	s15, r3
 800c8ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8d2:	e021      	b.n	800c918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8e6:	4b37      	ldr	r3, [pc, #220]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ee:	ee07 3a90 	vmov	s15, r3
 800c8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c916:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c918:	4b2a      	ldr	r3, [pc, #168]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91c:	0a5b      	lsrs	r3, r3, #9
 800c91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c92e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c932:	edd7 6a07 	vldr	s13, [r7, #28]
 800c936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c93a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c93e:	ee17 2a90 	vmov	r2, s15
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c946:	4b1f      	ldr	r3, [pc, #124]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	0c1b      	lsrs	r3, r3, #16
 800c94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c950:	ee07 3a90 	vmov	s15, r3
 800c954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c95c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c960:	edd7 6a07 	vldr	s13, [r7, #28]
 800c964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c96c:	ee17 2a90 	vmov	r2, s15
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c974:	4b13      	ldr	r3, [pc, #76]	; (800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c978:	0e1b      	lsrs	r3, r3, #24
 800c97a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c98a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c98e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c99a:	ee17 2a90 	vmov	r2, s15
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c9a2:	e008      	b.n	800c9b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	609a      	str	r2, [r3, #8]
}
 800c9b6:	bf00      	nop
 800c9b8:	3724      	adds	r7, #36	; 0x24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	58024400 	.word	0x58024400
 800c9c8:	03d09000 	.word	0x03d09000
 800c9cc:	46000000 	.word	0x46000000
 800c9d0:	4c742400 	.word	0x4c742400
 800c9d4:	4a742400 	.word	0x4a742400
 800c9d8:	4c371b00 	.word	0x4c371b00

0800c9dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c9ea:	4b53      	ldr	r3, [pc, #332]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800c9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ee:	f003 0303 	and.w	r3, r3, #3
 800c9f2:	2b03      	cmp	r3, #3
 800c9f4:	d101      	bne.n	800c9fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e099      	b.n	800cb2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c9fa:	4b4f      	ldr	r3, [pc, #316]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a4e      	ldr	r2, [pc, #312]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800ca00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca06:	f7fa fa85 	bl	8006f14 <HAL_GetTick>
 800ca0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ca0c:	e008      	b.n	800ca20 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ca0e:	f7fa fa81 	bl	8006f14 <HAL_GetTick>
 800ca12:	4602      	mov	r2, r0
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	1ad3      	subs	r3, r2, r3
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	d901      	bls.n	800ca20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	e086      	b.n	800cb2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ca20:	4b45      	ldr	r3, [pc, #276]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1f0      	bne.n	800ca0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ca2c:	4b42      	ldr	r3, [pc, #264]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800ca2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	031b      	lsls	r3, r3, #12
 800ca3a:	493f      	ldr	r1, [pc, #252]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	628b      	str	r3, [r1, #40]	; 0x28
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	025b      	lsls	r3, r3, #9
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	431a      	orrs	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	3b01      	subs	r3, #1
 800ca5c:	041b      	lsls	r3, r3, #16
 800ca5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca62:	431a      	orrs	r2, r3
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	691b      	ldr	r3, [r3, #16]
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	061b      	lsls	r3, r3, #24
 800ca6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ca70:	4931      	ldr	r1, [pc, #196]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800ca72:	4313      	orrs	r3, r2
 800ca74:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ca76:	4b30      	ldr	r3, [pc, #192]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800ca78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	695b      	ldr	r3, [r3, #20]
 800ca82:	492d      	ldr	r1, [pc, #180]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800ca84:	4313      	orrs	r3, r2
 800ca86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ca88:	4b2b      	ldr	r3, [pc, #172]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800ca8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8c:	f023 0220 	bic.w	r2, r3, #32
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	699b      	ldr	r3, [r3, #24]
 800ca94:	4928      	ldr	r1, [pc, #160]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800ca96:	4313      	orrs	r3, r2
 800ca98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ca9a:	4b27      	ldr	r3, [pc, #156]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800ca9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9e:	4a26      	ldr	r2, [pc, #152]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800caa0:	f023 0310 	bic.w	r3, r3, #16
 800caa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800caa6:	4b24      	ldr	r3, [pc, #144]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800caa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800caaa:	4b24      	ldr	r3, [pc, #144]	; (800cb3c <RCCEx_PLL2_Config+0x160>)
 800caac:	4013      	ands	r3, r2
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	69d2      	ldr	r2, [r2, #28]
 800cab2:	00d2      	lsls	r2, r2, #3
 800cab4:	4920      	ldr	r1, [pc, #128]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800cab6:	4313      	orrs	r3, r2
 800cab8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800caba:	4b1f      	ldr	r3, [pc, #124]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800cabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabe:	4a1e      	ldr	r2, [pc, #120]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800cac0:	f043 0310 	orr.w	r3, r3, #16
 800cac4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d106      	bne.n	800cada <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cacc:	4b1a      	ldr	r3, [pc, #104]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800cace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad0:	4a19      	ldr	r2, [pc, #100]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800cad2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cad8:	e00f      	b.n	800cafa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d106      	bne.n	800caee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cae0:	4b15      	ldr	r3, [pc, #84]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800cae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae4:	4a14      	ldr	r2, [pc, #80]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800cae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800caec:	e005      	b.n	800cafa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800caee:	4b12      	ldr	r3, [pc, #72]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800caf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf2:	4a11      	ldr	r2, [pc, #68]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800caf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800caf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cafa:	4b0f      	ldr	r3, [pc, #60]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a0e      	ldr	r2, [pc, #56]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800cb00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb06:	f7fa fa05 	bl	8006f14 <HAL_GetTick>
 800cb0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cb0c:	e008      	b.n	800cb20 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cb0e:	f7fa fa01 	bl	8006f14 <HAL_GetTick>
 800cb12:	4602      	mov	r2, r0
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d901      	bls.n	800cb20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb1c:	2303      	movs	r3, #3
 800cb1e:	e006      	b.n	800cb2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cb20:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <RCCEx_PLL2_Config+0x15c>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d0f0      	beq.n	800cb0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cb2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	58024400 	.word	0x58024400
 800cb3c:	ffff0007 	.word	0xffff0007

0800cb40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb4e:	4b53      	ldr	r3, [pc, #332]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb52:	f003 0303 	and.w	r3, r3, #3
 800cb56:	2b03      	cmp	r3, #3
 800cb58:	d101      	bne.n	800cb5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e099      	b.n	800cc92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cb5e:	4b4f      	ldr	r3, [pc, #316]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a4e      	ldr	r2, [pc, #312]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cb64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb6a:	f7fa f9d3 	bl	8006f14 <HAL_GetTick>
 800cb6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb70:	e008      	b.n	800cb84 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cb72:	f7fa f9cf 	bl	8006f14 <HAL_GetTick>
 800cb76:	4602      	mov	r2, r0
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d901      	bls.n	800cb84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb80:	2303      	movs	r3, #3
 800cb82:	e086      	b.n	800cc92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb84:	4b45      	ldr	r3, [pc, #276]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1f0      	bne.n	800cb72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cb90:	4b42      	ldr	r3, [pc, #264]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cb92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	051b      	lsls	r3, r3, #20
 800cb9e:	493f      	ldr	r1, [pc, #252]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cba0:	4313      	orrs	r3, r2
 800cba2:	628b      	str	r3, [r1, #40]	; 0x28
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	025b      	lsls	r3, r3, #9
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	431a      	orrs	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	041b      	lsls	r3, r3, #16
 800cbc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cbc6:	431a      	orrs	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	061b      	lsls	r3, r3, #24
 800cbd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbd4:	4931      	ldr	r1, [pc, #196]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cbda:	4b30      	ldr	r3, [pc, #192]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	492d      	ldr	r1, [pc, #180]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cbec:	4b2b      	ldr	r3, [pc, #172]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	699b      	ldr	r3, [r3, #24]
 800cbf8:	4928      	ldr	r1, [pc, #160]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cbfe:	4b27      	ldr	r3, [pc, #156]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc02:	4a26      	ldr	r2, [pc, #152]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cc0a:	4b24      	ldr	r3, [pc, #144]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc0e:	4b24      	ldr	r3, [pc, #144]	; (800cca0 <RCCEx_PLL3_Config+0x160>)
 800cc10:	4013      	ands	r3, r2
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	69d2      	ldr	r2, [r2, #28]
 800cc16:	00d2      	lsls	r2, r2, #3
 800cc18:	4920      	ldr	r1, [pc, #128]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cc1e:	4b1f      	ldr	r3, [pc, #124]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc22:	4a1e      	ldr	r2, [pc, #120]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d106      	bne.n	800cc3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cc30:	4b1a      	ldr	r3, [pc, #104]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc34:	4a19      	ldr	r2, [pc, #100]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cc3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc3c:	e00f      	b.n	800cc5e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d106      	bne.n	800cc52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cc44:	4b15      	ldr	r3, [pc, #84]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	4a14      	ldr	r2, [pc, #80]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cc4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc50:	e005      	b.n	800cc5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cc52:	4b12      	ldr	r3, [pc, #72]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc56:	4a11      	ldr	r2, [pc, #68]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cc5e:	4b0f      	ldr	r3, [pc, #60]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a0e      	ldr	r2, [pc, #56]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc6a:	f7fa f953 	bl	8006f14 <HAL_GetTick>
 800cc6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc70:	e008      	b.n	800cc84 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cc72:	f7fa f94f 	bl	8006f14 <HAL_GetTick>
 800cc76:	4602      	mov	r2, r0
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d901      	bls.n	800cc84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e006      	b.n	800cc92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc84:	4b05      	ldr	r3, [pc, #20]	; (800cc9c <RCCEx_PLL3_Config+0x15c>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d0f0      	beq.n	800cc72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	58024400 	.word	0x58024400
 800cca0:	ffff0007 	.word	0xffff0007

0800cca4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e0f1      	b.n	800ce9a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a78      	ldr	r2, [pc, #480]	; (800cea4 <HAL_SPI_Init+0x200>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d00f      	beq.n	800cce6 <HAL_SPI_Init+0x42>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a77      	ldr	r2, [pc, #476]	; (800cea8 <HAL_SPI_Init+0x204>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d00a      	beq.n	800cce6 <HAL_SPI_Init+0x42>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a75      	ldr	r2, [pc, #468]	; (800ceac <HAL_SPI_Init+0x208>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d005      	beq.n	800cce6 <HAL_SPI_Init+0x42>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	2b0f      	cmp	r3, #15
 800cce0:	d901      	bls.n	800cce6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	e0d9      	b.n	800ce9a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fba4 	bl	800d434 <SPI_GetPacketSize>
 800ccec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a6c      	ldr	r2, [pc, #432]	; (800cea4 <HAL_SPI_Init+0x200>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d00c      	beq.n	800cd12 <HAL_SPI_Init+0x6e>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a6a      	ldr	r2, [pc, #424]	; (800cea8 <HAL_SPI_Init+0x204>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d007      	beq.n	800cd12 <HAL_SPI_Init+0x6e>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a69      	ldr	r2, [pc, #420]	; (800ceac <HAL_SPI_Init+0x208>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d002      	beq.n	800cd12 <HAL_SPI_Init+0x6e>
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2b08      	cmp	r3, #8
 800cd10:	d811      	bhi.n	800cd36 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd16:	4a63      	ldr	r2, [pc, #396]	; (800cea4 <HAL_SPI_Init+0x200>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d009      	beq.n	800cd30 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a61      	ldr	r2, [pc, #388]	; (800cea8 <HAL_SPI_Init+0x204>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d004      	beq.n	800cd30 <HAL_SPI_Init+0x8c>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a60      	ldr	r2, [pc, #384]	; (800ceac <HAL_SPI_Init+0x208>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d104      	bne.n	800cd3a <HAL_SPI_Init+0x96>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2b10      	cmp	r3, #16
 800cd34:	d901      	bls.n	800cd3a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	e0af      	b.n	800ce9a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d106      	bne.n	800cd54 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f7f8 f93e 	bl	8004fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2202      	movs	r2, #2
 800cd58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f022 0201 	bic.w	r2, r2, #1
 800cd6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cd76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd80:	d119      	bne.n	800cdb6 <HAL_SPI_Init+0x112>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd8a:	d103      	bne.n	800cd94 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d008      	beq.n	800cda6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10c      	bne.n	800cdb6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cda0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cda4:	d107      	bne.n	800cdb6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cdb4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	69da      	ldr	r2, [r3, #28]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdbe:	431a      	orrs	r2, r3
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc8:	ea42 0103 	orr.w	r1, r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68da      	ldr	r2, [r3, #12]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	430a      	orrs	r2, r1
 800cdd6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde0:	431a      	orrs	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde6:	431a      	orrs	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	699b      	ldr	r3, [r3, #24]
 800cdec:	431a      	orrs	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	431a      	orrs	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a1b      	ldr	r3, [r3, #32]
 800cdfe:	431a      	orrs	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	431a      	orrs	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce0a:	431a      	orrs	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	431a      	orrs	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce16:	ea42 0103 	orr.w	r1, r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	430a      	orrs	r2, r1
 800ce24:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d113      	bne.n	800ce56 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce40:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce54:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f022 0201 	bic.w	r2, r2, #1
 800ce64:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00a      	beq.n	800ce88 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	430a      	orrs	r2, r1
 800ce86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	40013000 	.word	0x40013000
 800cea8:	40003800 	.word	0x40003800
 800ceac:	40003c00 	.word	0x40003c00

0800ceb0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b08a      	sub	sp, #40	; 0x28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	695b      	ldr	r3, [r3, #20]
 800cec6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800cec8:	6a3a      	ldr	r2, [r7, #32]
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	4013      	ands	r3, r2
 800cece:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800ced8:	2300      	movs	r3, #0
 800ceda:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cee2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	3330      	adds	r3, #48	; 0x30
 800ceea:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d113      	bne.n	800cf1e <HAL_SPI_IRQHandler+0x6e>
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	f003 0320 	and.w	r3, r3, #32
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10e      	bne.n	800cf1e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d009      	beq.n	800cf1e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	4798      	blx	r3
    handled = 1UL;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10f      	bne.n	800cf48 <HAL_SPI_IRQHandler+0x98>
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	f003 0301 	and.w	r3, r3, #1
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00a      	beq.n	800cf48 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d105      	bne.n	800cf48 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	4798      	blx	r3
    handled = 1UL;
 800cf44:	2301      	movs	r3, #1
 800cf46:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	f003 0320 	and.w	r3, r3, #32
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10f      	bne.n	800cf72 <HAL_SPI_IRQHandler+0xc2>
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	f003 0302 	and.w	r3, r3, #2
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00a      	beq.n	800cf72 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d105      	bne.n	800cf72 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	4798      	blx	r3
    handled = 1UL;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f040 816f 	bne.w	800d258 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	f003 0308 	and.w	r3, r3, #8
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f000 80a0 	beq.w	800d0c6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	699a      	ldr	r2, [r3, #24]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f042 0208 	orr.w	r2, r2, #8
 800cf94:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	699a      	ldr	r2, [r3, #24]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f042 0210 	orr.w	r2, r2, #16
 800cfa4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	699a      	ldr	r2, [r3, #24]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfb4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	691a      	ldr	r2, [r3, #16]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f022 0208 	bic.w	r2, r2, #8
 800cfc4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00f      	beq.n	800cff0 <HAL_SPI_IRQHandler+0x140>
 800cfd0:	7cfb      	ldrb	r3, [r7, #19]
 800cfd2:	2b04      	cmp	r3, #4
 800cfd4:	d004      	beq.n	800cfe0 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfda:	69db      	ldr	r3, [r3, #28]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d007      	beq.n	800cff0 <HAL_SPI_IRQHandler+0x140>
 800cfe0:	7cfb      	ldrb	r3, [r7, #19]
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d059      	beq.n	800d09a <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d154      	bne.n	800d09a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d13d      	bne.n	800d07a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800cffe:	e036      	b.n	800d06e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	2b0f      	cmp	r3, #15
 800d006:	d90b      	bls.n	800d020 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d010:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d012:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d018:	1d1a      	adds	r2, r3, #4
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	665a      	str	r2, [r3, #100]	; 0x64
 800d01e:	e01d      	b.n	800d05c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	2b07      	cmp	r3, #7
 800d026:	d90b      	bls.n	800d040 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	8812      	ldrh	r2, [r2, #0]
 800d030:	b292      	uxth	r2, r2
 800d032:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d038:	1c9a      	adds	r2, r3, #2
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	665a      	str	r2, [r3, #100]	; 0x64
 800d03e:	e00d      	b.n	800d05c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d04c:	7812      	ldrb	r2, [r2, #0]
 800d04e:	b2d2      	uxtb	r2, r2
 800d050:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d056:	1c5a      	adds	r2, r3, #1
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d062:	b29b      	uxth	r3, r3
 800d064:	3b01      	subs	r3, #1
 800d066:	b29a      	uxth	r2, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d074:	b29b      	uxth	r3, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1c2      	bne.n	800d000 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f93a 	bl	800d2f4 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d003      	beq.n	800d09a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f90a 	bl	800d2ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800d098:	e0e3      	b.n	800d262 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d09a:	7cfb      	ldrb	r3, [r7, #19]
 800d09c:	2b05      	cmp	r3, #5
 800d09e:	d103      	bne.n	800d0a8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f8f9 	bl	800d298 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d0a6:	e0d9      	b.n	800d25c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d0a8:	7cfb      	ldrb	r3, [r7, #19]
 800d0aa:	2b04      	cmp	r3, #4
 800d0ac:	d103      	bne.n	800d0b6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f8e8 	bl	800d284 <HAL_SPI_RxCpltCallback>
    return;
 800d0b4:	e0d2      	b.n	800d25c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d0b6:	7cfb      	ldrb	r3, [r7, #19]
 800d0b8:	2b03      	cmp	r3, #3
 800d0ba:	f040 80cf 	bne.w	800d25c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f8d6 	bl	800d270 <HAL_SPI_TxCpltCallback>
    return;
 800d0c4:	e0ca      	b.n	800d25c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00d      	beq.n	800d0ec <HAL_SPI_IRQHandler+0x23c>
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	f003 0308 	and.w	r3, r3, #8
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d008      	beq.n	800d0ec <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	699a      	ldr	r2, [r3, #24]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0e8:	619a      	str	r2, [r3, #24]

    return;
 800d0ea:	e0ba      	b.n	800d262 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	f000 80b5 	beq.w	800d262 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00f      	beq.n	800d122 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d108:	f043 0204 	orr.w	r2, r3, #4
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	699a      	ldr	r2, [r3, #24]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d120:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00f      	beq.n	800d14c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d132:	f043 0201 	orr.w	r2, r3, #1
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	699a      	ldr	r2, [r3, #24]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d14a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00f      	beq.n	800d176 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d15c:	f043 0208 	orr.w	r2, r3, #8
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	699a      	ldr	r2, [r3, #24]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d174:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	f003 0320 	and.w	r3, r3, #32
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00f      	beq.n	800d1a0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d186:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	699a      	ldr	r2, [r3, #24]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f042 0220 	orr.w	r2, r2, #32
 800d19e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d05a      	beq.n	800d260 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f022 0201 	bic.w	r2, r2, #1
 800d1b8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	6919      	ldr	r1, [r3, #16]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	4b28      	ldr	r3, [pc, #160]	; (800d268 <HAL_SPI_IRQHandler+0x3b8>)
 800d1c6:	400b      	ands	r3, r1
 800d1c8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d1d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d1d4:	d138      	bne.n	800d248 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	689a      	ldr	r2, [r3, #8]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d1e4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d013      	beq.n	800d216 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f2:	4a1e      	ldr	r2, [pc, #120]	; (800d26c <HAL_SPI_IRQHandler+0x3bc>)
 800d1f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fb fac4 	bl	8008788 <HAL_DMA_Abort_IT>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d007      	beq.n	800d216 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d20c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d020      	beq.n	800d260 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d222:	4a12      	ldr	r2, [pc, #72]	; (800d26c <HAL_SPI_IRQHandler+0x3bc>)
 800d224:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fb faac 	bl	8008788 <HAL_DMA_Abort_IT>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d014      	beq.n	800d260 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d23c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d246:	e00b      	b.n	800d260 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 f82b 	bl	800d2ac <HAL_SPI_ErrorCallback>
    return;
 800d256:	e003      	b.n	800d260 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800d258:	bf00      	nop
 800d25a:	e002      	b.n	800d262 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d25c:	bf00      	nop
 800d25e:	e000      	b.n	800d262 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d260:	bf00      	nop
  }
}
 800d262:	3728      	adds	r7, #40	; 0x28
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	fffffc94 	.word	0xfffffc94
 800d26c:	0800d2c1 	.word	0x0800d2c1

0800d270 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d270:	b480      	push	{r7}
 800d272:	b083      	sub	sp, #12
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d278:	bf00      	nop
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d284:	b480      	push	{r7}
 800d286:	b083      	sub	sp, #12
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d28c:	bf00      	nop
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr

0800d298 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d2b4:	bf00      	nop
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f7ff ffe0 	bl	800d2ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d2ec:	bf00      	nop
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	695b      	ldr	r3, [r3, #20]
 800d302:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	699a      	ldr	r2, [r3, #24]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f042 0208 	orr.w	r2, r2, #8
 800d312:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	699a      	ldr	r2, [r3, #24]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f042 0210 	orr.w	r2, r2, #16
 800d322:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f022 0201 	bic.w	r2, r2, #1
 800d332:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	6919      	ldr	r1, [r3, #16]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	4b3c      	ldr	r3, [pc, #240]	; (800d430 <SPI_CloseTransfer+0x13c>)
 800d340:	400b      	ands	r3, r1
 800d342:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	689a      	ldr	r2, [r3, #8]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d352:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	d014      	beq.n	800d38a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f003 0320 	and.w	r3, r3, #32
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00f      	beq.n	800d38a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d370:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	699a      	ldr	r2, [r3, #24]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f042 0220 	orr.w	r2, r2, #32
 800d388:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d390:	b2db      	uxtb	r3, r3
 800d392:	2b03      	cmp	r3, #3
 800d394:	d014      	beq.n	800d3c0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00f      	beq.n	800d3c0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3a6:	f043 0204 	orr.w	r2, r3, #4
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	699a      	ldr	r2, [r3, #24]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3be:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00f      	beq.n	800d3ea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3d0:	f043 0201 	orr.w	r2, r3, #1
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	699a      	ldr	r2, [r3, #24]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3e8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00f      	beq.n	800d414 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3fa:	f043 0208 	orr.w	r2, r3, #8
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	699a      	ldr	r2, [r3, #24]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d412:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d424:	bf00      	nop
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr
 800d430:	fffffc90 	.word	0xfffffc90

0800d434 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d440:	095b      	lsrs	r3, r3, #5
 800d442:	3301      	adds	r3, #1
 800d444:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	3301      	adds	r3, #1
 800d44c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	3307      	adds	r3, #7
 800d452:	08db      	lsrs	r3, r3, #3
 800d454:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	fb02 f303 	mul.w	r3, r2, r3
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3714      	adds	r7, #20
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr

0800d46a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b082      	sub	sp, #8
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d478:	2301      	movs	r3, #1
 800d47a:	e049      	b.n	800d510 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d482:	b2db      	uxtb	r3, r3
 800d484:	2b00      	cmp	r3, #0
 800d486:	d106      	bne.n	800d496 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7f8 fdb1 	bl	8005ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2202      	movs	r2, #2
 800d49a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681a      	ldr	r2, [r3, #0]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	f000 fed3 	bl	800e254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2201      	movs	r2, #1
 800d502:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2201      	movs	r2, #1
 800d50a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d526:	b2db      	uxtb	r3, r3
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d001      	beq.n	800d530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	e054      	b.n	800d5da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2202      	movs	r2, #2
 800d534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	68da      	ldr	r2, [r3, #12]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f042 0201 	orr.w	r2, r2, #1
 800d546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a26      	ldr	r2, [pc, #152]	; (800d5e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d022      	beq.n	800d598 <HAL_TIM_Base_Start_IT+0x80>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d55a:	d01d      	beq.n	800d598 <HAL_TIM_Base_Start_IT+0x80>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a22      	ldr	r2, [pc, #136]	; (800d5ec <HAL_TIM_Base_Start_IT+0xd4>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d018      	beq.n	800d598 <HAL_TIM_Base_Start_IT+0x80>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a21      	ldr	r2, [pc, #132]	; (800d5f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d013      	beq.n	800d598 <HAL_TIM_Base_Start_IT+0x80>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a1f      	ldr	r2, [pc, #124]	; (800d5f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d00e      	beq.n	800d598 <HAL_TIM_Base_Start_IT+0x80>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a1e      	ldr	r2, [pc, #120]	; (800d5f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d009      	beq.n	800d598 <HAL_TIM_Base_Start_IT+0x80>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a1c      	ldr	r2, [pc, #112]	; (800d5fc <HAL_TIM_Base_Start_IT+0xe4>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d004      	beq.n	800d598 <HAL_TIM_Base_Start_IT+0x80>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a1b      	ldr	r2, [pc, #108]	; (800d600 <HAL_TIM_Base_Start_IT+0xe8>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d115      	bne.n	800d5c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	689a      	ldr	r2, [r3, #8]
 800d59e:	4b19      	ldr	r3, [pc, #100]	; (800d604 <HAL_TIM_Base_Start_IT+0xec>)
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2b06      	cmp	r3, #6
 800d5a8:	d015      	beq.n	800d5d6 <HAL_TIM_Base_Start_IT+0xbe>
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5b0:	d011      	beq.n	800d5d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f042 0201 	orr.w	r2, r2, #1
 800d5c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5c2:	e008      	b.n	800d5d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f042 0201 	orr.w	r2, r2, #1
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	e000      	b.n	800d5d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3714      	adds	r7, #20
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop
 800d5e8:	40010000 	.word	0x40010000
 800d5ec:	40000400 	.word	0x40000400
 800d5f0:	40000800 	.word	0x40000800
 800d5f4:	40000c00 	.word	0x40000c00
 800d5f8:	40010400 	.word	0x40010400
 800d5fc:	40001800 	.word	0x40001800
 800d600:	40014000 	.word	0x40014000
 800d604:	00010007 	.word	0x00010007

0800d608 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	68da      	ldr	r2, [r3, #12]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f022 0201 	bic.w	r2, r2, #1
 800d61e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	6a1a      	ldr	r2, [r3, #32]
 800d626:	f241 1311 	movw	r3, #4369	; 0x1111
 800d62a:	4013      	ands	r3, r2
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10f      	bne.n	800d650 <HAL_TIM_Base_Stop_IT+0x48>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6a1a      	ldr	r2, [r3, #32]
 800d636:	f240 4344 	movw	r3, #1092	; 0x444
 800d63a:	4013      	ands	r3, r2
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d107      	bne.n	800d650 <HAL_TIM_Base_Stop_IT+0x48>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f022 0201 	bic.w	r2, r2, #1
 800d64e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2201      	movs	r2, #1
 800d654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d101      	bne.n	800d678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	e049      	b.n	800d70c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	2b00      	cmp	r3, #0
 800d682:	d106      	bne.n	800d692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 f841 	bl	800d714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2202      	movs	r2, #2
 800d696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	f000 fdd5 	bl	800e254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2201      	movs	r2, #1
 800d706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d71c:	bf00      	nop
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d109      	bne.n	800d74c <HAL_TIM_PWM_Start+0x24>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	2b01      	cmp	r3, #1
 800d742:	bf14      	ite	ne
 800d744:	2301      	movne	r3, #1
 800d746:	2300      	moveq	r3, #0
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	e03c      	b.n	800d7c6 <HAL_TIM_PWM_Start+0x9e>
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	2b04      	cmp	r3, #4
 800d750:	d109      	bne.n	800d766 <HAL_TIM_PWM_Start+0x3e>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	bf14      	ite	ne
 800d75e:	2301      	movne	r3, #1
 800d760:	2300      	moveq	r3, #0
 800d762:	b2db      	uxtb	r3, r3
 800d764:	e02f      	b.n	800d7c6 <HAL_TIM_PWM_Start+0x9e>
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2b08      	cmp	r3, #8
 800d76a:	d109      	bne.n	800d780 <HAL_TIM_PWM_Start+0x58>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d772:	b2db      	uxtb	r3, r3
 800d774:	2b01      	cmp	r3, #1
 800d776:	bf14      	ite	ne
 800d778:	2301      	movne	r3, #1
 800d77a:	2300      	moveq	r3, #0
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	e022      	b.n	800d7c6 <HAL_TIM_PWM_Start+0x9e>
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	2b0c      	cmp	r3, #12
 800d784:	d109      	bne.n	800d79a <HAL_TIM_PWM_Start+0x72>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	2b01      	cmp	r3, #1
 800d790:	bf14      	ite	ne
 800d792:	2301      	movne	r3, #1
 800d794:	2300      	moveq	r3, #0
 800d796:	b2db      	uxtb	r3, r3
 800d798:	e015      	b.n	800d7c6 <HAL_TIM_PWM_Start+0x9e>
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	2b10      	cmp	r3, #16
 800d79e:	d109      	bne.n	800d7b4 <HAL_TIM_PWM_Start+0x8c>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	bf14      	ite	ne
 800d7ac:	2301      	movne	r3, #1
 800d7ae:	2300      	moveq	r3, #0
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	e008      	b.n	800d7c6 <HAL_TIM_PWM_Start+0x9e>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	bf14      	ite	ne
 800d7c0:	2301      	movne	r3, #1
 800d7c2:	2300      	moveq	r3, #0
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d001      	beq.n	800d7ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e0a1      	b.n	800d912 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d104      	bne.n	800d7de <HAL_TIM_PWM_Start+0xb6>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2202      	movs	r2, #2
 800d7d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d7dc:	e023      	b.n	800d826 <HAL_TIM_PWM_Start+0xfe>
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b04      	cmp	r3, #4
 800d7e2:	d104      	bne.n	800d7ee <HAL_TIM_PWM_Start+0xc6>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2202      	movs	r2, #2
 800d7e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d7ec:	e01b      	b.n	800d826 <HAL_TIM_PWM_Start+0xfe>
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	2b08      	cmp	r3, #8
 800d7f2:	d104      	bne.n	800d7fe <HAL_TIM_PWM_Start+0xd6>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d7fc:	e013      	b.n	800d826 <HAL_TIM_PWM_Start+0xfe>
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	2b0c      	cmp	r3, #12
 800d802:	d104      	bne.n	800d80e <HAL_TIM_PWM_Start+0xe6>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2202      	movs	r2, #2
 800d808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d80c:	e00b      	b.n	800d826 <HAL_TIM_PWM_Start+0xfe>
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2b10      	cmp	r3, #16
 800d812:	d104      	bne.n	800d81e <HAL_TIM_PWM_Start+0xf6>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2202      	movs	r2, #2
 800d818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d81c:	e003      	b.n	800d826 <HAL_TIM_PWM_Start+0xfe>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2202      	movs	r2, #2
 800d822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2201      	movs	r2, #1
 800d82c:	6839      	ldr	r1, [r7, #0]
 800d82e:	4618      	mov	r0, r3
 800d830:	f001 f91e 	bl	800ea70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a38      	ldr	r2, [pc, #224]	; (800d91c <HAL_TIM_PWM_Start+0x1f4>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d013      	beq.n	800d866 <HAL_TIM_PWM_Start+0x13e>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a37      	ldr	r2, [pc, #220]	; (800d920 <HAL_TIM_PWM_Start+0x1f8>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d00e      	beq.n	800d866 <HAL_TIM_PWM_Start+0x13e>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a35      	ldr	r2, [pc, #212]	; (800d924 <HAL_TIM_PWM_Start+0x1fc>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d009      	beq.n	800d866 <HAL_TIM_PWM_Start+0x13e>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a34      	ldr	r2, [pc, #208]	; (800d928 <HAL_TIM_PWM_Start+0x200>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d004      	beq.n	800d866 <HAL_TIM_PWM_Start+0x13e>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a32      	ldr	r2, [pc, #200]	; (800d92c <HAL_TIM_PWM_Start+0x204>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d101      	bne.n	800d86a <HAL_TIM_PWM_Start+0x142>
 800d866:	2301      	movs	r3, #1
 800d868:	e000      	b.n	800d86c <HAL_TIM_PWM_Start+0x144>
 800d86a:	2300      	movs	r3, #0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d007      	beq.n	800d880 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d87e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a25      	ldr	r2, [pc, #148]	; (800d91c <HAL_TIM_PWM_Start+0x1f4>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d022      	beq.n	800d8d0 <HAL_TIM_PWM_Start+0x1a8>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d892:	d01d      	beq.n	800d8d0 <HAL_TIM_PWM_Start+0x1a8>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a25      	ldr	r2, [pc, #148]	; (800d930 <HAL_TIM_PWM_Start+0x208>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d018      	beq.n	800d8d0 <HAL_TIM_PWM_Start+0x1a8>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a24      	ldr	r2, [pc, #144]	; (800d934 <HAL_TIM_PWM_Start+0x20c>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d013      	beq.n	800d8d0 <HAL_TIM_PWM_Start+0x1a8>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a22      	ldr	r2, [pc, #136]	; (800d938 <HAL_TIM_PWM_Start+0x210>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d00e      	beq.n	800d8d0 <HAL_TIM_PWM_Start+0x1a8>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a1a      	ldr	r2, [pc, #104]	; (800d920 <HAL_TIM_PWM_Start+0x1f8>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d009      	beq.n	800d8d0 <HAL_TIM_PWM_Start+0x1a8>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a1e      	ldr	r2, [pc, #120]	; (800d93c <HAL_TIM_PWM_Start+0x214>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d004      	beq.n	800d8d0 <HAL_TIM_PWM_Start+0x1a8>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a16      	ldr	r2, [pc, #88]	; (800d924 <HAL_TIM_PWM_Start+0x1fc>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d115      	bne.n	800d8fc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	689a      	ldr	r2, [r3, #8]
 800d8d6:	4b1a      	ldr	r3, [pc, #104]	; (800d940 <HAL_TIM_PWM_Start+0x218>)
 800d8d8:	4013      	ands	r3, r2
 800d8da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2b06      	cmp	r3, #6
 800d8e0:	d015      	beq.n	800d90e <HAL_TIM_PWM_Start+0x1e6>
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8e8:	d011      	beq.n	800d90e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f042 0201 	orr.w	r2, r2, #1
 800d8f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8fa:	e008      	b.n	800d90e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f042 0201 	orr.w	r2, r2, #1
 800d90a:	601a      	str	r2, [r3, #0]
 800d90c:	e000      	b.n	800d910 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d90e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d910:	2300      	movs	r3, #0
}
 800d912:	4618      	mov	r0, r3
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	40010000 	.word	0x40010000
 800d920:	40010400 	.word	0x40010400
 800d924:	40014000 	.word	0x40014000
 800d928:	40014400 	.word	0x40014400
 800d92c:	40014800 	.word	0x40014800
 800d930:	40000400 	.word	0x40000400
 800d934:	40000800 	.word	0x40000800
 800d938:	40000c00 	.word	0x40000c00
 800d93c:	40001800 	.word	0x40001800
 800d940:	00010007 	.word	0x00010007

0800d944 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d954:	2301      	movs	r3, #1
 800d956:	e08f      	b.n	800da78 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2b00      	cmp	r3, #0
 800d962:	d106      	bne.n	800d972 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f7f8 fcb5 	bl	80062dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2202      	movs	r2, #2
 800d976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	6899      	ldr	r1, [r3, #8]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	4b3e      	ldr	r3, [pc, #248]	; (800da80 <HAL_TIM_Encoder_Init+0x13c>)
 800d986:	400b      	ands	r3, r1
 800d988:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	3304      	adds	r3, #4
 800d992:	4619      	mov	r1, r3
 800d994:	4610      	mov	r0, r2
 800d996:	f000 fc5d 	bl	800e254 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	699b      	ldr	r3, [r3, #24]
 800d9a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	6a1b      	ldr	r3, [r3, #32]
 800d9b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	4b31      	ldr	r3, [pc, #196]	; (800da84 <HAL_TIM_Encoder_Init+0x140>)
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	689a      	ldr	r2, [r3, #8]
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	699b      	ldr	r3, [r3, #24]
 800d9cc:	021b      	lsls	r3, r3, #8
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	693a      	ldr	r2, [r7, #16]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d9d6:	693a      	ldr	r2, [r7, #16]
 800d9d8:	4b2b      	ldr	r3, [pc, #172]	; (800da88 <HAL_TIM_Encoder_Init+0x144>)
 800d9da:	4013      	ands	r3, r2
 800d9dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d9de:	693a      	ldr	r2, [r7, #16]
 800d9e0:	4b2a      	ldr	r3, [pc, #168]	; (800da8c <HAL_TIM_Encoder_Init+0x148>)
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	68da      	ldr	r2, [r3, #12]
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	69db      	ldr	r3, [r3, #28]
 800d9ee:	021b      	lsls	r3, r3, #8
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	011a      	lsls	r2, r3, #4
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	6a1b      	ldr	r3, [r3, #32]
 800da02:	031b      	lsls	r3, r3, #12
 800da04:	4313      	orrs	r3, r2
 800da06:	693a      	ldr	r2, [r7, #16]
 800da08:	4313      	orrs	r3, r2
 800da0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800da12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800da1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	685a      	ldr	r2, [r3, #4]
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	011b      	lsls	r3, r3, #4
 800da26:	4313      	orrs	r3, r2
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	697a      	ldr	r2, [r7, #20]
 800da34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	693a      	ldr	r2, [r7, #16]
 800da3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2201      	movs	r2, #1
 800da4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2201      	movs	r2, #1
 800da52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2201      	movs	r2, #1
 800da62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2201      	movs	r2, #1
 800da6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2201      	movs	r2, #1
 800da72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3718      	adds	r7, #24
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	fffebff8 	.word	0xfffebff8
 800da84:	fffffcfc 	.word	0xfffffcfc
 800da88:	fffff3f3 	.word	0xfffff3f3
 800da8c:	ffff0f0f 	.word	0xffff0f0f

0800da90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800daa0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800daa8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dab0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dab8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d110      	bne.n	800dae2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dac0:	7bfb      	ldrb	r3, [r7, #15]
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d102      	bne.n	800dacc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800dac6:	7b7b      	ldrb	r3, [r7, #13]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d001      	beq.n	800dad0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800dacc:	2301      	movs	r3, #1
 800dace:	e069      	b.n	800dba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2202      	movs	r2, #2
 800dad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2202      	movs	r2, #2
 800dadc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dae0:	e031      	b.n	800db46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	2b04      	cmp	r3, #4
 800dae6:	d110      	bne.n	800db0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dae8:	7bbb      	ldrb	r3, [r7, #14]
 800daea:	2b01      	cmp	r3, #1
 800daec:	d102      	bne.n	800daf4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800daee:	7b3b      	ldrb	r3, [r7, #12]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d001      	beq.n	800daf8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	e055      	b.n	800dba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2202      	movs	r2, #2
 800dafc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2202      	movs	r2, #2
 800db04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db08:	e01d      	b.n	800db46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d108      	bne.n	800db22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800db10:	7bbb      	ldrb	r3, [r7, #14]
 800db12:	2b01      	cmp	r3, #1
 800db14:	d105      	bne.n	800db22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800db16:	7b7b      	ldrb	r3, [r7, #13]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d102      	bne.n	800db22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800db1c:	7b3b      	ldrb	r3, [r7, #12]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d001      	beq.n	800db26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800db22:	2301      	movs	r3, #1
 800db24:	e03e      	b.n	800dba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2202      	movs	r2, #2
 800db2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2202      	movs	r2, #2
 800db32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2202      	movs	r2, #2
 800db3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2202      	movs	r2, #2
 800db42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d003      	beq.n	800db54 <HAL_TIM_Encoder_Start+0xc4>
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	2b04      	cmp	r3, #4
 800db50:	d008      	beq.n	800db64 <HAL_TIM_Encoder_Start+0xd4>
 800db52:	e00f      	b.n	800db74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2201      	movs	r2, #1
 800db5a:	2100      	movs	r1, #0
 800db5c:	4618      	mov	r0, r3
 800db5e:	f000 ff87 	bl	800ea70 <TIM_CCxChannelCmd>
      break;
 800db62:	e016      	b.n	800db92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2201      	movs	r2, #1
 800db6a:	2104      	movs	r1, #4
 800db6c:	4618      	mov	r0, r3
 800db6e:	f000 ff7f 	bl	800ea70 <TIM_CCxChannelCmd>
      break;
 800db72:	e00e      	b.n	800db92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2201      	movs	r2, #1
 800db7a:	2100      	movs	r1, #0
 800db7c:	4618      	mov	r0, r3
 800db7e:	f000 ff77 	bl	800ea70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2201      	movs	r2, #1
 800db88:	2104      	movs	r1, #4
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 ff70 	bl	800ea70 <TIM_CCxChannelCmd>
      break;
 800db90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f042 0201 	orr.w	r2, r2, #1
 800dba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	f003 0302 	and.w	r3, r3, #2
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	d122      	bne.n	800dc08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	f003 0302 	and.w	r3, r3, #2
 800dbcc:	2b02      	cmp	r3, #2
 800dbce:	d11b      	bne.n	800dc08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f06f 0202 	mvn.w	r2, #2
 800dbd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	699b      	ldr	r3, [r3, #24]
 800dbe6:	f003 0303 	and.w	r3, r3, #3
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d003      	beq.n	800dbf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fb12 	bl	800e218 <HAL_TIM_IC_CaptureCallback>
 800dbf4:	e005      	b.n	800dc02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fb04 	bl	800e204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 fb15 	bl	800e22c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	691b      	ldr	r3, [r3, #16]
 800dc0e:	f003 0304 	and.w	r3, r3, #4
 800dc12:	2b04      	cmp	r3, #4
 800dc14:	d122      	bne.n	800dc5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	f003 0304 	and.w	r3, r3, #4
 800dc20:	2b04      	cmp	r3, #4
 800dc22:	d11b      	bne.n	800dc5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f06f 0204 	mvn.w	r2, #4
 800dc2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2202      	movs	r2, #2
 800dc32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fae8 	bl	800e218 <HAL_TIM_IC_CaptureCallback>
 800dc48:	e005      	b.n	800dc56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fada 	bl	800e204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 faeb 	bl	800e22c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	691b      	ldr	r3, [r3, #16]
 800dc62:	f003 0308 	and.w	r3, r3, #8
 800dc66:	2b08      	cmp	r3, #8
 800dc68:	d122      	bne.n	800dcb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	f003 0308 	and.w	r3, r3, #8
 800dc74:	2b08      	cmp	r3, #8
 800dc76:	d11b      	bne.n	800dcb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f06f 0208 	mvn.w	r2, #8
 800dc80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2204      	movs	r2, #4
 800dc86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	69db      	ldr	r3, [r3, #28]
 800dc8e:	f003 0303 	and.w	r3, r3, #3
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fabe 	bl	800e218 <HAL_TIM_IC_CaptureCallback>
 800dc9c:	e005      	b.n	800dcaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 fab0 	bl	800e204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 fac1 	bl	800e22c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	691b      	ldr	r3, [r3, #16]
 800dcb6:	f003 0310 	and.w	r3, r3, #16
 800dcba:	2b10      	cmp	r3, #16
 800dcbc:	d122      	bne.n	800dd04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	f003 0310 	and.w	r3, r3, #16
 800dcc8:	2b10      	cmp	r3, #16
 800dcca:	d11b      	bne.n	800dd04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f06f 0210 	mvn.w	r2, #16
 800dcd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2208      	movs	r2, #8
 800dcda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	69db      	ldr	r3, [r3, #28]
 800dce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d003      	beq.n	800dcf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fa94 	bl	800e218 <HAL_TIM_IC_CaptureCallback>
 800dcf0:	e005      	b.n	800dcfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 fa86 	bl	800e204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 fa97 	bl	800e22c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	691b      	ldr	r3, [r3, #16]
 800dd0a:	f003 0301 	and.w	r3, r3, #1
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d10e      	bne.n	800dd30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	f003 0301 	and.w	r3, r3, #1
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d107      	bne.n	800dd30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f06f 0201 	mvn.w	r2, #1
 800dd28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7f5 fcf8 	bl	8003720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	691b      	ldr	r3, [r3, #16]
 800dd36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd3a:	2b80      	cmp	r3, #128	; 0x80
 800dd3c:	d10e      	bne.n	800dd5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd48:	2b80      	cmp	r3, #128	; 0x80
 800dd4a:	d107      	bne.n	800dd5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dd54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 ffc6 	bl	800ece8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd6a:	d10e      	bne.n	800dd8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd76:	2b80      	cmp	r3, #128	; 0x80
 800dd78:	d107      	bne.n	800dd8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dd82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 ffb9 	bl	800ecfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd94:	2b40      	cmp	r3, #64	; 0x40
 800dd96:	d10e      	bne.n	800ddb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda2:	2b40      	cmp	r3, #64	; 0x40
 800dda4:	d107      	bne.n	800ddb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ddae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 fa45 	bl	800e240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	691b      	ldr	r3, [r3, #16]
 800ddbc:	f003 0320 	and.w	r3, r3, #32
 800ddc0:	2b20      	cmp	r3, #32
 800ddc2:	d10e      	bne.n	800dde2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	f003 0320 	and.w	r3, r3, #32
 800ddce:	2b20      	cmp	r3, #32
 800ddd0:	d107      	bne.n	800dde2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f06f 0220 	mvn.w	r2, #32
 800ddda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 ff79 	bl	800ecd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dde2:	bf00      	nop
 800dde4:	3708      	adds	r7, #8
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
	...

0800ddec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b086      	sub	sp, #24
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	60b9      	str	r1, [r7, #8]
 800ddf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de02:	2b01      	cmp	r3, #1
 800de04:	d101      	bne.n	800de0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800de06:	2302      	movs	r3, #2
 800de08:	e0ff      	b.n	800e00a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2201      	movs	r2, #1
 800de0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2b14      	cmp	r3, #20
 800de16:	f200 80f0 	bhi.w	800dffa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800de1a:	a201      	add	r2, pc, #4	; (adr r2, 800de20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800de1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de20:	0800de75 	.word	0x0800de75
 800de24:	0800dffb 	.word	0x0800dffb
 800de28:	0800dffb 	.word	0x0800dffb
 800de2c:	0800dffb 	.word	0x0800dffb
 800de30:	0800deb5 	.word	0x0800deb5
 800de34:	0800dffb 	.word	0x0800dffb
 800de38:	0800dffb 	.word	0x0800dffb
 800de3c:	0800dffb 	.word	0x0800dffb
 800de40:	0800def7 	.word	0x0800def7
 800de44:	0800dffb 	.word	0x0800dffb
 800de48:	0800dffb 	.word	0x0800dffb
 800de4c:	0800dffb 	.word	0x0800dffb
 800de50:	0800df37 	.word	0x0800df37
 800de54:	0800dffb 	.word	0x0800dffb
 800de58:	0800dffb 	.word	0x0800dffb
 800de5c:	0800dffb 	.word	0x0800dffb
 800de60:	0800df79 	.word	0x0800df79
 800de64:	0800dffb 	.word	0x0800dffb
 800de68:	0800dffb 	.word	0x0800dffb
 800de6c:	0800dffb 	.word	0x0800dffb
 800de70:	0800dfb9 	.word	0x0800dfb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	68b9      	ldr	r1, [r7, #8]
 800de7a:	4618      	mov	r0, r3
 800de7c:	f000 fa84 	bl	800e388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	699a      	ldr	r2, [r3, #24]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f042 0208 	orr.w	r2, r2, #8
 800de8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	699a      	ldr	r2, [r3, #24]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f022 0204 	bic.w	r2, r2, #4
 800de9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	6999      	ldr	r1, [r3, #24]
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	691a      	ldr	r2, [r3, #16]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	430a      	orrs	r2, r1
 800deb0:	619a      	str	r2, [r3, #24]
      break;
 800deb2:	e0a5      	b.n	800e000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	68b9      	ldr	r1, [r7, #8]
 800deba:	4618      	mov	r0, r3
 800debc:	f000 faf4 	bl	800e4a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	699a      	ldr	r2, [r3, #24]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	699a      	ldr	r2, [r3, #24]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	6999      	ldr	r1, [r3, #24]
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	691b      	ldr	r3, [r3, #16]
 800deea:	021a      	lsls	r2, r3, #8
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	430a      	orrs	r2, r1
 800def2:	619a      	str	r2, [r3, #24]
      break;
 800def4:	e084      	b.n	800e000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	68b9      	ldr	r1, [r7, #8]
 800defc:	4618      	mov	r0, r3
 800defe:	f000 fb5d 	bl	800e5bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	69da      	ldr	r2, [r3, #28]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f042 0208 	orr.w	r2, r2, #8
 800df10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	69da      	ldr	r2, [r3, #28]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f022 0204 	bic.w	r2, r2, #4
 800df20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	69d9      	ldr	r1, [r3, #28]
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	691a      	ldr	r2, [r3, #16]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	430a      	orrs	r2, r1
 800df32:	61da      	str	r2, [r3, #28]
      break;
 800df34:	e064      	b.n	800e000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	68b9      	ldr	r1, [r7, #8]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f000 fbc5 	bl	800e6cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	69da      	ldr	r2, [r3, #28]
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	69da      	ldr	r2, [r3, #28]
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	69d9      	ldr	r1, [r3, #28]
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	691b      	ldr	r3, [r3, #16]
 800df6c:	021a      	lsls	r2, r3, #8
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	430a      	orrs	r2, r1
 800df74:	61da      	str	r2, [r3, #28]
      break;
 800df76:	e043      	b.n	800e000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	68b9      	ldr	r1, [r7, #8]
 800df7e:	4618      	mov	r0, r3
 800df80:	f000 fc0e 	bl	800e7a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f042 0208 	orr.w	r2, r2, #8
 800df92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f022 0204 	bic.w	r2, r2, #4
 800dfa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	691a      	ldr	r2, [r3, #16]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	430a      	orrs	r2, r1
 800dfb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dfb6:	e023      	b.n	800e000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	68b9      	ldr	r1, [r7, #8]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f000 fc52 	bl	800e868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	691b      	ldr	r3, [r3, #16]
 800dfee:	021a      	lsls	r2, r3, #8
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	430a      	orrs	r2, r1
 800dff6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dff8:	e002      	b.n	800e000 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dffa:	2301      	movs	r3, #1
 800dffc:	75fb      	strb	r3, [r7, #23]
      break;
 800dffe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e008:	7dfb      	ldrb	r3, [r7, #23]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3718      	adds	r7, #24
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop

0800e014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d101      	bne.n	800e030 <HAL_TIM_ConfigClockSource+0x1c>
 800e02c:	2302      	movs	r3, #2
 800e02e:	e0dc      	b.n	800e1ea <HAL_TIM_ConfigClockSource+0x1d6>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2202      	movs	r2, #2
 800e03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	689b      	ldr	r3, [r3, #8]
 800e046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	4b6a      	ldr	r3, [pc, #424]	; (800e1f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e04c:	4013      	ands	r3, r2
 800e04e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	68ba      	ldr	r2, [r7, #8]
 800e05e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a64      	ldr	r2, [pc, #400]	; (800e1f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e066:	4293      	cmp	r3, r2
 800e068:	f000 80a9 	beq.w	800e1be <HAL_TIM_ConfigClockSource+0x1aa>
 800e06c:	4a62      	ldr	r2, [pc, #392]	; (800e1f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	f200 80ae 	bhi.w	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e074:	4a61      	ldr	r2, [pc, #388]	; (800e1fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800e076:	4293      	cmp	r3, r2
 800e078:	f000 80a1 	beq.w	800e1be <HAL_TIM_ConfigClockSource+0x1aa>
 800e07c:	4a5f      	ldr	r2, [pc, #380]	; (800e1fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	f200 80a6 	bhi.w	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e084:	4a5e      	ldr	r2, [pc, #376]	; (800e200 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e086:	4293      	cmp	r3, r2
 800e088:	f000 8099 	beq.w	800e1be <HAL_TIM_ConfigClockSource+0x1aa>
 800e08c:	4a5c      	ldr	r2, [pc, #368]	; (800e200 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	f200 809e 	bhi.w	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e094:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e098:	f000 8091 	beq.w	800e1be <HAL_TIM_ConfigClockSource+0x1aa>
 800e09c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e0a0:	f200 8096 	bhi.w	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e0a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0a8:	f000 8089 	beq.w	800e1be <HAL_TIM_ConfigClockSource+0x1aa>
 800e0ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0b0:	f200 808e 	bhi.w	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e0b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0b8:	d03e      	beq.n	800e138 <HAL_TIM_ConfigClockSource+0x124>
 800e0ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0be:	f200 8087 	bhi.w	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e0c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0c6:	f000 8086 	beq.w	800e1d6 <HAL_TIM_ConfigClockSource+0x1c2>
 800e0ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0ce:	d87f      	bhi.n	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e0d0:	2b70      	cmp	r3, #112	; 0x70
 800e0d2:	d01a      	beq.n	800e10a <HAL_TIM_ConfigClockSource+0xf6>
 800e0d4:	2b70      	cmp	r3, #112	; 0x70
 800e0d6:	d87b      	bhi.n	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e0d8:	2b60      	cmp	r3, #96	; 0x60
 800e0da:	d050      	beq.n	800e17e <HAL_TIM_ConfigClockSource+0x16a>
 800e0dc:	2b60      	cmp	r3, #96	; 0x60
 800e0de:	d877      	bhi.n	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e0e0:	2b50      	cmp	r3, #80	; 0x50
 800e0e2:	d03c      	beq.n	800e15e <HAL_TIM_ConfigClockSource+0x14a>
 800e0e4:	2b50      	cmp	r3, #80	; 0x50
 800e0e6:	d873      	bhi.n	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e0e8:	2b40      	cmp	r3, #64	; 0x40
 800e0ea:	d058      	beq.n	800e19e <HAL_TIM_ConfigClockSource+0x18a>
 800e0ec:	2b40      	cmp	r3, #64	; 0x40
 800e0ee:	d86f      	bhi.n	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e0f0:	2b30      	cmp	r3, #48	; 0x30
 800e0f2:	d064      	beq.n	800e1be <HAL_TIM_ConfigClockSource+0x1aa>
 800e0f4:	2b30      	cmp	r3, #48	; 0x30
 800e0f6:	d86b      	bhi.n	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e0f8:	2b20      	cmp	r3, #32
 800e0fa:	d060      	beq.n	800e1be <HAL_TIM_ConfigClockSource+0x1aa>
 800e0fc:	2b20      	cmp	r3, #32
 800e0fe:	d867      	bhi.n	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e100:	2b00      	cmp	r3, #0
 800e102:	d05c      	beq.n	800e1be <HAL_TIM_ConfigClockSource+0x1aa>
 800e104:	2b10      	cmp	r3, #16
 800e106:	d05a      	beq.n	800e1be <HAL_TIM_ConfigClockSource+0x1aa>
 800e108:	e062      	b.n	800e1d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6818      	ldr	r0, [r3, #0]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	6899      	ldr	r1, [r3, #8]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	685a      	ldr	r2, [r3, #4]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	f000 fc89 	bl	800ea30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e12c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	609a      	str	r2, [r3, #8]
      break;
 800e136:	e04f      	b.n	800e1d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6818      	ldr	r0, [r3, #0]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	6899      	ldr	r1, [r3, #8]
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	f000 fc72 	bl	800ea30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	689a      	ldr	r2, [r3, #8]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e15a:	609a      	str	r2, [r3, #8]
      break;
 800e15c:	e03c      	b.n	800e1d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6818      	ldr	r0, [r3, #0]
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	6859      	ldr	r1, [r3, #4]
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	461a      	mov	r2, r3
 800e16c:	f000 fbe2 	bl	800e934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2150      	movs	r1, #80	; 0x50
 800e176:	4618      	mov	r0, r3
 800e178:	f000 fc3c 	bl	800e9f4 <TIM_ITRx_SetConfig>
      break;
 800e17c:	e02c      	b.n	800e1d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6818      	ldr	r0, [r3, #0]
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	6859      	ldr	r1, [r3, #4]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	461a      	mov	r2, r3
 800e18c:	f000 fc01 	bl	800e992 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2160      	movs	r1, #96	; 0x60
 800e196:	4618      	mov	r0, r3
 800e198:	f000 fc2c 	bl	800e9f4 <TIM_ITRx_SetConfig>
      break;
 800e19c:	e01c      	b.n	800e1d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6818      	ldr	r0, [r3, #0]
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	6859      	ldr	r1, [r3, #4]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	f000 fbc2 	bl	800e934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2140      	movs	r1, #64	; 0x40
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f000 fc1c 	bl	800e9f4 <TIM_ITRx_SetConfig>
      break;
 800e1bc:	e00c      	b.n	800e1d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	f000 fc13 	bl	800e9f4 <TIM_ITRx_SetConfig>
      break;
 800e1ce:	e003      	b.n	800e1d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800e1d4:	e000      	b.n	800e1d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e1d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	ffceff88 	.word	0xffceff88
 800e1f8:	00100040 	.word	0x00100040
 800e1fc:	00100030 	.word	0x00100030
 800e200:	00100020 	.word	0x00100020

0800e204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e20c:	bf00      	nop
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e234:	bf00      	nop
 800e236:	370c      	adds	r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e240:	b480      	push	{r7}
 800e242:	b083      	sub	sp, #12
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e248:	bf00      	nop
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4a40      	ldr	r2, [pc, #256]	; (800e368 <TIM_Base_SetConfig+0x114>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d013      	beq.n	800e294 <TIM_Base_SetConfig+0x40>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e272:	d00f      	beq.n	800e294 <TIM_Base_SetConfig+0x40>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4a3d      	ldr	r2, [pc, #244]	; (800e36c <TIM_Base_SetConfig+0x118>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d00b      	beq.n	800e294 <TIM_Base_SetConfig+0x40>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a3c      	ldr	r2, [pc, #240]	; (800e370 <TIM_Base_SetConfig+0x11c>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d007      	beq.n	800e294 <TIM_Base_SetConfig+0x40>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	4a3b      	ldr	r2, [pc, #236]	; (800e374 <TIM_Base_SetConfig+0x120>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d003      	beq.n	800e294 <TIM_Base_SetConfig+0x40>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	4a3a      	ldr	r2, [pc, #232]	; (800e378 <TIM_Base_SetConfig+0x124>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d108      	bne.n	800e2a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e29a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	68fa      	ldr	r2, [r7, #12]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4a2f      	ldr	r2, [pc, #188]	; (800e368 <TIM_Base_SetConfig+0x114>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d01f      	beq.n	800e2ee <TIM_Base_SetConfig+0x9a>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2b4:	d01b      	beq.n	800e2ee <TIM_Base_SetConfig+0x9a>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4a2c      	ldr	r2, [pc, #176]	; (800e36c <TIM_Base_SetConfig+0x118>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d017      	beq.n	800e2ee <TIM_Base_SetConfig+0x9a>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4a2b      	ldr	r2, [pc, #172]	; (800e370 <TIM_Base_SetConfig+0x11c>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d013      	beq.n	800e2ee <TIM_Base_SetConfig+0x9a>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4a2a      	ldr	r2, [pc, #168]	; (800e374 <TIM_Base_SetConfig+0x120>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d00f      	beq.n	800e2ee <TIM_Base_SetConfig+0x9a>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4a29      	ldr	r2, [pc, #164]	; (800e378 <TIM_Base_SetConfig+0x124>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d00b      	beq.n	800e2ee <TIM_Base_SetConfig+0x9a>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	4a28      	ldr	r2, [pc, #160]	; (800e37c <TIM_Base_SetConfig+0x128>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d007      	beq.n	800e2ee <TIM_Base_SetConfig+0x9a>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	4a27      	ldr	r2, [pc, #156]	; (800e380 <TIM_Base_SetConfig+0x12c>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d003      	beq.n	800e2ee <TIM_Base_SetConfig+0x9a>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	4a26      	ldr	r2, [pc, #152]	; (800e384 <TIM_Base_SetConfig+0x130>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d108      	bne.n	800e300 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	695b      	ldr	r3, [r3, #20]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	689a      	ldr	r2, [r3, #8]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4a10      	ldr	r2, [pc, #64]	; (800e368 <TIM_Base_SetConfig+0x114>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d00f      	beq.n	800e34c <TIM_Base_SetConfig+0xf8>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a12      	ldr	r2, [pc, #72]	; (800e378 <TIM_Base_SetConfig+0x124>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d00b      	beq.n	800e34c <TIM_Base_SetConfig+0xf8>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	4a11      	ldr	r2, [pc, #68]	; (800e37c <TIM_Base_SetConfig+0x128>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d007      	beq.n	800e34c <TIM_Base_SetConfig+0xf8>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4a10      	ldr	r2, [pc, #64]	; (800e380 <TIM_Base_SetConfig+0x12c>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d003      	beq.n	800e34c <TIM_Base_SetConfig+0xf8>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4a0f      	ldr	r2, [pc, #60]	; (800e384 <TIM_Base_SetConfig+0x130>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d103      	bne.n	800e354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	691a      	ldr	r2, [r3, #16]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2201      	movs	r2, #1
 800e358:	615a      	str	r2, [r3, #20]
}
 800e35a:	bf00      	nop
 800e35c:	3714      	adds	r7, #20
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop
 800e368:	40010000 	.word	0x40010000
 800e36c:	40000400 	.word	0x40000400
 800e370:	40000800 	.word	0x40000800
 800e374:	40000c00 	.word	0x40000c00
 800e378:	40010400 	.word	0x40010400
 800e37c:	40014000 	.word	0x40014000
 800e380:	40014400 	.word	0x40014400
 800e384:	40014800 	.word	0x40014800

0800e388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e388:	b480      	push	{r7}
 800e38a:	b087      	sub	sp, #28
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6a1b      	ldr	r3, [r3, #32]
 800e396:	f023 0201 	bic.w	r2, r3, #1
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a1b      	ldr	r3, [r3, #32]
 800e3a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	699b      	ldr	r3, [r3, #24]
 800e3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	4b37      	ldr	r3, [pc, #220]	; (800e490 <TIM_OC1_SetConfig+0x108>)
 800e3b4:	4013      	ands	r3, r2
 800e3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f023 0303 	bic.w	r3, r3, #3
 800e3be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	f023 0302 	bic.w	r3, r3, #2
 800e3d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	697a      	ldr	r2, [r7, #20]
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4a2d      	ldr	r2, [pc, #180]	; (800e494 <TIM_OC1_SetConfig+0x10c>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d00f      	beq.n	800e404 <TIM_OC1_SetConfig+0x7c>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4a2c      	ldr	r2, [pc, #176]	; (800e498 <TIM_OC1_SetConfig+0x110>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d00b      	beq.n	800e404 <TIM_OC1_SetConfig+0x7c>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	4a2b      	ldr	r2, [pc, #172]	; (800e49c <TIM_OC1_SetConfig+0x114>)
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d007      	beq.n	800e404 <TIM_OC1_SetConfig+0x7c>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	4a2a      	ldr	r2, [pc, #168]	; (800e4a0 <TIM_OC1_SetConfig+0x118>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d003      	beq.n	800e404 <TIM_OC1_SetConfig+0x7c>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	4a29      	ldr	r2, [pc, #164]	; (800e4a4 <TIM_OC1_SetConfig+0x11c>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d10c      	bne.n	800e41e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	f023 0308 	bic.w	r3, r3, #8
 800e40a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	697a      	ldr	r2, [r7, #20]
 800e412:	4313      	orrs	r3, r2
 800e414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	f023 0304 	bic.w	r3, r3, #4
 800e41c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	4a1c      	ldr	r2, [pc, #112]	; (800e494 <TIM_OC1_SetConfig+0x10c>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d00f      	beq.n	800e446 <TIM_OC1_SetConfig+0xbe>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4a1b      	ldr	r2, [pc, #108]	; (800e498 <TIM_OC1_SetConfig+0x110>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d00b      	beq.n	800e446 <TIM_OC1_SetConfig+0xbe>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	4a1a      	ldr	r2, [pc, #104]	; (800e49c <TIM_OC1_SetConfig+0x114>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d007      	beq.n	800e446 <TIM_OC1_SetConfig+0xbe>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4a19      	ldr	r2, [pc, #100]	; (800e4a0 <TIM_OC1_SetConfig+0x118>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d003      	beq.n	800e446 <TIM_OC1_SetConfig+0xbe>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4a18      	ldr	r2, [pc, #96]	; (800e4a4 <TIM_OC1_SetConfig+0x11c>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d111      	bne.n	800e46a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e44c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	695b      	ldr	r3, [r3, #20]
 800e45a:	693a      	ldr	r2, [r7, #16]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	693a      	ldr	r2, [r7, #16]
 800e466:	4313      	orrs	r3, r2
 800e468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	693a      	ldr	r2, [r7, #16]
 800e46e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	685a      	ldr	r2, [r3, #4]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	697a      	ldr	r2, [r7, #20]
 800e482:	621a      	str	r2, [r3, #32]
}
 800e484:	bf00      	nop
 800e486:	371c      	adds	r7, #28
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr
 800e490:	fffeff8f 	.word	0xfffeff8f
 800e494:	40010000 	.word	0x40010000
 800e498:	40010400 	.word	0x40010400
 800e49c:	40014000 	.word	0x40014000
 800e4a0:	40014400 	.word	0x40014400
 800e4a4:	40014800 	.word	0x40014800

0800e4a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b087      	sub	sp, #28
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6a1b      	ldr	r3, [r3, #32]
 800e4b6:	f023 0210 	bic.w	r2, r3, #16
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a1b      	ldr	r3, [r3, #32]
 800e4c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	699b      	ldr	r3, [r3, #24]
 800e4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	4b34      	ldr	r3, [pc, #208]	; (800e5a4 <TIM_OC2_SetConfig+0xfc>)
 800e4d4:	4013      	ands	r3, r2
 800e4d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	021b      	lsls	r3, r3, #8
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	f023 0320 	bic.w	r3, r3, #32
 800e4f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	011b      	lsls	r3, r3, #4
 800e4fa:	697a      	ldr	r2, [r7, #20]
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	4a29      	ldr	r2, [pc, #164]	; (800e5a8 <TIM_OC2_SetConfig+0x100>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d003      	beq.n	800e510 <TIM_OC2_SetConfig+0x68>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4a28      	ldr	r2, [pc, #160]	; (800e5ac <TIM_OC2_SetConfig+0x104>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d10d      	bne.n	800e52c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	011b      	lsls	r3, r3, #4
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	4313      	orrs	r3, r2
 800e522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e52a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4a1e      	ldr	r2, [pc, #120]	; (800e5a8 <TIM_OC2_SetConfig+0x100>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d00f      	beq.n	800e554 <TIM_OC2_SetConfig+0xac>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a1d      	ldr	r2, [pc, #116]	; (800e5ac <TIM_OC2_SetConfig+0x104>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d00b      	beq.n	800e554 <TIM_OC2_SetConfig+0xac>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a1c      	ldr	r2, [pc, #112]	; (800e5b0 <TIM_OC2_SetConfig+0x108>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d007      	beq.n	800e554 <TIM_OC2_SetConfig+0xac>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4a1b      	ldr	r2, [pc, #108]	; (800e5b4 <TIM_OC2_SetConfig+0x10c>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d003      	beq.n	800e554 <TIM_OC2_SetConfig+0xac>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	4a1a      	ldr	r2, [pc, #104]	; (800e5b8 <TIM_OC2_SetConfig+0x110>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d113      	bne.n	800e57c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e55a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	695b      	ldr	r3, [r3, #20]
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	693a      	ldr	r2, [r7, #16]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	699b      	ldr	r3, [r3, #24]
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	693a      	ldr	r2, [r7, #16]
 800e578:	4313      	orrs	r3, r2
 800e57a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	693a      	ldr	r2, [r7, #16]
 800e580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	697a      	ldr	r2, [r7, #20]
 800e594:	621a      	str	r2, [r3, #32]
}
 800e596:	bf00      	nop
 800e598:	371c      	adds	r7, #28
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	feff8fff 	.word	0xfeff8fff
 800e5a8:	40010000 	.word	0x40010000
 800e5ac:	40010400 	.word	0x40010400
 800e5b0:	40014000 	.word	0x40014000
 800e5b4:	40014400 	.word	0x40014400
 800e5b8:	40014800 	.word	0x40014800

0800e5bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b087      	sub	sp, #28
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a1b      	ldr	r3, [r3, #32]
 800e5ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6a1b      	ldr	r3, [r3, #32]
 800e5d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	69db      	ldr	r3, [r3, #28]
 800e5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	4b33      	ldr	r3, [pc, #204]	; (800e6b4 <TIM_OC3_SetConfig+0xf8>)
 800e5e8:	4013      	ands	r3, r2
 800e5ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f023 0303 	bic.w	r3, r3, #3
 800e5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	021b      	lsls	r3, r3, #8
 800e60c:	697a      	ldr	r2, [r7, #20]
 800e60e:	4313      	orrs	r3, r2
 800e610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4a28      	ldr	r2, [pc, #160]	; (800e6b8 <TIM_OC3_SetConfig+0xfc>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d003      	beq.n	800e622 <TIM_OC3_SetConfig+0x66>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4a27      	ldr	r2, [pc, #156]	; (800e6bc <TIM_OC3_SetConfig+0x100>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d10d      	bne.n	800e63e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	021b      	lsls	r3, r3, #8
 800e630:	697a      	ldr	r2, [r7, #20]
 800e632:	4313      	orrs	r3, r2
 800e634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e63c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a1d      	ldr	r2, [pc, #116]	; (800e6b8 <TIM_OC3_SetConfig+0xfc>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d00f      	beq.n	800e666 <TIM_OC3_SetConfig+0xaa>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4a1c      	ldr	r2, [pc, #112]	; (800e6bc <TIM_OC3_SetConfig+0x100>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d00b      	beq.n	800e666 <TIM_OC3_SetConfig+0xaa>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4a1b      	ldr	r2, [pc, #108]	; (800e6c0 <TIM_OC3_SetConfig+0x104>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d007      	beq.n	800e666 <TIM_OC3_SetConfig+0xaa>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a1a      	ldr	r2, [pc, #104]	; (800e6c4 <TIM_OC3_SetConfig+0x108>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d003      	beq.n	800e666 <TIM_OC3_SetConfig+0xaa>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4a19      	ldr	r2, [pc, #100]	; (800e6c8 <TIM_OC3_SetConfig+0x10c>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d113      	bne.n	800e68e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e66c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	695b      	ldr	r3, [r3, #20]
 800e67a:	011b      	lsls	r3, r3, #4
 800e67c:	693a      	ldr	r2, [r7, #16]
 800e67e:	4313      	orrs	r3, r2
 800e680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	699b      	ldr	r3, [r3, #24]
 800e686:	011b      	lsls	r3, r3, #4
 800e688:	693a      	ldr	r2, [r7, #16]
 800e68a:	4313      	orrs	r3, r2
 800e68c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	693a      	ldr	r2, [r7, #16]
 800e692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	685a      	ldr	r2, [r3, #4]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	697a      	ldr	r2, [r7, #20]
 800e6a6:	621a      	str	r2, [r3, #32]
}
 800e6a8:	bf00      	nop
 800e6aa:	371c      	adds	r7, #28
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr
 800e6b4:	fffeff8f 	.word	0xfffeff8f
 800e6b8:	40010000 	.word	0x40010000
 800e6bc:	40010400 	.word	0x40010400
 800e6c0:	40014000 	.word	0x40014000
 800e6c4:	40014400 	.word	0x40014400
 800e6c8:	40014800 	.word	0x40014800

0800e6cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b087      	sub	sp, #28
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a1b      	ldr	r3, [r3, #32]
 800e6da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a1b      	ldr	r3, [r3, #32]
 800e6e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	69db      	ldr	r3, [r3, #28]
 800e6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e6f4:	68fa      	ldr	r2, [r7, #12]
 800e6f6:	4b24      	ldr	r3, [pc, #144]	; (800e788 <TIM_OC4_SetConfig+0xbc>)
 800e6f8:	4013      	ands	r3, r2
 800e6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	021b      	lsls	r3, r3, #8
 800e70a:	68fa      	ldr	r2, [r7, #12]
 800e70c:	4313      	orrs	r3, r2
 800e70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	689b      	ldr	r3, [r3, #8]
 800e71c:	031b      	lsls	r3, r3, #12
 800e71e:	693a      	ldr	r2, [r7, #16]
 800e720:	4313      	orrs	r3, r2
 800e722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	4a19      	ldr	r2, [pc, #100]	; (800e78c <TIM_OC4_SetConfig+0xc0>)
 800e728:	4293      	cmp	r3, r2
 800e72a:	d00f      	beq.n	800e74c <TIM_OC4_SetConfig+0x80>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	4a18      	ldr	r2, [pc, #96]	; (800e790 <TIM_OC4_SetConfig+0xc4>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d00b      	beq.n	800e74c <TIM_OC4_SetConfig+0x80>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4a17      	ldr	r2, [pc, #92]	; (800e794 <TIM_OC4_SetConfig+0xc8>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d007      	beq.n	800e74c <TIM_OC4_SetConfig+0x80>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	4a16      	ldr	r2, [pc, #88]	; (800e798 <TIM_OC4_SetConfig+0xcc>)
 800e740:	4293      	cmp	r3, r2
 800e742:	d003      	beq.n	800e74c <TIM_OC4_SetConfig+0x80>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	4a15      	ldr	r2, [pc, #84]	; (800e79c <TIM_OC4_SetConfig+0xd0>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d109      	bne.n	800e760 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	695b      	ldr	r3, [r3, #20]
 800e758:	019b      	lsls	r3, r3, #6
 800e75a:	697a      	ldr	r2, [r7, #20]
 800e75c:	4313      	orrs	r3, r2
 800e75e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	697a      	ldr	r2, [r7, #20]
 800e764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	68fa      	ldr	r2, [r7, #12]
 800e76a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	621a      	str	r2, [r3, #32]
}
 800e77a:	bf00      	nop
 800e77c:	371c      	adds	r7, #28
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	feff8fff 	.word	0xfeff8fff
 800e78c:	40010000 	.word	0x40010000
 800e790:	40010400 	.word	0x40010400
 800e794:	40014000 	.word	0x40014000
 800e798:	40014400 	.word	0x40014400
 800e79c:	40014800 	.word	0x40014800

0800e7a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b087      	sub	sp, #28
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6a1b      	ldr	r3, [r3, #32]
 800e7ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	4b21      	ldr	r3, [pc, #132]	; (800e850 <TIM_OC5_SetConfig+0xb0>)
 800e7cc:	4013      	ands	r3, r2
 800e7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e7e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	041b      	lsls	r3, r3, #16
 800e7e8:	693a      	ldr	r2, [r7, #16]
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4a18      	ldr	r2, [pc, #96]	; (800e854 <TIM_OC5_SetConfig+0xb4>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d00f      	beq.n	800e816 <TIM_OC5_SetConfig+0x76>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4a17      	ldr	r2, [pc, #92]	; (800e858 <TIM_OC5_SetConfig+0xb8>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d00b      	beq.n	800e816 <TIM_OC5_SetConfig+0x76>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	4a16      	ldr	r2, [pc, #88]	; (800e85c <TIM_OC5_SetConfig+0xbc>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d007      	beq.n	800e816 <TIM_OC5_SetConfig+0x76>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4a15      	ldr	r2, [pc, #84]	; (800e860 <TIM_OC5_SetConfig+0xc0>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d003      	beq.n	800e816 <TIM_OC5_SetConfig+0x76>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4a14      	ldr	r2, [pc, #80]	; (800e864 <TIM_OC5_SetConfig+0xc4>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d109      	bne.n	800e82a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e81c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	695b      	ldr	r3, [r3, #20]
 800e822:	021b      	lsls	r3, r3, #8
 800e824:	697a      	ldr	r2, [r7, #20]
 800e826:	4313      	orrs	r3, r2
 800e828:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	697a      	ldr	r2, [r7, #20]
 800e82e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	685a      	ldr	r2, [r3, #4]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	693a      	ldr	r2, [r7, #16]
 800e842:	621a      	str	r2, [r3, #32]
}
 800e844:	bf00      	nop
 800e846:	371c      	adds	r7, #28
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr
 800e850:	fffeff8f 	.word	0xfffeff8f
 800e854:	40010000 	.word	0x40010000
 800e858:	40010400 	.word	0x40010400
 800e85c:	40014000 	.word	0x40014000
 800e860:	40014400 	.word	0x40014400
 800e864:	40014800 	.word	0x40014800

0800e868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e868:	b480      	push	{r7}
 800e86a:	b087      	sub	sp, #28
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a1b      	ldr	r3, [r3, #32]
 800e876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a1b      	ldr	r3, [r3, #32]
 800e882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	4b22      	ldr	r3, [pc, #136]	; (800e91c <TIM_OC6_SetConfig+0xb4>)
 800e894:	4013      	ands	r3, r2
 800e896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	021b      	lsls	r3, r3, #8
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	689b      	ldr	r3, [r3, #8]
 800e8b0:	051b      	lsls	r3, r3, #20
 800e8b2:	693a      	ldr	r2, [r7, #16]
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	4a19      	ldr	r2, [pc, #100]	; (800e920 <TIM_OC6_SetConfig+0xb8>)
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d00f      	beq.n	800e8e0 <TIM_OC6_SetConfig+0x78>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a18      	ldr	r2, [pc, #96]	; (800e924 <TIM_OC6_SetConfig+0xbc>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d00b      	beq.n	800e8e0 <TIM_OC6_SetConfig+0x78>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	4a17      	ldr	r2, [pc, #92]	; (800e928 <TIM_OC6_SetConfig+0xc0>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d007      	beq.n	800e8e0 <TIM_OC6_SetConfig+0x78>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a16      	ldr	r2, [pc, #88]	; (800e92c <TIM_OC6_SetConfig+0xc4>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d003      	beq.n	800e8e0 <TIM_OC6_SetConfig+0x78>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	4a15      	ldr	r2, [pc, #84]	; (800e930 <TIM_OC6_SetConfig+0xc8>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d109      	bne.n	800e8f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e8e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	695b      	ldr	r3, [r3, #20]
 800e8ec:	029b      	lsls	r3, r3, #10
 800e8ee:	697a      	ldr	r2, [r7, #20]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	697a      	ldr	r2, [r7, #20]
 800e8f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	685a      	ldr	r2, [r3, #4]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	621a      	str	r2, [r3, #32]
}
 800e90e:	bf00      	nop
 800e910:	371c      	adds	r7, #28
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	feff8fff 	.word	0xfeff8fff
 800e920:	40010000 	.word	0x40010000
 800e924:	40010400 	.word	0x40010400
 800e928:	40014000 	.word	0x40014000
 800e92c:	40014400 	.word	0x40014400
 800e930:	40014800 	.word	0x40014800

0800e934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e934:	b480      	push	{r7}
 800e936:	b087      	sub	sp, #28
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	6a1b      	ldr	r3, [r3, #32]
 800e944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6a1b      	ldr	r3, [r3, #32]
 800e94a:	f023 0201 	bic.w	r2, r3, #1
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	699b      	ldr	r3, [r3, #24]
 800e956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e95e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	011b      	lsls	r3, r3, #4
 800e964:	693a      	ldr	r2, [r7, #16]
 800e966:	4313      	orrs	r3, r2
 800e968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f023 030a 	bic.w	r3, r3, #10
 800e970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e972:	697a      	ldr	r2, [r7, #20]
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	4313      	orrs	r3, r2
 800e978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	693a      	ldr	r2, [r7, #16]
 800e97e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	697a      	ldr	r2, [r7, #20]
 800e984:	621a      	str	r2, [r3, #32]
}
 800e986:	bf00      	nop
 800e988:	371c      	adds	r7, #28
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr

0800e992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e992:	b480      	push	{r7}
 800e994:	b087      	sub	sp, #28
 800e996:	af00      	add	r7, sp, #0
 800e998:	60f8      	str	r0, [r7, #12]
 800e99a:	60b9      	str	r1, [r7, #8]
 800e99c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	6a1b      	ldr	r3, [r3, #32]
 800e9a2:	f023 0210 	bic.w	r2, r3, #16
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	699b      	ldr	r3, [r3, #24]
 800e9ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6a1b      	ldr	r3, [r3, #32]
 800e9b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e9bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	031b      	lsls	r3, r3, #12
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e9ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	011b      	lsls	r3, r3, #4
 800e9d4:	693a      	ldr	r2, [r7, #16]
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	697a      	ldr	r2, [r7, #20]
 800e9de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	693a      	ldr	r2, [r7, #16]
 800e9e4:	621a      	str	r2, [r3, #32]
}
 800e9e6:	bf00      	nop
 800e9e8:	371c      	adds	r7, #28
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr
	...

0800e9f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	689b      	ldr	r3, [r3, #8]
 800ea02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	4b09      	ldr	r3, [pc, #36]	; (800ea2c <TIM_ITRx_SetConfig+0x38>)
 800ea08:	4013      	ands	r3, r2
 800ea0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ea0c:	683a      	ldr	r2, [r7, #0]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	4313      	orrs	r3, r2
 800ea12:	f043 0307 	orr.w	r3, r3, #7
 800ea16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	609a      	str	r2, [r3, #8]
}
 800ea1e:	bf00      	nop
 800ea20:	3714      	adds	r7, #20
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	ffcfff8f 	.word	0xffcfff8f

0800ea30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b087      	sub	sp, #28
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	021a      	lsls	r2, r3, #8
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	431a      	orrs	r2, r3
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	4313      	orrs	r3, r2
 800ea58:	697a      	ldr	r2, [r7, #20]
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	697a      	ldr	r2, [r7, #20]
 800ea62:	609a      	str	r2, [r3, #8]
}
 800ea64:	bf00      	nop
 800ea66:	371c      	adds	r7, #28
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b087      	sub	sp, #28
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	f003 031f 	and.w	r3, r3, #31
 800ea82:	2201      	movs	r2, #1
 800ea84:	fa02 f303 	lsl.w	r3, r2, r3
 800ea88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6a1a      	ldr	r2, [r3, #32]
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	43db      	mvns	r3, r3
 800ea92:	401a      	ands	r2, r3
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6a1a      	ldr	r2, [r3, #32]
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	f003 031f 	and.w	r3, r3, #31
 800eaa2:	6879      	ldr	r1, [r7, #4]
 800eaa4:	fa01 f303 	lsl.w	r3, r1, r3
 800eaa8:	431a      	orrs	r2, r3
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	621a      	str	r2, [r3, #32]
}
 800eaae:	bf00      	nop
 800eab0:	371c      	adds	r7, #28
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
	...

0800eabc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b085      	sub	sp, #20
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d101      	bne.n	800ead4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ead0:	2302      	movs	r3, #2
 800ead2:	e06d      	b.n	800ebb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2201      	movs	r2, #1
 800ead8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2202      	movs	r2, #2
 800eae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a30      	ldr	r2, [pc, #192]	; (800ebbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d004      	beq.n	800eb08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4a2f      	ldr	r2, [pc, #188]	; (800ebc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d108      	bne.n	800eb1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eb0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	4313      	orrs	r3, r2
 800eb18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	68fa      	ldr	r2, [r7, #12]
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a20      	ldr	r2, [pc, #128]	; (800ebbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d022      	beq.n	800eb84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb46:	d01d      	beq.n	800eb84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a1d      	ldr	r2, [pc, #116]	; (800ebc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d018      	beq.n	800eb84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4a1c      	ldr	r2, [pc, #112]	; (800ebc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d013      	beq.n	800eb84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a1a      	ldr	r2, [pc, #104]	; (800ebcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d00e      	beq.n	800eb84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4a15      	ldr	r2, [pc, #84]	; (800ebc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d009      	beq.n	800eb84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a16      	ldr	r2, [pc, #88]	; (800ebd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d004      	beq.n	800eb84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4a15      	ldr	r2, [pc, #84]	; (800ebd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d10c      	bne.n	800eb9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	68ba      	ldr	r2, [r7, #8]
 800eb92:	4313      	orrs	r3, r2
 800eb94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	68ba      	ldr	r2, [r7, #8]
 800eb9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2201      	movs	r2, #1
 800eba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3714      	adds	r7, #20
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	40010000 	.word	0x40010000
 800ebc0:	40010400 	.word	0x40010400
 800ebc4:	40000400 	.word	0x40000400
 800ebc8:	40000800 	.word	0x40000800
 800ebcc:	40000c00 	.word	0x40000c00
 800ebd0:	40001800 	.word	0x40001800
 800ebd4:	40014000 	.word	0x40014000

0800ebd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d101      	bne.n	800ebf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ebf0:	2302      	movs	r3, #2
 800ebf2:	e065      	b.n	800ecc0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	4313      	orrs	r3, r2
 800ec08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	4313      	orrs	r3, r2
 800ec16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	4313      	orrs	r3, r2
 800ec24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4313      	orrs	r3, r2
 800ec32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	691b      	ldr	r3, [r3, #16]
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	695b      	ldr	r3, [r3, #20]
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	699b      	ldr	r3, [r3, #24]
 800ec68:	041b      	lsls	r3, r3, #16
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4a16      	ldr	r2, [pc, #88]	; (800eccc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d004      	beq.n	800ec82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a14      	ldr	r2, [pc, #80]	; (800ecd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d115      	bne.n	800ecae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8c:	051b      	lsls	r3, r3, #20
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	69db      	ldr	r3, [r3, #28]
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	6a1b      	ldr	r3, [r3, #32]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3714      	adds	r7, #20
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr
 800eccc:	40010000 	.word	0x40010000
 800ecd0:	40010400 	.word	0x40010400

0800ecd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ecdc:	bf00      	nop
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ecf0:	bf00      	nop
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ed04:	bf00      	nop
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d101      	bne.n	800ed22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e042      	b.n	800eda8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d106      	bne.n	800ed3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f7f7 fd51 	bl	80067dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2224      	movs	r2, #36	; 0x24
 800ed3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f022 0201 	bic.w	r2, r2, #1
 800ed50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 fdf8 	bl	800f948 <UART_SetConfig>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d101      	bne.n	800ed62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e022      	b.n	800eda8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d002      	beq.n	800ed70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f001 fb4c 	bl	8010408 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	685a      	ldr	r2, [r3, #4]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ed7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	689a      	ldr	r2, [r3, #8]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ed8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f042 0201 	orr.w	r2, r2, #1
 800ed9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f001 fbd3 	bl	801054c <UART_CheckIdleState>
 800eda6:	4603      	mov	r3, r0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3708      	adds	r7, #8
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b08a      	sub	sp, #40	; 0x28
 800edb4:	af02      	add	r7, sp, #8
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	603b      	str	r3, [r7, #0]
 800edbc:	4613      	mov	r3, r2
 800edbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edc6:	2b20      	cmp	r3, #32
 800edc8:	f040 8083 	bne.w	800eed2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d002      	beq.n	800edd8 <HAL_UART_Transmit+0x28>
 800edd2:	88fb      	ldrh	r3, [r7, #6]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d101      	bne.n	800eddc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800edd8:	2301      	movs	r3, #1
 800edda:	e07b      	b.n	800eed4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d101      	bne.n	800edea <HAL_UART_Transmit+0x3a>
 800ede6:	2302      	movs	r3, #2
 800ede8:	e074      	b.n	800eed4 <HAL_UART_Transmit+0x124>
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2201      	movs	r2, #1
 800edee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2221      	movs	r2, #33	; 0x21
 800edfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ee02:	f7f8 f887 	bl	8006f14 <HAL_GetTick>
 800ee06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	88fa      	ldrh	r2, [r7, #6]
 800ee0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	88fa      	ldrh	r2, [r7, #6]
 800ee14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee20:	d108      	bne.n	800ee34 <HAL_UART_Transmit+0x84>
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	691b      	ldr	r3, [r3, #16]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d104      	bne.n	800ee34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	61bb      	str	r3, [r7, #24]
 800ee32:	e003      	b.n	800ee3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ee44:	e02c      	b.n	800eea0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	2180      	movs	r1, #128	; 0x80
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	f001 fbc6 	bl	80105e2 <UART_WaitOnFlagUntilTimeout>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d001      	beq.n	800ee60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ee5c:	2303      	movs	r3, #3
 800ee5e:	e039      	b.n	800eed4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10b      	bne.n	800ee7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	881b      	ldrh	r3, [r3, #0]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ee74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	3302      	adds	r3, #2
 800ee7a:	61bb      	str	r3, [r7, #24]
 800ee7c:	e007      	b.n	800ee8e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	781a      	ldrb	r2, [r3, #0]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	3b01      	subs	r3, #1
 800ee98:	b29a      	uxth	r2, r3
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d1cc      	bne.n	800ee46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	2140      	movs	r1, #64	; 0x40
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f001 fb93 	bl	80105e2 <UART_WaitOnFlagUntilTimeout>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800eec2:	2303      	movs	r3, #3
 800eec4:	e006      	b.n	800eed4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2220      	movs	r2, #32
 800eeca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800eece:	2300      	movs	r3, #0
 800eed0:	e000      	b.n	800eed4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800eed2:	2302      	movs	r3, #2
  }
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3720      	adds	r7, #32
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08a      	sub	sp, #40	; 0x28
 800eee0:	af02      	add	r7, sp, #8
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	603b      	str	r3, [r7, #0]
 800eee8:	4613      	mov	r3, r2
 800eeea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eef2:	2b20      	cmp	r3, #32
 800eef4:	f040 80c0 	bne.w	800f078 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d002      	beq.n	800ef04 <HAL_UART_Receive+0x28>
 800eefe:	88fb      	ldrh	r3, [r7, #6]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d101      	bne.n	800ef08 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ef04:	2301      	movs	r3, #1
 800ef06:	e0b8      	b.n	800f07a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d101      	bne.n	800ef16 <HAL_UART_Receive+0x3a>
 800ef12:	2302      	movs	r3, #2
 800ef14:	e0b1      	b.n	800f07a <HAL_UART_Receive+0x19e>
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	2201      	movs	r2, #1
 800ef1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2200      	movs	r2, #0
 800ef22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2222      	movs	r2, #34	; 0x22
 800ef2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2200      	movs	r2, #0
 800ef32:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef34:	f7f7 ffee 	bl	8006f14 <HAL_GetTick>
 800ef38:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	88fa      	ldrh	r2, [r7, #6]
 800ef3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	88fa      	ldrh	r2, [r7, #6]
 800ef46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef52:	d10e      	bne.n	800ef72 <HAL_UART_Receive+0x96>
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d105      	bne.n	800ef68 <HAL_UART_Receive+0x8c>
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ef62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef66:	e02d      	b.n	800efc4 <HAL_UART_Receive+0xe8>
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	22ff      	movs	r2, #255	; 0xff
 800ef6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef70:	e028      	b.n	800efc4 <HAL_UART_Receive+0xe8>
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	689b      	ldr	r3, [r3, #8]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d10d      	bne.n	800ef96 <HAL_UART_Receive+0xba>
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d104      	bne.n	800ef8c <HAL_UART_Receive+0xb0>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	22ff      	movs	r2, #255	; 0xff
 800ef86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef8a:	e01b      	b.n	800efc4 <HAL_UART_Receive+0xe8>
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	227f      	movs	r2, #127	; 0x7f
 800ef90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef94:	e016      	b.n	800efc4 <HAL_UART_Receive+0xe8>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef9e:	d10d      	bne.n	800efbc <HAL_UART_Receive+0xe0>
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d104      	bne.n	800efb2 <HAL_UART_Receive+0xd6>
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	227f      	movs	r2, #127	; 0x7f
 800efac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efb0:	e008      	b.n	800efc4 <HAL_UART_Receive+0xe8>
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	223f      	movs	r2, #63	; 0x3f
 800efb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efba:	e003      	b.n	800efc4 <HAL_UART_Receive+0xe8>
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2200      	movs	r2, #0
 800efc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efd4:	d108      	bne.n	800efe8 <HAL_UART_Receive+0x10c>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	691b      	ldr	r3, [r3, #16]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d104      	bne.n	800efe8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800efde:	2300      	movs	r3, #0
 800efe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	61bb      	str	r3, [r7, #24]
 800efe6:	e003      	b.n	800eff0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800efec:	2300      	movs	r3, #0
 800efee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800eff8:	e032      	b.n	800f060 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	2200      	movs	r2, #0
 800f002:	2120      	movs	r1, #32
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f001 faec 	bl	80105e2 <UART_WaitOnFlagUntilTimeout>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d001      	beq.n	800f014 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800f010:	2303      	movs	r3, #3
 800f012:	e032      	b.n	800f07a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10c      	bne.n	800f034 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f020:	b29a      	uxth	r2, r3
 800f022:	8a7b      	ldrh	r3, [r7, #18]
 800f024:	4013      	ands	r3, r2
 800f026:	b29a      	uxth	r2, r3
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	3302      	adds	r3, #2
 800f030:	61bb      	str	r3, [r7, #24]
 800f032:	e00c      	b.n	800f04e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f03a:	b2da      	uxtb	r2, r3
 800f03c:	8a7b      	ldrh	r3, [r7, #18]
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	4013      	ands	r3, r2
 800f042:	b2da      	uxtb	r2, r3
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	3301      	adds	r3, #1
 800f04c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f054:	b29b      	uxth	r3, r3
 800f056:	3b01      	subs	r3, #1
 800f058:	b29a      	uxth	r2, r3
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f066:	b29b      	uxth	r3, r3
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1c6      	bne.n	800effa <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2220      	movs	r2, #32
 800f070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	e000      	b.n	800f07a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800f078:	2302      	movs	r3, #2
  }
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3720      	adds	r7, #32
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
	...

0800f084 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b08a      	sub	sp, #40	; 0x28
 800f088:	af00      	add	r7, sp, #0
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	4613      	mov	r3, r2
 800f090:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f098:	2b20      	cmp	r3, #32
 800f09a:	d17a      	bne.n	800f192 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d002      	beq.n	800f0a8 <HAL_UART_Transmit_DMA+0x24>
 800f0a2:	88fb      	ldrh	r3, [r7, #6]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d101      	bne.n	800f0ac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e073      	b.n	800f194 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d101      	bne.n	800f0ba <HAL_UART_Transmit_DMA+0x36>
 800f0b6:	2302      	movs	r3, #2
 800f0b8:	e06c      	b.n	800f194 <HAL_UART_Transmit_DMA+0x110>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	88fa      	ldrh	r2, [r7, #6]
 800f0cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	88fa      	ldrh	r2, [r7, #6]
 800f0d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2221      	movs	r2, #33	; 0x21
 800f0e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d02c      	beq.n	800f14a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0f4:	4a29      	ldr	r2, [pc, #164]	; (800f19c <HAL_UART_Transmit_DMA+0x118>)
 800f0f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0fc:	4a28      	ldr	r2, [pc, #160]	; (800f1a0 <HAL_UART_Transmit_DMA+0x11c>)
 800f0fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f104:	4a27      	ldr	r2, [pc, #156]	; (800f1a4 <HAL_UART_Transmit_DMA+0x120>)
 800f106:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f10c:	2200      	movs	r2, #0
 800f10e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f118:	4619      	mov	r1, r3
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3328      	adds	r3, #40	; 0x28
 800f120:	461a      	mov	r2, r3
 800f122:	88fb      	ldrh	r3, [r7, #6]
 800f124:	f7f8 fda8 	bl	8007c78 <HAL_DMA_Start_IT>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d00d      	beq.n	800f14a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2210      	movs	r2, #16
 800f132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2220      	movs	r2, #32
 800f142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800f146:	2301      	movs	r3, #1
 800f148:	e024      	b.n	800f194 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	2240      	movs	r2, #64	; 0x40
 800f150:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2200      	movs	r2, #0
 800f156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	3308      	adds	r3, #8
 800f160:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	e853 3f00 	ldrex	r3, [r3]
 800f168:	613b      	str	r3, [r7, #16]
   return(result);
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f170:	627b      	str	r3, [r7, #36]	; 0x24
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	3308      	adds	r3, #8
 800f178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f17a:	623a      	str	r2, [r7, #32]
 800f17c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f17e:	69f9      	ldr	r1, [r7, #28]
 800f180:	6a3a      	ldr	r2, [r7, #32]
 800f182:	e841 2300 	strex	r3, r2, [r1]
 800f186:	61bb      	str	r3, [r7, #24]
   return(result);
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d1e5      	bne.n	800f15a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	e000      	b.n	800f194 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800f192:	2302      	movs	r3, #2
  }
}
 800f194:	4618      	mov	r0, r3
 800f196:	3728      	adds	r7, #40	; 0x28
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	08010a15 	.word	0x08010a15
 800f1a0:	08010aab 	.word	0x08010aab
 800f1a4:	08010c21 	.word	0x08010c21

0800f1a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b0ba      	sub	sp, #232	; 0xe8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	69db      	ldr	r3, [r3, #28]
 800f1b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	689b      	ldr	r3, [r3, #8]
 800f1ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f1ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f1d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800f1d6:	4013      	ands	r3, r2
 800f1d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f1dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d11b      	bne.n	800f21c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1e8:	f003 0320 	and.w	r3, r3, #32
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d015      	beq.n	800f21c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1f4:	f003 0320 	and.w	r3, r3, #32
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d105      	bne.n	800f208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f1fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f204:	2b00      	cmp	r3, #0
 800f206:	d009      	beq.n	800f21c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	f000 835a 	beq.w	800f8c6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	4798      	blx	r3
      }
      return;
 800f21a:	e354      	b.n	800f8c6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f21c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f220:	2b00      	cmp	r3, #0
 800f222:	f000 811f 	beq.w	800f464 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f22a:	4b8b      	ldr	r3, [pc, #556]	; (800f458 <HAL_UART_IRQHandler+0x2b0>)
 800f22c:	4013      	ands	r3, r2
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d106      	bne.n	800f240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f236:	4b89      	ldr	r3, [pc, #548]	; (800f45c <HAL_UART_IRQHandler+0x2b4>)
 800f238:	4013      	ands	r3, r2
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f000 8112 	beq.w	800f464 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f244:	f003 0301 	and.w	r3, r3, #1
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d011      	beq.n	800f270 <HAL_UART_IRQHandler+0xc8>
 800f24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00b      	beq.n	800f270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2201      	movs	r2, #1
 800f25e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f266:	f043 0201 	orr.w	r2, r3, #1
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f274:	f003 0302 	and.w	r3, r3, #2
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d011      	beq.n	800f2a0 <HAL_UART_IRQHandler+0xf8>
 800f27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f280:	f003 0301 	and.w	r3, r3, #1
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00b      	beq.n	800f2a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2202      	movs	r2, #2
 800f28e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f296:	f043 0204 	orr.w	r2, r3, #4
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2a4:	f003 0304 	and.w	r3, r3, #4
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d011      	beq.n	800f2d0 <HAL_UART_IRQHandler+0x128>
 800f2ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2b0:	f003 0301 	and.w	r3, r3, #1
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00b      	beq.n	800f2d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2204      	movs	r2, #4
 800f2be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2c6:	f043 0202 	orr.w	r2, r3, #2
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2d4:	f003 0308 	and.w	r3, r3, #8
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d017      	beq.n	800f30c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2e0:	f003 0320 	and.w	r3, r3, #32
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d105      	bne.n	800f2f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f2e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f2ec:	4b5a      	ldr	r3, [pc, #360]	; (800f458 <HAL_UART_IRQHandler+0x2b0>)
 800f2ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00b      	beq.n	800f30c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2208      	movs	r2, #8
 800f2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f302:	f043 0208 	orr.w	r2, r3, #8
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f314:	2b00      	cmp	r3, #0
 800f316:	d012      	beq.n	800f33e <HAL_UART_IRQHandler+0x196>
 800f318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f31c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00c      	beq.n	800f33e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f32c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f334:	f043 0220 	orr.w	r2, r3, #32
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f344:	2b00      	cmp	r3, #0
 800f346:	f000 82c0 	beq.w	800f8ca <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f34e:	f003 0320 	and.w	r3, r3, #32
 800f352:	2b00      	cmp	r3, #0
 800f354:	d013      	beq.n	800f37e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f35a:	f003 0320 	and.w	r3, r3, #32
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d105      	bne.n	800f36e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d007      	beq.n	800f37e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f372:	2b00      	cmp	r3, #0
 800f374:	d003      	beq.n	800f37e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f392:	2b40      	cmp	r3, #64	; 0x40
 800f394:	d005      	beq.n	800f3a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f39a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d04f      	beq.n	800f442 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f001 fad0 	bl	8010948 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3b2:	2b40      	cmp	r3, #64	; 0x40
 800f3b4:	d141      	bne.n	800f43a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	3308      	adds	r3, #8
 800f3bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3c4:	e853 3f00 	ldrex	r3, [r3]
 800f3c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f3cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	3308      	adds	r3, #8
 800f3de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f3e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f3e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f3ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f3f2:	e841 2300 	strex	r3, r2, [r1]
 800f3f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f3fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1d9      	bne.n	800f3b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f406:	2b00      	cmp	r3, #0
 800f408:	d013      	beq.n	800f432 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f40e:	4a14      	ldr	r2, [pc, #80]	; (800f460 <HAL_UART_IRQHandler+0x2b8>)
 800f410:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f416:	4618      	mov	r0, r3
 800f418:	f7f9 f9b6 	bl	8008788 <HAL_DMA_Abort_IT>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d017      	beq.n	800f452 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f428:	687a      	ldr	r2, [r7, #4]
 800f42a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f42c:	4610      	mov	r0, r2
 800f42e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f430:	e00f      	b.n	800f452 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 fa7e 	bl	800f934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f438:	e00b      	b.n	800f452 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 fa7a 	bl	800f934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f440:	e007      	b.n	800f452 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 fa76 	bl	800f934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f450:	e23b      	b.n	800f8ca <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f452:	bf00      	nop
    return;
 800f454:	e239      	b.n	800f8ca <HAL_UART_IRQHandler+0x722>
 800f456:	bf00      	nop
 800f458:	10000001 	.word	0x10000001
 800f45c:	04000120 	.word	0x04000120
 800f460:	08010ca1 	.word	0x08010ca1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f468:	2b01      	cmp	r3, #1
 800f46a:	f040 81ce 	bne.w	800f80a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f472:	f003 0310 	and.w	r3, r3, #16
 800f476:	2b00      	cmp	r3, #0
 800f478:	f000 81c7 	beq.w	800f80a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f480:	f003 0310 	and.w	r3, r3, #16
 800f484:	2b00      	cmp	r3, #0
 800f486:	f000 81c0 	beq.w	800f80a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	2210      	movs	r2, #16
 800f490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	689b      	ldr	r3, [r3, #8]
 800f498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f49c:	2b40      	cmp	r3, #64	; 0x40
 800f49e:	f040 813b 	bne.w	800f718 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4a8b      	ldr	r2, [pc, #556]	; (800f6d8 <HAL_UART_IRQHandler+0x530>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d059      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a89      	ldr	r2, [pc, #548]	; (800f6dc <HAL_UART_IRQHandler+0x534>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d053      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a87      	ldr	r2, [pc, #540]	; (800f6e0 <HAL_UART_IRQHandler+0x538>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d04d      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4a85      	ldr	r2, [pc, #532]	; (800f6e4 <HAL_UART_IRQHandler+0x53c>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d047      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4a83      	ldr	r2, [pc, #524]	; (800f6e8 <HAL_UART_IRQHandler+0x540>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d041      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4a81      	ldr	r2, [pc, #516]	; (800f6ec <HAL_UART_IRQHandler+0x544>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d03b      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a7f      	ldr	r2, [pc, #508]	; (800f6f0 <HAL_UART_IRQHandler+0x548>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d035      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a7d      	ldr	r2, [pc, #500]	; (800f6f4 <HAL_UART_IRQHandler+0x54c>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d02f      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4a7b      	ldr	r2, [pc, #492]	; (800f6f8 <HAL_UART_IRQHandler+0x550>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d029      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4a79      	ldr	r2, [pc, #484]	; (800f6fc <HAL_UART_IRQHandler+0x554>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d023      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a77      	ldr	r2, [pc, #476]	; (800f700 <HAL_UART_IRQHandler+0x558>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d01d      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4a75      	ldr	r2, [pc, #468]	; (800f704 <HAL_UART_IRQHandler+0x55c>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d017      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4a73      	ldr	r2, [pc, #460]	; (800f708 <HAL_UART_IRQHandler+0x560>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d011      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a71      	ldr	r2, [pc, #452]	; (800f70c <HAL_UART_IRQHandler+0x564>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d00b      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a6f      	ldr	r2, [pc, #444]	; (800f710 <HAL_UART_IRQHandler+0x568>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d005      	beq.n	800f562 <HAL_UART_IRQHandler+0x3ba>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4a6d      	ldr	r2, [pc, #436]	; (800f714 <HAL_UART_IRQHandler+0x56c>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d105      	bne.n	800f56e <HAL_UART_IRQHandler+0x3c6>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	e004      	b.n	800f578 <HAL_UART_IRQHandler+0x3d0>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	b29b      	uxth	r3, r3
 800f578:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f57c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f580:	2b00      	cmp	r3, #0
 800f582:	f000 81a4 	beq.w	800f8ce <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f58c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f590:	429a      	cmp	r2, r3
 800f592:	f080 819c 	bcs.w	800f8ce <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f59c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5a4:	69db      	ldr	r3, [r3, #28]
 800f5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5aa:	f000 8086 	beq.w	800f6ba <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f5ba:	e853 3f00 	ldrex	r3, [r3]
 800f5be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f5c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f5c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f5d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f5dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f5e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f5e8:	e841 2300 	strex	r3, r2, [r1]
 800f5ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f5f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d1da      	bne.n	800f5ae <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	3308      	adds	r3, #8
 800f5fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f602:	e853 3f00 	ldrex	r3, [r3]
 800f606:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f60a:	f023 0301 	bic.w	r3, r3, #1
 800f60e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	3308      	adds	r3, #8
 800f618:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f61c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f620:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f622:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f624:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f628:	e841 2300 	strex	r3, r2, [r1]
 800f62c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f62e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f630:	2b00      	cmp	r3, #0
 800f632:	d1e1      	bne.n	800f5f8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	3308      	adds	r3, #8
 800f63a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f63c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f63e:	e853 3f00 	ldrex	r3, [r3]
 800f642:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f64a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	3308      	adds	r3, #8
 800f654:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f658:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f65a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f65c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f65e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f660:	e841 2300 	strex	r3, r2, [r1]
 800f664:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1e3      	bne.n	800f634 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2220      	movs	r2, #32
 800f670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f682:	e853 3f00 	ldrex	r3, [r3]
 800f686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f68a:	f023 0310 	bic.w	r3, r3, #16
 800f68e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	461a      	mov	r2, r3
 800f698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f69c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f69e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f6a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f6a4:	e841 2300 	strex	r3, r2, [r1]
 800f6a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1e4      	bne.n	800f67a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7f8 fd49 	bl	800814c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f7f3 fdde 	bl	8003290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f6d4:	e0fb      	b.n	800f8ce <HAL_UART_IRQHandler+0x726>
 800f6d6:	bf00      	nop
 800f6d8:	40020010 	.word	0x40020010
 800f6dc:	40020028 	.word	0x40020028
 800f6e0:	40020040 	.word	0x40020040
 800f6e4:	40020058 	.word	0x40020058
 800f6e8:	40020070 	.word	0x40020070
 800f6ec:	40020088 	.word	0x40020088
 800f6f0:	400200a0 	.word	0x400200a0
 800f6f4:	400200b8 	.word	0x400200b8
 800f6f8:	40020410 	.word	0x40020410
 800f6fc:	40020428 	.word	0x40020428
 800f700:	40020440 	.word	0x40020440
 800f704:	40020458 	.word	0x40020458
 800f708:	40020470 	.word	0x40020470
 800f70c:	40020488 	.word	0x40020488
 800f710:	400204a0 	.word	0x400204a0
 800f714:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f724:	b29b      	uxth	r3, r3
 800f726:	1ad3      	subs	r3, r2, r3
 800f728:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f732:	b29b      	uxth	r3, r3
 800f734:	2b00      	cmp	r3, #0
 800f736:	f000 80cc 	beq.w	800f8d2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f73a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f73e:	2b00      	cmp	r3, #0
 800f740:	f000 80c7 	beq.w	800f8d2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74c:	e853 3f00 	ldrex	r3, [r3]
 800f750:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f754:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	461a      	mov	r2, r3
 800f762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f766:	647b      	str	r3, [r7, #68]	; 0x44
 800f768:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f76a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f76c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f76e:	e841 2300 	strex	r3, r2, [r1]
 800f772:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1e4      	bne.n	800f744 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	3308      	adds	r3, #8
 800f780:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f784:	e853 3f00 	ldrex	r3, [r3]
 800f788:	623b      	str	r3, [r7, #32]
   return(result);
 800f78a:	6a3a      	ldr	r2, [r7, #32]
 800f78c:	4b54      	ldr	r3, [pc, #336]	; (800f8e0 <HAL_UART_IRQHandler+0x738>)
 800f78e:	4013      	ands	r3, r2
 800f790:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	3308      	adds	r3, #8
 800f79a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f79e:	633a      	str	r2, [r7, #48]	; 0x30
 800f7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7a6:	e841 2300 	strex	r3, r2, [r1]
 800f7aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d1e3      	bne.n	800f77a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2220      	movs	r2, #32
 800f7b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	e853 3f00 	ldrex	r3, [r3]
 800f7d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f023 0310 	bic.w	r3, r3, #16
 800f7da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f7e8:	61fb      	str	r3, [r7, #28]
 800f7ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ec:	69b9      	ldr	r1, [r7, #24]
 800f7ee:	69fa      	ldr	r2, [r7, #28]
 800f7f0:	e841 2300 	strex	r3, r2, [r1]
 800f7f4:	617b      	str	r3, [r7, #20]
   return(result);
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d1e4      	bne.n	800f7c6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f7fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f800:	4619      	mov	r1, r3
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7f3 fd44 	bl	8003290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f808:	e063      	b.n	800f8d2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f80e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00e      	beq.n	800f834 <HAL_UART_IRQHandler+0x68c>
 800f816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f81a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d008      	beq.n	800f834 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f82a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f001 fa78 	bl	8010d22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f832:	e051      	b.n	800f8d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d014      	beq.n	800f86a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d105      	bne.n	800f858 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f854:	2b00      	cmp	r3, #0
 800f856:	d008      	beq.n	800f86a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d03a      	beq.n	800f8d6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	4798      	blx	r3
    }
    return;
 800f868:	e035      	b.n	800f8d6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f872:	2b00      	cmp	r3, #0
 800f874:	d009      	beq.n	800f88a <HAL_UART_IRQHandler+0x6e2>
 800f876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d003      	beq.n	800f88a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f001 fa22 	bl	8010ccc <UART_EndTransmit_IT>
    return;
 800f888:	e026      	b.n	800f8d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f88a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f88e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f892:	2b00      	cmp	r3, #0
 800f894:	d009      	beq.n	800f8aa <HAL_UART_IRQHandler+0x702>
 800f896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f89a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d003      	beq.n	800f8aa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f001 fa51 	bl	8010d4a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f8a8:	e016      	b.n	800f8d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f8aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d010      	beq.n	800f8d8 <HAL_UART_IRQHandler+0x730>
 800f8b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	da0c      	bge.n	800f8d8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f001 fa39 	bl	8010d36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f8c4:	e008      	b.n	800f8d8 <HAL_UART_IRQHandler+0x730>
      return;
 800f8c6:	bf00      	nop
 800f8c8:	e006      	b.n	800f8d8 <HAL_UART_IRQHandler+0x730>
    return;
 800f8ca:	bf00      	nop
 800f8cc:	e004      	b.n	800f8d8 <HAL_UART_IRQHandler+0x730>
      return;
 800f8ce:	bf00      	nop
 800f8d0:	e002      	b.n	800f8d8 <HAL_UART_IRQHandler+0x730>
      return;
 800f8d2:	bf00      	nop
 800f8d4:	e000      	b.n	800f8d8 <HAL_UART_IRQHandler+0x730>
    return;
 800f8d6:	bf00      	nop
  }
}
 800f8d8:	37e8      	adds	r7, #232	; 0xe8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	effffffe 	.word	0xeffffffe

0800f8e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f8ec:	bf00      	nop
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f900:	bf00      	nop
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f914:	bf00      	nop
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f920:	b480      	push	{r7}
 800f922:	b083      	sub	sp, #12
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f928:	bf00      	nop
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f93c:	bf00      	nop
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f948:	b5b0      	push	{r4, r5, r7, lr}
 800f94a:	b08e      	sub	sp, #56	; 0x38
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f950:	2300      	movs	r3, #0
 800f952:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	689a      	ldr	r2, [r3, #8]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	691b      	ldr	r3, [r3, #16]
 800f95e:	431a      	orrs	r2, r3
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	695b      	ldr	r3, [r3, #20]
 800f964:	431a      	orrs	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	69db      	ldr	r3, [r3, #28]
 800f96a:	4313      	orrs	r3, r2
 800f96c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	4bbf      	ldr	r3, [pc, #764]	; (800fc74 <UART_SetConfig+0x32c>)
 800f976:	4013      	ands	r3, r2
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	6812      	ldr	r2, [r2, #0]
 800f97c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f97e:	430b      	orrs	r3, r1
 800f980:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	68da      	ldr	r2, [r3, #12]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	430a      	orrs	r2, r1
 800f996:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	699b      	ldr	r3, [r3, #24]
 800f99c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4ab5      	ldr	r2, [pc, #724]	; (800fc78 <UART_SetConfig+0x330>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d004      	beq.n	800f9b2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6a1b      	ldr	r3, [r3, #32]
 800f9ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	689a      	ldr	r2, [r3, #8]
 800f9b8:	4bb0      	ldr	r3, [pc, #704]	; (800fc7c <UART_SetConfig+0x334>)
 800f9ba:	4013      	ands	r3, r2
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	6812      	ldr	r2, [r2, #0]
 800f9c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f9c2:	430b      	orrs	r3, r1
 800f9c4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9cc:	f023 010f 	bic.w	r1, r3, #15
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	430a      	orrs	r2, r1
 800f9da:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4aa7      	ldr	r2, [pc, #668]	; (800fc80 <UART_SetConfig+0x338>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d176      	bne.n	800fad4 <UART_SetConfig+0x18c>
 800f9e6:	4ba7      	ldr	r3, [pc, #668]	; (800fc84 <UART_SetConfig+0x33c>)
 800f9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f9ee:	2b28      	cmp	r3, #40	; 0x28
 800f9f0:	d86c      	bhi.n	800facc <UART_SetConfig+0x184>
 800f9f2:	a201      	add	r2, pc, #4	; (adr r2, 800f9f8 <UART_SetConfig+0xb0>)
 800f9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f8:	0800fa9d 	.word	0x0800fa9d
 800f9fc:	0800facd 	.word	0x0800facd
 800fa00:	0800facd 	.word	0x0800facd
 800fa04:	0800facd 	.word	0x0800facd
 800fa08:	0800facd 	.word	0x0800facd
 800fa0c:	0800facd 	.word	0x0800facd
 800fa10:	0800facd 	.word	0x0800facd
 800fa14:	0800facd 	.word	0x0800facd
 800fa18:	0800faa5 	.word	0x0800faa5
 800fa1c:	0800facd 	.word	0x0800facd
 800fa20:	0800facd 	.word	0x0800facd
 800fa24:	0800facd 	.word	0x0800facd
 800fa28:	0800facd 	.word	0x0800facd
 800fa2c:	0800facd 	.word	0x0800facd
 800fa30:	0800facd 	.word	0x0800facd
 800fa34:	0800facd 	.word	0x0800facd
 800fa38:	0800faad 	.word	0x0800faad
 800fa3c:	0800facd 	.word	0x0800facd
 800fa40:	0800facd 	.word	0x0800facd
 800fa44:	0800facd 	.word	0x0800facd
 800fa48:	0800facd 	.word	0x0800facd
 800fa4c:	0800facd 	.word	0x0800facd
 800fa50:	0800facd 	.word	0x0800facd
 800fa54:	0800facd 	.word	0x0800facd
 800fa58:	0800fab5 	.word	0x0800fab5
 800fa5c:	0800facd 	.word	0x0800facd
 800fa60:	0800facd 	.word	0x0800facd
 800fa64:	0800facd 	.word	0x0800facd
 800fa68:	0800facd 	.word	0x0800facd
 800fa6c:	0800facd 	.word	0x0800facd
 800fa70:	0800facd 	.word	0x0800facd
 800fa74:	0800facd 	.word	0x0800facd
 800fa78:	0800fabd 	.word	0x0800fabd
 800fa7c:	0800facd 	.word	0x0800facd
 800fa80:	0800facd 	.word	0x0800facd
 800fa84:	0800facd 	.word	0x0800facd
 800fa88:	0800facd 	.word	0x0800facd
 800fa8c:	0800facd 	.word	0x0800facd
 800fa90:	0800facd 	.word	0x0800facd
 800fa94:	0800facd 	.word	0x0800facd
 800fa98:	0800fac5 	.word	0x0800fac5
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800faa2:	e222      	b.n	800feea <UART_SetConfig+0x5a2>
 800faa4:	2304      	movs	r3, #4
 800faa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800faaa:	e21e      	b.n	800feea <UART_SetConfig+0x5a2>
 800faac:	2308      	movs	r3, #8
 800faae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fab2:	e21a      	b.n	800feea <UART_SetConfig+0x5a2>
 800fab4:	2310      	movs	r3, #16
 800fab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800faba:	e216      	b.n	800feea <UART_SetConfig+0x5a2>
 800fabc:	2320      	movs	r3, #32
 800fabe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fac2:	e212      	b.n	800feea <UART_SetConfig+0x5a2>
 800fac4:	2340      	movs	r3, #64	; 0x40
 800fac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800faca:	e20e      	b.n	800feea <UART_SetConfig+0x5a2>
 800facc:	2380      	movs	r3, #128	; 0x80
 800face:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fad2:	e20a      	b.n	800feea <UART_SetConfig+0x5a2>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a6b      	ldr	r2, [pc, #428]	; (800fc88 <UART_SetConfig+0x340>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d130      	bne.n	800fb40 <UART_SetConfig+0x1f8>
 800fade:	4b69      	ldr	r3, [pc, #420]	; (800fc84 <UART_SetConfig+0x33c>)
 800fae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fae2:	f003 0307 	and.w	r3, r3, #7
 800fae6:	2b05      	cmp	r3, #5
 800fae8:	d826      	bhi.n	800fb38 <UART_SetConfig+0x1f0>
 800faea:	a201      	add	r2, pc, #4	; (adr r2, 800faf0 <UART_SetConfig+0x1a8>)
 800faec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf0:	0800fb09 	.word	0x0800fb09
 800faf4:	0800fb11 	.word	0x0800fb11
 800faf8:	0800fb19 	.word	0x0800fb19
 800fafc:	0800fb21 	.word	0x0800fb21
 800fb00:	0800fb29 	.word	0x0800fb29
 800fb04:	0800fb31 	.word	0x0800fb31
 800fb08:	2300      	movs	r3, #0
 800fb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb0e:	e1ec      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb10:	2304      	movs	r3, #4
 800fb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb16:	e1e8      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb18:	2308      	movs	r3, #8
 800fb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb1e:	e1e4      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb20:	2310      	movs	r3, #16
 800fb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb26:	e1e0      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb28:	2320      	movs	r3, #32
 800fb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb2e:	e1dc      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb30:	2340      	movs	r3, #64	; 0x40
 800fb32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb36:	e1d8      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb38:	2380      	movs	r3, #128	; 0x80
 800fb3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb3e:	e1d4      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4a51      	ldr	r2, [pc, #324]	; (800fc8c <UART_SetConfig+0x344>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d130      	bne.n	800fbac <UART_SetConfig+0x264>
 800fb4a:	4b4e      	ldr	r3, [pc, #312]	; (800fc84 <UART_SetConfig+0x33c>)
 800fb4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb4e:	f003 0307 	and.w	r3, r3, #7
 800fb52:	2b05      	cmp	r3, #5
 800fb54:	d826      	bhi.n	800fba4 <UART_SetConfig+0x25c>
 800fb56:	a201      	add	r2, pc, #4	; (adr r2, 800fb5c <UART_SetConfig+0x214>)
 800fb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb5c:	0800fb75 	.word	0x0800fb75
 800fb60:	0800fb7d 	.word	0x0800fb7d
 800fb64:	0800fb85 	.word	0x0800fb85
 800fb68:	0800fb8d 	.word	0x0800fb8d
 800fb6c:	0800fb95 	.word	0x0800fb95
 800fb70:	0800fb9d 	.word	0x0800fb9d
 800fb74:	2300      	movs	r3, #0
 800fb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb7a:	e1b6      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb7c:	2304      	movs	r3, #4
 800fb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb82:	e1b2      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb84:	2308      	movs	r3, #8
 800fb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb8a:	e1ae      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb8c:	2310      	movs	r3, #16
 800fb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb92:	e1aa      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb94:	2320      	movs	r3, #32
 800fb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb9a:	e1a6      	b.n	800feea <UART_SetConfig+0x5a2>
 800fb9c:	2340      	movs	r3, #64	; 0x40
 800fb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fba2:	e1a2      	b.n	800feea <UART_SetConfig+0x5a2>
 800fba4:	2380      	movs	r3, #128	; 0x80
 800fba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbaa:	e19e      	b.n	800feea <UART_SetConfig+0x5a2>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	4a37      	ldr	r2, [pc, #220]	; (800fc90 <UART_SetConfig+0x348>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d130      	bne.n	800fc18 <UART_SetConfig+0x2d0>
 800fbb6:	4b33      	ldr	r3, [pc, #204]	; (800fc84 <UART_SetConfig+0x33c>)
 800fbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbba:	f003 0307 	and.w	r3, r3, #7
 800fbbe:	2b05      	cmp	r3, #5
 800fbc0:	d826      	bhi.n	800fc10 <UART_SetConfig+0x2c8>
 800fbc2:	a201      	add	r2, pc, #4	; (adr r2, 800fbc8 <UART_SetConfig+0x280>)
 800fbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc8:	0800fbe1 	.word	0x0800fbe1
 800fbcc:	0800fbe9 	.word	0x0800fbe9
 800fbd0:	0800fbf1 	.word	0x0800fbf1
 800fbd4:	0800fbf9 	.word	0x0800fbf9
 800fbd8:	0800fc01 	.word	0x0800fc01
 800fbdc:	0800fc09 	.word	0x0800fc09
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbe6:	e180      	b.n	800feea <UART_SetConfig+0x5a2>
 800fbe8:	2304      	movs	r3, #4
 800fbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbee:	e17c      	b.n	800feea <UART_SetConfig+0x5a2>
 800fbf0:	2308      	movs	r3, #8
 800fbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbf6:	e178      	b.n	800feea <UART_SetConfig+0x5a2>
 800fbf8:	2310      	movs	r3, #16
 800fbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbfe:	e174      	b.n	800feea <UART_SetConfig+0x5a2>
 800fc00:	2320      	movs	r3, #32
 800fc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc06:	e170      	b.n	800feea <UART_SetConfig+0x5a2>
 800fc08:	2340      	movs	r3, #64	; 0x40
 800fc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc0e:	e16c      	b.n	800feea <UART_SetConfig+0x5a2>
 800fc10:	2380      	movs	r3, #128	; 0x80
 800fc12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc16:	e168      	b.n	800feea <UART_SetConfig+0x5a2>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4a1d      	ldr	r2, [pc, #116]	; (800fc94 <UART_SetConfig+0x34c>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d142      	bne.n	800fca8 <UART_SetConfig+0x360>
 800fc22:	4b18      	ldr	r3, [pc, #96]	; (800fc84 <UART_SetConfig+0x33c>)
 800fc24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc26:	f003 0307 	and.w	r3, r3, #7
 800fc2a:	2b05      	cmp	r3, #5
 800fc2c:	d838      	bhi.n	800fca0 <UART_SetConfig+0x358>
 800fc2e:	a201      	add	r2, pc, #4	; (adr r2, 800fc34 <UART_SetConfig+0x2ec>)
 800fc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc34:	0800fc4d 	.word	0x0800fc4d
 800fc38:	0800fc55 	.word	0x0800fc55
 800fc3c:	0800fc5d 	.word	0x0800fc5d
 800fc40:	0800fc65 	.word	0x0800fc65
 800fc44:	0800fc6d 	.word	0x0800fc6d
 800fc48:	0800fc99 	.word	0x0800fc99
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc52:	e14a      	b.n	800feea <UART_SetConfig+0x5a2>
 800fc54:	2304      	movs	r3, #4
 800fc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc5a:	e146      	b.n	800feea <UART_SetConfig+0x5a2>
 800fc5c:	2308      	movs	r3, #8
 800fc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc62:	e142      	b.n	800feea <UART_SetConfig+0x5a2>
 800fc64:	2310      	movs	r3, #16
 800fc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc6a:	e13e      	b.n	800feea <UART_SetConfig+0x5a2>
 800fc6c:	2320      	movs	r3, #32
 800fc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc72:	e13a      	b.n	800feea <UART_SetConfig+0x5a2>
 800fc74:	cfff69f3 	.word	0xcfff69f3
 800fc78:	58000c00 	.word	0x58000c00
 800fc7c:	11fff4ff 	.word	0x11fff4ff
 800fc80:	40011000 	.word	0x40011000
 800fc84:	58024400 	.word	0x58024400
 800fc88:	40004400 	.word	0x40004400
 800fc8c:	40004800 	.word	0x40004800
 800fc90:	40004c00 	.word	0x40004c00
 800fc94:	40005000 	.word	0x40005000
 800fc98:	2340      	movs	r3, #64	; 0x40
 800fc9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc9e:	e124      	b.n	800feea <UART_SetConfig+0x5a2>
 800fca0:	2380      	movs	r3, #128	; 0x80
 800fca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fca6:	e120      	b.n	800feea <UART_SetConfig+0x5a2>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4acc      	ldr	r2, [pc, #816]	; (800ffe0 <UART_SetConfig+0x698>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d176      	bne.n	800fda0 <UART_SetConfig+0x458>
 800fcb2:	4bcc      	ldr	r3, [pc, #816]	; (800ffe4 <UART_SetConfig+0x69c>)
 800fcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fcba:	2b28      	cmp	r3, #40	; 0x28
 800fcbc:	d86c      	bhi.n	800fd98 <UART_SetConfig+0x450>
 800fcbe:	a201      	add	r2, pc, #4	; (adr r2, 800fcc4 <UART_SetConfig+0x37c>)
 800fcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc4:	0800fd69 	.word	0x0800fd69
 800fcc8:	0800fd99 	.word	0x0800fd99
 800fccc:	0800fd99 	.word	0x0800fd99
 800fcd0:	0800fd99 	.word	0x0800fd99
 800fcd4:	0800fd99 	.word	0x0800fd99
 800fcd8:	0800fd99 	.word	0x0800fd99
 800fcdc:	0800fd99 	.word	0x0800fd99
 800fce0:	0800fd99 	.word	0x0800fd99
 800fce4:	0800fd71 	.word	0x0800fd71
 800fce8:	0800fd99 	.word	0x0800fd99
 800fcec:	0800fd99 	.word	0x0800fd99
 800fcf0:	0800fd99 	.word	0x0800fd99
 800fcf4:	0800fd99 	.word	0x0800fd99
 800fcf8:	0800fd99 	.word	0x0800fd99
 800fcfc:	0800fd99 	.word	0x0800fd99
 800fd00:	0800fd99 	.word	0x0800fd99
 800fd04:	0800fd79 	.word	0x0800fd79
 800fd08:	0800fd99 	.word	0x0800fd99
 800fd0c:	0800fd99 	.word	0x0800fd99
 800fd10:	0800fd99 	.word	0x0800fd99
 800fd14:	0800fd99 	.word	0x0800fd99
 800fd18:	0800fd99 	.word	0x0800fd99
 800fd1c:	0800fd99 	.word	0x0800fd99
 800fd20:	0800fd99 	.word	0x0800fd99
 800fd24:	0800fd81 	.word	0x0800fd81
 800fd28:	0800fd99 	.word	0x0800fd99
 800fd2c:	0800fd99 	.word	0x0800fd99
 800fd30:	0800fd99 	.word	0x0800fd99
 800fd34:	0800fd99 	.word	0x0800fd99
 800fd38:	0800fd99 	.word	0x0800fd99
 800fd3c:	0800fd99 	.word	0x0800fd99
 800fd40:	0800fd99 	.word	0x0800fd99
 800fd44:	0800fd89 	.word	0x0800fd89
 800fd48:	0800fd99 	.word	0x0800fd99
 800fd4c:	0800fd99 	.word	0x0800fd99
 800fd50:	0800fd99 	.word	0x0800fd99
 800fd54:	0800fd99 	.word	0x0800fd99
 800fd58:	0800fd99 	.word	0x0800fd99
 800fd5c:	0800fd99 	.word	0x0800fd99
 800fd60:	0800fd99 	.word	0x0800fd99
 800fd64:	0800fd91 	.word	0x0800fd91
 800fd68:	2301      	movs	r3, #1
 800fd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd6e:	e0bc      	b.n	800feea <UART_SetConfig+0x5a2>
 800fd70:	2304      	movs	r3, #4
 800fd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd76:	e0b8      	b.n	800feea <UART_SetConfig+0x5a2>
 800fd78:	2308      	movs	r3, #8
 800fd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd7e:	e0b4      	b.n	800feea <UART_SetConfig+0x5a2>
 800fd80:	2310      	movs	r3, #16
 800fd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd86:	e0b0      	b.n	800feea <UART_SetConfig+0x5a2>
 800fd88:	2320      	movs	r3, #32
 800fd8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd8e:	e0ac      	b.n	800feea <UART_SetConfig+0x5a2>
 800fd90:	2340      	movs	r3, #64	; 0x40
 800fd92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd96:	e0a8      	b.n	800feea <UART_SetConfig+0x5a2>
 800fd98:	2380      	movs	r3, #128	; 0x80
 800fd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd9e:	e0a4      	b.n	800feea <UART_SetConfig+0x5a2>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4a90      	ldr	r2, [pc, #576]	; (800ffe8 <UART_SetConfig+0x6a0>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d130      	bne.n	800fe0c <UART_SetConfig+0x4c4>
 800fdaa:	4b8e      	ldr	r3, [pc, #568]	; (800ffe4 <UART_SetConfig+0x69c>)
 800fdac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdae:	f003 0307 	and.w	r3, r3, #7
 800fdb2:	2b05      	cmp	r3, #5
 800fdb4:	d826      	bhi.n	800fe04 <UART_SetConfig+0x4bc>
 800fdb6:	a201      	add	r2, pc, #4	; (adr r2, 800fdbc <UART_SetConfig+0x474>)
 800fdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdbc:	0800fdd5 	.word	0x0800fdd5
 800fdc0:	0800fddd 	.word	0x0800fddd
 800fdc4:	0800fde5 	.word	0x0800fde5
 800fdc8:	0800fded 	.word	0x0800fded
 800fdcc:	0800fdf5 	.word	0x0800fdf5
 800fdd0:	0800fdfd 	.word	0x0800fdfd
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fdda:	e086      	b.n	800feea <UART_SetConfig+0x5a2>
 800fddc:	2304      	movs	r3, #4
 800fdde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fde2:	e082      	b.n	800feea <UART_SetConfig+0x5a2>
 800fde4:	2308      	movs	r3, #8
 800fde6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fdea:	e07e      	b.n	800feea <UART_SetConfig+0x5a2>
 800fdec:	2310      	movs	r3, #16
 800fdee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fdf2:	e07a      	b.n	800feea <UART_SetConfig+0x5a2>
 800fdf4:	2320      	movs	r3, #32
 800fdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fdfa:	e076      	b.n	800feea <UART_SetConfig+0x5a2>
 800fdfc:	2340      	movs	r3, #64	; 0x40
 800fdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe02:	e072      	b.n	800feea <UART_SetConfig+0x5a2>
 800fe04:	2380      	movs	r3, #128	; 0x80
 800fe06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe0a:	e06e      	b.n	800feea <UART_SetConfig+0x5a2>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a76      	ldr	r2, [pc, #472]	; (800ffec <UART_SetConfig+0x6a4>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d130      	bne.n	800fe78 <UART_SetConfig+0x530>
 800fe16:	4b73      	ldr	r3, [pc, #460]	; (800ffe4 <UART_SetConfig+0x69c>)
 800fe18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe1a:	f003 0307 	and.w	r3, r3, #7
 800fe1e:	2b05      	cmp	r3, #5
 800fe20:	d826      	bhi.n	800fe70 <UART_SetConfig+0x528>
 800fe22:	a201      	add	r2, pc, #4	; (adr r2, 800fe28 <UART_SetConfig+0x4e0>)
 800fe24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe28:	0800fe41 	.word	0x0800fe41
 800fe2c:	0800fe49 	.word	0x0800fe49
 800fe30:	0800fe51 	.word	0x0800fe51
 800fe34:	0800fe59 	.word	0x0800fe59
 800fe38:	0800fe61 	.word	0x0800fe61
 800fe3c:	0800fe69 	.word	0x0800fe69
 800fe40:	2300      	movs	r3, #0
 800fe42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe46:	e050      	b.n	800feea <UART_SetConfig+0x5a2>
 800fe48:	2304      	movs	r3, #4
 800fe4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe4e:	e04c      	b.n	800feea <UART_SetConfig+0x5a2>
 800fe50:	2308      	movs	r3, #8
 800fe52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe56:	e048      	b.n	800feea <UART_SetConfig+0x5a2>
 800fe58:	2310      	movs	r3, #16
 800fe5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe5e:	e044      	b.n	800feea <UART_SetConfig+0x5a2>
 800fe60:	2320      	movs	r3, #32
 800fe62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe66:	e040      	b.n	800feea <UART_SetConfig+0x5a2>
 800fe68:	2340      	movs	r3, #64	; 0x40
 800fe6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe6e:	e03c      	b.n	800feea <UART_SetConfig+0x5a2>
 800fe70:	2380      	movs	r3, #128	; 0x80
 800fe72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe76:	e038      	b.n	800feea <UART_SetConfig+0x5a2>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a5c      	ldr	r2, [pc, #368]	; (800fff0 <UART_SetConfig+0x6a8>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d130      	bne.n	800fee4 <UART_SetConfig+0x59c>
 800fe82:	4b58      	ldr	r3, [pc, #352]	; (800ffe4 <UART_SetConfig+0x69c>)
 800fe84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe86:	f003 0307 	and.w	r3, r3, #7
 800fe8a:	2b05      	cmp	r3, #5
 800fe8c:	d826      	bhi.n	800fedc <UART_SetConfig+0x594>
 800fe8e:	a201      	add	r2, pc, #4	; (adr r2, 800fe94 <UART_SetConfig+0x54c>)
 800fe90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe94:	0800fead 	.word	0x0800fead
 800fe98:	0800feb5 	.word	0x0800feb5
 800fe9c:	0800febd 	.word	0x0800febd
 800fea0:	0800fec5 	.word	0x0800fec5
 800fea4:	0800fecd 	.word	0x0800fecd
 800fea8:	0800fed5 	.word	0x0800fed5
 800feac:	2302      	movs	r3, #2
 800feae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feb2:	e01a      	b.n	800feea <UART_SetConfig+0x5a2>
 800feb4:	2304      	movs	r3, #4
 800feb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feba:	e016      	b.n	800feea <UART_SetConfig+0x5a2>
 800febc:	2308      	movs	r3, #8
 800febe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fec2:	e012      	b.n	800feea <UART_SetConfig+0x5a2>
 800fec4:	2310      	movs	r3, #16
 800fec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feca:	e00e      	b.n	800feea <UART_SetConfig+0x5a2>
 800fecc:	2320      	movs	r3, #32
 800fece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fed2:	e00a      	b.n	800feea <UART_SetConfig+0x5a2>
 800fed4:	2340      	movs	r3, #64	; 0x40
 800fed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feda:	e006      	b.n	800feea <UART_SetConfig+0x5a2>
 800fedc:	2380      	movs	r3, #128	; 0x80
 800fede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fee2:	e002      	b.n	800feea <UART_SetConfig+0x5a2>
 800fee4:	2380      	movs	r3, #128	; 0x80
 800fee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4a40      	ldr	r2, [pc, #256]	; (800fff0 <UART_SetConfig+0x6a8>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	f040 80ef 	bne.w	80100d4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fef6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fefa:	2b20      	cmp	r3, #32
 800fefc:	dc46      	bgt.n	800ff8c <UART_SetConfig+0x644>
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	f2c0 8081 	blt.w	8010006 <UART_SetConfig+0x6be>
 800ff04:	3b02      	subs	r3, #2
 800ff06:	2b1e      	cmp	r3, #30
 800ff08:	d87d      	bhi.n	8010006 <UART_SetConfig+0x6be>
 800ff0a:	a201      	add	r2, pc, #4	; (adr r2, 800ff10 <UART_SetConfig+0x5c8>)
 800ff0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff10:	0800ff93 	.word	0x0800ff93
 800ff14:	08010007 	.word	0x08010007
 800ff18:	0800ff9b 	.word	0x0800ff9b
 800ff1c:	08010007 	.word	0x08010007
 800ff20:	08010007 	.word	0x08010007
 800ff24:	08010007 	.word	0x08010007
 800ff28:	0800ffab 	.word	0x0800ffab
 800ff2c:	08010007 	.word	0x08010007
 800ff30:	08010007 	.word	0x08010007
 800ff34:	08010007 	.word	0x08010007
 800ff38:	08010007 	.word	0x08010007
 800ff3c:	08010007 	.word	0x08010007
 800ff40:	08010007 	.word	0x08010007
 800ff44:	08010007 	.word	0x08010007
 800ff48:	0800ffbb 	.word	0x0800ffbb
 800ff4c:	08010007 	.word	0x08010007
 800ff50:	08010007 	.word	0x08010007
 800ff54:	08010007 	.word	0x08010007
 800ff58:	08010007 	.word	0x08010007
 800ff5c:	08010007 	.word	0x08010007
 800ff60:	08010007 	.word	0x08010007
 800ff64:	08010007 	.word	0x08010007
 800ff68:	08010007 	.word	0x08010007
 800ff6c:	08010007 	.word	0x08010007
 800ff70:	08010007 	.word	0x08010007
 800ff74:	08010007 	.word	0x08010007
 800ff78:	08010007 	.word	0x08010007
 800ff7c:	08010007 	.word	0x08010007
 800ff80:	08010007 	.word	0x08010007
 800ff84:	08010007 	.word	0x08010007
 800ff88:	0800fff9 	.word	0x0800fff9
 800ff8c:	2b40      	cmp	r3, #64	; 0x40
 800ff8e:	d036      	beq.n	800fffe <UART_SetConfig+0x6b6>
 800ff90:	e039      	b.n	8010006 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ff92:	f7fc fa65 	bl	800c460 <HAL_RCCEx_GetD3PCLK1Freq>
 800ff96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ff98:	e03b      	b.n	8010012 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff9a:	f107 0314 	add.w	r3, r7, #20
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fc fa74 	bl	800c48c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ffa4:	69bb      	ldr	r3, [r7, #24]
 800ffa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ffa8:	e033      	b.n	8010012 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ffaa:	f107 0308 	add.w	r3, r7, #8
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fc fbc0 	bl	800c734 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ffb8:	e02b      	b.n	8010012 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ffba:	4b0a      	ldr	r3, [pc, #40]	; (800ffe4 <UART_SetConfig+0x69c>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	f003 0320 	and.w	r3, r3, #32
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d009      	beq.n	800ffda <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ffc6:	4b07      	ldr	r3, [pc, #28]	; (800ffe4 <UART_SetConfig+0x69c>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	08db      	lsrs	r3, r3, #3
 800ffcc:	f003 0303 	and.w	r3, r3, #3
 800ffd0:	4a08      	ldr	r2, [pc, #32]	; (800fff4 <UART_SetConfig+0x6ac>)
 800ffd2:	fa22 f303 	lsr.w	r3, r2, r3
 800ffd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ffd8:	e01b      	b.n	8010012 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ffda:	4b06      	ldr	r3, [pc, #24]	; (800fff4 <UART_SetConfig+0x6ac>)
 800ffdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ffde:	e018      	b.n	8010012 <UART_SetConfig+0x6ca>
 800ffe0:	40011400 	.word	0x40011400
 800ffe4:	58024400 	.word	0x58024400
 800ffe8:	40007800 	.word	0x40007800
 800ffec:	40007c00 	.word	0x40007c00
 800fff0:	58000c00 	.word	0x58000c00
 800fff4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fff8:	4bc4      	ldr	r3, [pc, #784]	; (801030c <UART_SetConfig+0x9c4>)
 800fffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fffc:	e009      	b.n	8010012 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010002:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010004:	e005      	b.n	8010012 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8010006:	2300      	movs	r3, #0
 8010008:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801000a:	2301      	movs	r3, #1
 801000c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010010:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 81da 	beq.w	80103ce <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001e:	4abc      	ldr	r2, [pc, #752]	; (8010310 <UART_SetConfig+0x9c8>)
 8010020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010024:	461a      	mov	r2, r3
 8010026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010028:	fbb3 f3f2 	udiv	r3, r3, r2
 801002c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	685a      	ldr	r2, [r3, #4]
 8010032:	4613      	mov	r3, r2
 8010034:	005b      	lsls	r3, r3, #1
 8010036:	4413      	add	r3, r2
 8010038:	6a3a      	ldr	r2, [r7, #32]
 801003a:	429a      	cmp	r2, r3
 801003c:	d305      	bcc.n	801004a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010044:	6a3a      	ldr	r2, [r7, #32]
 8010046:	429a      	cmp	r2, r3
 8010048:	d903      	bls.n	8010052 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 801004a:	2301      	movs	r3, #1
 801004c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010050:	e1bd      	b.n	80103ce <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010054:	4618      	mov	r0, r3
 8010056:	f04f 0100 	mov.w	r1, #0
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801005e:	4aac      	ldr	r2, [pc, #688]	; (8010310 <UART_SetConfig+0x9c8>)
 8010060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010064:	b29a      	uxth	r2, r3
 8010066:	f04f 0300 	mov.w	r3, #0
 801006a:	f7f0 f991 	bl	8000390 <__aeabi_uldivmod>
 801006e:	4602      	mov	r2, r0
 8010070:	460b      	mov	r3, r1
 8010072:	4610      	mov	r0, r2
 8010074:	4619      	mov	r1, r3
 8010076:	f04f 0200 	mov.w	r2, #0
 801007a:	f04f 0300 	mov.w	r3, #0
 801007e:	020b      	lsls	r3, r1, #8
 8010080:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010084:	0202      	lsls	r2, r0, #8
 8010086:	6879      	ldr	r1, [r7, #4]
 8010088:	6849      	ldr	r1, [r1, #4]
 801008a:	0849      	lsrs	r1, r1, #1
 801008c:	4608      	mov	r0, r1
 801008e:	f04f 0100 	mov.w	r1, #0
 8010092:	1814      	adds	r4, r2, r0
 8010094:	eb43 0501 	adc.w	r5, r3, r1
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	461a      	mov	r2, r3
 801009e:	f04f 0300 	mov.w	r3, #0
 80100a2:	4620      	mov	r0, r4
 80100a4:	4629      	mov	r1, r5
 80100a6:	f7f0 f973 	bl	8000390 <__aeabi_uldivmod>
 80100aa:	4602      	mov	r2, r0
 80100ac:	460b      	mov	r3, r1
 80100ae:	4613      	mov	r3, r2
 80100b0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80100b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80100b8:	d308      	bcc.n	80100cc <UART_SetConfig+0x784>
 80100ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80100c0:	d204      	bcs.n	80100cc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100c8:	60da      	str	r2, [r3, #12]
 80100ca:	e180      	b.n	80103ce <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80100cc:	2301      	movs	r3, #1
 80100ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80100d2:	e17c      	b.n	80103ce <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	69db      	ldr	r3, [r3, #28]
 80100d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100dc:	f040 80be 	bne.w	801025c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 80100e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80100e4:	2b20      	cmp	r3, #32
 80100e6:	dc49      	bgt.n	801017c <UART_SetConfig+0x834>
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	db7c      	blt.n	80101e6 <UART_SetConfig+0x89e>
 80100ec:	2b20      	cmp	r3, #32
 80100ee:	d87a      	bhi.n	80101e6 <UART_SetConfig+0x89e>
 80100f0:	a201      	add	r2, pc, #4	; (adr r2, 80100f8 <UART_SetConfig+0x7b0>)
 80100f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f6:	bf00      	nop
 80100f8:	08010183 	.word	0x08010183
 80100fc:	0801018b 	.word	0x0801018b
 8010100:	080101e7 	.word	0x080101e7
 8010104:	080101e7 	.word	0x080101e7
 8010108:	08010193 	.word	0x08010193
 801010c:	080101e7 	.word	0x080101e7
 8010110:	080101e7 	.word	0x080101e7
 8010114:	080101e7 	.word	0x080101e7
 8010118:	080101a3 	.word	0x080101a3
 801011c:	080101e7 	.word	0x080101e7
 8010120:	080101e7 	.word	0x080101e7
 8010124:	080101e7 	.word	0x080101e7
 8010128:	080101e7 	.word	0x080101e7
 801012c:	080101e7 	.word	0x080101e7
 8010130:	080101e7 	.word	0x080101e7
 8010134:	080101e7 	.word	0x080101e7
 8010138:	080101b3 	.word	0x080101b3
 801013c:	080101e7 	.word	0x080101e7
 8010140:	080101e7 	.word	0x080101e7
 8010144:	080101e7 	.word	0x080101e7
 8010148:	080101e7 	.word	0x080101e7
 801014c:	080101e7 	.word	0x080101e7
 8010150:	080101e7 	.word	0x080101e7
 8010154:	080101e7 	.word	0x080101e7
 8010158:	080101e7 	.word	0x080101e7
 801015c:	080101e7 	.word	0x080101e7
 8010160:	080101e7 	.word	0x080101e7
 8010164:	080101e7 	.word	0x080101e7
 8010168:	080101e7 	.word	0x080101e7
 801016c:	080101e7 	.word	0x080101e7
 8010170:	080101e7 	.word	0x080101e7
 8010174:	080101e7 	.word	0x080101e7
 8010178:	080101d9 	.word	0x080101d9
 801017c:	2b40      	cmp	r3, #64	; 0x40
 801017e:	d02e      	beq.n	80101de <UART_SetConfig+0x896>
 8010180:	e031      	b.n	80101e6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010182:	f7fb fa01 	bl	800b588 <HAL_RCC_GetPCLK1Freq>
 8010186:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010188:	e033      	b.n	80101f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801018a:	f7fb fa13 	bl	800b5b4 <HAL_RCC_GetPCLK2Freq>
 801018e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010190:	e02f      	b.n	80101f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010192:	f107 0314 	add.w	r3, r7, #20
 8010196:	4618      	mov	r0, r3
 8010198:	f7fc f978 	bl	800c48c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801019c:	69bb      	ldr	r3, [r7, #24]
 801019e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101a0:	e027      	b.n	80101f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101a2:	f107 0308 	add.w	r3, r7, #8
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fc fac4 	bl	800c734 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101b0:	e01f      	b.n	80101f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80101b2:	4b58      	ldr	r3, [pc, #352]	; (8010314 <UART_SetConfig+0x9cc>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f003 0320 	and.w	r3, r3, #32
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d009      	beq.n	80101d2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80101be:	4b55      	ldr	r3, [pc, #340]	; (8010314 <UART_SetConfig+0x9cc>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	08db      	lsrs	r3, r3, #3
 80101c4:	f003 0303 	and.w	r3, r3, #3
 80101c8:	4a53      	ldr	r2, [pc, #332]	; (8010318 <UART_SetConfig+0x9d0>)
 80101ca:	fa22 f303 	lsr.w	r3, r2, r3
 80101ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80101d0:	e00f      	b.n	80101f2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80101d2:	4b51      	ldr	r3, [pc, #324]	; (8010318 <UART_SetConfig+0x9d0>)
 80101d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101d6:	e00c      	b.n	80101f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80101d8:	4b4c      	ldr	r3, [pc, #304]	; (801030c <UART_SetConfig+0x9c4>)
 80101da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101dc:	e009      	b.n	80101f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80101de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80101e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101e4:	e005      	b.n	80101f2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80101e6:	2300      	movs	r3, #0
 80101e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80101ea:	2301      	movs	r3, #1
 80101ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80101f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80101f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	f000 80ea 	beq.w	80103ce <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fe:	4a44      	ldr	r2, [pc, #272]	; (8010310 <UART_SetConfig+0x9c8>)
 8010200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010204:	461a      	mov	r2, r3
 8010206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010208:	fbb3 f3f2 	udiv	r3, r3, r2
 801020c:	005a      	lsls	r2, r3, #1
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	085b      	lsrs	r3, r3, #1
 8010214:	441a      	add	r2, r3
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	fbb2 f3f3 	udiv	r3, r2, r3
 801021e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010222:	2b0f      	cmp	r3, #15
 8010224:	d916      	bls.n	8010254 <UART_SetConfig+0x90c>
 8010226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801022c:	d212      	bcs.n	8010254 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801022e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010230:	b29b      	uxth	r3, r3
 8010232:	f023 030f 	bic.w	r3, r3, #15
 8010236:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801023a:	085b      	lsrs	r3, r3, #1
 801023c:	b29b      	uxth	r3, r3
 801023e:	f003 0307 	and.w	r3, r3, #7
 8010242:	b29a      	uxth	r2, r3
 8010244:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010246:	4313      	orrs	r3, r2
 8010248:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010250:	60da      	str	r2, [r3, #12]
 8010252:	e0bc      	b.n	80103ce <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010254:	2301      	movs	r3, #1
 8010256:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801025a:	e0b8      	b.n	80103ce <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 801025c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010260:	2b20      	cmp	r3, #32
 8010262:	dc4b      	bgt.n	80102fc <UART_SetConfig+0x9b4>
 8010264:	2b00      	cmp	r3, #0
 8010266:	f2c0 8087 	blt.w	8010378 <UART_SetConfig+0xa30>
 801026a:	2b20      	cmp	r3, #32
 801026c:	f200 8084 	bhi.w	8010378 <UART_SetConfig+0xa30>
 8010270:	a201      	add	r2, pc, #4	; (adr r2, 8010278 <UART_SetConfig+0x930>)
 8010272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010276:	bf00      	nop
 8010278:	08010303 	.word	0x08010303
 801027c:	0801031d 	.word	0x0801031d
 8010280:	08010379 	.word	0x08010379
 8010284:	08010379 	.word	0x08010379
 8010288:	08010325 	.word	0x08010325
 801028c:	08010379 	.word	0x08010379
 8010290:	08010379 	.word	0x08010379
 8010294:	08010379 	.word	0x08010379
 8010298:	08010335 	.word	0x08010335
 801029c:	08010379 	.word	0x08010379
 80102a0:	08010379 	.word	0x08010379
 80102a4:	08010379 	.word	0x08010379
 80102a8:	08010379 	.word	0x08010379
 80102ac:	08010379 	.word	0x08010379
 80102b0:	08010379 	.word	0x08010379
 80102b4:	08010379 	.word	0x08010379
 80102b8:	08010345 	.word	0x08010345
 80102bc:	08010379 	.word	0x08010379
 80102c0:	08010379 	.word	0x08010379
 80102c4:	08010379 	.word	0x08010379
 80102c8:	08010379 	.word	0x08010379
 80102cc:	08010379 	.word	0x08010379
 80102d0:	08010379 	.word	0x08010379
 80102d4:	08010379 	.word	0x08010379
 80102d8:	08010379 	.word	0x08010379
 80102dc:	08010379 	.word	0x08010379
 80102e0:	08010379 	.word	0x08010379
 80102e4:	08010379 	.word	0x08010379
 80102e8:	08010379 	.word	0x08010379
 80102ec:	08010379 	.word	0x08010379
 80102f0:	08010379 	.word	0x08010379
 80102f4:	08010379 	.word	0x08010379
 80102f8:	0801036b 	.word	0x0801036b
 80102fc:	2b40      	cmp	r3, #64	; 0x40
 80102fe:	d037      	beq.n	8010370 <UART_SetConfig+0xa28>
 8010300:	e03a      	b.n	8010378 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010302:	f7fb f941 	bl	800b588 <HAL_RCC_GetPCLK1Freq>
 8010306:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010308:	e03c      	b.n	8010384 <UART_SetConfig+0xa3c>
 801030a:	bf00      	nop
 801030c:	003d0900 	.word	0x003d0900
 8010310:	08015154 	.word	0x08015154
 8010314:	58024400 	.word	0x58024400
 8010318:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801031c:	f7fb f94a 	bl	800b5b4 <HAL_RCC_GetPCLK2Freq>
 8010320:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010322:	e02f      	b.n	8010384 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010324:	f107 0314 	add.w	r3, r7, #20
 8010328:	4618      	mov	r0, r3
 801032a:	f7fc f8af 	bl	800c48c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010332:	e027      	b.n	8010384 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010334:	f107 0308 	add.w	r3, r7, #8
 8010338:	4618      	mov	r0, r3
 801033a:	f7fc f9fb 	bl	800c734 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010342:	e01f      	b.n	8010384 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010344:	4b2c      	ldr	r3, [pc, #176]	; (80103f8 <UART_SetConfig+0xab0>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f003 0320 	and.w	r3, r3, #32
 801034c:	2b00      	cmp	r3, #0
 801034e:	d009      	beq.n	8010364 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010350:	4b29      	ldr	r3, [pc, #164]	; (80103f8 <UART_SetConfig+0xab0>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	08db      	lsrs	r3, r3, #3
 8010356:	f003 0303 	and.w	r3, r3, #3
 801035a:	4a28      	ldr	r2, [pc, #160]	; (80103fc <UART_SetConfig+0xab4>)
 801035c:	fa22 f303 	lsr.w	r3, r2, r3
 8010360:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010362:	e00f      	b.n	8010384 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8010364:	4b25      	ldr	r3, [pc, #148]	; (80103fc <UART_SetConfig+0xab4>)
 8010366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010368:	e00c      	b.n	8010384 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801036a:	4b25      	ldr	r3, [pc, #148]	; (8010400 <UART_SetConfig+0xab8>)
 801036c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801036e:	e009      	b.n	8010384 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010374:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010376:	e005      	b.n	8010384 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8010378:	2300      	movs	r3, #0
 801037a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801037c:	2301      	movs	r3, #1
 801037e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010382:	bf00      	nop
    }

    if (pclk != 0U)
 8010384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010386:	2b00      	cmp	r3, #0
 8010388:	d021      	beq.n	80103ce <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801038e:	4a1d      	ldr	r2, [pc, #116]	; (8010404 <UART_SetConfig+0xabc>)
 8010390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010394:	461a      	mov	r2, r3
 8010396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010398:	fbb3 f2f2 	udiv	r2, r3, r2
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	085b      	lsrs	r3, r3, #1
 80103a2:	441a      	add	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80103ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b0:	2b0f      	cmp	r3, #15
 80103b2:	d909      	bls.n	80103c8 <UART_SetConfig+0xa80>
 80103b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103ba:	d205      	bcs.n	80103c8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80103bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103be:	b29a      	uxth	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	60da      	str	r2, [r3, #12]
 80103c6:	e002      	b.n	80103ce <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80103c8:	2301      	movs	r3, #1
 80103ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2201      	movs	r2, #1
 80103d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2201      	movs	r2, #1
 80103da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80103ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3738      	adds	r7, #56	; 0x38
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bdb0      	pop	{r4, r5, r7, pc}
 80103f6:	bf00      	nop
 80103f8:	58024400 	.word	0x58024400
 80103fc:	03d09000 	.word	0x03d09000
 8010400:	003d0900 	.word	0x003d0900
 8010404:	08015154 	.word	0x08015154

08010408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010408:	b480      	push	{r7}
 801040a:	b083      	sub	sp, #12
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010414:	f003 0301 	and.w	r3, r3, #1
 8010418:	2b00      	cmp	r3, #0
 801041a:	d00a      	beq.n	8010432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	430a      	orrs	r2, r1
 8010430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010436:	f003 0302 	and.w	r3, r3, #2
 801043a:	2b00      	cmp	r3, #0
 801043c:	d00a      	beq.n	8010454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	430a      	orrs	r2, r1
 8010452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010458:	f003 0304 	and.w	r3, r3, #4
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00a      	beq.n	8010476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	430a      	orrs	r2, r1
 8010474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801047a:	f003 0308 	and.w	r3, r3, #8
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00a      	beq.n	8010498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	430a      	orrs	r2, r1
 8010496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801049c:	f003 0310 	and.w	r3, r3, #16
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00a      	beq.n	80104ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	430a      	orrs	r2, r1
 80104b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104be:	f003 0320 	and.w	r3, r3, #32
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00a      	beq.n	80104dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	430a      	orrs	r2, r1
 80104da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d01a      	beq.n	801051e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	430a      	orrs	r2, r1
 80104fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010506:	d10a      	bne.n	801051e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	430a      	orrs	r2, r1
 801051c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00a      	beq.n	8010540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	430a      	orrs	r2, r1
 801053e:	605a      	str	r2, [r3, #4]
  }
}
 8010540:	bf00      	nop
 8010542:	370c      	adds	r7, #12
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr

0801054c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b086      	sub	sp, #24
 8010550:	af02      	add	r7, sp, #8
 8010552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2200      	movs	r2, #0
 8010558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801055c:	f7f6 fcda 	bl	8006f14 <HAL_GetTick>
 8010560:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f003 0308 	and.w	r3, r3, #8
 801056c:	2b08      	cmp	r3, #8
 801056e:	d10e      	bne.n	801058e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010574:	9300      	str	r3, [sp, #0]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2200      	movs	r2, #0
 801057a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 f82f 	bl	80105e2 <UART_WaitOnFlagUntilTimeout>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d001      	beq.n	801058e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801058a:	2303      	movs	r3, #3
 801058c:	e025      	b.n	80105da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f003 0304 	and.w	r3, r3, #4
 8010598:	2b04      	cmp	r3, #4
 801059a:	d10e      	bne.n	80105ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801059c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80105a0:	9300      	str	r3, [sp, #0]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2200      	movs	r2, #0
 80105a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 f819 	bl	80105e2 <UART_WaitOnFlagUntilTimeout>
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d001      	beq.n	80105ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80105b6:	2303      	movs	r3, #3
 80105b8:	e00f      	b.n	80105da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2220      	movs	r2, #32
 80105be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2220      	movs	r2, #32
 80105c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80105d8:	2300      	movs	r3, #0
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b09c      	sub	sp, #112	; 0x70
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	60f8      	str	r0, [r7, #12]
 80105ea:	60b9      	str	r1, [r7, #8]
 80105ec:	603b      	str	r3, [r7, #0]
 80105ee:	4613      	mov	r3, r2
 80105f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105f2:	e0a9      	b.n	8010748 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105fa:	f000 80a5 	beq.w	8010748 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105fe:	f7f6 fc89 	bl	8006f14 <HAL_GetTick>
 8010602:	4602      	mov	r2, r0
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	1ad3      	subs	r3, r2, r3
 8010608:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801060a:	429a      	cmp	r2, r3
 801060c:	d302      	bcc.n	8010614 <UART_WaitOnFlagUntilTimeout+0x32>
 801060e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010610:	2b00      	cmp	r3, #0
 8010612:	d140      	bne.n	8010696 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801061a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801061c:	e853 3f00 	ldrex	r3, [r3]
 8010620:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010628:	667b      	str	r3, [r7, #100]	; 0x64
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	461a      	mov	r2, r3
 8010630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010634:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801063a:	e841 2300 	strex	r3, r2, [r1]
 801063e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010642:	2b00      	cmp	r3, #0
 8010644:	d1e6      	bne.n	8010614 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	3308      	adds	r3, #8
 801064c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010650:	e853 3f00 	ldrex	r3, [r3]
 8010654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010658:	f023 0301 	bic.w	r3, r3, #1
 801065c:	663b      	str	r3, [r7, #96]	; 0x60
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	3308      	adds	r3, #8
 8010664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010666:	64ba      	str	r2, [r7, #72]	; 0x48
 8010668:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801066a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801066c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801066e:	e841 2300 	strex	r3, r2, [r1]
 8010672:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010676:	2b00      	cmp	r3, #0
 8010678:	d1e5      	bne.n	8010646 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2220      	movs	r2, #32
 801067e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2220      	movs	r2, #32
 8010686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2200      	movs	r2, #0
 801068e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010692:	2303      	movs	r3, #3
 8010694:	e069      	b.n	801076a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f003 0304 	and.w	r3, r3, #4
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d051      	beq.n	8010748 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	69db      	ldr	r3, [r3, #28]
 80106aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80106ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80106b2:	d149      	bne.n	8010748 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80106bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c6:	e853 3f00 	ldrex	r3, [r3]
 80106ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80106d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	461a      	mov	r2, r3
 80106da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106dc:	637b      	str	r3, [r7, #52]	; 0x34
 80106de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80106e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106e4:	e841 2300 	strex	r3, r2, [r1]
 80106e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80106ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1e6      	bne.n	80106be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	3308      	adds	r3, #8
 80106f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	e853 3f00 	ldrex	r3, [r3]
 80106fe:	613b      	str	r3, [r7, #16]
   return(result);
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	f023 0301 	bic.w	r3, r3, #1
 8010706:	66bb      	str	r3, [r7, #104]	; 0x68
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	3308      	adds	r3, #8
 801070e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010710:	623a      	str	r2, [r7, #32]
 8010712:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010714:	69f9      	ldr	r1, [r7, #28]
 8010716:	6a3a      	ldr	r2, [r7, #32]
 8010718:	e841 2300 	strex	r3, r2, [r1]
 801071c:	61bb      	str	r3, [r7, #24]
   return(result);
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1e5      	bne.n	80106f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	2220      	movs	r2, #32
 8010728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	2220      	movs	r2, #32
 8010730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2220      	movs	r2, #32
 8010738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2200      	movs	r2, #0
 8010740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010744:	2303      	movs	r3, #3
 8010746:	e010      	b.n	801076a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	69da      	ldr	r2, [r3, #28]
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	4013      	ands	r3, r2
 8010752:	68ba      	ldr	r2, [r7, #8]
 8010754:	429a      	cmp	r2, r3
 8010756:	bf0c      	ite	eq
 8010758:	2301      	moveq	r3, #1
 801075a:	2300      	movne	r3, #0
 801075c:	b2db      	uxtb	r3, r3
 801075e:	461a      	mov	r2, r3
 8010760:	79fb      	ldrb	r3, [r7, #7]
 8010762:	429a      	cmp	r2, r3
 8010764:	f43f af46 	beq.w	80105f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010768:	2300      	movs	r3, #0
}
 801076a:	4618      	mov	r0, r3
 801076c:	3770      	adds	r7, #112	; 0x70
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
	...

08010774 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b096      	sub	sp, #88	; 0x58
 8010778:	af00      	add	r7, sp, #0
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	60b9      	str	r1, [r7, #8]
 801077e:	4613      	mov	r3, r2
 8010780:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	68ba      	ldr	r2, [r7, #8]
 8010786:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	88fa      	ldrh	r2, [r7, #6]
 801078c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2222      	movs	r2, #34	; 0x22
 801079c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d02c      	beq.n	8010802 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107ac:	4a42      	ldr	r2, [pc, #264]	; (80108b8 <UART_Start_Receive_DMA+0x144>)
 80107ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107b4:	4a41      	ldr	r2, [pc, #260]	; (80108bc <UART_Start_Receive_DMA+0x148>)
 80107b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107bc:	4a40      	ldr	r2, [pc, #256]	; (80108c0 <UART_Start_Receive_DMA+0x14c>)
 80107be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107c4:	2200      	movs	r2, #0
 80107c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	3324      	adds	r3, #36	; 0x24
 80107d2:	4619      	mov	r1, r3
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107d8:	461a      	mov	r2, r3
 80107da:	88fb      	ldrh	r3, [r7, #6]
 80107dc:	f7f7 fa4c 	bl	8007c78 <HAL_DMA_Start_IT>
 80107e0:	4603      	mov	r3, r0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d00d      	beq.n	8010802 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2210      	movs	r2, #16
 80107ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2200      	movs	r2, #0
 80107f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2220      	movs	r2, #32
 80107fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80107fe:	2301      	movs	r3, #1
 8010800:	e055      	b.n	80108ae <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2200      	movs	r2, #0
 8010806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	691b      	ldr	r3, [r3, #16]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d018      	beq.n	8010844 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801081a:	e853 3f00 	ldrex	r3, [r3]
 801081e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010826:	657b      	str	r3, [r7, #84]	; 0x54
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	461a      	mov	r2, r3
 801082e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010830:	64bb      	str	r3, [r7, #72]	; 0x48
 8010832:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010834:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010838:	e841 2300 	strex	r3, r2, [r1]
 801083c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801083e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1e6      	bne.n	8010812 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	3308      	adds	r3, #8
 801084a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084e:	e853 3f00 	ldrex	r3, [r3]
 8010852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010856:	f043 0301 	orr.w	r3, r3, #1
 801085a:	653b      	str	r3, [r7, #80]	; 0x50
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	3308      	adds	r3, #8
 8010862:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010864:	637a      	str	r2, [r7, #52]	; 0x34
 8010866:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801086a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801086c:	e841 2300 	strex	r3, r2, [r1]
 8010870:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010874:	2b00      	cmp	r3, #0
 8010876:	d1e5      	bne.n	8010844 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	3308      	adds	r3, #8
 801087e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	e853 3f00 	ldrex	r3, [r3]
 8010886:	613b      	str	r3, [r7, #16]
   return(result);
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801088e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	3308      	adds	r3, #8
 8010896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010898:	623a      	str	r2, [r7, #32]
 801089a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089c:	69f9      	ldr	r1, [r7, #28]
 801089e:	6a3a      	ldr	r2, [r7, #32]
 80108a0:	e841 2300 	strex	r3, r2, [r1]
 80108a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d1e5      	bne.n	8010878 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80108ac:	2300      	movs	r3, #0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3758      	adds	r7, #88	; 0x58
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	08010ac7 	.word	0x08010ac7
 80108bc:	08010be9 	.word	0x08010be9
 80108c0:	08010c21 	.word	0x08010c21

080108c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b08f      	sub	sp, #60	; 0x3c
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d2:	6a3b      	ldr	r3, [r7, #32]
 80108d4:	e853 3f00 	ldrex	r3, [r3]
 80108d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80108e0:	637b      	str	r3, [r7, #52]	; 0x34
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	461a      	mov	r2, r3
 80108e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108ec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108f2:	e841 2300 	strex	r3, r2, [r1]
 80108f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80108f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d1e6      	bne.n	80108cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	3308      	adds	r3, #8
 8010904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	e853 3f00 	ldrex	r3, [r3]
 801090c:	60bb      	str	r3, [r7, #8]
   return(result);
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010914:	633b      	str	r3, [r7, #48]	; 0x30
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	3308      	adds	r3, #8
 801091c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801091e:	61ba      	str	r2, [r7, #24]
 8010920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010922:	6979      	ldr	r1, [r7, #20]
 8010924:	69ba      	ldr	r2, [r7, #24]
 8010926:	e841 2300 	strex	r3, r2, [r1]
 801092a:	613b      	str	r3, [r7, #16]
   return(result);
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d1e5      	bne.n	80108fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2220      	movs	r2, #32
 8010936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 801093a:	bf00      	nop
 801093c:	373c      	adds	r7, #60	; 0x3c
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr
	...

08010948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010948:	b480      	push	{r7}
 801094a:	b095      	sub	sp, #84	; 0x54
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010958:	e853 3f00 	ldrex	r3, [r3]
 801095c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	461a      	mov	r2, r3
 801096c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801096e:	643b      	str	r3, [r7, #64]	; 0x40
 8010970:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010976:	e841 2300 	strex	r3, r2, [r1]
 801097a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801097c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1e6      	bne.n	8010950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	3308      	adds	r3, #8
 8010988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801098a:	6a3b      	ldr	r3, [r7, #32]
 801098c:	e853 3f00 	ldrex	r3, [r3]
 8010990:	61fb      	str	r3, [r7, #28]
   return(result);
 8010992:	69fa      	ldr	r2, [r7, #28]
 8010994:	4b1e      	ldr	r3, [pc, #120]	; (8010a10 <UART_EndRxTransfer+0xc8>)
 8010996:	4013      	ands	r3, r2
 8010998:	64bb      	str	r3, [r7, #72]	; 0x48
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	3308      	adds	r3, #8
 80109a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80109a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109aa:	e841 2300 	strex	r3, r2, [r1]
 80109ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d1e5      	bne.n	8010982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d118      	bne.n	80109f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	e853 3f00 	ldrex	r3, [r3]
 80109ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	f023 0310 	bic.w	r3, r3, #16
 80109d2:	647b      	str	r3, [r7, #68]	; 0x44
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	461a      	mov	r2, r3
 80109da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109dc:	61bb      	str	r3, [r7, #24]
 80109de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109e0:	6979      	ldr	r1, [r7, #20]
 80109e2:	69ba      	ldr	r2, [r7, #24]
 80109e4:	e841 2300 	strex	r3, r2, [r1]
 80109e8:	613b      	str	r3, [r7, #16]
   return(result);
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d1e6      	bne.n	80109be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2220      	movs	r2, #32
 80109f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2200      	movs	r2, #0
 8010a02:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010a04:	bf00      	nop
 8010a06:	3754      	adds	r7, #84	; 0x54
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr
 8010a10:	effffffe 	.word	0xeffffffe

08010a14 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b090      	sub	sp, #64	; 0x40
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a20:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	69db      	ldr	r3, [r3, #28]
 8010a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a2a:	d037      	beq.n	8010a9c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	3308      	adds	r3, #8
 8010a3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3e:	e853 3f00 	ldrex	r3, [r3]
 8010a42:	623b      	str	r3, [r7, #32]
   return(result);
 8010a44:	6a3b      	ldr	r3, [r7, #32]
 8010a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	3308      	adds	r3, #8
 8010a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a54:	633a      	str	r2, [r7, #48]	; 0x30
 8010a56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a5c:	e841 2300 	strex	r3, r2, [r1]
 8010a60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d1e5      	bne.n	8010a34 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	e853 3f00 	ldrex	r3, [r3]
 8010a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8010a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	461a      	mov	r2, r3
 8010a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a86:	61fb      	str	r3, [r7, #28]
 8010a88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a8a:	69b9      	ldr	r1, [r7, #24]
 8010a8c:	69fa      	ldr	r2, [r7, #28]
 8010a8e:	e841 2300 	strex	r3, r2, [r1]
 8010a92:	617b      	str	r3, [r7, #20]
   return(result);
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1e6      	bne.n	8010a68 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010a9a:	e002      	b.n	8010aa2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010a9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a9e:	f7fe ff21 	bl	800f8e4 <HAL_UART_TxCpltCallback>
}
 8010aa2:	bf00      	nop
 8010aa4:	3740      	adds	r7, #64	; 0x40
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b084      	sub	sp, #16
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ab6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f7fe ff1d 	bl	800f8f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010abe:	bf00      	nop
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b09c      	sub	sp, #112	; 0x70
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ad2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	69db      	ldr	r3, [r3, #28]
 8010ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010adc:	d071      	beq.n	8010bc2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010aee:	e853 3f00 	ldrex	r3, [r3]
 8010af2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010afa:	66bb      	str	r3, [r7, #104]	; 0x68
 8010afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	461a      	mov	r2, r3
 8010b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b04:	65bb      	str	r3, [r7, #88]	; 0x58
 8010b06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b0c:	e841 2300 	strex	r3, r2, [r1]
 8010b10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d1e6      	bne.n	8010ae6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	3308      	adds	r3, #8
 8010b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b22:	e853 3f00 	ldrex	r3, [r3]
 8010b26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b2a:	f023 0301 	bic.w	r3, r3, #1
 8010b2e:	667b      	str	r3, [r7, #100]	; 0x64
 8010b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	3308      	adds	r3, #8
 8010b36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010b38:	647a      	str	r2, [r7, #68]	; 0x44
 8010b3a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010b3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b40:	e841 2300 	strex	r3, r2, [r1]
 8010b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1e5      	bne.n	8010b18 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	3308      	adds	r3, #8
 8010b52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b56:	e853 3f00 	ldrex	r3, [r3]
 8010b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8010b5c:	6a3b      	ldr	r3, [r7, #32]
 8010b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b62:	663b      	str	r3, [r7, #96]	; 0x60
 8010b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	3308      	adds	r3, #8
 8010b6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b6c:	633a      	str	r2, [r7, #48]	; 0x30
 8010b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b74:	e841 2300 	strex	r3, r2, [r1]
 8010b78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d1e5      	bne.n	8010b4c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b82:	2220      	movs	r2, #32
 8010b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	d118      	bne.n	8010bc2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	e853 3f00 	ldrex	r3, [r3]
 8010b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	f023 0310 	bic.w	r3, r3, #16
 8010ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	461a      	mov	r2, r3
 8010bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bae:	61fb      	str	r3, [r7, #28]
 8010bb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bb2:	69b9      	ldr	r1, [r7, #24]
 8010bb4:	69fa      	ldr	r2, [r7, #28]
 8010bb6:	e841 2300 	strex	r3, r2, [r1]
 8010bba:	617b      	str	r3, [r7, #20]
   return(result);
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1e6      	bne.n	8010b90 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d107      	bne.n	8010bda <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010bd4:	f7f2 fb5c 	bl	8003290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010bd8:	e002      	b.n	8010be0 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010bda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010bdc:	f7fe fe96 	bl	800f90c <HAL_UART_RxCpltCallback>
}
 8010be0:	bf00      	nop
 8010be2:	3770      	adds	r7, #112	; 0x70
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bf4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	d109      	bne.n	8010c12 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010c04:	085b      	lsrs	r3, r3, #1
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	4619      	mov	r1, r3
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f7f2 fb40 	bl	8003290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c10:	e002      	b.n	8010c18 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f7fe fe84 	bl	800f920 <HAL_UART_RxHalfCpltCallback>
}
 8010c18:	bf00      	nop
 8010c1a:	3710      	adds	r7, #16
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b086      	sub	sp, #24
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c2c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c34:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c3c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	689b      	ldr	r3, [r3, #8]
 8010c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c48:	2b80      	cmp	r3, #128	; 0x80
 8010c4a:	d109      	bne.n	8010c60 <UART_DMAError+0x40>
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	2b21      	cmp	r3, #33	; 0x21
 8010c50:	d106      	bne.n	8010c60 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	2200      	movs	r2, #0
 8010c56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010c5a:	6978      	ldr	r0, [r7, #20]
 8010c5c:	f7ff fe32 	bl	80108c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	689b      	ldr	r3, [r3, #8]
 8010c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c6a:	2b40      	cmp	r3, #64	; 0x40
 8010c6c:	d109      	bne.n	8010c82 <UART_DMAError+0x62>
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2b22      	cmp	r3, #34	; 0x22
 8010c72:	d106      	bne.n	8010c82 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	2200      	movs	r2, #0
 8010c78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010c7c:	6978      	ldr	r0, [r7, #20]
 8010c7e:	f7ff fe63 	bl	8010948 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c88:	f043 0210 	orr.w	r2, r3, #16
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c92:	6978      	ldr	r0, [r7, #20]
 8010c94:	f7fe fe4e 	bl	800f934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c98:	bf00      	nop
 8010c9a:	3718      	adds	r7, #24
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010cbe:	68f8      	ldr	r0, [r7, #12]
 8010cc0:	f7fe fe38 	bl	800f934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cc4:	bf00      	nop
 8010cc6:	3710      	adds	r7, #16
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b088      	sub	sp, #32
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	e853 3f00 	ldrex	r3, [r3]
 8010ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ce8:	61fb      	str	r3, [r7, #28]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	461a      	mov	r2, r3
 8010cf0:	69fb      	ldr	r3, [r7, #28]
 8010cf2:	61bb      	str	r3, [r7, #24]
 8010cf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf6:	6979      	ldr	r1, [r7, #20]
 8010cf8:	69ba      	ldr	r2, [r7, #24]
 8010cfa:	e841 2300 	strex	r3, r2, [r1]
 8010cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1e6      	bne.n	8010cd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2220      	movs	r2, #32
 8010d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2200      	movs	r2, #0
 8010d12:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f7fe fde5 	bl	800f8e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d1a:	bf00      	nop
 8010d1c:	3720      	adds	r7, #32
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010d22:	b480      	push	{r7}
 8010d24:	b083      	sub	sp, #12
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010d2a:	bf00      	nop
 8010d2c:	370c      	adds	r7, #12
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d34:	4770      	bx	lr

08010d36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010d36:	b480      	push	{r7}
 8010d38:	b083      	sub	sp, #12
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010d3e:	bf00      	nop
 8010d40:	370c      	adds	r7, #12
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr

08010d4a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010d4a:	b480      	push	{r7}
 8010d4c:	b083      	sub	sp, #12
 8010d4e:	af00      	add	r7, sp, #0
 8010d50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010d52:	bf00      	nop
 8010d54:	370c      	adds	r7, #12
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr

08010d5e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b084      	sub	sp, #16
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	d101      	bne.n	8010d74 <HAL_UARTEx_EnableFifoMode+0x16>
 8010d70:	2302      	movs	r3, #2
 8010d72:	e02b      	b.n	8010dcc <HAL_UARTEx_EnableFifoMode+0x6e>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2201      	movs	r2, #1
 8010d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2224      	movs	r2, #36	; 0x24
 8010d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	681a      	ldr	r2, [r3, #0]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	f022 0201 	bic.w	r2, r2, #1
 8010d9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010da2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010daa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	68fa      	ldr	r2, [r7, #12]
 8010db2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 f91f 	bl	8010ff8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2220      	movs	r2, #32
 8010dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010dca:	2300      	movs	r3, #0
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3710      	adds	r7, #16
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d101      	bne.n	8010dea <HAL_UARTEx_DisableFifoMode+0x16>
 8010de6:	2302      	movs	r3, #2
 8010de8:	e027      	b.n	8010e3a <HAL_UARTEx_DisableFifoMode+0x66>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2201      	movs	r2, #1
 8010dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2224      	movs	r2, #36	; 0x24
 8010df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f022 0201 	bic.w	r2, r2, #1
 8010e10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010e18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	68fa      	ldr	r2, [r7, #12]
 8010e26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2220      	movs	r2, #32
 8010e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010e38:	2300      	movs	r3, #0
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3714      	adds	r7, #20
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr

08010e46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e46:	b580      	push	{r7, lr}
 8010e48:	b084      	sub	sp, #16
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
 8010e4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	d101      	bne.n	8010e5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e5a:	2302      	movs	r3, #2
 8010e5c:	e02d      	b.n	8010eba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2201      	movs	r2, #1
 8010e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2224      	movs	r2, #36	; 0x24
 8010e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	681a      	ldr	r2, [r3, #0]
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f022 0201 	bic.w	r2, r2, #1
 8010e84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	689b      	ldr	r3, [r3, #8]
 8010e8c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	683a      	ldr	r2, [r7, #0]
 8010e96:	430a      	orrs	r2, r1
 8010e98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f000 f8ac 	bl	8010ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	68fa      	ldr	r2, [r7, #12]
 8010ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2220      	movs	r2, #32
 8010eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010eb8:	2300      	movs	r3, #0
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3710      	adds	r7, #16
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ec2:	b580      	push	{r7, lr}
 8010ec4:	b084      	sub	sp, #16
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
 8010eca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d101      	bne.n	8010eda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010ed6:	2302      	movs	r3, #2
 8010ed8:	e02d      	b.n	8010f36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2201      	movs	r2, #1
 8010ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2224      	movs	r2, #36	; 0x24
 8010ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f022 0201 	bic.w	r2, r2, #1
 8010f00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	683a      	ldr	r2, [r7, #0]
 8010f12:	430a      	orrs	r2, r1
 8010f14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 f86e 	bl	8010ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	68fa      	ldr	r2, [r7, #12]
 8010f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2220      	movs	r2, #32
 8010f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010f34:	2300      	movs	r3, #0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3710      	adds	r7, #16
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}

08010f3e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010f3e:	b580      	push	{r7, lr}
 8010f40:	b08c      	sub	sp, #48	; 0x30
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	60f8      	str	r0, [r7, #12]
 8010f46:	60b9      	str	r1, [r7, #8]
 8010f48:	4613      	mov	r3, r2
 8010f4a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f52:	2b20      	cmp	r3, #32
 8010f54:	d14a      	bne.n	8010fec <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d002      	beq.n	8010f62 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010f5c:	88fb      	ldrh	r3, [r7, #6]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d101      	bne.n	8010f66 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010f62:	2301      	movs	r3, #1
 8010f64:	e043      	b.n	8010fee <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d101      	bne.n	8010f74 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8010f70:	2302      	movs	r3, #2
 8010f72:	e03c      	b.n	8010fee <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2201      	movs	r2, #1
 8010f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2201      	movs	r2, #1
 8010f80:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010f82:	88fb      	ldrh	r3, [r7, #6]
 8010f84:	461a      	mov	r2, r3
 8010f86:	68b9      	ldr	r1, [r7, #8]
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f7ff fbf3 	bl	8010774 <UART_Start_Receive_DMA>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010f94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d124      	bne.n	8010fe6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fa0:	2b01      	cmp	r3, #1
 8010fa2:	d11d      	bne.n	8010fe0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2210      	movs	r2, #16
 8010faa:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb2:	69bb      	ldr	r3, [r7, #24]
 8010fb4:	e853 3f00 	ldrex	r3, [r3]
 8010fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	f043 0310 	orr.w	r3, r3, #16
 8010fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fca:	627b      	str	r3, [r7, #36]	; 0x24
 8010fcc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fce:	6a39      	ldr	r1, [r7, #32]
 8010fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fd2:	e841 2300 	strex	r3, r2, [r1]
 8010fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8010fd8:	69fb      	ldr	r3, [r7, #28]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1e6      	bne.n	8010fac <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8010fde:	e002      	b.n	8010fe6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fea:	e000      	b.n	8010fee <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010fec:	2302      	movs	r3, #2
  }
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3730      	adds	r7, #48	; 0x30
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
	...

08010ff8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b085      	sub	sp, #20
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011004:	2b00      	cmp	r3, #0
 8011006:	d108      	bne.n	801101a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2201      	movs	r2, #1
 801100c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2201      	movs	r2, #1
 8011014:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011018:	e031      	b.n	801107e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801101a:	2310      	movs	r3, #16
 801101c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801101e:	2310      	movs	r3, #16
 8011020:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	689b      	ldr	r3, [r3, #8]
 8011028:	0e5b      	lsrs	r3, r3, #25
 801102a:	b2db      	uxtb	r3, r3
 801102c:	f003 0307 	and.w	r3, r3, #7
 8011030:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	0f5b      	lsrs	r3, r3, #29
 801103a:	b2db      	uxtb	r3, r3
 801103c:	f003 0307 	and.w	r3, r3, #7
 8011040:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011042:	7bbb      	ldrb	r3, [r7, #14]
 8011044:	7b3a      	ldrb	r2, [r7, #12]
 8011046:	4911      	ldr	r1, [pc, #68]	; (801108c <UARTEx_SetNbDataToProcess+0x94>)
 8011048:	5c8a      	ldrb	r2, [r1, r2]
 801104a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801104e:	7b3a      	ldrb	r2, [r7, #12]
 8011050:	490f      	ldr	r1, [pc, #60]	; (8011090 <UARTEx_SetNbDataToProcess+0x98>)
 8011052:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011054:	fb93 f3f2 	sdiv	r3, r3, r2
 8011058:	b29a      	uxth	r2, r3
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011060:	7bfb      	ldrb	r3, [r7, #15]
 8011062:	7b7a      	ldrb	r2, [r7, #13]
 8011064:	4909      	ldr	r1, [pc, #36]	; (801108c <UARTEx_SetNbDataToProcess+0x94>)
 8011066:	5c8a      	ldrb	r2, [r1, r2]
 8011068:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801106c:	7b7a      	ldrb	r2, [r7, #13]
 801106e:	4908      	ldr	r1, [pc, #32]	; (8011090 <UARTEx_SetNbDataToProcess+0x98>)
 8011070:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011072:	fb93 f3f2 	sdiv	r3, r3, r2
 8011076:	b29a      	uxth	r2, r3
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801107e:	bf00      	nop
 8011080:	3714      	adds	r7, #20
 8011082:	46bd      	mov	sp, r7
 8011084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011088:	4770      	bx	lr
 801108a:	bf00      	nop
 801108c:	0801516c 	.word	0x0801516c
 8011090:	08015174 	.word	0x08015174

08011094 <checkint>:
 8011094:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011098:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801109c:	429a      	cmp	r2, r3
 801109e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110a0:	dd2b      	ble.n	80110fa <checkint+0x66>
 80110a2:	f240 4333 	movw	r3, #1075	; 0x433
 80110a6:	429a      	cmp	r2, r3
 80110a8:	dc25      	bgt.n	80110f6 <checkint+0x62>
 80110aa:	1a9b      	subs	r3, r3, r2
 80110ac:	f1a3 0620 	sub.w	r6, r3, #32
 80110b0:	f04f 32ff 	mov.w	r2, #4294967295
 80110b4:	fa02 f606 	lsl.w	r6, r2, r6
 80110b8:	fa02 f403 	lsl.w	r4, r2, r3
 80110bc:	f1c3 0520 	rsb	r5, r3, #32
 80110c0:	4334      	orrs	r4, r6
 80110c2:	fa22 f505 	lsr.w	r5, r2, r5
 80110c6:	432c      	orrs	r4, r5
 80110c8:	409a      	lsls	r2, r3
 80110ca:	ea20 0602 	bic.w	r6, r0, r2
 80110ce:	ea21 0704 	bic.w	r7, r1, r4
 80110d2:	ea56 0207 	orrs.w	r2, r6, r7
 80110d6:	f1a3 0420 	sub.w	r4, r3, #32
 80110da:	f1c3 0220 	rsb	r2, r3, #32
 80110de:	d10c      	bne.n	80110fa <checkint+0x66>
 80110e0:	40d8      	lsrs	r0, r3
 80110e2:	fa01 f302 	lsl.w	r3, r1, r2
 80110e6:	4318      	orrs	r0, r3
 80110e8:	40e1      	lsrs	r1, r4
 80110ea:	4308      	orrs	r0, r1
 80110ec:	f000 0301 	and.w	r3, r0, #1
 80110f0:	f1c3 0002 	rsb	r0, r3, #2
 80110f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110f6:	2002      	movs	r0, #2
 80110f8:	e7fc      	b.n	80110f4 <checkint+0x60>
 80110fa:	2000      	movs	r0, #0
 80110fc:	e7fa      	b.n	80110f4 <checkint+0x60>
	...

08011100 <pow>:
 8011100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011104:	ed2d 8b0a 	vpush	{d8-d12}
 8011108:	b09b      	sub	sp, #108	; 0x6c
 801110a:	ed8d 0b02 	vstr	d0, [sp, #8]
 801110e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011112:	ed8d 1b00 	vstr	d1, [sp]
 8011116:	ea4f 5915 	mov.w	r9, r5, lsr #20
 801111a:	e9dd 6700 	ldrd	r6, r7, [sp]
 801111e:	f109 30ff 	add.w	r0, r9, #4294967295
 8011122:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8011126:	4288      	cmp	r0, r1
 8011128:	46cc      	mov	ip, r9
 801112a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 801112e:	d806      	bhi.n	801113e <pow+0x3e>
 8011130:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8011134:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8011138:	297f      	cmp	r1, #127	; 0x7f
 801113a:	f240 81ab 	bls.w	8011494 <pow+0x394>
 801113e:	19b1      	adds	r1, r6, r6
 8011140:	9104      	str	r1, [sp, #16]
 8011142:	eb47 0107 	adc.w	r1, r7, r7
 8011146:	9105      	str	r1, [sp, #20]
 8011148:	9904      	ldr	r1, [sp, #16]
 801114a:	f111 31ff 	adds.w	r1, r1, #4294967295
 801114e:	460a      	mov	r2, r1
 8011150:	9905      	ldr	r1, [sp, #20]
 8011152:	f141 31ff 	adc.w	r1, r1, #4294967295
 8011156:	460b      	mov	r3, r1
 8011158:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 801115c:	f06f 0001 	mvn.w	r0, #1
 8011160:	4299      	cmp	r1, r3
 8011162:	bf08      	it	eq
 8011164:	4290      	cmpeq	r0, r2
 8011166:	d260      	bcs.n	801122a <pow+0x12a>
 8011168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801116c:	4313      	orrs	r3, r2
 801116e:	d11a      	bne.n	80111a6 <pow+0xa6>
 8011170:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8011174:	1923      	adds	r3, r4, r4
 8011176:	930c      	str	r3, [sp, #48]	; 0x30
 8011178:	eb42 0302 	adc.w	r3, r2, r2
 801117c:	930d      	str	r3, [sp, #52]	; 0x34
 801117e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011182:	4bcf      	ldr	r3, [pc, #828]	; (80114c0 <pow+0x3c0>)
 8011184:	2200      	movs	r2, #0
 8011186:	428b      	cmp	r3, r1
 8011188:	bf08      	it	eq
 801118a:	4282      	cmpeq	r2, r0
 801118c:	f080 8265 	bcs.w	801165a <pow+0x55a>
 8011190:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011194:	ed9d 6b00 	vldr	d6, [sp]
 8011198:	ee37 0b06 	vadd.f64	d0, d7, d6
 801119c:	b01b      	add	sp, #108	; 0x6c
 801119e:	ecbd 8b0a 	vpop	{d8-d12}
 80111a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a6:	49c7      	ldr	r1, [pc, #796]	; (80114c4 <pow+0x3c4>)
 80111a8:	2000      	movs	r0, #0
 80111aa:	428d      	cmp	r5, r1
 80111ac:	bf08      	it	eq
 80111ae:	4284      	cmpeq	r4, r0
 80111b0:	d10b      	bne.n	80111ca <pow+0xca>
 80111b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80111b6:	19b3      	adds	r3, r6, r6
 80111b8:	930e      	str	r3, [sp, #56]	; 0x38
 80111ba:	eb42 0302 	adc.w	r3, r2, r2
 80111be:	930f      	str	r3, [sp, #60]	; 0x3c
 80111c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80111c4:	4bbe      	ldr	r3, [pc, #760]	; (80114c0 <pow+0x3c0>)
 80111c6:	2200      	movs	r2, #0
 80111c8:	e7dd      	b.n	8011186 <pow+0x86>
 80111ca:	1921      	adds	r1, r4, r4
 80111cc:	9106      	str	r1, [sp, #24]
 80111ce:	eb45 0105 	adc.w	r1, r5, r5
 80111d2:	9107      	str	r1, [sp, #28]
 80111d4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80111d8:	49bb      	ldr	r1, [pc, #748]	; (80114c8 <pow+0x3c8>)
 80111da:	2000      	movs	r0, #0
 80111dc:	42a1      	cmp	r1, r4
 80111de:	bf08      	it	eq
 80111e0:	4298      	cmpeq	r0, r3
 80111e2:	d3d5      	bcc.n	8011190 <pow+0x90>
 80111e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80111e8:	428c      	cmp	r4, r1
 80111ea:	bf08      	it	eq
 80111ec:	4283      	cmpeq	r3, r0
 80111ee:	d1cf      	bne.n	8011190 <pow+0x90>
 80111f0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80111f4:	49b5      	ldr	r1, [pc, #724]	; (80114cc <pow+0x3cc>)
 80111f6:	2000      	movs	r0, #0
 80111f8:	428c      	cmp	r4, r1
 80111fa:	bf08      	it	eq
 80111fc:	4283      	cmpeq	r3, r0
 80111fe:	f000 822c 	beq.w	801165a <pow+0x55a>
 8011202:	49b3      	ldr	r1, [pc, #716]	; (80114d0 <pow+0x3d0>)
 8011204:	f04f 30ff 	mov.w	r0, #4294967295
 8011208:	42a1      	cmp	r1, r4
 801120a:	bf08      	it	eq
 801120c:	4298      	cmpeq	r0, r3
 801120e:	ea6f 0307 	mvn.w	r3, r7
 8011212:	bf34      	ite	cc
 8011214:	2201      	movcc	r2, #1
 8011216:	2200      	movcs	r2, #0
 8011218:	0fdb      	lsrs	r3, r3, #31
 801121a:	429a      	cmp	r2, r3
 801121c:	f040 821a 	bne.w	8011654 <pow+0x554>
 8011220:	ed9d 7b00 	vldr	d7, [sp]
 8011224:	ee27 0b07 	vmul.f64	d0, d7, d7
 8011228:	e7b8      	b.n	801119c <pow+0x9c>
 801122a:	1923      	adds	r3, r4, r4
 801122c:	9308      	str	r3, [sp, #32]
 801122e:	eb45 0305 	adc.w	r3, r5, r5
 8011232:	9309      	str	r3, [sp, #36]	; 0x24
 8011234:	9b08      	ldr	r3, [sp, #32]
 8011236:	f113 33ff 	adds.w	r3, r3, #4294967295
 801123a:	9310      	str	r3, [sp, #64]	; 0x40
 801123c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801123e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011242:	9311      	str	r3, [sp, #68]	; 0x44
 8011244:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011248:	4299      	cmp	r1, r3
 801124a:	bf08      	it	eq
 801124c:	4290      	cmpeq	r0, r2
 801124e:	d22d      	bcs.n	80112ac <pow+0x1ac>
 8011250:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011254:	2c00      	cmp	r4, #0
 8011256:	f175 0300 	sbcs.w	r3, r5, #0
 801125a:	ee27 0b07 	vmul.f64	d0, d7, d7
 801125e:	da16      	bge.n	801128e <pow+0x18e>
 8011260:	4630      	mov	r0, r6
 8011262:	4639      	mov	r1, r7
 8011264:	f7ff ff16 	bl	8011094 <checkint>
 8011268:	2801      	cmp	r0, #1
 801126a:	d110      	bne.n	801128e <pow+0x18e>
 801126c:	eeb1 0b40 	vneg.f64	d0, d0
 8011270:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8011274:	4323      	orrs	r3, r4
 8011276:	d10c      	bne.n	8011292 <pow+0x192>
 8011278:	2e00      	cmp	r6, #0
 801127a:	f177 0300 	sbcs.w	r3, r7, #0
 801127e:	da8d      	bge.n	801119c <pow+0x9c>
 8011280:	b01b      	add	sp, #108	; 0x6c
 8011282:	ecbd 8b0a 	vpop	{d8-d12}
 8011286:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801128a:	f001 b809 	b.w	80122a0 <__math_divzero>
 801128e:	2000      	movs	r0, #0
 8011290:	e7ee      	b.n	8011270 <pow+0x170>
 8011292:	2e00      	cmp	r6, #0
 8011294:	f177 0300 	sbcs.w	r3, r7, #0
 8011298:	da80      	bge.n	801119c <pow+0x9c>
 801129a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801129e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80112a2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80112a6:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80112aa:	e777      	b.n	801119c <pow+0x9c>
 80112ac:	2c00      	cmp	r4, #0
 80112ae:	f175 0300 	sbcs.w	r3, r5, #0
 80112b2:	da35      	bge.n	8011320 <pow+0x220>
 80112b4:	4630      	mov	r0, r6
 80112b6:	4639      	mov	r1, r7
 80112b8:	f7ff feec 	bl	8011094 <checkint>
 80112bc:	b940      	cbnz	r0, 80112d0 <pow+0x1d0>
 80112be:	ed9d 0b02 	vldr	d0, [sp, #8]
 80112c2:	b01b      	add	sp, #108	; 0x6c
 80112c4:	ecbd 8b0a 	vpop	{d8-d12}
 80112c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112cc:	f001 b800 	b.w	80122d0 <__math_invalid>
 80112d0:	2801      	cmp	r0, #1
 80112d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80112d6:	bf14      	ite	ne
 80112d8:	2000      	movne	r0, #0
 80112da:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80112de:	461d      	mov	r5, r3
 80112e0:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 80112e4:	f3c8 030a 	ubfx	r3, r8, #0, #11
 80112e8:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 80112ec:	2a7f      	cmp	r2, #127	; 0x7f
 80112ee:	d933      	bls.n	8011358 <pow+0x258>
 80112f0:	4974      	ldr	r1, [pc, #464]	; (80114c4 <pow+0x3c4>)
 80112f2:	2000      	movs	r0, #0
 80112f4:	428d      	cmp	r5, r1
 80112f6:	bf08      	it	eq
 80112f8:	4284      	cmpeq	r4, r0
 80112fa:	f000 81ae 	beq.w	801165a <pow+0x55a>
 80112fe:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011302:	4293      	cmp	r3, r2
 8011304:	d80e      	bhi.n	8011324 <pow+0x224>
 8011306:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801130a:	ed9d 7b00 	vldr	d7, [sp]
 801130e:	42a9      	cmp	r1, r5
 8011310:	bf08      	it	eq
 8011312:	42a0      	cmpeq	r0, r4
 8011314:	bf34      	ite	cc
 8011316:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 801131a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 801131e:	e73d      	b.n	801119c <pow+0x9c>
 8011320:	2000      	movs	r0, #0
 8011322:	e7df      	b.n	80112e4 <pow+0x1e4>
 8011324:	42a9      	cmp	r1, r5
 8011326:	bf08      	it	eq
 8011328:	42a0      	cmpeq	r0, r4
 801132a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801132e:	bf2c      	ite	cs
 8011330:	2301      	movcs	r3, #1
 8011332:	2300      	movcc	r3, #0
 8011334:	4590      	cmp	r8, r2
 8011336:	bf8c      	ite	hi
 8011338:	f04f 0800 	movhi.w	r8, #0
 801133c:	f04f 0801 	movls.w	r8, #1
 8011340:	4543      	cmp	r3, r8
 8011342:	f04f 0000 	mov.w	r0, #0
 8011346:	f000 80af 	beq.w	80114a8 <pow+0x3a8>
 801134a:	b01b      	add	sp, #108	; 0x6c
 801134c:	ecbd 8b0a 	vpop	{d8-d12}
 8011350:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011354:	f000 bf9c 	b.w	8012290 <__math_oflow>
 8011358:	f1bc 0f00 	cmp.w	ip, #0
 801135c:	d10e      	bne.n	801137c <pow+0x27c>
 801135e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80114b8 <pow+0x3b8>
 8011362:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011366:	ee26 7b07 	vmul.f64	d7, d6, d7
 801136a:	ec57 6b17 	vmov	r6, r7, d7
 801136e:	4b59      	ldr	r3, [pc, #356]	; (80114d4 <pow+0x3d4>)
 8011370:	2100      	movs	r1, #0
 8011372:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011376:	1874      	adds	r4, r6, r1
 8011378:	eb42 0503 	adc.w	r5, r2, r3
 801137c:	2300      	movs	r3, #0
 801137e:	18e3      	adds	r3, r4, r3
 8011380:	4b55      	ldr	r3, [pc, #340]	; (80114d8 <pow+0x3d8>)
 8011382:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011386:	eb45 0303 	adc.w	r3, r5, r3
 801138a:	1519      	asrs	r1, r3, #20
 801138c:	ee03 1a10 	vmov	s6, r1
 8011390:	0d1e      	lsrs	r6, r3, #20
 8011392:	2100      	movs	r1, #0
 8011394:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011398:	0536      	lsls	r6, r6, #20
 801139a:	1a63      	subs	r3, r4, r1
 801139c:	9312      	str	r3, [sp, #72]	; 0x48
 801139e:	eb65 0306 	sbc.w	r3, r5, r6
 80113a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80113a4:	4b4d      	ldr	r3, [pc, #308]	; (80114dc <pow+0x3dc>)
 80113a6:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 80113aa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80113ae:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 80113b2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80113b6:	ed93 7b00 	vldr	d7, [r3]
 80113ba:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 80113be:	ed93 4b02 	vldr	d4, [r3, #8]
 80113c2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80113c6:	eea3 5b07 	vfma.f64	d5, d3, d7
 80113ca:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 80113ce:	ee36 9b05 	vadd.f64	d9, d6, d5
 80113d2:	ee35 5b49 	vsub.f64	d5, d5, d9
 80113d6:	eea3 7b04 	vfma.f64	d7, d3, d4
 80113da:	ed93 4b04 	vldr	d4, [r3, #16]
 80113de:	ee35 5b06 	vadd.f64	d5, d5, d6
 80113e2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80113e6:	ee26 4b04 	vmul.f64	d4, d6, d4
 80113ea:	ed93 3b08 	vldr	d3, [r3, #32]
 80113ee:	ee26 0b04 	vmul.f64	d0, d6, d4
 80113f2:	eeb0 8b40 	vmov.f64	d8, d0
 80113f6:	ee94 8b06 	vfnms.f64	d8, d4, d6
 80113fa:	ed93 4b06 	vldr	d4, [r3, #24]
 80113fe:	ee26 ab00 	vmul.f64	d10, d6, d0
 8011402:	ee39 1b00 	vadd.f64	d1, d9, d0
 8011406:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 801140a:	eea6 4b03 	vfma.f64	d4, d6, d3
 801140e:	ee39 9b41 	vsub.f64	d9, d9, d1
 8011412:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8011416:	ee37 8b08 	vadd.f64	d8, d7, d8
 801141a:	ee39 9b00 	vadd.f64	d9, d9, d0
 801141e:	eea6 3b02 	vfma.f64	d3, d6, d2
 8011422:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011426:	ee38 9b09 	vadd.f64	d9, d8, d9
 801142a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 801142e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8011432:	ed9d 6b00 	vldr	d6, [sp]
 8011436:	eea0 3b02 	vfma.f64	d3, d0, d2
 801143a:	eea0 4b03 	vfma.f64	d4, d0, d3
 801143e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8011442:	ee31 7b09 	vadd.f64	d7, d1, d9
 8011446:	ee26 6b07 	vmul.f64	d6, d6, d7
 801144a:	ed8d 6b02 	vstr	d6, [sp, #8]
 801144e:	eeb0 3b46 	vmov.f64	d3, d6
 8011452:	ee31 1b47 	vsub.f64	d1, d1, d7
 8011456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801145a:	ee31 9b09 	vadd.f64	d9, d1, d9
 801145e:	ed9d 6b00 	vldr	d6, [sp]
 8011462:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8011466:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 801146a:	193c      	adds	r4, r7, r4
 801146c:	2c3e      	cmp	r4, #62	; 0x3e
 801146e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8011472:	eea6 3b09 	vfma.f64	d3, d6, d9
 8011476:	d934      	bls.n	80114e2 <pow+0x3e2>
 8011478:	428c      	cmp	r4, r1
 801147a:	da0d      	bge.n	8011498 <pow+0x398>
 801147c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011480:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011484:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011488:	2800      	cmp	r0, #0
 801148a:	f43f ae87 	beq.w	801119c <pow+0x9c>
 801148e:	eeb1 0b40 	vneg.f64	d0, d0
 8011492:	e683      	b.n	801119c <pow+0x9c>
 8011494:	2000      	movs	r0, #0
 8011496:	e771      	b.n	801137c <pow+0x27c>
 8011498:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 801149c:	d920      	bls.n	80114e0 <pow+0x3e0>
 801149e:	2a00      	cmp	r2, #0
 80114a0:	f173 0300 	sbcs.w	r3, r3, #0
 80114a4:	f6bf af51 	bge.w	801134a <pow+0x24a>
 80114a8:	b01b      	add	sp, #108	; 0x6c
 80114aa:	ecbd 8b0a 	vpop	{d8-d12}
 80114ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b2:	f000 bee5 	b.w	8012280 <__math_uflow>
 80114b6:	bf00      	nop
 80114b8:	00000000 	.word	0x00000000
 80114bc:	43300000 	.word	0x43300000
 80114c0:	fff00000 	.word	0xfff00000
 80114c4:	3ff00000 	.word	0x3ff00000
 80114c8:	ffe00000 	.word	0xffe00000
 80114cc:	7fe00000 	.word	0x7fe00000
 80114d0:	7fdfffff 	.word	0x7fdfffff
 80114d4:	fcc00000 	.word	0xfcc00000
 80114d8:	c0196aab 	.word	0xc0196aab
 80114dc:	08015180 	.word	0x08015180
 80114e0:	460f      	mov	r7, r1
 80114e2:	4e65      	ldr	r6, [pc, #404]	; (8011678 <pow+0x578>)
 80114e4:	ed9d 4b02 	vldr	d4, [sp, #8]
 80114e8:	ed96 6b02 	vldr	d6, [r6, #8]
 80114ec:	ed96 7b00 	vldr	d7, [r6]
 80114f0:	eeb0 5b46 	vmov.f64	d5, d6
 80114f4:	eea4 5b07 	vfma.f64	d5, d4, d7
 80114f8:	ed8d 5b00 	vstr	d5, [sp]
 80114fc:	ee35 6b46 	vsub.f64	d6, d5, d6
 8011500:	eeb0 5b44 	vmov.f64	d5, d4
 8011504:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011508:	ed96 7b04 	vldr	d7, [r6, #16]
 801150c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8011510:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011514:	eeb0 7b45 	vmov.f64	d7, d5
 8011518:	ed96 5b06 	vldr	d5, [r6, #24]
 801151c:	1849      	adds	r1, r1, r1
 801151e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8011522:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8011526:	eea6 7b05 	vfma.f64	d7, d6, d5
 801152a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 801152e:	ee33 3b07 	vadd.f64	d3, d3, d7
 8011532:	ee23 6b03 	vmul.f64	d6, d3, d3
 8011536:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 801153a:	ed96 5b08 	vldr	d5, [r6, #32]
 801153e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8011542:	1814      	adds	r4, r2, r0
 8011544:	0365      	lsls	r5, r4, #13
 8011546:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 801154a:	eea3 5b04 	vfma.f64	d5, d3, d4
 801154e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011552:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8011556:	ee26 6b06 	vmul.f64	d6, d6, d6
 801155a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 801155e:	2000      	movs	r0, #0
 8011560:	eb10 0a04 	adds.w	sl, r0, r4
 8011564:	eea3 5b04 	vfma.f64	d5, d3, d4
 8011568:	eb45 0b0c 	adc.w	fp, r5, ip
 801156c:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011570:	2f00      	cmp	r7, #0
 8011572:	d16a      	bne.n	801164a <pow+0x54a>
 8011574:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8011578:	4639      	mov	r1, r7
 801157a:	ea50 0301 	orrs.w	r3, r0, r1
 801157e:	f04f 0300 	mov.w	r3, #0
 8011582:	d115      	bne.n	80115b0 <pow+0x4b0>
 8011584:	eb1a 0303 	adds.w	r3, sl, r3
 8011588:	ee0b 3a10 	vmov	s22, r3
 801158c:	4b3b      	ldr	r3, [pc, #236]	; (801167c <pow+0x57c>)
 801158e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8011660 <pow+0x560>
 8011592:	eb4b 0303 	adc.w	r3, fp, r3
 8011596:	ee0b 3a90 	vmov	s23, r3
 801159a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 801159e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 80115a2:	b01b      	add	sp, #108	; 0x6c
 80115a4:	ecbd 8b0a 	vpop	{d8-d12}
 80115a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ac:	f000 bea8 	b.w	8012300 <__math_check_oflow>
 80115b0:	eb1a 0303 	adds.w	r3, sl, r3
 80115b4:	930a      	str	r3, [sp, #40]	; 0x28
 80115b6:	4b32      	ldr	r3, [pc, #200]	; (8011680 <pow+0x580>)
 80115b8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80115bc:	eb4b 0303 	adc.w	r3, fp, r3
 80115c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80115c2:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80115c6:	ee27 6b05 	vmul.f64	d6, d7, d5
 80115ca:	ee35 7b06 	vadd.f64	d7, d5, d6
 80115ce:	eeb0 3bc7 	vabs.f64	d3, d7
 80115d2:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80115d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115da:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8011668 <pow+0x568>
 80115de:	d52b      	bpl.n	8011638 <pow+0x538>
 80115e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80115e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80115e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ec:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80115f0:	ee35 6b06 	vadd.f64	d6, d5, d6
 80115f4:	bf48      	it	mi
 80115f6:	eeb0 4b43 	vmovmi.f64	d4, d3
 80115fa:	ee37 3b04 	vadd.f64	d3, d7, d4
 80115fe:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011602:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011606:	ee37 7b06 	vadd.f64	d7, d7, d6
 801160a:	ee37 7b03 	vadd.f64	d7, d7, d3
 801160e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011612:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801161a:	d105      	bne.n	8011628 <pow+0x528>
 801161c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801161e:	463a      	mov	r2, r7
 8011620:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011624:	ec43 2b17 	vmov	d7, r2, r3
 8011628:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 801162c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8011630:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011634:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8011638:	ee27 0b00 	vmul.f64	d0, d7, d0
 801163c:	b01b      	add	sp, #108	; 0x6c
 801163e:	ecbd 8b0a 	vpop	{d8-d12}
 8011642:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011646:	f000 be52 	b.w	80122ee <__math_check_uflow>
 801164a:	ec4b ab10 	vmov	d0, sl, fp
 801164e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011652:	e5a3      	b.n	801119c <pow+0x9c>
 8011654:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8011670 <pow+0x570>
 8011658:	e5a0      	b.n	801119c <pow+0x9c>
 801165a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801165e:	e59d      	b.n	801119c <pow+0x9c>
 8011660:	00000000 	.word	0x00000000
 8011664:	7f000000 	.word	0x7f000000
 8011668:	00000000 	.word	0x00000000
 801166c:	00100000 	.word	0x00100000
	...
 8011678:	08016368 	.word	0x08016368
 801167c:	c0f00000 	.word	0xc0f00000
 8011680:	3fe00000 	.word	0x3fe00000
 8011684:	00000000 	.word	0x00000000

08011688 <cos>:
 8011688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801168a:	eeb0 7b40 	vmov.f64	d7, d0
 801168e:	ee17 3a90 	vmov	r3, s15
 8011692:	4a1f      	ldr	r2, [pc, #124]	; (8011710 <cos+0x88>)
 8011694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011698:	4293      	cmp	r3, r2
 801169a:	dc04      	bgt.n	80116a6 <cos+0x1e>
 801169c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8011708 <cos+0x80>
 80116a0:	f000 fa8e 	bl	8011bc0 <__kernel_cos>
 80116a4:	e004      	b.n	80116b0 <cos+0x28>
 80116a6:	4a1b      	ldr	r2, [pc, #108]	; (8011714 <cos+0x8c>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	dd04      	ble.n	80116b6 <cos+0x2e>
 80116ac:	ee30 0b40 	vsub.f64	d0, d0, d0
 80116b0:	b005      	add	sp, #20
 80116b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80116b6:	4668      	mov	r0, sp
 80116b8:	f000 f89e 	bl	80117f8 <__ieee754_rem_pio2>
 80116bc:	f000 0003 	and.w	r0, r0, #3
 80116c0:	2801      	cmp	r0, #1
 80116c2:	d007      	beq.n	80116d4 <cos+0x4c>
 80116c4:	2802      	cmp	r0, #2
 80116c6:	d00e      	beq.n	80116e6 <cos+0x5e>
 80116c8:	b9a0      	cbnz	r0, 80116f4 <cos+0x6c>
 80116ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116ce:	ed9d 0b00 	vldr	d0, [sp]
 80116d2:	e7e5      	b.n	80116a0 <cos+0x18>
 80116d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116d8:	ed9d 0b00 	vldr	d0, [sp]
 80116dc:	f000 fd5c 	bl	8012198 <__kernel_sin>
 80116e0:	eeb1 0b40 	vneg.f64	d0, d0
 80116e4:	e7e4      	b.n	80116b0 <cos+0x28>
 80116e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116ea:	ed9d 0b00 	vldr	d0, [sp]
 80116ee:	f000 fa67 	bl	8011bc0 <__kernel_cos>
 80116f2:	e7f5      	b.n	80116e0 <cos+0x58>
 80116f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116f8:	ed9d 0b00 	vldr	d0, [sp]
 80116fc:	2001      	movs	r0, #1
 80116fe:	f000 fd4b 	bl	8012198 <__kernel_sin>
 8011702:	e7d5      	b.n	80116b0 <cos+0x28>
 8011704:	f3af 8000 	nop.w
	...
 8011710:	3fe921fb 	.word	0x3fe921fb
 8011714:	7fefffff 	.word	0x7fefffff

08011718 <sin>:
 8011718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801171a:	eeb0 7b40 	vmov.f64	d7, d0
 801171e:	ee17 3a90 	vmov	r3, s15
 8011722:	4a1f      	ldr	r2, [pc, #124]	; (80117a0 <sin+0x88>)
 8011724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011728:	4293      	cmp	r3, r2
 801172a:	dc05      	bgt.n	8011738 <sin+0x20>
 801172c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8011798 <sin+0x80>
 8011730:	2000      	movs	r0, #0
 8011732:	f000 fd31 	bl	8012198 <__kernel_sin>
 8011736:	e004      	b.n	8011742 <sin+0x2a>
 8011738:	4a1a      	ldr	r2, [pc, #104]	; (80117a4 <sin+0x8c>)
 801173a:	4293      	cmp	r3, r2
 801173c:	dd04      	ble.n	8011748 <sin+0x30>
 801173e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011742:	b005      	add	sp, #20
 8011744:	f85d fb04 	ldr.w	pc, [sp], #4
 8011748:	4668      	mov	r0, sp
 801174a:	f000 f855 	bl	80117f8 <__ieee754_rem_pio2>
 801174e:	f000 0003 	and.w	r0, r0, #3
 8011752:	2801      	cmp	r0, #1
 8011754:	d008      	beq.n	8011768 <sin+0x50>
 8011756:	2802      	cmp	r0, #2
 8011758:	d00d      	beq.n	8011776 <sin+0x5e>
 801175a:	b9b0      	cbnz	r0, 801178a <sin+0x72>
 801175c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011760:	ed9d 0b00 	vldr	d0, [sp]
 8011764:	2001      	movs	r0, #1
 8011766:	e7e4      	b.n	8011732 <sin+0x1a>
 8011768:	ed9d 1b02 	vldr	d1, [sp, #8]
 801176c:	ed9d 0b00 	vldr	d0, [sp]
 8011770:	f000 fa26 	bl	8011bc0 <__kernel_cos>
 8011774:	e7e5      	b.n	8011742 <sin+0x2a>
 8011776:	ed9d 1b02 	vldr	d1, [sp, #8]
 801177a:	ed9d 0b00 	vldr	d0, [sp]
 801177e:	2001      	movs	r0, #1
 8011780:	f000 fd0a 	bl	8012198 <__kernel_sin>
 8011784:	eeb1 0b40 	vneg.f64	d0, d0
 8011788:	e7db      	b.n	8011742 <sin+0x2a>
 801178a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801178e:	ed9d 0b00 	vldr	d0, [sp]
 8011792:	f000 fa15 	bl	8011bc0 <__kernel_cos>
 8011796:	e7f5      	b.n	8011784 <sin+0x6c>
	...
 80117a0:	3fe921fb 	.word	0x3fe921fb
 80117a4:	7fefffff 	.word	0x7fefffff

080117a8 <atan2f>:
 80117a8:	f000 b966 	b.w	8011a78 <__ieee754_atan2f>

080117ac <sqrtf>:
 80117ac:	b508      	push	{r3, lr}
 80117ae:	ed2d 8b02 	vpush	{d8}
 80117b2:	eeb0 8a40 	vmov.f32	s16, s0
 80117b6:	f000 f9fd 	bl	8011bb4 <__ieee754_sqrtf>
 80117ba:	4b0d      	ldr	r3, [pc, #52]	; (80117f0 <sqrtf+0x44>)
 80117bc:	f993 3000 	ldrsb.w	r3, [r3]
 80117c0:	3301      	adds	r3, #1
 80117c2:	d011      	beq.n	80117e8 <sqrtf+0x3c>
 80117c4:	eeb4 8a48 	vcmp.f32	s16, s16
 80117c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117cc:	d60c      	bvs.n	80117e8 <sqrtf+0x3c>
 80117ce:	eddf 8a09 	vldr	s17, [pc, #36]	; 80117f4 <sqrtf+0x48>
 80117d2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80117d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117da:	d505      	bpl.n	80117e8 <sqrtf+0x3c>
 80117dc:	f000 ff92 	bl	8012704 <__errno>
 80117e0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80117e4:	2321      	movs	r3, #33	; 0x21
 80117e6:	6003      	str	r3, [r0, #0]
 80117e8:	ecbd 8b02 	vpop	{d8}
 80117ec:	bd08      	pop	{r3, pc}
 80117ee:	bf00      	nop
 80117f0:	2400023d 	.word	0x2400023d
 80117f4:	00000000 	.word	0x00000000

080117f8 <__ieee754_rem_pio2>:
 80117f8:	b570      	push	{r4, r5, r6, lr}
 80117fa:	eeb0 7b40 	vmov.f64	d7, d0
 80117fe:	ee17 5a90 	vmov	r5, s15
 8011802:	4b97      	ldr	r3, [pc, #604]	; (8011a60 <__ieee754_rem_pio2+0x268>)
 8011804:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011808:	429e      	cmp	r6, r3
 801180a:	b088      	sub	sp, #32
 801180c:	4604      	mov	r4, r0
 801180e:	dc07      	bgt.n	8011820 <__ieee754_rem_pio2+0x28>
 8011810:	2200      	movs	r2, #0
 8011812:	2300      	movs	r3, #0
 8011814:	ed84 0b00 	vstr	d0, [r4]
 8011818:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801181c:	2000      	movs	r0, #0
 801181e:	e01b      	b.n	8011858 <__ieee754_rem_pio2+0x60>
 8011820:	4b90      	ldr	r3, [pc, #576]	; (8011a64 <__ieee754_rem_pio2+0x26c>)
 8011822:	429e      	cmp	r6, r3
 8011824:	dc3b      	bgt.n	801189e <__ieee754_rem_pio2+0xa6>
 8011826:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801182a:	2d00      	cmp	r5, #0
 801182c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011a20 <__ieee754_rem_pio2+0x228>
 8011830:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8011834:	dd19      	ble.n	801186a <__ieee754_rem_pio2+0x72>
 8011836:	ee30 7b46 	vsub.f64	d7, d0, d6
 801183a:	429e      	cmp	r6, r3
 801183c:	d00e      	beq.n	801185c <__ieee754_rem_pio2+0x64>
 801183e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011a28 <__ieee754_rem_pio2+0x230>
 8011842:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011846:	ee37 7b45 	vsub.f64	d7, d7, d5
 801184a:	ed84 5b00 	vstr	d5, [r4]
 801184e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011852:	ed84 7b02 	vstr	d7, [r4, #8]
 8011856:	2001      	movs	r0, #1
 8011858:	b008      	add	sp, #32
 801185a:	bd70      	pop	{r4, r5, r6, pc}
 801185c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011a30 <__ieee754_rem_pio2+0x238>
 8011860:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011864:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011a38 <__ieee754_rem_pio2+0x240>
 8011868:	e7eb      	b.n	8011842 <__ieee754_rem_pio2+0x4a>
 801186a:	429e      	cmp	r6, r3
 801186c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011870:	d00e      	beq.n	8011890 <__ieee754_rem_pio2+0x98>
 8011872:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8011a28 <__ieee754_rem_pio2+0x230>
 8011876:	ee37 5b06 	vadd.f64	d5, d7, d6
 801187a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801187e:	ed84 5b00 	vstr	d5, [r4]
 8011882:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011886:	f04f 30ff 	mov.w	r0, #4294967295
 801188a:	ed84 7b02 	vstr	d7, [r4, #8]
 801188e:	e7e3      	b.n	8011858 <__ieee754_rem_pio2+0x60>
 8011890:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011a30 <__ieee754_rem_pio2+0x238>
 8011894:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011898:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011a38 <__ieee754_rem_pio2+0x240>
 801189c:	e7eb      	b.n	8011876 <__ieee754_rem_pio2+0x7e>
 801189e:	4b72      	ldr	r3, [pc, #456]	; (8011a68 <__ieee754_rem_pio2+0x270>)
 80118a0:	429e      	cmp	r6, r3
 80118a2:	dc6e      	bgt.n	8011982 <__ieee754_rem_pio2+0x18a>
 80118a4:	f000 fd40 	bl	8012328 <fabs>
 80118a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80118ac:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8011a40 <__ieee754_rem_pio2+0x248>
 80118b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80118b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80118b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80118bc:	ee17 0a90 	vmov	r0, s15
 80118c0:	eeb1 4b45 	vneg.f64	d4, d5
 80118c4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011a20 <__ieee754_rem_pio2+0x228>
 80118c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80118cc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011a28 <__ieee754_rem_pio2+0x230>
 80118d0:	281f      	cmp	r0, #31
 80118d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80118d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80118da:	dc08      	bgt.n	80118ee <__ieee754_rem_pio2+0xf6>
 80118dc:	4b63      	ldr	r3, [pc, #396]	; (8011a6c <__ieee754_rem_pio2+0x274>)
 80118de:	1e42      	subs	r2, r0, #1
 80118e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118e4:	42b3      	cmp	r3, r6
 80118e6:	d002      	beq.n	80118ee <__ieee754_rem_pio2+0xf6>
 80118e8:	ed84 6b00 	vstr	d6, [r4]
 80118ec:	e024      	b.n	8011938 <__ieee754_rem_pio2+0x140>
 80118ee:	ee16 3a90 	vmov	r3, s13
 80118f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80118f6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80118fa:	2b10      	cmp	r3, #16
 80118fc:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011900:	ddf2      	ble.n	80118e8 <__ieee754_rem_pio2+0xf0>
 8011902:	eeb0 6b40 	vmov.f64	d6, d0
 8011906:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8011a30 <__ieee754_rem_pio2+0x238>
 801190a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801190e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011912:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011916:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8011a38 <__ieee754_rem_pio2+0x240>
 801191a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801191e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011922:	ee13 3a90 	vmov	r3, s7
 8011926:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801192a:	1ad3      	subs	r3, r2, r3
 801192c:	2b31      	cmp	r3, #49	; 0x31
 801192e:	dc17      	bgt.n	8011960 <__ieee754_rem_pio2+0x168>
 8011930:	eeb0 0b46 	vmov.f64	d0, d6
 8011934:	ed84 3b00 	vstr	d3, [r4]
 8011938:	ed94 6b00 	vldr	d6, [r4]
 801193c:	2d00      	cmp	r5, #0
 801193e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011942:	ee30 7b47 	vsub.f64	d7, d0, d7
 8011946:	ed84 7b02 	vstr	d7, [r4, #8]
 801194a:	da85      	bge.n	8011858 <__ieee754_rem_pio2+0x60>
 801194c:	eeb1 6b46 	vneg.f64	d6, d6
 8011950:	ed84 6b00 	vstr	d6, [r4]
 8011954:	eeb1 7b47 	vneg.f64	d7, d7
 8011958:	4240      	negs	r0, r0
 801195a:	ed84 7b02 	vstr	d7, [r4, #8]
 801195e:	e77b      	b.n	8011858 <__ieee754_rem_pio2+0x60>
 8011960:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8011a48 <__ieee754_rem_pio2+0x250>
 8011964:	eeb0 0b46 	vmov.f64	d0, d6
 8011968:	eea4 0b03 	vfma.f64	d0, d4, d3
 801196c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011970:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8011a50 <__ieee754_rem_pio2+0x258>
 8011974:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011978:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801197c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011980:	e7b2      	b.n	80118e8 <__ieee754_rem_pio2+0xf0>
 8011982:	4b3b      	ldr	r3, [pc, #236]	; (8011a70 <__ieee754_rem_pio2+0x278>)
 8011984:	429e      	cmp	r6, r3
 8011986:	dd06      	ble.n	8011996 <__ieee754_rem_pio2+0x19e>
 8011988:	ee30 7b40 	vsub.f64	d7, d0, d0
 801198c:	ed80 7b02 	vstr	d7, [r0, #8]
 8011990:	ed80 7b00 	vstr	d7, [r0]
 8011994:	e742      	b.n	801181c <__ieee754_rem_pio2+0x24>
 8011996:	1532      	asrs	r2, r6, #20
 8011998:	ee10 0a10 	vmov	r0, s0
 801199c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80119a0:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80119a4:	ec41 0b17 	vmov	d7, r0, r1
 80119a8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80119ac:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8011a58 <__ieee754_rem_pio2+0x260>
 80119b0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80119b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80119b8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80119bc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80119c0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80119c4:	a902      	add	r1, sp, #8
 80119c6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80119ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80119ce:	ed8d 6b04 	vstr	d6, [sp, #16]
 80119d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80119d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80119da:	2603      	movs	r6, #3
 80119dc:	4608      	mov	r0, r1
 80119de:	ed91 7b04 	vldr	d7, [r1, #16]
 80119e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ea:	4633      	mov	r3, r6
 80119ec:	f1a1 0108 	sub.w	r1, r1, #8
 80119f0:	f106 36ff 	add.w	r6, r6, #4294967295
 80119f4:	d0f3      	beq.n	80119de <__ieee754_rem_pio2+0x1e6>
 80119f6:	491f      	ldr	r1, [pc, #124]	; (8011a74 <__ieee754_rem_pio2+0x27c>)
 80119f8:	9101      	str	r1, [sp, #4]
 80119fa:	2102      	movs	r1, #2
 80119fc:	9100      	str	r1, [sp, #0]
 80119fe:	4621      	mov	r1, r4
 8011a00:	f000 f94a 	bl	8011c98 <__kernel_rem_pio2>
 8011a04:	2d00      	cmp	r5, #0
 8011a06:	f6bf af27 	bge.w	8011858 <__ieee754_rem_pio2+0x60>
 8011a0a:	ed94 7b00 	vldr	d7, [r4]
 8011a0e:	eeb1 7b47 	vneg.f64	d7, d7
 8011a12:	ed84 7b00 	vstr	d7, [r4]
 8011a16:	ed94 7b02 	vldr	d7, [r4, #8]
 8011a1a:	e79b      	b.n	8011954 <__ieee754_rem_pio2+0x15c>
 8011a1c:	f3af 8000 	nop.w
 8011a20:	54400000 	.word	0x54400000
 8011a24:	3ff921fb 	.word	0x3ff921fb
 8011a28:	1a626331 	.word	0x1a626331
 8011a2c:	3dd0b461 	.word	0x3dd0b461
 8011a30:	1a600000 	.word	0x1a600000
 8011a34:	3dd0b461 	.word	0x3dd0b461
 8011a38:	2e037073 	.word	0x2e037073
 8011a3c:	3ba3198a 	.word	0x3ba3198a
 8011a40:	6dc9c883 	.word	0x6dc9c883
 8011a44:	3fe45f30 	.word	0x3fe45f30
 8011a48:	2e000000 	.word	0x2e000000
 8011a4c:	3ba3198a 	.word	0x3ba3198a
 8011a50:	252049c1 	.word	0x252049c1
 8011a54:	397b839a 	.word	0x397b839a
 8011a58:	00000000 	.word	0x00000000
 8011a5c:	41700000 	.word	0x41700000
 8011a60:	3fe921fb 	.word	0x3fe921fb
 8011a64:	4002d97b 	.word	0x4002d97b
 8011a68:	413921fb 	.word	0x413921fb
 8011a6c:	080161c8 	.word	0x080161c8
 8011a70:	7fefffff 	.word	0x7fefffff
 8011a74:	08016248 	.word	0x08016248

08011a78 <__ieee754_atan2f>:
 8011a78:	ee10 2a90 	vmov	r2, s1
 8011a7c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011a80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011a84:	b510      	push	{r4, lr}
 8011a86:	eef0 7a40 	vmov.f32	s15, s0
 8011a8a:	dc06      	bgt.n	8011a9a <__ieee754_atan2f+0x22>
 8011a8c:	ee10 0a10 	vmov	r0, s0
 8011a90:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011a94:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011a98:	dd04      	ble.n	8011aa4 <__ieee754_atan2f+0x2c>
 8011a9a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8011aa2:	bd10      	pop	{r4, pc}
 8011aa4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011aa8:	d103      	bne.n	8011ab2 <__ieee754_atan2f+0x3a>
 8011aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aae:	f000 bd4d 	b.w	801254c <atanf>
 8011ab2:	1794      	asrs	r4, r2, #30
 8011ab4:	f004 0402 	and.w	r4, r4, #2
 8011ab8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011abc:	b93b      	cbnz	r3, 8011ace <__ieee754_atan2f+0x56>
 8011abe:	2c02      	cmp	r4, #2
 8011ac0:	d05c      	beq.n	8011b7c <__ieee754_atan2f+0x104>
 8011ac2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011b90 <__ieee754_atan2f+0x118>
 8011ac6:	2c03      	cmp	r4, #3
 8011ac8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8011acc:	e7e7      	b.n	8011a9e <__ieee754_atan2f+0x26>
 8011ace:	b939      	cbnz	r1, 8011ae0 <__ieee754_atan2f+0x68>
 8011ad0:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011b94 <__ieee754_atan2f+0x11c>
 8011ad4:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8011b98 <__ieee754_atan2f+0x120>
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	fe67 7a80 	vselge.f32	s15, s15, s0
 8011ade:	e7de      	b.n	8011a9e <__ieee754_atan2f+0x26>
 8011ae0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011ae4:	d110      	bne.n	8011b08 <__ieee754_atan2f+0x90>
 8011ae6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011aea:	f104 34ff 	add.w	r4, r4, #4294967295
 8011aee:	d107      	bne.n	8011b00 <__ieee754_atan2f+0x88>
 8011af0:	2c02      	cmp	r4, #2
 8011af2:	d846      	bhi.n	8011b82 <__ieee754_atan2f+0x10a>
 8011af4:	4b29      	ldr	r3, [pc, #164]	; (8011b9c <__ieee754_atan2f+0x124>)
 8011af6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011afa:	edd4 7a00 	vldr	s15, [r4]
 8011afe:	e7ce      	b.n	8011a9e <__ieee754_atan2f+0x26>
 8011b00:	2c02      	cmp	r4, #2
 8011b02:	d841      	bhi.n	8011b88 <__ieee754_atan2f+0x110>
 8011b04:	4b26      	ldr	r3, [pc, #152]	; (8011ba0 <__ieee754_atan2f+0x128>)
 8011b06:	e7f6      	b.n	8011af6 <__ieee754_atan2f+0x7e>
 8011b08:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011b0c:	d0e0      	beq.n	8011ad0 <__ieee754_atan2f+0x58>
 8011b0e:	1a5b      	subs	r3, r3, r1
 8011b10:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8011b14:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011b18:	da1a      	bge.n	8011b50 <__ieee754_atan2f+0xd8>
 8011b1a:	2a00      	cmp	r2, #0
 8011b1c:	da01      	bge.n	8011b22 <__ieee754_atan2f+0xaa>
 8011b1e:	313c      	adds	r1, #60	; 0x3c
 8011b20:	db19      	blt.n	8011b56 <__ieee754_atan2f+0xde>
 8011b22:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011b26:	f000 fde5 	bl	80126f4 <fabsf>
 8011b2a:	f000 fd0f 	bl	801254c <atanf>
 8011b2e:	eef0 7a40 	vmov.f32	s15, s0
 8011b32:	2c01      	cmp	r4, #1
 8011b34:	d012      	beq.n	8011b5c <__ieee754_atan2f+0xe4>
 8011b36:	2c02      	cmp	r4, #2
 8011b38:	d017      	beq.n	8011b6a <__ieee754_atan2f+0xf2>
 8011b3a:	2c00      	cmp	r4, #0
 8011b3c:	d0af      	beq.n	8011a9e <__ieee754_atan2f+0x26>
 8011b3e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8011ba4 <__ieee754_atan2f+0x12c>
 8011b42:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011b46:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011ba8 <__ieee754_atan2f+0x130>
 8011b4a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011b4e:	e7a6      	b.n	8011a9e <__ieee754_atan2f+0x26>
 8011b50:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011b94 <__ieee754_atan2f+0x11c>
 8011b54:	e7ed      	b.n	8011b32 <__ieee754_atan2f+0xba>
 8011b56:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011bac <__ieee754_atan2f+0x134>
 8011b5a:	e7ea      	b.n	8011b32 <__ieee754_atan2f+0xba>
 8011b5c:	ee17 3a90 	vmov	r3, s15
 8011b60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011b64:	ee07 3a90 	vmov	s15, r3
 8011b68:	e799      	b.n	8011a9e <__ieee754_atan2f+0x26>
 8011b6a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8011ba4 <__ieee754_atan2f+0x12c>
 8011b6e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011b72:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8011ba8 <__ieee754_atan2f+0x130>
 8011b76:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011b7a:	e790      	b.n	8011a9e <__ieee754_atan2f+0x26>
 8011b7c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011ba8 <__ieee754_atan2f+0x130>
 8011b80:	e78d      	b.n	8011a9e <__ieee754_atan2f+0x26>
 8011b82:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011bb0 <__ieee754_atan2f+0x138>
 8011b86:	e78a      	b.n	8011a9e <__ieee754_atan2f+0x26>
 8011b88:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011bac <__ieee754_atan2f+0x134>
 8011b8c:	e787      	b.n	8011a9e <__ieee754_atan2f+0x26>
 8011b8e:	bf00      	nop
 8011b90:	c0490fdb 	.word	0xc0490fdb
 8011b94:	3fc90fdb 	.word	0x3fc90fdb
 8011b98:	bfc90fdb 	.word	0xbfc90fdb
 8011b9c:	08016350 	.word	0x08016350
 8011ba0:	0801635c 	.word	0x0801635c
 8011ba4:	33bbbd2e 	.word	0x33bbbd2e
 8011ba8:	40490fdb 	.word	0x40490fdb
 8011bac:	00000000 	.word	0x00000000
 8011bb0:	3f490fdb 	.word	0x3f490fdb

08011bb4 <__ieee754_sqrtf>:
 8011bb4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011bb8:	4770      	bx	lr
 8011bba:	0000      	movs	r0, r0
 8011bbc:	0000      	movs	r0, r0
	...

08011bc0 <__kernel_cos>:
 8011bc0:	ee10 1a90 	vmov	r1, s1
 8011bc4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011bc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011bcc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011bd0:	da05      	bge.n	8011bde <__kernel_cos+0x1e>
 8011bd2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011bd6:	ee17 3a90 	vmov	r3, s15
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d03d      	beq.n	8011c5a <__kernel_cos+0x9a>
 8011bde:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011be2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011c60 <__kernel_cos+0xa0>
 8011be6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011c68 <__kernel_cos+0xa8>
 8011bea:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011bee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011c70 <__kernel_cos+0xb0>
 8011bf2:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011bf6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011c78 <__kernel_cos+0xb8>
 8011bfa:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011bfe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011c80 <__kernel_cos+0xc0>
 8011c02:	4b23      	ldr	r3, [pc, #140]	; (8011c90 <__kernel_cos+0xd0>)
 8011c04:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011c08:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011c88 <__kernel_cos+0xc8>
 8011c0c:	4299      	cmp	r1, r3
 8011c0e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011c12:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011c16:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011c1a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011c1e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8011c22:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011c26:	dc04      	bgt.n	8011c32 <__kernel_cos+0x72>
 8011c28:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011c2c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011c30:	4770      	bx	lr
 8011c32:	4b18      	ldr	r3, [pc, #96]	; (8011c94 <__kernel_cos+0xd4>)
 8011c34:	4299      	cmp	r1, r3
 8011c36:	dc0d      	bgt.n	8011c54 <__kernel_cos+0x94>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011c3e:	ec43 2b15 	vmov	d5, r2, r3
 8011c42:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011c46:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c4e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011c52:	4770      	bx	lr
 8011c54:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011c58:	e7f3      	b.n	8011c42 <__kernel_cos+0x82>
 8011c5a:	eeb0 0b44 	vmov.f64	d0, d4
 8011c5e:	4770      	bx	lr
 8011c60:	be8838d4 	.word	0xbe8838d4
 8011c64:	bda8fae9 	.word	0xbda8fae9
 8011c68:	bdb4b1c4 	.word	0xbdb4b1c4
 8011c6c:	3e21ee9e 	.word	0x3e21ee9e
 8011c70:	809c52ad 	.word	0x809c52ad
 8011c74:	be927e4f 	.word	0xbe927e4f
 8011c78:	19cb1590 	.word	0x19cb1590
 8011c7c:	3efa01a0 	.word	0x3efa01a0
 8011c80:	16c15177 	.word	0x16c15177
 8011c84:	bf56c16c 	.word	0xbf56c16c
 8011c88:	5555554c 	.word	0x5555554c
 8011c8c:	3fa55555 	.word	0x3fa55555
 8011c90:	3fd33332 	.word	0x3fd33332
 8011c94:	3fe90000 	.word	0x3fe90000

08011c98 <__kernel_rem_pio2>:
 8011c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9c:	ed2d 8b06 	vpush	{d8-d10}
 8011ca0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8011ca4:	469b      	mov	fp, r3
 8011ca6:	460f      	mov	r7, r1
 8011ca8:	4bcf      	ldr	r3, [pc, #828]	; (8011fe8 <__kernel_rem_pio2+0x350>)
 8011caa:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8011cac:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8011cb0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8011cb4:	9000      	str	r0, [sp, #0]
 8011cb6:	f112 0f14 	cmn.w	r2, #20
 8011cba:	bfa8      	it	ge
 8011cbc:	2318      	movge	r3, #24
 8011cbe:	f10b 31ff 	add.w	r1, fp, #4294967295
 8011cc2:	bfb8      	it	lt
 8011cc4:	2300      	movlt	r3, #0
 8011cc6:	f06f 0417 	mvn.w	r4, #23
 8011cca:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8011fd0 <__kernel_rem_pio2+0x338>
 8011cce:	bfa4      	itt	ge
 8011cd0:	f1a2 0a03 	subge.w	sl, r2, #3
 8011cd4:	fb9a f3f3 	sdivge	r3, sl, r3
 8011cd8:	fb03 4404 	mla	r4, r3, r4, r4
 8011cdc:	1a5d      	subs	r5, r3, r1
 8011cde:	4414      	add	r4, r2
 8011ce0:	eb09 0601 	add.w	r6, r9, r1
 8011ce4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8011ce8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8011cec:	2200      	movs	r2, #0
 8011cee:	42b2      	cmp	r2, r6
 8011cf0:	dd12      	ble.n	8011d18 <__kernel_rem_pio2+0x80>
 8011cf2:	aa18      	add	r2, sp, #96	; 0x60
 8011cf4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8011cf8:	460e      	mov	r6, r1
 8011cfa:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8011cfe:	f1cb 0a01 	rsb	sl, fp, #1
 8011d02:	eb0a 0006 	add.w	r0, sl, r6
 8011d06:	4581      	cmp	r9, r0
 8011d08:	db25      	blt.n	8011d56 <__kernel_rem_pio2+0xbe>
 8011d0a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8011fd0 <__kernel_rem_pio2+0x338>
 8011d0e:	f8dd e000 	ldr.w	lr, [sp]
 8011d12:	4615      	mov	r5, r2
 8011d14:	2000      	movs	r0, #0
 8011d16:	e015      	b.n	8011d44 <__kernel_rem_pio2+0xac>
 8011d18:	42d5      	cmn	r5, r2
 8011d1a:	d409      	bmi.n	8011d30 <__kernel_rem_pio2+0x98>
 8011d1c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8011d20:	ee07 0a90 	vmov	s15, r0
 8011d24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011d28:	eca8 7b02 	vstmia	r8!, {d7}
 8011d2c:	3201      	adds	r2, #1
 8011d2e:	e7de      	b.n	8011cee <__kernel_rem_pio2+0x56>
 8011d30:	eeb0 7b46 	vmov.f64	d7, d6
 8011d34:	e7f8      	b.n	8011d28 <__kernel_rem_pio2+0x90>
 8011d36:	ecbe 5b02 	vldmia	lr!, {d5}
 8011d3a:	ed95 6b00 	vldr	d6, [r5]
 8011d3e:	3001      	adds	r0, #1
 8011d40:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011d44:	4288      	cmp	r0, r1
 8011d46:	f1a5 0508 	sub.w	r5, r5, #8
 8011d4a:	ddf4      	ble.n	8011d36 <__kernel_rem_pio2+0x9e>
 8011d4c:	eca8 7b02 	vstmia	r8!, {d7}
 8011d50:	3208      	adds	r2, #8
 8011d52:	3601      	adds	r6, #1
 8011d54:	e7d5      	b.n	8011d02 <__kernel_rem_pio2+0x6a>
 8011d56:	aa04      	add	r2, sp, #16
 8011d58:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8011fd8 <__kernel_rem_pio2+0x340>
 8011d5c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8011fe0 <__kernel_rem_pio2+0x348>
 8011d60:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8011d64:	9201      	str	r2, [sp, #4]
 8011d66:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8011d6a:	464e      	mov	r6, r9
 8011d6c:	ab90      	add	r3, sp, #576	; 0x240
 8011d6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011d72:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8011d76:	ab04      	add	r3, sp, #16
 8011d78:	4618      	mov	r0, r3
 8011d7a:	4632      	mov	r2, r6
 8011d7c:	2a00      	cmp	r2, #0
 8011d7e:	dc4e      	bgt.n	8011e1e <__kernel_rem_pio2+0x186>
 8011d80:	4620      	mov	r0, r4
 8011d82:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8011d86:	f000 fb4f 	bl	8012428 <scalbn>
 8011d8a:	eeb0 8b40 	vmov.f64	d8, d0
 8011d8e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011d92:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011d96:	f000 fad3 	bl	8012340 <floor>
 8011d9a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011d9e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011da2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011da6:	2c00      	cmp	r4, #0
 8011da8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011dac:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8011db0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011db4:	ee17 8a90 	vmov	r8, s15
 8011db8:	dd46      	ble.n	8011e48 <__kernel_rem_pio2+0x1b0>
 8011dba:	1e70      	subs	r0, r6, #1
 8011dbc:	aa04      	add	r2, sp, #16
 8011dbe:	f1c4 0c18 	rsb	ip, r4, #24
 8011dc2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8011dc6:	fa45 f20c 	asr.w	r2, r5, ip
 8011dca:	4490      	add	r8, r2
 8011dcc:	fa02 f20c 	lsl.w	r2, r2, ip
 8011dd0:	1aad      	subs	r5, r5, r2
 8011dd2:	aa04      	add	r2, sp, #16
 8011dd4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8011dd8:	f1c4 0217 	rsb	r2, r4, #23
 8011ddc:	4115      	asrs	r5, r2
 8011dde:	2d00      	cmp	r5, #0
 8011de0:	dd41      	ble.n	8011e66 <__kernel_rem_pio2+0x1ce>
 8011de2:	f04f 0c00 	mov.w	ip, #0
 8011de6:	f108 0801 	add.w	r8, r8, #1
 8011dea:	4660      	mov	r0, ip
 8011dec:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011df0:	4566      	cmp	r6, ip
 8011df2:	dc69      	bgt.n	8011ec8 <__kernel_rem_pio2+0x230>
 8011df4:	2c00      	cmp	r4, #0
 8011df6:	dd03      	ble.n	8011e00 <__kernel_rem_pio2+0x168>
 8011df8:	2c01      	cmp	r4, #1
 8011dfa:	d076      	beq.n	8011eea <__kernel_rem_pio2+0x252>
 8011dfc:	2c02      	cmp	r4, #2
 8011dfe:	d07f      	beq.n	8011f00 <__kernel_rem_pio2+0x268>
 8011e00:	2d02      	cmp	r5, #2
 8011e02:	d130      	bne.n	8011e66 <__kernel_rem_pio2+0x1ce>
 8011e04:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011e08:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011e0c:	b358      	cbz	r0, 8011e66 <__kernel_rem_pio2+0x1ce>
 8011e0e:	4620      	mov	r0, r4
 8011e10:	9102      	str	r1, [sp, #8]
 8011e12:	f000 fb09 	bl	8012428 <scalbn>
 8011e16:	9902      	ldr	r1, [sp, #8]
 8011e18:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011e1c:	e023      	b.n	8011e66 <__kernel_rem_pio2+0x1ce>
 8011e1e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011e22:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011e26:	3a01      	subs	r2, #1
 8011e28:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011e2c:	ad68      	add	r5, sp, #416	; 0x1a0
 8011e2e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011e32:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011e36:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8011e3a:	eca0 0a01 	vstmia	r0!, {s0}
 8011e3e:	ed95 0b00 	vldr	d0, [r5]
 8011e42:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011e46:	e799      	b.n	8011d7c <__kernel_rem_pio2+0xe4>
 8011e48:	d105      	bne.n	8011e56 <__kernel_rem_pio2+0x1be>
 8011e4a:	1e72      	subs	r2, r6, #1
 8011e4c:	a804      	add	r0, sp, #16
 8011e4e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8011e52:	15ed      	asrs	r5, r5, #23
 8011e54:	e7c3      	b.n	8011dde <__kernel_rem_pio2+0x146>
 8011e56:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011e5a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e62:	da2f      	bge.n	8011ec4 <__kernel_rem_pio2+0x22c>
 8011e64:	2500      	movs	r5, #0
 8011e66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e6e:	f040 8087 	bne.w	8011f80 <__kernel_rem_pio2+0x2e8>
 8011e72:	1e73      	subs	r3, r6, #1
 8011e74:	4618      	mov	r0, r3
 8011e76:	f04f 0c00 	mov.w	ip, #0
 8011e7a:	4548      	cmp	r0, r9
 8011e7c:	da47      	bge.n	8011f0e <__kernel_rem_pio2+0x276>
 8011e7e:	f1bc 0f00 	cmp.w	ip, #0
 8011e82:	d070      	beq.n	8011f66 <__kernel_rem_pio2+0x2ce>
 8011e84:	aa04      	add	r2, sp, #16
 8011e86:	3c18      	subs	r4, #24
 8011e88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011e8c:	2a00      	cmp	r2, #0
 8011e8e:	d075      	beq.n	8011f7c <__kernel_rem_pio2+0x2e4>
 8011e90:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011e94:	4620      	mov	r0, r4
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	f000 fac6 	bl	8012428 <scalbn>
 8011e9c:	9b00      	ldr	r3, [sp, #0]
 8011e9e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011fd8 <__kernel_rem_pio2+0x340>
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	2a00      	cmp	r2, #0
 8011ea6:	f280 80ac 	bge.w	8012002 <__kernel_rem_pio2+0x36a>
 8011eaa:	4619      	mov	r1, r3
 8011eac:	2000      	movs	r0, #0
 8011eae:	2900      	cmp	r1, #0
 8011eb0:	f2c0 80cd 	blt.w	801204e <__kernel_rem_pio2+0x3b6>
 8011eb4:	aa68      	add	r2, sp, #416	; 0x1a0
 8011eb6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8011eba:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8011fd0 <__kernel_rem_pio2+0x338>
 8011ebe:	4e4b      	ldr	r6, [pc, #300]	; (8011fec <__kernel_rem_pio2+0x354>)
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	e0b8      	b.n	8012036 <__kernel_rem_pio2+0x39e>
 8011ec4:	2502      	movs	r5, #2
 8011ec6:	e78c      	b.n	8011de2 <__kernel_rem_pio2+0x14a>
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	b948      	cbnz	r0, 8011ee0 <__kernel_rem_pio2+0x248>
 8011ecc:	b11a      	cbz	r2, 8011ed6 <__kernel_rem_pio2+0x23e>
 8011ece:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011ed2:	601a      	str	r2, [r3, #0]
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	f10c 0c01 	add.w	ip, ip, #1
 8011eda:	3304      	adds	r3, #4
 8011edc:	4610      	mov	r0, r2
 8011ede:	e787      	b.n	8011df0 <__kernel_rem_pio2+0x158>
 8011ee0:	ebae 0202 	sub.w	r2, lr, r2
 8011ee4:	601a      	str	r2, [r3, #0]
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	e7f5      	b.n	8011ed6 <__kernel_rem_pio2+0x23e>
 8011eea:	1e72      	subs	r2, r6, #1
 8011eec:	ab04      	add	r3, sp, #16
 8011eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ef2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011ef6:	f10d 0c10 	add.w	ip, sp, #16
 8011efa:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8011efe:	e77f      	b.n	8011e00 <__kernel_rem_pio2+0x168>
 8011f00:	1e72      	subs	r2, r6, #1
 8011f02:	ab04      	add	r3, sp, #16
 8011f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011f0c:	e7f3      	b.n	8011ef6 <__kernel_rem_pio2+0x25e>
 8011f0e:	aa04      	add	r2, sp, #16
 8011f10:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8011f14:	3801      	subs	r0, #1
 8011f16:	ea4c 0c02 	orr.w	ip, ip, r2
 8011f1a:	e7ae      	b.n	8011e7a <__kernel_rem_pio2+0x1e2>
 8011f1c:	3001      	adds	r0, #1
 8011f1e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011f22:	2a00      	cmp	r2, #0
 8011f24:	d0fa      	beq.n	8011f1c <__kernel_rem_pio2+0x284>
 8011f26:	eb06 020b 	add.w	r2, r6, fp
 8011f2a:	ad18      	add	r5, sp, #96	; 0x60
 8011f2c:	1c73      	adds	r3, r6, #1
 8011f2e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8011f32:	4406      	add	r6, r0
 8011f34:	429e      	cmp	r6, r3
 8011f36:	f6ff af19 	blt.w	8011d6c <__kernel_rem_pio2+0xd4>
 8011f3a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8011f3e:	9d00      	ldr	r5, [sp, #0]
 8011f40:	ee07 0a90 	vmov	s15, r0
 8011f44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011f48:	2000      	movs	r0, #0
 8011f4a:	eca2 7b02 	vstmia	r2!, {d7}
 8011f4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011fd0 <__kernel_rem_pio2+0x338>
 8011f52:	4694      	mov	ip, r2
 8011f54:	4288      	cmp	r0, r1
 8011f56:	dd09      	ble.n	8011f6c <__kernel_rem_pio2+0x2d4>
 8011f58:	a868      	add	r0, sp, #416	; 0x1a0
 8011f5a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8011f5e:	ed80 7b00 	vstr	d7, [r0]
 8011f62:	3301      	adds	r3, #1
 8011f64:	e7e6      	b.n	8011f34 <__kernel_rem_pio2+0x29c>
 8011f66:	9b01      	ldr	r3, [sp, #4]
 8011f68:	2001      	movs	r0, #1
 8011f6a:	e7d8      	b.n	8011f1e <__kernel_rem_pio2+0x286>
 8011f6c:	ecb5 5b02 	vldmia	r5!, {d5}
 8011f70:	ed3c 6b02 	vldmdb	ip!, {d6}
 8011f74:	3001      	adds	r0, #1
 8011f76:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011f7a:	e7eb      	b.n	8011f54 <__kernel_rem_pio2+0x2bc>
 8011f7c:	3b01      	subs	r3, #1
 8011f7e:	e781      	b.n	8011e84 <__kernel_rem_pio2+0x1ec>
 8011f80:	4260      	negs	r0, r4
 8011f82:	eeb0 0b48 	vmov.f64	d0, d8
 8011f86:	f000 fa4f 	bl	8012428 <scalbn>
 8011f8a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011fe0 <__kernel_rem_pio2+0x348>
 8011f8e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f96:	db2b      	blt.n	8011ff0 <__kernel_rem_pio2+0x358>
 8011f98:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8011fd8 <__kernel_rem_pio2+0x340>
 8011f9c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011fa0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011fa4:	aa04      	add	r2, sp, #16
 8011fa6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011faa:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011fae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011fb2:	a904      	add	r1, sp, #16
 8011fb4:	ee10 3a10 	vmov	r3, s0
 8011fb8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011fbc:	ee17 2a10 	vmov	r2, s14
 8011fc0:	1c73      	adds	r3, r6, #1
 8011fc2:	3418      	adds	r4, #24
 8011fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011fc8:	e762      	b.n	8011e90 <__kernel_rem_pio2+0x1f8>
 8011fca:	bf00      	nop
 8011fcc:	f3af 8000 	nop.w
	...
 8011fdc:	3e700000 	.word	0x3e700000
 8011fe0:	00000000 	.word	0x00000000
 8011fe4:	41700000 	.word	0x41700000
 8011fe8:	08016c18 	.word	0x08016c18
 8011fec:	08016bd8 	.word	0x08016bd8
 8011ff0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011ff4:	aa04      	add	r2, sp, #16
 8011ff6:	ee10 3a10 	vmov	r3, s0
 8011ffa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011ffe:	4633      	mov	r3, r6
 8012000:	e746      	b.n	8011e90 <__kernel_rem_pio2+0x1f8>
 8012002:	a804      	add	r0, sp, #16
 8012004:	a968      	add	r1, sp, #416	; 0x1a0
 8012006:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801200a:	9000      	str	r0, [sp, #0]
 801200c:	ee07 0a90 	vmov	s15, r0
 8012010:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012014:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012018:	3a01      	subs	r2, #1
 801201a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801201e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012022:	ed81 7b00 	vstr	d7, [r1]
 8012026:	e73d      	b.n	8011ea4 <__kernel_rem_pio2+0x20c>
 8012028:	ecb6 5b02 	vldmia	r6!, {d5}
 801202c:	ecb4 6b02 	vldmia	r4!, {d6}
 8012030:	3201      	adds	r2, #1
 8012032:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012036:	454a      	cmp	r2, r9
 8012038:	dc01      	bgt.n	801203e <__kernel_rem_pio2+0x3a6>
 801203a:	4290      	cmp	r0, r2
 801203c:	daf4      	bge.n	8012028 <__kernel_rem_pio2+0x390>
 801203e:	aa40      	add	r2, sp, #256	; 0x100
 8012040:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012044:	ed82 7b00 	vstr	d7, [r2]
 8012048:	3901      	subs	r1, #1
 801204a:	3001      	adds	r0, #1
 801204c:	e72f      	b.n	8011eae <__kernel_rem_pio2+0x216>
 801204e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8012050:	2a02      	cmp	r2, #2
 8012052:	dc0a      	bgt.n	801206a <__kernel_rem_pio2+0x3d2>
 8012054:	2a00      	cmp	r2, #0
 8012056:	dc5a      	bgt.n	801210e <__kernel_rem_pio2+0x476>
 8012058:	d039      	beq.n	80120ce <__kernel_rem_pio2+0x436>
 801205a:	f008 0007 	and.w	r0, r8, #7
 801205e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8012062:	ecbd 8b06 	vpop	{d8-d10}
 8012066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 801206c:	2a03      	cmp	r2, #3
 801206e:	d1f4      	bne.n	801205a <__kernel_rem_pio2+0x3c2>
 8012070:	aa40      	add	r2, sp, #256	; 0x100
 8012072:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012076:	4611      	mov	r1, r2
 8012078:	4618      	mov	r0, r3
 801207a:	2800      	cmp	r0, #0
 801207c:	f1a1 0108 	sub.w	r1, r1, #8
 8012080:	dc52      	bgt.n	8012128 <__kernel_rem_pio2+0x490>
 8012082:	4619      	mov	r1, r3
 8012084:	2901      	cmp	r1, #1
 8012086:	f1a2 0208 	sub.w	r2, r2, #8
 801208a:	dc5d      	bgt.n	8012148 <__kernel_rem_pio2+0x4b0>
 801208c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8012190 <__kernel_rem_pio2+0x4f8>
 8012090:	2b01      	cmp	r3, #1
 8012092:	dc69      	bgt.n	8012168 <__kernel_rem_pio2+0x4d0>
 8012094:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8012098:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 801209c:	2d00      	cmp	r5, #0
 801209e:	d16c      	bne.n	801217a <__kernel_rem_pio2+0x4e2>
 80120a0:	ed87 5b00 	vstr	d5, [r7]
 80120a4:	ed87 6b02 	vstr	d6, [r7, #8]
 80120a8:	ed87 7b04 	vstr	d7, [r7, #16]
 80120ac:	e7d5      	b.n	801205a <__kernel_rem_pio2+0x3c2>
 80120ae:	aa40      	add	r2, sp, #256	; 0x100
 80120b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80120b4:	ed92 6b00 	vldr	d6, [r2]
 80120b8:	3b01      	subs	r3, #1
 80120ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80120be:	2b00      	cmp	r3, #0
 80120c0:	daf5      	bge.n	80120ae <__kernel_rem_pio2+0x416>
 80120c2:	b10d      	cbz	r5, 80120c8 <__kernel_rem_pio2+0x430>
 80120c4:	eeb1 7b47 	vneg.f64	d7, d7
 80120c8:	ed87 7b00 	vstr	d7, [r7]
 80120cc:	e7c5      	b.n	801205a <__kernel_rem_pio2+0x3c2>
 80120ce:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012190 <__kernel_rem_pio2+0x4f8>
 80120d2:	e7f4      	b.n	80120be <__kernel_rem_pio2+0x426>
 80120d4:	a940      	add	r1, sp, #256	; 0x100
 80120d6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80120da:	ed91 7b00 	vldr	d7, [r1]
 80120de:	3a01      	subs	r2, #1
 80120e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80120e4:	2a00      	cmp	r2, #0
 80120e6:	daf5      	bge.n	80120d4 <__kernel_rem_pio2+0x43c>
 80120e8:	b1ad      	cbz	r5, 8012116 <__kernel_rem_pio2+0x47e>
 80120ea:	eeb1 7b46 	vneg.f64	d7, d6
 80120ee:	ed87 7b00 	vstr	d7, [r7]
 80120f2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 80120f6:	a942      	add	r1, sp, #264	; 0x108
 80120f8:	2201      	movs	r2, #1
 80120fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80120fe:	4293      	cmp	r3, r2
 8012100:	da0c      	bge.n	801211c <__kernel_rem_pio2+0x484>
 8012102:	b10d      	cbz	r5, 8012108 <__kernel_rem_pio2+0x470>
 8012104:	eeb1 7b47 	vneg.f64	d7, d7
 8012108:	ed87 7b02 	vstr	d7, [r7, #8]
 801210c:	e7a5      	b.n	801205a <__kernel_rem_pio2+0x3c2>
 801210e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012190 <__kernel_rem_pio2+0x4f8>
 8012112:	461a      	mov	r2, r3
 8012114:	e7e6      	b.n	80120e4 <__kernel_rem_pio2+0x44c>
 8012116:	eeb0 7b46 	vmov.f64	d7, d6
 801211a:	e7e8      	b.n	80120ee <__kernel_rem_pio2+0x456>
 801211c:	ecb1 6b02 	vldmia	r1!, {d6}
 8012120:	3201      	adds	r2, #1
 8012122:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012126:	e7ea      	b.n	80120fe <__kernel_rem_pio2+0x466>
 8012128:	ed91 7b00 	vldr	d7, [r1]
 801212c:	ed91 5b02 	vldr	d5, [r1, #8]
 8012130:	3801      	subs	r0, #1
 8012132:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012136:	ee37 7b46 	vsub.f64	d7, d7, d6
 801213a:	ed81 6b00 	vstr	d6, [r1]
 801213e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012142:	ed81 7b02 	vstr	d7, [r1, #8]
 8012146:	e798      	b.n	801207a <__kernel_rem_pio2+0x3e2>
 8012148:	ed92 7b00 	vldr	d7, [r2]
 801214c:	ed92 5b02 	vldr	d5, [r2, #8]
 8012150:	3901      	subs	r1, #1
 8012152:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012156:	ee37 7b46 	vsub.f64	d7, d7, d6
 801215a:	ed82 6b00 	vstr	d6, [r2]
 801215e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012162:	ed82 7b02 	vstr	d7, [r2, #8]
 8012166:	e78d      	b.n	8012084 <__kernel_rem_pio2+0x3ec>
 8012168:	aa40      	add	r2, sp, #256	; 0x100
 801216a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801216e:	ed92 6b00 	vldr	d6, [r2]
 8012172:	3b01      	subs	r3, #1
 8012174:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012178:	e78a      	b.n	8012090 <__kernel_rem_pio2+0x3f8>
 801217a:	eeb1 5b45 	vneg.f64	d5, d5
 801217e:	eeb1 6b46 	vneg.f64	d6, d6
 8012182:	ed87 5b00 	vstr	d5, [r7]
 8012186:	eeb1 7b47 	vneg.f64	d7, d7
 801218a:	ed87 6b02 	vstr	d6, [r7, #8]
 801218e:	e78b      	b.n	80120a8 <__kernel_rem_pio2+0x410>
	...

08012198 <__kernel_sin>:
 8012198:	ee10 3a90 	vmov	r3, s1
 801219c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80121a0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80121a4:	da04      	bge.n	80121b0 <__kernel_sin+0x18>
 80121a6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80121aa:	ee17 3a90 	vmov	r3, s15
 80121ae:	b35b      	cbz	r3, 8012208 <__kernel_sin+0x70>
 80121b0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80121b4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80121b8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012210 <__kernel_sin+0x78>
 80121bc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012218 <__kernel_sin+0x80>
 80121c0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80121c4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012220 <__kernel_sin+0x88>
 80121c8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80121cc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012228 <__kernel_sin+0x90>
 80121d0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80121d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012230 <__kernel_sin+0x98>
 80121d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80121dc:	b930      	cbnz	r0, 80121ec <__kernel_sin+0x54>
 80121de:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012238 <__kernel_sin+0xa0>
 80121e2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80121e6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80121ea:	4770      	bx	lr
 80121ec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80121f0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80121f4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80121f8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80121fc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012240 <__kernel_sin+0xa8>
 8012200:	eea5 1b07 	vfma.f64	d1, d5, d7
 8012204:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012208:	4770      	bx	lr
 801220a:	bf00      	nop
 801220c:	f3af 8000 	nop.w
 8012210:	5acfd57c 	.word	0x5acfd57c
 8012214:	3de5d93a 	.word	0x3de5d93a
 8012218:	8a2b9ceb 	.word	0x8a2b9ceb
 801221c:	be5ae5e6 	.word	0xbe5ae5e6
 8012220:	57b1fe7d 	.word	0x57b1fe7d
 8012224:	3ec71de3 	.word	0x3ec71de3
 8012228:	19c161d5 	.word	0x19c161d5
 801222c:	bf2a01a0 	.word	0xbf2a01a0
 8012230:	1110f8a6 	.word	0x1110f8a6
 8012234:	3f811111 	.word	0x3f811111
 8012238:	55555549 	.word	0x55555549
 801223c:	bfc55555 	.word	0xbfc55555
 8012240:	55555549 	.word	0x55555549
 8012244:	3fc55555 	.word	0x3fc55555

08012248 <with_errno>:
 8012248:	b513      	push	{r0, r1, r4, lr}
 801224a:	4604      	mov	r4, r0
 801224c:	ed8d 0b00 	vstr	d0, [sp]
 8012250:	f000 fa58 	bl	8012704 <__errno>
 8012254:	ed9d 0b00 	vldr	d0, [sp]
 8012258:	6004      	str	r4, [r0, #0]
 801225a:	b002      	add	sp, #8
 801225c:	bd10      	pop	{r4, pc}

0801225e <xflow>:
 801225e:	b082      	sub	sp, #8
 8012260:	b158      	cbz	r0, 801227a <xflow+0x1c>
 8012262:	eeb1 7b40 	vneg.f64	d7, d0
 8012266:	ed8d 7b00 	vstr	d7, [sp]
 801226a:	ed9d 7b00 	vldr	d7, [sp]
 801226e:	2022      	movs	r0, #34	; 0x22
 8012270:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012274:	b002      	add	sp, #8
 8012276:	f7ff bfe7 	b.w	8012248 <with_errno>
 801227a:	eeb0 7b40 	vmov.f64	d7, d0
 801227e:	e7f2      	b.n	8012266 <xflow+0x8>

08012280 <__math_uflow>:
 8012280:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012288 <__math_uflow+0x8>
 8012284:	f7ff bfeb 	b.w	801225e <xflow>
 8012288:	00000000 	.word	0x00000000
 801228c:	10000000 	.word	0x10000000

08012290 <__math_oflow>:
 8012290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012298 <__math_oflow+0x8>
 8012294:	f7ff bfe3 	b.w	801225e <xflow>
 8012298:	00000000 	.word	0x00000000
 801229c:	70000000 	.word	0x70000000

080122a0 <__math_divzero>:
 80122a0:	b082      	sub	sp, #8
 80122a2:	2800      	cmp	r0, #0
 80122a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80122a8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80122ac:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80122b0:	ed8d 7b00 	vstr	d7, [sp]
 80122b4:	ed9d 0b00 	vldr	d0, [sp]
 80122b8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80122c8 <__math_divzero+0x28>
 80122bc:	2022      	movs	r0, #34	; 0x22
 80122be:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80122c2:	b002      	add	sp, #8
 80122c4:	f7ff bfc0 	b.w	8012248 <with_errno>
	...

080122d0 <__math_invalid>:
 80122d0:	eeb0 7b40 	vmov.f64	d7, d0
 80122d4:	eeb4 7b47 	vcmp.f64	d7, d7
 80122d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122dc:	ee30 6b40 	vsub.f64	d6, d0, d0
 80122e0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80122e4:	d602      	bvs.n	80122ec <__math_invalid+0x1c>
 80122e6:	2021      	movs	r0, #33	; 0x21
 80122e8:	f7ff bfae 	b.w	8012248 <with_errno>
 80122ec:	4770      	bx	lr

080122ee <__math_check_uflow>:
 80122ee:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80122f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122f6:	d102      	bne.n	80122fe <__math_check_uflow+0x10>
 80122f8:	2022      	movs	r0, #34	; 0x22
 80122fa:	f7ff bfa5 	b.w	8012248 <with_errno>
 80122fe:	4770      	bx	lr

08012300 <__math_check_oflow>:
 8012300:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012320 <__math_check_oflow+0x20>
 8012304:	eeb0 7bc0 	vabs.f64	d7, d0
 8012308:	eeb4 7b46 	vcmp.f64	d7, d6
 801230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012310:	dd02      	ble.n	8012318 <__math_check_oflow+0x18>
 8012312:	2022      	movs	r0, #34	; 0x22
 8012314:	f7ff bf98 	b.w	8012248 <with_errno>
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	f3af 8000 	nop.w
 8012320:	ffffffff 	.word	0xffffffff
 8012324:	7fefffff 	.word	0x7fefffff

08012328 <fabs>:
 8012328:	ec51 0b10 	vmov	r0, r1, d0
 801232c:	ee10 2a10 	vmov	r2, s0
 8012330:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012334:	ec43 2b10 	vmov	d0, r2, r3
 8012338:	4770      	bx	lr
 801233a:	0000      	movs	r0, r0
 801233c:	0000      	movs	r0, r0
	...

08012340 <floor>:
 8012340:	ee10 1a90 	vmov	r1, s1
 8012344:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012348:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801234c:	2b13      	cmp	r3, #19
 801234e:	b530      	push	{r4, r5, lr}
 8012350:	ee10 0a10 	vmov	r0, s0
 8012354:	ee10 5a10 	vmov	r5, s0
 8012358:	dc31      	bgt.n	80123be <floor+0x7e>
 801235a:	2b00      	cmp	r3, #0
 801235c:	da15      	bge.n	801238a <floor+0x4a>
 801235e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012418 <floor+0xd8>
 8012362:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012366:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801236a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801236e:	dd07      	ble.n	8012380 <floor+0x40>
 8012370:	2900      	cmp	r1, #0
 8012372:	da4e      	bge.n	8012412 <floor+0xd2>
 8012374:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012378:	4318      	orrs	r0, r3
 801237a:	d001      	beq.n	8012380 <floor+0x40>
 801237c:	4928      	ldr	r1, [pc, #160]	; (8012420 <floor+0xe0>)
 801237e:	2000      	movs	r0, #0
 8012380:	460b      	mov	r3, r1
 8012382:	4602      	mov	r2, r0
 8012384:	ec43 2b10 	vmov	d0, r2, r3
 8012388:	e020      	b.n	80123cc <floor+0x8c>
 801238a:	4a26      	ldr	r2, [pc, #152]	; (8012424 <floor+0xe4>)
 801238c:	411a      	asrs	r2, r3
 801238e:	ea01 0402 	and.w	r4, r1, r2
 8012392:	4304      	orrs	r4, r0
 8012394:	d01a      	beq.n	80123cc <floor+0x8c>
 8012396:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012418 <floor+0xd8>
 801239a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801239e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80123a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a6:	ddeb      	ble.n	8012380 <floor+0x40>
 80123a8:	2900      	cmp	r1, #0
 80123aa:	bfbe      	ittt	lt
 80123ac:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80123b0:	fa40 f303 	asrlt.w	r3, r0, r3
 80123b4:	18c9      	addlt	r1, r1, r3
 80123b6:	ea21 0102 	bic.w	r1, r1, r2
 80123ba:	2000      	movs	r0, #0
 80123bc:	e7e0      	b.n	8012380 <floor+0x40>
 80123be:	2b33      	cmp	r3, #51	; 0x33
 80123c0:	dd05      	ble.n	80123ce <floor+0x8e>
 80123c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80123c6:	d101      	bne.n	80123cc <floor+0x8c>
 80123c8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80123cc:	bd30      	pop	{r4, r5, pc}
 80123ce:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80123d2:	f04f 32ff 	mov.w	r2, #4294967295
 80123d6:	40e2      	lsrs	r2, r4
 80123d8:	4202      	tst	r2, r0
 80123da:	d0f7      	beq.n	80123cc <floor+0x8c>
 80123dc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012418 <floor+0xd8>
 80123e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80123e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80123e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ec:	ddc8      	ble.n	8012380 <floor+0x40>
 80123ee:	2900      	cmp	r1, #0
 80123f0:	da02      	bge.n	80123f8 <floor+0xb8>
 80123f2:	2b14      	cmp	r3, #20
 80123f4:	d103      	bne.n	80123fe <floor+0xbe>
 80123f6:	3101      	adds	r1, #1
 80123f8:	ea20 0002 	bic.w	r0, r0, r2
 80123fc:	e7c0      	b.n	8012380 <floor+0x40>
 80123fe:	2401      	movs	r4, #1
 8012400:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012404:	fa04 f303 	lsl.w	r3, r4, r3
 8012408:	4418      	add	r0, r3
 801240a:	42a8      	cmp	r0, r5
 801240c:	bf38      	it	cc
 801240e:	1909      	addcc	r1, r1, r4
 8012410:	e7f2      	b.n	80123f8 <floor+0xb8>
 8012412:	2000      	movs	r0, #0
 8012414:	4601      	mov	r1, r0
 8012416:	e7b3      	b.n	8012380 <floor+0x40>
 8012418:	8800759c 	.word	0x8800759c
 801241c:	7e37e43c 	.word	0x7e37e43c
 8012420:	bff00000 	.word	0xbff00000
 8012424:	000fffff 	.word	0x000fffff

08012428 <scalbn>:
 8012428:	b082      	sub	sp, #8
 801242a:	ed8d 0b00 	vstr	d0, [sp]
 801242e:	9b01      	ldr	r3, [sp, #4]
 8012430:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012434:	b9a2      	cbnz	r2, 8012460 <scalbn+0x38>
 8012436:	9a00      	ldr	r2, [sp, #0]
 8012438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801243c:	4313      	orrs	r3, r2
 801243e:	d03a      	beq.n	80124b6 <scalbn+0x8e>
 8012440:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8012518 <scalbn+0xf0>
 8012444:	4b40      	ldr	r3, [pc, #256]	; (8012548 <scalbn+0x120>)
 8012446:	ee20 7b07 	vmul.f64	d7, d0, d7
 801244a:	4298      	cmp	r0, r3
 801244c:	ed8d 7b00 	vstr	d7, [sp]
 8012450:	da11      	bge.n	8012476 <scalbn+0x4e>
 8012452:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8012520 <scalbn+0xf8>
 8012456:	ed9d 6b00 	vldr	d6, [sp]
 801245a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801245e:	e007      	b.n	8012470 <scalbn+0x48>
 8012460:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012464:	428a      	cmp	r2, r1
 8012466:	d10a      	bne.n	801247e <scalbn+0x56>
 8012468:	ed9d 7b00 	vldr	d7, [sp]
 801246c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012470:	ed8d 7b00 	vstr	d7, [sp]
 8012474:	e01f      	b.n	80124b6 <scalbn+0x8e>
 8012476:	9b01      	ldr	r3, [sp, #4]
 8012478:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801247c:	3a36      	subs	r2, #54	; 0x36
 801247e:	4402      	add	r2, r0
 8012480:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012484:	428a      	cmp	r2, r1
 8012486:	dd0a      	ble.n	801249e <scalbn+0x76>
 8012488:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012528 <scalbn+0x100>
 801248c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012530 <scalbn+0x108>
 8012490:	eeb0 6b47 	vmov.f64	d6, d7
 8012494:	9b01      	ldr	r3, [sp, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	fe27 7b05 	vselge.f64	d7, d7, d5
 801249c:	e7dd      	b.n	801245a <scalbn+0x32>
 801249e:	2a00      	cmp	r2, #0
 80124a0:	dd0d      	ble.n	80124be <scalbn+0x96>
 80124a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80124aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80124ae:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80124b2:	e9cd 0100 	strd	r0, r1, [sp]
 80124b6:	ed9d 0b00 	vldr	d0, [sp]
 80124ba:	b002      	add	sp, #8
 80124bc:	4770      	bx	lr
 80124be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80124c2:	da18      	bge.n	80124f6 <scalbn+0xce>
 80124c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80124c8:	4298      	cmp	r0, r3
 80124ca:	9b01      	ldr	r3, [sp, #4]
 80124cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80124d0:	dd09      	ble.n	80124e6 <scalbn+0xbe>
 80124d2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012528 <scalbn+0x100>
 80124d6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8012530 <scalbn+0x108>
 80124da:	eeb0 6b47 	vmov.f64	d6, d7
 80124de:	2b00      	cmp	r3, #0
 80124e0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80124e4:	e7b9      	b.n	801245a <scalbn+0x32>
 80124e6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012520 <scalbn+0xf8>
 80124ea:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8012538 <scalbn+0x110>
 80124ee:	eeb0 6b47 	vmov.f64	d6, d7
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	e7f4      	b.n	80124e0 <scalbn+0xb8>
 80124f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80124fe:	3236      	adds	r2, #54	; 0x36
 8012500:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012504:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012508:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8012540 <scalbn+0x118>
 801250c:	ec41 0b17 	vmov	d7, r0, r1
 8012510:	e7a3      	b.n	801245a <scalbn+0x32>
 8012512:	bf00      	nop
 8012514:	f3af 8000 	nop.w
 8012518:	00000000 	.word	0x00000000
 801251c:	43500000 	.word	0x43500000
 8012520:	c2f8f359 	.word	0xc2f8f359
 8012524:	01a56e1f 	.word	0x01a56e1f
 8012528:	8800759c 	.word	0x8800759c
 801252c:	7e37e43c 	.word	0x7e37e43c
 8012530:	8800759c 	.word	0x8800759c
 8012534:	fe37e43c 	.word	0xfe37e43c
 8012538:	c2f8f359 	.word	0xc2f8f359
 801253c:	81a56e1f 	.word	0x81a56e1f
 8012540:	00000000 	.word	0x00000000
 8012544:	3c900000 	.word	0x3c900000
 8012548:	ffff3cb0 	.word	0xffff3cb0

0801254c <atanf>:
 801254c:	b538      	push	{r3, r4, r5, lr}
 801254e:	ee10 5a10 	vmov	r5, s0
 8012552:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012556:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801255a:	eef0 7a40 	vmov.f32	s15, s0
 801255e:	db0f      	blt.n	8012580 <atanf+0x34>
 8012560:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012564:	dd04      	ble.n	8012570 <atanf+0x24>
 8012566:	ee70 7a00 	vadd.f32	s15, s0, s0
 801256a:	eeb0 0a67 	vmov.f32	s0, s15
 801256e:	bd38      	pop	{r3, r4, r5, pc}
 8012570:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80126a8 <atanf+0x15c>
 8012574:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80126ac <atanf+0x160>
 8012578:	2d00      	cmp	r5, #0
 801257a:	fe77 7a80 	vselgt.f32	s15, s15, s0
 801257e:	e7f4      	b.n	801256a <atanf+0x1e>
 8012580:	4b4b      	ldr	r3, [pc, #300]	; (80126b0 <atanf+0x164>)
 8012582:	429c      	cmp	r4, r3
 8012584:	dc10      	bgt.n	80125a8 <atanf+0x5c>
 8012586:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801258a:	da0a      	bge.n	80125a2 <atanf+0x56>
 801258c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80126b4 <atanf+0x168>
 8012590:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012598:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a0:	dce3      	bgt.n	801256a <atanf+0x1e>
 80125a2:	f04f 33ff 	mov.w	r3, #4294967295
 80125a6:	e013      	b.n	80125d0 <atanf+0x84>
 80125a8:	f000 f8a4 	bl	80126f4 <fabsf>
 80125ac:	4b42      	ldr	r3, [pc, #264]	; (80126b8 <atanf+0x16c>)
 80125ae:	429c      	cmp	r4, r3
 80125b0:	dc4f      	bgt.n	8012652 <atanf+0x106>
 80125b2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80125b6:	429c      	cmp	r4, r3
 80125b8:	dc41      	bgt.n	801263e <atanf+0xf2>
 80125ba:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80125be:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80125c2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80125c6:	2300      	movs	r3, #0
 80125c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80125cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80125d0:	1c5a      	adds	r2, r3, #1
 80125d2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80125d6:	eddf 5a39 	vldr	s11, [pc, #228]	; 80126bc <atanf+0x170>
 80125da:	ed9f 6a39 	vldr	s12, [pc, #228]	; 80126c0 <atanf+0x174>
 80125de:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80126c4 <atanf+0x178>
 80125e2:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80126c8 <atanf+0x17c>
 80125e6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80125ea:	eea7 6a25 	vfma.f32	s12, s14, s11
 80125ee:	eddf 5a37 	vldr	s11, [pc, #220]	; 80126cc <atanf+0x180>
 80125f2:	eee6 5a07 	vfma.f32	s11, s12, s14
 80125f6:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80126d0 <atanf+0x184>
 80125fa:	eea5 6a87 	vfma.f32	s12, s11, s14
 80125fe:	eddf 5a35 	vldr	s11, [pc, #212]	; 80126d4 <atanf+0x188>
 8012602:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012606:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80126d8 <atanf+0x18c>
 801260a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801260e:	eddf 5a33 	vldr	s11, [pc, #204]	; 80126dc <atanf+0x190>
 8012612:	eee7 5a05 	vfma.f32	s11, s14, s10
 8012616:	ed9f 5a32 	vldr	s10, [pc, #200]	; 80126e0 <atanf+0x194>
 801261a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801261e:	eddf 5a31 	vldr	s11, [pc, #196]	; 80126e4 <atanf+0x198>
 8012622:	eee5 5a07 	vfma.f32	s11, s10, s14
 8012626:	eea5 0a87 	vfma.f32	s0, s11, s14
 801262a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801262e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012632:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012636:	d121      	bne.n	801267c <atanf+0x130>
 8012638:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801263c:	e795      	b.n	801256a <atanf+0x1e>
 801263e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012642:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012646:	ee30 0a27 	vadd.f32	s0, s0, s15
 801264a:	2301      	movs	r3, #1
 801264c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012650:	e7be      	b.n	80125d0 <atanf+0x84>
 8012652:	4b25      	ldr	r3, [pc, #148]	; (80126e8 <atanf+0x19c>)
 8012654:	429c      	cmp	r4, r3
 8012656:	dc0b      	bgt.n	8012670 <atanf+0x124>
 8012658:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801265c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012660:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012664:	2302      	movs	r3, #2
 8012666:	ee70 6a67 	vsub.f32	s13, s0, s15
 801266a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801266e:	e7af      	b.n	80125d0 <atanf+0x84>
 8012670:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012674:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012678:	2303      	movs	r3, #3
 801267a:	e7a9      	b.n	80125d0 <atanf+0x84>
 801267c:	4a1b      	ldr	r2, [pc, #108]	; (80126ec <atanf+0x1a0>)
 801267e:	491c      	ldr	r1, [pc, #112]	; (80126f0 <atanf+0x1a4>)
 8012680:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012684:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012688:	ed93 7a00 	vldr	s14, [r3]
 801268c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012690:	2d00      	cmp	r5, #0
 8012692:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012696:	ed92 0a00 	vldr	s0, [r2]
 801269a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801269e:	bfb8      	it	lt
 80126a0:	eef1 7a67 	vneglt.f32	s15, s15
 80126a4:	e761      	b.n	801256a <atanf+0x1e>
 80126a6:	bf00      	nop
 80126a8:	3fc90fdb 	.word	0x3fc90fdb
 80126ac:	bfc90fdb 	.word	0xbfc90fdb
 80126b0:	3edfffff 	.word	0x3edfffff
 80126b4:	7149f2ca 	.word	0x7149f2ca
 80126b8:	3f97ffff 	.word	0x3f97ffff
 80126bc:	3c8569d7 	.word	0x3c8569d7
 80126c0:	3d4bda59 	.word	0x3d4bda59
 80126c4:	bd15a221 	.word	0xbd15a221
 80126c8:	be4ccccd 	.word	0xbe4ccccd
 80126cc:	3d886b35 	.word	0x3d886b35
 80126d0:	3dba2e6e 	.word	0x3dba2e6e
 80126d4:	3e124925 	.word	0x3e124925
 80126d8:	3eaaaaab 	.word	0x3eaaaaab
 80126dc:	bd6ef16b 	.word	0xbd6ef16b
 80126e0:	bd9d8795 	.word	0xbd9d8795
 80126e4:	bde38e38 	.word	0xbde38e38
 80126e8:	401bffff 	.word	0x401bffff
 80126ec:	08016c28 	.word	0x08016c28
 80126f0:	08016c38 	.word	0x08016c38

080126f4 <fabsf>:
 80126f4:	ee10 3a10 	vmov	r3, s0
 80126f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80126fc:	ee00 3a10 	vmov	s0, r3
 8012700:	4770      	bx	lr
	...

08012704 <__errno>:
 8012704:	4b01      	ldr	r3, [pc, #4]	; (801270c <__errno+0x8>)
 8012706:	6818      	ldr	r0, [r3, #0]
 8012708:	4770      	bx	lr
 801270a:	bf00      	nop
 801270c:	24000240 	.word	0x24000240

08012710 <__libc_init_array>:
 8012710:	b570      	push	{r4, r5, r6, lr}
 8012712:	4d0d      	ldr	r5, [pc, #52]	; (8012748 <__libc_init_array+0x38>)
 8012714:	4c0d      	ldr	r4, [pc, #52]	; (801274c <__libc_init_array+0x3c>)
 8012716:	1b64      	subs	r4, r4, r5
 8012718:	10a4      	asrs	r4, r4, #2
 801271a:	2600      	movs	r6, #0
 801271c:	42a6      	cmp	r6, r4
 801271e:	d109      	bne.n	8012734 <__libc_init_array+0x24>
 8012720:	4d0b      	ldr	r5, [pc, #44]	; (8012750 <__libc_init_array+0x40>)
 8012722:	4c0c      	ldr	r4, [pc, #48]	; (8012754 <__libc_init_array+0x44>)
 8012724:	f002 fcd4 	bl	80150d0 <_init>
 8012728:	1b64      	subs	r4, r4, r5
 801272a:	10a4      	asrs	r4, r4, #2
 801272c:	2600      	movs	r6, #0
 801272e:	42a6      	cmp	r6, r4
 8012730:	d105      	bne.n	801273e <__libc_init_array+0x2e>
 8012732:	bd70      	pop	{r4, r5, r6, pc}
 8012734:	f855 3b04 	ldr.w	r3, [r5], #4
 8012738:	4798      	blx	r3
 801273a:	3601      	adds	r6, #1
 801273c:	e7ee      	b.n	801271c <__libc_init_array+0xc>
 801273e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012742:	4798      	blx	r3
 8012744:	3601      	adds	r6, #1
 8012746:	e7f2      	b.n	801272e <__libc_init_array+0x1e>
 8012748:	08017034 	.word	0x08017034
 801274c:	08017034 	.word	0x08017034
 8012750:	08017034 	.word	0x08017034
 8012754:	0801703c 	.word	0x0801703c

08012758 <memset>:
 8012758:	4402      	add	r2, r0
 801275a:	4603      	mov	r3, r0
 801275c:	4293      	cmp	r3, r2
 801275e:	d100      	bne.n	8012762 <memset+0xa>
 8012760:	4770      	bx	lr
 8012762:	f803 1b01 	strb.w	r1, [r3], #1
 8012766:	e7f9      	b.n	801275c <memset+0x4>

08012768 <__cvt>:
 8012768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801276a:	ed2d 8b02 	vpush	{d8}
 801276e:	eeb0 8b40 	vmov.f64	d8, d0
 8012772:	b085      	sub	sp, #20
 8012774:	4617      	mov	r7, r2
 8012776:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012778:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801277a:	ee18 2a90 	vmov	r2, s17
 801277e:	f025 0520 	bic.w	r5, r5, #32
 8012782:	2a00      	cmp	r2, #0
 8012784:	bfb6      	itet	lt
 8012786:	222d      	movlt	r2, #45	; 0x2d
 8012788:	2200      	movge	r2, #0
 801278a:	eeb1 8b40 	vneglt.f64	d8, d0
 801278e:	2d46      	cmp	r5, #70	; 0x46
 8012790:	460c      	mov	r4, r1
 8012792:	701a      	strb	r2, [r3, #0]
 8012794:	d004      	beq.n	80127a0 <__cvt+0x38>
 8012796:	2d45      	cmp	r5, #69	; 0x45
 8012798:	d100      	bne.n	801279c <__cvt+0x34>
 801279a:	3401      	adds	r4, #1
 801279c:	2102      	movs	r1, #2
 801279e:	e000      	b.n	80127a2 <__cvt+0x3a>
 80127a0:	2103      	movs	r1, #3
 80127a2:	ab03      	add	r3, sp, #12
 80127a4:	9301      	str	r3, [sp, #4]
 80127a6:	ab02      	add	r3, sp, #8
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	4622      	mov	r2, r4
 80127ac:	4633      	mov	r3, r6
 80127ae:	eeb0 0b48 	vmov.f64	d0, d8
 80127b2:	f000 fddd 	bl	8013370 <_dtoa_r>
 80127b6:	2d47      	cmp	r5, #71	; 0x47
 80127b8:	d109      	bne.n	80127ce <__cvt+0x66>
 80127ba:	07fb      	lsls	r3, r7, #31
 80127bc:	d407      	bmi.n	80127ce <__cvt+0x66>
 80127be:	9b03      	ldr	r3, [sp, #12]
 80127c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80127c2:	1a1b      	subs	r3, r3, r0
 80127c4:	6013      	str	r3, [r2, #0]
 80127c6:	b005      	add	sp, #20
 80127c8:	ecbd 8b02 	vpop	{d8}
 80127cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127ce:	2d46      	cmp	r5, #70	; 0x46
 80127d0:	eb00 0204 	add.w	r2, r0, r4
 80127d4:	d10c      	bne.n	80127f0 <__cvt+0x88>
 80127d6:	7803      	ldrb	r3, [r0, #0]
 80127d8:	2b30      	cmp	r3, #48	; 0x30
 80127da:	d107      	bne.n	80127ec <__cvt+0x84>
 80127dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80127e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e4:	bf1c      	itt	ne
 80127e6:	f1c4 0401 	rsbne	r4, r4, #1
 80127ea:	6034      	strne	r4, [r6, #0]
 80127ec:	6833      	ldr	r3, [r6, #0]
 80127ee:	441a      	add	r2, r3
 80127f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80127f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f8:	bf08      	it	eq
 80127fa:	9203      	streq	r2, [sp, #12]
 80127fc:	2130      	movs	r1, #48	; 0x30
 80127fe:	9b03      	ldr	r3, [sp, #12]
 8012800:	4293      	cmp	r3, r2
 8012802:	d2dc      	bcs.n	80127be <__cvt+0x56>
 8012804:	1c5c      	adds	r4, r3, #1
 8012806:	9403      	str	r4, [sp, #12]
 8012808:	7019      	strb	r1, [r3, #0]
 801280a:	e7f8      	b.n	80127fe <__cvt+0x96>

0801280c <__exponent>:
 801280c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801280e:	4603      	mov	r3, r0
 8012810:	2900      	cmp	r1, #0
 8012812:	bfb8      	it	lt
 8012814:	4249      	neglt	r1, r1
 8012816:	f803 2b02 	strb.w	r2, [r3], #2
 801281a:	bfb4      	ite	lt
 801281c:	222d      	movlt	r2, #45	; 0x2d
 801281e:	222b      	movge	r2, #43	; 0x2b
 8012820:	2909      	cmp	r1, #9
 8012822:	7042      	strb	r2, [r0, #1]
 8012824:	dd2a      	ble.n	801287c <__exponent+0x70>
 8012826:	f10d 0407 	add.w	r4, sp, #7
 801282a:	46a4      	mov	ip, r4
 801282c:	270a      	movs	r7, #10
 801282e:	46a6      	mov	lr, r4
 8012830:	460a      	mov	r2, r1
 8012832:	fb91 f6f7 	sdiv	r6, r1, r7
 8012836:	fb07 1516 	mls	r5, r7, r6, r1
 801283a:	3530      	adds	r5, #48	; 0x30
 801283c:	2a63      	cmp	r2, #99	; 0x63
 801283e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012842:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012846:	4631      	mov	r1, r6
 8012848:	dcf1      	bgt.n	801282e <__exponent+0x22>
 801284a:	3130      	adds	r1, #48	; 0x30
 801284c:	f1ae 0502 	sub.w	r5, lr, #2
 8012850:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012854:	1c44      	adds	r4, r0, #1
 8012856:	4629      	mov	r1, r5
 8012858:	4561      	cmp	r1, ip
 801285a:	d30a      	bcc.n	8012872 <__exponent+0x66>
 801285c:	f10d 0209 	add.w	r2, sp, #9
 8012860:	eba2 020e 	sub.w	r2, r2, lr
 8012864:	4565      	cmp	r5, ip
 8012866:	bf88      	it	hi
 8012868:	2200      	movhi	r2, #0
 801286a:	4413      	add	r3, r2
 801286c:	1a18      	subs	r0, r3, r0
 801286e:	b003      	add	sp, #12
 8012870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012876:	f804 2f01 	strb.w	r2, [r4, #1]!
 801287a:	e7ed      	b.n	8012858 <__exponent+0x4c>
 801287c:	2330      	movs	r3, #48	; 0x30
 801287e:	3130      	adds	r1, #48	; 0x30
 8012880:	7083      	strb	r3, [r0, #2]
 8012882:	70c1      	strb	r1, [r0, #3]
 8012884:	1d03      	adds	r3, r0, #4
 8012886:	e7f1      	b.n	801286c <__exponent+0x60>

08012888 <_printf_float>:
 8012888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801288c:	b08b      	sub	sp, #44	; 0x2c
 801288e:	460c      	mov	r4, r1
 8012890:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012894:	4616      	mov	r6, r2
 8012896:	461f      	mov	r7, r3
 8012898:	4605      	mov	r5, r0
 801289a:	f001 fca3 	bl	80141e4 <_localeconv_r>
 801289e:	f8d0 b000 	ldr.w	fp, [r0]
 80128a2:	4658      	mov	r0, fp
 80128a4:	f7ed fd1c 	bl	80002e0 <strlen>
 80128a8:	2300      	movs	r3, #0
 80128aa:	9308      	str	r3, [sp, #32]
 80128ac:	f8d8 3000 	ldr.w	r3, [r8]
 80128b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80128b4:	6822      	ldr	r2, [r4, #0]
 80128b6:	3307      	adds	r3, #7
 80128b8:	f023 0307 	bic.w	r3, r3, #7
 80128bc:	f103 0108 	add.w	r1, r3, #8
 80128c0:	f8c8 1000 	str.w	r1, [r8]
 80128c4:	4682      	mov	sl, r0
 80128c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80128ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80128ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012b30 <_printf_float+0x2a8>
 80128d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80128d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80128da:	eeb4 6b47 	vcmp.f64	d6, d7
 80128de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e2:	dd24      	ble.n	801292e <_printf_float+0xa6>
 80128e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80128e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ec:	d502      	bpl.n	80128f4 <_printf_float+0x6c>
 80128ee:	232d      	movs	r3, #45	; 0x2d
 80128f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128f4:	4b90      	ldr	r3, [pc, #576]	; (8012b38 <_printf_float+0x2b0>)
 80128f6:	4891      	ldr	r0, [pc, #580]	; (8012b3c <_printf_float+0x2b4>)
 80128f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80128fc:	bf94      	ite	ls
 80128fe:	4698      	movls	r8, r3
 8012900:	4680      	movhi	r8, r0
 8012902:	2303      	movs	r3, #3
 8012904:	6123      	str	r3, [r4, #16]
 8012906:	f022 0204 	bic.w	r2, r2, #4
 801290a:	2300      	movs	r3, #0
 801290c:	6022      	str	r2, [r4, #0]
 801290e:	9304      	str	r3, [sp, #16]
 8012910:	9700      	str	r7, [sp, #0]
 8012912:	4633      	mov	r3, r6
 8012914:	aa09      	add	r2, sp, #36	; 0x24
 8012916:	4621      	mov	r1, r4
 8012918:	4628      	mov	r0, r5
 801291a:	f000 f9d3 	bl	8012cc4 <_printf_common>
 801291e:	3001      	adds	r0, #1
 8012920:	f040 808a 	bne.w	8012a38 <_printf_float+0x1b0>
 8012924:	f04f 30ff 	mov.w	r0, #4294967295
 8012928:	b00b      	add	sp, #44	; 0x2c
 801292a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801292e:	eeb4 0b40 	vcmp.f64	d0, d0
 8012932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012936:	d709      	bvc.n	801294c <_printf_float+0xc4>
 8012938:	ee10 3a90 	vmov	r3, s1
 801293c:	2b00      	cmp	r3, #0
 801293e:	bfbc      	itt	lt
 8012940:	232d      	movlt	r3, #45	; 0x2d
 8012942:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012946:	487e      	ldr	r0, [pc, #504]	; (8012b40 <_printf_float+0x2b8>)
 8012948:	4b7e      	ldr	r3, [pc, #504]	; (8012b44 <_printf_float+0x2bc>)
 801294a:	e7d5      	b.n	80128f8 <_printf_float+0x70>
 801294c:	6863      	ldr	r3, [r4, #4]
 801294e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012952:	9104      	str	r1, [sp, #16]
 8012954:	1c59      	adds	r1, r3, #1
 8012956:	d13c      	bne.n	80129d2 <_printf_float+0x14a>
 8012958:	2306      	movs	r3, #6
 801295a:	6063      	str	r3, [r4, #4]
 801295c:	2300      	movs	r3, #0
 801295e:	9303      	str	r3, [sp, #12]
 8012960:	ab08      	add	r3, sp, #32
 8012962:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801296a:	ab07      	add	r3, sp, #28
 801296c:	6861      	ldr	r1, [r4, #4]
 801296e:	9300      	str	r3, [sp, #0]
 8012970:	6022      	str	r2, [r4, #0]
 8012972:	f10d 031b 	add.w	r3, sp, #27
 8012976:	4628      	mov	r0, r5
 8012978:	f7ff fef6 	bl	8012768 <__cvt>
 801297c:	9b04      	ldr	r3, [sp, #16]
 801297e:	9907      	ldr	r1, [sp, #28]
 8012980:	2b47      	cmp	r3, #71	; 0x47
 8012982:	4680      	mov	r8, r0
 8012984:	d108      	bne.n	8012998 <_printf_float+0x110>
 8012986:	1cc8      	adds	r0, r1, #3
 8012988:	db02      	blt.n	8012990 <_printf_float+0x108>
 801298a:	6863      	ldr	r3, [r4, #4]
 801298c:	4299      	cmp	r1, r3
 801298e:	dd41      	ble.n	8012a14 <_printf_float+0x18c>
 8012990:	f1a9 0902 	sub.w	r9, r9, #2
 8012994:	fa5f f989 	uxtb.w	r9, r9
 8012998:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801299c:	d820      	bhi.n	80129e0 <_printf_float+0x158>
 801299e:	3901      	subs	r1, #1
 80129a0:	464a      	mov	r2, r9
 80129a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80129a6:	9107      	str	r1, [sp, #28]
 80129a8:	f7ff ff30 	bl	801280c <__exponent>
 80129ac:	9a08      	ldr	r2, [sp, #32]
 80129ae:	9004      	str	r0, [sp, #16]
 80129b0:	1813      	adds	r3, r2, r0
 80129b2:	2a01      	cmp	r2, #1
 80129b4:	6123      	str	r3, [r4, #16]
 80129b6:	dc02      	bgt.n	80129be <_printf_float+0x136>
 80129b8:	6822      	ldr	r2, [r4, #0]
 80129ba:	07d2      	lsls	r2, r2, #31
 80129bc:	d501      	bpl.n	80129c2 <_printf_float+0x13a>
 80129be:	3301      	adds	r3, #1
 80129c0:	6123      	str	r3, [r4, #16]
 80129c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d0a2      	beq.n	8012910 <_printf_float+0x88>
 80129ca:	232d      	movs	r3, #45	; 0x2d
 80129cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129d0:	e79e      	b.n	8012910 <_printf_float+0x88>
 80129d2:	9904      	ldr	r1, [sp, #16]
 80129d4:	2947      	cmp	r1, #71	; 0x47
 80129d6:	d1c1      	bne.n	801295c <_printf_float+0xd4>
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d1bf      	bne.n	801295c <_printf_float+0xd4>
 80129dc:	2301      	movs	r3, #1
 80129de:	e7bc      	b.n	801295a <_printf_float+0xd2>
 80129e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80129e4:	d118      	bne.n	8012a18 <_printf_float+0x190>
 80129e6:	2900      	cmp	r1, #0
 80129e8:	6863      	ldr	r3, [r4, #4]
 80129ea:	dd0b      	ble.n	8012a04 <_printf_float+0x17c>
 80129ec:	6121      	str	r1, [r4, #16]
 80129ee:	b913      	cbnz	r3, 80129f6 <_printf_float+0x16e>
 80129f0:	6822      	ldr	r2, [r4, #0]
 80129f2:	07d0      	lsls	r0, r2, #31
 80129f4:	d502      	bpl.n	80129fc <_printf_float+0x174>
 80129f6:	3301      	adds	r3, #1
 80129f8:	440b      	add	r3, r1
 80129fa:	6123      	str	r3, [r4, #16]
 80129fc:	2300      	movs	r3, #0
 80129fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8012a00:	9304      	str	r3, [sp, #16]
 8012a02:	e7de      	b.n	80129c2 <_printf_float+0x13a>
 8012a04:	b913      	cbnz	r3, 8012a0c <_printf_float+0x184>
 8012a06:	6822      	ldr	r2, [r4, #0]
 8012a08:	07d2      	lsls	r2, r2, #31
 8012a0a:	d501      	bpl.n	8012a10 <_printf_float+0x188>
 8012a0c:	3302      	adds	r3, #2
 8012a0e:	e7f4      	b.n	80129fa <_printf_float+0x172>
 8012a10:	2301      	movs	r3, #1
 8012a12:	e7f2      	b.n	80129fa <_printf_float+0x172>
 8012a14:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012a18:	9b08      	ldr	r3, [sp, #32]
 8012a1a:	4299      	cmp	r1, r3
 8012a1c:	db05      	blt.n	8012a2a <_printf_float+0x1a2>
 8012a1e:	6823      	ldr	r3, [r4, #0]
 8012a20:	6121      	str	r1, [r4, #16]
 8012a22:	07d8      	lsls	r0, r3, #31
 8012a24:	d5ea      	bpl.n	80129fc <_printf_float+0x174>
 8012a26:	1c4b      	adds	r3, r1, #1
 8012a28:	e7e7      	b.n	80129fa <_printf_float+0x172>
 8012a2a:	2900      	cmp	r1, #0
 8012a2c:	bfd4      	ite	le
 8012a2e:	f1c1 0202 	rsble	r2, r1, #2
 8012a32:	2201      	movgt	r2, #1
 8012a34:	4413      	add	r3, r2
 8012a36:	e7e0      	b.n	80129fa <_printf_float+0x172>
 8012a38:	6823      	ldr	r3, [r4, #0]
 8012a3a:	055a      	lsls	r2, r3, #21
 8012a3c:	d407      	bmi.n	8012a4e <_printf_float+0x1c6>
 8012a3e:	6923      	ldr	r3, [r4, #16]
 8012a40:	4642      	mov	r2, r8
 8012a42:	4631      	mov	r1, r6
 8012a44:	4628      	mov	r0, r5
 8012a46:	47b8      	blx	r7
 8012a48:	3001      	adds	r0, #1
 8012a4a:	d12a      	bne.n	8012aa2 <_printf_float+0x21a>
 8012a4c:	e76a      	b.n	8012924 <_printf_float+0x9c>
 8012a4e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012a52:	f240 80e2 	bls.w	8012c1a <_printf_float+0x392>
 8012a56:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012a5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a62:	d133      	bne.n	8012acc <_printf_float+0x244>
 8012a64:	4a38      	ldr	r2, [pc, #224]	; (8012b48 <_printf_float+0x2c0>)
 8012a66:	2301      	movs	r3, #1
 8012a68:	4631      	mov	r1, r6
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	47b8      	blx	r7
 8012a6e:	3001      	adds	r0, #1
 8012a70:	f43f af58 	beq.w	8012924 <_printf_float+0x9c>
 8012a74:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	db02      	blt.n	8012a82 <_printf_float+0x1fa>
 8012a7c:	6823      	ldr	r3, [r4, #0]
 8012a7e:	07d8      	lsls	r0, r3, #31
 8012a80:	d50f      	bpl.n	8012aa2 <_printf_float+0x21a>
 8012a82:	4653      	mov	r3, sl
 8012a84:	465a      	mov	r2, fp
 8012a86:	4631      	mov	r1, r6
 8012a88:	4628      	mov	r0, r5
 8012a8a:	47b8      	blx	r7
 8012a8c:	3001      	adds	r0, #1
 8012a8e:	f43f af49 	beq.w	8012924 <_printf_float+0x9c>
 8012a92:	f04f 0800 	mov.w	r8, #0
 8012a96:	f104 091a 	add.w	r9, r4, #26
 8012a9a:	9b08      	ldr	r3, [sp, #32]
 8012a9c:	3b01      	subs	r3, #1
 8012a9e:	4543      	cmp	r3, r8
 8012aa0:	dc09      	bgt.n	8012ab6 <_printf_float+0x22e>
 8012aa2:	6823      	ldr	r3, [r4, #0]
 8012aa4:	079b      	lsls	r3, r3, #30
 8012aa6:	f100 8108 	bmi.w	8012cba <_printf_float+0x432>
 8012aaa:	68e0      	ldr	r0, [r4, #12]
 8012aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aae:	4298      	cmp	r0, r3
 8012ab0:	bfb8      	it	lt
 8012ab2:	4618      	movlt	r0, r3
 8012ab4:	e738      	b.n	8012928 <_printf_float+0xa0>
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	464a      	mov	r2, r9
 8012aba:	4631      	mov	r1, r6
 8012abc:	4628      	mov	r0, r5
 8012abe:	47b8      	blx	r7
 8012ac0:	3001      	adds	r0, #1
 8012ac2:	f43f af2f 	beq.w	8012924 <_printf_float+0x9c>
 8012ac6:	f108 0801 	add.w	r8, r8, #1
 8012aca:	e7e6      	b.n	8012a9a <_printf_float+0x212>
 8012acc:	9b07      	ldr	r3, [sp, #28]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	dc3c      	bgt.n	8012b4c <_printf_float+0x2c4>
 8012ad2:	4a1d      	ldr	r2, [pc, #116]	; (8012b48 <_printf_float+0x2c0>)
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	4631      	mov	r1, r6
 8012ad8:	4628      	mov	r0, r5
 8012ada:	47b8      	blx	r7
 8012adc:	3001      	adds	r0, #1
 8012ade:	f43f af21 	beq.w	8012924 <_printf_float+0x9c>
 8012ae2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012ae6:	4313      	orrs	r3, r2
 8012ae8:	d102      	bne.n	8012af0 <_printf_float+0x268>
 8012aea:	6823      	ldr	r3, [r4, #0]
 8012aec:	07d9      	lsls	r1, r3, #31
 8012aee:	d5d8      	bpl.n	8012aa2 <_printf_float+0x21a>
 8012af0:	4653      	mov	r3, sl
 8012af2:	465a      	mov	r2, fp
 8012af4:	4631      	mov	r1, r6
 8012af6:	4628      	mov	r0, r5
 8012af8:	47b8      	blx	r7
 8012afa:	3001      	adds	r0, #1
 8012afc:	f43f af12 	beq.w	8012924 <_printf_float+0x9c>
 8012b00:	f04f 0900 	mov.w	r9, #0
 8012b04:	f104 0a1a 	add.w	sl, r4, #26
 8012b08:	9b07      	ldr	r3, [sp, #28]
 8012b0a:	425b      	negs	r3, r3
 8012b0c:	454b      	cmp	r3, r9
 8012b0e:	dc01      	bgt.n	8012b14 <_printf_float+0x28c>
 8012b10:	9b08      	ldr	r3, [sp, #32]
 8012b12:	e795      	b.n	8012a40 <_printf_float+0x1b8>
 8012b14:	2301      	movs	r3, #1
 8012b16:	4652      	mov	r2, sl
 8012b18:	4631      	mov	r1, r6
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	47b8      	blx	r7
 8012b1e:	3001      	adds	r0, #1
 8012b20:	f43f af00 	beq.w	8012924 <_printf_float+0x9c>
 8012b24:	f109 0901 	add.w	r9, r9, #1
 8012b28:	e7ee      	b.n	8012b08 <_printf_float+0x280>
 8012b2a:	bf00      	nop
 8012b2c:	f3af 8000 	nop.w
 8012b30:	ffffffff 	.word	0xffffffff
 8012b34:	7fefffff 	.word	0x7fefffff
 8012b38:	08016c4c 	.word	0x08016c4c
 8012b3c:	08016c50 	.word	0x08016c50
 8012b40:	08016c58 	.word	0x08016c58
 8012b44:	08016c54 	.word	0x08016c54
 8012b48:	08016c5c 	.word	0x08016c5c
 8012b4c:	9a08      	ldr	r2, [sp, #32]
 8012b4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012b50:	429a      	cmp	r2, r3
 8012b52:	bfa8      	it	ge
 8012b54:	461a      	movge	r2, r3
 8012b56:	2a00      	cmp	r2, #0
 8012b58:	4691      	mov	r9, r2
 8012b5a:	dc38      	bgt.n	8012bce <_printf_float+0x346>
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	9305      	str	r3, [sp, #20]
 8012b60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012b64:	f104 021a 	add.w	r2, r4, #26
 8012b68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012b6a:	9905      	ldr	r1, [sp, #20]
 8012b6c:	9304      	str	r3, [sp, #16]
 8012b6e:	eba3 0309 	sub.w	r3, r3, r9
 8012b72:	428b      	cmp	r3, r1
 8012b74:	dc33      	bgt.n	8012bde <_printf_float+0x356>
 8012b76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	db3c      	blt.n	8012bf8 <_printf_float+0x370>
 8012b7e:	6823      	ldr	r3, [r4, #0]
 8012b80:	07da      	lsls	r2, r3, #31
 8012b82:	d439      	bmi.n	8012bf8 <_printf_float+0x370>
 8012b84:	9a08      	ldr	r2, [sp, #32]
 8012b86:	9b04      	ldr	r3, [sp, #16]
 8012b88:	9907      	ldr	r1, [sp, #28]
 8012b8a:	1ad3      	subs	r3, r2, r3
 8012b8c:	eba2 0901 	sub.w	r9, r2, r1
 8012b90:	4599      	cmp	r9, r3
 8012b92:	bfa8      	it	ge
 8012b94:	4699      	movge	r9, r3
 8012b96:	f1b9 0f00 	cmp.w	r9, #0
 8012b9a:	dc35      	bgt.n	8012c08 <_printf_float+0x380>
 8012b9c:	f04f 0800 	mov.w	r8, #0
 8012ba0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ba4:	f104 0a1a 	add.w	sl, r4, #26
 8012ba8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012bac:	1a9b      	subs	r3, r3, r2
 8012bae:	eba3 0309 	sub.w	r3, r3, r9
 8012bb2:	4543      	cmp	r3, r8
 8012bb4:	f77f af75 	ble.w	8012aa2 <_printf_float+0x21a>
 8012bb8:	2301      	movs	r3, #1
 8012bba:	4652      	mov	r2, sl
 8012bbc:	4631      	mov	r1, r6
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	47b8      	blx	r7
 8012bc2:	3001      	adds	r0, #1
 8012bc4:	f43f aeae 	beq.w	8012924 <_printf_float+0x9c>
 8012bc8:	f108 0801 	add.w	r8, r8, #1
 8012bcc:	e7ec      	b.n	8012ba8 <_printf_float+0x320>
 8012bce:	4613      	mov	r3, r2
 8012bd0:	4631      	mov	r1, r6
 8012bd2:	4642      	mov	r2, r8
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	47b8      	blx	r7
 8012bd8:	3001      	adds	r0, #1
 8012bda:	d1bf      	bne.n	8012b5c <_printf_float+0x2d4>
 8012bdc:	e6a2      	b.n	8012924 <_printf_float+0x9c>
 8012bde:	2301      	movs	r3, #1
 8012be0:	4631      	mov	r1, r6
 8012be2:	4628      	mov	r0, r5
 8012be4:	9204      	str	r2, [sp, #16]
 8012be6:	47b8      	blx	r7
 8012be8:	3001      	adds	r0, #1
 8012bea:	f43f ae9b 	beq.w	8012924 <_printf_float+0x9c>
 8012bee:	9b05      	ldr	r3, [sp, #20]
 8012bf0:	9a04      	ldr	r2, [sp, #16]
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	9305      	str	r3, [sp, #20]
 8012bf6:	e7b7      	b.n	8012b68 <_printf_float+0x2e0>
 8012bf8:	4653      	mov	r3, sl
 8012bfa:	465a      	mov	r2, fp
 8012bfc:	4631      	mov	r1, r6
 8012bfe:	4628      	mov	r0, r5
 8012c00:	47b8      	blx	r7
 8012c02:	3001      	adds	r0, #1
 8012c04:	d1be      	bne.n	8012b84 <_printf_float+0x2fc>
 8012c06:	e68d      	b.n	8012924 <_printf_float+0x9c>
 8012c08:	9a04      	ldr	r2, [sp, #16]
 8012c0a:	464b      	mov	r3, r9
 8012c0c:	4442      	add	r2, r8
 8012c0e:	4631      	mov	r1, r6
 8012c10:	4628      	mov	r0, r5
 8012c12:	47b8      	blx	r7
 8012c14:	3001      	adds	r0, #1
 8012c16:	d1c1      	bne.n	8012b9c <_printf_float+0x314>
 8012c18:	e684      	b.n	8012924 <_printf_float+0x9c>
 8012c1a:	9a08      	ldr	r2, [sp, #32]
 8012c1c:	2a01      	cmp	r2, #1
 8012c1e:	dc01      	bgt.n	8012c24 <_printf_float+0x39c>
 8012c20:	07db      	lsls	r3, r3, #31
 8012c22:	d537      	bpl.n	8012c94 <_printf_float+0x40c>
 8012c24:	2301      	movs	r3, #1
 8012c26:	4642      	mov	r2, r8
 8012c28:	4631      	mov	r1, r6
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	47b8      	blx	r7
 8012c2e:	3001      	adds	r0, #1
 8012c30:	f43f ae78 	beq.w	8012924 <_printf_float+0x9c>
 8012c34:	4653      	mov	r3, sl
 8012c36:	465a      	mov	r2, fp
 8012c38:	4631      	mov	r1, r6
 8012c3a:	4628      	mov	r0, r5
 8012c3c:	47b8      	blx	r7
 8012c3e:	3001      	adds	r0, #1
 8012c40:	f43f ae70 	beq.w	8012924 <_printf_float+0x9c>
 8012c44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012c48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c50:	d01b      	beq.n	8012c8a <_printf_float+0x402>
 8012c52:	9b08      	ldr	r3, [sp, #32]
 8012c54:	f108 0201 	add.w	r2, r8, #1
 8012c58:	3b01      	subs	r3, #1
 8012c5a:	4631      	mov	r1, r6
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	47b8      	blx	r7
 8012c60:	3001      	adds	r0, #1
 8012c62:	d10e      	bne.n	8012c82 <_printf_float+0x3fa>
 8012c64:	e65e      	b.n	8012924 <_printf_float+0x9c>
 8012c66:	2301      	movs	r3, #1
 8012c68:	464a      	mov	r2, r9
 8012c6a:	4631      	mov	r1, r6
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	47b8      	blx	r7
 8012c70:	3001      	adds	r0, #1
 8012c72:	f43f ae57 	beq.w	8012924 <_printf_float+0x9c>
 8012c76:	f108 0801 	add.w	r8, r8, #1
 8012c7a:	9b08      	ldr	r3, [sp, #32]
 8012c7c:	3b01      	subs	r3, #1
 8012c7e:	4543      	cmp	r3, r8
 8012c80:	dcf1      	bgt.n	8012c66 <_printf_float+0x3de>
 8012c82:	9b04      	ldr	r3, [sp, #16]
 8012c84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012c88:	e6db      	b.n	8012a42 <_printf_float+0x1ba>
 8012c8a:	f04f 0800 	mov.w	r8, #0
 8012c8e:	f104 091a 	add.w	r9, r4, #26
 8012c92:	e7f2      	b.n	8012c7a <_printf_float+0x3f2>
 8012c94:	2301      	movs	r3, #1
 8012c96:	4642      	mov	r2, r8
 8012c98:	e7df      	b.n	8012c5a <_printf_float+0x3d2>
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	464a      	mov	r2, r9
 8012c9e:	4631      	mov	r1, r6
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	47b8      	blx	r7
 8012ca4:	3001      	adds	r0, #1
 8012ca6:	f43f ae3d 	beq.w	8012924 <_printf_float+0x9c>
 8012caa:	f108 0801 	add.w	r8, r8, #1
 8012cae:	68e3      	ldr	r3, [r4, #12]
 8012cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012cb2:	1a5b      	subs	r3, r3, r1
 8012cb4:	4543      	cmp	r3, r8
 8012cb6:	dcf0      	bgt.n	8012c9a <_printf_float+0x412>
 8012cb8:	e6f7      	b.n	8012aaa <_printf_float+0x222>
 8012cba:	f04f 0800 	mov.w	r8, #0
 8012cbe:	f104 0919 	add.w	r9, r4, #25
 8012cc2:	e7f4      	b.n	8012cae <_printf_float+0x426>

08012cc4 <_printf_common>:
 8012cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cc8:	4616      	mov	r6, r2
 8012cca:	4699      	mov	r9, r3
 8012ccc:	688a      	ldr	r2, [r1, #8]
 8012cce:	690b      	ldr	r3, [r1, #16]
 8012cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	bfb8      	it	lt
 8012cd8:	4613      	movlt	r3, r2
 8012cda:	6033      	str	r3, [r6, #0]
 8012cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ce0:	4607      	mov	r7, r0
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	b10a      	cbz	r2, 8012cea <_printf_common+0x26>
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	6033      	str	r3, [r6, #0]
 8012cea:	6823      	ldr	r3, [r4, #0]
 8012cec:	0699      	lsls	r1, r3, #26
 8012cee:	bf42      	ittt	mi
 8012cf0:	6833      	ldrmi	r3, [r6, #0]
 8012cf2:	3302      	addmi	r3, #2
 8012cf4:	6033      	strmi	r3, [r6, #0]
 8012cf6:	6825      	ldr	r5, [r4, #0]
 8012cf8:	f015 0506 	ands.w	r5, r5, #6
 8012cfc:	d106      	bne.n	8012d0c <_printf_common+0x48>
 8012cfe:	f104 0a19 	add.w	sl, r4, #25
 8012d02:	68e3      	ldr	r3, [r4, #12]
 8012d04:	6832      	ldr	r2, [r6, #0]
 8012d06:	1a9b      	subs	r3, r3, r2
 8012d08:	42ab      	cmp	r3, r5
 8012d0a:	dc26      	bgt.n	8012d5a <_printf_common+0x96>
 8012d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012d10:	1e13      	subs	r3, r2, #0
 8012d12:	6822      	ldr	r2, [r4, #0]
 8012d14:	bf18      	it	ne
 8012d16:	2301      	movne	r3, #1
 8012d18:	0692      	lsls	r2, r2, #26
 8012d1a:	d42b      	bmi.n	8012d74 <_printf_common+0xb0>
 8012d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d20:	4649      	mov	r1, r9
 8012d22:	4638      	mov	r0, r7
 8012d24:	47c0      	blx	r8
 8012d26:	3001      	adds	r0, #1
 8012d28:	d01e      	beq.n	8012d68 <_printf_common+0xa4>
 8012d2a:	6823      	ldr	r3, [r4, #0]
 8012d2c:	68e5      	ldr	r5, [r4, #12]
 8012d2e:	6832      	ldr	r2, [r6, #0]
 8012d30:	f003 0306 	and.w	r3, r3, #6
 8012d34:	2b04      	cmp	r3, #4
 8012d36:	bf08      	it	eq
 8012d38:	1aad      	subeq	r5, r5, r2
 8012d3a:	68a3      	ldr	r3, [r4, #8]
 8012d3c:	6922      	ldr	r2, [r4, #16]
 8012d3e:	bf0c      	ite	eq
 8012d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d44:	2500      	movne	r5, #0
 8012d46:	4293      	cmp	r3, r2
 8012d48:	bfc4      	itt	gt
 8012d4a:	1a9b      	subgt	r3, r3, r2
 8012d4c:	18ed      	addgt	r5, r5, r3
 8012d4e:	2600      	movs	r6, #0
 8012d50:	341a      	adds	r4, #26
 8012d52:	42b5      	cmp	r5, r6
 8012d54:	d11a      	bne.n	8012d8c <_printf_common+0xc8>
 8012d56:	2000      	movs	r0, #0
 8012d58:	e008      	b.n	8012d6c <_printf_common+0xa8>
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	4652      	mov	r2, sl
 8012d5e:	4649      	mov	r1, r9
 8012d60:	4638      	mov	r0, r7
 8012d62:	47c0      	blx	r8
 8012d64:	3001      	adds	r0, #1
 8012d66:	d103      	bne.n	8012d70 <_printf_common+0xac>
 8012d68:	f04f 30ff 	mov.w	r0, #4294967295
 8012d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d70:	3501      	adds	r5, #1
 8012d72:	e7c6      	b.n	8012d02 <_printf_common+0x3e>
 8012d74:	18e1      	adds	r1, r4, r3
 8012d76:	1c5a      	adds	r2, r3, #1
 8012d78:	2030      	movs	r0, #48	; 0x30
 8012d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d7e:	4422      	add	r2, r4
 8012d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d88:	3302      	adds	r3, #2
 8012d8a:	e7c7      	b.n	8012d1c <_printf_common+0x58>
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	4622      	mov	r2, r4
 8012d90:	4649      	mov	r1, r9
 8012d92:	4638      	mov	r0, r7
 8012d94:	47c0      	blx	r8
 8012d96:	3001      	adds	r0, #1
 8012d98:	d0e6      	beq.n	8012d68 <_printf_common+0xa4>
 8012d9a:	3601      	adds	r6, #1
 8012d9c:	e7d9      	b.n	8012d52 <_printf_common+0x8e>
	...

08012da0 <_printf_i>:
 8012da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012da4:	460c      	mov	r4, r1
 8012da6:	4691      	mov	r9, r2
 8012da8:	7e27      	ldrb	r7, [r4, #24]
 8012daa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012dac:	2f78      	cmp	r7, #120	; 0x78
 8012dae:	4680      	mov	r8, r0
 8012db0:	469a      	mov	sl, r3
 8012db2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012db6:	d807      	bhi.n	8012dc8 <_printf_i+0x28>
 8012db8:	2f62      	cmp	r7, #98	; 0x62
 8012dba:	d80a      	bhi.n	8012dd2 <_printf_i+0x32>
 8012dbc:	2f00      	cmp	r7, #0
 8012dbe:	f000 80d8 	beq.w	8012f72 <_printf_i+0x1d2>
 8012dc2:	2f58      	cmp	r7, #88	; 0x58
 8012dc4:	f000 80a3 	beq.w	8012f0e <_printf_i+0x16e>
 8012dc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012dd0:	e03a      	b.n	8012e48 <_printf_i+0xa8>
 8012dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012dd6:	2b15      	cmp	r3, #21
 8012dd8:	d8f6      	bhi.n	8012dc8 <_printf_i+0x28>
 8012dda:	a001      	add	r0, pc, #4	; (adr r0, 8012de0 <_printf_i+0x40>)
 8012ddc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012de0:	08012e39 	.word	0x08012e39
 8012de4:	08012e4d 	.word	0x08012e4d
 8012de8:	08012dc9 	.word	0x08012dc9
 8012dec:	08012dc9 	.word	0x08012dc9
 8012df0:	08012dc9 	.word	0x08012dc9
 8012df4:	08012dc9 	.word	0x08012dc9
 8012df8:	08012e4d 	.word	0x08012e4d
 8012dfc:	08012dc9 	.word	0x08012dc9
 8012e00:	08012dc9 	.word	0x08012dc9
 8012e04:	08012dc9 	.word	0x08012dc9
 8012e08:	08012dc9 	.word	0x08012dc9
 8012e0c:	08012f59 	.word	0x08012f59
 8012e10:	08012e7d 	.word	0x08012e7d
 8012e14:	08012f3b 	.word	0x08012f3b
 8012e18:	08012dc9 	.word	0x08012dc9
 8012e1c:	08012dc9 	.word	0x08012dc9
 8012e20:	08012f7b 	.word	0x08012f7b
 8012e24:	08012dc9 	.word	0x08012dc9
 8012e28:	08012e7d 	.word	0x08012e7d
 8012e2c:	08012dc9 	.word	0x08012dc9
 8012e30:	08012dc9 	.word	0x08012dc9
 8012e34:	08012f43 	.word	0x08012f43
 8012e38:	680b      	ldr	r3, [r1, #0]
 8012e3a:	1d1a      	adds	r2, r3, #4
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	600a      	str	r2, [r1, #0]
 8012e40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e48:	2301      	movs	r3, #1
 8012e4a:	e0a3      	b.n	8012f94 <_printf_i+0x1f4>
 8012e4c:	6825      	ldr	r5, [r4, #0]
 8012e4e:	6808      	ldr	r0, [r1, #0]
 8012e50:	062e      	lsls	r6, r5, #24
 8012e52:	f100 0304 	add.w	r3, r0, #4
 8012e56:	d50a      	bpl.n	8012e6e <_printf_i+0xce>
 8012e58:	6805      	ldr	r5, [r0, #0]
 8012e5a:	600b      	str	r3, [r1, #0]
 8012e5c:	2d00      	cmp	r5, #0
 8012e5e:	da03      	bge.n	8012e68 <_printf_i+0xc8>
 8012e60:	232d      	movs	r3, #45	; 0x2d
 8012e62:	426d      	negs	r5, r5
 8012e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e68:	485e      	ldr	r0, [pc, #376]	; (8012fe4 <_printf_i+0x244>)
 8012e6a:	230a      	movs	r3, #10
 8012e6c:	e019      	b.n	8012ea2 <_printf_i+0x102>
 8012e6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012e72:	6805      	ldr	r5, [r0, #0]
 8012e74:	600b      	str	r3, [r1, #0]
 8012e76:	bf18      	it	ne
 8012e78:	b22d      	sxthne	r5, r5
 8012e7a:	e7ef      	b.n	8012e5c <_printf_i+0xbc>
 8012e7c:	680b      	ldr	r3, [r1, #0]
 8012e7e:	6825      	ldr	r5, [r4, #0]
 8012e80:	1d18      	adds	r0, r3, #4
 8012e82:	6008      	str	r0, [r1, #0]
 8012e84:	0628      	lsls	r0, r5, #24
 8012e86:	d501      	bpl.n	8012e8c <_printf_i+0xec>
 8012e88:	681d      	ldr	r5, [r3, #0]
 8012e8a:	e002      	b.n	8012e92 <_printf_i+0xf2>
 8012e8c:	0669      	lsls	r1, r5, #25
 8012e8e:	d5fb      	bpl.n	8012e88 <_printf_i+0xe8>
 8012e90:	881d      	ldrh	r5, [r3, #0]
 8012e92:	4854      	ldr	r0, [pc, #336]	; (8012fe4 <_printf_i+0x244>)
 8012e94:	2f6f      	cmp	r7, #111	; 0x6f
 8012e96:	bf0c      	ite	eq
 8012e98:	2308      	moveq	r3, #8
 8012e9a:	230a      	movne	r3, #10
 8012e9c:	2100      	movs	r1, #0
 8012e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ea2:	6866      	ldr	r6, [r4, #4]
 8012ea4:	60a6      	str	r6, [r4, #8]
 8012ea6:	2e00      	cmp	r6, #0
 8012ea8:	bfa2      	ittt	ge
 8012eaa:	6821      	ldrge	r1, [r4, #0]
 8012eac:	f021 0104 	bicge.w	r1, r1, #4
 8012eb0:	6021      	strge	r1, [r4, #0]
 8012eb2:	b90d      	cbnz	r5, 8012eb8 <_printf_i+0x118>
 8012eb4:	2e00      	cmp	r6, #0
 8012eb6:	d04d      	beq.n	8012f54 <_printf_i+0x1b4>
 8012eb8:	4616      	mov	r6, r2
 8012eba:	fbb5 f1f3 	udiv	r1, r5, r3
 8012ebe:	fb03 5711 	mls	r7, r3, r1, r5
 8012ec2:	5dc7      	ldrb	r7, [r0, r7]
 8012ec4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012ec8:	462f      	mov	r7, r5
 8012eca:	42bb      	cmp	r3, r7
 8012ecc:	460d      	mov	r5, r1
 8012ece:	d9f4      	bls.n	8012eba <_printf_i+0x11a>
 8012ed0:	2b08      	cmp	r3, #8
 8012ed2:	d10b      	bne.n	8012eec <_printf_i+0x14c>
 8012ed4:	6823      	ldr	r3, [r4, #0]
 8012ed6:	07df      	lsls	r7, r3, #31
 8012ed8:	d508      	bpl.n	8012eec <_printf_i+0x14c>
 8012eda:	6923      	ldr	r3, [r4, #16]
 8012edc:	6861      	ldr	r1, [r4, #4]
 8012ede:	4299      	cmp	r1, r3
 8012ee0:	bfde      	ittt	le
 8012ee2:	2330      	movle	r3, #48	; 0x30
 8012ee4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012ee8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012eec:	1b92      	subs	r2, r2, r6
 8012eee:	6122      	str	r2, [r4, #16]
 8012ef0:	f8cd a000 	str.w	sl, [sp]
 8012ef4:	464b      	mov	r3, r9
 8012ef6:	aa03      	add	r2, sp, #12
 8012ef8:	4621      	mov	r1, r4
 8012efa:	4640      	mov	r0, r8
 8012efc:	f7ff fee2 	bl	8012cc4 <_printf_common>
 8012f00:	3001      	adds	r0, #1
 8012f02:	d14c      	bne.n	8012f9e <_printf_i+0x1fe>
 8012f04:	f04f 30ff 	mov.w	r0, #4294967295
 8012f08:	b004      	add	sp, #16
 8012f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f0e:	4835      	ldr	r0, [pc, #212]	; (8012fe4 <_printf_i+0x244>)
 8012f10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012f14:	6823      	ldr	r3, [r4, #0]
 8012f16:	680e      	ldr	r6, [r1, #0]
 8012f18:	061f      	lsls	r7, r3, #24
 8012f1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8012f1e:	600e      	str	r6, [r1, #0]
 8012f20:	d514      	bpl.n	8012f4c <_printf_i+0x1ac>
 8012f22:	07d9      	lsls	r1, r3, #31
 8012f24:	bf44      	itt	mi
 8012f26:	f043 0320 	orrmi.w	r3, r3, #32
 8012f2a:	6023      	strmi	r3, [r4, #0]
 8012f2c:	b91d      	cbnz	r5, 8012f36 <_printf_i+0x196>
 8012f2e:	6823      	ldr	r3, [r4, #0]
 8012f30:	f023 0320 	bic.w	r3, r3, #32
 8012f34:	6023      	str	r3, [r4, #0]
 8012f36:	2310      	movs	r3, #16
 8012f38:	e7b0      	b.n	8012e9c <_printf_i+0xfc>
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	f043 0320 	orr.w	r3, r3, #32
 8012f40:	6023      	str	r3, [r4, #0]
 8012f42:	2378      	movs	r3, #120	; 0x78
 8012f44:	4828      	ldr	r0, [pc, #160]	; (8012fe8 <_printf_i+0x248>)
 8012f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012f4a:	e7e3      	b.n	8012f14 <_printf_i+0x174>
 8012f4c:	065e      	lsls	r6, r3, #25
 8012f4e:	bf48      	it	mi
 8012f50:	b2ad      	uxthmi	r5, r5
 8012f52:	e7e6      	b.n	8012f22 <_printf_i+0x182>
 8012f54:	4616      	mov	r6, r2
 8012f56:	e7bb      	b.n	8012ed0 <_printf_i+0x130>
 8012f58:	680b      	ldr	r3, [r1, #0]
 8012f5a:	6826      	ldr	r6, [r4, #0]
 8012f5c:	6960      	ldr	r0, [r4, #20]
 8012f5e:	1d1d      	adds	r5, r3, #4
 8012f60:	600d      	str	r5, [r1, #0]
 8012f62:	0635      	lsls	r5, r6, #24
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	d501      	bpl.n	8012f6c <_printf_i+0x1cc>
 8012f68:	6018      	str	r0, [r3, #0]
 8012f6a:	e002      	b.n	8012f72 <_printf_i+0x1d2>
 8012f6c:	0671      	lsls	r1, r6, #25
 8012f6e:	d5fb      	bpl.n	8012f68 <_printf_i+0x1c8>
 8012f70:	8018      	strh	r0, [r3, #0]
 8012f72:	2300      	movs	r3, #0
 8012f74:	6123      	str	r3, [r4, #16]
 8012f76:	4616      	mov	r6, r2
 8012f78:	e7ba      	b.n	8012ef0 <_printf_i+0x150>
 8012f7a:	680b      	ldr	r3, [r1, #0]
 8012f7c:	1d1a      	adds	r2, r3, #4
 8012f7e:	600a      	str	r2, [r1, #0]
 8012f80:	681e      	ldr	r6, [r3, #0]
 8012f82:	6862      	ldr	r2, [r4, #4]
 8012f84:	2100      	movs	r1, #0
 8012f86:	4630      	mov	r0, r6
 8012f88:	f7ed f9b2 	bl	80002f0 <memchr>
 8012f8c:	b108      	cbz	r0, 8012f92 <_printf_i+0x1f2>
 8012f8e:	1b80      	subs	r0, r0, r6
 8012f90:	6060      	str	r0, [r4, #4]
 8012f92:	6863      	ldr	r3, [r4, #4]
 8012f94:	6123      	str	r3, [r4, #16]
 8012f96:	2300      	movs	r3, #0
 8012f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f9c:	e7a8      	b.n	8012ef0 <_printf_i+0x150>
 8012f9e:	6923      	ldr	r3, [r4, #16]
 8012fa0:	4632      	mov	r2, r6
 8012fa2:	4649      	mov	r1, r9
 8012fa4:	4640      	mov	r0, r8
 8012fa6:	47d0      	blx	sl
 8012fa8:	3001      	adds	r0, #1
 8012faa:	d0ab      	beq.n	8012f04 <_printf_i+0x164>
 8012fac:	6823      	ldr	r3, [r4, #0]
 8012fae:	079b      	lsls	r3, r3, #30
 8012fb0:	d413      	bmi.n	8012fda <_printf_i+0x23a>
 8012fb2:	68e0      	ldr	r0, [r4, #12]
 8012fb4:	9b03      	ldr	r3, [sp, #12]
 8012fb6:	4298      	cmp	r0, r3
 8012fb8:	bfb8      	it	lt
 8012fba:	4618      	movlt	r0, r3
 8012fbc:	e7a4      	b.n	8012f08 <_printf_i+0x168>
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	4632      	mov	r2, r6
 8012fc2:	4649      	mov	r1, r9
 8012fc4:	4640      	mov	r0, r8
 8012fc6:	47d0      	blx	sl
 8012fc8:	3001      	adds	r0, #1
 8012fca:	d09b      	beq.n	8012f04 <_printf_i+0x164>
 8012fcc:	3501      	adds	r5, #1
 8012fce:	68e3      	ldr	r3, [r4, #12]
 8012fd0:	9903      	ldr	r1, [sp, #12]
 8012fd2:	1a5b      	subs	r3, r3, r1
 8012fd4:	42ab      	cmp	r3, r5
 8012fd6:	dcf2      	bgt.n	8012fbe <_printf_i+0x21e>
 8012fd8:	e7eb      	b.n	8012fb2 <_printf_i+0x212>
 8012fda:	2500      	movs	r5, #0
 8012fdc:	f104 0619 	add.w	r6, r4, #25
 8012fe0:	e7f5      	b.n	8012fce <_printf_i+0x22e>
 8012fe2:	bf00      	nop
 8012fe4:	08016c5e 	.word	0x08016c5e
 8012fe8:	08016c6f 	.word	0x08016c6f

08012fec <_puts_r>:
 8012fec:	b570      	push	{r4, r5, r6, lr}
 8012fee:	460e      	mov	r6, r1
 8012ff0:	4605      	mov	r5, r0
 8012ff2:	b118      	cbz	r0, 8012ffc <_puts_r+0x10>
 8012ff4:	6983      	ldr	r3, [r0, #24]
 8012ff6:	b90b      	cbnz	r3, 8012ffc <_puts_r+0x10>
 8012ff8:	f001 f856 	bl	80140a8 <__sinit>
 8012ffc:	69ab      	ldr	r3, [r5, #24]
 8012ffe:	68ac      	ldr	r4, [r5, #8]
 8013000:	b913      	cbnz	r3, 8013008 <_puts_r+0x1c>
 8013002:	4628      	mov	r0, r5
 8013004:	f001 f850 	bl	80140a8 <__sinit>
 8013008:	4b2c      	ldr	r3, [pc, #176]	; (80130bc <_puts_r+0xd0>)
 801300a:	429c      	cmp	r4, r3
 801300c:	d120      	bne.n	8013050 <_puts_r+0x64>
 801300e:	686c      	ldr	r4, [r5, #4]
 8013010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013012:	07db      	lsls	r3, r3, #31
 8013014:	d405      	bmi.n	8013022 <_puts_r+0x36>
 8013016:	89a3      	ldrh	r3, [r4, #12]
 8013018:	0598      	lsls	r0, r3, #22
 801301a:	d402      	bmi.n	8013022 <_puts_r+0x36>
 801301c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801301e:	f001 f8e6 	bl	80141ee <__retarget_lock_acquire_recursive>
 8013022:	89a3      	ldrh	r3, [r4, #12]
 8013024:	0719      	lsls	r1, r3, #28
 8013026:	d51d      	bpl.n	8013064 <_puts_r+0x78>
 8013028:	6923      	ldr	r3, [r4, #16]
 801302a:	b1db      	cbz	r3, 8013064 <_puts_r+0x78>
 801302c:	3e01      	subs	r6, #1
 801302e:	68a3      	ldr	r3, [r4, #8]
 8013030:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013034:	3b01      	subs	r3, #1
 8013036:	60a3      	str	r3, [r4, #8]
 8013038:	bb39      	cbnz	r1, 801308a <_puts_r+0x9e>
 801303a:	2b00      	cmp	r3, #0
 801303c:	da38      	bge.n	80130b0 <_puts_r+0xc4>
 801303e:	4622      	mov	r2, r4
 8013040:	210a      	movs	r1, #10
 8013042:	4628      	mov	r0, r5
 8013044:	f000 f848 	bl	80130d8 <__swbuf_r>
 8013048:	3001      	adds	r0, #1
 801304a:	d011      	beq.n	8013070 <_puts_r+0x84>
 801304c:	250a      	movs	r5, #10
 801304e:	e011      	b.n	8013074 <_puts_r+0x88>
 8013050:	4b1b      	ldr	r3, [pc, #108]	; (80130c0 <_puts_r+0xd4>)
 8013052:	429c      	cmp	r4, r3
 8013054:	d101      	bne.n	801305a <_puts_r+0x6e>
 8013056:	68ac      	ldr	r4, [r5, #8]
 8013058:	e7da      	b.n	8013010 <_puts_r+0x24>
 801305a:	4b1a      	ldr	r3, [pc, #104]	; (80130c4 <_puts_r+0xd8>)
 801305c:	429c      	cmp	r4, r3
 801305e:	bf08      	it	eq
 8013060:	68ec      	ldreq	r4, [r5, #12]
 8013062:	e7d5      	b.n	8013010 <_puts_r+0x24>
 8013064:	4621      	mov	r1, r4
 8013066:	4628      	mov	r0, r5
 8013068:	f000 f888 	bl	801317c <__swsetup_r>
 801306c:	2800      	cmp	r0, #0
 801306e:	d0dd      	beq.n	801302c <_puts_r+0x40>
 8013070:	f04f 35ff 	mov.w	r5, #4294967295
 8013074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013076:	07da      	lsls	r2, r3, #31
 8013078:	d405      	bmi.n	8013086 <_puts_r+0x9a>
 801307a:	89a3      	ldrh	r3, [r4, #12]
 801307c:	059b      	lsls	r3, r3, #22
 801307e:	d402      	bmi.n	8013086 <_puts_r+0x9a>
 8013080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013082:	f001 f8b5 	bl	80141f0 <__retarget_lock_release_recursive>
 8013086:	4628      	mov	r0, r5
 8013088:	bd70      	pop	{r4, r5, r6, pc}
 801308a:	2b00      	cmp	r3, #0
 801308c:	da04      	bge.n	8013098 <_puts_r+0xac>
 801308e:	69a2      	ldr	r2, [r4, #24]
 8013090:	429a      	cmp	r2, r3
 8013092:	dc06      	bgt.n	80130a2 <_puts_r+0xb6>
 8013094:	290a      	cmp	r1, #10
 8013096:	d004      	beq.n	80130a2 <_puts_r+0xb6>
 8013098:	6823      	ldr	r3, [r4, #0]
 801309a:	1c5a      	adds	r2, r3, #1
 801309c:	6022      	str	r2, [r4, #0]
 801309e:	7019      	strb	r1, [r3, #0]
 80130a0:	e7c5      	b.n	801302e <_puts_r+0x42>
 80130a2:	4622      	mov	r2, r4
 80130a4:	4628      	mov	r0, r5
 80130a6:	f000 f817 	bl	80130d8 <__swbuf_r>
 80130aa:	3001      	adds	r0, #1
 80130ac:	d1bf      	bne.n	801302e <_puts_r+0x42>
 80130ae:	e7df      	b.n	8013070 <_puts_r+0x84>
 80130b0:	6823      	ldr	r3, [r4, #0]
 80130b2:	250a      	movs	r5, #10
 80130b4:	1c5a      	adds	r2, r3, #1
 80130b6:	6022      	str	r2, [r4, #0]
 80130b8:	701d      	strb	r5, [r3, #0]
 80130ba:	e7db      	b.n	8013074 <_puts_r+0x88>
 80130bc:	08016d34 	.word	0x08016d34
 80130c0:	08016d54 	.word	0x08016d54
 80130c4:	08016d14 	.word	0x08016d14

080130c8 <puts>:
 80130c8:	4b02      	ldr	r3, [pc, #8]	; (80130d4 <puts+0xc>)
 80130ca:	4601      	mov	r1, r0
 80130cc:	6818      	ldr	r0, [r3, #0]
 80130ce:	f7ff bf8d 	b.w	8012fec <_puts_r>
 80130d2:	bf00      	nop
 80130d4:	24000240 	.word	0x24000240

080130d8 <__swbuf_r>:
 80130d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130da:	460e      	mov	r6, r1
 80130dc:	4614      	mov	r4, r2
 80130de:	4605      	mov	r5, r0
 80130e0:	b118      	cbz	r0, 80130ea <__swbuf_r+0x12>
 80130e2:	6983      	ldr	r3, [r0, #24]
 80130e4:	b90b      	cbnz	r3, 80130ea <__swbuf_r+0x12>
 80130e6:	f000 ffdf 	bl	80140a8 <__sinit>
 80130ea:	4b21      	ldr	r3, [pc, #132]	; (8013170 <__swbuf_r+0x98>)
 80130ec:	429c      	cmp	r4, r3
 80130ee:	d12b      	bne.n	8013148 <__swbuf_r+0x70>
 80130f0:	686c      	ldr	r4, [r5, #4]
 80130f2:	69a3      	ldr	r3, [r4, #24]
 80130f4:	60a3      	str	r3, [r4, #8]
 80130f6:	89a3      	ldrh	r3, [r4, #12]
 80130f8:	071a      	lsls	r2, r3, #28
 80130fa:	d52f      	bpl.n	801315c <__swbuf_r+0x84>
 80130fc:	6923      	ldr	r3, [r4, #16]
 80130fe:	b36b      	cbz	r3, 801315c <__swbuf_r+0x84>
 8013100:	6923      	ldr	r3, [r4, #16]
 8013102:	6820      	ldr	r0, [r4, #0]
 8013104:	1ac0      	subs	r0, r0, r3
 8013106:	6963      	ldr	r3, [r4, #20]
 8013108:	b2f6      	uxtb	r6, r6
 801310a:	4283      	cmp	r3, r0
 801310c:	4637      	mov	r7, r6
 801310e:	dc04      	bgt.n	801311a <__swbuf_r+0x42>
 8013110:	4621      	mov	r1, r4
 8013112:	4628      	mov	r0, r5
 8013114:	f000 ff34 	bl	8013f80 <_fflush_r>
 8013118:	bb30      	cbnz	r0, 8013168 <__swbuf_r+0x90>
 801311a:	68a3      	ldr	r3, [r4, #8]
 801311c:	3b01      	subs	r3, #1
 801311e:	60a3      	str	r3, [r4, #8]
 8013120:	6823      	ldr	r3, [r4, #0]
 8013122:	1c5a      	adds	r2, r3, #1
 8013124:	6022      	str	r2, [r4, #0]
 8013126:	701e      	strb	r6, [r3, #0]
 8013128:	6963      	ldr	r3, [r4, #20]
 801312a:	3001      	adds	r0, #1
 801312c:	4283      	cmp	r3, r0
 801312e:	d004      	beq.n	801313a <__swbuf_r+0x62>
 8013130:	89a3      	ldrh	r3, [r4, #12]
 8013132:	07db      	lsls	r3, r3, #31
 8013134:	d506      	bpl.n	8013144 <__swbuf_r+0x6c>
 8013136:	2e0a      	cmp	r6, #10
 8013138:	d104      	bne.n	8013144 <__swbuf_r+0x6c>
 801313a:	4621      	mov	r1, r4
 801313c:	4628      	mov	r0, r5
 801313e:	f000 ff1f 	bl	8013f80 <_fflush_r>
 8013142:	b988      	cbnz	r0, 8013168 <__swbuf_r+0x90>
 8013144:	4638      	mov	r0, r7
 8013146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013148:	4b0a      	ldr	r3, [pc, #40]	; (8013174 <__swbuf_r+0x9c>)
 801314a:	429c      	cmp	r4, r3
 801314c:	d101      	bne.n	8013152 <__swbuf_r+0x7a>
 801314e:	68ac      	ldr	r4, [r5, #8]
 8013150:	e7cf      	b.n	80130f2 <__swbuf_r+0x1a>
 8013152:	4b09      	ldr	r3, [pc, #36]	; (8013178 <__swbuf_r+0xa0>)
 8013154:	429c      	cmp	r4, r3
 8013156:	bf08      	it	eq
 8013158:	68ec      	ldreq	r4, [r5, #12]
 801315a:	e7ca      	b.n	80130f2 <__swbuf_r+0x1a>
 801315c:	4621      	mov	r1, r4
 801315e:	4628      	mov	r0, r5
 8013160:	f000 f80c 	bl	801317c <__swsetup_r>
 8013164:	2800      	cmp	r0, #0
 8013166:	d0cb      	beq.n	8013100 <__swbuf_r+0x28>
 8013168:	f04f 37ff 	mov.w	r7, #4294967295
 801316c:	e7ea      	b.n	8013144 <__swbuf_r+0x6c>
 801316e:	bf00      	nop
 8013170:	08016d34 	.word	0x08016d34
 8013174:	08016d54 	.word	0x08016d54
 8013178:	08016d14 	.word	0x08016d14

0801317c <__swsetup_r>:
 801317c:	4b32      	ldr	r3, [pc, #200]	; (8013248 <__swsetup_r+0xcc>)
 801317e:	b570      	push	{r4, r5, r6, lr}
 8013180:	681d      	ldr	r5, [r3, #0]
 8013182:	4606      	mov	r6, r0
 8013184:	460c      	mov	r4, r1
 8013186:	b125      	cbz	r5, 8013192 <__swsetup_r+0x16>
 8013188:	69ab      	ldr	r3, [r5, #24]
 801318a:	b913      	cbnz	r3, 8013192 <__swsetup_r+0x16>
 801318c:	4628      	mov	r0, r5
 801318e:	f000 ff8b 	bl	80140a8 <__sinit>
 8013192:	4b2e      	ldr	r3, [pc, #184]	; (801324c <__swsetup_r+0xd0>)
 8013194:	429c      	cmp	r4, r3
 8013196:	d10f      	bne.n	80131b8 <__swsetup_r+0x3c>
 8013198:	686c      	ldr	r4, [r5, #4]
 801319a:	89a3      	ldrh	r3, [r4, #12]
 801319c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131a0:	0719      	lsls	r1, r3, #28
 80131a2:	d42c      	bmi.n	80131fe <__swsetup_r+0x82>
 80131a4:	06dd      	lsls	r5, r3, #27
 80131a6:	d411      	bmi.n	80131cc <__swsetup_r+0x50>
 80131a8:	2309      	movs	r3, #9
 80131aa:	6033      	str	r3, [r6, #0]
 80131ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80131b0:	81a3      	strh	r3, [r4, #12]
 80131b2:	f04f 30ff 	mov.w	r0, #4294967295
 80131b6:	e03e      	b.n	8013236 <__swsetup_r+0xba>
 80131b8:	4b25      	ldr	r3, [pc, #148]	; (8013250 <__swsetup_r+0xd4>)
 80131ba:	429c      	cmp	r4, r3
 80131bc:	d101      	bne.n	80131c2 <__swsetup_r+0x46>
 80131be:	68ac      	ldr	r4, [r5, #8]
 80131c0:	e7eb      	b.n	801319a <__swsetup_r+0x1e>
 80131c2:	4b24      	ldr	r3, [pc, #144]	; (8013254 <__swsetup_r+0xd8>)
 80131c4:	429c      	cmp	r4, r3
 80131c6:	bf08      	it	eq
 80131c8:	68ec      	ldreq	r4, [r5, #12]
 80131ca:	e7e6      	b.n	801319a <__swsetup_r+0x1e>
 80131cc:	0758      	lsls	r0, r3, #29
 80131ce:	d512      	bpl.n	80131f6 <__swsetup_r+0x7a>
 80131d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131d2:	b141      	cbz	r1, 80131e6 <__swsetup_r+0x6a>
 80131d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131d8:	4299      	cmp	r1, r3
 80131da:	d002      	beq.n	80131e2 <__swsetup_r+0x66>
 80131dc:	4630      	mov	r0, r6
 80131de:	f001 fc11 	bl	8014a04 <_free_r>
 80131e2:	2300      	movs	r3, #0
 80131e4:	6363      	str	r3, [r4, #52]	; 0x34
 80131e6:	89a3      	ldrh	r3, [r4, #12]
 80131e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80131ec:	81a3      	strh	r3, [r4, #12]
 80131ee:	2300      	movs	r3, #0
 80131f0:	6063      	str	r3, [r4, #4]
 80131f2:	6923      	ldr	r3, [r4, #16]
 80131f4:	6023      	str	r3, [r4, #0]
 80131f6:	89a3      	ldrh	r3, [r4, #12]
 80131f8:	f043 0308 	orr.w	r3, r3, #8
 80131fc:	81a3      	strh	r3, [r4, #12]
 80131fe:	6923      	ldr	r3, [r4, #16]
 8013200:	b94b      	cbnz	r3, 8013216 <__swsetup_r+0x9a>
 8013202:	89a3      	ldrh	r3, [r4, #12]
 8013204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801320c:	d003      	beq.n	8013216 <__swsetup_r+0x9a>
 801320e:	4621      	mov	r1, r4
 8013210:	4630      	mov	r0, r6
 8013212:	f001 f813 	bl	801423c <__smakebuf_r>
 8013216:	89a0      	ldrh	r0, [r4, #12]
 8013218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801321c:	f010 0301 	ands.w	r3, r0, #1
 8013220:	d00a      	beq.n	8013238 <__swsetup_r+0xbc>
 8013222:	2300      	movs	r3, #0
 8013224:	60a3      	str	r3, [r4, #8]
 8013226:	6963      	ldr	r3, [r4, #20]
 8013228:	425b      	negs	r3, r3
 801322a:	61a3      	str	r3, [r4, #24]
 801322c:	6923      	ldr	r3, [r4, #16]
 801322e:	b943      	cbnz	r3, 8013242 <__swsetup_r+0xc6>
 8013230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013234:	d1ba      	bne.n	80131ac <__swsetup_r+0x30>
 8013236:	bd70      	pop	{r4, r5, r6, pc}
 8013238:	0781      	lsls	r1, r0, #30
 801323a:	bf58      	it	pl
 801323c:	6963      	ldrpl	r3, [r4, #20]
 801323e:	60a3      	str	r3, [r4, #8]
 8013240:	e7f4      	b.n	801322c <__swsetup_r+0xb0>
 8013242:	2000      	movs	r0, #0
 8013244:	e7f7      	b.n	8013236 <__swsetup_r+0xba>
 8013246:	bf00      	nop
 8013248:	24000240 	.word	0x24000240
 801324c:	08016d34 	.word	0x08016d34
 8013250:	08016d54 	.word	0x08016d54
 8013254:	08016d14 	.word	0x08016d14

08013258 <quorem>:
 8013258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801325c:	6903      	ldr	r3, [r0, #16]
 801325e:	690c      	ldr	r4, [r1, #16]
 8013260:	42a3      	cmp	r3, r4
 8013262:	4607      	mov	r7, r0
 8013264:	f2c0 8081 	blt.w	801336a <quorem+0x112>
 8013268:	3c01      	subs	r4, #1
 801326a:	f101 0814 	add.w	r8, r1, #20
 801326e:	f100 0514 	add.w	r5, r0, #20
 8013272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013276:	9301      	str	r3, [sp, #4]
 8013278:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801327c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013280:	3301      	adds	r3, #1
 8013282:	429a      	cmp	r2, r3
 8013284:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013288:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801328c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013290:	d331      	bcc.n	80132f6 <quorem+0x9e>
 8013292:	f04f 0e00 	mov.w	lr, #0
 8013296:	4640      	mov	r0, r8
 8013298:	46ac      	mov	ip, r5
 801329a:	46f2      	mov	sl, lr
 801329c:	f850 2b04 	ldr.w	r2, [r0], #4
 80132a0:	b293      	uxth	r3, r2
 80132a2:	fb06 e303 	mla	r3, r6, r3, lr
 80132a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	ebaa 0303 	sub.w	r3, sl, r3
 80132b0:	0c12      	lsrs	r2, r2, #16
 80132b2:	f8dc a000 	ldr.w	sl, [ip]
 80132b6:	fb06 e202 	mla	r2, r6, r2, lr
 80132ba:	fa13 f38a 	uxtah	r3, r3, sl
 80132be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80132c2:	fa1f fa82 	uxth.w	sl, r2
 80132c6:	f8dc 2000 	ldr.w	r2, [ip]
 80132ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80132ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80132d2:	b29b      	uxth	r3, r3
 80132d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80132d8:	4581      	cmp	r9, r0
 80132da:	f84c 3b04 	str.w	r3, [ip], #4
 80132de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80132e2:	d2db      	bcs.n	801329c <quorem+0x44>
 80132e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80132e8:	b92b      	cbnz	r3, 80132f6 <quorem+0x9e>
 80132ea:	9b01      	ldr	r3, [sp, #4]
 80132ec:	3b04      	subs	r3, #4
 80132ee:	429d      	cmp	r5, r3
 80132f0:	461a      	mov	r2, r3
 80132f2:	d32e      	bcc.n	8013352 <quorem+0xfa>
 80132f4:	613c      	str	r4, [r7, #16]
 80132f6:	4638      	mov	r0, r7
 80132f8:	f001 fa74 	bl	80147e4 <__mcmp>
 80132fc:	2800      	cmp	r0, #0
 80132fe:	db24      	blt.n	801334a <quorem+0xf2>
 8013300:	3601      	adds	r6, #1
 8013302:	4628      	mov	r0, r5
 8013304:	f04f 0c00 	mov.w	ip, #0
 8013308:	f858 2b04 	ldr.w	r2, [r8], #4
 801330c:	f8d0 e000 	ldr.w	lr, [r0]
 8013310:	b293      	uxth	r3, r2
 8013312:	ebac 0303 	sub.w	r3, ip, r3
 8013316:	0c12      	lsrs	r2, r2, #16
 8013318:	fa13 f38e 	uxtah	r3, r3, lr
 801331c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013324:	b29b      	uxth	r3, r3
 8013326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801332a:	45c1      	cmp	r9, r8
 801332c:	f840 3b04 	str.w	r3, [r0], #4
 8013330:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013334:	d2e8      	bcs.n	8013308 <quorem+0xb0>
 8013336:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801333a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801333e:	b922      	cbnz	r2, 801334a <quorem+0xf2>
 8013340:	3b04      	subs	r3, #4
 8013342:	429d      	cmp	r5, r3
 8013344:	461a      	mov	r2, r3
 8013346:	d30a      	bcc.n	801335e <quorem+0x106>
 8013348:	613c      	str	r4, [r7, #16]
 801334a:	4630      	mov	r0, r6
 801334c:	b003      	add	sp, #12
 801334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013352:	6812      	ldr	r2, [r2, #0]
 8013354:	3b04      	subs	r3, #4
 8013356:	2a00      	cmp	r2, #0
 8013358:	d1cc      	bne.n	80132f4 <quorem+0x9c>
 801335a:	3c01      	subs	r4, #1
 801335c:	e7c7      	b.n	80132ee <quorem+0x96>
 801335e:	6812      	ldr	r2, [r2, #0]
 8013360:	3b04      	subs	r3, #4
 8013362:	2a00      	cmp	r2, #0
 8013364:	d1f0      	bne.n	8013348 <quorem+0xf0>
 8013366:	3c01      	subs	r4, #1
 8013368:	e7eb      	b.n	8013342 <quorem+0xea>
 801336a:	2000      	movs	r0, #0
 801336c:	e7ee      	b.n	801334c <quorem+0xf4>
	...

08013370 <_dtoa_r>:
 8013370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013374:	ec59 8b10 	vmov	r8, r9, d0
 8013378:	b095      	sub	sp, #84	; 0x54
 801337a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801337c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801337e:	9107      	str	r1, [sp, #28]
 8013380:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013384:	4606      	mov	r6, r0
 8013386:	9209      	str	r2, [sp, #36]	; 0x24
 8013388:	9310      	str	r3, [sp, #64]	; 0x40
 801338a:	b975      	cbnz	r5, 80133aa <_dtoa_r+0x3a>
 801338c:	2010      	movs	r0, #16
 801338e:	f000 ff95 	bl	80142bc <malloc>
 8013392:	4602      	mov	r2, r0
 8013394:	6270      	str	r0, [r6, #36]	; 0x24
 8013396:	b920      	cbnz	r0, 80133a2 <_dtoa_r+0x32>
 8013398:	4bab      	ldr	r3, [pc, #684]	; (8013648 <_dtoa_r+0x2d8>)
 801339a:	21ea      	movs	r1, #234	; 0xea
 801339c:	48ab      	ldr	r0, [pc, #684]	; (801364c <_dtoa_r+0x2dc>)
 801339e:	f001 fc41 	bl	8014c24 <__assert_func>
 80133a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80133a6:	6005      	str	r5, [r0, #0]
 80133a8:	60c5      	str	r5, [r0, #12]
 80133aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80133ac:	6819      	ldr	r1, [r3, #0]
 80133ae:	b151      	cbz	r1, 80133c6 <_dtoa_r+0x56>
 80133b0:	685a      	ldr	r2, [r3, #4]
 80133b2:	604a      	str	r2, [r1, #4]
 80133b4:	2301      	movs	r3, #1
 80133b6:	4093      	lsls	r3, r2
 80133b8:	608b      	str	r3, [r1, #8]
 80133ba:	4630      	mov	r0, r6
 80133bc:	f000 ffd4 	bl	8014368 <_Bfree>
 80133c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80133c2:	2200      	movs	r2, #0
 80133c4:	601a      	str	r2, [r3, #0]
 80133c6:	f1b9 0300 	subs.w	r3, r9, #0
 80133ca:	bfbb      	ittet	lt
 80133cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80133d0:	9303      	strlt	r3, [sp, #12]
 80133d2:	2300      	movge	r3, #0
 80133d4:	2201      	movlt	r2, #1
 80133d6:	bfac      	ite	ge
 80133d8:	6023      	strge	r3, [r4, #0]
 80133da:	6022      	strlt	r2, [r4, #0]
 80133dc:	4b9c      	ldr	r3, [pc, #624]	; (8013650 <_dtoa_r+0x2e0>)
 80133de:	9c03      	ldr	r4, [sp, #12]
 80133e0:	43a3      	bics	r3, r4
 80133e2:	d11a      	bne.n	801341a <_dtoa_r+0xaa>
 80133e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80133e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80133ea:	6013      	str	r3, [r2, #0]
 80133ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80133f0:	ea53 0308 	orrs.w	r3, r3, r8
 80133f4:	f000 8512 	beq.w	8013e1c <_dtoa_r+0xaac>
 80133f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80133fa:	b953      	cbnz	r3, 8013412 <_dtoa_r+0xa2>
 80133fc:	4b95      	ldr	r3, [pc, #596]	; (8013654 <_dtoa_r+0x2e4>)
 80133fe:	e01f      	b.n	8013440 <_dtoa_r+0xd0>
 8013400:	4b95      	ldr	r3, [pc, #596]	; (8013658 <_dtoa_r+0x2e8>)
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	3308      	adds	r3, #8
 8013406:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013408:	6013      	str	r3, [r2, #0]
 801340a:	9800      	ldr	r0, [sp, #0]
 801340c:	b015      	add	sp, #84	; 0x54
 801340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013412:	4b90      	ldr	r3, [pc, #576]	; (8013654 <_dtoa_r+0x2e4>)
 8013414:	9300      	str	r3, [sp, #0]
 8013416:	3303      	adds	r3, #3
 8013418:	e7f5      	b.n	8013406 <_dtoa_r+0x96>
 801341a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801341e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013426:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801342a:	d10b      	bne.n	8013444 <_dtoa_r+0xd4>
 801342c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801342e:	2301      	movs	r3, #1
 8013430:	6013      	str	r3, [r2, #0]
 8013432:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013434:	2b00      	cmp	r3, #0
 8013436:	f000 84ee 	beq.w	8013e16 <_dtoa_r+0xaa6>
 801343a:	4888      	ldr	r0, [pc, #544]	; (801365c <_dtoa_r+0x2ec>)
 801343c:	6018      	str	r0, [r3, #0]
 801343e:	1e43      	subs	r3, r0, #1
 8013440:	9300      	str	r3, [sp, #0]
 8013442:	e7e2      	b.n	801340a <_dtoa_r+0x9a>
 8013444:	a913      	add	r1, sp, #76	; 0x4c
 8013446:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801344a:	aa12      	add	r2, sp, #72	; 0x48
 801344c:	4630      	mov	r0, r6
 801344e:	f001 fa6d 	bl	801492c <__d2b>
 8013452:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8013456:	4605      	mov	r5, r0
 8013458:	9812      	ldr	r0, [sp, #72]	; 0x48
 801345a:	2900      	cmp	r1, #0
 801345c:	d047      	beq.n	80134ee <_dtoa_r+0x17e>
 801345e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013460:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013464:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013468:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801346c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013470:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013474:	2400      	movs	r4, #0
 8013476:	ec43 2b16 	vmov	d6, r2, r3
 801347a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801347e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8013630 <_dtoa_r+0x2c0>
 8013482:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013486:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8013638 <_dtoa_r+0x2c8>
 801348a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801348e:	eeb0 7b46 	vmov.f64	d7, d6
 8013492:	ee06 1a90 	vmov	s13, r1
 8013496:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801349a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8013640 <_dtoa_r+0x2d0>
 801349e:	eea5 7b06 	vfma.f64	d7, d5, d6
 80134a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80134a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80134aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ae:	ee16 ba90 	vmov	fp, s13
 80134b2:	9411      	str	r4, [sp, #68]	; 0x44
 80134b4:	d508      	bpl.n	80134c8 <_dtoa_r+0x158>
 80134b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80134ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80134be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c2:	bf18      	it	ne
 80134c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80134c8:	f1bb 0f16 	cmp.w	fp, #22
 80134cc:	d832      	bhi.n	8013534 <_dtoa_r+0x1c4>
 80134ce:	4b64      	ldr	r3, [pc, #400]	; (8013660 <_dtoa_r+0x2f0>)
 80134d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80134d4:	ed93 7b00 	vldr	d7, [r3]
 80134d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80134dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80134e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134e4:	d501      	bpl.n	80134ea <_dtoa_r+0x17a>
 80134e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80134ea:	2300      	movs	r3, #0
 80134ec:	e023      	b.n	8013536 <_dtoa_r+0x1c6>
 80134ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80134f0:	4401      	add	r1, r0
 80134f2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80134f6:	2b20      	cmp	r3, #32
 80134f8:	bfc3      	ittte	gt
 80134fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80134fe:	fa04 f303 	lslgt.w	r3, r4, r3
 8013502:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8013506:	f1c3 0320 	rsble	r3, r3, #32
 801350a:	bfc6      	itte	gt
 801350c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8013510:	ea43 0308 	orrgt.w	r3, r3, r8
 8013514:	fa08 f303 	lslle.w	r3, r8, r3
 8013518:	ee07 3a90 	vmov	s15, r3
 801351c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013520:	3901      	subs	r1, #1
 8013522:	ed8d 7b00 	vstr	d7, [sp]
 8013526:	9c01      	ldr	r4, [sp, #4]
 8013528:	e9dd 2300 	ldrd	r2, r3, [sp]
 801352c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8013530:	2401      	movs	r4, #1
 8013532:	e7a0      	b.n	8013476 <_dtoa_r+0x106>
 8013534:	2301      	movs	r3, #1
 8013536:	930f      	str	r3, [sp, #60]	; 0x3c
 8013538:	1a43      	subs	r3, r0, r1
 801353a:	1e5a      	subs	r2, r3, #1
 801353c:	bf45      	ittet	mi
 801353e:	f1c3 0301 	rsbmi	r3, r3, #1
 8013542:	9305      	strmi	r3, [sp, #20]
 8013544:	2300      	movpl	r3, #0
 8013546:	2300      	movmi	r3, #0
 8013548:	9206      	str	r2, [sp, #24]
 801354a:	bf54      	ite	pl
 801354c:	9305      	strpl	r3, [sp, #20]
 801354e:	9306      	strmi	r3, [sp, #24]
 8013550:	f1bb 0f00 	cmp.w	fp, #0
 8013554:	db18      	blt.n	8013588 <_dtoa_r+0x218>
 8013556:	9b06      	ldr	r3, [sp, #24]
 8013558:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801355c:	445b      	add	r3, fp
 801355e:	9306      	str	r3, [sp, #24]
 8013560:	2300      	movs	r3, #0
 8013562:	9a07      	ldr	r2, [sp, #28]
 8013564:	2a09      	cmp	r2, #9
 8013566:	d849      	bhi.n	80135fc <_dtoa_r+0x28c>
 8013568:	2a05      	cmp	r2, #5
 801356a:	bfc4      	itt	gt
 801356c:	3a04      	subgt	r2, #4
 801356e:	9207      	strgt	r2, [sp, #28]
 8013570:	9a07      	ldr	r2, [sp, #28]
 8013572:	f1a2 0202 	sub.w	r2, r2, #2
 8013576:	bfcc      	ite	gt
 8013578:	2400      	movgt	r4, #0
 801357a:	2401      	movle	r4, #1
 801357c:	2a03      	cmp	r2, #3
 801357e:	d848      	bhi.n	8013612 <_dtoa_r+0x2a2>
 8013580:	e8df f002 	tbb	[pc, r2]
 8013584:	3a2c2e0b 	.word	0x3a2c2e0b
 8013588:	9b05      	ldr	r3, [sp, #20]
 801358a:	2200      	movs	r2, #0
 801358c:	eba3 030b 	sub.w	r3, r3, fp
 8013590:	9305      	str	r3, [sp, #20]
 8013592:	920e      	str	r2, [sp, #56]	; 0x38
 8013594:	f1cb 0300 	rsb	r3, fp, #0
 8013598:	e7e3      	b.n	8013562 <_dtoa_r+0x1f2>
 801359a:	2200      	movs	r2, #0
 801359c:	9208      	str	r2, [sp, #32]
 801359e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135a0:	2a00      	cmp	r2, #0
 80135a2:	dc39      	bgt.n	8013618 <_dtoa_r+0x2a8>
 80135a4:	f04f 0a01 	mov.w	sl, #1
 80135a8:	46d1      	mov	r9, sl
 80135aa:	4652      	mov	r2, sl
 80135ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80135b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80135b2:	2100      	movs	r1, #0
 80135b4:	6079      	str	r1, [r7, #4]
 80135b6:	2004      	movs	r0, #4
 80135b8:	f100 0c14 	add.w	ip, r0, #20
 80135bc:	4594      	cmp	ip, r2
 80135be:	6879      	ldr	r1, [r7, #4]
 80135c0:	d92f      	bls.n	8013622 <_dtoa_r+0x2b2>
 80135c2:	4630      	mov	r0, r6
 80135c4:	930c      	str	r3, [sp, #48]	; 0x30
 80135c6:	f000 fe8f 	bl	80142e8 <_Balloc>
 80135ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135cc:	9000      	str	r0, [sp, #0]
 80135ce:	4602      	mov	r2, r0
 80135d0:	2800      	cmp	r0, #0
 80135d2:	d149      	bne.n	8013668 <_dtoa_r+0x2f8>
 80135d4:	4b23      	ldr	r3, [pc, #140]	; (8013664 <_dtoa_r+0x2f4>)
 80135d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80135da:	e6df      	b.n	801339c <_dtoa_r+0x2c>
 80135dc:	2201      	movs	r2, #1
 80135de:	e7dd      	b.n	801359c <_dtoa_r+0x22c>
 80135e0:	2200      	movs	r2, #0
 80135e2:	9208      	str	r2, [sp, #32]
 80135e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135e6:	eb0b 0a02 	add.w	sl, fp, r2
 80135ea:	f10a 0901 	add.w	r9, sl, #1
 80135ee:	464a      	mov	r2, r9
 80135f0:	2a01      	cmp	r2, #1
 80135f2:	bfb8      	it	lt
 80135f4:	2201      	movlt	r2, #1
 80135f6:	e7db      	b.n	80135b0 <_dtoa_r+0x240>
 80135f8:	2201      	movs	r2, #1
 80135fa:	e7f2      	b.n	80135e2 <_dtoa_r+0x272>
 80135fc:	2401      	movs	r4, #1
 80135fe:	2200      	movs	r2, #0
 8013600:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013604:	f04f 3aff 	mov.w	sl, #4294967295
 8013608:	2100      	movs	r1, #0
 801360a:	46d1      	mov	r9, sl
 801360c:	2212      	movs	r2, #18
 801360e:	9109      	str	r1, [sp, #36]	; 0x24
 8013610:	e7ce      	b.n	80135b0 <_dtoa_r+0x240>
 8013612:	2201      	movs	r2, #1
 8013614:	9208      	str	r2, [sp, #32]
 8013616:	e7f5      	b.n	8013604 <_dtoa_r+0x294>
 8013618:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801361c:	46d1      	mov	r9, sl
 801361e:	4652      	mov	r2, sl
 8013620:	e7c6      	b.n	80135b0 <_dtoa_r+0x240>
 8013622:	3101      	adds	r1, #1
 8013624:	6079      	str	r1, [r7, #4]
 8013626:	0040      	lsls	r0, r0, #1
 8013628:	e7c6      	b.n	80135b8 <_dtoa_r+0x248>
 801362a:	bf00      	nop
 801362c:	f3af 8000 	nop.w
 8013630:	636f4361 	.word	0x636f4361
 8013634:	3fd287a7 	.word	0x3fd287a7
 8013638:	8b60c8b3 	.word	0x8b60c8b3
 801363c:	3fc68a28 	.word	0x3fc68a28
 8013640:	509f79fb 	.word	0x509f79fb
 8013644:	3fd34413 	.word	0x3fd34413
 8013648:	08016c8d 	.word	0x08016c8d
 801364c:	08016ca4 	.word	0x08016ca4
 8013650:	7ff00000 	.word	0x7ff00000
 8013654:	08016c89 	.word	0x08016c89
 8013658:	08016c80 	.word	0x08016c80
 801365c:	08016c5d 	.word	0x08016c5d
 8013660:	08016e00 	.word	0x08016e00
 8013664:	08016d03 	.word	0x08016d03
 8013668:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801366a:	9900      	ldr	r1, [sp, #0]
 801366c:	6011      	str	r1, [r2, #0]
 801366e:	f1b9 0f0e 	cmp.w	r9, #14
 8013672:	d872      	bhi.n	801375a <_dtoa_r+0x3ea>
 8013674:	2c00      	cmp	r4, #0
 8013676:	d070      	beq.n	801375a <_dtoa_r+0x3ea>
 8013678:	f1bb 0f00 	cmp.w	fp, #0
 801367c:	f340 80a6 	ble.w	80137cc <_dtoa_r+0x45c>
 8013680:	49ca      	ldr	r1, [pc, #808]	; (80139ac <_dtoa_r+0x63c>)
 8013682:	f00b 020f 	and.w	r2, fp, #15
 8013686:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801368a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801368e:	ed92 7b00 	vldr	d7, [r2]
 8013692:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013696:	f000 808d 	beq.w	80137b4 <_dtoa_r+0x444>
 801369a:	4ac5      	ldr	r2, [pc, #788]	; (80139b0 <_dtoa_r+0x640>)
 801369c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80136a0:	ed92 6b08 	vldr	d6, [r2, #32]
 80136a4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80136a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80136ac:	f001 010f 	and.w	r1, r1, #15
 80136b0:	2203      	movs	r2, #3
 80136b2:	48bf      	ldr	r0, [pc, #764]	; (80139b0 <_dtoa_r+0x640>)
 80136b4:	2900      	cmp	r1, #0
 80136b6:	d17f      	bne.n	80137b8 <_dtoa_r+0x448>
 80136b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80136bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80136c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80136c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80136c6:	2900      	cmp	r1, #0
 80136c8:	f000 80b2 	beq.w	8013830 <_dtoa_r+0x4c0>
 80136cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80136d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80136d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80136d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136dc:	f140 80a8 	bpl.w	8013830 <_dtoa_r+0x4c0>
 80136e0:	f1b9 0f00 	cmp.w	r9, #0
 80136e4:	f000 80a4 	beq.w	8013830 <_dtoa_r+0x4c0>
 80136e8:	f1ba 0f00 	cmp.w	sl, #0
 80136ec:	dd31      	ble.n	8013752 <_dtoa_r+0x3e2>
 80136ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80136f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80136f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80136fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 80136fe:	3201      	adds	r2, #1
 8013700:	4650      	mov	r0, sl
 8013702:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013706:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801370a:	ee07 2a90 	vmov	s15, r2
 801370e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013712:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013716:	ed8d 5b02 	vstr	d5, [sp, #8]
 801371a:	9c03      	ldr	r4, [sp, #12]
 801371c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013720:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013724:	2800      	cmp	r0, #0
 8013726:	f040 8086 	bne.w	8013836 <_dtoa_r+0x4c6>
 801372a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801372e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013732:	ec42 1b17 	vmov	d7, r1, r2
 8013736:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801373a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801373e:	f300 8272 	bgt.w	8013c26 <_dtoa_r+0x8b6>
 8013742:	eeb1 7b47 	vneg.f64	d7, d7
 8013746:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801374e:	f100 8267 	bmi.w	8013c20 <_dtoa_r+0x8b0>
 8013752:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8013756:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801375a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801375c:	2a00      	cmp	r2, #0
 801375e:	f2c0 8129 	blt.w	80139b4 <_dtoa_r+0x644>
 8013762:	f1bb 0f0e 	cmp.w	fp, #14
 8013766:	f300 8125 	bgt.w	80139b4 <_dtoa_r+0x644>
 801376a:	4b90      	ldr	r3, [pc, #576]	; (80139ac <_dtoa_r+0x63c>)
 801376c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013770:	ed93 6b00 	vldr	d6, [r3]
 8013774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013776:	2b00      	cmp	r3, #0
 8013778:	f280 80c3 	bge.w	8013902 <_dtoa_r+0x592>
 801377c:	f1b9 0f00 	cmp.w	r9, #0
 8013780:	f300 80bf 	bgt.w	8013902 <_dtoa_r+0x592>
 8013784:	f040 824c 	bne.w	8013c20 <_dtoa_r+0x8b0>
 8013788:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801378c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013790:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013794:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801379c:	464c      	mov	r4, r9
 801379e:	464f      	mov	r7, r9
 80137a0:	f280 8222 	bge.w	8013be8 <_dtoa_r+0x878>
 80137a4:	f8dd 8000 	ldr.w	r8, [sp]
 80137a8:	2331      	movs	r3, #49	; 0x31
 80137aa:	f808 3b01 	strb.w	r3, [r8], #1
 80137ae:	f10b 0b01 	add.w	fp, fp, #1
 80137b2:	e21e      	b.n	8013bf2 <_dtoa_r+0x882>
 80137b4:	2202      	movs	r2, #2
 80137b6:	e77c      	b.n	80136b2 <_dtoa_r+0x342>
 80137b8:	07cc      	lsls	r4, r1, #31
 80137ba:	d504      	bpl.n	80137c6 <_dtoa_r+0x456>
 80137bc:	ed90 6b00 	vldr	d6, [r0]
 80137c0:	3201      	adds	r2, #1
 80137c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80137c6:	1049      	asrs	r1, r1, #1
 80137c8:	3008      	adds	r0, #8
 80137ca:	e773      	b.n	80136b4 <_dtoa_r+0x344>
 80137cc:	d02e      	beq.n	801382c <_dtoa_r+0x4bc>
 80137ce:	f1cb 0100 	rsb	r1, fp, #0
 80137d2:	4a76      	ldr	r2, [pc, #472]	; (80139ac <_dtoa_r+0x63c>)
 80137d4:	f001 000f 	and.w	r0, r1, #15
 80137d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80137dc:	ed92 7b00 	vldr	d7, [r2]
 80137e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80137e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80137e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80137ec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80137f0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80137f4:	486e      	ldr	r0, [pc, #440]	; (80139b0 <_dtoa_r+0x640>)
 80137f6:	1109      	asrs	r1, r1, #4
 80137f8:	2400      	movs	r4, #0
 80137fa:	2202      	movs	r2, #2
 80137fc:	b939      	cbnz	r1, 801380e <_dtoa_r+0x49e>
 80137fe:	2c00      	cmp	r4, #0
 8013800:	f43f af60 	beq.w	80136c4 <_dtoa_r+0x354>
 8013804:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801380c:	e75a      	b.n	80136c4 <_dtoa_r+0x354>
 801380e:	07cf      	lsls	r7, r1, #31
 8013810:	d509      	bpl.n	8013826 <_dtoa_r+0x4b6>
 8013812:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8013816:	ed90 7b00 	vldr	d7, [r0]
 801381a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801381e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013822:	3201      	adds	r2, #1
 8013824:	2401      	movs	r4, #1
 8013826:	1049      	asrs	r1, r1, #1
 8013828:	3008      	adds	r0, #8
 801382a:	e7e7      	b.n	80137fc <_dtoa_r+0x48c>
 801382c:	2202      	movs	r2, #2
 801382e:	e749      	b.n	80136c4 <_dtoa_r+0x354>
 8013830:	465f      	mov	r7, fp
 8013832:	4648      	mov	r0, r9
 8013834:	e765      	b.n	8013702 <_dtoa_r+0x392>
 8013836:	ec42 1b17 	vmov	d7, r1, r2
 801383a:	4a5c      	ldr	r2, [pc, #368]	; (80139ac <_dtoa_r+0x63c>)
 801383c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013840:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013844:	9a00      	ldr	r2, [sp, #0]
 8013846:	1814      	adds	r4, r2, r0
 8013848:	9a08      	ldr	r2, [sp, #32]
 801384a:	b352      	cbz	r2, 80138a2 <_dtoa_r+0x532>
 801384c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013850:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013854:	f8dd 8000 	ldr.w	r8, [sp]
 8013858:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801385c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013860:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013864:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013868:	ee14 2a90 	vmov	r2, s9
 801386c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013870:	3230      	adds	r2, #48	; 0x30
 8013872:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801387e:	f808 2b01 	strb.w	r2, [r8], #1
 8013882:	d439      	bmi.n	80138f8 <_dtoa_r+0x588>
 8013884:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013888:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013890:	d472      	bmi.n	8013978 <_dtoa_r+0x608>
 8013892:	45a0      	cmp	r8, r4
 8013894:	f43f af5d 	beq.w	8013752 <_dtoa_r+0x3e2>
 8013898:	ee27 7b03 	vmul.f64	d7, d7, d3
 801389c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80138a0:	e7e0      	b.n	8013864 <_dtoa_r+0x4f4>
 80138a2:	f8dd 8000 	ldr.w	r8, [sp]
 80138a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80138aa:	4621      	mov	r1, r4
 80138ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80138b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80138b4:	ee14 2a90 	vmov	r2, s9
 80138b8:	3230      	adds	r2, #48	; 0x30
 80138ba:	f808 2b01 	strb.w	r2, [r8], #1
 80138be:	45a0      	cmp	r8, r4
 80138c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80138c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80138c8:	d118      	bne.n	80138fc <_dtoa_r+0x58c>
 80138ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80138ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80138d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80138d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138da:	dc4d      	bgt.n	8013978 <_dtoa_r+0x608>
 80138dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80138e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80138e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e8:	f57f af33 	bpl.w	8013752 <_dtoa_r+0x3e2>
 80138ec:	4688      	mov	r8, r1
 80138ee:	3901      	subs	r1, #1
 80138f0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80138f4:	2b30      	cmp	r3, #48	; 0x30
 80138f6:	d0f9      	beq.n	80138ec <_dtoa_r+0x57c>
 80138f8:	46bb      	mov	fp, r7
 80138fa:	e02a      	b.n	8013952 <_dtoa_r+0x5e2>
 80138fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013900:	e7d6      	b.n	80138b0 <_dtoa_r+0x540>
 8013902:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013906:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801390a:	f8dd 8000 	ldr.w	r8, [sp]
 801390e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013912:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013916:	ee15 3a10 	vmov	r3, s10
 801391a:	3330      	adds	r3, #48	; 0x30
 801391c:	f808 3b01 	strb.w	r3, [r8], #1
 8013920:	9b00      	ldr	r3, [sp, #0]
 8013922:	eba8 0303 	sub.w	r3, r8, r3
 8013926:	4599      	cmp	r9, r3
 8013928:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801392c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013930:	d133      	bne.n	801399a <_dtoa_r+0x62a>
 8013932:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013936:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801393a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801393e:	dc1a      	bgt.n	8013976 <_dtoa_r+0x606>
 8013940:	eeb4 7b46 	vcmp.f64	d7, d6
 8013944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013948:	d103      	bne.n	8013952 <_dtoa_r+0x5e2>
 801394a:	ee15 3a10 	vmov	r3, s10
 801394e:	07d9      	lsls	r1, r3, #31
 8013950:	d411      	bmi.n	8013976 <_dtoa_r+0x606>
 8013952:	4629      	mov	r1, r5
 8013954:	4630      	mov	r0, r6
 8013956:	f000 fd07 	bl	8014368 <_Bfree>
 801395a:	2300      	movs	r3, #0
 801395c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801395e:	f888 3000 	strb.w	r3, [r8]
 8013962:	f10b 0301 	add.w	r3, fp, #1
 8013966:	6013      	str	r3, [r2, #0]
 8013968:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801396a:	2b00      	cmp	r3, #0
 801396c:	f43f ad4d 	beq.w	801340a <_dtoa_r+0x9a>
 8013970:	f8c3 8000 	str.w	r8, [r3]
 8013974:	e549      	b.n	801340a <_dtoa_r+0x9a>
 8013976:	465f      	mov	r7, fp
 8013978:	4643      	mov	r3, r8
 801397a:	4698      	mov	r8, r3
 801397c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013980:	2a39      	cmp	r2, #57	; 0x39
 8013982:	d106      	bne.n	8013992 <_dtoa_r+0x622>
 8013984:	9a00      	ldr	r2, [sp, #0]
 8013986:	429a      	cmp	r2, r3
 8013988:	d1f7      	bne.n	801397a <_dtoa_r+0x60a>
 801398a:	9900      	ldr	r1, [sp, #0]
 801398c:	2230      	movs	r2, #48	; 0x30
 801398e:	3701      	adds	r7, #1
 8013990:	700a      	strb	r2, [r1, #0]
 8013992:	781a      	ldrb	r2, [r3, #0]
 8013994:	3201      	adds	r2, #1
 8013996:	701a      	strb	r2, [r3, #0]
 8013998:	e7ae      	b.n	80138f8 <_dtoa_r+0x588>
 801399a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801399e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80139a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a6:	d1b2      	bne.n	801390e <_dtoa_r+0x59e>
 80139a8:	e7d3      	b.n	8013952 <_dtoa_r+0x5e2>
 80139aa:	bf00      	nop
 80139ac:	08016e00 	.word	0x08016e00
 80139b0:	08016dd8 	.word	0x08016dd8
 80139b4:	9908      	ldr	r1, [sp, #32]
 80139b6:	2900      	cmp	r1, #0
 80139b8:	f000 80d1 	beq.w	8013b5e <_dtoa_r+0x7ee>
 80139bc:	9907      	ldr	r1, [sp, #28]
 80139be:	2901      	cmp	r1, #1
 80139c0:	f300 80b4 	bgt.w	8013b2c <_dtoa_r+0x7bc>
 80139c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80139c6:	2900      	cmp	r1, #0
 80139c8:	f000 80ac 	beq.w	8013b24 <_dtoa_r+0x7b4>
 80139cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80139d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80139d4:	461c      	mov	r4, r3
 80139d6:	930a      	str	r3, [sp, #40]	; 0x28
 80139d8:	9b05      	ldr	r3, [sp, #20]
 80139da:	4413      	add	r3, r2
 80139dc:	9305      	str	r3, [sp, #20]
 80139de:	9b06      	ldr	r3, [sp, #24]
 80139e0:	2101      	movs	r1, #1
 80139e2:	4413      	add	r3, r2
 80139e4:	4630      	mov	r0, r6
 80139e6:	9306      	str	r3, [sp, #24]
 80139e8:	f000 fd7a 	bl	80144e0 <__i2b>
 80139ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ee:	4607      	mov	r7, r0
 80139f0:	f1b8 0f00 	cmp.w	r8, #0
 80139f4:	dd0d      	ble.n	8013a12 <_dtoa_r+0x6a2>
 80139f6:	9a06      	ldr	r2, [sp, #24]
 80139f8:	2a00      	cmp	r2, #0
 80139fa:	dd0a      	ble.n	8013a12 <_dtoa_r+0x6a2>
 80139fc:	4542      	cmp	r2, r8
 80139fe:	9905      	ldr	r1, [sp, #20]
 8013a00:	bfa8      	it	ge
 8013a02:	4642      	movge	r2, r8
 8013a04:	1a89      	subs	r1, r1, r2
 8013a06:	9105      	str	r1, [sp, #20]
 8013a08:	9906      	ldr	r1, [sp, #24]
 8013a0a:	eba8 0802 	sub.w	r8, r8, r2
 8013a0e:	1a8a      	subs	r2, r1, r2
 8013a10:	9206      	str	r2, [sp, #24]
 8013a12:	b303      	cbz	r3, 8013a56 <_dtoa_r+0x6e6>
 8013a14:	9a08      	ldr	r2, [sp, #32]
 8013a16:	2a00      	cmp	r2, #0
 8013a18:	f000 80a6 	beq.w	8013b68 <_dtoa_r+0x7f8>
 8013a1c:	2c00      	cmp	r4, #0
 8013a1e:	dd13      	ble.n	8013a48 <_dtoa_r+0x6d8>
 8013a20:	4639      	mov	r1, r7
 8013a22:	4622      	mov	r2, r4
 8013a24:	4630      	mov	r0, r6
 8013a26:	930c      	str	r3, [sp, #48]	; 0x30
 8013a28:	f000 fe16 	bl	8014658 <__pow5mult>
 8013a2c:	462a      	mov	r2, r5
 8013a2e:	4601      	mov	r1, r0
 8013a30:	4607      	mov	r7, r0
 8013a32:	4630      	mov	r0, r6
 8013a34:	f000 fd6a 	bl	801450c <__multiply>
 8013a38:	4629      	mov	r1, r5
 8013a3a:	900a      	str	r0, [sp, #40]	; 0x28
 8013a3c:	4630      	mov	r0, r6
 8013a3e:	f000 fc93 	bl	8014368 <_Bfree>
 8013a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a46:	4615      	mov	r5, r2
 8013a48:	1b1a      	subs	r2, r3, r4
 8013a4a:	d004      	beq.n	8013a56 <_dtoa_r+0x6e6>
 8013a4c:	4629      	mov	r1, r5
 8013a4e:	4630      	mov	r0, r6
 8013a50:	f000 fe02 	bl	8014658 <__pow5mult>
 8013a54:	4605      	mov	r5, r0
 8013a56:	2101      	movs	r1, #1
 8013a58:	4630      	mov	r0, r6
 8013a5a:	f000 fd41 	bl	80144e0 <__i2b>
 8013a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	4604      	mov	r4, r0
 8013a64:	f340 8082 	ble.w	8013b6c <_dtoa_r+0x7fc>
 8013a68:	461a      	mov	r2, r3
 8013a6a:	4601      	mov	r1, r0
 8013a6c:	4630      	mov	r0, r6
 8013a6e:	f000 fdf3 	bl	8014658 <__pow5mult>
 8013a72:	9b07      	ldr	r3, [sp, #28]
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	4604      	mov	r4, r0
 8013a78:	dd7b      	ble.n	8013b72 <_dtoa_r+0x802>
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8013a7e:	6922      	ldr	r2, [r4, #16]
 8013a80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013a84:	6910      	ldr	r0, [r2, #16]
 8013a86:	f000 fcdb 	bl	8014440 <__hi0bits>
 8013a8a:	f1c0 0020 	rsb	r0, r0, #32
 8013a8e:	9b06      	ldr	r3, [sp, #24]
 8013a90:	4418      	add	r0, r3
 8013a92:	f010 001f 	ands.w	r0, r0, #31
 8013a96:	f000 808d 	beq.w	8013bb4 <_dtoa_r+0x844>
 8013a9a:	f1c0 0220 	rsb	r2, r0, #32
 8013a9e:	2a04      	cmp	r2, #4
 8013aa0:	f340 8086 	ble.w	8013bb0 <_dtoa_r+0x840>
 8013aa4:	f1c0 001c 	rsb	r0, r0, #28
 8013aa8:	9b05      	ldr	r3, [sp, #20]
 8013aaa:	4403      	add	r3, r0
 8013aac:	9305      	str	r3, [sp, #20]
 8013aae:	9b06      	ldr	r3, [sp, #24]
 8013ab0:	4403      	add	r3, r0
 8013ab2:	4480      	add	r8, r0
 8013ab4:	9306      	str	r3, [sp, #24]
 8013ab6:	9b05      	ldr	r3, [sp, #20]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	dd05      	ble.n	8013ac8 <_dtoa_r+0x758>
 8013abc:	4629      	mov	r1, r5
 8013abe:	461a      	mov	r2, r3
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f000 fe23 	bl	801470c <__lshift>
 8013ac6:	4605      	mov	r5, r0
 8013ac8:	9b06      	ldr	r3, [sp, #24]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	dd05      	ble.n	8013ada <_dtoa_r+0x76a>
 8013ace:	4621      	mov	r1, r4
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	4630      	mov	r0, r6
 8013ad4:	f000 fe1a 	bl	801470c <__lshift>
 8013ad8:	4604      	mov	r4, r0
 8013ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d06b      	beq.n	8013bb8 <_dtoa_r+0x848>
 8013ae0:	4621      	mov	r1, r4
 8013ae2:	4628      	mov	r0, r5
 8013ae4:	f000 fe7e 	bl	80147e4 <__mcmp>
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	da65      	bge.n	8013bb8 <_dtoa_r+0x848>
 8013aec:	2300      	movs	r3, #0
 8013aee:	4629      	mov	r1, r5
 8013af0:	220a      	movs	r2, #10
 8013af2:	4630      	mov	r0, r6
 8013af4:	f000 fc5a 	bl	80143ac <__multadd>
 8013af8:	9b08      	ldr	r3, [sp, #32]
 8013afa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013afe:	4605      	mov	r5, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f000 8192 	beq.w	8013e2a <_dtoa_r+0xaba>
 8013b06:	4639      	mov	r1, r7
 8013b08:	2300      	movs	r3, #0
 8013b0a:	220a      	movs	r2, #10
 8013b0c:	4630      	mov	r0, r6
 8013b0e:	f000 fc4d 	bl	80143ac <__multadd>
 8013b12:	f1ba 0f00 	cmp.w	sl, #0
 8013b16:	4607      	mov	r7, r0
 8013b18:	f300 808e 	bgt.w	8013c38 <_dtoa_r+0x8c8>
 8013b1c:	9b07      	ldr	r3, [sp, #28]
 8013b1e:	2b02      	cmp	r3, #2
 8013b20:	dc51      	bgt.n	8013bc6 <_dtoa_r+0x856>
 8013b22:	e089      	b.n	8013c38 <_dtoa_r+0x8c8>
 8013b24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013b2a:	e751      	b.n	80139d0 <_dtoa_r+0x660>
 8013b2c:	f109 34ff 	add.w	r4, r9, #4294967295
 8013b30:	42a3      	cmp	r3, r4
 8013b32:	bfbf      	itttt	lt
 8013b34:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8013b36:	1ae3      	sublt	r3, r4, r3
 8013b38:	18d2      	addlt	r2, r2, r3
 8013b3a:	4613      	movlt	r3, r2
 8013b3c:	bfb7      	itett	lt
 8013b3e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013b40:	1b1c      	subge	r4, r3, r4
 8013b42:	4623      	movlt	r3, r4
 8013b44:	2400      	movlt	r4, #0
 8013b46:	f1b9 0f00 	cmp.w	r9, #0
 8013b4a:	bfb5      	itete	lt
 8013b4c:	9a05      	ldrlt	r2, [sp, #20]
 8013b4e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8013b52:	eba2 0809 	sublt.w	r8, r2, r9
 8013b56:	464a      	movge	r2, r9
 8013b58:	bfb8      	it	lt
 8013b5a:	2200      	movlt	r2, #0
 8013b5c:	e73b      	b.n	80139d6 <_dtoa_r+0x666>
 8013b5e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013b62:	9f08      	ldr	r7, [sp, #32]
 8013b64:	461c      	mov	r4, r3
 8013b66:	e743      	b.n	80139f0 <_dtoa_r+0x680>
 8013b68:	461a      	mov	r2, r3
 8013b6a:	e76f      	b.n	8013a4c <_dtoa_r+0x6dc>
 8013b6c:	9b07      	ldr	r3, [sp, #28]
 8013b6e:	2b01      	cmp	r3, #1
 8013b70:	dc18      	bgt.n	8013ba4 <_dtoa_r+0x834>
 8013b72:	9b02      	ldr	r3, [sp, #8]
 8013b74:	b9b3      	cbnz	r3, 8013ba4 <_dtoa_r+0x834>
 8013b76:	9b03      	ldr	r3, [sp, #12]
 8013b78:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013b7c:	b9a2      	cbnz	r2, 8013ba8 <_dtoa_r+0x838>
 8013b7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013b82:	0d12      	lsrs	r2, r2, #20
 8013b84:	0512      	lsls	r2, r2, #20
 8013b86:	b18a      	cbz	r2, 8013bac <_dtoa_r+0x83c>
 8013b88:	9b05      	ldr	r3, [sp, #20]
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	9305      	str	r3, [sp, #20]
 8013b8e:	9b06      	ldr	r3, [sp, #24]
 8013b90:	3301      	adds	r3, #1
 8013b92:	9306      	str	r3, [sp, #24]
 8013b94:	2301      	movs	r3, #1
 8013b96:	930a      	str	r3, [sp, #40]	; 0x28
 8013b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	f47f af6f 	bne.w	8013a7e <_dtoa_r+0x70e>
 8013ba0:	2001      	movs	r0, #1
 8013ba2:	e774      	b.n	8013a8e <_dtoa_r+0x71e>
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	e7f6      	b.n	8013b96 <_dtoa_r+0x826>
 8013ba8:	9b02      	ldr	r3, [sp, #8]
 8013baa:	e7f4      	b.n	8013b96 <_dtoa_r+0x826>
 8013bac:	920a      	str	r2, [sp, #40]	; 0x28
 8013bae:	e7f3      	b.n	8013b98 <_dtoa_r+0x828>
 8013bb0:	d081      	beq.n	8013ab6 <_dtoa_r+0x746>
 8013bb2:	4610      	mov	r0, r2
 8013bb4:	301c      	adds	r0, #28
 8013bb6:	e777      	b.n	8013aa8 <_dtoa_r+0x738>
 8013bb8:	f1b9 0f00 	cmp.w	r9, #0
 8013bbc:	dc37      	bgt.n	8013c2e <_dtoa_r+0x8be>
 8013bbe:	9b07      	ldr	r3, [sp, #28]
 8013bc0:	2b02      	cmp	r3, #2
 8013bc2:	dd34      	ble.n	8013c2e <_dtoa_r+0x8be>
 8013bc4:	46ca      	mov	sl, r9
 8013bc6:	f1ba 0f00 	cmp.w	sl, #0
 8013bca:	d10d      	bne.n	8013be8 <_dtoa_r+0x878>
 8013bcc:	4621      	mov	r1, r4
 8013bce:	4653      	mov	r3, sl
 8013bd0:	2205      	movs	r2, #5
 8013bd2:	4630      	mov	r0, r6
 8013bd4:	f000 fbea 	bl	80143ac <__multadd>
 8013bd8:	4601      	mov	r1, r0
 8013bda:	4604      	mov	r4, r0
 8013bdc:	4628      	mov	r0, r5
 8013bde:	f000 fe01 	bl	80147e4 <__mcmp>
 8013be2:	2800      	cmp	r0, #0
 8013be4:	f73f adde 	bgt.w	80137a4 <_dtoa_r+0x434>
 8013be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bea:	f8dd 8000 	ldr.w	r8, [sp]
 8013bee:	ea6f 0b03 	mvn.w	fp, r3
 8013bf2:	f04f 0900 	mov.w	r9, #0
 8013bf6:	4621      	mov	r1, r4
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	f000 fbb5 	bl	8014368 <_Bfree>
 8013bfe:	2f00      	cmp	r7, #0
 8013c00:	f43f aea7 	beq.w	8013952 <_dtoa_r+0x5e2>
 8013c04:	f1b9 0f00 	cmp.w	r9, #0
 8013c08:	d005      	beq.n	8013c16 <_dtoa_r+0x8a6>
 8013c0a:	45b9      	cmp	r9, r7
 8013c0c:	d003      	beq.n	8013c16 <_dtoa_r+0x8a6>
 8013c0e:	4649      	mov	r1, r9
 8013c10:	4630      	mov	r0, r6
 8013c12:	f000 fba9 	bl	8014368 <_Bfree>
 8013c16:	4639      	mov	r1, r7
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f000 fba5 	bl	8014368 <_Bfree>
 8013c1e:	e698      	b.n	8013952 <_dtoa_r+0x5e2>
 8013c20:	2400      	movs	r4, #0
 8013c22:	4627      	mov	r7, r4
 8013c24:	e7e0      	b.n	8013be8 <_dtoa_r+0x878>
 8013c26:	46bb      	mov	fp, r7
 8013c28:	4604      	mov	r4, r0
 8013c2a:	4607      	mov	r7, r0
 8013c2c:	e5ba      	b.n	80137a4 <_dtoa_r+0x434>
 8013c2e:	9b08      	ldr	r3, [sp, #32]
 8013c30:	46ca      	mov	sl, r9
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	f000 8100 	beq.w	8013e38 <_dtoa_r+0xac8>
 8013c38:	f1b8 0f00 	cmp.w	r8, #0
 8013c3c:	dd05      	ble.n	8013c4a <_dtoa_r+0x8da>
 8013c3e:	4639      	mov	r1, r7
 8013c40:	4642      	mov	r2, r8
 8013c42:	4630      	mov	r0, r6
 8013c44:	f000 fd62 	bl	801470c <__lshift>
 8013c48:	4607      	mov	r7, r0
 8013c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d05d      	beq.n	8013d0c <_dtoa_r+0x99c>
 8013c50:	6879      	ldr	r1, [r7, #4]
 8013c52:	4630      	mov	r0, r6
 8013c54:	f000 fb48 	bl	80142e8 <_Balloc>
 8013c58:	4680      	mov	r8, r0
 8013c5a:	b928      	cbnz	r0, 8013c68 <_dtoa_r+0x8f8>
 8013c5c:	4b82      	ldr	r3, [pc, #520]	; (8013e68 <_dtoa_r+0xaf8>)
 8013c5e:	4602      	mov	r2, r0
 8013c60:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013c64:	f7ff bb9a 	b.w	801339c <_dtoa_r+0x2c>
 8013c68:	693a      	ldr	r2, [r7, #16]
 8013c6a:	3202      	adds	r2, #2
 8013c6c:	0092      	lsls	r2, r2, #2
 8013c6e:	f107 010c 	add.w	r1, r7, #12
 8013c72:	300c      	adds	r0, #12
 8013c74:	f000 fb2a 	bl	80142cc <memcpy>
 8013c78:	2201      	movs	r2, #1
 8013c7a:	4641      	mov	r1, r8
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	f000 fd45 	bl	801470c <__lshift>
 8013c82:	9b00      	ldr	r3, [sp, #0]
 8013c84:	3301      	adds	r3, #1
 8013c86:	9305      	str	r3, [sp, #20]
 8013c88:	9b00      	ldr	r3, [sp, #0]
 8013c8a:	4453      	add	r3, sl
 8013c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8013c8e:	9b02      	ldr	r3, [sp, #8]
 8013c90:	f003 0301 	and.w	r3, r3, #1
 8013c94:	46b9      	mov	r9, r7
 8013c96:	9308      	str	r3, [sp, #32]
 8013c98:	4607      	mov	r7, r0
 8013c9a:	9b05      	ldr	r3, [sp, #20]
 8013c9c:	4621      	mov	r1, r4
 8013c9e:	3b01      	subs	r3, #1
 8013ca0:	4628      	mov	r0, r5
 8013ca2:	9302      	str	r3, [sp, #8]
 8013ca4:	f7ff fad8 	bl	8013258 <quorem>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	3330      	adds	r3, #48	; 0x30
 8013cac:	9006      	str	r0, [sp, #24]
 8013cae:	4649      	mov	r1, r9
 8013cb0:	4628      	mov	r0, r5
 8013cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8013cb4:	f000 fd96 	bl	80147e4 <__mcmp>
 8013cb8:	463a      	mov	r2, r7
 8013cba:	4682      	mov	sl, r0
 8013cbc:	4621      	mov	r1, r4
 8013cbe:	4630      	mov	r0, r6
 8013cc0:	f000 fdac 	bl	801481c <__mdiff>
 8013cc4:	68c2      	ldr	r2, [r0, #12]
 8013cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cc8:	4680      	mov	r8, r0
 8013cca:	bb0a      	cbnz	r2, 8013d10 <_dtoa_r+0x9a0>
 8013ccc:	4601      	mov	r1, r0
 8013cce:	4628      	mov	r0, r5
 8013cd0:	f000 fd88 	bl	80147e4 <__mcmp>
 8013cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cd6:	4602      	mov	r2, r0
 8013cd8:	4641      	mov	r1, r8
 8013cda:	4630      	mov	r0, r6
 8013cdc:	920e      	str	r2, [sp, #56]	; 0x38
 8013cde:	930a      	str	r3, [sp, #40]	; 0x28
 8013ce0:	f000 fb42 	bl	8014368 <_Bfree>
 8013ce4:	9b07      	ldr	r3, [sp, #28]
 8013ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ce8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013cec:	ea43 0102 	orr.w	r1, r3, r2
 8013cf0:	9b08      	ldr	r3, [sp, #32]
 8013cf2:	430b      	orrs	r3, r1
 8013cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cf6:	d10d      	bne.n	8013d14 <_dtoa_r+0x9a4>
 8013cf8:	2b39      	cmp	r3, #57	; 0x39
 8013cfa:	d029      	beq.n	8013d50 <_dtoa_r+0x9e0>
 8013cfc:	f1ba 0f00 	cmp.w	sl, #0
 8013d00:	dd01      	ble.n	8013d06 <_dtoa_r+0x996>
 8013d02:	9b06      	ldr	r3, [sp, #24]
 8013d04:	3331      	adds	r3, #49	; 0x31
 8013d06:	9a02      	ldr	r2, [sp, #8]
 8013d08:	7013      	strb	r3, [r2, #0]
 8013d0a:	e774      	b.n	8013bf6 <_dtoa_r+0x886>
 8013d0c:	4638      	mov	r0, r7
 8013d0e:	e7b8      	b.n	8013c82 <_dtoa_r+0x912>
 8013d10:	2201      	movs	r2, #1
 8013d12:	e7e1      	b.n	8013cd8 <_dtoa_r+0x968>
 8013d14:	f1ba 0f00 	cmp.w	sl, #0
 8013d18:	db06      	blt.n	8013d28 <_dtoa_r+0x9b8>
 8013d1a:	9907      	ldr	r1, [sp, #28]
 8013d1c:	ea41 0a0a 	orr.w	sl, r1, sl
 8013d20:	9908      	ldr	r1, [sp, #32]
 8013d22:	ea5a 0101 	orrs.w	r1, sl, r1
 8013d26:	d120      	bne.n	8013d6a <_dtoa_r+0x9fa>
 8013d28:	2a00      	cmp	r2, #0
 8013d2a:	ddec      	ble.n	8013d06 <_dtoa_r+0x996>
 8013d2c:	4629      	mov	r1, r5
 8013d2e:	2201      	movs	r2, #1
 8013d30:	4630      	mov	r0, r6
 8013d32:	9305      	str	r3, [sp, #20]
 8013d34:	f000 fcea 	bl	801470c <__lshift>
 8013d38:	4621      	mov	r1, r4
 8013d3a:	4605      	mov	r5, r0
 8013d3c:	f000 fd52 	bl	80147e4 <__mcmp>
 8013d40:	2800      	cmp	r0, #0
 8013d42:	9b05      	ldr	r3, [sp, #20]
 8013d44:	dc02      	bgt.n	8013d4c <_dtoa_r+0x9dc>
 8013d46:	d1de      	bne.n	8013d06 <_dtoa_r+0x996>
 8013d48:	07da      	lsls	r2, r3, #31
 8013d4a:	d5dc      	bpl.n	8013d06 <_dtoa_r+0x996>
 8013d4c:	2b39      	cmp	r3, #57	; 0x39
 8013d4e:	d1d8      	bne.n	8013d02 <_dtoa_r+0x992>
 8013d50:	9a02      	ldr	r2, [sp, #8]
 8013d52:	2339      	movs	r3, #57	; 0x39
 8013d54:	7013      	strb	r3, [r2, #0]
 8013d56:	4643      	mov	r3, r8
 8013d58:	4698      	mov	r8, r3
 8013d5a:	3b01      	subs	r3, #1
 8013d5c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013d60:	2a39      	cmp	r2, #57	; 0x39
 8013d62:	d051      	beq.n	8013e08 <_dtoa_r+0xa98>
 8013d64:	3201      	adds	r2, #1
 8013d66:	701a      	strb	r2, [r3, #0]
 8013d68:	e745      	b.n	8013bf6 <_dtoa_r+0x886>
 8013d6a:	2a00      	cmp	r2, #0
 8013d6c:	dd03      	ble.n	8013d76 <_dtoa_r+0xa06>
 8013d6e:	2b39      	cmp	r3, #57	; 0x39
 8013d70:	d0ee      	beq.n	8013d50 <_dtoa_r+0x9e0>
 8013d72:	3301      	adds	r3, #1
 8013d74:	e7c7      	b.n	8013d06 <_dtoa_r+0x996>
 8013d76:	9a05      	ldr	r2, [sp, #20]
 8013d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d7a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013d7e:	428a      	cmp	r2, r1
 8013d80:	d02b      	beq.n	8013dda <_dtoa_r+0xa6a>
 8013d82:	4629      	mov	r1, r5
 8013d84:	2300      	movs	r3, #0
 8013d86:	220a      	movs	r2, #10
 8013d88:	4630      	mov	r0, r6
 8013d8a:	f000 fb0f 	bl	80143ac <__multadd>
 8013d8e:	45b9      	cmp	r9, r7
 8013d90:	4605      	mov	r5, r0
 8013d92:	f04f 0300 	mov.w	r3, #0
 8013d96:	f04f 020a 	mov.w	r2, #10
 8013d9a:	4649      	mov	r1, r9
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	d107      	bne.n	8013db0 <_dtoa_r+0xa40>
 8013da0:	f000 fb04 	bl	80143ac <__multadd>
 8013da4:	4681      	mov	r9, r0
 8013da6:	4607      	mov	r7, r0
 8013da8:	9b05      	ldr	r3, [sp, #20]
 8013daa:	3301      	adds	r3, #1
 8013dac:	9305      	str	r3, [sp, #20]
 8013dae:	e774      	b.n	8013c9a <_dtoa_r+0x92a>
 8013db0:	f000 fafc 	bl	80143ac <__multadd>
 8013db4:	4639      	mov	r1, r7
 8013db6:	4681      	mov	r9, r0
 8013db8:	2300      	movs	r3, #0
 8013dba:	220a      	movs	r2, #10
 8013dbc:	4630      	mov	r0, r6
 8013dbe:	f000 faf5 	bl	80143ac <__multadd>
 8013dc2:	4607      	mov	r7, r0
 8013dc4:	e7f0      	b.n	8013da8 <_dtoa_r+0xa38>
 8013dc6:	f1ba 0f00 	cmp.w	sl, #0
 8013dca:	9a00      	ldr	r2, [sp, #0]
 8013dcc:	bfcc      	ite	gt
 8013dce:	46d0      	movgt	r8, sl
 8013dd0:	f04f 0801 	movle.w	r8, #1
 8013dd4:	4490      	add	r8, r2
 8013dd6:	f04f 0900 	mov.w	r9, #0
 8013dda:	4629      	mov	r1, r5
 8013ddc:	2201      	movs	r2, #1
 8013dde:	4630      	mov	r0, r6
 8013de0:	9302      	str	r3, [sp, #8]
 8013de2:	f000 fc93 	bl	801470c <__lshift>
 8013de6:	4621      	mov	r1, r4
 8013de8:	4605      	mov	r5, r0
 8013dea:	f000 fcfb 	bl	80147e4 <__mcmp>
 8013dee:	2800      	cmp	r0, #0
 8013df0:	dcb1      	bgt.n	8013d56 <_dtoa_r+0x9e6>
 8013df2:	d102      	bne.n	8013dfa <_dtoa_r+0xa8a>
 8013df4:	9b02      	ldr	r3, [sp, #8]
 8013df6:	07db      	lsls	r3, r3, #31
 8013df8:	d4ad      	bmi.n	8013d56 <_dtoa_r+0x9e6>
 8013dfa:	4643      	mov	r3, r8
 8013dfc:	4698      	mov	r8, r3
 8013dfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e02:	2a30      	cmp	r2, #48	; 0x30
 8013e04:	d0fa      	beq.n	8013dfc <_dtoa_r+0xa8c>
 8013e06:	e6f6      	b.n	8013bf6 <_dtoa_r+0x886>
 8013e08:	9a00      	ldr	r2, [sp, #0]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d1a4      	bne.n	8013d58 <_dtoa_r+0x9e8>
 8013e0e:	f10b 0b01 	add.w	fp, fp, #1
 8013e12:	2331      	movs	r3, #49	; 0x31
 8013e14:	e778      	b.n	8013d08 <_dtoa_r+0x998>
 8013e16:	4b15      	ldr	r3, [pc, #84]	; (8013e6c <_dtoa_r+0xafc>)
 8013e18:	f7ff bb12 	b.w	8013440 <_dtoa_r+0xd0>
 8013e1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	f47f aaee 	bne.w	8013400 <_dtoa_r+0x90>
 8013e24:	4b12      	ldr	r3, [pc, #72]	; (8013e70 <_dtoa_r+0xb00>)
 8013e26:	f7ff bb0b 	b.w	8013440 <_dtoa_r+0xd0>
 8013e2a:	f1ba 0f00 	cmp.w	sl, #0
 8013e2e:	dc03      	bgt.n	8013e38 <_dtoa_r+0xac8>
 8013e30:	9b07      	ldr	r3, [sp, #28]
 8013e32:	2b02      	cmp	r3, #2
 8013e34:	f73f aec7 	bgt.w	8013bc6 <_dtoa_r+0x856>
 8013e38:	f8dd 8000 	ldr.w	r8, [sp]
 8013e3c:	4621      	mov	r1, r4
 8013e3e:	4628      	mov	r0, r5
 8013e40:	f7ff fa0a 	bl	8013258 <quorem>
 8013e44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013e48:	f808 3b01 	strb.w	r3, [r8], #1
 8013e4c:	9a00      	ldr	r2, [sp, #0]
 8013e4e:	eba8 0202 	sub.w	r2, r8, r2
 8013e52:	4592      	cmp	sl, r2
 8013e54:	ddb7      	ble.n	8013dc6 <_dtoa_r+0xa56>
 8013e56:	4629      	mov	r1, r5
 8013e58:	2300      	movs	r3, #0
 8013e5a:	220a      	movs	r2, #10
 8013e5c:	4630      	mov	r0, r6
 8013e5e:	f000 faa5 	bl	80143ac <__multadd>
 8013e62:	4605      	mov	r5, r0
 8013e64:	e7ea      	b.n	8013e3c <_dtoa_r+0xacc>
 8013e66:	bf00      	nop
 8013e68:	08016d03 	.word	0x08016d03
 8013e6c:	08016c5c 	.word	0x08016c5c
 8013e70:	08016c80 	.word	0x08016c80

08013e74 <__sflush_r>:
 8013e74:	898a      	ldrh	r2, [r1, #12]
 8013e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e7a:	4605      	mov	r5, r0
 8013e7c:	0710      	lsls	r0, r2, #28
 8013e7e:	460c      	mov	r4, r1
 8013e80:	d458      	bmi.n	8013f34 <__sflush_r+0xc0>
 8013e82:	684b      	ldr	r3, [r1, #4]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	dc05      	bgt.n	8013e94 <__sflush_r+0x20>
 8013e88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	dc02      	bgt.n	8013e94 <__sflush_r+0x20>
 8013e8e:	2000      	movs	r0, #0
 8013e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e96:	2e00      	cmp	r6, #0
 8013e98:	d0f9      	beq.n	8013e8e <__sflush_r+0x1a>
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013ea0:	682f      	ldr	r7, [r5, #0]
 8013ea2:	602b      	str	r3, [r5, #0]
 8013ea4:	d032      	beq.n	8013f0c <__sflush_r+0x98>
 8013ea6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013ea8:	89a3      	ldrh	r3, [r4, #12]
 8013eaa:	075a      	lsls	r2, r3, #29
 8013eac:	d505      	bpl.n	8013eba <__sflush_r+0x46>
 8013eae:	6863      	ldr	r3, [r4, #4]
 8013eb0:	1ac0      	subs	r0, r0, r3
 8013eb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013eb4:	b10b      	cbz	r3, 8013eba <__sflush_r+0x46>
 8013eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013eb8:	1ac0      	subs	r0, r0, r3
 8013eba:	2300      	movs	r3, #0
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ec0:	6a21      	ldr	r1, [r4, #32]
 8013ec2:	4628      	mov	r0, r5
 8013ec4:	47b0      	blx	r6
 8013ec6:	1c43      	adds	r3, r0, #1
 8013ec8:	89a3      	ldrh	r3, [r4, #12]
 8013eca:	d106      	bne.n	8013eda <__sflush_r+0x66>
 8013ecc:	6829      	ldr	r1, [r5, #0]
 8013ece:	291d      	cmp	r1, #29
 8013ed0:	d82c      	bhi.n	8013f2c <__sflush_r+0xb8>
 8013ed2:	4a2a      	ldr	r2, [pc, #168]	; (8013f7c <__sflush_r+0x108>)
 8013ed4:	40ca      	lsrs	r2, r1
 8013ed6:	07d6      	lsls	r6, r2, #31
 8013ed8:	d528      	bpl.n	8013f2c <__sflush_r+0xb8>
 8013eda:	2200      	movs	r2, #0
 8013edc:	6062      	str	r2, [r4, #4]
 8013ede:	04d9      	lsls	r1, r3, #19
 8013ee0:	6922      	ldr	r2, [r4, #16]
 8013ee2:	6022      	str	r2, [r4, #0]
 8013ee4:	d504      	bpl.n	8013ef0 <__sflush_r+0x7c>
 8013ee6:	1c42      	adds	r2, r0, #1
 8013ee8:	d101      	bne.n	8013eee <__sflush_r+0x7a>
 8013eea:	682b      	ldr	r3, [r5, #0]
 8013eec:	b903      	cbnz	r3, 8013ef0 <__sflush_r+0x7c>
 8013eee:	6560      	str	r0, [r4, #84]	; 0x54
 8013ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ef2:	602f      	str	r7, [r5, #0]
 8013ef4:	2900      	cmp	r1, #0
 8013ef6:	d0ca      	beq.n	8013e8e <__sflush_r+0x1a>
 8013ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013efc:	4299      	cmp	r1, r3
 8013efe:	d002      	beq.n	8013f06 <__sflush_r+0x92>
 8013f00:	4628      	mov	r0, r5
 8013f02:	f000 fd7f 	bl	8014a04 <_free_r>
 8013f06:	2000      	movs	r0, #0
 8013f08:	6360      	str	r0, [r4, #52]	; 0x34
 8013f0a:	e7c1      	b.n	8013e90 <__sflush_r+0x1c>
 8013f0c:	6a21      	ldr	r1, [r4, #32]
 8013f0e:	2301      	movs	r3, #1
 8013f10:	4628      	mov	r0, r5
 8013f12:	47b0      	blx	r6
 8013f14:	1c41      	adds	r1, r0, #1
 8013f16:	d1c7      	bne.n	8013ea8 <__sflush_r+0x34>
 8013f18:	682b      	ldr	r3, [r5, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d0c4      	beq.n	8013ea8 <__sflush_r+0x34>
 8013f1e:	2b1d      	cmp	r3, #29
 8013f20:	d001      	beq.n	8013f26 <__sflush_r+0xb2>
 8013f22:	2b16      	cmp	r3, #22
 8013f24:	d101      	bne.n	8013f2a <__sflush_r+0xb6>
 8013f26:	602f      	str	r7, [r5, #0]
 8013f28:	e7b1      	b.n	8013e8e <__sflush_r+0x1a>
 8013f2a:	89a3      	ldrh	r3, [r4, #12]
 8013f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f30:	81a3      	strh	r3, [r4, #12]
 8013f32:	e7ad      	b.n	8013e90 <__sflush_r+0x1c>
 8013f34:	690f      	ldr	r7, [r1, #16]
 8013f36:	2f00      	cmp	r7, #0
 8013f38:	d0a9      	beq.n	8013e8e <__sflush_r+0x1a>
 8013f3a:	0793      	lsls	r3, r2, #30
 8013f3c:	680e      	ldr	r6, [r1, #0]
 8013f3e:	bf08      	it	eq
 8013f40:	694b      	ldreq	r3, [r1, #20]
 8013f42:	600f      	str	r7, [r1, #0]
 8013f44:	bf18      	it	ne
 8013f46:	2300      	movne	r3, #0
 8013f48:	eba6 0807 	sub.w	r8, r6, r7
 8013f4c:	608b      	str	r3, [r1, #8]
 8013f4e:	f1b8 0f00 	cmp.w	r8, #0
 8013f52:	dd9c      	ble.n	8013e8e <__sflush_r+0x1a>
 8013f54:	6a21      	ldr	r1, [r4, #32]
 8013f56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013f58:	4643      	mov	r3, r8
 8013f5a:	463a      	mov	r2, r7
 8013f5c:	4628      	mov	r0, r5
 8013f5e:	47b0      	blx	r6
 8013f60:	2800      	cmp	r0, #0
 8013f62:	dc06      	bgt.n	8013f72 <__sflush_r+0xfe>
 8013f64:	89a3      	ldrh	r3, [r4, #12]
 8013f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f6a:	81a3      	strh	r3, [r4, #12]
 8013f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f70:	e78e      	b.n	8013e90 <__sflush_r+0x1c>
 8013f72:	4407      	add	r7, r0
 8013f74:	eba8 0800 	sub.w	r8, r8, r0
 8013f78:	e7e9      	b.n	8013f4e <__sflush_r+0xda>
 8013f7a:	bf00      	nop
 8013f7c:	20400001 	.word	0x20400001

08013f80 <_fflush_r>:
 8013f80:	b538      	push	{r3, r4, r5, lr}
 8013f82:	690b      	ldr	r3, [r1, #16]
 8013f84:	4605      	mov	r5, r0
 8013f86:	460c      	mov	r4, r1
 8013f88:	b913      	cbnz	r3, 8013f90 <_fflush_r+0x10>
 8013f8a:	2500      	movs	r5, #0
 8013f8c:	4628      	mov	r0, r5
 8013f8e:	bd38      	pop	{r3, r4, r5, pc}
 8013f90:	b118      	cbz	r0, 8013f9a <_fflush_r+0x1a>
 8013f92:	6983      	ldr	r3, [r0, #24]
 8013f94:	b90b      	cbnz	r3, 8013f9a <_fflush_r+0x1a>
 8013f96:	f000 f887 	bl	80140a8 <__sinit>
 8013f9a:	4b14      	ldr	r3, [pc, #80]	; (8013fec <_fflush_r+0x6c>)
 8013f9c:	429c      	cmp	r4, r3
 8013f9e:	d11b      	bne.n	8013fd8 <_fflush_r+0x58>
 8013fa0:	686c      	ldr	r4, [r5, #4]
 8013fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d0ef      	beq.n	8013f8a <_fflush_r+0xa>
 8013faa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013fac:	07d0      	lsls	r0, r2, #31
 8013fae:	d404      	bmi.n	8013fba <_fflush_r+0x3a>
 8013fb0:	0599      	lsls	r1, r3, #22
 8013fb2:	d402      	bmi.n	8013fba <_fflush_r+0x3a>
 8013fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013fb6:	f000 f91a 	bl	80141ee <__retarget_lock_acquire_recursive>
 8013fba:	4628      	mov	r0, r5
 8013fbc:	4621      	mov	r1, r4
 8013fbe:	f7ff ff59 	bl	8013e74 <__sflush_r>
 8013fc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013fc4:	07da      	lsls	r2, r3, #31
 8013fc6:	4605      	mov	r5, r0
 8013fc8:	d4e0      	bmi.n	8013f8c <_fflush_r+0xc>
 8013fca:	89a3      	ldrh	r3, [r4, #12]
 8013fcc:	059b      	lsls	r3, r3, #22
 8013fce:	d4dd      	bmi.n	8013f8c <_fflush_r+0xc>
 8013fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013fd2:	f000 f90d 	bl	80141f0 <__retarget_lock_release_recursive>
 8013fd6:	e7d9      	b.n	8013f8c <_fflush_r+0xc>
 8013fd8:	4b05      	ldr	r3, [pc, #20]	; (8013ff0 <_fflush_r+0x70>)
 8013fda:	429c      	cmp	r4, r3
 8013fdc:	d101      	bne.n	8013fe2 <_fflush_r+0x62>
 8013fde:	68ac      	ldr	r4, [r5, #8]
 8013fe0:	e7df      	b.n	8013fa2 <_fflush_r+0x22>
 8013fe2:	4b04      	ldr	r3, [pc, #16]	; (8013ff4 <_fflush_r+0x74>)
 8013fe4:	429c      	cmp	r4, r3
 8013fe6:	bf08      	it	eq
 8013fe8:	68ec      	ldreq	r4, [r5, #12]
 8013fea:	e7da      	b.n	8013fa2 <_fflush_r+0x22>
 8013fec:	08016d34 	.word	0x08016d34
 8013ff0:	08016d54 	.word	0x08016d54
 8013ff4:	08016d14 	.word	0x08016d14

08013ff8 <std>:
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	b510      	push	{r4, lr}
 8013ffc:	4604      	mov	r4, r0
 8013ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8014002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014006:	6083      	str	r3, [r0, #8]
 8014008:	8181      	strh	r1, [r0, #12]
 801400a:	6643      	str	r3, [r0, #100]	; 0x64
 801400c:	81c2      	strh	r2, [r0, #14]
 801400e:	6183      	str	r3, [r0, #24]
 8014010:	4619      	mov	r1, r3
 8014012:	2208      	movs	r2, #8
 8014014:	305c      	adds	r0, #92	; 0x5c
 8014016:	f7fe fb9f 	bl	8012758 <memset>
 801401a:	4b05      	ldr	r3, [pc, #20]	; (8014030 <std+0x38>)
 801401c:	6263      	str	r3, [r4, #36]	; 0x24
 801401e:	4b05      	ldr	r3, [pc, #20]	; (8014034 <std+0x3c>)
 8014020:	62a3      	str	r3, [r4, #40]	; 0x28
 8014022:	4b05      	ldr	r3, [pc, #20]	; (8014038 <std+0x40>)
 8014024:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014026:	4b05      	ldr	r3, [pc, #20]	; (801403c <std+0x44>)
 8014028:	6224      	str	r4, [r4, #32]
 801402a:	6323      	str	r3, [r4, #48]	; 0x30
 801402c:	bd10      	pop	{r4, pc}
 801402e:	bf00      	nop
 8014030:	08014b79 	.word	0x08014b79
 8014034:	08014b9b 	.word	0x08014b9b
 8014038:	08014bd3 	.word	0x08014bd3
 801403c:	08014bf7 	.word	0x08014bf7

08014040 <_cleanup_r>:
 8014040:	4901      	ldr	r1, [pc, #4]	; (8014048 <_cleanup_r+0x8>)
 8014042:	f000 b8af 	b.w	80141a4 <_fwalk_reent>
 8014046:	bf00      	nop
 8014048:	08013f81 	.word	0x08013f81

0801404c <__sfmoreglue>:
 801404c:	b570      	push	{r4, r5, r6, lr}
 801404e:	1e4a      	subs	r2, r1, #1
 8014050:	2568      	movs	r5, #104	; 0x68
 8014052:	4355      	muls	r5, r2
 8014054:	460e      	mov	r6, r1
 8014056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801405a:	f000 fd23 	bl	8014aa4 <_malloc_r>
 801405e:	4604      	mov	r4, r0
 8014060:	b140      	cbz	r0, 8014074 <__sfmoreglue+0x28>
 8014062:	2100      	movs	r1, #0
 8014064:	e9c0 1600 	strd	r1, r6, [r0]
 8014068:	300c      	adds	r0, #12
 801406a:	60a0      	str	r0, [r4, #8]
 801406c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014070:	f7fe fb72 	bl	8012758 <memset>
 8014074:	4620      	mov	r0, r4
 8014076:	bd70      	pop	{r4, r5, r6, pc}

08014078 <__sfp_lock_acquire>:
 8014078:	4801      	ldr	r0, [pc, #4]	; (8014080 <__sfp_lock_acquire+0x8>)
 801407a:	f000 b8b8 	b.w	80141ee <__retarget_lock_acquire_recursive>
 801407e:	bf00      	nop
 8014080:	2400175c 	.word	0x2400175c

08014084 <__sfp_lock_release>:
 8014084:	4801      	ldr	r0, [pc, #4]	; (801408c <__sfp_lock_release+0x8>)
 8014086:	f000 b8b3 	b.w	80141f0 <__retarget_lock_release_recursive>
 801408a:	bf00      	nop
 801408c:	2400175c 	.word	0x2400175c

08014090 <__sinit_lock_acquire>:
 8014090:	4801      	ldr	r0, [pc, #4]	; (8014098 <__sinit_lock_acquire+0x8>)
 8014092:	f000 b8ac 	b.w	80141ee <__retarget_lock_acquire_recursive>
 8014096:	bf00      	nop
 8014098:	24001757 	.word	0x24001757

0801409c <__sinit_lock_release>:
 801409c:	4801      	ldr	r0, [pc, #4]	; (80140a4 <__sinit_lock_release+0x8>)
 801409e:	f000 b8a7 	b.w	80141f0 <__retarget_lock_release_recursive>
 80140a2:	bf00      	nop
 80140a4:	24001757 	.word	0x24001757

080140a8 <__sinit>:
 80140a8:	b510      	push	{r4, lr}
 80140aa:	4604      	mov	r4, r0
 80140ac:	f7ff fff0 	bl	8014090 <__sinit_lock_acquire>
 80140b0:	69a3      	ldr	r3, [r4, #24]
 80140b2:	b11b      	cbz	r3, 80140bc <__sinit+0x14>
 80140b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140b8:	f7ff bff0 	b.w	801409c <__sinit_lock_release>
 80140bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80140c0:	6523      	str	r3, [r4, #80]	; 0x50
 80140c2:	4b13      	ldr	r3, [pc, #76]	; (8014110 <__sinit+0x68>)
 80140c4:	4a13      	ldr	r2, [pc, #76]	; (8014114 <__sinit+0x6c>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80140ca:	42a3      	cmp	r3, r4
 80140cc:	bf04      	itt	eq
 80140ce:	2301      	moveq	r3, #1
 80140d0:	61a3      	streq	r3, [r4, #24]
 80140d2:	4620      	mov	r0, r4
 80140d4:	f000 f820 	bl	8014118 <__sfp>
 80140d8:	6060      	str	r0, [r4, #4]
 80140da:	4620      	mov	r0, r4
 80140dc:	f000 f81c 	bl	8014118 <__sfp>
 80140e0:	60a0      	str	r0, [r4, #8]
 80140e2:	4620      	mov	r0, r4
 80140e4:	f000 f818 	bl	8014118 <__sfp>
 80140e8:	2200      	movs	r2, #0
 80140ea:	60e0      	str	r0, [r4, #12]
 80140ec:	2104      	movs	r1, #4
 80140ee:	6860      	ldr	r0, [r4, #4]
 80140f0:	f7ff ff82 	bl	8013ff8 <std>
 80140f4:	68a0      	ldr	r0, [r4, #8]
 80140f6:	2201      	movs	r2, #1
 80140f8:	2109      	movs	r1, #9
 80140fa:	f7ff ff7d 	bl	8013ff8 <std>
 80140fe:	68e0      	ldr	r0, [r4, #12]
 8014100:	2202      	movs	r2, #2
 8014102:	2112      	movs	r1, #18
 8014104:	f7ff ff78 	bl	8013ff8 <std>
 8014108:	2301      	movs	r3, #1
 801410a:	61a3      	str	r3, [r4, #24]
 801410c:	e7d2      	b.n	80140b4 <__sinit+0xc>
 801410e:	bf00      	nop
 8014110:	08016c48 	.word	0x08016c48
 8014114:	08014041 	.word	0x08014041

08014118 <__sfp>:
 8014118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801411a:	4607      	mov	r7, r0
 801411c:	f7ff ffac 	bl	8014078 <__sfp_lock_acquire>
 8014120:	4b1e      	ldr	r3, [pc, #120]	; (801419c <__sfp+0x84>)
 8014122:	681e      	ldr	r6, [r3, #0]
 8014124:	69b3      	ldr	r3, [r6, #24]
 8014126:	b913      	cbnz	r3, 801412e <__sfp+0x16>
 8014128:	4630      	mov	r0, r6
 801412a:	f7ff ffbd 	bl	80140a8 <__sinit>
 801412e:	3648      	adds	r6, #72	; 0x48
 8014130:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014134:	3b01      	subs	r3, #1
 8014136:	d503      	bpl.n	8014140 <__sfp+0x28>
 8014138:	6833      	ldr	r3, [r6, #0]
 801413a:	b30b      	cbz	r3, 8014180 <__sfp+0x68>
 801413c:	6836      	ldr	r6, [r6, #0]
 801413e:	e7f7      	b.n	8014130 <__sfp+0x18>
 8014140:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014144:	b9d5      	cbnz	r5, 801417c <__sfp+0x64>
 8014146:	4b16      	ldr	r3, [pc, #88]	; (80141a0 <__sfp+0x88>)
 8014148:	60e3      	str	r3, [r4, #12]
 801414a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801414e:	6665      	str	r5, [r4, #100]	; 0x64
 8014150:	f000 f84c 	bl	80141ec <__retarget_lock_init_recursive>
 8014154:	f7ff ff96 	bl	8014084 <__sfp_lock_release>
 8014158:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801415c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014160:	6025      	str	r5, [r4, #0]
 8014162:	61a5      	str	r5, [r4, #24]
 8014164:	2208      	movs	r2, #8
 8014166:	4629      	mov	r1, r5
 8014168:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801416c:	f7fe faf4 	bl	8012758 <memset>
 8014170:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014174:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014178:	4620      	mov	r0, r4
 801417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801417c:	3468      	adds	r4, #104	; 0x68
 801417e:	e7d9      	b.n	8014134 <__sfp+0x1c>
 8014180:	2104      	movs	r1, #4
 8014182:	4638      	mov	r0, r7
 8014184:	f7ff ff62 	bl	801404c <__sfmoreglue>
 8014188:	4604      	mov	r4, r0
 801418a:	6030      	str	r0, [r6, #0]
 801418c:	2800      	cmp	r0, #0
 801418e:	d1d5      	bne.n	801413c <__sfp+0x24>
 8014190:	f7ff ff78 	bl	8014084 <__sfp_lock_release>
 8014194:	230c      	movs	r3, #12
 8014196:	603b      	str	r3, [r7, #0]
 8014198:	e7ee      	b.n	8014178 <__sfp+0x60>
 801419a:	bf00      	nop
 801419c:	08016c48 	.word	0x08016c48
 80141a0:	ffff0001 	.word	0xffff0001

080141a4 <_fwalk_reent>:
 80141a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141a8:	4606      	mov	r6, r0
 80141aa:	4688      	mov	r8, r1
 80141ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80141b0:	2700      	movs	r7, #0
 80141b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80141b6:	f1b9 0901 	subs.w	r9, r9, #1
 80141ba:	d505      	bpl.n	80141c8 <_fwalk_reent+0x24>
 80141bc:	6824      	ldr	r4, [r4, #0]
 80141be:	2c00      	cmp	r4, #0
 80141c0:	d1f7      	bne.n	80141b2 <_fwalk_reent+0xe>
 80141c2:	4638      	mov	r0, r7
 80141c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141c8:	89ab      	ldrh	r3, [r5, #12]
 80141ca:	2b01      	cmp	r3, #1
 80141cc:	d907      	bls.n	80141de <_fwalk_reent+0x3a>
 80141ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80141d2:	3301      	adds	r3, #1
 80141d4:	d003      	beq.n	80141de <_fwalk_reent+0x3a>
 80141d6:	4629      	mov	r1, r5
 80141d8:	4630      	mov	r0, r6
 80141da:	47c0      	blx	r8
 80141dc:	4307      	orrs	r7, r0
 80141de:	3568      	adds	r5, #104	; 0x68
 80141e0:	e7e9      	b.n	80141b6 <_fwalk_reent+0x12>
	...

080141e4 <_localeconv_r>:
 80141e4:	4800      	ldr	r0, [pc, #0]	; (80141e8 <_localeconv_r+0x4>)
 80141e6:	4770      	bx	lr
 80141e8:	24000394 	.word	0x24000394

080141ec <__retarget_lock_init_recursive>:
 80141ec:	4770      	bx	lr

080141ee <__retarget_lock_acquire_recursive>:
 80141ee:	4770      	bx	lr

080141f0 <__retarget_lock_release_recursive>:
 80141f0:	4770      	bx	lr

080141f2 <__swhatbuf_r>:
 80141f2:	b570      	push	{r4, r5, r6, lr}
 80141f4:	460e      	mov	r6, r1
 80141f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141fa:	2900      	cmp	r1, #0
 80141fc:	b096      	sub	sp, #88	; 0x58
 80141fe:	4614      	mov	r4, r2
 8014200:	461d      	mov	r5, r3
 8014202:	da07      	bge.n	8014214 <__swhatbuf_r+0x22>
 8014204:	2300      	movs	r3, #0
 8014206:	602b      	str	r3, [r5, #0]
 8014208:	89b3      	ldrh	r3, [r6, #12]
 801420a:	061a      	lsls	r2, r3, #24
 801420c:	d410      	bmi.n	8014230 <__swhatbuf_r+0x3e>
 801420e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014212:	e00e      	b.n	8014232 <__swhatbuf_r+0x40>
 8014214:	466a      	mov	r2, sp
 8014216:	f000 fd45 	bl	8014ca4 <_fstat_r>
 801421a:	2800      	cmp	r0, #0
 801421c:	dbf2      	blt.n	8014204 <__swhatbuf_r+0x12>
 801421e:	9a01      	ldr	r2, [sp, #4]
 8014220:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014224:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014228:	425a      	negs	r2, r3
 801422a:	415a      	adcs	r2, r3
 801422c:	602a      	str	r2, [r5, #0]
 801422e:	e7ee      	b.n	801420e <__swhatbuf_r+0x1c>
 8014230:	2340      	movs	r3, #64	; 0x40
 8014232:	2000      	movs	r0, #0
 8014234:	6023      	str	r3, [r4, #0]
 8014236:	b016      	add	sp, #88	; 0x58
 8014238:	bd70      	pop	{r4, r5, r6, pc}
	...

0801423c <__smakebuf_r>:
 801423c:	898b      	ldrh	r3, [r1, #12]
 801423e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014240:	079d      	lsls	r5, r3, #30
 8014242:	4606      	mov	r6, r0
 8014244:	460c      	mov	r4, r1
 8014246:	d507      	bpl.n	8014258 <__smakebuf_r+0x1c>
 8014248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801424c:	6023      	str	r3, [r4, #0]
 801424e:	6123      	str	r3, [r4, #16]
 8014250:	2301      	movs	r3, #1
 8014252:	6163      	str	r3, [r4, #20]
 8014254:	b002      	add	sp, #8
 8014256:	bd70      	pop	{r4, r5, r6, pc}
 8014258:	ab01      	add	r3, sp, #4
 801425a:	466a      	mov	r2, sp
 801425c:	f7ff ffc9 	bl	80141f2 <__swhatbuf_r>
 8014260:	9900      	ldr	r1, [sp, #0]
 8014262:	4605      	mov	r5, r0
 8014264:	4630      	mov	r0, r6
 8014266:	f000 fc1d 	bl	8014aa4 <_malloc_r>
 801426a:	b948      	cbnz	r0, 8014280 <__smakebuf_r+0x44>
 801426c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014270:	059a      	lsls	r2, r3, #22
 8014272:	d4ef      	bmi.n	8014254 <__smakebuf_r+0x18>
 8014274:	f023 0303 	bic.w	r3, r3, #3
 8014278:	f043 0302 	orr.w	r3, r3, #2
 801427c:	81a3      	strh	r3, [r4, #12]
 801427e:	e7e3      	b.n	8014248 <__smakebuf_r+0xc>
 8014280:	4b0d      	ldr	r3, [pc, #52]	; (80142b8 <__smakebuf_r+0x7c>)
 8014282:	62b3      	str	r3, [r6, #40]	; 0x28
 8014284:	89a3      	ldrh	r3, [r4, #12]
 8014286:	6020      	str	r0, [r4, #0]
 8014288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801428c:	81a3      	strh	r3, [r4, #12]
 801428e:	9b00      	ldr	r3, [sp, #0]
 8014290:	6163      	str	r3, [r4, #20]
 8014292:	9b01      	ldr	r3, [sp, #4]
 8014294:	6120      	str	r0, [r4, #16]
 8014296:	b15b      	cbz	r3, 80142b0 <__smakebuf_r+0x74>
 8014298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801429c:	4630      	mov	r0, r6
 801429e:	f000 fd13 	bl	8014cc8 <_isatty_r>
 80142a2:	b128      	cbz	r0, 80142b0 <__smakebuf_r+0x74>
 80142a4:	89a3      	ldrh	r3, [r4, #12]
 80142a6:	f023 0303 	bic.w	r3, r3, #3
 80142aa:	f043 0301 	orr.w	r3, r3, #1
 80142ae:	81a3      	strh	r3, [r4, #12]
 80142b0:	89a0      	ldrh	r0, [r4, #12]
 80142b2:	4305      	orrs	r5, r0
 80142b4:	81a5      	strh	r5, [r4, #12]
 80142b6:	e7cd      	b.n	8014254 <__smakebuf_r+0x18>
 80142b8:	08014041 	.word	0x08014041

080142bc <malloc>:
 80142bc:	4b02      	ldr	r3, [pc, #8]	; (80142c8 <malloc+0xc>)
 80142be:	4601      	mov	r1, r0
 80142c0:	6818      	ldr	r0, [r3, #0]
 80142c2:	f000 bbef 	b.w	8014aa4 <_malloc_r>
 80142c6:	bf00      	nop
 80142c8:	24000240 	.word	0x24000240

080142cc <memcpy>:
 80142cc:	440a      	add	r2, r1
 80142ce:	4291      	cmp	r1, r2
 80142d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80142d4:	d100      	bne.n	80142d8 <memcpy+0xc>
 80142d6:	4770      	bx	lr
 80142d8:	b510      	push	{r4, lr}
 80142da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80142e2:	4291      	cmp	r1, r2
 80142e4:	d1f9      	bne.n	80142da <memcpy+0xe>
 80142e6:	bd10      	pop	{r4, pc}

080142e8 <_Balloc>:
 80142e8:	b570      	push	{r4, r5, r6, lr}
 80142ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80142ec:	4604      	mov	r4, r0
 80142ee:	460d      	mov	r5, r1
 80142f0:	b976      	cbnz	r6, 8014310 <_Balloc+0x28>
 80142f2:	2010      	movs	r0, #16
 80142f4:	f7ff ffe2 	bl	80142bc <malloc>
 80142f8:	4602      	mov	r2, r0
 80142fa:	6260      	str	r0, [r4, #36]	; 0x24
 80142fc:	b920      	cbnz	r0, 8014308 <_Balloc+0x20>
 80142fe:	4b18      	ldr	r3, [pc, #96]	; (8014360 <_Balloc+0x78>)
 8014300:	4818      	ldr	r0, [pc, #96]	; (8014364 <_Balloc+0x7c>)
 8014302:	2166      	movs	r1, #102	; 0x66
 8014304:	f000 fc8e 	bl	8014c24 <__assert_func>
 8014308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801430c:	6006      	str	r6, [r0, #0]
 801430e:	60c6      	str	r6, [r0, #12]
 8014310:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014312:	68f3      	ldr	r3, [r6, #12]
 8014314:	b183      	cbz	r3, 8014338 <_Balloc+0x50>
 8014316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801431e:	b9b8      	cbnz	r0, 8014350 <_Balloc+0x68>
 8014320:	2101      	movs	r1, #1
 8014322:	fa01 f605 	lsl.w	r6, r1, r5
 8014326:	1d72      	adds	r2, r6, #5
 8014328:	0092      	lsls	r2, r2, #2
 801432a:	4620      	mov	r0, r4
 801432c:	f000 fb5a 	bl	80149e4 <_calloc_r>
 8014330:	b160      	cbz	r0, 801434c <_Balloc+0x64>
 8014332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014336:	e00e      	b.n	8014356 <_Balloc+0x6e>
 8014338:	2221      	movs	r2, #33	; 0x21
 801433a:	2104      	movs	r1, #4
 801433c:	4620      	mov	r0, r4
 801433e:	f000 fb51 	bl	80149e4 <_calloc_r>
 8014342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014344:	60f0      	str	r0, [r6, #12]
 8014346:	68db      	ldr	r3, [r3, #12]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d1e4      	bne.n	8014316 <_Balloc+0x2e>
 801434c:	2000      	movs	r0, #0
 801434e:	bd70      	pop	{r4, r5, r6, pc}
 8014350:	6802      	ldr	r2, [r0, #0]
 8014352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014356:	2300      	movs	r3, #0
 8014358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801435c:	e7f7      	b.n	801434e <_Balloc+0x66>
 801435e:	bf00      	nop
 8014360:	08016c8d 	.word	0x08016c8d
 8014364:	08016d74 	.word	0x08016d74

08014368 <_Bfree>:
 8014368:	b570      	push	{r4, r5, r6, lr}
 801436a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801436c:	4605      	mov	r5, r0
 801436e:	460c      	mov	r4, r1
 8014370:	b976      	cbnz	r6, 8014390 <_Bfree+0x28>
 8014372:	2010      	movs	r0, #16
 8014374:	f7ff ffa2 	bl	80142bc <malloc>
 8014378:	4602      	mov	r2, r0
 801437a:	6268      	str	r0, [r5, #36]	; 0x24
 801437c:	b920      	cbnz	r0, 8014388 <_Bfree+0x20>
 801437e:	4b09      	ldr	r3, [pc, #36]	; (80143a4 <_Bfree+0x3c>)
 8014380:	4809      	ldr	r0, [pc, #36]	; (80143a8 <_Bfree+0x40>)
 8014382:	218a      	movs	r1, #138	; 0x8a
 8014384:	f000 fc4e 	bl	8014c24 <__assert_func>
 8014388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801438c:	6006      	str	r6, [r0, #0]
 801438e:	60c6      	str	r6, [r0, #12]
 8014390:	b13c      	cbz	r4, 80143a2 <_Bfree+0x3a>
 8014392:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014394:	6862      	ldr	r2, [r4, #4]
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801439c:	6021      	str	r1, [r4, #0]
 801439e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80143a2:	bd70      	pop	{r4, r5, r6, pc}
 80143a4:	08016c8d 	.word	0x08016c8d
 80143a8:	08016d74 	.word	0x08016d74

080143ac <__multadd>:
 80143ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143b0:	690e      	ldr	r6, [r1, #16]
 80143b2:	4607      	mov	r7, r0
 80143b4:	4698      	mov	r8, r3
 80143b6:	460c      	mov	r4, r1
 80143b8:	f101 0014 	add.w	r0, r1, #20
 80143bc:	2300      	movs	r3, #0
 80143be:	6805      	ldr	r5, [r0, #0]
 80143c0:	b2a9      	uxth	r1, r5
 80143c2:	fb02 8101 	mla	r1, r2, r1, r8
 80143c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80143ca:	0c2d      	lsrs	r5, r5, #16
 80143cc:	fb02 c505 	mla	r5, r2, r5, ip
 80143d0:	b289      	uxth	r1, r1
 80143d2:	3301      	adds	r3, #1
 80143d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80143d8:	429e      	cmp	r6, r3
 80143da:	f840 1b04 	str.w	r1, [r0], #4
 80143de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80143e2:	dcec      	bgt.n	80143be <__multadd+0x12>
 80143e4:	f1b8 0f00 	cmp.w	r8, #0
 80143e8:	d022      	beq.n	8014430 <__multadd+0x84>
 80143ea:	68a3      	ldr	r3, [r4, #8]
 80143ec:	42b3      	cmp	r3, r6
 80143ee:	dc19      	bgt.n	8014424 <__multadd+0x78>
 80143f0:	6861      	ldr	r1, [r4, #4]
 80143f2:	4638      	mov	r0, r7
 80143f4:	3101      	adds	r1, #1
 80143f6:	f7ff ff77 	bl	80142e8 <_Balloc>
 80143fa:	4605      	mov	r5, r0
 80143fc:	b928      	cbnz	r0, 801440a <__multadd+0x5e>
 80143fe:	4602      	mov	r2, r0
 8014400:	4b0d      	ldr	r3, [pc, #52]	; (8014438 <__multadd+0x8c>)
 8014402:	480e      	ldr	r0, [pc, #56]	; (801443c <__multadd+0x90>)
 8014404:	21b5      	movs	r1, #181	; 0xb5
 8014406:	f000 fc0d 	bl	8014c24 <__assert_func>
 801440a:	6922      	ldr	r2, [r4, #16]
 801440c:	3202      	adds	r2, #2
 801440e:	f104 010c 	add.w	r1, r4, #12
 8014412:	0092      	lsls	r2, r2, #2
 8014414:	300c      	adds	r0, #12
 8014416:	f7ff ff59 	bl	80142cc <memcpy>
 801441a:	4621      	mov	r1, r4
 801441c:	4638      	mov	r0, r7
 801441e:	f7ff ffa3 	bl	8014368 <_Bfree>
 8014422:	462c      	mov	r4, r5
 8014424:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014428:	3601      	adds	r6, #1
 801442a:	f8c3 8014 	str.w	r8, [r3, #20]
 801442e:	6126      	str	r6, [r4, #16]
 8014430:	4620      	mov	r0, r4
 8014432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014436:	bf00      	nop
 8014438:	08016d03 	.word	0x08016d03
 801443c:	08016d74 	.word	0x08016d74

08014440 <__hi0bits>:
 8014440:	0c03      	lsrs	r3, r0, #16
 8014442:	041b      	lsls	r3, r3, #16
 8014444:	b9d3      	cbnz	r3, 801447c <__hi0bits+0x3c>
 8014446:	0400      	lsls	r0, r0, #16
 8014448:	2310      	movs	r3, #16
 801444a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801444e:	bf04      	itt	eq
 8014450:	0200      	lsleq	r0, r0, #8
 8014452:	3308      	addeq	r3, #8
 8014454:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014458:	bf04      	itt	eq
 801445a:	0100      	lsleq	r0, r0, #4
 801445c:	3304      	addeq	r3, #4
 801445e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014462:	bf04      	itt	eq
 8014464:	0080      	lsleq	r0, r0, #2
 8014466:	3302      	addeq	r3, #2
 8014468:	2800      	cmp	r0, #0
 801446a:	db05      	blt.n	8014478 <__hi0bits+0x38>
 801446c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014470:	f103 0301 	add.w	r3, r3, #1
 8014474:	bf08      	it	eq
 8014476:	2320      	moveq	r3, #32
 8014478:	4618      	mov	r0, r3
 801447a:	4770      	bx	lr
 801447c:	2300      	movs	r3, #0
 801447e:	e7e4      	b.n	801444a <__hi0bits+0xa>

08014480 <__lo0bits>:
 8014480:	6803      	ldr	r3, [r0, #0]
 8014482:	f013 0207 	ands.w	r2, r3, #7
 8014486:	4601      	mov	r1, r0
 8014488:	d00b      	beq.n	80144a2 <__lo0bits+0x22>
 801448a:	07da      	lsls	r2, r3, #31
 801448c:	d424      	bmi.n	80144d8 <__lo0bits+0x58>
 801448e:	0798      	lsls	r0, r3, #30
 8014490:	bf49      	itett	mi
 8014492:	085b      	lsrmi	r3, r3, #1
 8014494:	089b      	lsrpl	r3, r3, #2
 8014496:	2001      	movmi	r0, #1
 8014498:	600b      	strmi	r3, [r1, #0]
 801449a:	bf5c      	itt	pl
 801449c:	600b      	strpl	r3, [r1, #0]
 801449e:	2002      	movpl	r0, #2
 80144a0:	4770      	bx	lr
 80144a2:	b298      	uxth	r0, r3
 80144a4:	b9b0      	cbnz	r0, 80144d4 <__lo0bits+0x54>
 80144a6:	0c1b      	lsrs	r3, r3, #16
 80144a8:	2010      	movs	r0, #16
 80144aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80144ae:	bf04      	itt	eq
 80144b0:	0a1b      	lsreq	r3, r3, #8
 80144b2:	3008      	addeq	r0, #8
 80144b4:	071a      	lsls	r2, r3, #28
 80144b6:	bf04      	itt	eq
 80144b8:	091b      	lsreq	r3, r3, #4
 80144ba:	3004      	addeq	r0, #4
 80144bc:	079a      	lsls	r2, r3, #30
 80144be:	bf04      	itt	eq
 80144c0:	089b      	lsreq	r3, r3, #2
 80144c2:	3002      	addeq	r0, #2
 80144c4:	07da      	lsls	r2, r3, #31
 80144c6:	d403      	bmi.n	80144d0 <__lo0bits+0x50>
 80144c8:	085b      	lsrs	r3, r3, #1
 80144ca:	f100 0001 	add.w	r0, r0, #1
 80144ce:	d005      	beq.n	80144dc <__lo0bits+0x5c>
 80144d0:	600b      	str	r3, [r1, #0]
 80144d2:	4770      	bx	lr
 80144d4:	4610      	mov	r0, r2
 80144d6:	e7e8      	b.n	80144aa <__lo0bits+0x2a>
 80144d8:	2000      	movs	r0, #0
 80144da:	4770      	bx	lr
 80144dc:	2020      	movs	r0, #32
 80144de:	4770      	bx	lr

080144e0 <__i2b>:
 80144e0:	b510      	push	{r4, lr}
 80144e2:	460c      	mov	r4, r1
 80144e4:	2101      	movs	r1, #1
 80144e6:	f7ff feff 	bl	80142e8 <_Balloc>
 80144ea:	4602      	mov	r2, r0
 80144ec:	b928      	cbnz	r0, 80144fa <__i2b+0x1a>
 80144ee:	4b05      	ldr	r3, [pc, #20]	; (8014504 <__i2b+0x24>)
 80144f0:	4805      	ldr	r0, [pc, #20]	; (8014508 <__i2b+0x28>)
 80144f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80144f6:	f000 fb95 	bl	8014c24 <__assert_func>
 80144fa:	2301      	movs	r3, #1
 80144fc:	6144      	str	r4, [r0, #20]
 80144fe:	6103      	str	r3, [r0, #16]
 8014500:	bd10      	pop	{r4, pc}
 8014502:	bf00      	nop
 8014504:	08016d03 	.word	0x08016d03
 8014508:	08016d74 	.word	0x08016d74

0801450c <__multiply>:
 801450c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014510:	4614      	mov	r4, r2
 8014512:	690a      	ldr	r2, [r1, #16]
 8014514:	6923      	ldr	r3, [r4, #16]
 8014516:	429a      	cmp	r2, r3
 8014518:	bfb8      	it	lt
 801451a:	460b      	movlt	r3, r1
 801451c:	460d      	mov	r5, r1
 801451e:	bfbc      	itt	lt
 8014520:	4625      	movlt	r5, r4
 8014522:	461c      	movlt	r4, r3
 8014524:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014528:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801452c:	68ab      	ldr	r3, [r5, #8]
 801452e:	6869      	ldr	r1, [r5, #4]
 8014530:	eb0a 0709 	add.w	r7, sl, r9
 8014534:	42bb      	cmp	r3, r7
 8014536:	b085      	sub	sp, #20
 8014538:	bfb8      	it	lt
 801453a:	3101      	addlt	r1, #1
 801453c:	f7ff fed4 	bl	80142e8 <_Balloc>
 8014540:	b930      	cbnz	r0, 8014550 <__multiply+0x44>
 8014542:	4602      	mov	r2, r0
 8014544:	4b42      	ldr	r3, [pc, #264]	; (8014650 <__multiply+0x144>)
 8014546:	4843      	ldr	r0, [pc, #268]	; (8014654 <__multiply+0x148>)
 8014548:	f240 115d 	movw	r1, #349	; 0x15d
 801454c:	f000 fb6a 	bl	8014c24 <__assert_func>
 8014550:	f100 0614 	add.w	r6, r0, #20
 8014554:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014558:	4633      	mov	r3, r6
 801455a:	2200      	movs	r2, #0
 801455c:	4543      	cmp	r3, r8
 801455e:	d31e      	bcc.n	801459e <__multiply+0x92>
 8014560:	f105 0c14 	add.w	ip, r5, #20
 8014564:	f104 0314 	add.w	r3, r4, #20
 8014568:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801456c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014570:	9202      	str	r2, [sp, #8]
 8014572:	ebac 0205 	sub.w	r2, ip, r5
 8014576:	3a15      	subs	r2, #21
 8014578:	f022 0203 	bic.w	r2, r2, #3
 801457c:	3204      	adds	r2, #4
 801457e:	f105 0115 	add.w	r1, r5, #21
 8014582:	458c      	cmp	ip, r1
 8014584:	bf38      	it	cc
 8014586:	2204      	movcc	r2, #4
 8014588:	9201      	str	r2, [sp, #4]
 801458a:	9a02      	ldr	r2, [sp, #8]
 801458c:	9303      	str	r3, [sp, #12]
 801458e:	429a      	cmp	r2, r3
 8014590:	d808      	bhi.n	80145a4 <__multiply+0x98>
 8014592:	2f00      	cmp	r7, #0
 8014594:	dc55      	bgt.n	8014642 <__multiply+0x136>
 8014596:	6107      	str	r7, [r0, #16]
 8014598:	b005      	add	sp, #20
 801459a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801459e:	f843 2b04 	str.w	r2, [r3], #4
 80145a2:	e7db      	b.n	801455c <__multiply+0x50>
 80145a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80145a8:	f1ba 0f00 	cmp.w	sl, #0
 80145ac:	d020      	beq.n	80145f0 <__multiply+0xe4>
 80145ae:	f105 0e14 	add.w	lr, r5, #20
 80145b2:	46b1      	mov	r9, r6
 80145b4:	2200      	movs	r2, #0
 80145b6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80145ba:	f8d9 b000 	ldr.w	fp, [r9]
 80145be:	b2a1      	uxth	r1, r4
 80145c0:	fa1f fb8b 	uxth.w	fp, fp
 80145c4:	fb0a b101 	mla	r1, sl, r1, fp
 80145c8:	4411      	add	r1, r2
 80145ca:	f8d9 2000 	ldr.w	r2, [r9]
 80145ce:	0c24      	lsrs	r4, r4, #16
 80145d0:	0c12      	lsrs	r2, r2, #16
 80145d2:	fb0a 2404 	mla	r4, sl, r4, r2
 80145d6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80145da:	b289      	uxth	r1, r1
 80145dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80145e0:	45f4      	cmp	ip, lr
 80145e2:	f849 1b04 	str.w	r1, [r9], #4
 80145e6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80145ea:	d8e4      	bhi.n	80145b6 <__multiply+0xaa>
 80145ec:	9901      	ldr	r1, [sp, #4]
 80145ee:	5072      	str	r2, [r6, r1]
 80145f0:	9a03      	ldr	r2, [sp, #12]
 80145f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80145f6:	3304      	adds	r3, #4
 80145f8:	f1b9 0f00 	cmp.w	r9, #0
 80145fc:	d01f      	beq.n	801463e <__multiply+0x132>
 80145fe:	6834      	ldr	r4, [r6, #0]
 8014600:	f105 0114 	add.w	r1, r5, #20
 8014604:	46b6      	mov	lr, r6
 8014606:	f04f 0a00 	mov.w	sl, #0
 801460a:	880a      	ldrh	r2, [r1, #0]
 801460c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014610:	fb09 b202 	mla	r2, r9, r2, fp
 8014614:	4492      	add	sl, r2
 8014616:	b2a4      	uxth	r4, r4
 8014618:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801461c:	f84e 4b04 	str.w	r4, [lr], #4
 8014620:	f851 4b04 	ldr.w	r4, [r1], #4
 8014624:	f8be 2000 	ldrh.w	r2, [lr]
 8014628:	0c24      	lsrs	r4, r4, #16
 801462a:	fb09 2404 	mla	r4, r9, r4, r2
 801462e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014632:	458c      	cmp	ip, r1
 8014634:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014638:	d8e7      	bhi.n	801460a <__multiply+0xfe>
 801463a:	9a01      	ldr	r2, [sp, #4]
 801463c:	50b4      	str	r4, [r6, r2]
 801463e:	3604      	adds	r6, #4
 8014640:	e7a3      	b.n	801458a <__multiply+0x7e>
 8014642:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014646:	2b00      	cmp	r3, #0
 8014648:	d1a5      	bne.n	8014596 <__multiply+0x8a>
 801464a:	3f01      	subs	r7, #1
 801464c:	e7a1      	b.n	8014592 <__multiply+0x86>
 801464e:	bf00      	nop
 8014650:	08016d03 	.word	0x08016d03
 8014654:	08016d74 	.word	0x08016d74

08014658 <__pow5mult>:
 8014658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801465c:	4615      	mov	r5, r2
 801465e:	f012 0203 	ands.w	r2, r2, #3
 8014662:	4606      	mov	r6, r0
 8014664:	460f      	mov	r7, r1
 8014666:	d007      	beq.n	8014678 <__pow5mult+0x20>
 8014668:	4c25      	ldr	r4, [pc, #148]	; (8014700 <__pow5mult+0xa8>)
 801466a:	3a01      	subs	r2, #1
 801466c:	2300      	movs	r3, #0
 801466e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014672:	f7ff fe9b 	bl	80143ac <__multadd>
 8014676:	4607      	mov	r7, r0
 8014678:	10ad      	asrs	r5, r5, #2
 801467a:	d03d      	beq.n	80146f8 <__pow5mult+0xa0>
 801467c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801467e:	b97c      	cbnz	r4, 80146a0 <__pow5mult+0x48>
 8014680:	2010      	movs	r0, #16
 8014682:	f7ff fe1b 	bl	80142bc <malloc>
 8014686:	4602      	mov	r2, r0
 8014688:	6270      	str	r0, [r6, #36]	; 0x24
 801468a:	b928      	cbnz	r0, 8014698 <__pow5mult+0x40>
 801468c:	4b1d      	ldr	r3, [pc, #116]	; (8014704 <__pow5mult+0xac>)
 801468e:	481e      	ldr	r0, [pc, #120]	; (8014708 <__pow5mult+0xb0>)
 8014690:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014694:	f000 fac6 	bl	8014c24 <__assert_func>
 8014698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801469c:	6004      	str	r4, [r0, #0]
 801469e:	60c4      	str	r4, [r0, #12]
 80146a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80146a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80146a8:	b94c      	cbnz	r4, 80146be <__pow5mult+0x66>
 80146aa:	f240 2171 	movw	r1, #625	; 0x271
 80146ae:	4630      	mov	r0, r6
 80146b0:	f7ff ff16 	bl	80144e0 <__i2b>
 80146b4:	2300      	movs	r3, #0
 80146b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80146ba:	4604      	mov	r4, r0
 80146bc:	6003      	str	r3, [r0, #0]
 80146be:	f04f 0900 	mov.w	r9, #0
 80146c2:	07eb      	lsls	r3, r5, #31
 80146c4:	d50a      	bpl.n	80146dc <__pow5mult+0x84>
 80146c6:	4639      	mov	r1, r7
 80146c8:	4622      	mov	r2, r4
 80146ca:	4630      	mov	r0, r6
 80146cc:	f7ff ff1e 	bl	801450c <__multiply>
 80146d0:	4639      	mov	r1, r7
 80146d2:	4680      	mov	r8, r0
 80146d4:	4630      	mov	r0, r6
 80146d6:	f7ff fe47 	bl	8014368 <_Bfree>
 80146da:	4647      	mov	r7, r8
 80146dc:	106d      	asrs	r5, r5, #1
 80146de:	d00b      	beq.n	80146f8 <__pow5mult+0xa0>
 80146e0:	6820      	ldr	r0, [r4, #0]
 80146e2:	b938      	cbnz	r0, 80146f4 <__pow5mult+0x9c>
 80146e4:	4622      	mov	r2, r4
 80146e6:	4621      	mov	r1, r4
 80146e8:	4630      	mov	r0, r6
 80146ea:	f7ff ff0f 	bl	801450c <__multiply>
 80146ee:	6020      	str	r0, [r4, #0]
 80146f0:	f8c0 9000 	str.w	r9, [r0]
 80146f4:	4604      	mov	r4, r0
 80146f6:	e7e4      	b.n	80146c2 <__pow5mult+0x6a>
 80146f8:	4638      	mov	r0, r7
 80146fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146fe:	bf00      	nop
 8014700:	08016ec8 	.word	0x08016ec8
 8014704:	08016c8d 	.word	0x08016c8d
 8014708:	08016d74 	.word	0x08016d74

0801470c <__lshift>:
 801470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014710:	460c      	mov	r4, r1
 8014712:	6849      	ldr	r1, [r1, #4]
 8014714:	6923      	ldr	r3, [r4, #16]
 8014716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801471a:	68a3      	ldr	r3, [r4, #8]
 801471c:	4607      	mov	r7, r0
 801471e:	4691      	mov	r9, r2
 8014720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014724:	f108 0601 	add.w	r6, r8, #1
 8014728:	42b3      	cmp	r3, r6
 801472a:	db0b      	blt.n	8014744 <__lshift+0x38>
 801472c:	4638      	mov	r0, r7
 801472e:	f7ff fddb 	bl	80142e8 <_Balloc>
 8014732:	4605      	mov	r5, r0
 8014734:	b948      	cbnz	r0, 801474a <__lshift+0x3e>
 8014736:	4602      	mov	r2, r0
 8014738:	4b28      	ldr	r3, [pc, #160]	; (80147dc <__lshift+0xd0>)
 801473a:	4829      	ldr	r0, [pc, #164]	; (80147e0 <__lshift+0xd4>)
 801473c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014740:	f000 fa70 	bl	8014c24 <__assert_func>
 8014744:	3101      	adds	r1, #1
 8014746:	005b      	lsls	r3, r3, #1
 8014748:	e7ee      	b.n	8014728 <__lshift+0x1c>
 801474a:	2300      	movs	r3, #0
 801474c:	f100 0114 	add.w	r1, r0, #20
 8014750:	f100 0210 	add.w	r2, r0, #16
 8014754:	4618      	mov	r0, r3
 8014756:	4553      	cmp	r3, sl
 8014758:	db33      	blt.n	80147c2 <__lshift+0xb6>
 801475a:	6920      	ldr	r0, [r4, #16]
 801475c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014760:	f104 0314 	add.w	r3, r4, #20
 8014764:	f019 091f 	ands.w	r9, r9, #31
 8014768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801476c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014770:	d02b      	beq.n	80147ca <__lshift+0xbe>
 8014772:	f1c9 0e20 	rsb	lr, r9, #32
 8014776:	468a      	mov	sl, r1
 8014778:	2200      	movs	r2, #0
 801477a:	6818      	ldr	r0, [r3, #0]
 801477c:	fa00 f009 	lsl.w	r0, r0, r9
 8014780:	4302      	orrs	r2, r0
 8014782:	f84a 2b04 	str.w	r2, [sl], #4
 8014786:	f853 2b04 	ldr.w	r2, [r3], #4
 801478a:	459c      	cmp	ip, r3
 801478c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014790:	d8f3      	bhi.n	801477a <__lshift+0x6e>
 8014792:	ebac 0304 	sub.w	r3, ip, r4
 8014796:	3b15      	subs	r3, #21
 8014798:	f023 0303 	bic.w	r3, r3, #3
 801479c:	3304      	adds	r3, #4
 801479e:	f104 0015 	add.w	r0, r4, #21
 80147a2:	4584      	cmp	ip, r0
 80147a4:	bf38      	it	cc
 80147a6:	2304      	movcc	r3, #4
 80147a8:	50ca      	str	r2, [r1, r3]
 80147aa:	b10a      	cbz	r2, 80147b0 <__lshift+0xa4>
 80147ac:	f108 0602 	add.w	r6, r8, #2
 80147b0:	3e01      	subs	r6, #1
 80147b2:	4638      	mov	r0, r7
 80147b4:	612e      	str	r6, [r5, #16]
 80147b6:	4621      	mov	r1, r4
 80147b8:	f7ff fdd6 	bl	8014368 <_Bfree>
 80147bc:	4628      	mov	r0, r5
 80147be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80147c6:	3301      	adds	r3, #1
 80147c8:	e7c5      	b.n	8014756 <__lshift+0x4a>
 80147ca:	3904      	subs	r1, #4
 80147cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80147d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80147d4:	459c      	cmp	ip, r3
 80147d6:	d8f9      	bhi.n	80147cc <__lshift+0xc0>
 80147d8:	e7ea      	b.n	80147b0 <__lshift+0xa4>
 80147da:	bf00      	nop
 80147dc:	08016d03 	.word	0x08016d03
 80147e0:	08016d74 	.word	0x08016d74

080147e4 <__mcmp>:
 80147e4:	b530      	push	{r4, r5, lr}
 80147e6:	6902      	ldr	r2, [r0, #16]
 80147e8:	690c      	ldr	r4, [r1, #16]
 80147ea:	1b12      	subs	r2, r2, r4
 80147ec:	d10e      	bne.n	801480c <__mcmp+0x28>
 80147ee:	f100 0314 	add.w	r3, r0, #20
 80147f2:	3114      	adds	r1, #20
 80147f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80147f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80147fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014800:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014804:	42a5      	cmp	r5, r4
 8014806:	d003      	beq.n	8014810 <__mcmp+0x2c>
 8014808:	d305      	bcc.n	8014816 <__mcmp+0x32>
 801480a:	2201      	movs	r2, #1
 801480c:	4610      	mov	r0, r2
 801480e:	bd30      	pop	{r4, r5, pc}
 8014810:	4283      	cmp	r3, r0
 8014812:	d3f3      	bcc.n	80147fc <__mcmp+0x18>
 8014814:	e7fa      	b.n	801480c <__mcmp+0x28>
 8014816:	f04f 32ff 	mov.w	r2, #4294967295
 801481a:	e7f7      	b.n	801480c <__mcmp+0x28>

0801481c <__mdiff>:
 801481c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014820:	460c      	mov	r4, r1
 8014822:	4606      	mov	r6, r0
 8014824:	4611      	mov	r1, r2
 8014826:	4620      	mov	r0, r4
 8014828:	4617      	mov	r7, r2
 801482a:	f7ff ffdb 	bl	80147e4 <__mcmp>
 801482e:	1e05      	subs	r5, r0, #0
 8014830:	d110      	bne.n	8014854 <__mdiff+0x38>
 8014832:	4629      	mov	r1, r5
 8014834:	4630      	mov	r0, r6
 8014836:	f7ff fd57 	bl	80142e8 <_Balloc>
 801483a:	b930      	cbnz	r0, 801484a <__mdiff+0x2e>
 801483c:	4b39      	ldr	r3, [pc, #228]	; (8014924 <__mdiff+0x108>)
 801483e:	4602      	mov	r2, r0
 8014840:	f240 2132 	movw	r1, #562	; 0x232
 8014844:	4838      	ldr	r0, [pc, #224]	; (8014928 <__mdiff+0x10c>)
 8014846:	f000 f9ed 	bl	8014c24 <__assert_func>
 801484a:	2301      	movs	r3, #1
 801484c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014854:	bfa4      	itt	ge
 8014856:	463b      	movge	r3, r7
 8014858:	4627      	movge	r7, r4
 801485a:	4630      	mov	r0, r6
 801485c:	6879      	ldr	r1, [r7, #4]
 801485e:	bfa6      	itte	ge
 8014860:	461c      	movge	r4, r3
 8014862:	2500      	movge	r5, #0
 8014864:	2501      	movlt	r5, #1
 8014866:	f7ff fd3f 	bl	80142e8 <_Balloc>
 801486a:	b920      	cbnz	r0, 8014876 <__mdiff+0x5a>
 801486c:	4b2d      	ldr	r3, [pc, #180]	; (8014924 <__mdiff+0x108>)
 801486e:	4602      	mov	r2, r0
 8014870:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014874:	e7e6      	b.n	8014844 <__mdiff+0x28>
 8014876:	693e      	ldr	r6, [r7, #16]
 8014878:	60c5      	str	r5, [r0, #12]
 801487a:	6925      	ldr	r5, [r4, #16]
 801487c:	f107 0114 	add.w	r1, r7, #20
 8014880:	f104 0914 	add.w	r9, r4, #20
 8014884:	f100 0e14 	add.w	lr, r0, #20
 8014888:	f107 0210 	add.w	r2, r7, #16
 801488c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014890:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014894:	46f2      	mov	sl, lr
 8014896:	2700      	movs	r7, #0
 8014898:	f859 3b04 	ldr.w	r3, [r9], #4
 801489c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80148a0:	fa1f f883 	uxth.w	r8, r3
 80148a4:	fa17 f78b 	uxtah	r7, r7, fp
 80148a8:	0c1b      	lsrs	r3, r3, #16
 80148aa:	eba7 0808 	sub.w	r8, r7, r8
 80148ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80148b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80148b6:	fa1f f888 	uxth.w	r8, r8
 80148ba:	141f      	asrs	r7, r3, #16
 80148bc:	454d      	cmp	r5, r9
 80148be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80148c2:	f84a 3b04 	str.w	r3, [sl], #4
 80148c6:	d8e7      	bhi.n	8014898 <__mdiff+0x7c>
 80148c8:	1b2b      	subs	r3, r5, r4
 80148ca:	3b15      	subs	r3, #21
 80148cc:	f023 0303 	bic.w	r3, r3, #3
 80148d0:	3304      	adds	r3, #4
 80148d2:	3415      	adds	r4, #21
 80148d4:	42a5      	cmp	r5, r4
 80148d6:	bf38      	it	cc
 80148d8:	2304      	movcc	r3, #4
 80148da:	4419      	add	r1, r3
 80148dc:	4473      	add	r3, lr
 80148de:	469e      	mov	lr, r3
 80148e0:	460d      	mov	r5, r1
 80148e2:	4565      	cmp	r5, ip
 80148e4:	d30e      	bcc.n	8014904 <__mdiff+0xe8>
 80148e6:	f10c 0203 	add.w	r2, ip, #3
 80148ea:	1a52      	subs	r2, r2, r1
 80148ec:	f022 0203 	bic.w	r2, r2, #3
 80148f0:	3903      	subs	r1, #3
 80148f2:	458c      	cmp	ip, r1
 80148f4:	bf38      	it	cc
 80148f6:	2200      	movcc	r2, #0
 80148f8:	441a      	add	r2, r3
 80148fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80148fe:	b17b      	cbz	r3, 8014920 <__mdiff+0x104>
 8014900:	6106      	str	r6, [r0, #16]
 8014902:	e7a5      	b.n	8014850 <__mdiff+0x34>
 8014904:	f855 8b04 	ldr.w	r8, [r5], #4
 8014908:	fa17 f488 	uxtah	r4, r7, r8
 801490c:	1422      	asrs	r2, r4, #16
 801490e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014912:	b2a4      	uxth	r4, r4
 8014914:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014918:	f84e 4b04 	str.w	r4, [lr], #4
 801491c:	1417      	asrs	r7, r2, #16
 801491e:	e7e0      	b.n	80148e2 <__mdiff+0xc6>
 8014920:	3e01      	subs	r6, #1
 8014922:	e7ea      	b.n	80148fa <__mdiff+0xde>
 8014924:	08016d03 	.word	0x08016d03
 8014928:	08016d74 	.word	0x08016d74

0801492c <__d2b>:
 801492c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014930:	4689      	mov	r9, r1
 8014932:	2101      	movs	r1, #1
 8014934:	ec57 6b10 	vmov	r6, r7, d0
 8014938:	4690      	mov	r8, r2
 801493a:	f7ff fcd5 	bl	80142e8 <_Balloc>
 801493e:	4604      	mov	r4, r0
 8014940:	b930      	cbnz	r0, 8014950 <__d2b+0x24>
 8014942:	4602      	mov	r2, r0
 8014944:	4b25      	ldr	r3, [pc, #148]	; (80149dc <__d2b+0xb0>)
 8014946:	4826      	ldr	r0, [pc, #152]	; (80149e0 <__d2b+0xb4>)
 8014948:	f240 310a 	movw	r1, #778	; 0x30a
 801494c:	f000 f96a 	bl	8014c24 <__assert_func>
 8014950:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014954:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014958:	bb35      	cbnz	r5, 80149a8 <__d2b+0x7c>
 801495a:	2e00      	cmp	r6, #0
 801495c:	9301      	str	r3, [sp, #4]
 801495e:	d028      	beq.n	80149b2 <__d2b+0x86>
 8014960:	4668      	mov	r0, sp
 8014962:	9600      	str	r6, [sp, #0]
 8014964:	f7ff fd8c 	bl	8014480 <__lo0bits>
 8014968:	9900      	ldr	r1, [sp, #0]
 801496a:	b300      	cbz	r0, 80149ae <__d2b+0x82>
 801496c:	9a01      	ldr	r2, [sp, #4]
 801496e:	f1c0 0320 	rsb	r3, r0, #32
 8014972:	fa02 f303 	lsl.w	r3, r2, r3
 8014976:	430b      	orrs	r3, r1
 8014978:	40c2      	lsrs	r2, r0
 801497a:	6163      	str	r3, [r4, #20]
 801497c:	9201      	str	r2, [sp, #4]
 801497e:	9b01      	ldr	r3, [sp, #4]
 8014980:	61a3      	str	r3, [r4, #24]
 8014982:	2b00      	cmp	r3, #0
 8014984:	bf14      	ite	ne
 8014986:	2202      	movne	r2, #2
 8014988:	2201      	moveq	r2, #1
 801498a:	6122      	str	r2, [r4, #16]
 801498c:	b1d5      	cbz	r5, 80149c4 <__d2b+0x98>
 801498e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014992:	4405      	add	r5, r0
 8014994:	f8c9 5000 	str.w	r5, [r9]
 8014998:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801499c:	f8c8 0000 	str.w	r0, [r8]
 80149a0:	4620      	mov	r0, r4
 80149a2:	b003      	add	sp, #12
 80149a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80149ac:	e7d5      	b.n	801495a <__d2b+0x2e>
 80149ae:	6161      	str	r1, [r4, #20]
 80149b0:	e7e5      	b.n	801497e <__d2b+0x52>
 80149b2:	a801      	add	r0, sp, #4
 80149b4:	f7ff fd64 	bl	8014480 <__lo0bits>
 80149b8:	9b01      	ldr	r3, [sp, #4]
 80149ba:	6163      	str	r3, [r4, #20]
 80149bc:	2201      	movs	r2, #1
 80149be:	6122      	str	r2, [r4, #16]
 80149c0:	3020      	adds	r0, #32
 80149c2:	e7e3      	b.n	801498c <__d2b+0x60>
 80149c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80149c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80149cc:	f8c9 0000 	str.w	r0, [r9]
 80149d0:	6918      	ldr	r0, [r3, #16]
 80149d2:	f7ff fd35 	bl	8014440 <__hi0bits>
 80149d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80149da:	e7df      	b.n	801499c <__d2b+0x70>
 80149dc:	08016d03 	.word	0x08016d03
 80149e0:	08016d74 	.word	0x08016d74

080149e4 <_calloc_r>:
 80149e4:	b513      	push	{r0, r1, r4, lr}
 80149e6:	434a      	muls	r2, r1
 80149e8:	4611      	mov	r1, r2
 80149ea:	9201      	str	r2, [sp, #4]
 80149ec:	f000 f85a 	bl	8014aa4 <_malloc_r>
 80149f0:	4604      	mov	r4, r0
 80149f2:	b118      	cbz	r0, 80149fc <_calloc_r+0x18>
 80149f4:	9a01      	ldr	r2, [sp, #4]
 80149f6:	2100      	movs	r1, #0
 80149f8:	f7fd feae 	bl	8012758 <memset>
 80149fc:	4620      	mov	r0, r4
 80149fe:	b002      	add	sp, #8
 8014a00:	bd10      	pop	{r4, pc}
	...

08014a04 <_free_r>:
 8014a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a06:	2900      	cmp	r1, #0
 8014a08:	d048      	beq.n	8014a9c <_free_r+0x98>
 8014a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a0e:	9001      	str	r0, [sp, #4]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	f1a1 0404 	sub.w	r4, r1, #4
 8014a16:	bfb8      	it	lt
 8014a18:	18e4      	addlt	r4, r4, r3
 8014a1a:	f000 f989 	bl	8014d30 <__malloc_lock>
 8014a1e:	4a20      	ldr	r2, [pc, #128]	; (8014aa0 <_free_r+0x9c>)
 8014a20:	9801      	ldr	r0, [sp, #4]
 8014a22:	6813      	ldr	r3, [r2, #0]
 8014a24:	4615      	mov	r5, r2
 8014a26:	b933      	cbnz	r3, 8014a36 <_free_r+0x32>
 8014a28:	6063      	str	r3, [r4, #4]
 8014a2a:	6014      	str	r4, [r2, #0]
 8014a2c:	b003      	add	sp, #12
 8014a2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a32:	f000 b983 	b.w	8014d3c <__malloc_unlock>
 8014a36:	42a3      	cmp	r3, r4
 8014a38:	d90b      	bls.n	8014a52 <_free_r+0x4e>
 8014a3a:	6821      	ldr	r1, [r4, #0]
 8014a3c:	1862      	adds	r2, r4, r1
 8014a3e:	4293      	cmp	r3, r2
 8014a40:	bf04      	itt	eq
 8014a42:	681a      	ldreq	r2, [r3, #0]
 8014a44:	685b      	ldreq	r3, [r3, #4]
 8014a46:	6063      	str	r3, [r4, #4]
 8014a48:	bf04      	itt	eq
 8014a4a:	1852      	addeq	r2, r2, r1
 8014a4c:	6022      	streq	r2, [r4, #0]
 8014a4e:	602c      	str	r4, [r5, #0]
 8014a50:	e7ec      	b.n	8014a2c <_free_r+0x28>
 8014a52:	461a      	mov	r2, r3
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	b10b      	cbz	r3, 8014a5c <_free_r+0x58>
 8014a58:	42a3      	cmp	r3, r4
 8014a5a:	d9fa      	bls.n	8014a52 <_free_r+0x4e>
 8014a5c:	6811      	ldr	r1, [r2, #0]
 8014a5e:	1855      	adds	r5, r2, r1
 8014a60:	42a5      	cmp	r5, r4
 8014a62:	d10b      	bne.n	8014a7c <_free_r+0x78>
 8014a64:	6824      	ldr	r4, [r4, #0]
 8014a66:	4421      	add	r1, r4
 8014a68:	1854      	adds	r4, r2, r1
 8014a6a:	42a3      	cmp	r3, r4
 8014a6c:	6011      	str	r1, [r2, #0]
 8014a6e:	d1dd      	bne.n	8014a2c <_free_r+0x28>
 8014a70:	681c      	ldr	r4, [r3, #0]
 8014a72:	685b      	ldr	r3, [r3, #4]
 8014a74:	6053      	str	r3, [r2, #4]
 8014a76:	4421      	add	r1, r4
 8014a78:	6011      	str	r1, [r2, #0]
 8014a7a:	e7d7      	b.n	8014a2c <_free_r+0x28>
 8014a7c:	d902      	bls.n	8014a84 <_free_r+0x80>
 8014a7e:	230c      	movs	r3, #12
 8014a80:	6003      	str	r3, [r0, #0]
 8014a82:	e7d3      	b.n	8014a2c <_free_r+0x28>
 8014a84:	6825      	ldr	r5, [r4, #0]
 8014a86:	1961      	adds	r1, r4, r5
 8014a88:	428b      	cmp	r3, r1
 8014a8a:	bf04      	itt	eq
 8014a8c:	6819      	ldreq	r1, [r3, #0]
 8014a8e:	685b      	ldreq	r3, [r3, #4]
 8014a90:	6063      	str	r3, [r4, #4]
 8014a92:	bf04      	itt	eq
 8014a94:	1949      	addeq	r1, r1, r5
 8014a96:	6021      	streq	r1, [r4, #0]
 8014a98:	6054      	str	r4, [r2, #4]
 8014a9a:	e7c7      	b.n	8014a2c <_free_r+0x28>
 8014a9c:	b003      	add	sp, #12
 8014a9e:	bd30      	pop	{r4, r5, pc}
 8014aa0:	24000bfc 	.word	0x24000bfc

08014aa4 <_malloc_r>:
 8014aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aa6:	1ccd      	adds	r5, r1, #3
 8014aa8:	f025 0503 	bic.w	r5, r5, #3
 8014aac:	3508      	adds	r5, #8
 8014aae:	2d0c      	cmp	r5, #12
 8014ab0:	bf38      	it	cc
 8014ab2:	250c      	movcc	r5, #12
 8014ab4:	2d00      	cmp	r5, #0
 8014ab6:	4606      	mov	r6, r0
 8014ab8:	db01      	blt.n	8014abe <_malloc_r+0x1a>
 8014aba:	42a9      	cmp	r1, r5
 8014abc:	d903      	bls.n	8014ac6 <_malloc_r+0x22>
 8014abe:	230c      	movs	r3, #12
 8014ac0:	6033      	str	r3, [r6, #0]
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ac6:	f000 f933 	bl	8014d30 <__malloc_lock>
 8014aca:	4921      	ldr	r1, [pc, #132]	; (8014b50 <_malloc_r+0xac>)
 8014acc:	680a      	ldr	r2, [r1, #0]
 8014ace:	4614      	mov	r4, r2
 8014ad0:	b99c      	cbnz	r4, 8014afa <_malloc_r+0x56>
 8014ad2:	4f20      	ldr	r7, [pc, #128]	; (8014b54 <_malloc_r+0xb0>)
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	b923      	cbnz	r3, 8014ae2 <_malloc_r+0x3e>
 8014ad8:	4621      	mov	r1, r4
 8014ada:	4630      	mov	r0, r6
 8014adc:	f000 f83c 	bl	8014b58 <_sbrk_r>
 8014ae0:	6038      	str	r0, [r7, #0]
 8014ae2:	4629      	mov	r1, r5
 8014ae4:	4630      	mov	r0, r6
 8014ae6:	f000 f837 	bl	8014b58 <_sbrk_r>
 8014aea:	1c43      	adds	r3, r0, #1
 8014aec:	d123      	bne.n	8014b36 <_malloc_r+0x92>
 8014aee:	230c      	movs	r3, #12
 8014af0:	6033      	str	r3, [r6, #0]
 8014af2:	4630      	mov	r0, r6
 8014af4:	f000 f922 	bl	8014d3c <__malloc_unlock>
 8014af8:	e7e3      	b.n	8014ac2 <_malloc_r+0x1e>
 8014afa:	6823      	ldr	r3, [r4, #0]
 8014afc:	1b5b      	subs	r3, r3, r5
 8014afe:	d417      	bmi.n	8014b30 <_malloc_r+0x8c>
 8014b00:	2b0b      	cmp	r3, #11
 8014b02:	d903      	bls.n	8014b0c <_malloc_r+0x68>
 8014b04:	6023      	str	r3, [r4, #0]
 8014b06:	441c      	add	r4, r3
 8014b08:	6025      	str	r5, [r4, #0]
 8014b0a:	e004      	b.n	8014b16 <_malloc_r+0x72>
 8014b0c:	6863      	ldr	r3, [r4, #4]
 8014b0e:	42a2      	cmp	r2, r4
 8014b10:	bf0c      	ite	eq
 8014b12:	600b      	streq	r3, [r1, #0]
 8014b14:	6053      	strne	r3, [r2, #4]
 8014b16:	4630      	mov	r0, r6
 8014b18:	f000 f910 	bl	8014d3c <__malloc_unlock>
 8014b1c:	f104 000b 	add.w	r0, r4, #11
 8014b20:	1d23      	adds	r3, r4, #4
 8014b22:	f020 0007 	bic.w	r0, r0, #7
 8014b26:	1ac2      	subs	r2, r0, r3
 8014b28:	d0cc      	beq.n	8014ac4 <_malloc_r+0x20>
 8014b2a:	1a1b      	subs	r3, r3, r0
 8014b2c:	50a3      	str	r3, [r4, r2]
 8014b2e:	e7c9      	b.n	8014ac4 <_malloc_r+0x20>
 8014b30:	4622      	mov	r2, r4
 8014b32:	6864      	ldr	r4, [r4, #4]
 8014b34:	e7cc      	b.n	8014ad0 <_malloc_r+0x2c>
 8014b36:	1cc4      	adds	r4, r0, #3
 8014b38:	f024 0403 	bic.w	r4, r4, #3
 8014b3c:	42a0      	cmp	r0, r4
 8014b3e:	d0e3      	beq.n	8014b08 <_malloc_r+0x64>
 8014b40:	1a21      	subs	r1, r4, r0
 8014b42:	4630      	mov	r0, r6
 8014b44:	f000 f808 	bl	8014b58 <_sbrk_r>
 8014b48:	3001      	adds	r0, #1
 8014b4a:	d1dd      	bne.n	8014b08 <_malloc_r+0x64>
 8014b4c:	e7cf      	b.n	8014aee <_malloc_r+0x4a>
 8014b4e:	bf00      	nop
 8014b50:	24000bfc 	.word	0x24000bfc
 8014b54:	24000c00 	.word	0x24000c00

08014b58 <_sbrk_r>:
 8014b58:	b538      	push	{r3, r4, r5, lr}
 8014b5a:	4d06      	ldr	r5, [pc, #24]	; (8014b74 <_sbrk_r+0x1c>)
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	4604      	mov	r4, r0
 8014b60:	4608      	mov	r0, r1
 8014b62:	602b      	str	r3, [r5, #0]
 8014b64:	f7f0 fcea 	bl	800553c <_sbrk>
 8014b68:	1c43      	adds	r3, r0, #1
 8014b6a:	d102      	bne.n	8014b72 <_sbrk_r+0x1a>
 8014b6c:	682b      	ldr	r3, [r5, #0]
 8014b6e:	b103      	cbz	r3, 8014b72 <_sbrk_r+0x1a>
 8014b70:	6023      	str	r3, [r4, #0]
 8014b72:	bd38      	pop	{r3, r4, r5, pc}
 8014b74:	24001760 	.word	0x24001760

08014b78 <__sread>:
 8014b78:	b510      	push	{r4, lr}
 8014b7a:	460c      	mov	r4, r1
 8014b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b80:	f000 fa3c 	bl	8014ffc <_read_r>
 8014b84:	2800      	cmp	r0, #0
 8014b86:	bfab      	itete	ge
 8014b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8014b8c:	181b      	addge	r3, r3, r0
 8014b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b92:	bfac      	ite	ge
 8014b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b96:	81a3      	strhlt	r3, [r4, #12]
 8014b98:	bd10      	pop	{r4, pc}

08014b9a <__swrite>:
 8014b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b9e:	461f      	mov	r7, r3
 8014ba0:	898b      	ldrh	r3, [r1, #12]
 8014ba2:	05db      	lsls	r3, r3, #23
 8014ba4:	4605      	mov	r5, r0
 8014ba6:	460c      	mov	r4, r1
 8014ba8:	4616      	mov	r6, r2
 8014baa:	d505      	bpl.n	8014bb8 <__swrite+0x1e>
 8014bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bb0:	2302      	movs	r3, #2
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	f000 f898 	bl	8014ce8 <_lseek_r>
 8014bb8:	89a3      	ldrh	r3, [r4, #12]
 8014bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014bc2:	81a3      	strh	r3, [r4, #12]
 8014bc4:	4632      	mov	r2, r6
 8014bc6:	463b      	mov	r3, r7
 8014bc8:	4628      	mov	r0, r5
 8014bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bce:	f000 b817 	b.w	8014c00 <_write_r>

08014bd2 <__sseek>:
 8014bd2:	b510      	push	{r4, lr}
 8014bd4:	460c      	mov	r4, r1
 8014bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bda:	f000 f885 	bl	8014ce8 <_lseek_r>
 8014bde:	1c43      	adds	r3, r0, #1
 8014be0:	89a3      	ldrh	r3, [r4, #12]
 8014be2:	bf15      	itete	ne
 8014be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8014be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014bee:	81a3      	strheq	r3, [r4, #12]
 8014bf0:	bf18      	it	ne
 8014bf2:	81a3      	strhne	r3, [r4, #12]
 8014bf4:	bd10      	pop	{r4, pc}

08014bf6 <__sclose>:
 8014bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bfa:	f000 b831 	b.w	8014c60 <_close_r>
	...

08014c00 <_write_r>:
 8014c00:	b538      	push	{r3, r4, r5, lr}
 8014c02:	4d07      	ldr	r5, [pc, #28]	; (8014c20 <_write_r+0x20>)
 8014c04:	4604      	mov	r4, r0
 8014c06:	4608      	mov	r0, r1
 8014c08:	4611      	mov	r1, r2
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	602a      	str	r2, [r5, #0]
 8014c0e:	461a      	mov	r2, r3
 8014c10:	f7f0 fc43 	bl	800549a <_write>
 8014c14:	1c43      	adds	r3, r0, #1
 8014c16:	d102      	bne.n	8014c1e <_write_r+0x1e>
 8014c18:	682b      	ldr	r3, [r5, #0]
 8014c1a:	b103      	cbz	r3, 8014c1e <_write_r+0x1e>
 8014c1c:	6023      	str	r3, [r4, #0]
 8014c1e:	bd38      	pop	{r3, r4, r5, pc}
 8014c20:	24001760 	.word	0x24001760

08014c24 <__assert_func>:
 8014c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c26:	4614      	mov	r4, r2
 8014c28:	461a      	mov	r2, r3
 8014c2a:	4b09      	ldr	r3, [pc, #36]	; (8014c50 <__assert_func+0x2c>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	4605      	mov	r5, r0
 8014c30:	68d8      	ldr	r0, [r3, #12]
 8014c32:	b14c      	cbz	r4, 8014c48 <__assert_func+0x24>
 8014c34:	4b07      	ldr	r3, [pc, #28]	; (8014c54 <__assert_func+0x30>)
 8014c36:	9100      	str	r1, [sp, #0]
 8014c38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014c3c:	4906      	ldr	r1, [pc, #24]	; (8014c58 <__assert_func+0x34>)
 8014c3e:	462b      	mov	r3, r5
 8014c40:	f000 f81e 	bl	8014c80 <fiprintf>
 8014c44:	f000 f9f9 	bl	801503a <abort>
 8014c48:	4b04      	ldr	r3, [pc, #16]	; (8014c5c <__assert_func+0x38>)
 8014c4a:	461c      	mov	r4, r3
 8014c4c:	e7f3      	b.n	8014c36 <__assert_func+0x12>
 8014c4e:	bf00      	nop
 8014c50:	24000240 	.word	0x24000240
 8014c54:	08016ed4 	.word	0x08016ed4
 8014c58:	08016ee1 	.word	0x08016ee1
 8014c5c:	08016f0f 	.word	0x08016f0f

08014c60 <_close_r>:
 8014c60:	b538      	push	{r3, r4, r5, lr}
 8014c62:	4d06      	ldr	r5, [pc, #24]	; (8014c7c <_close_r+0x1c>)
 8014c64:	2300      	movs	r3, #0
 8014c66:	4604      	mov	r4, r0
 8014c68:	4608      	mov	r0, r1
 8014c6a:	602b      	str	r3, [r5, #0]
 8014c6c:	f7f0 fc31 	bl	80054d2 <_close>
 8014c70:	1c43      	adds	r3, r0, #1
 8014c72:	d102      	bne.n	8014c7a <_close_r+0x1a>
 8014c74:	682b      	ldr	r3, [r5, #0]
 8014c76:	b103      	cbz	r3, 8014c7a <_close_r+0x1a>
 8014c78:	6023      	str	r3, [r4, #0]
 8014c7a:	bd38      	pop	{r3, r4, r5, pc}
 8014c7c:	24001760 	.word	0x24001760

08014c80 <fiprintf>:
 8014c80:	b40e      	push	{r1, r2, r3}
 8014c82:	b503      	push	{r0, r1, lr}
 8014c84:	4601      	mov	r1, r0
 8014c86:	ab03      	add	r3, sp, #12
 8014c88:	4805      	ldr	r0, [pc, #20]	; (8014ca0 <fiprintf+0x20>)
 8014c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c8e:	6800      	ldr	r0, [r0, #0]
 8014c90:	9301      	str	r3, [sp, #4]
 8014c92:	f000 f883 	bl	8014d9c <_vfiprintf_r>
 8014c96:	b002      	add	sp, #8
 8014c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c9c:	b003      	add	sp, #12
 8014c9e:	4770      	bx	lr
 8014ca0:	24000240 	.word	0x24000240

08014ca4 <_fstat_r>:
 8014ca4:	b538      	push	{r3, r4, r5, lr}
 8014ca6:	4d07      	ldr	r5, [pc, #28]	; (8014cc4 <_fstat_r+0x20>)
 8014ca8:	2300      	movs	r3, #0
 8014caa:	4604      	mov	r4, r0
 8014cac:	4608      	mov	r0, r1
 8014cae:	4611      	mov	r1, r2
 8014cb0:	602b      	str	r3, [r5, #0]
 8014cb2:	f7f0 fc1a 	bl	80054ea <_fstat>
 8014cb6:	1c43      	adds	r3, r0, #1
 8014cb8:	d102      	bne.n	8014cc0 <_fstat_r+0x1c>
 8014cba:	682b      	ldr	r3, [r5, #0]
 8014cbc:	b103      	cbz	r3, 8014cc0 <_fstat_r+0x1c>
 8014cbe:	6023      	str	r3, [r4, #0]
 8014cc0:	bd38      	pop	{r3, r4, r5, pc}
 8014cc2:	bf00      	nop
 8014cc4:	24001760 	.word	0x24001760

08014cc8 <_isatty_r>:
 8014cc8:	b538      	push	{r3, r4, r5, lr}
 8014cca:	4d06      	ldr	r5, [pc, #24]	; (8014ce4 <_isatty_r+0x1c>)
 8014ccc:	2300      	movs	r3, #0
 8014cce:	4604      	mov	r4, r0
 8014cd0:	4608      	mov	r0, r1
 8014cd2:	602b      	str	r3, [r5, #0]
 8014cd4:	f7f0 fc19 	bl	800550a <_isatty>
 8014cd8:	1c43      	adds	r3, r0, #1
 8014cda:	d102      	bne.n	8014ce2 <_isatty_r+0x1a>
 8014cdc:	682b      	ldr	r3, [r5, #0]
 8014cde:	b103      	cbz	r3, 8014ce2 <_isatty_r+0x1a>
 8014ce0:	6023      	str	r3, [r4, #0]
 8014ce2:	bd38      	pop	{r3, r4, r5, pc}
 8014ce4:	24001760 	.word	0x24001760

08014ce8 <_lseek_r>:
 8014ce8:	b538      	push	{r3, r4, r5, lr}
 8014cea:	4d07      	ldr	r5, [pc, #28]	; (8014d08 <_lseek_r+0x20>)
 8014cec:	4604      	mov	r4, r0
 8014cee:	4608      	mov	r0, r1
 8014cf0:	4611      	mov	r1, r2
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	602a      	str	r2, [r5, #0]
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	f7f0 fc12 	bl	8005520 <_lseek>
 8014cfc:	1c43      	adds	r3, r0, #1
 8014cfe:	d102      	bne.n	8014d06 <_lseek_r+0x1e>
 8014d00:	682b      	ldr	r3, [r5, #0]
 8014d02:	b103      	cbz	r3, 8014d06 <_lseek_r+0x1e>
 8014d04:	6023      	str	r3, [r4, #0]
 8014d06:	bd38      	pop	{r3, r4, r5, pc}
 8014d08:	24001760 	.word	0x24001760

08014d0c <__ascii_mbtowc>:
 8014d0c:	b082      	sub	sp, #8
 8014d0e:	b901      	cbnz	r1, 8014d12 <__ascii_mbtowc+0x6>
 8014d10:	a901      	add	r1, sp, #4
 8014d12:	b142      	cbz	r2, 8014d26 <__ascii_mbtowc+0x1a>
 8014d14:	b14b      	cbz	r3, 8014d2a <__ascii_mbtowc+0x1e>
 8014d16:	7813      	ldrb	r3, [r2, #0]
 8014d18:	600b      	str	r3, [r1, #0]
 8014d1a:	7812      	ldrb	r2, [r2, #0]
 8014d1c:	1e10      	subs	r0, r2, #0
 8014d1e:	bf18      	it	ne
 8014d20:	2001      	movne	r0, #1
 8014d22:	b002      	add	sp, #8
 8014d24:	4770      	bx	lr
 8014d26:	4610      	mov	r0, r2
 8014d28:	e7fb      	b.n	8014d22 <__ascii_mbtowc+0x16>
 8014d2a:	f06f 0001 	mvn.w	r0, #1
 8014d2e:	e7f8      	b.n	8014d22 <__ascii_mbtowc+0x16>

08014d30 <__malloc_lock>:
 8014d30:	4801      	ldr	r0, [pc, #4]	; (8014d38 <__malloc_lock+0x8>)
 8014d32:	f7ff ba5c 	b.w	80141ee <__retarget_lock_acquire_recursive>
 8014d36:	bf00      	nop
 8014d38:	24001758 	.word	0x24001758

08014d3c <__malloc_unlock>:
 8014d3c:	4801      	ldr	r0, [pc, #4]	; (8014d44 <__malloc_unlock+0x8>)
 8014d3e:	f7ff ba57 	b.w	80141f0 <__retarget_lock_release_recursive>
 8014d42:	bf00      	nop
 8014d44:	24001758 	.word	0x24001758

08014d48 <__sfputc_r>:
 8014d48:	6893      	ldr	r3, [r2, #8]
 8014d4a:	3b01      	subs	r3, #1
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	b410      	push	{r4}
 8014d50:	6093      	str	r3, [r2, #8]
 8014d52:	da08      	bge.n	8014d66 <__sfputc_r+0x1e>
 8014d54:	6994      	ldr	r4, [r2, #24]
 8014d56:	42a3      	cmp	r3, r4
 8014d58:	db01      	blt.n	8014d5e <__sfputc_r+0x16>
 8014d5a:	290a      	cmp	r1, #10
 8014d5c:	d103      	bne.n	8014d66 <__sfputc_r+0x1e>
 8014d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d62:	f7fe b9b9 	b.w	80130d8 <__swbuf_r>
 8014d66:	6813      	ldr	r3, [r2, #0]
 8014d68:	1c58      	adds	r0, r3, #1
 8014d6a:	6010      	str	r0, [r2, #0]
 8014d6c:	7019      	strb	r1, [r3, #0]
 8014d6e:	4608      	mov	r0, r1
 8014d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d74:	4770      	bx	lr

08014d76 <__sfputs_r>:
 8014d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d78:	4606      	mov	r6, r0
 8014d7a:	460f      	mov	r7, r1
 8014d7c:	4614      	mov	r4, r2
 8014d7e:	18d5      	adds	r5, r2, r3
 8014d80:	42ac      	cmp	r4, r5
 8014d82:	d101      	bne.n	8014d88 <__sfputs_r+0x12>
 8014d84:	2000      	movs	r0, #0
 8014d86:	e007      	b.n	8014d98 <__sfputs_r+0x22>
 8014d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d8c:	463a      	mov	r2, r7
 8014d8e:	4630      	mov	r0, r6
 8014d90:	f7ff ffda 	bl	8014d48 <__sfputc_r>
 8014d94:	1c43      	adds	r3, r0, #1
 8014d96:	d1f3      	bne.n	8014d80 <__sfputs_r+0xa>
 8014d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d9c <_vfiprintf_r>:
 8014d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da0:	460d      	mov	r5, r1
 8014da2:	b09d      	sub	sp, #116	; 0x74
 8014da4:	4614      	mov	r4, r2
 8014da6:	4698      	mov	r8, r3
 8014da8:	4606      	mov	r6, r0
 8014daa:	b118      	cbz	r0, 8014db4 <_vfiprintf_r+0x18>
 8014dac:	6983      	ldr	r3, [r0, #24]
 8014dae:	b90b      	cbnz	r3, 8014db4 <_vfiprintf_r+0x18>
 8014db0:	f7ff f97a 	bl	80140a8 <__sinit>
 8014db4:	4b89      	ldr	r3, [pc, #548]	; (8014fdc <_vfiprintf_r+0x240>)
 8014db6:	429d      	cmp	r5, r3
 8014db8:	d11b      	bne.n	8014df2 <_vfiprintf_r+0x56>
 8014dba:	6875      	ldr	r5, [r6, #4]
 8014dbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014dbe:	07d9      	lsls	r1, r3, #31
 8014dc0:	d405      	bmi.n	8014dce <_vfiprintf_r+0x32>
 8014dc2:	89ab      	ldrh	r3, [r5, #12]
 8014dc4:	059a      	lsls	r2, r3, #22
 8014dc6:	d402      	bmi.n	8014dce <_vfiprintf_r+0x32>
 8014dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014dca:	f7ff fa10 	bl	80141ee <__retarget_lock_acquire_recursive>
 8014dce:	89ab      	ldrh	r3, [r5, #12]
 8014dd0:	071b      	lsls	r3, r3, #28
 8014dd2:	d501      	bpl.n	8014dd8 <_vfiprintf_r+0x3c>
 8014dd4:	692b      	ldr	r3, [r5, #16]
 8014dd6:	b9eb      	cbnz	r3, 8014e14 <_vfiprintf_r+0x78>
 8014dd8:	4629      	mov	r1, r5
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f7fe f9ce 	bl	801317c <__swsetup_r>
 8014de0:	b1c0      	cbz	r0, 8014e14 <_vfiprintf_r+0x78>
 8014de2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014de4:	07dc      	lsls	r4, r3, #31
 8014de6:	d50e      	bpl.n	8014e06 <_vfiprintf_r+0x6a>
 8014de8:	f04f 30ff 	mov.w	r0, #4294967295
 8014dec:	b01d      	add	sp, #116	; 0x74
 8014dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df2:	4b7b      	ldr	r3, [pc, #492]	; (8014fe0 <_vfiprintf_r+0x244>)
 8014df4:	429d      	cmp	r5, r3
 8014df6:	d101      	bne.n	8014dfc <_vfiprintf_r+0x60>
 8014df8:	68b5      	ldr	r5, [r6, #8]
 8014dfa:	e7df      	b.n	8014dbc <_vfiprintf_r+0x20>
 8014dfc:	4b79      	ldr	r3, [pc, #484]	; (8014fe4 <_vfiprintf_r+0x248>)
 8014dfe:	429d      	cmp	r5, r3
 8014e00:	bf08      	it	eq
 8014e02:	68f5      	ldreq	r5, [r6, #12]
 8014e04:	e7da      	b.n	8014dbc <_vfiprintf_r+0x20>
 8014e06:	89ab      	ldrh	r3, [r5, #12]
 8014e08:	0598      	lsls	r0, r3, #22
 8014e0a:	d4ed      	bmi.n	8014de8 <_vfiprintf_r+0x4c>
 8014e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e0e:	f7ff f9ef 	bl	80141f0 <__retarget_lock_release_recursive>
 8014e12:	e7e9      	b.n	8014de8 <_vfiprintf_r+0x4c>
 8014e14:	2300      	movs	r3, #0
 8014e16:	9309      	str	r3, [sp, #36]	; 0x24
 8014e18:	2320      	movs	r3, #32
 8014e1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e22:	2330      	movs	r3, #48	; 0x30
 8014e24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014fe8 <_vfiprintf_r+0x24c>
 8014e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e2c:	f04f 0901 	mov.w	r9, #1
 8014e30:	4623      	mov	r3, r4
 8014e32:	469a      	mov	sl, r3
 8014e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e38:	b10a      	cbz	r2, 8014e3e <_vfiprintf_r+0xa2>
 8014e3a:	2a25      	cmp	r2, #37	; 0x25
 8014e3c:	d1f9      	bne.n	8014e32 <_vfiprintf_r+0x96>
 8014e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8014e42:	d00b      	beq.n	8014e5c <_vfiprintf_r+0xc0>
 8014e44:	465b      	mov	r3, fp
 8014e46:	4622      	mov	r2, r4
 8014e48:	4629      	mov	r1, r5
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	f7ff ff93 	bl	8014d76 <__sfputs_r>
 8014e50:	3001      	adds	r0, #1
 8014e52:	f000 80aa 	beq.w	8014faa <_vfiprintf_r+0x20e>
 8014e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e58:	445a      	add	r2, fp
 8014e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8014e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	f000 80a2 	beq.w	8014faa <_vfiprintf_r+0x20e>
 8014e66:	2300      	movs	r3, #0
 8014e68:	f04f 32ff 	mov.w	r2, #4294967295
 8014e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e70:	f10a 0a01 	add.w	sl, sl, #1
 8014e74:	9304      	str	r3, [sp, #16]
 8014e76:	9307      	str	r3, [sp, #28]
 8014e78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e7c:	931a      	str	r3, [sp, #104]	; 0x68
 8014e7e:	4654      	mov	r4, sl
 8014e80:	2205      	movs	r2, #5
 8014e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e86:	4858      	ldr	r0, [pc, #352]	; (8014fe8 <_vfiprintf_r+0x24c>)
 8014e88:	f7eb fa32 	bl	80002f0 <memchr>
 8014e8c:	9a04      	ldr	r2, [sp, #16]
 8014e8e:	b9d8      	cbnz	r0, 8014ec8 <_vfiprintf_r+0x12c>
 8014e90:	06d1      	lsls	r1, r2, #27
 8014e92:	bf44      	itt	mi
 8014e94:	2320      	movmi	r3, #32
 8014e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e9a:	0713      	lsls	r3, r2, #28
 8014e9c:	bf44      	itt	mi
 8014e9e:	232b      	movmi	r3, #43	; 0x2b
 8014ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8014ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8014eaa:	d015      	beq.n	8014ed8 <_vfiprintf_r+0x13c>
 8014eac:	9a07      	ldr	r2, [sp, #28]
 8014eae:	4654      	mov	r4, sl
 8014eb0:	2000      	movs	r0, #0
 8014eb2:	f04f 0c0a 	mov.w	ip, #10
 8014eb6:	4621      	mov	r1, r4
 8014eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ebc:	3b30      	subs	r3, #48	; 0x30
 8014ebe:	2b09      	cmp	r3, #9
 8014ec0:	d94e      	bls.n	8014f60 <_vfiprintf_r+0x1c4>
 8014ec2:	b1b0      	cbz	r0, 8014ef2 <_vfiprintf_r+0x156>
 8014ec4:	9207      	str	r2, [sp, #28]
 8014ec6:	e014      	b.n	8014ef2 <_vfiprintf_r+0x156>
 8014ec8:	eba0 0308 	sub.w	r3, r0, r8
 8014ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8014ed0:	4313      	orrs	r3, r2
 8014ed2:	9304      	str	r3, [sp, #16]
 8014ed4:	46a2      	mov	sl, r4
 8014ed6:	e7d2      	b.n	8014e7e <_vfiprintf_r+0xe2>
 8014ed8:	9b03      	ldr	r3, [sp, #12]
 8014eda:	1d19      	adds	r1, r3, #4
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	9103      	str	r1, [sp, #12]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	bfbb      	ittet	lt
 8014ee4:	425b      	neglt	r3, r3
 8014ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8014eea:	9307      	strge	r3, [sp, #28]
 8014eec:	9307      	strlt	r3, [sp, #28]
 8014eee:	bfb8      	it	lt
 8014ef0:	9204      	strlt	r2, [sp, #16]
 8014ef2:	7823      	ldrb	r3, [r4, #0]
 8014ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8014ef6:	d10c      	bne.n	8014f12 <_vfiprintf_r+0x176>
 8014ef8:	7863      	ldrb	r3, [r4, #1]
 8014efa:	2b2a      	cmp	r3, #42	; 0x2a
 8014efc:	d135      	bne.n	8014f6a <_vfiprintf_r+0x1ce>
 8014efe:	9b03      	ldr	r3, [sp, #12]
 8014f00:	1d1a      	adds	r2, r3, #4
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	9203      	str	r2, [sp, #12]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	bfb8      	it	lt
 8014f0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f0e:	3402      	adds	r4, #2
 8014f10:	9305      	str	r3, [sp, #20]
 8014f12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014ff8 <_vfiprintf_r+0x25c>
 8014f16:	7821      	ldrb	r1, [r4, #0]
 8014f18:	2203      	movs	r2, #3
 8014f1a:	4650      	mov	r0, sl
 8014f1c:	f7eb f9e8 	bl	80002f0 <memchr>
 8014f20:	b140      	cbz	r0, 8014f34 <_vfiprintf_r+0x198>
 8014f22:	2340      	movs	r3, #64	; 0x40
 8014f24:	eba0 000a 	sub.w	r0, r0, sl
 8014f28:	fa03 f000 	lsl.w	r0, r3, r0
 8014f2c:	9b04      	ldr	r3, [sp, #16]
 8014f2e:	4303      	orrs	r3, r0
 8014f30:	3401      	adds	r4, #1
 8014f32:	9304      	str	r3, [sp, #16]
 8014f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f38:	482c      	ldr	r0, [pc, #176]	; (8014fec <_vfiprintf_r+0x250>)
 8014f3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f3e:	2206      	movs	r2, #6
 8014f40:	f7eb f9d6 	bl	80002f0 <memchr>
 8014f44:	2800      	cmp	r0, #0
 8014f46:	d03f      	beq.n	8014fc8 <_vfiprintf_r+0x22c>
 8014f48:	4b29      	ldr	r3, [pc, #164]	; (8014ff0 <_vfiprintf_r+0x254>)
 8014f4a:	bb1b      	cbnz	r3, 8014f94 <_vfiprintf_r+0x1f8>
 8014f4c:	9b03      	ldr	r3, [sp, #12]
 8014f4e:	3307      	adds	r3, #7
 8014f50:	f023 0307 	bic.w	r3, r3, #7
 8014f54:	3308      	adds	r3, #8
 8014f56:	9303      	str	r3, [sp, #12]
 8014f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f5a:	443b      	add	r3, r7
 8014f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8014f5e:	e767      	b.n	8014e30 <_vfiprintf_r+0x94>
 8014f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f64:	460c      	mov	r4, r1
 8014f66:	2001      	movs	r0, #1
 8014f68:	e7a5      	b.n	8014eb6 <_vfiprintf_r+0x11a>
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	3401      	adds	r4, #1
 8014f6e:	9305      	str	r3, [sp, #20]
 8014f70:	4619      	mov	r1, r3
 8014f72:	f04f 0c0a 	mov.w	ip, #10
 8014f76:	4620      	mov	r0, r4
 8014f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f7c:	3a30      	subs	r2, #48	; 0x30
 8014f7e:	2a09      	cmp	r2, #9
 8014f80:	d903      	bls.n	8014f8a <_vfiprintf_r+0x1ee>
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d0c5      	beq.n	8014f12 <_vfiprintf_r+0x176>
 8014f86:	9105      	str	r1, [sp, #20]
 8014f88:	e7c3      	b.n	8014f12 <_vfiprintf_r+0x176>
 8014f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f8e:	4604      	mov	r4, r0
 8014f90:	2301      	movs	r3, #1
 8014f92:	e7f0      	b.n	8014f76 <_vfiprintf_r+0x1da>
 8014f94:	ab03      	add	r3, sp, #12
 8014f96:	9300      	str	r3, [sp, #0]
 8014f98:	462a      	mov	r2, r5
 8014f9a:	4b16      	ldr	r3, [pc, #88]	; (8014ff4 <_vfiprintf_r+0x258>)
 8014f9c:	a904      	add	r1, sp, #16
 8014f9e:	4630      	mov	r0, r6
 8014fa0:	f7fd fc72 	bl	8012888 <_printf_float>
 8014fa4:	4607      	mov	r7, r0
 8014fa6:	1c78      	adds	r0, r7, #1
 8014fa8:	d1d6      	bne.n	8014f58 <_vfiprintf_r+0x1bc>
 8014faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014fac:	07d9      	lsls	r1, r3, #31
 8014fae:	d405      	bmi.n	8014fbc <_vfiprintf_r+0x220>
 8014fb0:	89ab      	ldrh	r3, [r5, #12]
 8014fb2:	059a      	lsls	r2, r3, #22
 8014fb4:	d402      	bmi.n	8014fbc <_vfiprintf_r+0x220>
 8014fb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014fb8:	f7ff f91a 	bl	80141f0 <__retarget_lock_release_recursive>
 8014fbc:	89ab      	ldrh	r3, [r5, #12]
 8014fbe:	065b      	lsls	r3, r3, #25
 8014fc0:	f53f af12 	bmi.w	8014de8 <_vfiprintf_r+0x4c>
 8014fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fc6:	e711      	b.n	8014dec <_vfiprintf_r+0x50>
 8014fc8:	ab03      	add	r3, sp, #12
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	462a      	mov	r2, r5
 8014fce:	4b09      	ldr	r3, [pc, #36]	; (8014ff4 <_vfiprintf_r+0x258>)
 8014fd0:	a904      	add	r1, sp, #16
 8014fd2:	4630      	mov	r0, r6
 8014fd4:	f7fd fee4 	bl	8012da0 <_printf_i>
 8014fd8:	e7e4      	b.n	8014fa4 <_vfiprintf_r+0x208>
 8014fda:	bf00      	nop
 8014fdc:	08016d34 	.word	0x08016d34
 8014fe0:	08016d54 	.word	0x08016d54
 8014fe4:	08016d14 	.word	0x08016d14
 8014fe8:	08016f1a 	.word	0x08016f1a
 8014fec:	08016f24 	.word	0x08016f24
 8014ff0:	08012889 	.word	0x08012889
 8014ff4:	08014d77 	.word	0x08014d77
 8014ff8:	08016f20 	.word	0x08016f20

08014ffc <_read_r>:
 8014ffc:	b538      	push	{r3, r4, r5, lr}
 8014ffe:	4d07      	ldr	r5, [pc, #28]	; (801501c <_read_r+0x20>)
 8015000:	4604      	mov	r4, r0
 8015002:	4608      	mov	r0, r1
 8015004:	4611      	mov	r1, r2
 8015006:	2200      	movs	r2, #0
 8015008:	602a      	str	r2, [r5, #0]
 801500a:	461a      	mov	r2, r3
 801500c:	f7f0 fa28 	bl	8005460 <_read>
 8015010:	1c43      	adds	r3, r0, #1
 8015012:	d102      	bne.n	801501a <_read_r+0x1e>
 8015014:	682b      	ldr	r3, [r5, #0]
 8015016:	b103      	cbz	r3, 801501a <_read_r+0x1e>
 8015018:	6023      	str	r3, [r4, #0]
 801501a:	bd38      	pop	{r3, r4, r5, pc}
 801501c:	24001760 	.word	0x24001760

08015020 <__ascii_wctomb>:
 8015020:	b149      	cbz	r1, 8015036 <__ascii_wctomb+0x16>
 8015022:	2aff      	cmp	r2, #255	; 0xff
 8015024:	bf85      	ittet	hi
 8015026:	238a      	movhi	r3, #138	; 0x8a
 8015028:	6003      	strhi	r3, [r0, #0]
 801502a:	700a      	strbls	r2, [r1, #0]
 801502c:	f04f 30ff 	movhi.w	r0, #4294967295
 8015030:	bf98      	it	ls
 8015032:	2001      	movls	r0, #1
 8015034:	4770      	bx	lr
 8015036:	4608      	mov	r0, r1
 8015038:	4770      	bx	lr

0801503a <abort>:
 801503a:	b508      	push	{r3, lr}
 801503c:	2006      	movs	r0, #6
 801503e:	f000 f82b 	bl	8015098 <raise>
 8015042:	2001      	movs	r0, #1
 8015044:	f7f0 fa02 	bl	800544c <_exit>

08015048 <_raise_r>:
 8015048:	291f      	cmp	r1, #31
 801504a:	b538      	push	{r3, r4, r5, lr}
 801504c:	4604      	mov	r4, r0
 801504e:	460d      	mov	r5, r1
 8015050:	d904      	bls.n	801505c <_raise_r+0x14>
 8015052:	2316      	movs	r3, #22
 8015054:	6003      	str	r3, [r0, #0]
 8015056:	f04f 30ff 	mov.w	r0, #4294967295
 801505a:	bd38      	pop	{r3, r4, r5, pc}
 801505c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801505e:	b112      	cbz	r2, 8015066 <_raise_r+0x1e>
 8015060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015064:	b94b      	cbnz	r3, 801507a <_raise_r+0x32>
 8015066:	4620      	mov	r0, r4
 8015068:	f000 f830 	bl	80150cc <_getpid_r>
 801506c:	462a      	mov	r2, r5
 801506e:	4601      	mov	r1, r0
 8015070:	4620      	mov	r0, r4
 8015072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015076:	f000 b817 	b.w	80150a8 <_kill_r>
 801507a:	2b01      	cmp	r3, #1
 801507c:	d00a      	beq.n	8015094 <_raise_r+0x4c>
 801507e:	1c59      	adds	r1, r3, #1
 8015080:	d103      	bne.n	801508a <_raise_r+0x42>
 8015082:	2316      	movs	r3, #22
 8015084:	6003      	str	r3, [r0, #0]
 8015086:	2001      	movs	r0, #1
 8015088:	e7e7      	b.n	801505a <_raise_r+0x12>
 801508a:	2400      	movs	r4, #0
 801508c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015090:	4628      	mov	r0, r5
 8015092:	4798      	blx	r3
 8015094:	2000      	movs	r0, #0
 8015096:	e7e0      	b.n	801505a <_raise_r+0x12>

08015098 <raise>:
 8015098:	4b02      	ldr	r3, [pc, #8]	; (80150a4 <raise+0xc>)
 801509a:	4601      	mov	r1, r0
 801509c:	6818      	ldr	r0, [r3, #0]
 801509e:	f7ff bfd3 	b.w	8015048 <_raise_r>
 80150a2:	bf00      	nop
 80150a4:	24000240 	.word	0x24000240

080150a8 <_kill_r>:
 80150a8:	b538      	push	{r3, r4, r5, lr}
 80150aa:	4d07      	ldr	r5, [pc, #28]	; (80150c8 <_kill_r+0x20>)
 80150ac:	2300      	movs	r3, #0
 80150ae:	4604      	mov	r4, r0
 80150b0:	4608      	mov	r0, r1
 80150b2:	4611      	mov	r1, r2
 80150b4:	602b      	str	r3, [r5, #0]
 80150b6:	f7f0 f9b9 	bl	800542c <_kill>
 80150ba:	1c43      	adds	r3, r0, #1
 80150bc:	d102      	bne.n	80150c4 <_kill_r+0x1c>
 80150be:	682b      	ldr	r3, [r5, #0]
 80150c0:	b103      	cbz	r3, 80150c4 <_kill_r+0x1c>
 80150c2:	6023      	str	r3, [r4, #0]
 80150c4:	bd38      	pop	{r3, r4, r5, pc}
 80150c6:	bf00      	nop
 80150c8:	24001760 	.word	0x24001760

080150cc <_getpid_r>:
 80150cc:	f7f0 b9a6 	b.w	800541c <_getpid>

080150d0 <_init>:
 80150d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150d2:	bf00      	nop
 80150d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150d6:	bc08      	pop	{r3}
 80150d8:	469e      	mov	lr, r3
 80150da:	4770      	bx	lr

080150dc <_fini>:
 80150dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150de:	bf00      	nop
 80150e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150e2:	bc08      	pop	{r3}
 80150e4:	469e      	mov	lr, r3
 80150e6:	4770      	bx	lr
