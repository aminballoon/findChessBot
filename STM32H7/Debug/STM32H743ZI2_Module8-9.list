
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ffc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f3c  080152a0  080152a0  000252a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080171dc  080171dc  000271dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080171e4  080171e4  000271e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080171ec  080171ec  000271ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000414  24000000  080171f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001350  24000414  08017608  00030414  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001764  08017608  00031764  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030414  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c525  00000000  00000000  00030442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049d0  00000000  00000000  0005c967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  00061338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001618  00000000  00000000  00062b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e55a  00000000  00000000  00064130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024fb0  00000000  00000000  000a268a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ddb5  00000000  00000000  000c763a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002353ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000075ec  00000000  00000000  00235440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000414 	.word	0x24000414
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015284 	.word	0x08015284

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000418 	.word	0x24000418
 80002dc:	08015284 	.word	0x08015284

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	this->address = _address;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	729a      	strb	r2, [r3, #10]
}
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f103 010a 	add.w	r1, r3, #10
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	f00e fc62 	bl	800efb0 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 010c 	add.w	r1, r3, #12
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2202      	movs	r2, #2
 80006fa:	f00e fcef 	bl	800f0dc <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	899b      	ldrh	r3, [r3, #12]
 800071a:	b21b      	sxth	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	0bdb      	lsrs	r3, r3, #15
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	765a      	strb	r2, [r3, #25]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000740:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	737b      	strb	r3, [r7, #13]
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	2b05      	cmp	r3, #5
 8000766:	d821      	bhi.n	80007ac <_ZN5AMT2117AMT21_Check_ValueEv+0x7c>
		this->uart_buf = this->uart_buf >> 2;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b25a      	sxtb	r2, r3
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	4053      	eors	r3, r2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	b29b      	uxth	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079e:	4053      	eors	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	3301      	adds	r3, #1
 80007a8:	737b      	strb	r3, [r7, #13]
 80007aa:	e7da      	b.n	8000762 <_ZN5AMT2117AMT21_Check_ValueEv+0x32>
	}
	k0_check = !k0_check;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf0c      	ite	eq
 80007b2:	2301      	moveq	r3, #1
 80007b4:	2300      	movne	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7e1b      	ldrb	r3, [r3, #24]
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d10a      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7e5b      	ldrb	r3, [r3, #25]
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d105      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
		this->raw_value = raw_value_temp;
 80007dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e003      	b.n	80007f0 <_ZN5AMT2117AMT21_Check_ValueEv+0xc0>
	} else {
		this->raw_value = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
	}
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800080a:	135b      	asrs	r3, r3, #13
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29b      	uxth	r3, r3
			+ (this->raw_value & 0x3FFF)) * -1;
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000824:	b29b      	uxth	r3, r3
 8000826:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800082a:	b29b      	uxth	r3, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	b21b      	sxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	db0b      	blt.n	800087a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000870:	1ad2      	subs	r2, r2, r3
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZN5AMT216unwarpEv+0xa0>)
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e020      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800088e:	dc0c      	bgt.n	80008aa <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e008      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	441a      	add	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	615a      	str	r2, [r3, #20]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	ffffc001 	.word	0xffffc001

080008e4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>:
 *  Created on: Apr 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AS5047UABI.h"

AS5047UABI::AS5047UABI(TIM_HandleTypeDef *_enc_htim, uint32_t _ENC_TIM_CHANNEL1, uint32_t _ENC_TIM_CHANNEL2){
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2204      	movs	r2, #4
 800092e:	735a      	strb	r2, [r3, #13]
	this->enc_htim = _enc_htim;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	601a      	str	r2, [r3, #0]
	this->ENC_TIM_CHANNEL1 = _ENC_TIM_CHANNEL1;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	this->ENC_TIM_CHANNEL2 = _ENC_TIM_CHANNEL2;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	609a      	str	r2, [r3, #8]
}
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_ZN10AS5047UABID1Ev>:
AS5047UABI::~AS5047UABI(){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

}
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_ZN10AS5047UABI17EncoderReadEnableEv>:
void AS5047UABI::EncoderReadEnable(){
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f00d f989 	bl	800dc90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL2);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f00d f981 	bl	800dc90 <HAL_TIM_Encoder_Start>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZN10AS5047UABI7setZeroEv>:
void AS5047UABI::EncoderReadDisable(){
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL1);
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL2);
}
void AS5047UABI::setZero(){
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	this->enc_htim->Instance->CNT = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <_ZN10AS5047UABI11getDegAngleEv>:
uint16_t AS5047UABI::getRawCounter(){
	return this->enc_htim->Instance->CNT;
}
float AS5047UABI::getDegAngle(){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 360.0f;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009cc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80009ec <_ZN10AS5047UABI11getDegAngleEv+0x38>
 80009d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80009f0 <_ZN10AS5047UABI11getDegAngleEv+0x3c>
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80009dc:	eeb0 0a67 	vmov.f32	s0, s15
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	44ffe000 	.word	0x44ffe000
 80009f0:	43b40000 	.word	0x43b40000

080009f4 <_ZN10AS5047UABI12getMRadAngleEv>:
float AS5047UABI::getRadAngle(){
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6.28f;
}
float AS5047UABI::getMRadAngle(){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6280.0f;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a0c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000a2c <_ZN10AS5047UABI12getMRadAngleEv+0x38>
 8000a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a14:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000a30 <_ZN10AS5047UABI12getMRadAngleEv+0x3c>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	44ffe000 	.word	0x44ffe000
 8000a30:	45c44000 	.word	0x45c44000

08000a34 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a3e:	edc7 0a00 	vstr	s1, [r7]
 8000a42:	edd7 0a00 	vldr	s1, [r7]
 8000a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a4a:	f010 ff4d 	bl	80118e8 <atan2f>
 8000a4e:	eef0 7a40 	vmov.f32	s15, s0
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a66:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a6a:	f010 ff3f 	bl	80118ec <sqrtf>
 8000a6e:	eef0 7a40 	vmov.f32	s15, s0
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	2002      	movs	r0, #2
 8000a92:	eeb0 0a67 	vmov.f32	s0, s15
 8000a96:	f000 fecb 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	edc3 7a01 	vstr	s15, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	edd3 7a00 	vldr	s15, [r3]
 8000aae:	2003      	movs	r0, #3
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	f000 febc 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ab8:	eeb0 7b40 	vmov.f64	d7, d0
 8000abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	edd3 7a00 	vldr	s15, [r3]
 8000acc:	2004      	movs	r0, #4
 8000ace:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad2:	f000 fead 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	edc3 7a03 	vstr	s15, [r3, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000afe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <_ZN10RobotJointC1Ev+0xd8>)
 8000b38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000b40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	3a83126f 	.word	0x3a83126f
 8000b54:	3dcccccd 	.word	0x3dcccccd

08000b58 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

}
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	; 0x40
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6278      	str	r0, [r7, #36]	; 0x24
 8000b78:	ed87 0a08 	vstr	s0, [r7, #32]
 8000b7c:	edc7 0a07 	vstr	s1, [r7, #28]
 8000b80:	ed87 1a06 	vstr	s2, [r7, #24]
 8000b84:	edc7 1a05 	vstr	s3, [r7, #20]
 8000b88:	ed87 2a04 	vstr	s4, [r7, #16]
 8000b8c:	edc7 2a03 	vstr	s5, [r7, #12]
 8000b90:	ed87 3a02 	vstr	s6, [r7, #8]
 8000b94:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)/1000.0);
 8000b98:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba8:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bac:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bb0:	eeb0 0b46 	vmov.f64	d0, d6
 8000bb4:	f010 fe4c 	bl	8011850 <sin>
 8000bb8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)/1000.0);
 8000bc4:	ed97 7a08 	vldr	s14, [r7, #32]
 8000bc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd4:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bd8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bdc:	eeb0 0b46 	vmov.f64	d0, d6
 8000be0:	f010 fdea 	bl	80117b8 <cos>
 8000be4:	eeb0 7b40 	vmov.f64	d7, d0
 8000be8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3/1000.0);
 8000bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf8:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bfc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c00:	eeb0 0b46 	vmov.f64	d0, d6
 8000c04:	f010 fe24 	bl	8011850 <sin>
 8000c08:	eeb0 7b40 	vmov.f64	d7, d0
 8000c0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1/1000.0);
 8000c14:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000c20:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c24:	eeb0 0b46 	vmov.f64	d0, d6
 8000c28:	f010 fe12 	bl	8011850 <sin>
 8000c2c:	eeb0 7b40 	vmov.f64	d7, d0
 8000c30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c34:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1/1000.0);
 8000c38:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c40:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000c44:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c48:	eeb0 0b46 	vmov.f64	d0, d6
 8000c4c:	f010 fdb4 	bl	80117b8 <cos>
 8000c50:	eeb0 7b40 	vmov.f64	d7, d0
 8000c54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000c5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c60:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c68:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12)) * 1000.0;
 8000c6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c78:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c84:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c8c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c98:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000caa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000cb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000cbc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000cc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cc8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000dbc <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000ccc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cd4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cd8:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000dc0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000cdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ce4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cec:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000cf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cf4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000d00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d04:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000d08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d10:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000dbc <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000d14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000d1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d20:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000dc0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000d24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d30:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000d34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d38:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000d3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d40:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000d44:	ee77 7a67 	vsub.f32	s15, s14, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000d48:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000d56:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d62:	edd7 6a03 	vldr	s13, [r7, #12]
 8000d66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d76:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000d7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d7e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d86:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000d8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d92:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000da0:	bf00      	nop
 8000da2:	3740      	adds	r7, #64	; 0x40
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	00000000 	.word	0x00000000
 8000dac:	408f4000 	.word	0x408f4000
 8000db0:	439d8000 	.word	0x439d8000
 8000db4:	43bfa000 	.word	0x43bfa000
 8000db8:	447a0000 	.word	0x447a0000
 8000dbc:	41540000 	.word	0x41540000
 8000dc0:	43b90000 	.word	0x43b90000

08000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b091      	sub	sp, #68	; 0x44
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	61f8      	str	r0, [r7, #28]
 8000dcc:	ed87 0a06 	vstr	s0, [r7, #24]
 8000dd0:	edc7 0a05 	vstr	s1, [r7, #20]
 8000dd4:	ed87 1a04 	vstr	s2, [r7, #16]
 8000dd8:	edc7 1a03 	vstr	s3, [r7, #12]
 8000ddc:	ed87 2a02 	vstr	s4, [r7, #8]
 8000de0:	edc7 2a01 	vstr	s5, [r7, #4]
 8000de4:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000e0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000e1e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e22:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e32:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000e36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000e3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e46:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000e4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e56:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000e5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e66:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000e6a:	ed97 7a00 	vldr	s14, [r7]
 8000e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000e7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e8e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e96:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000e9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e9e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ea2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8000eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000eb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ebe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ec6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ece:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000eda:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000ee6:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000eea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ef6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000efa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000efe:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f02:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000f06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f0a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f0e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f12:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000f16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f1a:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f26:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000f2a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000f3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f44:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000f48:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000f4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f54:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f60:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000f64:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000f68:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f6c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f70:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f74:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f78:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000f7c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000f80:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000f84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000f96:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f9e:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000fa2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000fa6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000fb2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000fb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fba:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000fbe:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000fc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fc6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fca:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000fce:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000fd2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000fd6:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000fda:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fe2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000fe6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000fea:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8001000:	bf00      	nop
 8001002:	3744      	adds	r7, #68	; 0x44
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 800100c:	b580      	push	{r7, lr}
 800100e:	ed2d 8b08 	vpush	{d8-d11}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800102a:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001032:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800103a:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001042:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800104a:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001052:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800105a:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	ed93 7a00 	vldr	s14, [r3]
 8001062:	edd7 7a08 	vldr	s15, [r7, #32]
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8001076:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800107a:	edd7 7a00 	vldr	s15, [r7]
 800107e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edd3 6a00 	vldr	s13, [r3]
 8001088:	edd7 7a08 	vldr	s15, [r7, #32]
 800108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001094:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	ed93 7a00 	vldr	s14, [r3]
 800109e:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80010aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ae:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80010b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	2004      	movs	r0, #4
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	f000 fbb3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010ca:	eeb0 7b40 	vmov.f64	d7, d0
 80010ce:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80010d2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010da:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edd3 5a00 	vldr	s11, [r3]
 80010ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ee:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001102:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001106:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800110a:	ed97 7a07 	vldr	s14, [r7, #28]
 800110e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edd3 6a00 	vldr	s13, [r3]
 800111c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800112c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001130:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	2004      	movs	r0, #4
 800113c:	eeb0 0a67 	vmov.f32	s0, s15
 8001140:	f000 fb76 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001144:	eeb0 7b40 	vmov.f64	d7, d0
 8001148:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800114c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001150:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001154:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	ed93 7a00 	vldr	s14, [r3]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 5a00 	vldr	s11, [r3]
 8001164:	edd7 7a04 	vldr	s15, [r7, #16]
 8001168:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800116c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001170:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001180:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8001184:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001188:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8001192:	edd7 7a08 	vldr	s15, [r7, #32]
 8001196:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	2003      	movs	r0, #3
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	f000 fb3f 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011b2:	eeb0 7b40 	vmov.f64	d7, d0
 80011b6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80011ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80011be:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e0:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 80011e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011e8:	edd7 7a00 	vldr	s15, [r7]
 80011ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 5a00 	vldr	s11, [r3]
 80011f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80011fa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001206:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800120a:	ed97 7a07 	vldr	s14, [r7, #28]
 800120e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	edd3 6a00 	vldr	s13, [r3]
 800121c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001228:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800122c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001230:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	2004      	movs	r0, #4
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	f000 faf6 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001244:	eeb0 7b40 	vmov.f64	d7, d0
 8001248:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800124c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001250:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001254:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 5a00 	vldr	s11, [r3]
 8001264:	edd7 7a04 	vldr	s15, [r7, #16]
 8001268:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800126c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001270:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800127c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001280:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001284:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001288:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	ed93 7a00 	vldr	s14, [r3]
 8001298:	edd7 7a05 	vldr	s15, [r7, #20]
 800129c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80012ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	2004      	movs	r0, #4
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	f000 fab6 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012c4:	eeb0 7b40 	vmov.f64	d7, d0
 80012c8:	ee29 6b07 	vmul.f64	d6, d9, d7
 80012cc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012d4:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 5a00 	vldr	s11, [r3]
 80012e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80012f0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012fc:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001300:	ed97 7a07 	vldr	s14, [r7, #28]
 8001304:	edd7 7a02 	vldr	s15, [r7, #8]
 8001308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edd3 6a00 	vldr	s13, [r3]
 8001312:	edd7 7a05 	vldr	s15, [r7, #20]
 8001316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001322:	edd7 7a03 	vldr	s15, [r7, #12]
 8001326:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	2004      	movs	r0, #4
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	f000 fa7b 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800133a:	eeb0 7b40 	vmov.f64	d7, d0
 800133e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001342:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001346:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800134a:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	ed93 7a00 	vldr	s14, [r3]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 5a00 	vldr	s11, [r3]
 800135a:	edd7 7a04 	vldr	s15, [r7, #16]
 800135e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001362:	edd7 7a06 	vldr	s15, [r7, #24]
 8001366:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800136a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001372:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001376:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800137a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800137e:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001382:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	ed93 7a00 	vldr	s14, [r3]
 800138c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001394:	edd7 7a07 	vldr	s15, [r7, #28]
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	2004      	movs	r0, #4
 80013b0:	eeb0 0a67 	vmov.f32	s0, s15
 80013b4:	f000 fa3c 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013b8:	eeb0 7b40 	vmov.f64	d7, d0
 80013bc:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80013c0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013c8:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	ed93 7a00 	vldr	s14, [r3]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 5a00 	vldr	s11, [r3]
 80013d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013dc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f0:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80013f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	ed93 7a00 	vldr	s14, [r3]
 8001408:	edd7 7a05 	vldr	s15, [r7, #20]
 800140c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001410:	edd7 7a07 	vldr	s15, [r7, #28]
 8001414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001418:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800141c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001420:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	2004      	movs	r0, #4
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f000 f9fe 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001434:	eeb0 7b40 	vmov.f64	d7, d0
 8001438:	ee29 6b07 	vmul.f64	d6, d9, d7
 800143c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001440:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001444:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edd3 5a00 	vldr	s11, [r3]
 8001454:	edd7 7a04 	vldr	s15, [r7, #16]
 8001458:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800145c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001460:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800146c:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001470:	ed97 7a07 	vldr	s14, [r7, #28]
 8001474:	edd7 7a02 	vldr	s15, [r7, #8]
 8001478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 6a00 	vldr	s13, [r3]
 8001482:	edd7 7a05 	vldr	s15, [r7, #20]
 8001486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001492:	edd7 7a03 	vldr	s15, [r7, #12]
 8001496:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	2004      	movs	r0, #4
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	f000 f9c3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014aa:	eeb0 7b40 	vmov.f64	d7, d0
 80014ae:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80014b2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80014b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014ba:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	edd3 5a00 	vldr	s11, [r3]
 80014ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ce:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80014d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014d6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e2:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014e6:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80014ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014ee:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014f2:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80014f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	2003      	movs	r0, #3
 8001506:	eeb0 0a67 	vmov.f32	s0, s15
 800150a:	f000 f991 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800150e:	eeb0 7b40 	vmov.f64	d7, d0
 8001512:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001516:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800151a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	edd7 7a04 	vldr	s15, [r7, #16]
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001530:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001534:	edd7 7a06 	vldr	s15, [r7, #24]
 8001538:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800153c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001540:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001544:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed93 7a00 	vldr	s14, [r3]
 8001554:	edd7 7a04 	vldr	s15, [r7, #16]
 8001558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001568:	edd7 7a03 	vldr	s15, [r7, #12]
 800156c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	2003      	movs	r0, #3
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f000 f958 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001580:	eeb0 7b40 	vmov.f64	d7, d0
 8001584:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001588:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800158c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001590:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001594:	edd7 7a03 	vldr	s15, [r7, #12]
 8001598:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	2003      	movs	r0, #3
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f000 f942 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015ac:	eeb0 7b40 	vmov.f64	d7, d0
 80015b0:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80015b8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015da:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80015f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fc:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	2004      	movs	r0, #4
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	f000 f910 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001610:	eeb0 7b40 	vmov.f64	d7, d0
 8001614:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001618:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800161c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001620:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	ed93 7a00 	vldr	s14, [r3]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 5a00 	vldr	s11, [r3]
 8001630:	edd7 7a04 	vldr	s15, [r7, #16]
 8001634:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001638:	edd7 7a06 	vldr	s15, [r7, #24]
 800163c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001648:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800164c:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001650:	ed97 7a07 	vldr	s14, [r7, #28]
 8001654:	edd7 7a02 	vldr	s15, [r7, #8]
 8001658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	edd3 6a00 	vldr	s13, [r3]
 8001662:	edd7 7a05 	vldr	s15, [r7, #20]
 8001666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001672:	edd7 7a03 	vldr	s15, [r7, #12]
 8001676:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	2004      	movs	r0, #4
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	f000 f8d3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800168a:	eeb0 7b40 	vmov.f64	d7, d0
 800168e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001692:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001696:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800169a:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	ed93 7a00 	vldr	s14, [r3]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 5a00 	vldr	s11, [r3]
 80016aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ae:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016b6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80016ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016c2:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80016c6:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80016ca:	ee38 7b47 	vsub.f64	d7, d8, d7
 80016ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80016e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	2002      	movs	r0, #2
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	f000 f89c 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016f8:	eeb0 7b40 	vmov.f64	d7, d0
 80016fc:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001700:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001704:	edd7 7a03 	vldr	s15, [r7, #12]
 8001708:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	2003      	movs	r0, #3
 8001714:	eeb0 0a67 	vmov.f32	s0, s15
 8001718:	f000 f88a 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800171c:	eeb0 7b40 	vmov.f64	d7, d0
 8001720:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001724:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001728:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7a00 	vldr	s14, [r3]
 8001732:	edd7 7a04 	vldr	s15, [r7, #16]
 8001736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800173e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001742:	edd7 7a06 	vldr	s15, [r7, #24]
 8001746:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800174a:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 800174e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001752:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	2003      	movs	r0, #3
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	f000 f865 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001766:	eeb0 7b40 	vmov.f64	d7, d0
 800176a:	ee2a 7b07 	vmul.f64	d7, d10, d7
 800176e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001772:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001788:	ee36 6b07 	vadd.f64	d6, d6, d7
 800178c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001790:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001794:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001798:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800179c:	ed97 7a07 	vldr	s14, [r7, #28]
 80017a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edd3 6a00 	vldr	s13, [r3]
 80017ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80017b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ba:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80017be:	edd7 7a03 	vldr	s15, [r7, #12]
 80017c2:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	2004      	movs	r0, #4
 80017ce:	eeb0 0a67 	vmov.f32	s0, s15
 80017d2:	f000 f82d 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017d6:	eeb0 7b40 	vmov.f64	d7, d0
 80017da:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80017de:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80017e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017e6:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	edd3 5a00 	vldr	s11, [r3]
 80017f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80017fa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80017fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001802:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800180e:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001812:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001816:	ee38 7b47 	vsub.f64	d7, d8, d7
 800181a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	ecbd 8b08 	vpop	{d8-d11}
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	ed87 0a01 	vstr	s0, [r7, #4]
 800183a:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800183c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	ee06 3a90 	vmov	s13, r3
 800184a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800184e:	eeb0 1b46 	vmov.f64	d1, d6
 8001852:	eeb0 0b47 	vmov.f64	d0, d7
 8001856:	f00f fd5b 	bl	8011310 <pow>
 800185a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800185e:	eeb0 0b47 	vmov.f64	d0, d7
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001872:	edd7 7a01 	vldr	s15, [r7, #4]
 8001876:	fefb 7a67 	vrintm.f32	s15, s15
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001892:	edd7 7a01 	vldr	s15, [r7, #4]
 8001896:	fef8 7a67 	vrinta.f32	s15, s15
 800189a:	eeb0 0a67 	vmov.f32	s0, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	22b4      	movs	r2, #180	; 0xb4
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	761a      	strb	r2, [r3, #24]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	22ef      	movs	r2, #239	; 0xef
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
}
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f00b fff9 	bl	800d928 <HAL_TIM_PWM_Start>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d13f      	bne.n	80019d2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691c      	ldr	r4, [r3, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	3301      	adds	r3, #1
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	f7ff ff86 	bl	8001888 <_ZSt5roundf>
 800197c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001984:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	3301      	adds	r3, #1
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800199e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	f7ff ff5f 	bl	8001868 <_ZSt5floorf>
 80019aa:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 3a90 	vmov	r3, s15
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	9600      	str	r6, [sp, #0]
 80019ba:	462b      	mov	r3, r5
 80019bc:	4622      	mov	r2, r4
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f9cf 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 80019c6:	4602      	mov	r2, r0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80019d0:	e176      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d13f      	bne.n	8001a5a <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691c      	ldr	r4, [r3, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	3301      	adds	r3, #1
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	f7ff ff42 	bl	8001888 <_ZSt5roundf>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	3301      	adds	r3, #1
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2e:	f7ff ff1b 	bl	8001868 <_ZSt5floorf>
 8001a32:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3a:	ee17 3a90 	vmov	r3, s15
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	9600      	str	r6, [sp, #0]
 8001a42:	462b      	mov	r3, r5
 8001a44:	4622      	mov	r2, r4
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f98b 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a58:	e132      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d13f      	bne.n	8001ae2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691c      	ldr	r4, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	3301      	adds	r3, #1
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	eeb0 0a67 	vmov.f32	s0, s15
 8001a88:	f7ff fefe 	bl	8001888 <_ZSt5roundf>
 8001a8c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a94:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aaa:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab6:	f7ff fed7 	bl	8001868 <_ZSt5floorf>
 8001aba:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 3a90 	vmov	r3, s15
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	9600      	str	r6, [sp, #0]
 8001aca:	462b      	mov	r3, r5
 8001acc:	4622      	mov	r2, r4
 8001ace:	6839      	ldr	r1, [r7, #0]
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f947 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ae0:	e0ee      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d13f      	bne.n	8001b6a <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691c      	ldr	r4, [r3, #16]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	3301      	adds	r3, #1
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b04:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b10:	f7ff feba 	bl	8001888 <_ZSt5roundf>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	3301      	adds	r3, #1
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b32:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3e:	f7ff fe93 	bl	8001868 <_ZSt5floorf>
 8001b42:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4a:	ee17 3a90 	vmov	r3, s15
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	9600      	str	r6, [sp, #0]
 8001b52:	462b      	mov	r3, r5
 8001b54:	4622      	mov	r2, r4
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f903 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b68:	e0aa      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d144      	bne.n	8001bfc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691c      	ldr	r4, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	3301      	adds	r3, #1
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b94:	eeb0 0a67 	vmov.f32	s0, s15
 8001b98:	f7ff fe76 	bl	8001888 <_ZSt5roundf>
 8001b9c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	f7ff fe4f 	bl	8001868 <_ZSt5floorf>
 8001bca:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd2:	ee17 3a90 	vmov	r3, s15
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	9600      	str	r6, [sp, #0]
 8001bda:	462b      	mov	r3, r5
 8001bdc:	4622      	mov	r2, r4
 8001bde:	6839      	ldr	r1, [r7, #0]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8bf 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001be6:	4602      	mov	r2, r0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001bf0:	e066      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001bf2:	bf00      	nop
 8001bf4:	3d4ccccd 	.word	0x3d4ccccd
 8001bf8:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b14      	cmp	r3, #20
 8001c02:	d13f      	bne.n	8001c84 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691c      	ldr	r4, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	3301      	adds	r3, #1
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1e:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	f7ff fe2d 	bl	8001888 <_ZSt5roundf>
 8001c2e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c36:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	3301      	adds	r3, #1
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4c:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	f7ff fe06 	bl	8001868 <_ZSt5floorf>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	9600      	str	r6, [sp, #0]
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	4622      	mov	r2, r4
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f876 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c82:	e01d      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cc8 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	761a      	strb	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	765a      	strb	r2, [r3, #25]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e5b      	ldrb	r3, [r3, #25]
 8001d18:	f083 0301 	eor.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fe09 	bl	8001940 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001d2e:	e000      	b.n	8001d32 <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001d30:	bf00      	nop
}
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fdf3 	bl	8001940 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001d5a:	e000      	b.n	8001d5e <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001d5c:	bf00      	nop
}
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	69f9      	ldr	r1, [r7, #28]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	1a8a      	subs	r2, r1, r2
 8001d7e:	fb03 f202 	mul.w	r2, r3, r2
 8001d82:	6839      	ldr	r1, [r7, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	1acb      	subs	r3, r1, r3
 8001d88:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4413      	add	r3, r2
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001daa:	eef0 7ae7 	vabs.f32	s15, s15
 8001dae:	eeb0 0a67 	vmov.f32	s0, s15
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a18      	ldr	r2, [pc, #96]	; (8001e30 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001dd4:	619a      	str	r2, [r3, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ddc:	61da      	str	r2, [r3, #28]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001de2:	621a      	str	r2, [r3, #32]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	22c7      	movs	r2, #199	; 0xc7
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e08:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001e0e:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001e10:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001e3c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f82f 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	60da      	str	r2, [r3, #12]
}
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	41a00000 	.word	0x41a00000
 8001e34:	469c4000 	.word	0x469c4000
 8001e38:	43480000 	.word	0x43480000
 8001e3c:	00000000 	.word	0x00000000

08001e40 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
}
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f00b fd5d 	bl	800d928 <HAL_TIM_PWM_Start>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	ed2d 8b02 	vpush	{d8}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e94:	eeb0 0a67 	vmov.f32	s0, s15
 8001e98:	f7ff ff80 	bl	8001d9c <_ZSt4fabsf>
 8001e9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e01b      	b.n	8001efa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	f7ff ff66 	bl	8001d9c <_ZSt4fabsf>
 8001ed0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	bfac      	ite	ge
 8001ee4:	2301      	movge	r3, #1
 8001ee6:	2300      	movlt	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e001      	b.n	8001efa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f00:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800219c <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	f2c0 80db 	blt.w	80020c6 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6898      	ldr	r0, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f008 fc31 	bl	800a784 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f3c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80021a0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f50:	f7ff fc9a 	bl	8001888 <_ZSt5roundf>
 8001f54:	eef0 7a40 	vmov.f32	s15, s0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f62:	ee17 2a90 	vmov	r2, s15
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d113      	bne.n	8001f98 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fa5b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f82:	eeb0 7b40 	vmov.f64	d7, d0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f90:	ee17 2a90 	vmov	r2, s15
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001f96:	e1e0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d113      	bne.n	8001fc8 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fa43 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fb2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fc0:	ee17 2a90 	vmov	r2, s15
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fc6:	e1c8      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d113      	bne.n	8001ff8 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fa2b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fe2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ff0:	ee17 2a90 	vmov	r2, s15
 8001ff4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ff6:	e1b0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d113      	bne.n	8002028 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fa13 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002012:	eeb0 7b40 	vmov.f64	d7, d0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002020:	ee17 2a90 	vmov	r2, s15
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002026:	e198      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b10      	cmp	r3, #16
 800202e:	d113      	bne.n	8002058 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f9fb 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002042:	eeb0 7b40 	vmov.f64	d7, d0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002050:	ee17 2a90 	vmov	r2, s15
 8002054:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002056:	e180      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b14      	cmp	r3, #20
 800205e:	d113      	bne.n	8002088 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f9e3 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002072:	eeb0 7b40 	vmov.f64	d7, d0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002080:	ee17 2a90 	vmov	r2, s15
 8002084:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002086:	e168      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020c4:	e149      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80020cc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80021a4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 80020d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	f200 80e5 	bhi.w	80022a6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6898      	ldr	r0, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	f008 fb4b 	bl	800a784 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	3301      	adds	r3, #1
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002100:	ed97 0a03 	vldr	s0, [r7, #12]
 8002104:	f7ff fe4a 	bl	8001d9c <_ZSt4fabsf>
 8002108:	eef0 7a40 	vmov.f32	s15, s0
 800210c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002110:	eddf 6a23 	vldr	s13, [pc, #140]	; 80021a0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8002114:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8002118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800211c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	f7ff fbb0 	bl	8001888 <_ZSt5roundf>
 8002128:	eef0 7a40 	vmov.f32	s15, s0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002136:	ee17 2a90 	vmov	r2, s15
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d113      	bne.n	800216c <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f971 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002156:	eeb0 7b40 	vmov.f64	d7, d0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002164:	ee17 2a90 	vmov	r2, s15
 8002168:	635a      	str	r2, [r3, #52]	; 0x34
}
 800216a:	e0f6      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d119      	bne.n	80021a8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f959 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002186:	eeb0 7b40 	vmov.f64	d7, d0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002194:	ee17 2a90 	vmov	r2, s15
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
}
 800219a:	e0de      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 800219c:	3a83126f 	.word	0x3a83126f
 80021a0:	4d64e1c0 	.word	0x4d64e1c0
 80021a4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d113      	bne.n	80021d8 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f93b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021c2:	eeb0 7b40 	vmov.f64	d7, d0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021d0:	ee17 2a90 	vmov	r2, s15
 80021d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021d6:	e0c0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	d113      	bne.n	8002208 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f923 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021f2:	eeb0 7b40 	vmov.f64	d7, d0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002200:	ee17 2a90 	vmov	r2, s15
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002206:	e0a8      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b10      	cmp	r3, #16
 800220e:	d113      	bne.n	8002238 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f90b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002222:	eeb0 7b40 	vmov.f64	d7, d0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002230:	ee17 2a90 	vmov	r2, s15
 8002234:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002236:	e090      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b14      	cmp	r3, #20
 800223e:	d113      	bne.n	8002268 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f8f3 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002252:	eeb0 7b40 	vmov.f64	d7, d0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002260:	ee17 2a90 	vmov	r2, s15
 8002264:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002266:	e078      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2200      	movs	r2, #0
 8002284:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2200      	movs	r2, #0
 80022a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022a4:	e059      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022b8:	e04f      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d105      	bne.n	80022ce <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022cc:	e045      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d105      	bne.n	80022e2 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80022e0:	e03b      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d105      	bne.n	80022f6 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80022f4:	e031      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d105      	bne.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002308:	e027      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b14      	cmp	r3, #20
 8002310:	d105      	bne.n	800231e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800231c:	e01d      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2200      	movs	r2, #0
 800234e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2200      	movs	r2, #0
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	ecbd 8b02 	vpop	{d8}
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8002374:	ed97 0a00 	vldr	s0, [r7]
 8002378:	f7ff fd10 	bl	8001d9c <_ZSt4fabsf>
 800237c:	eef0 7a40 	vmov.f32	s15, s0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023a2:	eeb0 0b47 	vmov.f64	d0, d7
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ffe5 	bl	800238e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80023c4:	eeb0 7b40 	vmov.f64	d7, d0
 80023c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	0000      	movs	r0, r0
 80023dc:	0000      	movs	r0, r0
	...

080023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80023f2:	edd7 7a00 	vldr	s15, [r7]
 80023f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	edd3 7a08 	vldr	s15, [r3, #32]
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 8002412:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002430 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 8002416:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800241a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800241e:	eeb0 0a67 	vmov.f32	s0, s15
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fd28 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	704a95d1 	.word	0x704a95d1
 8002434:	40b88b2f 	.word	0x40b88b2f

08002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800244a:	eeb0 0b47 	vmov.f64	d0, d7
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <MX_CRC_Init+0x54>)
 800245e:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <MX_CRC_Init+0x58>)
 8002460:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <MX_CRC_Init+0x54>)
 8002464:	2201      	movs	r2, #1
 8002466:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_CRC_Init+0x54>)
 800246a:	2201      	movs	r2, #1
 800246c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <MX_CRC_Init+0x54>)
 8002470:	f248 0205 	movw	r2, #32773	; 0x8005
 8002474:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <MX_CRC_Init+0x54>)
 8002478:	2208      	movs	r2, #8
 800247a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_CRC_Init+0x54>)
 800247e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002482:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_CRC_Init+0x54>)
 8002486:	2220      	movs	r2, #32
 8002488:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_CRC_Init+0x54>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_CRC_Init+0x54>)
 8002492:	2201      	movs	r2, #1
 8002494:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_CRC_Init+0x54>)
 8002498:	f004 ff8a 	bl	80073b0 <HAL_CRC_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80024a2:	f002 fd33 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	24000430 	.word	0x24000430
 80024b0:	58024c00 	.word	0x58024c00

080024b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_CRC_MspInit+0x3c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10e      	bne.n	80024e4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024cc:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	58024c00 	.word	0x58024c00
 80024f4:	58024400 	.word	0x58024400

080024f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fe:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002504:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <MX_DMA_Init+0xdc>)
 800251e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002522:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <MX_DMA_Init+0xdc>)
 800252e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	200b      	movs	r0, #11
 8002540:	f004 fef5 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002544:	200b      	movs	r0, #11
 8002546:	f004 ff0c 	bl	8007362 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	200c      	movs	r0, #12
 8002550:	f004 feed 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002554:	200c      	movs	r0, #12
 8002556:	f004 ff04 	bl	8007362 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	200d      	movs	r0, #13
 8002560:	f004 fee5 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002564:	200d      	movs	r0, #13
 8002566:	f004 fefc 	bl	8007362 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	200e      	movs	r0, #14
 8002570:	f004 fedd 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002574:	200e      	movs	r0, #14
 8002576:	f004 fef4 	bl	8007362 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200f      	movs	r0, #15
 8002580:	f004 fed5 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002584:	200f      	movs	r0, #15
 8002586:	f004 feec 	bl	8007362 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2010      	movs	r0, #16
 8002590:	f004 fecd 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002594:	2010      	movs	r0, #16
 8002596:	f004 fee4 	bl	8007362 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2011      	movs	r0, #17
 80025a0:	f004 fec5 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80025a4:	2011      	movs	r0, #17
 80025a6:	f004 fedc 	bl	8007362 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	202f      	movs	r0, #47	; 0x2f
 80025b0:	f004 febd 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80025b4:	202f      	movs	r0, #47	; 0x2f
 80025b6:	f004 fed4 	bl	8007362 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2038      	movs	r0, #56	; 0x38
 80025c0:	f004 feb5 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80025c4:	2038      	movs	r0, #56	; 0x38
 80025c6:	f004 fecc 	bl	8007362 <HAL_NVIC_EnableIRQ>

}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	58024400 	.word	0x58024400

080025d8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	; 0x30
 80025dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ee:	4b87      	ldr	r3, [pc, #540]	; (800280c <MX_GPIO_Init+0x234>)
 80025f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f4:	4a85      	ldr	r2, [pc, #532]	; (800280c <MX_GPIO_Init+0x234>)
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025fe:	4b83      	ldr	r3, [pc, #524]	; (800280c <MX_GPIO_Init+0x234>)
 8002600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260c:	4b7f      	ldr	r3, [pc, #508]	; (800280c <MX_GPIO_Init+0x234>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002612:	4a7e      	ldr	r2, [pc, #504]	; (800280c <MX_GPIO_Init+0x234>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800261c:	4b7b      	ldr	r3, [pc, #492]	; (800280c <MX_GPIO_Init+0x234>)
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800262a:	4b78      	ldr	r3, [pc, #480]	; (800280c <MX_GPIO_Init+0x234>)
 800262c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002630:	4a76      	ldr	r2, [pc, #472]	; (800280c <MX_GPIO_Init+0x234>)
 8002632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800263a:	4b74      	ldr	r3, [pc, #464]	; (800280c <MX_GPIO_Init+0x234>)
 800263c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b70      	ldr	r3, [pc, #448]	; (800280c <MX_GPIO_Init+0x234>)
 800264a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264e:	4a6f      	ldr	r2, [pc, #444]	; (800280c <MX_GPIO_Init+0x234>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002658:	4b6c      	ldr	r3, [pc, #432]	; (800280c <MX_GPIO_Init+0x234>)
 800265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	4b69      	ldr	r3, [pc, #420]	; (800280c <MX_GPIO_Init+0x234>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266c:	4a67      	ldr	r2, [pc, #412]	; (800280c <MX_GPIO_Init+0x234>)
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <MX_GPIO_Init+0x234>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <MX_GPIO_Init+0x234>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268a:	4a60      	ldr	r2, [pc, #384]	; (800280c <MX_GPIO_Init+0x234>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002694:	4b5d      	ldr	r3, [pc, #372]	; (800280c <MX_GPIO_Init+0x234>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026a2:	4b5a      	ldr	r3, [pc, #360]	; (800280c <MX_GPIO_Init+0x234>)
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <MX_GPIO_Init+0x234>)
 80026aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <MX_GPIO_Init+0x234>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80026c0:	2200      	movs	r2, #0
 80026c2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80026c6:	4852      	ldr	r0, [pc, #328]	; (8002810 <MX_GPIO_Init+0x238>)
 80026c8:	f008 f85c 	bl	800a784 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	f24c 0102 	movw	r1, #49154	; 0xc002
 80026d2:	4850      	ldr	r0, [pc, #320]	; (8002814 <MX_GPIO_Init+0x23c>)
 80026d4:	f008 f856 	bl	800a784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026de:	484e      	ldr	r0, [pc, #312]	; (8002818 <MX_GPIO_Init+0x240>)
 80026e0:	f008 f850 	bl	800a784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ea:	484c      	ldr	r0, [pc, #304]	; (800281c <MX_GPIO_Init+0x244>)
 80026ec:	f008 f84a 	bl	800a784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f6:	484a      	ldr	r0, [pc, #296]	; (8002820 <MX_GPIO_Init+0x248>)
 80026f8:	f008 f844 	bl	800a784 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80026fc:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002700:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002702:	2301      	movs	r3, #1
 8002704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	483e      	ldr	r0, [pc, #248]	; (8002810 <MX_GPIO_Init+0x238>)
 8002716:	f007 fe85 	bl	800a424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 800271a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800271e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002720:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800272a:	f107 031c 	add.w	r3, r7, #28
 800272e:	4619      	mov	r1, r3
 8002730:	4838      	ldr	r0, [pc, #224]	; (8002814 <MX_GPIO_Init+0x23c>)
 8002732:	f007 fe77 	bl	800a424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8002736:	f24c 0302 	movw	r3, #49154	; 0xc002
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	4831      	ldr	r0, [pc, #196]	; (8002814 <MX_GPIO_Init+0x23c>)
 8002750:	f007 fe68 	bl	800a424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275a:	2301      	movs	r3, #1
 800275c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	482a      	ldr	r0, [pc, #168]	; (8002818 <MX_GPIO_Init+0x240>)
 800276e:	f007 fe59 	bl	800a424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	2301      	movs	r3, #1
 800277a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	4824      	ldr	r0, [pc, #144]	; (800281c <MX_GPIO_Init+0x244>)
 800278c:	f007 fe4a 	bl	800a424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002796:	2301      	movs	r3, #1
 8002798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 031c 	add.w	r3, r7, #28
 80027a6:	4619      	mov	r1, r3
 80027a8:	481d      	ldr	r0, [pc, #116]	; (8002820 <MX_GPIO_Init+0x248>)
 80027aa:	f007 fe3b 	bl	800a424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 80027ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4619      	mov	r1, r3
 80027c4:	4817      	ldr	r0, [pc, #92]	; (8002824 <MX_GPIO_Init+0x24c>)
 80027c6:	f007 fe2d 	bl	800a424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 80027ca:	23c0      	movs	r3, #192	; 0xc0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	4619      	mov	r1, r3
 80027de:	480c      	ldr	r0, [pc, #48]	; (8002810 <MX_GPIO_Init+0x238>)
 80027e0:	f007 fe20 	bl	800a424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	2017      	movs	r0, #23
 80027ea:	f004 fda0 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027ee:	2017      	movs	r0, #23
 80027f0:	f004 fdb7 	bl	8007362 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	2028      	movs	r0, #40	; 0x28
 80027fa:	f004 fd98 	bl	800732e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027fe:	2028      	movs	r0, #40	; 0x28
 8002800:	f004 fdaf 	bl	8007362 <HAL_NVIC_EnableIRQ>

}
 8002804:	bf00      	nop
 8002806:	3730      	adds	r7, #48	; 0x30
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58024400 	.word	0x58024400
 8002810:	58020400 	.word	0x58020400
 8002814:	58021000 	.word	0x58021000
 8002818:	58020c00 	.word	0x58020c00
 800281c:	58020800 	.word	0x58020800
 8002820:	58020000 	.word	0x58020000
 8002824:	58021800 	.word	0x58021800

08002828 <_Z12Insert_queueii>:
volatile float u_q4 = 0.0;

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value) {
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	if (bot == LIMIT - 1) {
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <_Z12Insert_queueii+0x6c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b13      	cmp	r3, #19
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <_Z12Insert_queueii+0x20>
		return false;
 8002844:	2300      	movs	r3, #0
 8002846:	e01e      	b.n	8002886 <_Z12Insert_queueii+0x5e>
	} else {
		if (first == -1) {
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <_Z12Insert_queueii+0x70>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002850:	bf0c      	ite	eq
 8002852:	2301      	moveq	r3, #1
 8002854:	2300      	movne	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <_Z12Insert_queueii+0x3a>
			first = 0;
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <_Z12Insert_queueii+0x70>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
		}
		bot++;
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <_Z12Insert_queueii+0x6c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800286a:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	490a      	ldr	r1, [pc, #40]	; (800289c <_Z12Insert_queueii+0x74>)
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4908      	ldr	r1, [pc, #32]	; (80028a0 <_Z12Insert_queueii+0x78>)
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 8002884:	2301      	movs	r3, #1
	}
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	24000010 	.word	0x24000010
 8002898:	2400000c 	.word	0x2400000c
 800289c:	24000b4c 	.word	0x24000b4c
 80028a0:	24000b9c 	.word	0x24000b9c

080028a4 <_Z10Call_queuev>:

int Call_queue() {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
	int output;
	if (first == -1 || first > bot) {
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <_Z10Call_queuev+0x94>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b2:	d005      	beq.n	80028c0 <_Z10Call_queuev+0x1c>
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <_Z10Call_queuev+0x94>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <_Z10Call_queuev+0x98>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	dd01      	ble.n	80028c4 <_Z10Call_queuev+0x20>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <_Z10Call_queuev+0x22>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d026      	beq.n	8002918 <_Z10Call_queuev+0x74>
		printf("Don't have stack in queue \n");
 80028ca:	481d      	ldr	r0, [pc, #116]	; (8002940 <_Z10Call_queuev+0x9c>)
 80028cc:	f010 fca8 	bl	8013220 <puts>
		for (int num = 0; num <= bot + 1; num++) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <_Z10Call_queuev+0x98>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	bfd4      	ite	le
 80028e0:	2301      	movle	r3, #1
 80028e2:	2300      	movgt	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <_Z10Call_queuev+0x58>
			queue[num] = 0;
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <_Z10Call_queuev+0xa0>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2100      	movs	r1, #0
 80028f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int num = 0; num <= bot + 1; num++) {
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	e7eb      	b.n	80028d4 <_Z10Call_queuev+0x30>
		}
		first = -1;
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <_Z10Call_queuev+0x94>)
 80028fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002902:	601a      	str	r2, [r3, #0]
		bot = -1;
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <_Z10Call_queuev+0x98>)
 8002906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800290a:	601a      	str	r2, [r3, #0]
		printf("Clear queue \n");
 800290c:	480e      	ldr	r0, [pc, #56]	; (8002948 <_Z10Call_queuev+0xa4>)
 800290e:	f010 fc87 	bl	8013220 <puts>
		output = 255;
 8002912:	23ff      	movs	r3, #255	; 0xff
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	e00a      	b.n	800292e <_Z10Call_queuev+0x8a>
	} else {
		output = queue[first];
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <_Z10Call_queuev+0x94>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a09      	ldr	r2, [pc, #36]	; (8002944 <_Z10Call_queuev+0xa0>)
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	607b      	str	r3, [r7, #4]
		first++;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <_Z10Call_queuev+0x94>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a03      	ldr	r2, [pc, #12]	; (8002938 <_Z10Call_queuev+0x94>)
 800292c:	6013      	str	r3, [r2, #0]
	}
	return output;
 800292e:	687b      	ldr	r3, [r7, #4]

}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2400000c 	.word	0x2400000c
 800293c:	24000010 	.word	0x24000010
 8002940:	080152a0 	.word	0x080152a0
 8002944:	24000b4c 	.word	0x24000b4c
 8002948:	080152bc 	.word	0x080152bc

0800294c <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4) / 1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y,
		float gripper_linear_z, float gripper_angular_yaw) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b092      	sub	sp, #72	; 0x48
 8002950:	af00      	add	r7, sp, #0
 8002952:	ed87 0a03 	vstr	s0, [r7, #12]
 8002956:	edc7 0a02 	vstr	s1, [r7, #8]
 800295a:	ed87 1a01 	vstr	s2, [r7, #4]
 800295e:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x / 1000.0;
 8002962:	ed97 7a03 	vldr	s14, [r7, #12]
 8002966:	eddf 6a78 	vldr	s13, [pc, #480]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800296a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800296e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y / 1000.0;
 8002972:	ed97 7a02 	vldr	s14, [r7, #8]
 8002976:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800297a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800297e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z / 1000.0;
 8002982:	ed97 7a01 	vldr	s14, [r7, #4]
 8002986:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800298a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw / 1000.0;
 8002992:	ed97 7a00 	vldr	s14, [r7]
 8002996:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800299a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x * x) + (y * y) - (L12 * L12) - (L3 * L3)) / (2 * L12 * L3);
 80029a2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80029a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029b8:	edd3 6a00 	vldr	s13, [r3]
 80029bc:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ca:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029cc:	edd3 6a00 	vldr	s13, [r3]
 80029d0:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029de:	4b5b      	ldr	r3, [pc, #364]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1 - (C3 * C3));
 80029fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0e:	f7fe f825 	bl	8000a5c <_ZSt4sqrtf>
 8002a12:	eef0 7a40 	vmov.f32	s15, s0
 8002a16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a1a:	eeb1 7b47 	vneg.f64	d7, d7
 8002a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a22:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3, C3);
 8002a26:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8002a2a:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8002a2e:	f7fe f801 	bl	8000a34 <_ZSt5atan2ff>
 8002a32:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3 * S3;
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3 * C3);
 8002a48:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 8002a4a:	ed93 7a00 	vldr	s14, [r3]
 8002a4e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a60:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3 * x) + (L123C3 * y);
 8002a64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a68:	eeb1 7a67 	vneg.f32	s14, s15
 8002a6c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a74:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a78:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3 * y) + (L123C3 * x);
 8002a88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a8c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a94:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa4:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1, C1);
 8002aa8:	edd7 0a07 	vldr	s1, [r7, #28]
 8002aac:	ed97 0a08 	vldr	s0, [r7, #32]
 8002ab0:	f7fd ffc0 	bl	8000a34 <_ZSt5atan2ff>
 8002ab4:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002ab8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002abc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002acc:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <_Z6fcb_IKffff+0x208>)
 8002ad2:	ed93 7a00 	vldr	s14, [r3]
 8002ad6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <_Z6fcb_IKffff+0x20c>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <_Z6fcb_IKffff+0x210>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af2:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1 * 1000.0;
 8002af6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002afa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <_Z6fcb_IKffff+0x214>)
 8002b04:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2 * 1000.0;
 8002b08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b0c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <_Z6fcb_IKffff+0x218>)
 8002b16:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3 * 1000.0;
 8002b1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b1e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <_Z6fcb_IKffff+0x21c>)
 8002b28:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4 * 1000.0;
 8002b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b30:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <_Z6fcb_IKffff+0x220>)
 8002b3a:	edc3 7a00 	vstr	s15, [r3]

}
 8002b3e:	bf00      	nop
 8002b40:	3748      	adds	r7, #72	; 0x48
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	447a0000 	.word	0x447a0000
 8002b4c:	2400021c 	.word	0x2400021c
 8002b50:	24000218 	.word	0x24000218
 8002b54:	24000228 	.word	0x24000228
 8002b58:	24000224 	.word	0x24000224
 8002b5c:	24000220 	.word	0x24000220
 8002b60:	24000c00 	.word	0x24000c00
 8002b64:	24000c04 	.word	0x24000c04
 8002b68:	24000c08 	.word	0x24000c08
 8002b6c:	24000c0c 	.word	0x24000c0c

08002b70 <_Z20Update_State_Machinev>:
float offset_y = -10.0; //10.79371
float offset_x_new = 0;
float offset_y_new = 0;
int indexy;
float pos_x, pos_y;
void Update_State_Machine() {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	ed2d 8b02 	vpush	{d8}
 8002b76:	af00      	add	r7, sp, #0

	switch (control_state) {
 8002b78:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <_Z20Update_State_Machinev+0xac>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	3b29      	subs	r3, #41	; 0x29
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	f200 8418 	bhi.w	80033b6 <_Z20Update_State_Machinev+0x846>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <_Z20Update_State_Machinev+0x1c>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002bcd 	.word	0x08002bcd
 8002b90:	08002eed 	.word	0x08002eed
 8002b94:	08003053 	.word	0x08003053
 8002b98:	080033b7 	.word	0x080033b7
 8002b9c:	080033b7 	.word	0x080033b7
 8002ba0:	080033b7 	.word	0x080033b7
 8002ba4:	080033b7 	.word	0x080033b7
 8002ba8:	080033b7 	.word	0x080033b7
 8002bac:	080033b7 	.word	0x080033b7
 8002bb0:	080033b7 	.word	0x080033b7
 8002bb4:	080033c5 	.word	0x080033c5
 8002bb8:	080030af 	.word	0x080030af
 8002bbc:	080033c5 	.word	0x080033c5
 8002bc0:	080031cb 	.word	0x080031cb
 8002bc4:	080033c5 	.word	0x080033c5
 8002bc8:	08003311 	.word	0x08003311
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002bcc:	f7ff fe6a 	bl	80028a4 <_Z10Call_queuev>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002bd4:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2bff      	cmp	r3, #255	; 0xff
 8002bdc:	f000 817d 	beq.w	8002eda <_Z20Update_State_Machinev+0x36a>
		{
			if (indexy == 99)
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b63      	cmp	r3, #99	; 0x63
 8002be6:	d10a      	bne.n	8002bfe <_Z20Update_State_Machinev+0x8e>
				{
					Planning_q1 = 1400;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <_Z20Update_State_Machinev+0xb4>)
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <_Z20Update_State_Machinev+0xb8>)
 8002bec:	601a      	str	r2, [r3, #0]
					Planning_q3 = -1400;
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <_Z20Update_State_Machinev+0xbc>)
 8002bf0:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <_Z20Update_State_Machinev+0xc0>)
 8002bf2:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <_Z20Update_State_Machinev+0xc4>)
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e10e      	b.n	8002e1c <_Z20Update_State_Machinev+0x2ac>
				}
			else if (indexy == 123)
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b7b      	cmp	r3, #123	; 0x7b
 8002c04:	d11c      	bne.n	8002c40 <_Z20Update_State_Machinev+0xd0>
			{
					Planning_q1 = 1100;
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <_Z20Update_State_Machinev+0xb4>)
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <_Z20Update_State_Machinev+0xc8>)
 8002c0a:	601a      	str	r2, [r3, #0]
					Planning_q3 = -600;
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <_Z20Update_State_Machinev+0xbc>)
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <_Z20Update_State_Machinev+0xcc>)
 8002c10:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <_Z20Update_State_Machinev+0xc4>)
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e0ff      	b.n	8002e1c <_Z20Update_State_Machinev+0x2ac>
 8002c1c:	24000bf4 	.word	0x24000bf4
 8002c20:	24000c18 	.word	0x24000c18
 8002c24:	24000c00 	.word	0x24000c00
 8002c28:	44af0000 	.word	0x44af0000
 8002c2c:	24000c08 	.word	0x24000c08
 8002c30:	c4af0000 	.word	0xc4af0000
 8002c34:	24000c0c 	.word	0x24000c0c
 8002c38:	44898000 	.word	0x44898000
 8002c3c:	c4160000 	.word	0xc4160000
			}
			else
				{
					test_value_r = radias[indexy];
 8002c40:	4bcb      	ldr	r3, [pc, #812]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4acb      	ldr	r2, [pc, #812]	; (8002f74 <_Z20Update_State_Machinev+0x404>)
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c52:	ee17 2a90 	vmov	r2, s15
 8002c56:	4bc8      	ldr	r3, [pc, #800]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002c58:	601a      	str	r2, [r3, #0]
					test_value_theta = theta[indexy];
 8002c5a:	4bc5      	ldr	r3, [pc, #788]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4ac7      	ldr	r2, [pc, #796]	; (8002f7c <_Z20Update_State_Machinev+0x40c>)
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c6c:	ee17 2a90 	vmov	r2, s15
 8002c70:	4bc3      	ldr	r3, [pc, #780]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002c72:	601a      	str	r2, [r3, #0]
					offset_x_new = ((0.16075* (test_value_r * cos((test_value_theta + angle_chess) / 1000.0))) + 0.02289) / 10.0;
 8002c74:	4bc0      	ldr	r3, [pc, #768]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002c80:	4bbf      	ldr	r3, [pc, #764]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c8c:	4bbd      	ldr	r3, [pc, #756]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c9a:	ed9f 5bab 	vldr	d5, [pc, #684]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002c9e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ca2:	eeb0 0b46 	vmov.f64	d0, d6
 8002ca6:	f00e fd87 	bl	80117b8 <cos>
 8002caa:	eeb0 7b40 	vmov.f64	d7, d0
 8002cae:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002cb2:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002f50 <_Z20Update_State_Machinev+0x3e0>
 8002cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cba:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002f58 <_Z20Update_State_Machinev+0x3e8>
 8002cbe:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002cc2:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cce:	4bae      	ldr	r3, [pc, #696]	; (8002f88 <_Z20Update_State_Machinev+0x418>)
 8002cd0:	edc3 7a00 	vstr	s15, [r3]
					offset_y_new = ((0.29560* (test_value_r * sin((test_value_theta + angle_chess) / 1000.0))) + 1.05911) / 10.0;
 8002cd4:	4ba8      	ldr	r3, [pc, #672]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002ce0:	4ba7      	ldr	r3, [pc, #668]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cec:	4ba5      	ldr	r3, [pc, #660]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cfa:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002cfe:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d02:	eeb0 0b46 	vmov.f64	d0, d6
 8002d06:	f00e fda3 	bl	8011850 <sin>
 8002d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8002d0e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002d12:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8002f60 <_Z20Update_State_Machinev+0x3f0>
 8002d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d1a:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8002f68 <_Z20Update_State_Machinev+0x3f8>
 8002d1e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002d22:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002d26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d2e:	4b97      	ldr	r3, [pc, #604]	; (8002f8c <_Z20Update_State_Machinev+0x41c>)
 8002d30:	edc3 7a00 	vstr	s15, [r3]
					pos_x = (test_value_r * cos((test_value_theta + angle_chess) / 1000.0)) + offset_x + offset_x_new;
 8002d34:	4b90      	ldr	r3, [pc, #576]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4c:	4b8d      	ldr	r3, [pc, #564]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d5a:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002d5e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d62:	eeb0 0b46 	vmov.f64	d0, d6
 8002d66:	f00e fd27 	bl	80117b8 <cos>
 8002d6a:	eeb0 7b40 	vmov.f64	d7, d0
 8002d6e:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002d72:	4b87      	ldr	r3, [pc, #540]	; (8002f90 <_Z20Update_State_Machinev+0x420>)
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d80:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <_Z20Update_State_Machinev+0x418>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d92:	4b80      	ldr	r3, [pc, #512]	; (8002f94 <_Z20Update_State_Machinev+0x424>)
 8002d94:	edc3 7a00 	vstr	s15, [r3]
					pos_y = (test_value_r * sin((test_value_theta + angle_chess) / 1000.0)) + offset_y + offset_y_new;
 8002d98:	4b77      	ldr	r3, [pc, #476]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	ee07 3a90 	vmov	s15, r3
 8002da0:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002da4:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db0:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dbe:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002dc2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002dc6:	eeb0 0b46 	vmov.f64	d0, d6
 8002dca:	f00e fd41 	bl	8011850 <sin>
 8002dce:	eeb0 7b40 	vmov.f64	d7, d0
 8002dd2:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <_Z20Update_State_Machinev+0x428>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002de0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002de4:	4b69      	ldr	r3, [pc, #420]	; (8002f8c <_Z20Update_State_Machinev+0x41c>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002df2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002df6:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <_Z20Update_State_Machinev+0x42c>)
 8002df8:	edc3 7a00 	vstr	s15, [r3]
					fcb_IK(pos_x, pos_y, 0, 0);
 8002dfc:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <_Z20Update_State_Machinev+0x424>)
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <_Z20Update_State_Machinev+0x42c>)
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	eddf 1a65 	vldr	s3, [pc, #404]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e0c:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e10:	eef0 0a47 	vmov.f32	s1, s14
 8002e14:	eeb0 0a67 	vmov.f32	s0, s15
 8002e18:	f7ff fd98 	bl	800294c <_Z6fcb_IKffff>
				}
				Max_Time = 7;
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e1e:	4a62      	ldr	r2, [pc, #392]	; (8002fa8 <_Z20Update_State_Machinev+0x438>)
 8002e20:	601a      	str	r2, [r3, #0]
				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002e22:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	4b60      	ldr	r3, [pc, #384]	; (8002fac <_Z20Update_State_Machinev+0x43c>)
 8002e2a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e2e:	4b60      	ldr	r3, [pc, #384]	; (8002fb0 <_Z20Update_State_Machinev+0x440>)
 8002e30:	edd3 6a00 	vldr	s13, [r3]
 8002e34:	ed9f 3a5a 	vldr	s6, [pc, #360]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e38:	eddf 2a59 	vldr	s5, [pc, #356]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e3c:	ed9f 2a58 	vldr	s4, [pc, #352]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e40:	eddf 1a57 	vldr	s3, [pc, #348]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e44:	eeb0 1a66 	vmov.f32	s2, s13
 8002e48:	eef0 0a47 	vmov.f32	s1, s14
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	4856      	ldr	r0, [pc, #344]	; (8002fac <_Z20Update_State_Machinev+0x43c>)
 8002e52:	f7fd ffb7 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <_Z20Update_State_Machinev+0x444>)
 8002e5e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e62:	4b55      	ldr	r3, [pc, #340]	; (8002fb8 <_Z20Update_State_Machinev+0x448>)
 8002e64:	edd3 6a00 	vldr	s13, [r3]
 8002e68:	ed9f 3a4d 	vldr	s6, [pc, #308]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e6c:	eddf 2a4c 	vldr	s5, [pc, #304]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e70:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e74:	eddf 1a4a 	vldr	s3, [pc, #296]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e78:	eeb0 1a66 	vmov.f32	s2, s13
 8002e7c:	eef0 0a47 	vmov.f32	s1, s14
 8002e80:	eeb0 0a67 	vmov.f32	s0, s15
 8002e84:	484b      	ldr	r0, [pc, #300]	; (8002fb4 <_Z20Update_State_Machinev+0x444>)
 8002e86:	f7fd ff9d 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <_Z20Update_State_Machinev+0x44c>)
 8002e92:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <_Z20Update_State_Machinev+0x450>)
 8002e98:	edd3 6a00 	vldr	s13, [r3]
 8002e9c:	ed9f 3a40 	vldr	s6, [pc, #256]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea0:	eddf 2a3f 	vldr	s5, [pc, #252]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea4:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea8:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002eac:	eeb0 1a66 	vmov.f32	s2, s13
 8002eb0:	eef0 0a47 	vmov.f32	s1, s14
 8002eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb8:	4840      	ldr	r0, [pc, #256]	; (8002fbc <_Z20Update_State_Machinev+0x44c>)
 8002eba:	f7fd ff83 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <_Z20Update_State_Machinev+0x454>)
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
				joint13_on = true;
 8002ec6:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <_Z20Update_State_Machinev+0x458>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002ecc:	483f      	ldr	r0, [pc, #252]	; (8002fcc <_Z20Update_State_Machinev+0x45c>)
 8002ece:	f00a fc23 	bl	800d718 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002ed4:	2234      	movs	r2, #52	; 0x34
 8002ed6:	701a      	strb	r2, [r3, #0]
		}

//		Planning_q1
//		Planning_q3

		break;
 8002ed8:	e276      	b.n	80033c8 <_Z20Update_State_Machinev+0x858>
		else if (indexy == 255)
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2bff      	cmp	r3, #255	; 0xff
 8002ee0:	f040 8272 	bne.w	80033c8 <_Z20Update_State_Machinev+0x858>
			control_state = 0;
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
		break;
 8002eea:	e26d      	b.n	80033c8 <_Z20Update_State_Machinev+0x858>

	case 42:
		Max_Time = 10;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002eee:	4a39      	ldr	r2, [pc, #228]	; (8002fd4 <_Z20Update_State_Machinev+0x464>)
 8002ef0:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <_Z20Update_State_Machinev+0x458>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]

		if (Gripper_State[first - 1] == 1) {
 8002ef8:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <_Z20Update_State_Machinev+0x468>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	4a37      	ldr	r2, [pc, #220]	; (8002fdc <_Z20Update_State_Machinev+0x46c>)
 8002f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d06a      	beq.n	8002fe8 <_Z20Update_State_Machinev+0x478>
			fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002f12:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <_Z20Update_State_Machinev+0x470>)
 8002f1a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <_Z20Update_State_Machinev+0x474>)
 8002f20:	edd3 6a00 	vldr	s13, [r3]
 8002f24:	ed9f 3a1e 	vldr	s6, [pc, #120]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f28:	eddf 2a1d 	vldr	s5, [pc, #116]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f2c:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f30:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f34:	eeb0 1a66 	vmov.f32	s2, s13
 8002f38:	eef0 0a47 	vmov.f32	s1, s14
 8002f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f40:	4827      	ldr	r0, [pc, #156]	; (8002fe0 <_Z20Update_State_Machinev+0x470>)
 8002f42:	f7fd ff3f 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
 8002f46:	e076      	b.n	8003036 <_Z20Update_State_Machinev+0x4c6>
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	408f4000 	.word	0x408f4000
 8002f50:	bc6a7efa 	.word	0xbc6a7efa
 8002f54:	3fc49374 	.word	0x3fc49374
 8002f58:	e59f2baa 	.word	0xe59f2baa
 8002f5c:	3f977079 	.word	0x3f977079
 8002f60:	432ca57a 	.word	0x432ca57a
 8002f64:	3fd2eb1c 	.word	0x3fd2eb1c
 8002f68:	53cddd6e 	.word	0x53cddd6e
 8002f6c:	3ff0f21d 	.word	0x3ff0f21d
 8002f70:	24000c18 	.word	0x24000c18
 8002f74:	24000114 	.word	0x24000114
 8002f78:	24000bec 	.word	0x24000bec
 8002f7c:	24000014 	.word	0x24000014
 8002f80:	24000bf0 	.word	0x24000bf0
 8002f84:	24000aec 	.word	0x24000aec
 8002f88:	24000c10 	.word	0x24000c10
 8002f8c:	24000c14 	.word	0x24000c14
 8002f90:	2400022c 	.word	0x2400022c
 8002f94:	24000c1c 	.word	0x24000c1c
 8002f98:	24000230 	.word	0x24000230
 8002f9c:	24000c20 	.word	0x24000c20
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	24000af8 	.word	0x24000af8
 8002fa8:	40e00000 	.word	0x40e00000
 8002fac:	24000564 	.word	0x24000564
 8002fb0:	24000c00 	.word	0x24000c00
 8002fb4:	2400072c 	.word	0x2400072c
 8002fb8:	24000c08 	.word	0x24000c08
 8002fbc:	24000810 	.word	0x24000810
 8002fc0:	24000c0c 	.word	0x24000c0c
 8002fc4:	24000bfc 	.word	0x24000bfc
 8002fc8:	24000b4a 	.word	0x24000b4a
 8002fcc:	24001098 	.word	0x24001098
 8002fd0:	24000bf4 	.word	0x24000bf4
 8002fd4:	41200000 	.word	0x41200000
 8002fd8:	2400000c 	.word	0x2400000c
 8002fdc:	24000b9c 	.word	0x24000b9c
 8002fe0:	24000648 	.word	0x24000648
 8002fe4:	24000004 	.word	0x24000004
			Setpoint_J2_Down_pick, 0.0, 0.0, 0.0, 0.0);
		} else if (Gripper_State[first - 1] == 2) {
 8002fe8:	4bb4      	ldr	r3, [pc, #720]	; (80032bc <_Z20Update_State_Machinev+0x74c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	4ab4      	ldr	r2, [pc, #720]	; (80032c0 <_Z20Update_State_Machinev+0x750>)
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d019      	beq.n	8003036 <_Z20Update_State_Machinev+0x4c6>
			fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8003002:	4bb0      	ldr	r3, [pc, #704]	; (80032c4 <_Z20Update_State_Machinev+0x754>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	4baf      	ldr	r3, [pc, #700]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 800300a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800300e:	4baf      	ldr	r3, [pc, #700]	; (80032cc <_Z20Update_State_Machinev+0x75c>)
 8003010:	edd3 6a00 	vldr	s13, [r3]
 8003014:	ed9f 3aae 	vldr	s6, [pc, #696]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 8003018:	eddf 2aad 	vldr	s5, [pc, #692]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 800301c:	ed9f 2aac 	vldr	s4, [pc, #688]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 8003020:	eddf 1aab 	vldr	s3, [pc, #684]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 8003024:	eeb0 1a66 	vmov.f32	s2, s13
 8003028:	eef0 0a47 	vmov.f32	s1, s14
 800302c:	eeb0 0a67 	vmov.f32	s0, s15
 8003030:	48a5      	ldr	r0, [pc, #660]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 8003032:	f7fd fec7 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
			Setpoint_J2_Down_place, 0.0, 0.0, 0.0, 0.0);
		}


		t = 0;
 8003036:	4ba7      	ldr	r3, [pc, #668]	; (80032d4 <_Z20Update_State_Machinev+0x764>)
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 800303e:	48a6      	ldr	r0, [pc, #664]	; (80032d8 <_Z20Update_State_Machinev+0x768>)
 8003040:	f00a fb6a 	bl	800d718 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8003044:	4ba5      	ldr	r3, [pc, #660]	; (80032dc <_Z20Update_State_Machinev+0x76c>)
 8003046:	2236      	movs	r2, #54	; 0x36
 8003048:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 800304a:	4ba5      	ldr	r3, [pc, #660]	; (80032e0 <_Z20Update_State_Machinev+0x770>)
 800304c:	2201      	movs	r2, #1
 800304e:	701a      	strb	r2, [r3, #0]
		break;
 8003050:	e1bb      	b.n	80033ca <_Z20Update_State_Machinev+0x85a>

	case 43:
		Max_Time = 10;
 8003052:	4b9c      	ldr	r3, [pc, #624]	; (80032c4 <_Z20Update_State_Machinev+0x754>)
 8003054:	4aa3      	ldr	r2, [pc, #652]	; (80032e4 <_Z20Update_State_Machinev+0x774>)
 8003056:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8003058:	4ba3      	ldr	r3, [pc, #652]	; (80032e8 <_Z20Update_State_Machinev+0x778>)
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 800305e:	4b99      	ldr	r3, [pc, #612]	; (80032c4 <_Z20Update_State_Machinev+0x754>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	4b98      	ldr	r3, [pc, #608]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 8003066:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800306a:	4ba0      	ldr	r3, [pc, #640]	; (80032ec <_Z20Update_State_Machinev+0x77c>)
 800306c:	edd3 6a00 	vldr	s13, [r3]
 8003070:	ed9f 3a97 	vldr	s6, [pc, #604]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 8003074:	eddf 2a96 	vldr	s5, [pc, #600]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 8003078:	ed9f 2a95 	vldr	s4, [pc, #596]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 800307c:	eddf 1a94 	vldr	s3, [pc, #592]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 8003080:	eeb0 1a66 	vmov.f32	s2, s13
 8003084:	eef0 0a47 	vmov.f32	s1, s14
 8003088:	eeb0 0a67 	vmov.f32	s0, s15
 800308c:	488e      	ldr	r0, [pc, #568]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 800308e:	f7fd fe99 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Up, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8003092:	4b90      	ldr	r3, [pc, #576]	; (80032d4 <_Z20Update_State_Machinev+0x764>)
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 800309a:	488f      	ldr	r0, [pc, #572]	; (80032d8 <_Z20Update_State_Machinev+0x768>)
 800309c:	f00a fb3c 	bl	800d718 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 80030a0:	4b8e      	ldr	r3, [pc, #568]	; (80032dc <_Z20Update_State_Machinev+0x76c>)
 80030a2:	2238      	movs	r2, #56	; 0x38
 80030a4:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 80030a6:	4b8e      	ldr	r3, [pc, #568]	; (80032e0 <_Z20Update_State_Machinev+0x770>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
		break;
 80030ac:	e18d      	b.n	80033ca <_Z20Update_State_Machinev+0x85a>

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 80030ae:	488a      	ldr	r0, [pc, #552]	; (80032d8 <_Z20Update_State_Machinev+0x768>)
 80030b0:	f00a fbaa 	bl	800d808 <HAL_TIM_Base_Stop_IT>
		fcb_joint1.Goal_Velocity = 0;
 80030b4:	4b8e      	ldr	r3, [pc, #568]	; (80032f0 <_Z20Update_State_Machinev+0x780>)
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 80030bc:	4b8d      	ldr	r3, [pc, #564]	; (80032f4 <_Z20Update_State_Machinev+0x784>)
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 80030c4:	4b8c      	ldr	r3, [pc, #560]	; (80032f8 <_Z20Update_State_Machinev+0x788>)
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 80030cc:	4b88      	ldr	r3, [pc, #544]	; (80032f0 <_Z20Update_State_Machinev+0x780>)
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 80030d6:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <_Z20Update_State_Machinev+0x788>)
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 80030e0:	4b84      	ldr	r3, [pc, #528]	; (80032f4 <_Z20Update_State_Machinev+0x784>)
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 80030ea:	ed9f 0a79 	vldr	s0, [pc, #484]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 80030ee:	4883      	ldr	r0, [pc, #524]	; (80032fc <_Z20Update_State_Machinev+0x78c>)
 80030f0:	f7ff f976 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80030f4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 80030f8:	4881      	ldr	r0, [pc, #516]	; (8003300 <_Z20Update_State_Machinev+0x790>)
 80030fa:	f7ff f971 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80030fe:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 8003102:	4880      	ldr	r0, [pc, #512]	; (8003304 <_Z20Update_State_Machinev+0x794>)
 8003104:	f7ff f96c 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.Encoder;
 8003108:	4b79      	ldr	r3, [pc, #484]	; (80032f0 <_Z20Update_State_Machinev+0x780>)
 800310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310c:	4a78      	ldr	r2, [pc, #480]	; (80032f0 <_Z20Update_State_Machinev+0x780>)
 800310e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.Encoder;
 8003112:	4b78      	ldr	r3, [pc, #480]	; (80032f4 <_Z20Update_State_Machinev+0x784>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	4a77      	ldr	r2, [pc, #476]	; (80032f4 <_Z20Update_State_Machinev+0x784>)
 8003118:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.Encoder;
 800311c:	4b76      	ldr	r3, [pc, #472]	; (80032f8 <_Z20Update_State_Machinev+0x788>)
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	4a75      	ldr	r2, [pc, #468]	; (80032f8 <_Z20Update_State_Machinev+0x788>)
 8003122:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
//		fcb_joint1.C0 = fcb_joint1.Goal_Position;
//		fcb_joint4.C0 = fcb_joint4.Goal_Position;
//		fcb_joint3.C0 = fcb_joint3.Goal_Position;

		fcb_joint1.C1 = 0;
 8003126:	4b72      	ldr	r3, [pc, #456]	; (80032f0 <_Z20Update_State_Machinev+0x780>)
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 8003130:	4b71      	ldr	r3, [pc, #452]	; (80032f8 <_Z20Update_State_Machinev+0x788>)
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 800313a:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <_Z20Update_State_Machinev+0x780>)
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 8003144:	4b6c      	ldr	r3, [pc, #432]	; (80032f8 <_Z20Update_State_Machinev+0x788>)
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 800314e:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <_Z20Update_State_Machinev+0x780>)
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 8003158:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <_Z20Update_State_Machinev+0x788>)
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <_Z20Update_State_Machinev+0x780>)
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 800316c:	4b62      	ldr	r3, [pc, #392]	; (80032f8 <_Z20Update_State_Machinev+0x788>)
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8003176:	4b5e      	ldr	r3, [pc, #376]	; (80032f0 <_Z20Update_State_Machinev+0x780>)
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8003180:	4b5d      	ldr	r3, [pc, #372]	; (80032f8 <_Z20Update_State_Machinev+0x788>)
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 800318a:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <_Z20Update_State_Machinev+0x784>)
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8003194:	4b57      	ldr	r3, [pc, #348]	; (80032f4 <_Z20Update_State_Machinev+0x784>)
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 800319e:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <_Z20Update_State_Machinev+0x784>)
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 80031a8:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <_Z20Update_State_Machinev+0x784>)
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 80031b2:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <_Z20Update_State_Machinev+0x784>)
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 80031bc:	4b47      	ldr	r3, [pc, #284]	; (80032dc <_Z20Update_State_Machinev+0x76c>)
 80031be:	222a      	movs	r2, #42	; 0x2a
 80031c0:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <_Z20Update_State_Machinev+0x770>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
		break;
 80031c8:	e0ff      	b.n	80033ca <_Z20Update_State_Machinev+0x85a>

//		State_FIN = true;
		break;

	case 54:
		HAL_TIM_Base_Stop_IT(&htim14);
 80031ca:	4843      	ldr	r0, [pc, #268]	; (80032d8 <_Z20Update_State_Machinev+0x768>)
 80031cc:	f00a fb1c 	bl	800d808 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.Goal_Velocity = 0;
 80031d0:	4b3d      	ldr	r3, [pc, #244]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 80031d8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 80031dc:	484a      	ldr	r0, [pc, #296]	; (8003308 <_Z20Update_State_Machinev+0x798>)
 80031de:	f7ff f8ff 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 80031e8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 80031ec:	4b40      	ldr	r3, [pc, #256]	; (80032f0 <_Z20Update_State_Machinev+0x780>)
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 80031f6:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <_Z20Update_State_Machinev+0x788>)
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003200:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <_Z20Update_State_Machinev+0x784>)
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800320a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 800320e:	483b      	ldr	r0, [pc, #236]	; (80032fc <_Z20Update_State_Machinev+0x78c>)
 8003210:	f7ff f8e6 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8003214:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 8003218:	4839      	ldr	r0, [pc, #228]	; (8003300 <_Z20Update_State_Machinev+0x790>)
 800321a:	f7ff f8e1 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 800321e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80032d0 <_Z20Update_State_Machinev+0x760>
 8003222:	4838      	ldr	r0, [pc, #224]	; (8003304 <_Z20Update_State_Machinev+0x794>)
 8003224:	f7ff f8dc 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		if (Gripper_State[first - 1] == 1) {
 8003228:	4b24      	ldr	r3, [pc, #144]	; (80032bc <_Z20Update_State_Machinev+0x74c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3b01      	subs	r3, #1
 800322e:	4a24      	ldr	r2, [pc, #144]	; (80032c0 <_Z20Update_State_Machinev+0x750>)
 8003230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003234:	2b01      	cmp	r3, #1
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <_Z20Update_State_Machinev+0x6da>
			gripper.GripperClose();
 8003242:	4832      	ldr	r0, [pc, #200]	; (800330c <_Z20Update_State_Machinev+0x79c>)
 8003244:	f7fe fd62 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
 8003248:	e00f      	b.n	800326a <_Z20Update_State_Machinev+0x6fa>
		} else if (Gripper_State[first - 1] == 2) {
 800324a:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <_Z20Update_State_Machinev+0x74c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3b01      	subs	r3, #1
 8003250:	4a1b      	ldr	r2, [pc, #108]	; (80032c0 <_Z20Update_State_Machinev+0x750>)
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003256:	2b02      	cmp	r3, #2
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <_Z20Update_State_Machinev+0x6fa>
			gripper.GripperOpen();
 8003264:	4829      	ldr	r0, [pc, #164]	; (800330c <_Z20Update_State_Machinev+0x79c>)
 8003266:	f7fe fd67 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 800326a:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003288:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <_Z20Update_State_Machinev+0x758>)
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <_Z20Update_State_Machinev+0x76c>)
 80032b0:	222b      	movs	r2, #43	; 0x2b
 80032b2:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <_Z20Update_State_Machinev+0x770>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
		break;
 80032ba:	e086      	b.n	80033ca <_Z20Update_State_Machinev+0x85a>
 80032bc:	2400000c 	.word	0x2400000c
 80032c0:	24000b9c 	.word	0x24000b9c
 80032c4:	24000af8 	.word	0x24000af8
 80032c8:	24000648 	.word	0x24000648
 80032cc:	24000008 	.word	0x24000008
 80032d0:	00000000 	.word	0x00000000
 80032d4:	24000bfc 	.word	0x24000bfc
 80032d8:	24001098 	.word	0x24001098
 80032dc:	24000bf4 	.word	0x24000bf4
 80032e0:	24000af4 	.word	0x24000af4
 80032e4:	41200000 	.word	0x41200000
 80032e8:	24000b4a 	.word	0x24000b4a
 80032ec:	24000000 	.word	0x24000000
 80032f0:	24000564 	.word	0x24000564
 80032f4:	24000810 	.word	0x24000810
 80032f8:	2400072c 	.word	0x2400072c
 80032fc:	240004c4 	.word	0x240004c4
 8003300:	2400053c 	.word	0x2400053c
 8003304:	24000514 	.word	0x24000514
 8003308:	240004ec 	.word	0x240004ec
 800330c:	24000abc 	.word	0x24000abc
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 8003310:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <_Z20Update_State_Machinev+0x864>)
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8003318:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80033d8 <_Z20Update_State_Machinev+0x868>
 800331c:	482f      	ldr	r0, [pc, #188]	; (80033dc <_Z20Update_State_Machinev+0x86c>)
 800331e:	f7ff f85f 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8003322:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <_Z20Update_State_Machinev+0x864>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	4a2b      	ldr	r2, [pc, #172]	; (80033d4 <_Z20Update_State_Machinev+0x864>)
 8003328:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <_Z20Update_State_Machinev+0x870>)
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8003336:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <_Z20Update_State_Machinev+0x874>)
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003340:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <_Z20Update_State_Machinev+0x878>)
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800334a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80033d8 <_Z20Update_State_Machinev+0x868>
 800334e:	4827      	ldr	r0, [pc, #156]	; (80033ec <_Z20Update_State_Machinev+0x87c>)
 8003350:	f7ff f846 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8003354:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80033d8 <_Z20Update_State_Machinev+0x868>
 8003358:	4825      	ldr	r0, [pc, #148]	; (80033f0 <_Z20Update_State_Machinev+0x880>)
 800335a:	f7ff f841 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 800335e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80033d8 <_Z20Update_State_Machinev+0x868>
 8003362:	4824      	ldr	r0, [pc, #144]	; (80033f4 <_Z20Update_State_Machinev+0x884>)
 8003364:	f7ff f83c 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 8003368:	4823      	ldr	r0, [pc, #140]	; (80033f8 <_Z20Update_State_Machinev+0x888>)
 800336a:	f00a fa4d 	bl	800d808 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.C1 = 0;
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <_Z20Update_State_Machinev+0x864>)
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <_Z20Update_State_Machinev+0x864>)
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <_Z20Update_State_Machinev+0x864>)
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <_Z20Update_State_Machinev+0x864>)
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <_Z20Update_State_Machinev+0x864>)
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <_Z20Update_State_Machinev+0x864>)
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <_Z20Update_State_Machinev+0x88c>)
 80033aa:	2229      	movs	r2, #41	; 0x29
 80033ac:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <_Z20Update_State_Machinev+0x890>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	701a      	strb	r2, [r3, #0]
		break;
 80033b4:	e009      	b.n	80033ca <_Z20Update_State_Machinev+0x85a>

	default:
		control_state = 0;
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <_Z20Update_State_Machinev+0x88c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <_Z20Update_State_Machinev+0x890>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
		break;
 80033c2:	e002      	b.n	80033ca <_Z20Update_State_Machinev+0x85a>
		break;
 80033c4:	bf00      	nop
 80033c6:	e000      	b.n	80033ca <_Z20Update_State_Machinev+0x85a>
		break;
 80033c8:	bf00      	nop
	}
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	ecbd 8b02 	vpop	{d8}
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	24000648 	.word	0x24000648
 80033d8:	00000000 	.word	0x00000000
 80033dc:	240004ec 	.word	0x240004ec
 80033e0:	24000564 	.word	0x24000564
 80033e4:	2400072c 	.word	0x2400072c
 80033e8:	24000810 	.word	0x24000810
 80033ec:	240004c4 	.word	0x240004c4
 80033f0:	2400053c 	.word	0x2400053c
 80033f4:	24000514 	.word	0x24000514
 80033f8:	24001098 	.word	0x24001098
 80033fc:	24000bf4 	.word	0x24000bf4
 8003400:	24000af4 	.word	0x24000af4

08003404 <HAL_UARTEx_RxEventCallback>:
float box_q4[30];
float idx, idy;

#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003404:	b5b0      	push	{r4, r5, r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a8f      	ldr	r2, [pc, #572]	; (8003650 <HAL_UARTEx_RxEventCallback+0x24c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	f040 8188 	bne.w	800372a <HAL_UARTEx_RxEventCallback+0x326>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 800341a:	4a8e      	ldr	r2, [pc, #568]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 800341c:	4b8e      	ldr	r3, [pc, #568]	; (8003658 <HAL_UARTEx_RxEventCallback+0x254>)
 800341e:	4614      	mov	r4, r2
 8003420:	461d      	mov	r5, r3
 8003422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003426:	682b      	ldr	r3, [r5, #0]
 8003428:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 800342a:	2214      	movs	r2, #20
 800342c:	2100      	movs	r1, #0
 800342e:	488a      	ldr	r0, [pc, #552]	; (8003658 <HAL_UARTEx_RxEventCallback+0x254>)
 8003430:	f00f fa3e 	bl	80128b0 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	2b02      	cmp	r3, #2
 8003438:	f240 8166 	bls.w	8003708 <HAL_UARTEx_RxEventCallback+0x304>
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	2b14      	cmp	r3, #20
 8003440:	f200 8162 	bhi.w	8003708 <HAL_UARTEx_RxEventCallback+0x304>
			cmdDataSize = Size - 2;	// Calculate data length.
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	3b02      	subs	r3, #2
 8003448:	b29a      	uxth	r2, r3
 800344a:	4b84      	ldr	r3, [pc, #528]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 800344c:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 800344e:	4b83      	ldr	r3, [pc, #524]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	497f      	ldr	r1, [pc, #508]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 8003458:	4881      	ldr	r0, [pc, #516]	; (8003660 <HAL_UARTEx_RxEventCallback+0x25c>)
 800345a:	f004 f80d 	bl	8007478 <HAL_CRC_Calculate>
 800345e:	4603      	mov	r3, r0
 8003460:	b29a      	uxth	r2, r3
 8003462:	4b80      	ldr	r3, [pc, #512]	; (8003664 <HAL_UARTEx_RxEventCallback+0x260>)
 8003464:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8003466:	4b7d      	ldr	r3, [pc, #500]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	4b79      	ldr	r3, [pc, #484]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 8003470:	5c9b      	ldrb	r3, [r3, r2]
 8003472:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8003474:	b21a      	sxth	r2, r3
 8003476:	4b79      	ldr	r3, [pc, #484]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	4975      	ldr	r1, [pc, #468]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 8003480:	5ccb      	ldrb	r3, [r1, r3]
 8003482:	b21b      	sxth	r3, r3
 8003484:	4313      	orrs	r3, r2
 8003486:	b21b      	sxth	r3, r3
 8003488:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 800348a:	4b77      	ldr	r3, [pc, #476]	; (8003668 <HAL_UARTEx_RxEventCallback+0x264>)
 800348c:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800348e:	4b75      	ldr	r3, [pc, #468]	; (8003664 <HAL_UARTEx_RxEventCallback+0x260>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29a      	uxth	r2, r3
 8003494:	4b74      	ldr	r3, [pc, #464]	; (8003668 <HAL_UARTEx_RxEventCallback+0x264>)
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	429a      	cmp	r2, r3
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8151 	beq.w	800374c <HAL_UARTEx_RxEventCallback+0x348>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80034aa:	2201      	movs	r2, #1
 80034ac:	2102      	movs	r1, #2
 80034ae:	486f      	ldr	r0, [pc, #444]	; (800366c <HAL_UARTEx_RxEventCallback+0x268>)
 80034b0:	f007 f968 	bl	800a784 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ba:	486d      	ldr	r0, [pc, #436]	; (8003670 <HAL_UARTEx_RxEventCallback+0x26c>)
 80034bc:	f007 f962 	bl	800a784 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 80034c0:	4b64      	ldr	r3, [pc, #400]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b61      	cmp	r3, #97	; 0x61
 80034c6:	d106      	bne.n	80034d6 <HAL_UARTEx_RxEventCallback+0xd2>
 80034c8:	4b64      	ldr	r3, [pc, #400]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d101      	bne.n	80034d6 <HAL_UARTEx_RxEventCallback+0xd2>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_UARTEx_RxEventCallback+0xd4>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d014      	beq.n	8003506 <HAL_UARTEx_RxEventCallback+0x102>
						{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 80034dc:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	b25a      	sxtb	r2, r3
 80034e2:	4b64      	ldr	r3, [pc, #400]	; (8003674 <HAL_UARTEx_RxEventCallback+0x270>)
 80034e4:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 80034e6:	4b5b      	ldr	r3, [pc, #364]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 80034e8:	789b      	ldrb	r3, [r3, #2]
 80034ea:	b25a      	sxtb	r2, r3
 80034ec:	4b62      	ldr	r3, [pc, #392]	; (8003678 <HAL_UARTEx_RxEventCallback+0x274>)
 80034ee:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 80034f0:	4b58      	ldr	r3, [pc, #352]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 80034f2:	78db      	ldrb	r3, [r3, #3]
 80034f4:	b25a      	sxtb	r2, r3
 80034f6:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_UARTEx_RxEventCallback+0x278>)
 80034f8:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 80034fa:	4b56      	ldr	r3, [pc, #344]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 80034fc:	791b      	ldrb	r3, [r3, #4]
 80034fe:	b25a      	sxtb	r2, r3
 8003500:	4b5f      	ldr	r3, [pc, #380]	; (8003680 <HAL_UARTEx_RxEventCallback+0x27c>)
 8003502:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
					pyaw = Old_Rx_Buffer[7];
				}

			}
 8003504:	e122      	b.n	800374c <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 8003506:	4b53      	ldr	r3, [pc, #332]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b71      	cmp	r3, #113	; 0x71
 800350c:	d106      	bne.n	800351c <HAL_UARTEx_RxEventCallback+0x118>
 800350e:	4b53      	ldr	r3, [pc, #332]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b05      	cmp	r3, #5
 8003516:	d101      	bne.n	800351c <HAL_UARTEx_RxEventCallback+0x118>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_UARTEx_RxEventCallback+0x11a>
 800351c:	2300      	movs	r3, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d014      	beq.n	800354c <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 8003522:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 8003524:	785b      	ldrb	r3, [r3, #1]
 8003526:	b25a      	sxtb	r2, r3
 8003528:	4b56      	ldr	r3, [pc, #344]	; (8003684 <HAL_UARTEx_RxEventCallback+0x280>)
 800352a:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 800352c:	4b49      	ldr	r3, [pc, #292]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 800352e:	789b      	ldrb	r3, [r3, #2]
 8003530:	b25a      	sxtb	r2, r3
 8003532:	4b55      	ldr	r3, [pc, #340]	; (8003688 <HAL_UARTEx_RxEventCallback+0x284>)
 8003534:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8003536:	4b47      	ldr	r3, [pc, #284]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 8003538:	78db      	ldrb	r3, [r3, #3]
 800353a:	b25a      	sxtb	r2, r3
 800353c:	4b53      	ldr	r3, [pc, #332]	; (800368c <HAL_UARTEx_RxEventCallback+0x288>)
 800353e:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8003540:	4b44      	ldr	r3, [pc, #272]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	b25a      	sxtb	r2, r3
 8003546:	4b52      	ldr	r3, [pc, #328]	; (8003690 <HAL_UARTEx_RxEventCallback+0x28c>)
 8003548:	701a      	strb	r2, [r3, #0]
			}
 800354a:	e0ff      	b.n	800374c <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2) {
 800354c:	4b41      	ldr	r3, [pc, #260]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b85      	cmp	r3, #133	; 0x85
 8003552:	d106      	bne.n	8003562 <HAL_UARTEx_RxEventCallback+0x15e>
 8003554:	4b41      	ldr	r3, [pc, #260]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d101      	bne.n	8003562 <HAL_UARTEx_RxEventCallback+0x15e>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_UARTEx_RxEventCallback+0x160>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 8003568:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_UARTEx_RxEventCallback+0x290>)
 800356a:	2233      	movs	r2, #51	; 0x33
 800356c:	701a      	strb	r2, [r3, #0]
			}
 800356e:	e0ed      	b.n	800374c <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b86      	cmp	r3, #134	; 0x86
 8003576:	d106      	bne.n	8003586 <HAL_UARTEx_RxEventCallback+0x182>
 8003578:	4b38      	ldr	r3, [pc, #224]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b03      	cmp	r3, #3
 8003580:	d101      	bne.n	8003586 <HAL_UARTEx_RxEventCallback+0x182>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_UARTEx_RxEventCallback+0x184>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 8003594:	789b      	ldrb	r3, [r3, #2]
 8003596:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 8003598:	68f9      	ldr	r1, [r7, #12]
 800359a:	6938      	ldr	r0, [r7, #16]
 800359c:	f7ff f944 	bl	8002828 <_Z12Insert_queueii>
			}
 80035a0:	e0d4      	b.n	800374c <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2) {
 80035a2:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b87      	cmp	r3, #135	; 0x87
 80035a8:	d106      	bne.n	80035b8 <HAL_UARTEx_RxEventCallback+0x1b4>
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d101      	bne.n	80035b8 <HAL_UARTEx_RxEventCallback+0x1b4>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_UARTEx_RxEventCallback+0x1b6>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 80035be:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 80035c0:	785b      	ldrb	r3, [r3, #1]
 80035c2:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 80035c4:	4a33      	ldr	r2, [pc, #204]	; (8003694 <HAL_UARTEx_RxEventCallback+0x290>)
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 80035ca:	f7ff fad1 	bl	8002b70 <_Z20Update_State_Machinev>
			}
 80035ce:	e0bd      	b.n	800374c <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2) {
 80035d0:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b89      	cmp	r3, #137	; 0x89
 80035d6:	d106      	bne.n	80035e6 <HAL_UARTEx_RxEventCallback+0x1e2>
 80035d8:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d101      	bne.n	80035e6 <HAL_UARTEx_RxEventCallback+0x1e2>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_UARTEx_RxEventCallback+0x1e4>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 80035ec:	f7ff fac0 	bl	8002b70 <_Z20Update_State_Machinev>
			}
 80035f0:	e0ac      	b.n	800374c <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 80035f2:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b81      	cmp	r3, #129	; 0x81
 80035f8:	d106      	bne.n	8003608 <HAL_UARTEx_RxEventCallback+0x204>
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d101      	bne.n	8003608 <HAL_UARTEx_RxEventCallback+0x204>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_UARTEx_RxEventCallback+0x206>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d015      	beq.n	800363a <HAL_UARTEx_RxEventCallback+0x236>
					gripperstate = Old_Rx_Buffer[1];
 800360e:	4b11      	ldr	r3, [pc, #68]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 8003610:	785b      	ldrb	r3, [r3, #1]
 8003612:	461a      	mov	r2, r3
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <HAL_UARTEx_RxEventCallback+0x294>)
 8003616:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 8003618:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <HAL_UARTEx_RxEventCallback+0x294>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 800362a:	481c      	ldr	r0, [pc, #112]	; (800369c <HAL_UARTEx_RxEventCallback+0x298>)
 800362c:	f7fe fb84 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
			}
 8003630:	e08c      	b.n	800374c <HAL_UARTEx_RxEventCallback+0x348>
						gripper.GripperClose();
 8003632:	481a      	ldr	r0, [pc, #104]	; (800369c <HAL_UARTEx_RxEventCallback+0x298>)
 8003634:	f7fe fb6a 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
			}
 8003638:	e088      	b.n	800374c <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_UARTEx_RxEventCallback+0x250>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b91      	cmp	r3, #145	; 0x91
 8003640:	d12e      	bne.n	80036a0 <HAL_UARTEx_RxEventCallback+0x29c>
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_UARTEx_RxEventCallback+0x258>)
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b08      	cmp	r3, #8
 800364a:	d129      	bne.n	80036a0 <HAL_UARTEx_RxEventCallback+0x29c>
 800364c:	2301      	movs	r3, #1
 800364e:	e028      	b.n	80036a2 <HAL_UARTEx_RxEventCallback+0x29e>
 8003650:	24001378 	.word	0x24001378
 8003654:	24000b1c 	.word	0x24000b1c
 8003658:	24000b30 	.word	0x24000b30
 800365c:	24000b44 	.word	0x24000b44
 8003660:	24000430 	.word	0x24000430
 8003664:	24000b14 	.word	0x24000b14
 8003668:	24000b16 	.word	0x24000b16
 800366c:	58021000 	.word	0x58021000
 8003670:	58020400 	.word	0x58020400
 8003674:	24000afc 	.word	0x24000afc
 8003678:	24000afd 	.word	0x24000afd
 800367c:	24000afe 	.word	0x24000afe
 8003680:	24000aff 	.word	0x24000aff
 8003684:	24000b00 	.word	0x24000b00
 8003688:	24000b01 	.word	0x24000b01
 800368c:	24000b02 	.word	0x24000b02
 8003690:	24000b03 	.word	0x24000b03
 8003694:	24000bf4 	.word	0x24000bf4
 8003698:	24000b18 	.word	0x24000b18
 800369c:	24000abc 	.word	0x24000abc
 80036a0:	2300      	movs	r3, #0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d052      	beq.n	800374c <HAL_UARTEx_RxEventCallback+0x348>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80036a6:	4b5f      	ldr	r3, [pc, #380]	; (8003824 <HAL_UARTEx_RxEventCallback+0x420>)
 80036a8:	785b      	ldrb	r3, [r3, #1]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	4a5d      	ldr	r2, [pc, #372]	; (8003824 <HAL_UARTEx_RxEventCallback+0x420>)
 80036ae:	7892      	ldrb	r2, [r2, #2]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ba:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <HAL_UARTEx_RxEventCallback+0x424>)
 80036bc:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
 80036c0:	4b58      	ldr	r3, [pc, #352]	; (8003824 <HAL_UARTEx_RxEventCallback+0x420>)
 80036c2:	78db      	ldrb	r3, [r3, #3]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	4a57      	ldr	r2, [pc, #348]	; (8003824 <HAL_UARTEx_RxEventCallback+0x420>)
 80036c8:	7912      	ldrb	r2, [r2, #4]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d4:	4b55      	ldr	r3, [pc, #340]	; (800382c <HAL_UARTEx_RxEventCallback+0x428>)
 80036d6:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
 80036da:	4b52      	ldr	r3, [pc, #328]	; (8003824 <HAL_UARTEx_RxEventCallback+0x420>)
 80036dc:	795b      	ldrb	r3, [r3, #5]
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	4a50      	ldr	r2, [pc, #320]	; (8003824 <HAL_UARTEx_RxEventCallback+0x420>)
 80036e2:	7992      	ldrb	r2, [r2, #6]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ee:	4b50      	ldr	r3, [pc, #320]	; (8003830 <HAL_UARTEx_RxEventCallback+0x42c>)
 80036f0:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 80036f4:	4b4b      	ldr	r3, [pc, #300]	; (8003824 <HAL_UARTEx_RxEventCallback+0x420>)
 80036f6:	79db      	ldrb	r3, [r3, #7]
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003700:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <HAL_UARTEx_RxEventCallback+0x430>)
 8003702:	edc3 7a00 	vstr	s15, [r3]
			}
 8003706:	e021      	b.n	800374c <HAL_UARTEx_RxEventCallback+0x348>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	2102      	movs	r1, #2
 800370c:	484a      	ldr	r0, [pc, #296]	; (8003838 <HAL_UARTEx_RxEventCallback+0x434>)
 800370e:	f007 f839 	bl	800a784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003712:	2201      	movs	r2, #1
 8003714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003718:	4848      	ldr	r0, [pc, #288]	; (800383c <HAL_UARTEx_RxEventCallback+0x438>)
 800371a:	f007 f833 	bl	800a784 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 800371e:	220c      	movs	r2, #12
 8003720:	4947      	ldr	r1, [pc, #284]	; (8003840 <HAL_UARTEx_RxEventCallback+0x43c>)
 8003722:	4848      	ldr	r0, [pc, #288]	; (8003844 <HAL_UARTEx_RxEventCallback+0x440>)
 8003724:	f00b fdae 	bl	800f284 <HAL_UART_Transmit_DMA>
 8003728:	e011      	b.n	800374e <HAL_UARTEx_RxEventCallback+0x34a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800372a:	2200      	movs	r2, #0
 800372c:	2102      	movs	r1, #2
 800372e:	4842      	ldr	r0, [pc, #264]	; (8003838 <HAL_UARTEx_RxEventCallback+0x434>)
 8003730:	f007 f828 	bl	800a784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003734:	2201      	movs	r2, #1
 8003736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800373a:	4840      	ldr	r0, [pc, #256]	; (800383c <HAL_UARTEx_RxEventCallback+0x438>)
 800373c:	f007 f822 	bl	800a784 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 8003740:	2215      	movs	r2, #21
 8003742:	4941      	ldr	r1, [pc, #260]	; (8003848 <HAL_UARTEx_RxEventCallback+0x444>)
 8003744:	483f      	ldr	r0, [pc, #252]	; (8003844 <HAL_UARTEx_RxEventCallback+0x440>)
 8003746:	f00b fd9d 	bl	800f284 <HAL_UART_Transmit_DMA>
 800374a:	e000      	b.n	800374e <HAL_UARTEx_RxEventCallback+0x34a>
			}
 800374c:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 800374e:	2214      	movs	r2, #20
 8003750:	493e      	ldr	r1, [pc, #248]	; (800384c <HAL_UARTEx_RxEventCallback+0x448>)
 8003752:	483c      	ldr	r0, [pc, #240]	; (8003844 <HAL_UARTEx_RxEventCallback+0x440>)
 8003754:	f00d fcfb 	bl	801114e <HAL_UARTEx_ReceiveToIdle_DMA>
	Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003758:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3d      	ldr	r2, [pc, #244]	; (8003854 <HAL_UARTEx_RxEventCallback+0x450>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d04a      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003762:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a3c      	ldr	r2, [pc, #240]	; (8003858 <HAL_UARTEx_RxEventCallback+0x454>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d045      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 800376c:	4b38      	ldr	r3, [pc, #224]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3a      	ldr	r2, [pc, #232]	; (800385c <HAL_UARTEx_RxEventCallback+0x458>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d040      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003776:	4b36      	ldr	r3, [pc, #216]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a39      	ldr	r2, [pc, #228]	; (8003860 <HAL_UARTEx_RxEventCallback+0x45c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d03b      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003780:	4b33      	ldr	r3, [pc, #204]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a37      	ldr	r2, [pc, #220]	; (8003864 <HAL_UARTEx_RxEventCallback+0x460>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d036      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 800378a:	4b31      	ldr	r3, [pc, #196]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a36      	ldr	r2, [pc, #216]	; (8003868 <HAL_UARTEx_RxEventCallback+0x464>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d031      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003794:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a34      	ldr	r2, [pc, #208]	; (800386c <HAL_UARTEx_RxEventCallback+0x468>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d02c      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 800379e:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a33      	ldr	r2, [pc, #204]	; (8003870 <HAL_UARTEx_RxEventCallback+0x46c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d027      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 80037a8:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a31      	ldr	r2, [pc, #196]	; (8003874 <HAL_UARTEx_RxEventCallback+0x470>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d022      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 80037b2:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a30      	ldr	r2, [pc, #192]	; (8003878 <HAL_UARTEx_RxEventCallback+0x474>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d01d      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 80037bc:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2e      	ldr	r2, [pc, #184]	; (800387c <HAL_UARTEx_RxEventCallback+0x478>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d018      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2d      	ldr	r2, [pc, #180]	; (8003880 <HAL_UARTEx_RxEventCallback+0x47c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d013      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 80037d0:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2b      	ldr	r2, [pc, #172]	; (8003884 <HAL_UARTEx_RxEventCallback+0x480>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00e      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 80037da:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2a      	ldr	r2, [pc, #168]	; (8003888 <HAL_UARTEx_RxEventCallback+0x484>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 80037e4:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a28      	ldr	r2, [pc, #160]	; (800388c <HAL_UARTEx_RxEventCallback+0x488>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_UARTEx_RxEventCallback+0x3f4>
 80037ee:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a27      	ldr	r2, [pc, #156]	; (8003890 <HAL_UARTEx_RxEventCallback+0x48c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d108      	bne.n	800380a <HAL_UARTEx_RxEventCallback+0x406>
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b14      	ldr	r3, [pc, #80]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0208 	bic.w	r2, r2, #8
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e008      	b.n	800381c <HAL_UARTEx_RxEventCallback+0x418>
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0204 	bic.w	r2, r2, #4
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	bf00      	nop
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bdb0      	pop	{r4, r5, r7, pc}
 8003824:	24000b1c 	.word	0x24000b1c
 8003828:	24000b04 	.word	0x24000b04
 800382c:	24000b08 	.word	0x24000b08
 8003830:	24000b0c 	.word	0x24000b0c
 8003834:	24000b10 	.word	0x24000b10
 8003838:	58021000 	.word	0x58021000
 800383c:	58020400 	.word	0x58020400
 8003840:	080152cc 	.word	0x080152cc
 8003844:	24001378 	.word	0x24001378
 8003848:	080152dc 	.word	0x080152dc
 800384c:	24000b30 	.word	0x24000b30
 8003850:	24001660 	.word	0x24001660
 8003854:	40020010 	.word	0x40020010
 8003858:	40020028 	.word	0x40020028
 800385c:	40020040 	.word	0x40020040
 8003860:	40020058 	.word	0x40020058
 8003864:	40020070 	.word	0x40020070
 8003868:	40020088 	.word	0x40020088
 800386c:	400200a0 	.word	0x400200a0
 8003870:	400200b8 	.word	0x400200b8
 8003874:	40020410 	.word	0x40020410
 8003878:	40020428 	.word	0x40020428
 800387c:	40020440 	.word	0x40020440
 8003880:	40020458 	.word	0x40020458
 8003884:	40020470 	.word	0x40020470
 8003888:	40020488 	.word	0x40020488
 800388c:	400204a0 	.word	0x400204a0
 8003890:	400204b8 	.word	0x400204b8
 8003894:	00000000 	.word	0x00000000

08003898 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4ac5      	ldr	r2, [pc, #788]	; (8003bb8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	f040 80cc 	bne.w	8003a42 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		encoderJ1.AMT21_Read();
 80038aa:	48c4      	ldr	r0, [pc, #784]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80038ac:	f7fc ff11 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80038b0:	48c2      	ldr	r0, [pc, #776]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80038b2:	f7fc ff3d 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	4bc1      	ldr	r3, [pc, #772]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80038bc:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80038be:	4bc0      	ldr	r3, [pc, #768]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d110      	bne.n	80038e8 <HAL_TIM_PeriodElapsedCallback+0x50>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 80038c6:	48bd      	ldr	r0, [pc, #756]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80038c8:	f7fc ff98 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80038cc:	4603      	mov	r3, r0
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038d6:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x310>
 80038da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038e2:	4bb8      	ldr	r3, [pc, #736]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80038e4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 80038e8:	48b7      	ldr	r0, [pc, #732]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80038ea:	f7fc fef2 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 80038ee:	48b6      	ldr	r0, [pc, #728]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80038f0:	f7fc ff1e 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	461a      	mov	r2, r3
 80038f8:	4bb4      	ldr	r3, [pc, #720]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x334>)
 80038fa:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 80038fc:	4bb3      	ldr	r3, [pc, #716]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x334>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d112      	bne.n	800392a <HAL_TIM_PeriodElapsedCallback+0x92>
			encoderJ2.unwarp();
 8003904:	48b0      	ldr	r0, [pc, #704]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003906:	f7fc ff9b 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 800390a:	48af      	ldr	r0, [pc, #700]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800390c:	f7fc fff7 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8003910:	ee07 0a90 	vmov	s15, r0
 8003914:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003918:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x310>
 800391c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003920:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003924:	4baa      	ldr	r3, [pc, #680]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003926:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 800392a:	48aa      	ldr	r0, [pc, #680]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800392c:	f7fc fed1 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003930:	48a8      	ldr	r0, [pc, #672]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003932:	f7fc fefd 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	4ba7      	ldr	r3, [pc, #668]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800393c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 800393e:	4ba6      	ldr	r3, [pc, #664]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d110      	bne.n	8003968 <HAL_TIM_PeriodElapsedCallback+0xd0>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8003946:	48a3      	ldr	r0, [pc, #652]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003948:	f7fc ff58 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800394c:	4603      	mov	r3, r0
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003956:	ed9f 5b94 	vldr	d5, [pc, #592]	; 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x310>
 800395a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800395e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003962:	4b9e      	ldr	r3, [pc, #632]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003964:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003968:	489d      	ldr	r0, [pc, #628]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800396a:	f7fc feb2 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 800396e:	489c      	ldr	r0, [pc, #624]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003970:	f7fc fede 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	4b9a      	ldr	r3, [pc, #616]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800397a:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 800397c:	4b99      	ldr	r3, [pc, #612]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d110      	bne.n	80039a6 <HAL_TIM_PeriodElapsedCallback+0x10e>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 8003984:	4896      	ldr	r0, [pc, #600]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003986:	f7fc ff39 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800398a:	4603      	mov	r3, r0
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003994:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8003bb0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003998:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800399c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80039a0:	4b91      	ldr	r3, [pc, #580]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80039a2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 80039a6:	4891      	ldr	r0, [pc, #580]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x354>)
 80039a8:	f7fd f824 	bl	80009f4 <_ZN10AS5047UABI12getMRadAngleEv>
 80039ac:	eef0 7a40 	vmov.f32	s15, s0
 80039b0:	4b8f      	ldr	r3, [pc, #572]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80039b2:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 80039b6:	488d      	ldr	r0, [pc, #564]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x354>)
 80039b8:	f7fc fffc 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 80039bc:	eef0 7a40 	vmov.f32	s15, s0
 80039c0:	4b8c      	ldr	r3, [pc, #560]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80039c2:	edc3 7a00 	vstr	s15, [r3]
//			stepperJ1.StepperSetFrequency(dq1);
//			stepperJ2.StepperSetFrequency(dq2*10.0);
//			stepperJ3.StepperSetFrequency(dq3);
//			stepperJ4.StepperSetFrequency(dq4);

		fcb_X.UpdateIVK(fcb_joint1.Encoder, 0.0, fcb_joint3.Encoder, 0.0, dx,
 80039c6:	4b7f      	ldr	r3, [pc, #508]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80039c8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80039cc:	4b83      	ldr	r3, [pc, #524]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x344>)
 80039ce:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80039d2:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	b25b      	sxtb	r3, r3
 80039d8:	ee06 3a90 	vmov	s13, r3
 80039dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80039e0:	4b86      	ldr	r3, [pc, #536]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x364>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	ee06 3a10 	vmov	s12, r3
 80039ea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80039ee:	4b84      	ldr	r3, [pc, #528]	; (8003c00 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	ee05 3a90 	vmov	s11, r3
 80039f8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80039fc:	eddf 3a81 	vldr	s7, [pc, #516]	; 8003c04 <HAL_TIM_PeriodElapsedCallback+0x36c>
 8003a00:	eeb0 3a65 	vmov.f32	s6, s11
 8003a04:	eef0 2a46 	vmov.f32	s5, s12
 8003a08:	eeb0 2a66 	vmov.f32	s4, s13
 8003a0c:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8003c04 <HAL_TIM_PeriodElapsedCallback+0x36c>
 8003a10:	eeb0 1a47 	vmov.f32	s2, s14
 8003a14:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8003c04 <HAL_TIM_PeriodElapsedCallback+0x36c>
 8003a18:	eeb0 0a67 	vmov.f32	s0, s15
 8003a1c:	487a      	ldr	r0, [pc, #488]	; (8003c08 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8003a1e:	f7fd f8a7 	bl	8000b70 <_ZN10RobotJoint9UpdateIVKEffffffff>
				dy, dz, 0.0);

		stepperJ1.StepperOpenLoopSpeedM(fcb_X.w_q1);
 8003a22:	4b79      	ldr	r3, [pc, #484]	; (8003c08 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8003a24:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003a28:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2c:	4877      	ldr	r0, [pc, #476]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8003a2e:	f7fe fcd7 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
		stepperJ3.StepperOpenLoopSpeedM(fcb_X.w_q3);
 8003a32:	4b75      	ldr	r3, [pc, #468]	; (8003c08 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8003a34:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003a38:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3c:	4874      	ldr	r0, [pc, #464]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8003a3e:	f7fe fccf 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
//					stepperJ4.StepperOpenLoopSpeed(u_q4/num);

	}

	if (htim == &htim16) {
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a73      	ldr	r2, [pc, #460]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	f040 8114 	bne.w	8003c74 <HAL_TIM_PeriodElapsedCallback+0x3dc>
		encoderJ1.AMT21_Read();
 8003a4c:	485b      	ldr	r0, [pc, #364]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003a4e:	f7fc fe40 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003a52:	485a      	ldr	r0, [pc, #360]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003a54:	f7fc fe6c 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4b58      	ldr	r3, [pc, #352]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003a5e:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8003a60:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d110      	bne.n	8003a8a <HAL_TIM_PeriodElapsedCallback+0x1f2>
			fcb_joint1.Encoder = (encoderJ1.getAngPos180() / 2.609);
 8003a68:	4854      	ldr	r0, [pc, #336]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003a6a:	f7fc fec7 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a78:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003a7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a84:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003a86:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003a8a:	484f      	ldr	r0, [pc, #316]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a8c:	f7fc fe21 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003a90:	484d      	ldr	r0, [pc, #308]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a92:	f7fc fe4d 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b4c      	ldr	r3, [pc, #304]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003a9c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d112      	bne.n	8003acc <HAL_TIM_PeriodElapsedCallback+0x234>
			encoderJ2.unwarp();
 8003aa6:	4848      	ldr	r0, [pc, #288]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003aa8:	f7fc feca 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8003aac:	4846      	ldr	r0, [pc, #280]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003aae:	f7fc ff26 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8003ab2:	ee07 0a90 	vmov	s15, r0
 8003ab6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003aba:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003abe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003ac2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ac6:	4b42      	ldr	r3, [pc, #264]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003ac8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 8003acc:	4841      	ldr	r0, [pc, #260]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003ace:	f7fc fe00 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003ad2:	4840      	ldr	r0, [pc, #256]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003ad4:	f7fc fe2c 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	4b3e      	ldr	r3, [pc, #248]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003ade:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003ae0:	4b3d      	ldr	r3, [pc, #244]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d110      	bne.n	8003b0a <HAL_TIM_PeriodElapsedCallback+0x272>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8003ae8:	483a      	ldr	r0, [pc, #232]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003aea:	f7fc fe87 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003aee:	4603      	mov	r3, r0
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003af8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003afc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003b00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b04:	4b35      	ldr	r3, [pc, #212]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003b06:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003b0a:	4835      	ldr	r0, [pc, #212]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003b0c:	f7fc fde1 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003b10:	4833      	ldr	r0, [pc, #204]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003b12:	f7fc fe0d 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003b16:	4603      	mov	r3, r0
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b32      	ldr	r3, [pc, #200]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003b1c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003b1e:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d110      	bne.n	8003b48 <HAL_TIM_PeriodElapsedCallback+0x2b0>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 8003b26:	482e      	ldr	r0, [pc, #184]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003b28:	f7fc fe68 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003b36:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8003bb0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003b3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003b3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b42:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003b44:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 8003b48:	4828      	ldr	r0, [pc, #160]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003b4a:	f7fc ff53 	bl	80009f4 <_ZN10AS5047UABI12getMRadAngleEv>
 8003b4e:	eef0 7a40 	vmov.f32	s15, s0
 8003b52:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003b54:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 8003b58:	4824      	ldr	r0, [pc, #144]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003b5a:	f7fc ff2b 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 8003b5e:	eef0 7a40 	vmov.f32	s15, s0
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003b64:	edc3 7a00 	vstr	s15, [r3]
//		current_angle = chessSPIEncoder.getRawRotation();
//		current_angle_map = chessSPIEncoder.read2angle(current_angle);
//		angle = current_angle_map - zero_position_map;
//		angle = chessSPIEncoder.normalize(angle);

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 8003b68:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b72:	4814      	ldr	r0, [pc, #80]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b74:	f7fd fa4a 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 8003b78:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b7e:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b80:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b8a:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b8c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint2.KalmanFillter(fcb_joint2.Encoder);
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b92:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b96:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9a:	480d      	ldr	r0, [pc, #52]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b9c:	f7fd fa36 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint2.kalman_pos = fcb_joint2.X11;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003ba2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ba6:	e037      	b.n	8003c18 <HAL_TIM_PeriodElapsedCallback+0x380>
 8003ba8:	645a1cac 	.word	0x645a1cac
 8003bac:	4004df3b 	.word	0x4004df3b
 8003bb0:	645a1cac 	.word	0x645a1cac
 8003bb4:	c004df3b 	.word	0xc004df3b
 8003bb8:	24000ed0 	.word	0x24000ed0
 8003bbc:	24000454 	.word	0x24000454
 8003bc0:	24000ad8 	.word	0x24000ad8
 8003bc4:	24000564 	.word	0x24000564
 8003bc8:	24000470 	.word	0x24000470
 8003bcc:	24000ad9 	.word	0x24000ad9
 8003bd0:	24000648 	.word	0x24000648
 8003bd4:	2400048c 	.word	0x2400048c
 8003bd8:	24000ada 	.word	0x24000ada
 8003bdc:	2400072c 	.word	0x2400072c
 8003be0:	240004a8 	.word	0x240004a8
 8003be4:	24000adb 	.word	0x24000adb
 8003be8:	24000810 	.word	0x24000810
 8003bec:	24000adc 	.word	0x24000adc
 8003bf0:	24000aec 	.word	0x24000aec
 8003bf4:	24000af0 	.word	0x24000af0
 8003bf8:	24000b00 	.word	0x24000b00
 8003bfc:	24000b01 	.word	0x24000b01
 8003c00:	24000b02 	.word	0x24000b02
 8003c04:	00000000 	.word	0x00000000
 8003c08:	240009d8 	.word	0x240009d8
 8003c0c:	240004c4 	.word	0x240004c4
 8003c10:	24000514 	.word	0x24000514
 8003c14:	24001130 	.word	0x24001130
 8003c18:	4ad9      	ldr	r2, [pc, #868]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003c1a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint2.kalman_velo = fcb_joint2.X21;
 8003c1e:	4bd8      	ldr	r3, [pc, #864]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003c20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c24:	4ad6      	ldr	r2, [pc, #856]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003c26:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003c2a:	4bd6      	ldr	r3, [pc, #856]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003c2c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003c30:	eeb0 0a67 	vmov.f32	s0, s15
 8003c34:	48d3      	ldr	r0, [pc, #844]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003c36:	f7fd f9e9 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003c3a:	4bd2      	ldr	r3, [pc, #840]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003c3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c40:	4ad0      	ldr	r2, [pc, #832]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003c42:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8003c46:	4bcf      	ldr	r3, [pc, #828]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003c48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c4c:	4acd      	ldr	r2, [pc, #820]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003c4e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		if (State_FIN) {
 8003c52:	4bcd      	ldr	r3, [pc, #820]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_TIM_PeriodElapsedCallback+0x3dc>
			Balloon++;
 8003c5c:	4bcb      	ldr	r3, [pc, #812]	; (8003f8c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	4aca      	ldr	r2, [pc, #808]	; (8003f8c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8003c64:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 8003c66:	f7fe ff83 	bl	8002b70 <_Z20Update_State_Machinev>
			Update_State_Machine();
 8003c6a:	f7fe ff81 	bl	8002b70 <_Z20Update_State_Machinev>
			State_FIN = false;
 8003c6e:	4bc6      	ldr	r3, [pc, #792]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
		}

	}

	if (htim == &htim14) {
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4ac6      	ldr	r2, [pc, #792]	; (8003f90 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	f040 8523 	bne.w	80046c4 <HAL_TIM_PeriodElapsedCallback+0xe2c>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 8003c7e:	4bc5      	ldr	r3, [pc, #788]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c80:	ed93 7a00 	vldr	s14, [r3]
 8003c84:	4bc3      	ldr	r3, [pc, #780]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8e:	edc7 7a07 	vstr	s15, [r7, #28]
		float t3 = t * t * t;
 8003c92:	4bc0      	ldr	r3, [pc, #768]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c94:	ed93 7a00 	vldr	s14, [r3]
 8003c98:	4bbe      	ldr	r3, [pc, #760]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c9a:	edd3 7a00 	vldr	s15, [r3]
 8003c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca2:	4bbc      	ldr	r3, [pc, #752]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003ca4:	edd3 7a00 	vldr	s15, [r3]
 8003ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cac:	edc7 7a06 	vstr	s15, [r7, #24]
		float t4 = t * t * t * t;
 8003cb0:	4bb8      	ldr	r3, [pc, #736]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003cb2:	ed93 7a00 	vldr	s14, [r3]
 8003cb6:	4bb7      	ldr	r3, [pc, #732]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003cb8:	edd3 7a00 	vldr	s15, [r3]
 8003cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cc0:	4bb4      	ldr	r3, [pc, #720]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003cc2:	edd3 7a00 	vldr	s15, [r3]
 8003cc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cca:	4bb2      	ldr	r3, [pc, #712]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003ccc:	edd3 7a00 	vldr	s15, [r3]
 8003cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd4:	edc7 7a05 	vstr	s15, [r7, #20]
		float t5 = t * t * t * t * t;
 8003cd8:	4bae      	ldr	r3, [pc, #696]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003cda:	ed93 7a00 	vldr	s14, [r3]
 8003cde:	4bad      	ldr	r3, [pc, #692]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003ce0:	edd3 7a00 	vldr	s15, [r3]
 8003ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ce8:	4baa      	ldr	r3, [pc, #680]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003cea:	edd3 7a00 	vldr	s15, [r3]
 8003cee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cf2:	4ba8      	ldr	r3, [pc, #672]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003cf4:	edd3 7a00 	vldr	s15, [r3]
 8003cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cfc:	4ba5      	ldr	r3, [pc, #660]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003cfe:	edd3 7a00 	vldr	s15, [r3]
 8003d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d06:	edc7 7a04 	vstr	s15, [r7, #16]
////	fcb_joint1.Goal_Position = fcb_X.q1;
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;

		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003d0a:	4ba3      	ldr	r3, [pc, #652]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d0c:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003d10:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d14:	4ba0      	ldr	r3, [pc, #640]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d16:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003d1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d1e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003d22:	4b9c      	ldr	r3, [pc, #624]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003d24:	edd3 7a00 	vldr	s15, [r3]
 8003d28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d2c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d30:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint1.C3 * t2) + (4.0 * fcb_joint1.C4 * t3)
 8003d34:	4b98      	ldr	r3, [pc, #608]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d36:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003d3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d3e:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003d42:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003d46:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d4e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003d56:	4b90      	ldr	r3, [pc, #576]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d58:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003d5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d60:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003d64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003d68:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d70:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d74:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint1.C5 * t4);
 8003d78:	4b87      	ldr	r3, [pc, #540]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d7a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003d7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d82:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003d86:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003d8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003d9e:	4b7e      	ldr	r3, [pc, #504]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003da0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003da4:	4b7c      	ldr	r3, [pc, #496]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003da6:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003daa:	4b7b      	ldr	r3, [pc, #492]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003dac:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003db0:	4b78      	ldr	r3, [pc, #480]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003db2:	edd3 7a00 	vldr	s15, [r3]
 8003db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dba:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C2 * t2) + (fcb_joint1.C3 * t3)
 8003dbe:	4b76      	ldr	r3, [pc, #472]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003dc0:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003dc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dd0:	4b71      	ldr	r3, [pc, #452]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003dd2:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003dd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dde:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C4 * t4) + (fcb_joint1.C5 * t5));
 8003de2:	4b6d      	ldr	r3, [pc, #436]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003de4:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003df4:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003df6:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003dfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e02:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003e06:	4b64      	ldr	r3, [pc, #400]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003e08:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003e0c:	4b5c      	ldr	r3, [pc, #368]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e0e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003e12:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e16:	4b5a      	ldr	r3, [pc, #360]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e18:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e20:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003e24:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003e26:	edd3 7a00 	vldr	s15, [r3]
 8003e2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e2e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e32:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint2.C3 * t2) + (4.0 * fcb_joint2.C4 * t3)
 8003e36:	4b52      	ldr	r3, [pc, #328]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e38:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003e3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e40:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003e44:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003e48:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e50:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e54:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003e58:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e5a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003e5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e62:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003e66:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003e6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e72:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e76:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint2.C5 * t4);
 8003e7a:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e7c:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003e80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e84:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003e88:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003e8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003ea0:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003ea2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003ea6:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003ea8:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003eac:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003eae:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003eb2:	4b38      	ldr	r3, [pc, #224]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C2 * t2) + (fcb_joint2.C3 * t3)
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003ec2:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003ec6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003ed4:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003ed8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C4 * t4) + (fcb_joint2.C5 * t5));
 8003ee4:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003ee6:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003eea:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003ef8:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f04:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003f0a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003f10:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003f14:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003f1a:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003f1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f22:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003f26:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003f28:	edd3 7a00 	vldr	s15, [r3]
 8003f2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f34:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint3.C3 * t2) + (4.0 * fcb_joint3.C4 * t3)
 8003f38:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003f3a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003f3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f42:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003f46:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003f4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f52:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f56:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003f5c:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003f60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f64:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003f68:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003f6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f74:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f78:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003f7c:	e00e      	b.n	8003f9c <HAL_TIM_PeriodElapsedCallback+0x704>
 8003f7e:	bf00      	nop
 8003f80:	24000648 	.word	0x24000648
 8003f84:	2400072c 	.word	0x2400072c
 8003f88:	24000af4 	.word	0x24000af4
 8003f8c:	24000bf8 	.word	0x24000bf8
 8003f90:	24001098 	.word	0x24001098
 8003f94:	24000bfc 	.word	0x24000bfc
 8003f98:	24000564 	.word	0x24000564
				+ (5.0 * fcb_joint3.C5 * t4);
 8003f9c:	4bca      	ldr	r3, [pc, #808]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003f9e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003fa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fa6:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003faa:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fb6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003fba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003fbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003fc2:	4bc1      	ldr	r3, [pc, #772]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003fc4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003fc8:	4bbf      	ldr	r3, [pc, #764]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003fca:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003fce:	4bbe      	ldr	r3, [pc, #760]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003fd0:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003fd4:	4bbd      	ldr	r3, [pc, #756]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fde:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C2 * t2) + (fcb_joint3.C3 * t3)
 8003fe2:	4bb9      	ldr	r3, [pc, #740]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003fe4:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003fe8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ff4:	4bb4      	ldr	r3, [pc, #720]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003ff6:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003ffa:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004002:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C4 * t4) + (fcb_joint3.C5 * t5));
 8004006:	4bb0      	ldr	r3, [pc, #704]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004008:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 800400c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004018:	4bab      	ldr	r3, [pc, #684]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800401a:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 800401e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004026:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 800402a:	4ba7      	ldr	r3, [pc, #668]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800402c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8004030:	4ba7      	ldr	r3, [pc, #668]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8004032:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8004036:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800403a:	4ba5      	ldr	r3, [pc, #660]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800403c:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8004040:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004044:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004048:	4ba0      	ldr	r3, [pc, #640]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0xa34>)
 800404a:	edd3 7a00 	vldr	s15, [r3]
 800404e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004052:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004056:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint4.C3 * t2) + (4.0 * fcb_joint4.C4 * t3)
 800405a:	4b9d      	ldr	r3, [pc, #628]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800405c:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8004060:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004064:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004068:	ee27 5b05 	vmul.f64	d5, d7, d5
 800406c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004070:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004074:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004078:	ee36 6b07 	vadd.f64	d6, d6, d7
 800407c:	4b94      	ldr	r3, [pc, #592]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800407e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8004082:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004086:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800408a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800408e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004092:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004096:	ee25 7b07 	vmul.f64	d7, d5, d7
 800409a:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint4.C5 * t4);
 800409e:	4b8c      	ldr	r3, [pc, #560]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80040a0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80040a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040a8:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80040ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80040b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80040b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80040bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80040c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 80040c4:	4b82      	ldr	r3, [pc, #520]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80040c6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 80040ca:	4b81      	ldr	r3, [pc, #516]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80040cc:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 80040d0:	4b7f      	ldr	r3, [pc, #508]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80040d2:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80040d6:	4b7d      	ldr	r3, [pc, #500]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0xa34>)
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C2 * t2) + (fcb_joint4.C3 * t3)
 80040e4:	4b7a      	ldr	r3, [pc, #488]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80040e6:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 80040ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80040ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040f6:	4b76      	ldr	r3, [pc, #472]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80040f8:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 80040fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004104:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C4 * t4) + (fcb_joint4.C5 * t5));
 8004108:	4b71      	ldr	r3, [pc, #452]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800410a:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 800410e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800411a:	4b6d      	ldr	r3, [pc, #436]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800411c:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8004120:	edd7 7a04 	vldr	s15, [r7, #16]
 8004124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004128:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 800412c:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800412e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;

		fcb_joint1.Kp_p = 0.4;
 8004132:	4b68      	ldr	r3, [pc, #416]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004134:	4a68      	ldr	r2, [pc, #416]	; (80042d8 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8004136:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8004138:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 8004140:	4b64      	ldr	r3, [pc, #400]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint2.Kp_p = 0.03;
 8004148:	4b64      	ldr	r3, [pc, #400]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800414a:	4a65      	ldr	r2, [pc, #404]	; (80042e0 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800414c:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint2.Ki_p = 0.0;
 800414e:	4b63      	ldr	r3, [pc, #396]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint2.Kd_p = 0.0;
 8004156:	4b61      	ldr	r3, [pc, #388]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint3.Kp_p = 0.15;
 800415e:	4b5a      	ldr	r3, [pc, #360]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004160:	4a60      	ldr	r2, [pc, #384]	; (80042e4 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8004162:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8004164:	4b58      	ldr	r3, [pc, #352]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 800416c:	4b56      	ldr	r3, [pc, #344]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	669a      	str	r2, [r3, #104]	; 0x68
//		fcb_joint1.Kd_p = 0.0;
//		fcb_joint3.Kp_p = 0.0;
//		fcb_joint3.Ki_p = 0.0;
//		fcb_joint3.Kd_p = 0.0;

		fcb_joint1.Kp_v = 0.0; // 3.2
 8004174:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 800417c:	4b55      	ldr	r3, [pc, #340]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8004184:	4b53      	ldr	r3, [pc, #332]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint2.Kp_v = 0.0; // 3.2
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint2.Ki_v = 0.0;
 8004194:	4b51      	ldr	r3, [pc, #324]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint2.Kd_v = 0.0;
 800419c:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint3.Kp_v = 0.0; // 3.2
 80041a4:	4b48      	ldr	r3, [pc, #288]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 80041ac:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 80041b4:	4b44      	ldr	r3, [pc, #272]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 80041bc:	4b45      	ldr	r3, [pc, #276]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80041be:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80041c2:	4b44      	ldr	r3, [pc, #272]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80041c4:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 80041c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041cc:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80041ce:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 80041d2:	4b3d      	ldr	r3, [pc, #244]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80041d4:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80041d8:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80041da:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 80041de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e2:	4b39      	ldr	r3, [pc, #228]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80041e4:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 80041e8:	4b3a      	ldr	r3, [pc, #232]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80041ea:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80041ee:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80041f0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80041f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041f8:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80041fa:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 80041fe:	4b32      	ldr	r3, [pc, #200]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004200:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004204:	4b30      	ldr	r3, [pc, #192]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004206:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800420a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420e:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004210:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint2.Error_p = fcb_joint2.Goal_Position - fcb_joint2.kalman_pos;
 8004214:	4b31      	ldr	r3, [pc, #196]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004216:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800421a:	4b30      	ldr	r3, [pc, #192]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800421c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004224:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004226:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint2.Error_v = fcb_joint2.Goal_Velocity - fcb_joint2.kalman_velo;
 800422a:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800422c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004230:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004232:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800423a:	4b28      	ldr	r3, [pc, #160]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800423c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8004240:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004242:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8004246:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004248:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800424c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004250:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004252:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8004256:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004258:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800425c:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800425e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004266:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004268:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800426e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004274:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427c:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800427e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 8004282:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004284:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800428a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800428e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004294:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint2.Sum_Error_p += fcb_joint2.Error_p;
 8004298:	4b10      	ldr	r3, [pc, #64]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800429a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80042a0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80042a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80042aa:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint2.Sum_Error_v += fcb_joint2.Error_v;
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80042b0:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80042b6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80042ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80042c0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 80042c4:	e010      	b.n	80042e8 <HAL_TIM_PeriodElapsedCallback+0xa50>
 80042c6:	bf00      	nop
 80042c8:	2400072c 	.word	0x2400072c
 80042cc:	24000bfc 	.word	0x24000bfc
 80042d0:	24000810 	.word	0x24000810
 80042d4:	24000564 	.word	0x24000564
 80042d8:	3ecccccd 	.word	0x3ecccccd
 80042dc:	24000648 	.word	0x24000648
 80042e0:	3cf5c28f 	.word	0x3cf5c28f
 80042e4:	3e19999a 	.word	0x3e19999a

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 80042e8:	4b83      	ldr	r3, [pc, #524]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042ea:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint1.Kp_p * fcb_joint1.Error_p)
 80042ee:	4b82      	ldr	r3, [pc, #520]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042f0:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80042f4:	4b80      	ldr	r3, [pc, #512]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042f6:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80042fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042fe:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p)
 8004302:	4b7d      	ldr	r3, [pc, #500]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004304:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004308:	4b7b      	ldr	r3, [pc, #492]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800430a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800430e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004312:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p))
 8004316:	4b78      	ldr	r3, [pc, #480]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004318:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800431c:	4b76      	ldr	r3, [pc, #472]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800431e:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8004322:	4b75      	ldr	r3, [pc, #468]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004324:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004328:	ee76 7a67 	vsub.f32	s15, s12, s15
 800432c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004330:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kp_v * fcb_joint1.Error_v)
 8004334:	4b70      	ldr	r3, [pc, #448]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004336:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800433a:	4b6f      	ldr	r3, [pc, #444]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800433c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004344:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v)
 8004348:	4b6b      	ldr	r3, [pc, #428]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800434a:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800434e:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004350:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004358:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v));
 800435c:	4b66      	ldr	r3, [pc, #408]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800435e:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8004362:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004364:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8004368:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800436a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800436e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004376:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 800437a:	4b5f      	ldr	r3, [pc, #380]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800437c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8004380:	4b5e      	ldr	r3, [pc, #376]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004382:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint2.Kp_p * fcb_joint2.Error_p)
 8004386:	4b5d      	ldr	r3, [pc, #372]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004388:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800438c:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800438e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004396:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p)
 800439a:	4b58      	ldr	r3, [pc, #352]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800439c:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80043a0:	4b56      	ldr	r3, [pc, #344]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043a2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80043a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043aa:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p))
 80043ae:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043b0:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80043b4:	4b51      	ldr	r3, [pc, #324]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043b6:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80043ba:	4b50      	ldr	r3, [pc, #320]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043bc:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80043c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80043c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043c8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kp_v * fcb_joint2.Error_v)
 80043cc:	4b4b      	ldr	r3, [pc, #300]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043ce:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80043d2:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043d4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80043d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043dc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v)
 80043e0:	4b46      	ldr	r3, [pc, #280]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043e2:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80043e6:	4b45      	ldr	r3, [pc, #276]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043e8:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80043ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043f0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_v * (fcb_joint2.Error_v - fcb_joint2.Old_v));
 80043f4:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043f6:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80043fa:	4b40      	ldr	r3, [pc, #256]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043fc:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8004400:	4b3e      	ldr	r3, [pc, #248]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004402:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004406:	ee76 7a67 	vsub.f32	s15, s12, s15
 800440a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800440e:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8004412:	4b3a      	ldr	r3, [pc, #232]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004414:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 8004418:	4b39      	ldr	r3, [pc, #228]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800441a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint3.Kp_p * fcb_joint3.Error_p)
 800441e:	4b38      	ldr	r3, [pc, #224]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004420:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8004424:	4b36      	ldr	r3, [pc, #216]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004426:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800442a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800442e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p)
 8004432:	4b33      	ldr	r3, [pc, #204]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004434:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004438:	4b31      	ldr	r3, [pc, #196]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800443a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800443e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004442:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p))
 8004446:	4b2e      	ldr	r3, [pc, #184]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004448:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800444c:	4b2c      	ldr	r3, [pc, #176]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800444e:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004454:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004458:	ee76 7a67 	vsub.f32	s15, s12, s15
 800445c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004460:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kp_v * fcb_joint3.Error_v)
 8004464:	4b26      	ldr	r3, [pc, #152]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004466:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800446a:	4b25      	ldr	r3, [pc, #148]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800446c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004474:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v)
 8004478:	4b21      	ldr	r3, [pc, #132]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800447a:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004480:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004488:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v));
 800448c:	4b1c      	ldr	r3, [pc, #112]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800448e:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004494:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8004498:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800449a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800449e:	ee76 7a67 	vsub.f32	s15, s12, s15
 80044a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044a6:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80044ac:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		if (joint13_on) {
 80044b0:	4b14      	ldr	r3, [pc, #80]	; (8004504 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d032      	beq.n	8004520 <HAL_TIM_PeriodElapsedCallback+0xc88>
			stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80044bc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80044c0:	eeb0 0a67 	vmov.f32	s0, s15
 80044c4:	4810      	ldr	r0, [pc, #64]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 80044c6:	f7fd ff8b 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(0.0);
 80044ca:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800451c <HAL_TIM_PeriodElapsedCallback+0xc84>
 80044ce:	480f      	ldr	r0, [pc, #60]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80044d0:	f7fd ff86 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80044d6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80044da:	eeb0 0a67 	vmov.f32	s0, s15
 80044de:	480c      	ldr	r0, [pc, #48]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80044e0:	f7fd ff7e 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80044e6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80044ea:	eeb0 0a67 	vmov.f32	s0, s15
 80044ee:	480a      	ldr	r0, [pc, #40]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80044f0:	f7fd ff76 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
 80044f4:	e02b      	b.n	800454e <HAL_TIM_PeriodElapsedCallback+0xcb6>
 80044f6:	bf00      	nop
 80044f8:	24000564 	.word	0x24000564
 80044fc:	24000648 	.word	0x24000648
 8004500:	2400072c 	.word	0x2400072c
 8004504:	24000b4a 	.word	0x24000b4a
 8004508:	240004c4 	.word	0x240004c4
 800450c:	240004ec 	.word	0x240004ec
 8004510:	24000514 	.word	0x24000514
 8004514:	24000810 	.word	0x24000810
 8004518:	2400053c 	.word	0x2400053c
 800451c:	00000000 	.word	0x00000000
		} else {
			stepperJ1.StepperOpenLoopSpeedM(0.0);
 8004520:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 800451c <HAL_TIM_PeriodElapsedCallback+0xc84>
 8004524:	48b3      	ldr	r0, [pc, #716]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 8004526:	f7fd ff5b 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0.0);
 800452a:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80047f8 <HAL_TIM_PeriodElapsedCallback+0xf60>
 800452e:	48b3      	ldr	r0, [pc, #716]	; (80047fc <HAL_TIM_PeriodElapsedCallback+0xf64>)
 8004530:	f7fd ff56 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 8004534:	4bb2      	ldr	r3, [pc, #712]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004536:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800453a:	eeb0 0a67 	vmov.f32	s0, s15
 800453e:	48b1      	ldr	r0, [pc, #708]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0xf6c>)
 8004540:	f7fd ff4e 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(0.0);
 8004544:	ed9f 0aac 	vldr	s0, [pc, #688]	; 80047f8 <HAL_TIM_PeriodElapsedCallback+0xf60>
 8004548:	48af      	ldr	r0, [pc, #700]	; (8004808 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800454a:	f7fd ff49 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(0);


		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 800454e:	4baf      	ldr	r3, [pc, #700]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004552:	4aae      	ldr	r2, [pc, #696]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004554:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint2.Old_Error_p = fcb_joint2.Error_p;
 8004556:	4baa      	ldr	r3, [pc, #680]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455a:	4aa9      	ldr	r2, [pc, #676]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800455c:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 800455e:	4bac      	ldr	r3, [pc, #688]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	4aab      	ldr	r2, [pc, #684]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004564:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 8004566:	4ba9      	ldr	r3, [pc, #676]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456c:	4aa7      	ldr	r2, [pc, #668]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800456e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint2.Old_Error_v = fcb_joint2.Error_v;
 8004572:	4ba3      	ldr	r3, [pc, #652]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004578:	4aa1      	ldr	r2, [pc, #644]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800457a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 800457e:	4ba4      	ldr	r3, [pc, #656]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004584:	4aa2      	ldr	r2, [pc, #648]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004586:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 800458a:	4ba0      	ldr	r3, [pc, #640]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800458c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004590:	4a9e      	ldr	r2, [pc, #632]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 8004596:	4b9e      	ldr	r3, [pc, #632]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004598:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800459c:	4a9c      	ldr	r2, [pc, #624]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800459e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_p = fcb_joint2.kalman_pos;
 80045a2:	4b97      	ldr	r3, [pc, #604]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80045a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045a8:	4a95      	ldr	r2, [pc, #596]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80045aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_v = fcb_joint2.kalman_velo;
 80045ae:	4b94      	ldr	r3, [pc, #592]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80045b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80045b4:	4a92      	ldr	r2, [pc, #584]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80045b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 80045ba:	4b94      	ldr	r3, [pc, #592]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80045bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80045c0:	4a92      	ldr	r2, [pc, #584]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80045c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 80045c6:	4b91      	ldr	r3, [pc, #580]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80045c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80045cc:	4a90      	ldr	r2, [pc, #576]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80045ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		t = t + sample_time_500;
 80045d2:	4b90      	ldr	r3, [pc, #576]	; (8004814 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 80045d4:	ed93 7a00 	vldr	s14, [r3]
 80045d8:	4b8f      	ldr	r3, [pc, #572]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e2:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 80045e4:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time) {
 80045e8:	4b8a      	ldr	r3, [pc, #552]	; (8004814 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 80045ea:	ed93 7a00 	vldr	s14, [r3]
 80045ee:	4b8b      	ldr	r3, [pc, #556]	; (800481c <HAL_TIM_PeriodElapsedCallback+0xf84>)
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fc:	bfac      	ite	ge
 80045fe:	2301      	movge	r3, #1
 8004600:	2300      	movlt	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d05d      	beq.n	80046c4 <HAL_TIM_PeriodElapsedCallback+0xe2c>
			t = (int) 0;
 8004608:	4b82      	ldr	r3, [pc, #520]	; (8004814 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 8004610:	4b7e      	ldr	r3, [pc, #504]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint2.Sum_Error_p = 0;
 800461a:	4b79      	ldr	r3, [pc, #484]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8004624:	4b7a      	ldr	r3, [pc, #488]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			fcb_joint1.Sum_Error_v = 0;
 800462e:	4b77      	ldr	r3, [pc, #476]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint2.Sum_Error_v = 0;
 8004638:	4b71      	ldr	r3, [pc, #452]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 8004642:	4b73      	ldr	r3, [pc, #460]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

			fcb_joint1.Old_Error_p = 0;
 800464c:	4b6f      	ldr	r3, [pc, #444]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint2.Old_Error_p = 0;
 8004654:	4b6a      	ldr	r3, [pc, #424]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 800465c:	4b6c      	ldr	r3, [pc, #432]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	67da      	str	r2, [r3, #124]	; 0x7c

			fcb_joint1.Old_Error_v = 0;
 8004664:	4b69      	ldr	r3, [pc, #420]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint2.Old_Error_v = 0;
 800466e:	4b64      	ldr	r3, [pc, #400]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 8004678:	4b65      	ldr	r3, [pc, #404]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			fcb_joint1.Old_p = 0;
 8004682:	4b62      	ldr	r3, [pc, #392]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint2.Old_p = 0;
 800468c:	4b5c      	ldr	r3, [pc, #368]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 8004696:	4b5e      	ldr	r3, [pc, #376]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

			fcb_joint1.Old_v = 0;
 80046a0:	4b5a      	ldr	r3, [pc, #360]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint2.Old_v = 0;
 80046aa:	4b55      	ldr	r3, [pc, #340]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 80046b4:	4b56      	ldr	r3, [pc, #344]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 80046be:	4b58      	ldr	r3, [pc, #352]	; (8004820 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
		}

	}
	if (htim == &htim17) {
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a57      	ldr	r2, [pc, #348]	; (8004824 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	f040 808f 	bne.w	80047ec <HAL_TIM_PeriodElapsedCallback+0xf54>
//				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 16) & 0xFF),
//				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 8) & 0xFF),
//				(uint8_t) (((int32_t) fcb_joint2.Encoder) & 0xFF), };
		uint8_t encoder_state[8] =
				{
				(uint8_t) (((int16_t) (fcb_joint3.Encoder/10.0) >> 8) & 0xFF),
 80046ce:	4b50      	ldr	r3, [pc, #320]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80046d0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80046d8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80046dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80046e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80046e4:	ee17 3a90 	vmov	r3, s15
 80046e8:	b21b      	sxth	r3, r3
 80046ea:	121b      	asrs	r3, r3, #8
 80046ec:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0)) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0)) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	723b      	strb	r3, [r7, #8]
				(uint8_t) (((int16_t) (fcb_joint3.Encoder/10.0)) & 0xFF),
 80046f2:	4b47      	ldr	r3, [pc, #284]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80046f4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046f8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80046fc:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004700:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004704:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004708:	ee17 3a90 	vmov	r3, s15
 800470c:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 800470e:	b2db      	uxtb	r3, r3
 8004710:	727b      	strb	r3, [r7, #9]
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0) >> 8) & 0xFF),
 8004712:	4b45      	ldr	r3, [pc, #276]	; (8004828 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 8004714:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004718:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800471c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004720:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004724:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004728:	ee17 3a90 	vmov	r3, s15
 800472c:	b21b      	sxth	r3, r3
 800472e:	121b      	asrs	r3, r3, #8
 8004730:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004732:	b2db      	uxtb	r3, r3
 8004734:	72bb      	strb	r3, [r7, #10]
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0)) & 0xFF),
 8004736:	4b3c      	ldr	r3, [pc, #240]	; (8004828 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 8004738:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800473c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004740:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004744:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004748:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800474c:	ee17 3a90 	vmov	r3, s15
 8004750:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004752:	b2db      	uxtb	r3, r3
 8004754:	72fb      	strb	r3, [r7, #11]
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0) >> 8) & 0xFF),
 8004756:	4b2d      	ldr	r3, [pc, #180]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004758:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800475c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004760:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004764:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004768:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800476c:	ee17 3a90 	vmov	r3, s15
 8004770:	b21b      	sxth	r3, r3
 8004772:	121b      	asrs	r3, r3, #8
 8004774:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004776:	b2db      	uxtb	r3, r3
 8004778:	733b      	strb	r3, [r7, #12]
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0)) & 0xFF),
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800477c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004780:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004784:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004788:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800478c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004790:	ee17 3a90 	vmov	r3, s15
 8004794:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004796:	b2db      	uxtb	r3, r3
 8004798:	737b      	strb	r3, [r7, #13]
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0) >> 8) & 0xFF),
 800479a:	4b19      	ldr	r3, [pc, #100]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800479c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80047a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80047a4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80047a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80047ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80047b0:	ee17 3a90 	vmov	r3, s15
 80047b4:	b21b      	sxth	r3, r3
 80047b6:	121b      	asrs	r3, r3, #8
 80047b8:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	73bb      	strb	r3, [r7, #14]
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80047c0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80047c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80047c8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80047cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80047d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80047d4:	ee17 3a90 	vmov	r3, s15
 80047d8:	b21b      	sxth	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	73fb      	strb	r3, [r7, #15]

		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &encoder_state, 8);
 80047de:	f107 0308 	add.w	r3, r7, #8
 80047e2:	2208      	movs	r2, #8
 80047e4:	4619      	mov	r1, r3
 80047e6:	4811      	ldr	r0, [pc, #68]	; (800482c <HAL_TIM_PeriodElapsedCallback+0xf94>)
 80047e8:	f00a fd4c 	bl	800f284 <HAL_UART_Transmit_DMA>
	}
}
 80047ec:	bf00      	nop
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	240004c4 	.word	0x240004c4
 80047f8:	00000000 	.word	0x00000000
 80047fc:	24000514 	.word	0x24000514
 8004800:	24000648 	.word	0x24000648
 8004804:	240004ec 	.word	0x240004ec
 8004808:	2400053c 	.word	0x2400053c
 800480c:	24000564 	.word	0x24000564
 8004810:	2400072c 	.word	0x2400072c
 8004814:	24000bfc 	.word	0x24000bfc
 8004818:	24000214 	.word	0x24000214
 800481c:	24000af8 	.word	0x24000af8
 8004820:	24000af4 	.word	0x24000af4
 8004824:	2400117c 	.word	0x2400117c
 8004828:	24000810 	.word	0x24000810
 800482c:	240012e8 	.word	0x240012e8

08004830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004834:	f002 fbde 	bl	8006ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004838:	f000 fab0 	bl	8004d9c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800483c:	f7fd fecc 	bl	80025d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004840:	f7fd fe5a 	bl	80024f8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8004844:	f002 f870 	bl	8006928 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004848:	f001 f8d8 	bl	80059fc <MX_TIM2_Init>
  MX_UART4_Init();
 800484c:	f001 ff7e 	bl	800674c <MX_UART4_Init>
  MX_TIM4_Init();
 8004850:	f001 f9c4 	bl	8005bdc <MX_TIM4_Init>
  MX_SPI3_Init();
 8004854:	f000 fc54 	bl	8005100 <MX_SPI3_Init>
  MX_TIM1_Init();
 8004858:	f001 f822 	bl	80058a0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800485c:	f001 f946 	bl	8005aec <MX_TIM3_Init>
  MX_TIM5_Init();
 8004860:	f001 fa34 	bl	8005ccc <MX_TIM5_Init>
  MX_TIM15_Init();
 8004864:	f001 fbc8 	bl	8005ff8 <MX_TIM15_Init>
  MX_CRC_Init();
 8004868:	f7fd fdf6 	bl	8002458 <MX_CRC_Init>
  MX_UART7_Init();
 800486c:	f001 ffc2 	bl	80067f4 <MX_UART7_Init>
  MX_TIM6_Init();
 8004870:	f001 fa7a 	bl	8005d68 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004874:	f001 faae 	bl	8005dd4 <MX_TIM7_Init>
  MX_TIM12_Init();
 8004878:	f001 fb3c 	bl	8005ef4 <MX_TIM12_Init>
  MX_TIM13_Init();
 800487c:	f001 fb74 	bl	8005f68 <MX_TIM13_Init>
  MX_TIM14_Init();
 8004880:	f001 fb96 	bl	8005fb0 <MX_TIM14_Init>
  MX_TIM16_Init();
 8004884:	f001 fc5c 	bl	8006140 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8004888:	f002 f802 	bl	8006890 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800488c:	f001 fc7e 	bl	800618c <MX_TIM17_Init>
  MX_TIM8_Init();
 8004890:	f001 fad6 	bl	8005e40 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8004894:	2214      	movs	r2, #20
 8004896:	496a      	ldr	r1, [pc, #424]	; (8004a40 <main+0x210>)
 8004898:	486a      	ldr	r0, [pc, #424]	; (8004a44 <main+0x214>)
 800489a:	f00c fc58 	bl	801114e <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800489e:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <main+0x218>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <main+0x21c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d04a      	beq.n	800493e <main+0x10e>
 80048a8:	4b67      	ldr	r3, [pc, #412]	; (8004a48 <main+0x218>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a68      	ldr	r2, [pc, #416]	; (8004a50 <main+0x220>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d045      	beq.n	800493e <main+0x10e>
 80048b2:	4b65      	ldr	r3, [pc, #404]	; (8004a48 <main+0x218>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a67      	ldr	r2, [pc, #412]	; (8004a54 <main+0x224>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d040      	beq.n	800493e <main+0x10e>
 80048bc:	4b62      	ldr	r3, [pc, #392]	; (8004a48 <main+0x218>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a65      	ldr	r2, [pc, #404]	; (8004a58 <main+0x228>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d03b      	beq.n	800493e <main+0x10e>
 80048c6:	4b60      	ldr	r3, [pc, #384]	; (8004a48 <main+0x218>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a64      	ldr	r2, [pc, #400]	; (8004a5c <main+0x22c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d036      	beq.n	800493e <main+0x10e>
 80048d0:	4b5d      	ldr	r3, [pc, #372]	; (8004a48 <main+0x218>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a62      	ldr	r2, [pc, #392]	; (8004a60 <main+0x230>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d031      	beq.n	800493e <main+0x10e>
 80048da:	4b5b      	ldr	r3, [pc, #364]	; (8004a48 <main+0x218>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a61      	ldr	r2, [pc, #388]	; (8004a64 <main+0x234>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d02c      	beq.n	800493e <main+0x10e>
 80048e4:	4b58      	ldr	r3, [pc, #352]	; (8004a48 <main+0x218>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a5f      	ldr	r2, [pc, #380]	; (8004a68 <main+0x238>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d027      	beq.n	800493e <main+0x10e>
 80048ee:	4b56      	ldr	r3, [pc, #344]	; (8004a48 <main+0x218>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a5e      	ldr	r2, [pc, #376]	; (8004a6c <main+0x23c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d022      	beq.n	800493e <main+0x10e>
 80048f8:	4b53      	ldr	r3, [pc, #332]	; (8004a48 <main+0x218>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a5c      	ldr	r2, [pc, #368]	; (8004a70 <main+0x240>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01d      	beq.n	800493e <main+0x10e>
 8004902:	4b51      	ldr	r3, [pc, #324]	; (8004a48 <main+0x218>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a5b      	ldr	r2, [pc, #364]	; (8004a74 <main+0x244>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d018      	beq.n	800493e <main+0x10e>
 800490c:	4b4e      	ldr	r3, [pc, #312]	; (8004a48 <main+0x218>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a59      	ldr	r2, [pc, #356]	; (8004a78 <main+0x248>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <main+0x10e>
 8004916:	4b4c      	ldr	r3, [pc, #304]	; (8004a48 <main+0x218>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <main+0x24c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00e      	beq.n	800493e <main+0x10e>
 8004920:	4b49      	ldr	r3, [pc, #292]	; (8004a48 <main+0x218>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a56      	ldr	r2, [pc, #344]	; (8004a80 <main+0x250>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d009      	beq.n	800493e <main+0x10e>
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <main+0x218>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a55      	ldr	r2, [pc, #340]	; (8004a84 <main+0x254>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <main+0x10e>
 8004934:	4b44      	ldr	r3, [pc, #272]	; (8004a48 <main+0x218>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a53      	ldr	r2, [pc, #332]	; (8004a88 <main+0x258>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <main+0x120>
 800493e:	4b42      	ldr	r3, [pc, #264]	; (8004a48 <main+0x218>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b40      	ldr	r3, [pc, #256]	; (8004a48 <main+0x218>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0208 	bic.w	r2, r2, #8
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e007      	b.n	8004960 <main+0x130>
 8004950:	4b3d      	ldr	r3, [pc, #244]	; (8004a48 <main+0x218>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	4b3c      	ldr	r3, [pc, #240]	; (8004a48 <main+0x218>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0204 	bic.w	r2, r2, #4
 800495e:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8004960:	2201      	movs	r2, #1
 8004962:	2101      	movs	r1, #1
 8004964:	4849      	ldr	r0, [pc, #292]	; (8004a8c <main+0x25c>)
 8004966:	f005 ff0d 	bl	800a784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800496a:	2201      	movs	r2, #1
 800496c:	2102      	movs	r1, #2
 800496e:	4848      	ldr	r0, [pc, #288]	; (8004a90 <main+0x260>)
 8004970:	f005 ff08 	bl	800a784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004974:	2200      	movs	r2, #0
 8004976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800497a:	4844      	ldr	r0, [pc, #272]	; (8004a8c <main+0x25c>)
 800497c:	f005 ff02 	bl	800a784 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8004980:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8004ab4 <main+0x284>
 8004984:	4843      	ldr	r0, [pc, #268]	; (8004a94 <main+0x264>)
 8004986:	f7fd fa77 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 800498a:	2108      	movs	r1, #8
 800498c:	4841      	ldr	r0, [pc, #260]	; (8004a94 <main+0x264>)
 800498e:	f7fd fd0f 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 8004992:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8004a98 <main+0x268>
 8004996:	483f      	ldr	r0, [pc, #252]	; (8004a94 <main+0x264>)
 8004998:	f7fd fce6 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 800499c:	483d      	ldr	r0, [pc, #244]	; (8004a94 <main+0x264>)
 800499e:	f7fd fa5a 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 80049a2:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8004ab4 <main+0x284>
 80049a6:	483d      	ldr	r0, [pc, #244]	; (8004a9c <main+0x26c>)
 80049a8:	f7fd fa66 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 80049ac:	2110      	movs	r1, #16
 80049ae:	483b      	ldr	r0, [pc, #236]	; (8004a9c <main+0x26c>)
 80049b0:	f7fd fcfe 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 80049b4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80049b8:	4838      	ldr	r0, [pc, #224]	; (8004a9c <main+0x26c>)
 80049ba:	f7fd fcd5 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 80049be:	4837      	ldr	r0, [pc, #220]	; (8004a9c <main+0x26c>)
 80049c0:	f7fd fa49 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 80049c4:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8004ab4 <main+0x284>
 80049c8:	4835      	ldr	r0, [pc, #212]	; (8004aa0 <main+0x270>)
 80049ca:	f7fd fa55 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 80049ce:	2110      	movs	r1, #16
 80049d0:	4833      	ldr	r0, [pc, #204]	; (8004aa0 <main+0x270>)
 80049d2:	f7fd fced 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 80049d6:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80049da:	4831      	ldr	r0, [pc, #196]	; (8004aa0 <main+0x270>)
 80049dc:	f7fd fcc4 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80049e0:	482f      	ldr	r0, [pc, #188]	; (8004aa0 <main+0x270>)
 80049e2:	f7fd fa38 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 80049e6:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8004ab4 <main+0x284>
 80049ea:	482e      	ldr	r0, [pc, #184]	; (8004aa4 <main+0x274>)
 80049ec:	f7fd fa44 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(16);
 80049f0:	2110      	movs	r1, #16
 80049f2:	482c      	ldr	r0, [pc, #176]	; (8004aa4 <main+0x274>)
 80049f4:	f7fd fcdc 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 80049f8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80049fc:	4829      	ldr	r0, [pc, #164]	; (8004aa4 <main+0x274>)
 80049fe:	f7fd fcb3 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 8004a02:	4828      	ldr	r0, [pc, #160]	; (8004aa4 <main+0x274>)
 8004a04:	f7fd fa27 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 8004a08:	2191      	movs	r1, #145	; 0x91
 8004a0a:	4827      	ldr	r0, [pc, #156]	; (8004aa8 <main+0x278>)
 8004a0c:	f7fd f96d 	bl	8001cea <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 8004a10:	2139      	movs	r1, #57	; 0x39
 8004a12:	4825      	ldr	r0, [pc, #148]	; (8004aa8 <main+0x278>)
 8004a14:	f7fd f958 	bl	8001cc8 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 8004a18:	4823      	ldr	r0, [pc, #140]	; (8004aa8 <main+0x278>)
 8004a1a:	f7fc ff80 	bl	800191e <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 8004a1e:	4822      	ldr	r0, [pc, #136]	; (8004aa8 <main+0x278>)
 8004a20:	f7fd f974 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
	while (!Limit_sw_Z_Top) {
 8004a24:	4b21      	ldr	r3, [pc, #132]	; (8004aac <main+0x27c>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f083 0301 	eor.w	r3, r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d041      	beq.n	8004ab8 <main+0x288>
		stepperJ2.StepperSetFrequency(1200.0f);
 8004a34:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004ab0 <main+0x280>
 8004a38:	4818      	ldr	r0, [pc, #96]	; (8004a9c <main+0x26c>)
 8004a3a:	f7fd fa1d 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	while (!Limit_sw_Z_Top) {
 8004a3e:	e7f1      	b.n	8004a24 <main+0x1f4>
 8004a40:	24000b30 	.word	0x24000b30
 8004a44:	24001378 	.word	0x24001378
 8004a48:	24001660 	.word	0x24001660
 8004a4c:	40020010 	.word	0x40020010
 8004a50:	40020028 	.word	0x40020028
 8004a54:	40020040 	.word	0x40020040
 8004a58:	40020058 	.word	0x40020058
 8004a5c:	40020070 	.word	0x40020070
 8004a60:	40020088 	.word	0x40020088
 8004a64:	400200a0 	.word	0x400200a0
 8004a68:	400200b8 	.word	0x400200b8
 8004a6c:	40020410 	.word	0x40020410
 8004a70:	40020428 	.word	0x40020428
 8004a74:	40020440 	.word	0x40020440
 8004a78:	40020458 	.word	0x40020458
 8004a7c:	40020470 	.word	0x40020470
 8004a80:	40020488 	.word	0x40020488
 8004a84:	400204a0 	.word	0x400204a0
 8004a88:	400204b8 	.word	0x400204b8
 8004a8c:	58020400 	.word	0x58020400
 8004a90:	58021000 	.word	0x58021000
 8004a94:	240004c4 	.word	0x240004c4
 8004a98:	42280000 	.word	0x42280000
 8004a9c:	240004ec 	.word	0x240004ec
 8004aa0:	24000514 	.word	0x24000514
 8004aa4:	2400053c 	.word	0x2400053c
 8004aa8:	24000abc 	.word	0x24000abc
 8004aac:	24000b47 	.word	0x24000b47
 8004ab0:	44960000 	.word	0x44960000
 8004ab4:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 8004ab8:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8004ab4 <main+0x284>
 8004abc:	489c      	ldr	r0, [pc, #624]	; (8004d30 <main+0x500>)
 8004abe:	f7fd f9db 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 8004ac2:	20c8      	movs	r0, #200	; 0xc8
 8004ac4:	f002 fb28 	bl	8007118 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 8004ac8:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8004d34 <main+0x504>
 8004acc:	4898      	ldr	r0, [pc, #608]	; (8004d30 <main+0x500>)
 8004ace:	f7fd f9d3 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 8004ad2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004ad6:	f002 fb1f 	bl	8007118 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 8004ada:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8004d38 <main+0x508>
 8004ade:	4894      	ldr	r0, [pc, #592]	; (8004d30 <main+0x500>)
 8004ae0:	f7fd f9ca 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 8004ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ae8:	f002 fb16 	bl	8007118 <HAL_Delay>
	gripper.GripperOpen();
 8004aec:	4893      	ldr	r0, [pc, #588]	; (8004d3c <main+0x50c>)
 8004aee:	f7fd f923 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 8004af2:	4b93      	ldr	r3, [pc, #588]	; (8004d40 <main+0x510>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]

	encoderJ1.AMT21_Read();
 8004af8:	4892      	ldr	r0, [pc, #584]	; (8004d44 <main+0x514>)
 8004afa:	f7fb fdea 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8004afe:	4891      	ldr	r0, [pc, #580]	; (8004d44 <main+0x514>)
 8004b00:	f7fb fe16 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004b04:	4603      	mov	r3, r0
 8004b06:	461a      	mov	r2, r3
 8004b08:	4b8f      	ldr	r3, [pc, #572]	; (8004d48 <main+0x518>)
 8004b0a:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8004b0c:	4b8e      	ldr	r3, [pc, #568]	; (8004d48 <main+0x518>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d110      	bne.n	8004b36 <main+0x306>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 8004b14:	488b      	ldr	r0, [pc, #556]	; (8004d44 <main+0x514>)
 8004b16:	f7fb fe71 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004b24:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8004d20 <main+0x4f0>
 8004b28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b30:	4b86      	ldr	r3, [pc, #536]	; (8004d4c <main+0x51c>)
 8004b32:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ2.AMT21_Read();
 8004b36:	4886      	ldr	r0, [pc, #536]	; (8004d50 <main+0x520>)
 8004b38:	f7fb fdcb 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8004b3c:	4884      	ldr	r0, [pc, #528]	; (8004d50 <main+0x520>)
 8004b3e:	f7fb fdf7 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004b42:	4603      	mov	r3, r0
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b83      	ldr	r3, [pc, #524]	; (8004d54 <main+0x524>)
 8004b48:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 8004b4a:	4b82      	ldr	r3, [pc, #520]	; (8004d54 <main+0x524>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d115      	bne.n	8004b7e <main+0x34e>
		encoderJ2.unwarp();
 8004b52:	487f      	ldr	r0, [pc, #508]	; (8004d50 <main+0x520>)
 8004b54:	f7fb fe74 	bl	8000840 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 8004b58:	487d      	ldr	r0, [pc, #500]	; (8004d50 <main+0x520>)
 8004b5a:	f7fb fec3 	bl	80008e4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8004b5e:	487c      	ldr	r0, [pc, #496]	; (8004d50 <main+0x520>)
 8004b60:	f7fb fecd 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8004b64:	ee07 0a90 	vmov	s15, r0
 8004b68:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004b6c:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8004d20 <main+0x4f0>
 8004b70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b78:	4b77      	ldr	r3, [pc, #476]	; (8004d58 <main+0x528>)
 8004b7a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ3.AMT21_Read();
 8004b7e:	4877      	ldr	r0, [pc, #476]	; (8004d5c <main+0x52c>)
 8004b80:	f7fb fda7 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8004b84:	4875      	ldr	r0, [pc, #468]	; (8004d5c <main+0x52c>)
 8004b86:	f7fb fdd3 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4b74      	ldr	r3, [pc, #464]	; (8004d60 <main+0x530>)
 8004b90:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8004b92:	4b73      	ldr	r3, [pc, #460]	; (8004d60 <main+0x530>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d110      	bne.n	8004bbc <main+0x38c>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8004b9a:	4870      	ldr	r0, [pc, #448]	; (8004d5c <main+0x52c>)
 8004b9c:	f7fb fe2e 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004baa:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8004d20 <main+0x4f0>
 8004bae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004bb2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004bb6:	4b6b      	ldr	r3, [pc, #428]	; (8004d64 <main+0x534>)
 8004bb8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ4.AMT21_Read();
 8004bbc:	486a      	ldr	r0, [pc, #424]	; (8004d68 <main+0x538>)
 8004bbe:	f7fb fd88 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8004bc2:	4869      	ldr	r0, [pc, #420]	; (8004d68 <main+0x538>)
 8004bc4:	f7fb fdb4 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4b67      	ldr	r3, [pc, #412]	; (8004d6c <main+0x53c>)
 8004bce:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8004bd0:	4b66      	ldr	r3, [pc, #408]	; (8004d6c <main+0x53c>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d110      	bne.n	8004bfa <main+0x3ca>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 8004bd8:	4863      	ldr	r0, [pc, #396]	; (8004d68 <main+0x538>)
 8004bda:	f7fb fe0f 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004bde:	4603      	mov	r3, r0
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004be8:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8004d28 <main+0x4f8>
 8004bec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004bf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004bf4:	4b5e      	ldr	r3, [pc, #376]	; (8004d70 <main+0x540>)
 8004bf6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

//	angle_chess = chessSPIEncoder.readAngle();
//	  zero_position = chessSPIEncoder.getRawRotation();
//	  zero_position_map = chessSPIEncoder.read2angle(zero_position);

	fcb_joint1.p11 = 3.60381982 / 100000000.0;
 8004bfa:	4b54      	ldr	r3, [pc, #336]	; (8004d4c <main+0x51c>)
 8004bfc:	4a5d      	ldr	r2, [pc, #372]	; (8004d74 <main+0x544>)
 8004bfe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 8004c02:	4b52      	ldr	r3, [pc, #328]	; (8004d4c <main+0x51c>)
 8004c04:	4a5c      	ldr	r2, [pc, #368]	; (8004d78 <main+0x548>)
 8004c06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 8004c0a:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <main+0x51c>)
 8004c0c:	4a5b      	ldr	r2, [pc, #364]	; (8004d7c <main+0x54c>)
 8004c0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 8004c12:	4b4e      	ldr	r3, [pc, #312]	; (8004d4c <main+0x51c>)
 8004c14:	4a5a      	ldr	r2, [pc, #360]	; (8004d80 <main+0x550>)
 8004c16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 8004c1a:	4b52      	ldr	r3, [pc, #328]	; (8004d64 <main+0x534>)
 8004c1c:	4a55      	ldr	r2, [pc, #340]	; (8004d74 <main+0x544>)
 8004c1e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 8004c22:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <main+0x534>)
 8004c24:	4a54      	ldr	r2, [pc, #336]	; (8004d78 <main+0x548>)
 8004c26:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 8004c2a:	4b4e      	ldr	r3, [pc, #312]	; (8004d64 <main+0x534>)
 8004c2c:	4a53      	ldr	r2, [pc, #332]	; (8004d7c <main+0x54c>)
 8004c2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 8004c32:	4b4c      	ldr	r3, [pc, #304]	; (8004d64 <main+0x534>)
 8004c34:	4a52      	ldr	r2, [pc, #328]	; (8004d80 <main+0x550>)
 8004c36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint1.Q = 0.001;
 8004c3a:	4b44      	ldr	r3, [pc, #272]	; (8004d4c <main+0x51c>)
 8004c3c:	4a51      	ldr	r2, [pc, #324]	; (8004d84 <main+0x554>)
 8004c3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.000001;
 8004c42:	4b42      	ldr	r3, [pc, #264]	; (8004d4c <main+0x51c>)
 8004c44:	4a50      	ldr	r2, [pc, #320]	; (8004d88 <main+0x558>)
 8004c46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint2.Q = 0.001;
 8004c4a:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <main+0x528>)
 8004c4c:	4a4d      	ldr	r2, [pc, #308]	; (8004d84 <main+0x554>)
 8004c4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint2.R = 0.00003;
 8004c52:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <main+0x528>)
 8004c54:	4a4d      	ldr	r2, [pc, #308]	; (8004d8c <main+0x55c>)
 8004c56:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 8004c5a:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <main+0x534>)
 8004c5c:	4a49      	ldr	r2, [pc, #292]	; (8004d84 <main+0x554>)
 8004c5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000001;
 8004c62:	4b40      	ldr	r3, [pc, #256]	; (8004d64 <main+0x534>)
 8004c64:	4a48      	ldr	r2, [pc, #288]	; (8004d88 <main+0x558>)
 8004c66:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 8004c6a:	4b38      	ldr	r3, [pc, #224]	; (8004d4c <main+0x51c>)
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	4a37      	ldr	r2, [pc, #220]	; (8004d4c <main+0x51c>)
 8004c70:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 8004c74:	4b35      	ldr	r3, [pc, #212]	; (8004d4c <main+0x51c>)
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 8004c7e:	4b33      	ldr	r3, [pc, #204]	; (8004d4c <main+0x51c>)
 8004c80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c84:	4a31      	ldr	r2, [pc, #196]	; (8004d4c <main+0x51c>)
 8004c86:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 8004c8a:	4b30      	ldr	r3, [pc, #192]	; (8004d4c <main+0x51c>)
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 8004c94:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <main+0x51c>)
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	4a2c      	ldr	r2, [pc, #176]	; (8004d4c <main+0x51c>)
 8004c9a:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint2.X11 = fcb_joint2.Encoder;
 8004c9c:	4b2e      	ldr	r3, [pc, #184]	; (8004d58 <main+0x528>)
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	4a2d      	ldr	r2, [pc, #180]	; (8004d58 <main+0x528>)
 8004ca2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint2.X21 = 0.0;
 8004ca6:	4b2c      	ldr	r3, [pc, #176]	; (8004d58 <main+0x528>)
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint2.kalman_pos = fcb_joint2.X11;
 8004cb0:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <main+0x528>)
 8004cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cb6:	4a28      	ldr	r2, [pc, #160]	; (8004d58 <main+0x528>)
 8004cb8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint2.kalman_velo = 0.0;
 8004cbc:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <main+0x528>)
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint2.Goal_Position = fcb_joint2.Encoder;
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <main+0x528>)
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	4a23      	ldr	r2, [pc, #140]	; (8004d58 <main+0x528>)
 8004ccc:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 8004cce:	4b25      	ldr	r3, [pc, #148]	; (8004d64 <main+0x534>)
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <main+0x534>)
 8004cd4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 8004cd8:	4b22      	ldr	r3, [pc, #136]	; (8004d64 <main+0x534>)
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 8004ce2:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <main+0x534>)
 8004ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ce8:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <main+0x534>)
 8004cea:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 8004cee:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <main+0x534>)
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <main+0x534>)
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <main+0x534>)
 8004cfe:	6493      	str	r3, [r2, #72]	; 0x48
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	chessABIEncoder.setZero();
 8004d00:	4823      	ldr	r0, [pc, #140]	; (8004d90 <main+0x560>)
 8004d02:	f7fb fe48 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	chessABIEncoder.EncoderReadEnable();
 8004d06:	4822      	ldr	r0, [pc, #136]	; (8004d90 <main+0x560>)
 8004d08:	f7fb fe2d 	bl	8000966 <_ZN10AS5047UABI17EncoderReadEnableEv>
	chessABIEncoder.setZero();
 8004d0c:	4820      	ldr	r0, [pc, #128]	; (8004d90 <main+0x560>)
 8004d0e:	f7fb fe42 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 8004d12:	4820      	ldr	r0, [pc, #128]	; (8004d94 <main+0x564>)
 8004d14:	f008 fd00 	bl	800d718 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 8004d18:	481f      	ldr	r0, [pc, #124]	; (8004d98 <main+0x568>)
 8004d1a:	f008 fcfd 	bl	800d718 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8004d1e:	e7fe      	b.n	8004d1e <main+0x4ee>
 8004d20:	645a1cac 	.word	0x645a1cac
 8004d24:	4004df3b 	.word	0x4004df3b
 8004d28:	645a1cac 	.word	0x645a1cac
 8004d2c:	c004df3b 	.word	0xc004df3b
 8004d30:	240004ec 	.word	0x240004ec
 8004d34:	c4480000 	.word	0xc4480000
 8004d38:	00000000 	.word	0x00000000
 8004d3c:	24000abc 	.word	0x24000abc
 8004d40:	24000b47 	.word	0x24000b47
 8004d44:	24000454 	.word	0x24000454
 8004d48:	24000ad8 	.word	0x24000ad8
 8004d4c:	24000564 	.word	0x24000564
 8004d50:	24000470 	.word	0x24000470
 8004d54:	24000ad9 	.word	0x24000ad9
 8004d58:	24000648 	.word	0x24000648
 8004d5c:	2400048c 	.word	0x2400048c
 8004d60:	24000ada 	.word	0x24000ada
 8004d64:	2400072c 	.word	0x2400072c
 8004d68:	240004a8 	.word	0x240004a8
 8004d6c:	24000adb 	.word	0x24000adb
 8004d70:	24000810 	.word	0x24000810
 8004d74:	331ac86b 	.word	0x331ac86b
 8004d78:	33e9d3b8 	.word	0x33e9d3b8
 8004d7c:	33e9d3bd 	.word	0x33e9d3bd
 8004d80:	3531278c 	.word	0x3531278c
 8004d84:	3a83126f 	.word	0x3a83126f
 8004d88:	358637bd 	.word	0x358637bd
 8004d8c:	37fba882 	.word	0x37fba882
 8004d90:	24000adc 	.word	0x24000adc
 8004d94:	24001130 	.word	0x24001130
 8004d98:	2400117c 	.word	0x2400117c

08004d9c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b09c      	sub	sp, #112	; 0x70
 8004da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da6:	224c      	movs	r2, #76	; 0x4c
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f00d fd80 	bl	80128b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004db0:	1d3b      	adds	r3, r7, #4
 8004db2:	2220      	movs	r2, #32
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f00d fd7a 	bl	80128b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004dbc:	2002      	movs	r0, #2
 8004dbe:	f005 fd15 	bl	800a7ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	4b38      	ldr	r3, [pc, #224]	; (8004ea8 <_Z18SystemClock_Configv+0x10c>)
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	4a37      	ldr	r2, [pc, #220]	; (8004ea8 <_Z18SystemClock_Configv+0x10c>)
 8004dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dd0:	6193      	str	r3, [r2, #24]
 8004dd2:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <_Z18SystemClock_Configv+0x10c>)
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	4b33      	ldr	r3, [pc, #204]	; (8004eac <_Z18SystemClock_Configv+0x110>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	4a32      	ldr	r2, [pc, #200]	; (8004eac <_Z18SystemClock_Configv+0x110>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004de8:	4b30      	ldr	r3, [pc, #192]	; (8004eac <_Z18SystemClock_Configv+0x110>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004df4:	4b2c      	ldr	r3, [pc, #176]	; (8004ea8 <_Z18SystemClock_Configv+0x10c>)
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e00:	bf14      	ite	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	2300      	moveq	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d000      	beq.n	8004e0e <_Z18SystemClock_Configv+0x72>
 8004e0c:	e7f2      	b.n	8004df4 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e16:	2340      	movs	r3, #64	; 0x40
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004e22:	2304      	movs	r3, #4
 8004e24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004e26:	233c      	movs	r3, #60	; 0x3c
 8004e28:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 96;
 8004e2e:	2360      	movs	r3, #96	; 0x60
 8004e30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004e32:	2302      	movs	r3, #2
 8004e34:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004e36:	230c      	movs	r3, #12
 8004e38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e46:	4618      	mov	r0, r3
 8004e48:	f005 fd0a 	bl	800a860 <HAL_RCC_OscConfig>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bf14      	ite	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	2300      	moveq	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004e5c:	f000 f856 	bl	8004f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e60:	233f      	movs	r3, #63	; 0x3f
 8004e62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e64:	2303      	movs	r3, #3
 8004e66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004e70:	2340      	movs	r3, #64	; 0x40
 8004e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004e74:	2340      	movs	r3, #64	; 0x40
 8004e76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004e7e:	2340      	movs	r3, #64	; 0x40
 8004e80:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004e82:	1d3b      	adds	r3, r7, #4
 8004e84:	2104      	movs	r1, #4
 8004e86:	4618      	mov	r0, r3
 8004e88:	f006 f918 	bl	800b0bc <HAL_RCC_ClockConfig>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf14      	ite	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	2300      	moveq	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004e9c:	f000 f836 	bl	8004f0c <Error_Handler>
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	3770      	adds	r7, #112	; 0x70
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	58024800 	.word	0x58024800
 8004eac:	58000400 	.word	0x58000400

08004eb0 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 //
 //}
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LM_Z_BOTTOM_Pin) {	// Limit Switch Bottom Z-axis
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec0:	d102      	bne.n	8004ec8 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <HAL_GPIO_EXTI_Callback+0x4c>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_Z_TOP_Pin) {	// Limit Switch Top Z-axis
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ece:	d102      	bne.n	8004ed6 <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_GPIO_EXTI_Callback+0x50>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_SERVO_Pin) {	// Limit Switch Servo
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b80      	cmp	r3, #128	; 0x80
 8004eda:	d102      	bne.n	8004ee2 <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_GPIO_EXTI_Callback+0x54>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_LED_Pin) {	// Limit Switch LED on Cabinet
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d102      	bne.n	8004eee <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 8004ee8:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <HAL_GPIO_EXTI_Callback+0x58>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
	}

}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	24000b46 	.word	0x24000b46
 8004f00:	24000b47 	.word	0x24000b47
 8004f04:	24000b48 	.word	0x24000b48
 8004f08:	24000b49 	.word	0x24000b49

08004f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004f10:	2200      	movs	r2, #0
 8004f12:	2101      	movs	r1, #1
 8004f14:	4808      	ldr	r0, [pc, #32]	; (8004f38 <Error_Handler+0x2c>)
 8004f16:	f005 fc35 	bl	800a784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	4807      	ldr	r0, [pc, #28]	; (8004f3c <Error_Handler+0x30>)
 8004f20:	f005 fc30 	bl	800a784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004f24:	2201      	movs	r2, #1
 8004f26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f2a:	4803      	ldr	r0, [pc, #12]	; (8004f38 <Error_Handler+0x2c>)
 8004f2c:	f005 fc2a 	bl	800a784 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f30:	b672      	cpsid	i
}
 8004f32:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004f34:	e7fe      	b.n	8004f34 <Error_Handler+0x28>
 8004f36:	bf00      	nop
 8004f38:	58020400 	.word	0x58020400
 8004f3c:	58021000 	.word	0x58021000

08004f40 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d158      	bne.n	8005002 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d153      	bne.n	8005002 <_Z41__static_initialization_and_destruction_0ii+0xc2>
AMT21 encoderJ1(&huart4, 0xD4);
 8004f5a:	22d4      	movs	r2, #212	; 0xd4
 8004f5c:	4947      	ldr	r1, [pc, #284]	; (800507c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004f5e:	4848      	ldr	r0, [pc, #288]	; (8005080 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004f60:	f7fb fb98 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 8004f64:	22b4      	movs	r2, #180	; 0xb4
 8004f66:	4945      	ldr	r1, [pc, #276]	; (800507c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004f68:	4846      	ldr	r0, [pc, #280]	; (8005084 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004f6a:	f7fb fb93 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004f6e:	22c4      	movs	r2, #196	; 0xc4
 8004f70:	4942      	ldr	r1, [pc, #264]	; (800507c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004f72:	4845      	ldr	r0, [pc, #276]	; (8005088 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004f74:	f7fb fb8e 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004f78:	22a4      	movs	r2, #164	; 0xa4
 8004f7a:	4940      	ldr	r1, [pc, #256]	; (800507c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004f7c:	4843      	ldr	r0, [pc, #268]	; (800508c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004f7e:	f7fb fb89 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004f82:	2320      	movs	r3, #32
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	4b42      	ldr	r3, [pc, #264]	; (8005090 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4942      	ldr	r1, [pc, #264]	; (8005094 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004f8c:	4842      	ldr	r0, [pc, #264]	; (8005098 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004f8e:	f7fc ff15 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	4b40      	ldr	r3, [pc, #256]	; (800509c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	4940      	ldr	r1, [pc, #256]	; (80050a0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004f9e:	4841      	ldr	r0, [pc, #260]	; (80050a4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004fa0:	f7fc ff0c 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	4b3c      	ldr	r3, [pc, #240]	; (800509c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004fac:	2204      	movs	r2, #4
 8004fae:	493e      	ldr	r1, [pc, #248]	; (80050a8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004fb0:	483e      	ldr	r0, [pc, #248]	; (80050ac <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004fb2:	f7fc ff03 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	4b34      	ldr	r3, [pc, #208]	; (8005090 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	493b      	ldr	r1, [pc, #236]	; (80050b0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004fc2:	483c      	ldr	r0, [pc, #240]	; (80050b4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004fc4:	f7fc fefa 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004fc8:	483b      	ldr	r0, [pc, #236]	; (80050b8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004fca:	f7fb fd57 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004fce:	483b      	ldr	r0, [pc, #236]	; (80050bc <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004fd0:	f7fb fd54 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8004fd4:	483a      	ldr	r0, [pc, #232]	; (80050c0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004fd6:	f7fb fd51 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004fda:	483a      	ldr	r0, [pc, #232]	; (80050c4 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004fdc:	f7fb fd4e 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004fe0:	4839      	ldr	r0, [pc, #228]	; (80050c8 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004fe2:	f7fb fd4b 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8004fe6:	4839      	ldr	r0, [pc, #228]	; (80050cc <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004fe8:	f7fb fd48 	bl	8000a7c <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004fec:	2208      	movs	r2, #8
 8004fee:	4938      	ldr	r1, [pc, #224]	; (80050d0 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004ff0:	4838      	ldr	r0, [pc, #224]	; (80050d4 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004ff2:	f7fc fc59 	bl	80018a8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
AS5047UABI chessABIEncoder(&htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8004ff6:	2304      	movs	r3, #4
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4937      	ldr	r1, [pc, #220]	; (80050d8 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004ffc:	4837      	ldr	r0, [pc, #220]	; (80050dc <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004ffe:	f7fb fc8a 	bl	8000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d134      	bne.n	8005072 <_Z41__static_initialization_and_destruction_0ii+0x132>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800500e:	4293      	cmp	r3, r2
 8005010:	d12f      	bne.n	8005072 <_Z41__static_initialization_and_destruction_0ii+0x132>
 8005012:	4832      	ldr	r0, [pc, #200]	; (80050dc <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8005014:	f7fb fc9c 	bl	8000950 <_ZN10AS5047UABID1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8005018:	482e      	ldr	r0, [pc, #184]	; (80050d4 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 800501a:	f7fc fc75 	bl	8001908 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 800501e:	482b      	ldr	r0, [pc, #172]	; (80050cc <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8005020:	f7fb fd9a 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8005024:	4828      	ldr	r0, [pc, #160]	; (80050c8 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8005026:	f7fb fd97 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 800502a:	4826      	ldr	r0, [pc, #152]	; (80050c4 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 800502c:	f7fb fd94 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8005030:	4823      	ldr	r0, [pc, #140]	; (80050c0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8005032:	f7fb fd91 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8005036:	4821      	ldr	r0, [pc, #132]	; (80050bc <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8005038:	f7fb fd8e 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 800503c:	481e      	ldr	r0, [pc, #120]	; (80050b8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 800503e:	f7fb fd8b 	bl	8000b58 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8005042:	481c      	ldr	r0, [pc, #112]	; (80050b4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8005044:	f7fc fefc 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8005048:	4818      	ldr	r0, [pc, #96]	; (80050ac <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800504a:	f7fc fef9 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 800504e:	4815      	ldr	r0, [pc, #84]	; (80050a4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8005050:	f7fc fef6 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8005054:	4810      	ldr	r0, [pc, #64]	; (8005098 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8005056:	f7fc fef3 	bl	8001e40 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 800505a:	480c      	ldr	r0, [pc, #48]	; (800508c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800505c:	f7fb fb2e 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8005060:	4809      	ldr	r0, [pc, #36]	; (8005088 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8005062:	f7fb fb2b 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8005066:	4807      	ldr	r0, [pc, #28]	; (8005084 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8005068:	f7fb fb28 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 800506c:	4804      	ldr	r0, [pc, #16]	; (8005080 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800506e:	f7fb fb25 	bl	80006bc <_ZN5AMT21D1Ev>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	240011c8 	.word	0x240011c8
 8005080:	24000454 	.word	0x24000454
 8005084:	24000470 	.word	0x24000470
 8005088:	2400048c 	.word	0x2400048c
 800508c:	240004a8 	.word	0x240004a8
 8005090:	58020400 	.word	0x58020400
 8005094:	24000e38 	.word	0x24000e38
 8005098:	240004c4 	.word	0x240004c4
 800509c:	58021000 	.word	0x58021000
 80050a0:	24000da0 	.word	0x24000da0
 80050a4:	240004ec 	.word	0x240004ec
 80050a8:	240010e4 	.word	0x240010e4
 80050ac:	24000514 	.word	0x24000514
 80050b0:	24000dec 	.word	0x24000dec
 80050b4:	2400053c 	.word	0x2400053c
 80050b8:	24000564 	.word	0x24000564
 80050bc:	24000648 	.word	0x24000648
 80050c0:	2400072c 	.word	0x2400072c
 80050c4:	24000810 	.word	0x24000810
 80050c8:	240008f4 	.word	0x240008f4
 80050cc:	240009d8 	.word	0x240009d8
 80050d0:	24000e84 	.word	0x24000e84
 80050d4:	24000abc 	.word	0x24000abc
 80050d8:	24000fb4 	.word	0x24000fb4
 80050dc:	24000adc 	.word	0x24000adc

080050e0 <_GLOBAL__sub_I_TIM_MS>:
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050e8:	2001      	movs	r0, #1
 80050ea:	f7ff ff29 	bl	8004f40 <_Z41__static_initialization_and_destruction_0ii>
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <_GLOBAL__sub_D_TIM_MS>:
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050f8:	2000      	movs	r0, #0
 80050fa:	f7ff ff21 	bl	8004f40 <_Z41__static_initialization_and_destruction_0ii>
 80050fe:	bd80      	pop	{r7, pc}

08005100 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005104:	4b28      	ldr	r3, [pc, #160]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005106:	4a29      	ldr	r2, [pc, #164]	; (80051ac <MX_SPI3_Init+0xac>)
 8005108:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800510a:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <MX_SPI3_Init+0xa8>)
 800510c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005110:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005112:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005114:	2200      	movs	r2, #0
 8005116:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005118:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <MX_SPI3_Init+0xa8>)
 800511a:	2207      	movs	r2, #7
 800511c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800511e:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005120:	2200      	movs	r2, #0
 8005122:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005124:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005126:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800512a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800512c:	4b1e      	ldr	r3, [pc, #120]	; (80051a8 <MX_SPI3_Init+0xa8>)
 800512e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005132:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005134:	4b1c      	ldr	r3, [pc, #112]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005136:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800513a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800513c:	4b1a      	ldr	r3, [pc, #104]	; (80051a8 <MX_SPI3_Init+0xa8>)
 800513e:	2200      	movs	r2, #0
 8005140:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005142:	4b19      	ldr	r3, [pc, #100]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005144:	2200      	movs	r2, #0
 8005146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005148:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <MX_SPI3_Init+0xa8>)
 800514a:	2200      	movs	r2, #0
 800514c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800514e:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005150:	2200      	movs	r2, #0
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005154:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800515a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <MX_SPI3_Init+0xa8>)
 800515e:	2200      	movs	r2, #0
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8005162:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005164:	2200      	movs	r2, #0
 8005166:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <MX_SPI3_Init+0xa8>)
 800516a:	2200      	movs	r2, #0
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005170:	2200      	movs	r2, #0
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005176:	2200      	movs	r2, #0
 8005178:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <MX_SPI3_Init+0xa8>)
 800517c:	2200      	movs	r2, #0
 800517e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005182:	2200      	movs	r2, #0
 8005184:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005186:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005188:	2200      	movs	r2, #0
 800518a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <MX_SPI3_Init+0xa8>)
 800518e:	2200      	movs	r2, #0
 8005190:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005192:	4805      	ldr	r0, [pc, #20]	; (80051a8 <MX_SPI3_Init+0xa8>)
 8005194:	f007 fe86 	bl	800cea4 <HAL_SPI_Init>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800519e:	f7ff feb5 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	24000c24 	.word	0x24000c24
 80051ac:	40003c00 	.word	0x40003c00

080051b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b0b8      	sub	sp, #224	; 0xe0
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	60da      	str	r2, [r3, #12]
 80051c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80051c8:	f107 0310 	add.w	r3, r7, #16
 80051cc:	22bc      	movs	r2, #188	; 0xbc
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f00d fb6d 	bl	80128b0 <memset>
  if(spiHandle->Instance==SPI3)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a56      	ldr	r2, [pc, #344]	; (8005334 <HAL_SPI_MspInit+0x184>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	f040 80a5 	bne.w	800532c <HAL_SPI_MspInit+0x17c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80051e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051e6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051ec:	f107 0310 	add.w	r3, r7, #16
 80051f0:	4618      	mov	r0, r3
 80051f2:	f006 faef 	bl	800b7d4 <HAL_RCCEx_PeriphCLKConfig>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80051fc:	f7ff fe86 	bl	8004f0c <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005200:	4b4d      	ldr	r3, [pc, #308]	; (8005338 <HAL_SPI_MspInit+0x188>)
 8005202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005206:	4a4c      	ldr	r2, [pc, #304]	; (8005338 <HAL_SPI_MspInit+0x188>)
 8005208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005210:	4b49      	ldr	r3, [pc, #292]	; (8005338 <HAL_SPI_MspInit+0x188>)
 8005212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800521e:	4b46      	ldr	r3, [pc, #280]	; (8005338 <HAL_SPI_MspInit+0x188>)
 8005220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005224:	4a44      	ldr	r2, [pc, #272]	; (8005338 <HAL_SPI_MspInit+0x188>)
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800522e:	4b42      	ldr	r3, [pc, #264]	; (8005338 <HAL_SPI_MspInit+0x188>)
 8005230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800523c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005244:	2302      	movs	r3, #2
 8005246:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524a:	2300      	movs	r3, #0
 800524c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005256:	2306      	movs	r3, #6
 8005258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800525c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005260:	4619      	mov	r1, r3
 8005262:	4836      	ldr	r0, [pc, #216]	; (800533c <HAL_SPI_MspInit+0x18c>)
 8005264:	f005 f8de 	bl	800a424 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8005268:	4b35      	ldr	r3, [pc, #212]	; (8005340 <HAL_SPI_MspInit+0x190>)
 800526a:	4a36      	ldr	r2, [pc, #216]	; (8005344 <HAL_SPI_MspInit+0x194>)
 800526c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800526e:	4b34      	ldr	r3, [pc, #208]	; (8005340 <HAL_SPI_MspInit+0x190>)
 8005270:	223e      	movs	r2, #62	; 0x3e
 8005272:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005274:	4b32      	ldr	r3, [pc, #200]	; (8005340 <HAL_SPI_MspInit+0x190>)
 8005276:	2240      	movs	r2, #64	; 0x40
 8005278:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800527a:	4b31      	ldr	r3, [pc, #196]	; (8005340 <HAL_SPI_MspInit+0x190>)
 800527c:	2200      	movs	r2, #0
 800527e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_SPI_MspInit+0x190>)
 8005282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005286:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005288:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <HAL_SPI_MspInit+0x190>)
 800528a:	2200      	movs	r2, #0
 800528c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800528e:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <HAL_SPI_MspInit+0x190>)
 8005290:	2200      	movs	r2, #0
 8005292:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8005294:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <HAL_SPI_MspInit+0x190>)
 8005296:	2200      	movs	r2, #0
 8005298:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800529a:	4b29      	ldr	r3, [pc, #164]	; (8005340 <HAL_SPI_MspInit+0x190>)
 800529c:	2200      	movs	r2, #0
 800529e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052a0:	4b27      	ldr	r3, [pc, #156]	; (8005340 <HAL_SPI_MspInit+0x190>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80052a6:	4826      	ldr	r0, [pc, #152]	; (8005340 <HAL_SPI_MspInit+0x190>)
 80052a8:	f002 fa80 	bl	80077ac <HAL_DMA_Init>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80052b2:	f7ff fe2b 	bl	8004f0c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a21      	ldr	r2, [pc, #132]	; (8005340 <HAL_SPI_MspInit+0x190>)
 80052ba:	679a      	str	r2, [r3, #120]	; 0x78
 80052bc:	4a20      	ldr	r2, [pc, #128]	; (8005340 <HAL_SPI_MspInit+0x190>)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Stream0;
 80052c2:	4b21      	ldr	r3, [pc, #132]	; (8005348 <HAL_SPI_MspInit+0x198>)
 80052c4:	4a21      	ldr	r2, [pc, #132]	; (800534c <HAL_SPI_MspInit+0x19c>)
 80052c6:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80052c8:	4b1f      	ldr	r3, [pc, #124]	; (8005348 <HAL_SPI_MspInit+0x198>)
 80052ca:	223d      	movs	r2, #61	; 0x3d
 80052cc:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052ce:	4b1e      	ldr	r3, [pc, #120]	; (8005348 <HAL_SPI_MspInit+0x198>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052d4:	4b1c      	ldr	r3, [pc, #112]	; (8005348 <HAL_SPI_MspInit+0x198>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052da:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <HAL_SPI_MspInit+0x198>)
 80052dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052e0:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052e2:	4b19      	ldr	r3, [pc, #100]	; (8005348 <HAL_SPI_MspInit+0x198>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052e8:	4b17      	ldr	r3, [pc, #92]	; (8005348 <HAL_SPI_MspInit+0x198>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80052ee:	4b16      	ldr	r3, [pc, #88]	; (8005348 <HAL_SPI_MspInit+0x198>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052f4:	4b14      	ldr	r3, [pc, #80]	; (8005348 <HAL_SPI_MspInit+0x198>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052fa:	4b13      	ldr	r3, [pc, #76]	; (8005348 <HAL_SPI_MspInit+0x198>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005300:	4811      	ldr	r0, [pc, #68]	; (8005348 <HAL_SPI_MspInit+0x198>)
 8005302:	f002 fa53 	bl	80077ac <HAL_DMA_Init>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 800530c:	f7ff fdfe 	bl	8004f0c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a0d      	ldr	r2, [pc, #52]	; (8005348 <HAL_SPI_MspInit+0x198>)
 8005314:	67da      	str	r2, [r3, #124]	; 0x7c
 8005316:	4a0c      	ldr	r2, [pc, #48]	; (8005348 <HAL_SPI_MspInit+0x198>)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800531c:	2200      	movs	r2, #0
 800531e:	2100      	movs	r1, #0
 8005320:	2033      	movs	r0, #51	; 0x33
 8005322:	f002 f804 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005326:	2033      	movs	r0, #51	; 0x33
 8005328:	f002 f81b 	bl	8007362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800532c:	bf00      	nop
 800532e:	37e0      	adds	r7, #224	; 0xe0
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40003c00 	.word	0x40003c00
 8005338:	58024400 	.word	0x58024400
 800533c:	58020800 	.word	0x58020800
 8005340:	24000cac 	.word	0x24000cac
 8005344:	400200b8 	.word	0x400200b8
 8005348:	24000d24 	.word	0x24000d24
 800534c:	40020410 	.word	0x40020410

08005350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <HAL_MspInit+0x30>)
 8005358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800535c:	4a08      	ldr	r2, [pc, #32]	; (8005380 <HAL_MspInit+0x30>)
 800535e:	f043 0302 	orr.w	r3, r3, #2
 8005362:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_MspInit+0x30>)
 8005368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	58024400 	.word	0x58024400

08005384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005388:	e7fe      	b.n	8005388 <NMI_Handler+0x4>

0800538a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800538a:	b480      	push	{r7}
 800538c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800538e:	e7fe      	b.n	800538e <HardFault_Handler+0x4>

08005390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005394:	e7fe      	b.n	8005394 <MemManage_Handler+0x4>

08005396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005396:	b480      	push	{r7}
 8005398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800539a:	e7fe      	b.n	800539a <BusFault_Handler+0x4>

0800539c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053a0:	e7fe      	b.n	80053a0 <UsageFault_Handler+0x4>

080053a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053a2:	b480      	push	{r7}
 80053a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053be:	b480      	push	{r7}
 80053c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053d0:	f001 fe82 	bl	80070d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80053d4:	f001 ffdf 	bl	8007396 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80053d8:	bf00      	nop
 80053da:	bd80      	pop	{r7, pc}

080053dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80053e0:	4802      	ldr	r0, [pc, #8]	; (80053ec <DMA1_Stream0_IRQHandler+0x10>)
 80053e2:	f003 fd0d 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	240014f8 	.word	0x240014f8

080053f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80053f4:	4802      	ldr	r0, [pc, #8]	; (8005400 <DMA1_Stream1_IRQHandler+0x10>)
 80053f6:	f003 fd03 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80053fa:	bf00      	nop
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	24001660 	.word	0x24001660

08005404 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005408:	4802      	ldr	r0, [pc, #8]	; (8005414 <DMA1_Stream2_IRQHandler+0x10>)
 800540a:	f003 fcf9 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	240016d8 	.word	0x240016d8

08005418 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800541c:	4802      	ldr	r0, [pc, #8]	; (8005428 <DMA1_Stream3_IRQHandler+0x10>)
 800541e:	f003 fcef 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	24001408 	.word	0x24001408

0800542c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005430:	4802      	ldr	r0, [pc, #8]	; (800543c <DMA1_Stream4_IRQHandler+0x10>)
 8005432:	f003 fce5 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005436:	bf00      	nop
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	24001480 	.word	0x24001480

08005440 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005444:	4802      	ldr	r0, [pc, #8]	; (8005450 <DMA1_Stream5_IRQHandler+0x10>)
 8005446:	f003 fcdb 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800544a:	bf00      	nop
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	24001570 	.word	0x24001570

08005454 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005458:	4802      	ldr	r0, [pc, #8]	; (8005464 <DMA1_Stream6_IRQHandler+0x10>)
 800545a:	f003 fcd1 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800545e:	bf00      	nop
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	240015e8 	.word	0x240015e8

08005468 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 800546c:	2040      	movs	r0, #64	; 0x40
 800546e:	f005 f9a2 	bl	800a7b6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8005472:	2080      	movs	r0, #128	; 0x80
 8005474:	f005 f99f 	bl	800a7b6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005478:	bf00      	nop
 800547a:	bd80      	pop	{r7, pc}

0800547c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005480:	4802      	ldr	r0, [pc, #8]	; (800548c <USART2_IRQHandler+0x10>)
 8005482:	f009 ff91 	bl	800f3a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	240012e8 	.word	0x240012e8

08005490 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005494:	4802      	ldr	r0, [pc, #8]	; (80054a0 <USART3_IRQHandler+0x10>)
 8005496:	f009 ff87 	bl	800f3a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	24001378 	.word	0x24001378

080054a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 80054a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80054ac:	f005 f983 	bl	800a7b6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 80054b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80054b4:	f005 f97f 	bl	800a7b6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 80054b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80054bc:	f005 f97b 	bl	800a7b6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 80054c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80054c4:	f005 f977 	bl	800a7b6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80054c8:	bf00      	nop
 80054ca:	bd80      	pop	{r7, pc}

080054cc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80054d0:	4803      	ldr	r0, [pc, #12]	; (80054e0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80054d2:	f008 fc6b 	bl	800ddac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80054d6:	4803      	ldr	r0, [pc, #12]	; (80054e4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80054d8:	f008 fc68 	bl	800ddac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80054dc:	bf00      	nop
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	24000fb4 	.word	0x24000fb4
 80054e4:	24001000 	.word	0x24001000

080054e8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80054ec:	4803      	ldr	r0, [pc, #12]	; (80054fc <TIM8_UP_TIM13_IRQHandler+0x14>)
 80054ee:	f008 fc5d 	bl	800ddac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80054f2:	4803      	ldr	r0, [pc, #12]	; (8005500 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80054f4:	f008 fc5a 	bl	800ddac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80054f8:	bf00      	nop
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	24000fb4 	.word	0x24000fb4
 8005500:	2400104c 	.word	0x2400104c

08005504 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005508:	4803      	ldr	r0, [pc, #12]	; (8005518 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800550a:	f008 fc4f 	bl	800ddac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800550e:	4803      	ldr	r0, [pc, #12]	; (800551c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8005510:	f008 fc4c 	bl	800ddac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005514:	bf00      	nop
 8005516:	bd80      	pop	{r7, pc}
 8005518:	24000fb4 	.word	0x24000fb4
 800551c:	24001098 	.word	0x24001098

08005520 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005524:	4802      	ldr	r0, [pc, #8]	; (8005530 <TIM8_CC_IRQHandler+0x10>)
 8005526:	f008 fc41 	bl	800ddac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	24000fb4 	.word	0x24000fb4

08005534 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005538:	4802      	ldr	r0, [pc, #8]	; (8005544 <DMA1_Stream7_IRQHandler+0x10>)
 800553a:	f003 fc61 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	24000cac 	.word	0x24000cac

08005548 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800554c:	4802      	ldr	r0, [pc, #8]	; (8005558 <TIM5_IRQHandler+0x10>)
 800554e:	f008 fc2d 	bl	800ddac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	24000ed0 	.word	0x24000ed0

0800555c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005560:	4802      	ldr	r0, [pc, #8]	; (800556c <SPI3_IRQHandler+0x10>)
 8005562:	f007 fda5 	bl	800d0b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	24000c24 	.word	0x24000c24

08005570 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005574:	4802      	ldr	r0, [pc, #8]	; (8005580 <UART4_IRQHandler+0x10>)
 8005576:	f009 ff17 	bl	800f3a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	240011c8 	.word	0x240011c8

08005584 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005588:	4802      	ldr	r0, [pc, #8]	; (8005594 <TIM6_DAC_IRQHandler+0x10>)
 800558a:	f008 fc0f 	bl	800ddac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	24000f1c 	.word	0x24000f1c

08005598 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800559c:	4802      	ldr	r0, [pc, #8]	; (80055a8 <TIM7_IRQHandler+0x10>)
 800559e:	f008 fc05 	bl	800ddac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	24000f68 	.word	0x24000f68

080055ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80055b0:	4802      	ldr	r0, [pc, #8]	; (80055bc <DMA2_Stream0_IRQHandler+0x10>)
 80055b2:	f003 fc25 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	24000d24 	.word	0x24000d24

080055c0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80055c4:	4802      	ldr	r0, [pc, #8]	; (80055d0 <UART7_IRQHandler+0x10>)
 80055c6:	f009 feef 	bl	800f3a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	24001258 	.word	0x24001258

080055d4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80055d8:	4802      	ldr	r0, [pc, #8]	; (80055e4 <TIM16_IRQHandler+0x10>)
 80055da:	f008 fbe7 	bl	800ddac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	24001130 	.word	0x24001130

080055e8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80055ec:	4802      	ldr	r0, [pc, #8]	; (80055f8 <TIM17_IRQHandler+0x10>)
 80055ee:	f008 fbdd 	bl	800ddac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	2400117c 	.word	0x2400117c

080055fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
	return 1;
 8005600:	2301      	movs	r3, #1
}
 8005602:	4618      	mov	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <_kill>:

int _kill(int pid, int sig)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005616:	f00d f921 	bl	801285c <__errno>
 800561a:	4603      	mov	r3, r0
 800561c:	2216      	movs	r2, #22
 800561e:	601a      	str	r2, [r3, #0]
	return -1;
 8005620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <_exit>:

void _exit (int status)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005634:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff ffe7 	bl	800560c <_kill>
	while (1) {}		/* Make sure we hang here */
 800563e:	e7fe      	b.n	800563e <_exit+0x12>

08005640 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e00a      	b.n	8005668 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005652:	f3af 8000 	nop.w
 8005656:	4601      	mov	r1, r0
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	60ba      	str	r2, [r7, #8]
 800565e:	b2ca      	uxtb	r2, r1
 8005660:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	3301      	adds	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	429a      	cmp	r2, r3
 800566e:	dbf0      	blt.n	8005652 <_read+0x12>
	}

return len;
 8005670:	687b      	ldr	r3, [r7, #4]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e009      	b.n	80056a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	60ba      	str	r2, [r7, #8]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	3301      	adds	r3, #1
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	dbf1      	blt.n	800568c <_write+0x12>
	}
	return len;
 80056a8:	687b      	ldr	r3, [r7, #4]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <_close>:

int _close(int file)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
	return -1;
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056da:	605a      	str	r2, [r3, #4]
	return 0;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <_isatty>:

int _isatty(int file)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
	return 1;
 80056f2:	2301      	movs	r3, #1
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
	return 0;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005724:	4a14      	ldr	r2, [pc, #80]	; (8005778 <_sbrk+0x5c>)
 8005726:	4b15      	ldr	r3, [pc, #84]	; (800577c <_sbrk+0x60>)
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005730:	4b13      	ldr	r3, [pc, #76]	; (8005780 <_sbrk+0x64>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005738:	4b11      	ldr	r3, [pc, #68]	; (8005780 <_sbrk+0x64>)
 800573a:	4a12      	ldr	r2, [pc, #72]	; (8005784 <_sbrk+0x68>)
 800573c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800573e:	4b10      	ldr	r3, [pc, #64]	; (8005780 <_sbrk+0x64>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4413      	add	r3, r2
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	429a      	cmp	r2, r3
 800574a:	d207      	bcs.n	800575c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800574c:	f00d f886 	bl	801285c <__errno>
 8005750:	4603      	mov	r3, r0
 8005752:	220c      	movs	r2, #12
 8005754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800575a:	e009      	b.n	8005770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800575c:	4b08      	ldr	r3, [pc, #32]	; (8005780 <_sbrk+0x64>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005762:	4b07      	ldr	r3, [pc, #28]	; (8005780 <_sbrk+0x64>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4413      	add	r3, r2
 800576a:	4a05      	ldr	r2, [pc, #20]	; (8005780 <_sbrk+0x64>)
 800576c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800576e:	68fb      	ldr	r3, [r7, #12]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	24001d68 	.word	0x24001d68
 800577c:	00000400 	.word	0x00000400
 8005780:	24000d9c 	.word	0x24000d9c
 8005784:	24001768 	.word	0x24001768

08005788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800578c:	4b39      	ldr	r3, [pc, #228]	; (8005874 <SystemInit+0xec>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005792:	4a38      	ldr	r2, [pc, #224]	; (8005874 <SystemInit+0xec>)
 8005794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800579c:	4b36      	ldr	r3, [pc, #216]	; (8005878 <SystemInit+0xf0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	2b06      	cmp	r3, #6
 80057a6:	d807      	bhi.n	80057b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80057a8:	4b33      	ldr	r3, [pc, #204]	; (8005878 <SystemInit+0xf0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f023 030f 	bic.w	r3, r3, #15
 80057b0:	4a31      	ldr	r2, [pc, #196]	; (8005878 <SystemInit+0xf0>)
 80057b2:	f043 0307 	orr.w	r3, r3, #7
 80057b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80057b8:	4b30      	ldr	r3, [pc, #192]	; (800587c <SystemInit+0xf4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a2f      	ldr	r2, [pc, #188]	; (800587c <SystemInit+0xf4>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80057c4:	4b2d      	ldr	r3, [pc, #180]	; (800587c <SystemInit+0xf4>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80057ca:	4b2c      	ldr	r3, [pc, #176]	; (800587c <SystemInit+0xf4>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	492b      	ldr	r1, [pc, #172]	; (800587c <SystemInit+0xf4>)
 80057d0:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <SystemInit+0xf8>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80057d6:	4b28      	ldr	r3, [pc, #160]	; (8005878 <SystemInit+0xf0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80057e2:	4b25      	ldr	r3, [pc, #148]	; (8005878 <SystemInit+0xf0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f023 030f 	bic.w	r3, r3, #15
 80057ea:	4a23      	ldr	r2, [pc, #140]	; (8005878 <SystemInit+0xf0>)
 80057ec:	f043 0307 	orr.w	r3, r3, #7
 80057f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80057f2:	4b22      	ldr	r3, [pc, #136]	; (800587c <SystemInit+0xf4>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80057f8:	4b20      	ldr	r3, [pc, #128]	; (800587c <SystemInit+0xf4>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80057fe:	4b1f      	ldr	r3, [pc, #124]	; (800587c <SystemInit+0xf4>)
 8005800:	2200      	movs	r2, #0
 8005802:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005804:	4b1d      	ldr	r3, [pc, #116]	; (800587c <SystemInit+0xf4>)
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <SystemInit+0xfc>)
 8005808:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800580a:	4b1c      	ldr	r3, [pc, #112]	; (800587c <SystemInit+0xf4>)
 800580c:	4a1e      	ldr	r2, [pc, #120]	; (8005888 <SystemInit+0x100>)
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005810:	4b1a      	ldr	r3, [pc, #104]	; (800587c <SystemInit+0xf4>)
 8005812:	4a1e      	ldr	r2, [pc, #120]	; (800588c <SystemInit+0x104>)
 8005814:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005816:	4b19      	ldr	r3, [pc, #100]	; (800587c <SystemInit+0xf4>)
 8005818:	2200      	movs	r2, #0
 800581a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800581c:	4b17      	ldr	r3, [pc, #92]	; (800587c <SystemInit+0xf4>)
 800581e:	4a1b      	ldr	r2, [pc, #108]	; (800588c <SystemInit+0x104>)
 8005820:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005822:	4b16      	ldr	r3, [pc, #88]	; (800587c <SystemInit+0xf4>)
 8005824:	2200      	movs	r2, #0
 8005826:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005828:	4b14      	ldr	r3, [pc, #80]	; (800587c <SystemInit+0xf4>)
 800582a:	4a18      	ldr	r2, [pc, #96]	; (800588c <SystemInit+0x104>)
 800582c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <SystemInit+0xf4>)
 8005830:	2200      	movs	r2, #0
 8005832:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005834:	4b11      	ldr	r3, [pc, #68]	; (800587c <SystemInit+0xf4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a10      	ldr	r2, [pc, #64]	; (800587c <SystemInit+0xf4>)
 800583a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800583e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005840:	4b0e      	ldr	r3, [pc, #56]	; (800587c <SystemInit+0xf4>)
 8005842:	2200      	movs	r2, #0
 8005844:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <SystemInit+0x108>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <SystemInit+0x10c>)
 800584c:	4013      	ands	r3, r2
 800584e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005852:	d202      	bcs.n	800585a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005854:	4b10      	ldr	r3, [pc, #64]	; (8005898 <SystemInit+0x110>)
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800585a:	4b10      	ldr	r3, [pc, #64]	; (800589c <SystemInit+0x114>)
 800585c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005860:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005862:	4b04      	ldr	r3, [pc, #16]	; (8005874 <SystemInit+0xec>)
 8005864:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005868:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800586a:	bf00      	nop
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	e000ed00 	.word	0xe000ed00
 8005878:	52002000 	.word	0x52002000
 800587c:	58024400 	.word	0x58024400
 8005880:	eaf6ed7f 	.word	0xeaf6ed7f
 8005884:	02020200 	.word	0x02020200
 8005888:	01ff0000 	.word	0x01ff0000
 800588c:	01010280 	.word	0x01010280
 8005890:	5c001000 	.word	0x5c001000
 8005894:	ffff0000 	.word	0xffff0000
 8005898:	51008108 	.word	0x51008108
 800589c:	52004000 	.word	0x52004000

080058a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b09a      	sub	sp, #104	; 0x68
 80058a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	605a      	str	r2, [r3, #4]
 80058b0:	609a      	str	r2, [r3, #8]
 80058b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80058c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	605a      	str	r2, [r3, #4]
 80058ca:	609a      	str	r2, [r3, #8]
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	611a      	str	r2, [r3, #16]
 80058d0:	615a      	str	r2, [r3, #20]
 80058d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	222c      	movs	r2, #44	; 0x2c
 80058d8:	2100      	movs	r1, #0
 80058da:	4618      	mov	r0, r3
 80058dc:	f00c ffe8 	bl	80128b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80058e0:	4b44      	ldr	r3, [pc, #272]	; (80059f4 <MX_TIM1_Init+0x154>)
 80058e2:	4a45      	ldr	r2, [pc, #276]	; (80059f8 <MX_TIM1_Init+0x158>)
 80058e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80058e6:	4b43      	ldr	r3, [pc, #268]	; (80059f4 <MX_TIM1_Init+0x154>)
 80058e8:	22c7      	movs	r2, #199	; 0xc7
 80058ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ec:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <MX_TIM1_Init+0x154>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80058f2:	4b40      	ldr	r3, [pc, #256]	; (80059f4 <MX_TIM1_Init+0x154>)
 80058f4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80058f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058fa:	4b3e      	ldr	r3, [pc, #248]	; (80059f4 <MX_TIM1_Init+0x154>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005900:	4b3c      	ldr	r3, [pc, #240]	; (80059f4 <MX_TIM1_Init+0x154>)
 8005902:	2200      	movs	r2, #0
 8005904:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005906:	4b3b      	ldr	r3, [pc, #236]	; (80059f4 <MX_TIM1_Init+0x154>)
 8005908:	2280      	movs	r2, #128	; 0x80
 800590a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800590c:	4839      	ldr	r0, [pc, #228]	; (80059f4 <MX_TIM1_Init+0x154>)
 800590e:	f007 feac 	bl	800d66a <HAL_TIM_Base_Init>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005918:	f7ff faf8 	bl	8004f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800591c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005920:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005922:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005926:	4619      	mov	r1, r3
 8005928:	4832      	ldr	r0, [pc, #200]	; (80059f4 <MX_TIM1_Init+0x154>)
 800592a:	f008 fc73 	bl	800e214 <HAL_TIM_ConfigClockSource>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005934:	f7ff faea 	bl	8004f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005938:	482e      	ldr	r0, [pc, #184]	; (80059f4 <MX_TIM1_Init+0x154>)
 800593a:	f007 ff94 	bl	800d866 <HAL_TIM_PWM_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005944:	f7ff fae2 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005948:	2300      	movs	r3, #0
 800594a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800594c:	2300      	movs	r3, #0
 800594e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005950:	2300      	movs	r3, #0
 8005952:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005954:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005958:	4619      	mov	r1, r3
 800595a:	4826      	ldr	r0, [pc, #152]	; (80059f4 <MX_TIM1_Init+0x154>)
 800595c:	f009 f9ae 	bl	800ecbc <HAL_TIMEx_MasterConfigSynchronization>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005966:	f7ff fad1 	bl	8004f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800596a:	2360      	movs	r3, #96	; 0x60
 800596c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800596e:	f240 1339 	movw	r3, #313	; 0x139
 8005972:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005974:	2300      	movs	r3, #0
 8005976:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005978:	2300      	movs	r3, #0
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800597c:	2300      	movs	r3, #0
 800597e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005980:	2300      	movs	r3, #0
 8005982:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005984:	2300      	movs	r3, #0
 8005986:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800598c:	2204      	movs	r2, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4818      	ldr	r0, [pc, #96]	; (80059f4 <MX_TIM1_Init+0x154>)
 8005992:	f008 fb2b 	bl	800dfec <HAL_TIM_PWM_ConfigChannel>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800599c:	f7ff fab6 	bl	8004f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80059b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80059be:	2300      	movs	r3, #0
 80059c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80059c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80059d0:	1d3b      	adds	r3, r7, #4
 80059d2:	4619      	mov	r1, r3
 80059d4:	4807      	ldr	r0, [pc, #28]	; (80059f4 <MX_TIM1_Init+0x154>)
 80059d6:	f009 f9ff 	bl	800edd8 <HAL_TIMEx_ConfigBreakDeadTime>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80059e0:	f7ff fa94 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80059e4:	4803      	ldr	r0, [pc, #12]	; (80059f4 <MX_TIM1_Init+0x154>)
 80059e6:	f000 fdd5 	bl	8006594 <HAL_TIM_MspPostInit>

}
 80059ea:	bf00      	nop
 80059ec:	3768      	adds	r7, #104	; 0x68
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	24000da0 	.word	0x24000da0
 80059f8:	40010000 	.word	0x40010000

080059fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08e      	sub	sp, #56	; 0x38
 8005a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	605a      	str	r2, [r3, #4]
 8005a0c:	609a      	str	r2, [r3, #8]
 8005a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a10:	f107 031c 	add.w	r3, r7, #28
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	605a      	str	r2, [r3, #4]
 8005a24:	609a      	str	r2, [r3, #8]
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	611a      	str	r2, [r3, #16]
 8005a2a:	615a      	str	r2, [r3, #20]
 8005a2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005a2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8005a36:	4b2c      	ldr	r3, [pc, #176]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005a38:	22c7      	movs	r2, #199	; 0xc7
 8005a3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8005a42:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005a44:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005a48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a4a:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a50:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a56:	4824      	ldr	r0, [pc, #144]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005a58:	f007 fe07 	bl	800d66a <HAL_TIM_Base_Init>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005a62:	f7ff fa53 	bl	8004f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a70:	4619      	mov	r1, r3
 8005a72:	481d      	ldr	r0, [pc, #116]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005a74:	f008 fbce 	bl	800e214 <HAL_TIM_ConfigClockSource>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005a7e:	f7ff fa45 	bl	8004f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005a82:	4819      	ldr	r0, [pc, #100]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005a84:	f007 feef 	bl	800d866 <HAL_TIM_PWM_Init>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005a8e:	f7ff fa3d 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a9a:	f107 031c 	add.w	r3, r7, #28
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4811      	ldr	r0, [pc, #68]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005aa2:	f009 f90b 	bl	800ecbc <HAL_TIMEx_MasterConfigSynchronization>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005aac:	f7ff fa2e 	bl	8004f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ab0:	2360      	movs	r3, #96	; 0x60
 8005ab2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8005ab4:	f240 1339 	movw	r3, #313	; 0x139
 8005ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4807      	ldr	r0, [pc, #28]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005aca:	f008 fa8f 	bl	800dfec <HAL_TIM_PWM_ConfigChannel>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005ad4:	f7ff fa1a 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005ad8:	4803      	ldr	r0, [pc, #12]	; (8005ae8 <MX_TIM2_Init+0xec>)
 8005ada:	f000 fd5b 	bl	8006594 <HAL_TIM_MspPostInit>

}
 8005ade:	bf00      	nop
 8005ae0:	3738      	adds	r7, #56	; 0x38
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	24000dec 	.word	0x24000dec

08005aec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08e      	sub	sp, #56	; 0x38
 8005af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b00:	f107 031c 	add.w	r3, r7, #28
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	605a      	str	r2, [r3, #4]
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	611a      	str	r2, [r3, #16]
 8005b1a:	615a      	str	r2, [r3, #20]
 8005b1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005b1e:	4b2d      	ldr	r3, [pc, #180]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005b20:	4a2d      	ldr	r2, [pc, #180]	; (8005bd8 <MX_TIM3_Init+0xec>)
 8005b22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005b24:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005b26:	22c7      	movs	r2, #199	; 0xc7
 8005b28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b2a:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8005b30:	4b28      	ldr	r3, [pc, #160]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005b32:	f640 125f 	movw	r2, #2399	; 0x95f
 8005b36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b38:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b3e:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005b40:	2280      	movs	r2, #128	; 0x80
 8005b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005b44:	4823      	ldr	r0, [pc, #140]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005b46:	f007 fd90 	bl	800d66a <HAL_TIM_Base_Init>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005b50:	f7ff f9dc 	bl	8004f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b5e:	4619      	mov	r1, r3
 8005b60:	481c      	ldr	r0, [pc, #112]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005b62:	f008 fb57 	bl	800e214 <HAL_TIM_ConfigClockSource>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005b6c:	f7ff f9ce 	bl	8004f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005b70:	4818      	ldr	r0, [pc, #96]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005b72:	f007 fe78 	bl	800d866 <HAL_TIM_PWM_Init>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005b7c:	f7ff f9c6 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b88:	f107 031c 	add.w	r3, r7, #28
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4811      	ldr	r0, [pc, #68]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005b90:	f009 f894 	bl	800ecbc <HAL_TIMEx_MasterConfigSynchronization>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005b9a:	f7ff f9b7 	bl	8004f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b9e:	2360      	movs	r3, #96	; 0x60
 8005ba0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005baa:	2300      	movs	r3, #0
 8005bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005bae:	463b      	mov	r3, r7
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4807      	ldr	r0, [pc, #28]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005bb6:	f008 fa19 	bl	800dfec <HAL_TIM_PWM_ConfigChannel>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005bc0:	f7ff f9a4 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005bc4:	4803      	ldr	r0, [pc, #12]	; (8005bd4 <MX_TIM3_Init+0xe8>)
 8005bc6:	f000 fce5 	bl	8006594 <HAL_TIM_MspPostInit>

}
 8005bca:	bf00      	nop
 8005bcc:	3738      	adds	r7, #56	; 0x38
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	24000e38 	.word	0x24000e38
 8005bd8:	40000400 	.word	0x40000400

08005bdc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	; 0x38
 8005be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	605a      	str	r2, [r3, #4]
 8005bec:	609a      	str	r2, [r3, #8]
 8005bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf0:	f107 031c 	add.w	r3, r7, #28
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	609a      	str	r2, [r3, #8]
 8005c06:	60da      	str	r2, [r3, #12]
 8005c08:	611a      	str	r2, [r3, #16]
 8005c0a:	615a      	str	r2, [r3, #20]
 8005c0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005c0e:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005c10:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <MX_TIM4_Init+0xec>)
 8005c12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005c14:	4b2b      	ldr	r3, [pc, #172]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005c16:	22ef      	movs	r2, #239	; 0xef
 8005c18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c1a:	4b2a      	ldr	r3, [pc, #168]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8005c20:	4b28      	ldr	r3, [pc, #160]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005c22:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005c26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c28:	4b26      	ldr	r3, [pc, #152]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c2e:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005c30:	2280      	movs	r2, #128	; 0x80
 8005c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005c34:	4823      	ldr	r0, [pc, #140]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005c36:	f007 fd18 	bl	800d66a <HAL_TIM_Base_Init>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005c40:	f7ff f964 	bl	8004f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c4e:	4619      	mov	r1, r3
 8005c50:	481c      	ldr	r0, [pc, #112]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005c52:	f008 fadf 	bl	800e214 <HAL_TIM_ConfigClockSource>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005c5c:	f7ff f956 	bl	8004f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005c60:	4818      	ldr	r0, [pc, #96]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005c62:	f007 fe00 	bl	800d866 <HAL_TIM_PWM_Init>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005c6c:	f7ff f94e 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005c78:	f107 031c 	add.w	r3, r7, #28
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4811      	ldr	r0, [pc, #68]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005c80:	f009 f81c 	bl	800ecbc <HAL_TIMEx_MasterConfigSynchronization>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005c8a:	f7ff f93f 	bl	8004f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c8e:	2360      	movs	r3, #96	; 0x60
 8005c90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4807      	ldr	r0, [pc, #28]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005ca6:	f008 f9a1 	bl	800dfec <HAL_TIM_PWM_ConfigChannel>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005cb0:	f7ff f92c 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005cb4:	4803      	ldr	r0, [pc, #12]	; (8005cc4 <MX_TIM4_Init+0xe8>)
 8005cb6:	f000 fc6d 	bl	8006594 <HAL_TIM_MspPostInit>

}
 8005cba:	bf00      	nop
 8005cbc:	3738      	adds	r7, #56	; 0x38
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	24000e84 	.word	0x24000e84
 8005cc8:	40000800 	.word	0x40000800

08005ccc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cd2:	f107 0310 	add.w	r3, r7, #16
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	609a      	str	r2, [r3, #8]
 8005cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ce0:	1d3b      	adds	r3, r7, #4
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	605a      	str	r2, [r3, #4]
 8005ce8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005cea:	4b1d      	ldr	r3, [pc, #116]	; (8005d60 <MX_TIM5_Init+0x94>)
 8005cec:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <MX_TIM5_Init+0x98>)
 8005cee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <MX_TIM5_Init+0x94>)
 8005cf2:	22c7      	movs	r2, #199	; 0xc7
 8005cf4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cf6:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <MX_TIM5_Init+0x94>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005cfc:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <MX_TIM5_Init+0x94>)
 8005cfe:	f642 62df 	movw	r2, #11999	; 0x2edf
 8005d02:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d04:	4b16      	ldr	r3, [pc, #88]	; (8005d60 <MX_TIM5_Init+0x94>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <MX_TIM5_Init+0x94>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005d10:	4813      	ldr	r0, [pc, #76]	; (8005d60 <MX_TIM5_Init+0x94>)
 8005d12:	f007 fcaa 	bl	800d66a <HAL_TIM_Base_Init>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005d1c:	f7ff f8f6 	bl	8004f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005d26:	f107 0310 	add.w	r3, r7, #16
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	480c      	ldr	r0, [pc, #48]	; (8005d60 <MX_TIM5_Init+0x94>)
 8005d2e:	f008 fa71 	bl	800e214 <HAL_TIM_ConfigClockSource>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005d38:	f7ff f8e8 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005d44:	1d3b      	adds	r3, r7, #4
 8005d46:	4619      	mov	r1, r3
 8005d48:	4805      	ldr	r0, [pc, #20]	; (8005d60 <MX_TIM5_Init+0x94>)
 8005d4a:	f008 ffb7 	bl	800ecbc <HAL_TIMEx_MasterConfigSynchronization>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005d54:	f7ff f8da 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005d58:	bf00      	nop
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	24000ed0 	.word	0x24000ed0
 8005d64:	40000c00 	.word	0x40000c00

08005d68 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	605a      	str	r2, [r3, #4]
 8005d76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005d78:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <MX_TIM6_Init+0x64>)
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <MX_TIM6_Init+0x68>)
 8005d7c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <MX_TIM6_Init+0x64>)
 8005d80:	22c7      	movs	r2, #199	; 0xc7
 8005d82:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d84:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <MX_TIM6_Init+0x64>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8005d8a:	4b10      	ldr	r3, [pc, #64]	; (8005dcc <MX_TIM6_Init+0x64>)
 8005d8c:	f241 726f 	movw	r2, #5999	; 0x176f
 8005d90:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d92:	4b0e      	ldr	r3, [pc, #56]	; (8005dcc <MX_TIM6_Init+0x64>)
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d98:	480c      	ldr	r0, [pc, #48]	; (8005dcc <MX_TIM6_Init+0x64>)
 8005d9a:	f007 fc66 	bl	800d66a <HAL_TIM_Base_Init>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005da4:	f7ff f8b2 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005da8:	2300      	movs	r3, #0
 8005daa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005db0:	1d3b      	adds	r3, r7, #4
 8005db2:	4619      	mov	r1, r3
 8005db4:	4805      	ldr	r0, [pc, #20]	; (8005dcc <MX_TIM6_Init+0x64>)
 8005db6:	f008 ff81 	bl	800ecbc <HAL_TIMEx_MasterConfigSynchronization>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005dc0:	f7ff f8a4 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	24000f1c 	.word	0x24000f1c
 8005dd0:	40001000 	.word	0x40001000

08005dd4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dda:	1d3b      	adds	r3, r7, #4
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	605a      	str	r2, [r3, #4]
 8005de2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005de4:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <MX_TIM7_Init+0x64>)
 8005de6:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <MX_TIM7_Init+0x68>)
 8005de8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005dea:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <MX_TIM7_Init+0x64>)
 8005dec:	22c7      	movs	r2, #199	; 0xc7
 8005dee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005df0:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <MX_TIM7_Init+0x64>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005df6:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <MX_TIM7_Init+0x64>)
 8005df8:	f240 42af 	movw	r2, #1199	; 0x4af
 8005dfc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005dfe:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <MX_TIM7_Init+0x64>)
 8005e00:	2280      	movs	r2, #128	; 0x80
 8005e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005e04:	480c      	ldr	r0, [pc, #48]	; (8005e38 <MX_TIM7_Init+0x64>)
 8005e06:	f007 fc30 	bl	800d66a <HAL_TIM_Base_Init>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005e10:	f7ff f87c 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e14:	2300      	movs	r3, #0
 8005e16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005e1c:	1d3b      	adds	r3, r7, #4
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4805      	ldr	r0, [pc, #20]	; (8005e38 <MX_TIM7_Init+0x64>)
 8005e22:	f008 ff4b 	bl	800ecbc <HAL_TIMEx_MasterConfigSynchronization>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005e2c:	f7ff f86e 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	24000f68 	.word	0x24000f68
 8005e3c:	40001400 	.word	0x40001400

08005e40 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	2224      	movs	r2, #36	; 0x24
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f00c fd2e 	bl	80128b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e54:	463b      	mov	r3, r7
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	605a      	str	r2, [r3, #4]
 8005e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005e5e:	4b23      	ldr	r3, [pc, #140]	; (8005eec <MX_TIM8_Init+0xac>)
 8005e60:	4a23      	ldr	r2, [pc, #140]	; (8005ef0 <MX_TIM8_Init+0xb0>)
 8005e62:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005e64:	4b21      	ldr	r3, [pc, #132]	; (8005eec <MX_TIM8_Init+0xac>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e6a:	4b20      	ldr	r3, [pc, #128]	; (8005eec <MX_TIM8_Init+0xac>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2048-1;
 8005e70:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <MX_TIM8_Init+0xac>)
 8005e72:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005e76:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e78:	4b1c      	ldr	r3, [pc, #112]	; (8005eec <MX_TIM8_Init+0xac>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005e7e:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <MX_TIM8_Init+0xac>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e84:	4b19      	ldr	r3, [pc, #100]	; (8005eec <MX_TIM8_Init+0xac>)
 8005e86:	2280      	movs	r2, #128	; 0x80
 8005e88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005e92:	2301      	movs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005e9a:	230f      	movs	r3, #15
 8005e9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005eaa:	230f      	movs	r3, #15
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005eae:	f107 030c 	add.w	r3, r7, #12
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	480d      	ldr	r0, [pc, #52]	; (8005eec <MX_TIM8_Init+0xac>)
 8005eb6:	f007 fe45 	bl	800db44 <HAL_TIM_Encoder_Init>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005ec0:	f7ff f824 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4805      	ldr	r0, [pc, #20]	; (8005eec <MX_TIM8_Init+0xac>)
 8005ed6:	f008 fef1 	bl	800ecbc <HAL_TIMEx_MasterConfigSynchronization>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005ee0:	f7ff f814 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005ee4:	bf00      	nop
 8005ee6:	3730      	adds	r7, #48	; 0x30
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	24000fb4 	.word	0x24000fb4
 8005ef0:	40010400 	.word	0x40010400

08005ef4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005efa:	463b      	mov	r3, r7
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	605a      	str	r2, [r3, #4]
 8005f02:	609a      	str	r2, [r3, #8]
 8005f04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005f06:	4b16      	ldr	r3, [pc, #88]	; (8005f60 <MX_TIM12_Init+0x6c>)
 8005f08:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <MX_TIM12_Init+0x70>)
 8005f0a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005f0c:	4b14      	ldr	r3, [pc, #80]	; (8005f60 <MX_TIM12_Init+0x6c>)
 8005f0e:	22c7      	movs	r2, #199	; 0xc7
 8005f10:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f12:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <MX_TIM12_Init+0x6c>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005f18:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <MX_TIM12_Init+0x6c>)
 8005f1a:	f240 2257 	movw	r2, #599	; 0x257
 8005f1e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f20:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <MX_TIM12_Init+0x6c>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f26:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <MX_TIM12_Init+0x6c>)
 8005f28:	2280      	movs	r2, #128	; 0x80
 8005f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005f2c:	480c      	ldr	r0, [pc, #48]	; (8005f60 <MX_TIM12_Init+0x6c>)
 8005f2e:	f007 fb9c 	bl	800d66a <HAL_TIM_Base_Init>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005f38:	f7fe ffe8 	bl	8004f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f40:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005f42:	463b      	mov	r3, r7
 8005f44:	4619      	mov	r1, r3
 8005f46:	4806      	ldr	r0, [pc, #24]	; (8005f60 <MX_TIM12_Init+0x6c>)
 8005f48:	f008 f964 	bl	800e214 <HAL_TIM_ConfigClockSource>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8005f52:	f7fe ffdb 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	24001000 	.word	0x24001000
 8005f64:	40001800 	.word	0x40001800

08005f68 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005f6c:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <MX_TIM13_Init+0x40>)
 8005f6e:	4a0f      	ldr	r2, [pc, #60]	; (8005fac <MX_TIM13_Init+0x44>)
 8005f70:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8005f72:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <MX_TIM13_Init+0x40>)
 8005f74:	22c7      	movs	r2, #199	; 0xc7
 8005f76:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f78:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <MX_TIM13_Init+0x40>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8005f7e:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <MX_TIM13_Init+0x40>)
 8005f80:	f240 2257 	movw	r2, #599	; 0x257
 8005f84:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f86:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <MX_TIM13_Init+0x40>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <MX_TIM13_Init+0x40>)
 8005f8e:	2280      	movs	r2, #128	; 0x80
 8005f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005f92:	4805      	ldr	r0, [pc, #20]	; (8005fa8 <MX_TIM13_Init+0x40>)
 8005f94:	f007 fb69 	bl	800d66a <HAL_TIM_Base_Init>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005f9e:	f7fe ffb5 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	2400104c 	.word	0x2400104c
 8005fac:	40001c00 	.word	0x40001c00

08005fb0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005fb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <MX_TIM14_Init+0x40>)
 8005fb6:	4a0f      	ldr	r2, [pc, #60]	; (8005ff4 <MX_TIM14_Init+0x44>)
 8005fb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005fba:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <MX_TIM14_Init+0x40>)
 8005fbc:	22c7      	movs	r2, #199	; 0xc7
 8005fbe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <MX_TIM14_Init+0x40>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <MX_TIM14_Init+0x40>)
 8005fc8:	f640 125f 	movw	r2, #2399	; 0x95f
 8005fcc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fce:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <MX_TIM14_Init+0x40>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fd4:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <MX_TIM14_Init+0x40>)
 8005fd6:	2280      	movs	r2, #128	; 0x80
 8005fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005fda:	4805      	ldr	r0, [pc, #20]	; (8005ff0 <MX_TIM14_Init+0x40>)
 8005fdc:	f007 fb45 	bl	800d66a <HAL_TIM_Base_Init>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005fe6:	f7fe ff91 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005fea:	bf00      	nop
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	24001098 	.word	0x24001098
 8005ff4:	40002000 	.word	0x40002000

08005ff8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b09a      	sub	sp, #104	; 0x68
 8005ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ffe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	609a      	str	r2, [r3, #8]
 800600a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800600c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	60da      	str	r2, [r3, #12]
 8006026:	611a      	str	r2, [r3, #16]
 8006028:	615a      	str	r2, [r3, #20]
 800602a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800602c:	1d3b      	adds	r3, r7, #4
 800602e:	222c      	movs	r2, #44	; 0x2c
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f00c fc3c 	bl	80128b0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8006038:	4b3f      	ldr	r3, [pc, #252]	; (8006138 <MX_TIM15_Init+0x140>)
 800603a:	4a40      	ldr	r2, [pc, #256]	; (800613c <MX_TIM15_Init+0x144>)
 800603c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 800603e:	4b3e      	ldr	r3, [pc, #248]	; (8006138 <MX_TIM15_Init+0x140>)
 8006040:	22ef      	movs	r2, #239	; 0xef
 8006042:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006044:	4b3c      	ldr	r3, [pc, #240]	; (8006138 <MX_TIM15_Init+0x140>)
 8006046:	2200      	movs	r2, #0
 8006048:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 800604a:	4b3b      	ldr	r3, [pc, #236]	; (8006138 <MX_TIM15_Init+0x140>)
 800604c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8006050:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006052:	4b39      	ldr	r3, [pc, #228]	; (8006138 <MX_TIM15_Init+0x140>)
 8006054:	2200      	movs	r2, #0
 8006056:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8006058:	4b37      	ldr	r3, [pc, #220]	; (8006138 <MX_TIM15_Init+0x140>)
 800605a:	2200      	movs	r2, #0
 800605c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800605e:	4b36      	ldr	r3, [pc, #216]	; (8006138 <MX_TIM15_Init+0x140>)
 8006060:	2280      	movs	r2, #128	; 0x80
 8006062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8006064:	4834      	ldr	r0, [pc, #208]	; (8006138 <MX_TIM15_Init+0x140>)
 8006066:	f007 fb00 	bl	800d66a <HAL_TIM_Base_Init>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8006070:	f7fe ff4c 	bl	8004f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006078:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800607a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800607e:	4619      	mov	r1, r3
 8006080:	482d      	ldr	r0, [pc, #180]	; (8006138 <MX_TIM15_Init+0x140>)
 8006082:	f008 f8c7 	bl	800e214 <HAL_TIM_ConfigClockSource>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800608c:	f7fe ff3e 	bl	8004f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8006090:	4829      	ldr	r0, [pc, #164]	; (8006138 <MX_TIM15_Init+0x140>)
 8006092:	f007 fbe8 	bl	800d866 <HAL_TIM_PWM_Init>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800609c:	f7fe ff36 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060a0:	2300      	movs	r3, #0
 80060a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80060a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80060ac:	4619      	mov	r1, r3
 80060ae:	4822      	ldr	r0, [pc, #136]	; (8006138 <MX_TIM15_Init+0x140>)
 80060b0:	f008 fe04 	bl	800ecbc <HAL_TIMEx_MasterConfigSynchronization>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80060ba:	f7fe ff27 	bl	8004f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80060be:	2360      	movs	r3, #96	; 0x60
 80060c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80060c2:	f240 1339 	movw	r3, #313	; 0x139
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060c8:	2300      	movs	r3, #0
 80060ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80060cc:	2300      	movs	r3, #0
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80060d4:	2300      	movs	r3, #0
 80060d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80060d8:	2300      	movs	r3, #0
 80060da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80060dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060e0:	2204      	movs	r2, #4
 80060e2:	4619      	mov	r1, r3
 80060e4:	4814      	ldr	r0, [pc, #80]	; (8006138 <MX_TIM15_Init+0x140>)
 80060e6:	f007 ff81 	bl	800dfec <HAL_TIM_PWM_ConfigChannel>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80060f0:	f7fe ff0c 	bl	8004f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800610c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006112:	2300      	movs	r3, #0
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8006116:	1d3b      	adds	r3, r7, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4807      	ldr	r0, [pc, #28]	; (8006138 <MX_TIM15_Init+0x140>)
 800611c:	f008 fe5c 	bl	800edd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8006126:	f7fe fef1 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800612a:	4803      	ldr	r0, [pc, #12]	; (8006138 <MX_TIM15_Init+0x140>)
 800612c:	f000 fa32 	bl	8006594 <HAL_TIM_MspPostInit>

}
 8006130:	bf00      	nop
 8006132:	3768      	adds	r7, #104	; 0x68
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	240010e4 	.word	0x240010e4
 800613c:	40014000 	.word	0x40014000

08006140 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006144:	4b0f      	ldr	r3, [pc, #60]	; (8006184 <MX_TIM16_Init+0x44>)
 8006146:	4a10      	ldr	r2, [pc, #64]	; (8006188 <MX_TIM16_Init+0x48>)
 8006148:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 800614a:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <MX_TIM16_Init+0x44>)
 800614c:	22ef      	movs	r2, #239	; 0xef
 800614e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <MX_TIM16_Init+0x44>)
 8006152:	2200      	movs	r2, #0
 8006154:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <MX_TIM16_Init+0x44>)
 8006158:	f240 32e7 	movw	r2, #999	; 0x3e7
 800615c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800615e:	4b09      	ldr	r3, [pc, #36]	; (8006184 <MX_TIM16_Init+0x44>)
 8006160:	2200      	movs	r2, #0
 8006162:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006164:	4b07      	ldr	r3, [pc, #28]	; (8006184 <MX_TIM16_Init+0x44>)
 8006166:	2200      	movs	r2, #0
 8006168:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800616a:	4b06      	ldr	r3, [pc, #24]	; (8006184 <MX_TIM16_Init+0x44>)
 800616c:	2280      	movs	r2, #128	; 0x80
 800616e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006170:	4804      	ldr	r0, [pc, #16]	; (8006184 <MX_TIM16_Init+0x44>)
 8006172:	f007 fa7a 	bl	800d66a <HAL_TIM_Base_Init>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800617c:	f7fe fec6 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006180:	bf00      	nop
 8006182:	bd80      	pop	{r7, pc}
 8006184:	24001130 	.word	0x24001130
 8006188:	40014400 	.word	0x40014400

0800618c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006190:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <MX_TIM17_Init+0x48>)
 8006192:	4a11      	ldr	r2, [pc, #68]	; (80061d8 <MX_TIM17_Init+0x4c>)
 8006194:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2400-1;
 8006196:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <MX_TIM17_Init+0x48>)
 8006198:	f640 125f 	movw	r2, #2399	; 0x95f
 800619c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800619e:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <MX_TIM17_Init+0x48>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2000-1;
 80061a4:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <MX_TIM17_Init+0x48>)
 80061a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80061aa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061ac:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <MX_TIM17_Init+0x48>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80061b2:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <MX_TIM17_Init+0x48>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <MX_TIM17_Init+0x48>)
 80061ba:	2280      	movs	r2, #128	; 0x80
 80061bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80061be:	4805      	ldr	r0, [pc, #20]	; (80061d4 <MX_TIM17_Init+0x48>)
 80061c0:	f007 fa53 	bl	800d66a <HAL_TIM_Base_Init>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80061ca:	f7fe fe9f 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80061ce:	bf00      	nop
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	2400117c 	.word	0x2400117c
 80061d8:	40014800 	.word	0x40014800

080061dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b090      	sub	sp, #64	; 0x40
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4aa8      	ldr	r2, [pc, #672]	; (800648c <HAL_TIM_Base_MspInit+0x2b0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d10f      	bne.n	800620e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80061ee:	4ba8      	ldr	r3, [pc, #672]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80061f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061f4:	4aa6      	ldr	r2, [pc, #664]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80061fe:	4ba4      	ldr	r3, [pc, #656]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800620c:	e13a      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006216:	d10f      	bne.n	8006238 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006218:	4b9d      	ldr	r3, [pc, #628]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800621a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800621e:	4a9c      	ldr	r2, [pc, #624]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006228:	4b99      	ldr	r3, [pc, #612]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800622a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	63bb      	str	r3, [r7, #56]	; 0x38
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006236:	e125      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a95      	ldr	r2, [pc, #596]	; (8006494 <HAL_TIM_Base_MspInit+0x2b8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d10f      	bne.n	8006262 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006242:	4b93      	ldr	r3, [pc, #588]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006248:	4a91      	ldr	r2, [pc, #580]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800624a:	f043 0302 	orr.w	r3, r3, #2
 800624e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006252:	4b8f      	ldr	r3, [pc, #572]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006260:	e110      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a8c      	ldr	r2, [pc, #560]	; (8006498 <HAL_TIM_Base_MspInit+0x2bc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d10f      	bne.n	800628c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800626c:	4b88      	ldr	r3, [pc, #544]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800626e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006272:	4a87      	ldr	r2, [pc, #540]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006274:	f043 0304 	orr.w	r3, r3, #4
 8006278:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800627c:	4b84      	ldr	r3, [pc, #528]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800627e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	633b      	str	r3, [r7, #48]	; 0x30
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800628a:	e0fb      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a82      	ldr	r2, [pc, #520]	; (800649c <HAL_TIM_Base_MspInit+0x2c0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d117      	bne.n	80062c6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006296:	4b7e      	ldr	r3, [pc, #504]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800629c:	4a7c      	ldr	r2, [pc, #496]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800629e:	f043 0308 	orr.w	r3, r3, #8
 80062a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062a6:	4b7a      	ldr	r3, [pc, #488]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80062a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80062b4:	2200      	movs	r2, #0
 80062b6:	2100      	movs	r1, #0
 80062b8:	2032      	movs	r0, #50	; 0x32
 80062ba:	f001 f838 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80062be:	2032      	movs	r0, #50	; 0x32
 80062c0:	f001 f84f 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 80062c4:	e0de      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a75      	ldr	r2, [pc, #468]	; (80064a0 <HAL_TIM_Base_MspInit+0x2c4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d117      	bne.n	8006300 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80062d0:	4b6f      	ldr	r3, [pc, #444]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80062d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062d6:	4a6e      	ldr	r2, [pc, #440]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80062d8:	f043 0310 	orr.w	r3, r3, #16
 80062dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062e0:	4b6b      	ldr	r3, [pc, #428]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80062e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80062ee:	2200      	movs	r2, #0
 80062f0:	2100      	movs	r1, #0
 80062f2:	2036      	movs	r0, #54	; 0x36
 80062f4:	f001 f81b 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80062f8:	2036      	movs	r0, #54	; 0x36
 80062fa:	f001 f832 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 80062fe:	e0c1      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a67      	ldr	r2, [pc, #412]	; (80064a4 <HAL_TIM_Base_MspInit+0x2c8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d117      	bne.n	800633a <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800630a:	4b61      	ldr	r3, [pc, #388]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800630c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006310:	4a5f      	ldr	r2, [pc, #380]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006312:	f043 0320 	orr.w	r3, r3, #32
 8006316:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800631a:	4b5d      	ldr	r3, [pc, #372]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800631c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006328:	2200      	movs	r2, #0
 800632a:	2100      	movs	r1, #0
 800632c:	2037      	movs	r0, #55	; 0x37
 800632e:	f000 fffe 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006332:	2037      	movs	r0, #55	; 0x37
 8006334:	f001 f815 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 8006338:	e0a4      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a5a      	ldr	r2, [pc, #360]	; (80064a8 <HAL_TIM_Base_MspInit+0x2cc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d117      	bne.n	8006374 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8006344:	4b52      	ldr	r3, [pc, #328]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800634a:	4a51      	ldr	r2, [pc, #324]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800634c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006350:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006354:	4b4e      	ldr	r3, [pc, #312]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8006362:	2200      	movs	r2, #0
 8006364:	2100      	movs	r1, #0
 8006366:	202b      	movs	r0, #43	; 0x2b
 8006368:	f000 ffe1 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800636c:	202b      	movs	r0, #43	; 0x2b
 800636e:	f000 fff8 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 8006372:	e087      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a4c      	ldr	r2, [pc, #304]	; (80064ac <HAL_TIM_Base_MspInit+0x2d0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d117      	bne.n	80063ae <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800637e:	4b44      	ldr	r3, [pc, #272]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006384:	4a42      	ldr	r2, [pc, #264]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800638e:	4b40      	ldr	r3, [pc, #256]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	61fb      	str	r3, [r7, #28]
 800639a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800639c:	2200      	movs	r2, #0
 800639e:	2100      	movs	r1, #0
 80063a0:	202c      	movs	r0, #44	; 0x2c
 80063a2:	f000 ffc4 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80063a6:	202c      	movs	r0, #44	; 0x2c
 80063a8:	f000 ffdb 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 80063ac:	e06a      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a3f      	ldr	r2, [pc, #252]	; (80064b0 <HAL_TIM_Base_MspInit+0x2d4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d117      	bne.n	80063e8 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80063b8:	4b35      	ldr	r3, [pc, #212]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80063ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063be:	4a34      	ldr	r2, [pc, #208]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80063c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80063c8:	4b31      	ldr	r3, [pc, #196]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80063ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d2:	61bb      	str	r3, [r7, #24]
 80063d4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80063d6:	2200      	movs	r2, #0
 80063d8:	2100      	movs	r1, #0
 80063da:	202d      	movs	r0, #45	; 0x2d
 80063dc:	f000 ffa7 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80063e0:	202d      	movs	r0, #45	; 0x2d
 80063e2:	f000 ffbe 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 80063e6:	e04d      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a31      	ldr	r2, [pc, #196]	; (80064b4 <HAL_TIM_Base_MspInit+0x2d8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d10f      	bne.n	8006412 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80063f2:	4b27      	ldr	r3, [pc, #156]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80063f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063f8:	4a25      	ldr	r2, [pc, #148]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 80063fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006402:	4b23      	ldr	r3, [pc, #140]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	697b      	ldr	r3, [r7, #20]
}
 8006410:	e038      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a28      	ldr	r2, [pc, #160]	; (80064b8 <HAL_TIM_Base_MspInit+0x2dc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d117      	bne.n	800644c <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800641c:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800641e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006422:	4a1b      	ldr	r2, [pc, #108]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006428:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800642c:	4b18      	ldr	r3, [pc, #96]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800642e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800643a:	2200      	movs	r2, #0
 800643c:	2100      	movs	r1, #0
 800643e:	2075      	movs	r0, #117	; 0x75
 8006440:	f000 ff75 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8006444:	2075      	movs	r0, #117	; 0x75
 8006446:	f000 ff8c 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 800644a:	e01b      	b.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1a      	ldr	r2, [pc, #104]	; (80064bc <HAL_TIM_Base_MspInit+0x2e0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d116      	bne.n	8006484 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006456:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800645c:	4a0c      	ldr	r2, [pc, #48]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 800645e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006462:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <HAL_TIM_Base_MspInit+0x2b4>)
 8006468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800646c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8006474:	2200      	movs	r2, #0
 8006476:	2100      	movs	r1, #0
 8006478:	2076      	movs	r0, #118	; 0x76
 800647a:	f000 ff58 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800647e:	2076      	movs	r0, #118	; 0x76
 8006480:	f000 ff6f 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 8006484:	bf00      	nop
 8006486:	3740      	adds	r7, #64	; 0x40
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40010000 	.word	0x40010000
 8006490:	58024400 	.word	0x58024400
 8006494:	40000400 	.word	0x40000400
 8006498:	40000800 	.word	0x40000800
 800649c:	40000c00 	.word	0x40000c00
 80064a0:	40001000 	.word	0x40001000
 80064a4:	40001400 	.word	0x40001400
 80064a8:	40001800 	.word	0x40001800
 80064ac:	40001c00 	.word	0x40001c00
 80064b0:	40002000 	.word	0x40002000
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40014400 	.word	0x40014400
 80064bc:	40014800 	.word	0x40014800

080064c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	; 0x28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c8:	f107 0314 	add.w	r3, r7, #20
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	605a      	str	r2, [r3, #4]
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	60da      	str	r2, [r3, #12]
 80064d6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <HAL_TIM_Encoder_MspInit+0xc8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d14d      	bne.n	800657e <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80064e2:	4b2a      	ldr	r3, [pc, #168]	; (800658c <HAL_TIM_Encoder_MspInit+0xcc>)
 80064e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064e8:	4a28      	ldr	r2, [pc, #160]	; (800658c <HAL_TIM_Encoder_MspInit+0xcc>)
 80064ea:	f043 0302 	orr.w	r3, r3, #2
 80064ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80064f2:	4b26      	ldr	r3, [pc, #152]	; (800658c <HAL_TIM_Encoder_MspInit+0xcc>)
 80064f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006500:	4b22      	ldr	r3, [pc, #136]	; (800658c <HAL_TIM_Encoder_MspInit+0xcc>)
 8006502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006506:	4a21      	ldr	r2, [pc, #132]	; (800658c <HAL_TIM_Encoder_MspInit+0xcc>)
 8006508:	f043 0304 	orr.w	r3, r3, #4
 800650c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006510:	4b1e      	ldr	r3, [pc, #120]	; (800658c <HAL_TIM_Encoder_MspInit+0xcc>)
 8006512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800651e:	23c0      	movs	r3, #192	; 0xc0
 8006520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006522:	2302      	movs	r3, #2
 8006524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800652a:	2300      	movs	r3, #0
 800652c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800652e:	2303      	movs	r3, #3
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006532:	f107 0314 	add.w	r3, r7, #20
 8006536:	4619      	mov	r1, r3
 8006538:	4815      	ldr	r0, [pc, #84]	; (8006590 <HAL_TIM_Encoder_MspInit+0xd0>)
 800653a:	f003 ff73 	bl	800a424 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800653e:	2200      	movs	r2, #0
 8006540:	2100      	movs	r1, #0
 8006542:	202b      	movs	r0, #43	; 0x2b
 8006544:	f000 fef3 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8006548:	202b      	movs	r0, #43	; 0x2b
 800654a:	f000 ff0a 	bl	8007362 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800654e:	2200      	movs	r2, #0
 8006550:	2100      	movs	r1, #0
 8006552:	202c      	movs	r0, #44	; 0x2c
 8006554:	f000 feeb 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006558:	202c      	movs	r0, #44	; 0x2c
 800655a:	f000 ff02 	bl	8007362 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800655e:	2200      	movs	r2, #0
 8006560:	2100      	movs	r1, #0
 8006562:	202d      	movs	r0, #45	; 0x2d
 8006564:	f000 fee3 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006568:	202d      	movs	r0, #45	; 0x2d
 800656a:	f000 fefa 	bl	8007362 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800656e:	2200      	movs	r2, #0
 8006570:	2100      	movs	r1, #0
 8006572:	202e      	movs	r0, #46	; 0x2e
 8006574:	f000 fedb 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8006578:	202e      	movs	r0, #46	; 0x2e
 800657a:	f000 fef2 	bl	8007362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800657e:	bf00      	nop
 8006580:	3728      	adds	r7, #40	; 0x28
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40010400 	.word	0x40010400
 800658c:	58024400 	.word	0x58024400
 8006590:	58020800 	.word	0x58020800

08006594 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08c      	sub	sp, #48	; 0x30
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800659c:	f107 031c 	add.w	r3, r7, #28
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	605a      	str	r2, [r3, #4]
 80065a6:	609a      	str	r2, [r3, #8]
 80065a8:	60da      	str	r2, [r3, #12]
 80065aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a5e      	ldr	r2, [pc, #376]	; (800672c <HAL_TIM_MspPostInit+0x198>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d120      	bne.n	80065f8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80065b6:	4b5e      	ldr	r3, [pc, #376]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 80065b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065bc:	4a5c      	ldr	r2, [pc, #368]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 80065be:	f043 0310 	orr.w	r3, r3, #16
 80065c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065c6:	4b5a      	ldr	r3, [pc, #360]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 80065c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80065d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065da:	2302      	movs	r3, #2
 80065dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065e2:	2300      	movs	r3, #0
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80065e6:	2301      	movs	r3, #1
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80065ea:	f107 031c 	add.w	r3, r7, #28
 80065ee:	4619      	mov	r1, r3
 80065f0:	4850      	ldr	r0, [pc, #320]	; (8006734 <HAL_TIM_MspPostInit+0x1a0>)
 80065f2:	f003 ff17 	bl	800a424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80065f6:	e094      	b.n	8006722 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d120      	bne.n	8006644 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006602:	4b4b      	ldr	r3, [pc, #300]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 8006604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006608:	4a49      	ldr	r2, [pc, #292]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 800660a:	f043 0302 	orr.w	r3, r3, #2
 800660e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006612:	4b47      	ldr	r3, [pc, #284]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 8006614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8006620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006626:	2302      	movs	r3, #2
 8006628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662a:	2300      	movs	r3, #0
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662e:	2300      	movs	r3, #0
 8006630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006632:	2301      	movs	r3, #1
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8006636:	f107 031c 	add.w	r3, r7, #28
 800663a:	4619      	mov	r1, r3
 800663c:	483e      	ldr	r0, [pc, #248]	; (8006738 <HAL_TIM_MspPostInit+0x1a4>)
 800663e:	f003 fef1 	bl	800a424 <HAL_GPIO_Init>
}
 8006642:	e06e      	b.n	8006722 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a3c      	ldr	r2, [pc, #240]	; (800673c <HAL_TIM_MspPostInit+0x1a8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d11f      	bne.n	800668e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800664e:	4b38      	ldr	r3, [pc, #224]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 8006650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006654:	4a36      	ldr	r2, [pc, #216]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800665e:	4b34      	ldr	r3, [pc, #208]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 8006660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 800666c:	2340      	movs	r3, #64	; 0x40
 800666e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006670:	2302      	movs	r3, #2
 8006672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006674:	2300      	movs	r3, #0
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006678:	2300      	movs	r3, #0
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800667c:	2302      	movs	r3, #2
 800667e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8006680:	f107 031c 	add.w	r3, r7, #28
 8006684:	4619      	mov	r1, r3
 8006686:	482e      	ldr	r0, [pc, #184]	; (8006740 <HAL_TIM_MspPostInit+0x1ac>)
 8006688:	f003 fecc 	bl	800a424 <HAL_GPIO_Init>
}
 800668c:	e049      	b.n	8006722 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a2c      	ldr	r2, [pc, #176]	; (8006744 <HAL_TIM_MspPostInit+0x1b0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d120      	bne.n	80066da <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 800669a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800669e:	4a24      	ldr	r2, [pc, #144]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 80066a0:	f043 0302 	orr.w	r3, r3, #2
 80066a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066a8:	4b21      	ldr	r3, [pc, #132]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 80066aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80066b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066bc:	2302      	movs	r3, #2
 80066be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066c4:	2300      	movs	r3, #0
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80066c8:	2302      	movs	r3, #2
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80066cc:	f107 031c 	add.w	r3, r7, #28
 80066d0:	4619      	mov	r1, r3
 80066d2:	4819      	ldr	r0, [pc, #100]	; (8006738 <HAL_TIM_MspPostInit+0x1a4>)
 80066d4:	f003 fea6 	bl	800a424 <HAL_GPIO_Init>
}
 80066d8:	e023      	b.n	8006722 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1a      	ldr	r2, [pc, #104]	; (8006748 <HAL_TIM_MspPostInit+0x1b4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d11e      	bne.n	8006722 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80066e4:	4b12      	ldr	r3, [pc, #72]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 80066e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ea:	4a11      	ldr	r2, [pc, #68]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 80066ec:	f043 0310 	orr.w	r3, r3, #16
 80066f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066f4:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <HAL_TIM_MspPostInit+0x19c>)
 80066f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066fa:	f003 0310 	and.w	r3, r3, #16
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8006702:	2340      	movs	r3, #64	; 0x40
 8006704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006706:	2302      	movs	r3, #2
 8006708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670a:	2300      	movs	r3, #0
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800670e:	2300      	movs	r3, #0
 8006710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006712:	2304      	movs	r3, #4
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8006716:	f107 031c 	add.w	r3, r7, #28
 800671a:	4619      	mov	r1, r3
 800671c:	4805      	ldr	r0, [pc, #20]	; (8006734 <HAL_TIM_MspPostInit+0x1a0>)
 800671e:	f003 fe81 	bl	800a424 <HAL_GPIO_Init>
}
 8006722:	bf00      	nop
 8006724:	3730      	adds	r7, #48	; 0x30
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40010000 	.word	0x40010000
 8006730:	58024400 	.word	0x58024400
 8006734:	58021000 	.word	0x58021000
 8006738:	58020400 	.word	0x58020400
 800673c:	40000400 	.word	0x40000400
 8006740:	58020000 	.word	0x58020000
 8006744:	40000800 	.word	0x40000800
 8006748:	40014000 	.word	0x40014000

0800674c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006750:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <MX_UART4_Init+0x9c>)
 8006752:	4a26      	ldr	r2, [pc, #152]	; (80067ec <MX_UART4_Init+0xa0>)
 8006754:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8006756:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <MX_UART4_Init+0x9c>)
 8006758:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <MX_UART4_Init+0xa4>)
 800675a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800675c:	4b22      	ldr	r3, [pc, #136]	; (80067e8 <MX_UART4_Init+0x9c>)
 800675e:	2200      	movs	r2, #0
 8006760:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006762:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <MX_UART4_Init+0x9c>)
 8006764:	2200      	movs	r2, #0
 8006766:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006768:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <MX_UART4_Init+0x9c>)
 800676a:	2200      	movs	r2, #0
 800676c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800676e:	4b1e      	ldr	r3, [pc, #120]	; (80067e8 <MX_UART4_Init+0x9c>)
 8006770:	220c      	movs	r2, #12
 8006772:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006774:	4b1c      	ldr	r3, [pc, #112]	; (80067e8 <MX_UART4_Init+0x9c>)
 8006776:	2200      	movs	r2, #0
 8006778:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800677a:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <MX_UART4_Init+0x9c>)
 800677c:	2200      	movs	r2, #0
 800677e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006780:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <MX_UART4_Init+0x9c>)
 8006782:	2200      	movs	r2, #0
 8006784:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006786:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <MX_UART4_Init+0x9c>)
 8006788:	2200      	movs	r2, #0
 800678a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800678c:	4b16      	ldr	r3, [pc, #88]	; (80067e8 <MX_UART4_Init+0x9c>)
 800678e:	2208      	movs	r2, #8
 8006790:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <MX_UART4_Init+0x9c>)
 8006794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800679a:	4813      	ldr	r0, [pc, #76]	; (80067e8 <MX_UART4_Init+0x9c>)
 800679c:	f008 fbb8 	bl	800ef10 <HAL_UART_Init>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80067a6:	f7fe fbb1 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80067aa:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80067ae:	480e      	ldr	r0, [pc, #56]	; (80067e8 <MX_UART4_Init+0x9c>)
 80067b0:	f00a fc51 	bl	8011056 <HAL_UARTEx_SetTxFifoThreshold>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <MX_UART4_Init+0x72>
  {
    Error_Handler();
 80067ba:	f7fe fba7 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80067be:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80067c2:	4809      	ldr	r0, [pc, #36]	; (80067e8 <MX_UART4_Init+0x9c>)
 80067c4:	f00a fc85 	bl	80110d2 <HAL_UARTEx_SetRxFifoThreshold>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 80067ce:	f7fe fb9d 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80067d2:	4805      	ldr	r0, [pc, #20]	; (80067e8 <MX_UART4_Init+0x9c>)
 80067d4:	f00a fbcb 	bl	8010f6e <HAL_UARTEx_EnableFifoMode>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 80067de:	f7fe fb95 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80067e2:	bf00      	nop
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	240011c8 	.word	0x240011c8
 80067ec:	40004c00 	.word	0x40004c00
 80067f0:	001e8480 	.word	0x001e8480

080067f4 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80067f8:	4b23      	ldr	r3, [pc, #140]	; (8006888 <MX_UART7_Init+0x94>)
 80067fa:	4a24      	ldr	r2, [pc, #144]	; (800688c <MX_UART7_Init+0x98>)
 80067fc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80067fe:	4b22      	ldr	r3, [pc, #136]	; (8006888 <MX_UART7_Init+0x94>)
 8006800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006804:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006806:	4b20      	ldr	r3, [pc, #128]	; (8006888 <MX_UART7_Init+0x94>)
 8006808:	2200      	movs	r2, #0
 800680a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800680c:	4b1e      	ldr	r3, [pc, #120]	; (8006888 <MX_UART7_Init+0x94>)
 800680e:	2200      	movs	r2, #0
 8006810:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8006812:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <MX_UART7_Init+0x94>)
 8006814:	2200      	movs	r2, #0
 8006816:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006818:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <MX_UART7_Init+0x94>)
 800681a:	220c      	movs	r2, #12
 800681c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800681e:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <MX_UART7_Init+0x94>)
 8006820:	2200      	movs	r2, #0
 8006822:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006824:	4b18      	ldr	r3, [pc, #96]	; (8006888 <MX_UART7_Init+0x94>)
 8006826:	2200      	movs	r2, #0
 8006828:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800682a:	4b17      	ldr	r3, [pc, #92]	; (8006888 <MX_UART7_Init+0x94>)
 800682c:	2200      	movs	r2, #0
 800682e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006830:	4b15      	ldr	r3, [pc, #84]	; (8006888 <MX_UART7_Init+0x94>)
 8006832:	2200      	movs	r2, #0
 8006834:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <MX_UART7_Init+0x94>)
 8006838:	2200      	movs	r2, #0
 800683a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800683c:	4812      	ldr	r0, [pc, #72]	; (8006888 <MX_UART7_Init+0x94>)
 800683e:	f008 fb67 	bl	800ef10 <HAL_UART_Init>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8006848:	f7fe fb60 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800684c:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8006850:	480d      	ldr	r0, [pc, #52]	; (8006888 <MX_UART7_Init+0x94>)
 8006852:	f00a fc00 	bl	8011056 <HAL_UARTEx_SetTxFifoThreshold>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 800685c:	f7fe fb56 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8006860:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8006864:	4808      	ldr	r0, [pc, #32]	; (8006888 <MX_UART7_Init+0x94>)
 8006866:	f00a fc34 	bl	80110d2 <HAL_UARTEx_SetRxFifoThreshold>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8006870:	f7fe fb4c 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8006874:	4804      	ldr	r0, [pc, #16]	; (8006888 <MX_UART7_Init+0x94>)
 8006876:	f00a fb7a 	bl	8010f6e <HAL_UARTEx_EnableFifoMode>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8006880:	f7fe fb44 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8006884:	bf00      	nop
 8006886:	bd80      	pop	{r7, pc}
 8006888:	24001258 	.word	0x24001258
 800688c:	40007800 	.word	0x40007800

08006890 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006894:	4b22      	ldr	r3, [pc, #136]	; (8006920 <MX_USART2_UART_Init+0x90>)
 8006896:	4a23      	ldr	r2, [pc, #140]	; (8006924 <MX_USART2_UART_Init+0x94>)
 8006898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800689a:	4b21      	ldr	r3, [pc, #132]	; (8006920 <MX_USART2_UART_Init+0x90>)
 800689c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80068a2:	4b1f      	ldr	r3, [pc, #124]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068a8:	4b1d      	ldr	r3, [pc, #116]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068ae:	4b1c      	ldr	r3, [pc, #112]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80068b4:	4b1a      	ldr	r3, [pc, #104]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068b6:	220c      	movs	r2, #12
 80068b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068ba:	4b19      	ldr	r3, [pc, #100]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068bc:	2200      	movs	r2, #0
 80068be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068c0:	4b17      	ldr	r3, [pc, #92]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068c6:	4b16      	ldr	r3, [pc, #88]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80068cc:	4b14      	ldr	r3, [pc, #80]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068d2:	4b13      	ldr	r3, [pc, #76]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80068d8:	4811      	ldr	r0, [pc, #68]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068da:	f008 fb19 	bl	800ef10 <HAL_UART_Init>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80068e4:	f7fe fb12 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068e8:	2100      	movs	r1, #0
 80068ea:	480d      	ldr	r0, [pc, #52]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068ec:	f00a fbb3 	bl	8011056 <HAL_UARTEx_SetTxFifoThreshold>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80068f6:	f7fe fb09 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068fa:	2100      	movs	r1, #0
 80068fc:	4808      	ldr	r0, [pc, #32]	; (8006920 <MX_USART2_UART_Init+0x90>)
 80068fe:	f00a fbe8 	bl	80110d2 <HAL_UARTEx_SetRxFifoThreshold>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006908:	f7fe fb00 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800690c:	4804      	ldr	r0, [pc, #16]	; (8006920 <MX_USART2_UART_Init+0x90>)
 800690e:	f00a fb69 	bl	8010fe4 <HAL_UARTEx_DisableFifoMode>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006918:	f7fe faf8 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800691c:	bf00      	nop
 800691e:	bd80      	pop	{r7, pc}
 8006920:	240012e8 	.word	0x240012e8
 8006924:	40004400 	.word	0x40004400

08006928 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800692c:	4b22      	ldr	r3, [pc, #136]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 800692e:	4a23      	ldr	r2, [pc, #140]	; (80069bc <MX_USART3_UART_Init+0x94>)
 8006930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006932:	4b21      	ldr	r3, [pc, #132]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 8006934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800693a:	4b1f      	ldr	r3, [pc, #124]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 800693c:	2200      	movs	r2, #0
 800693e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006940:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 8006942:	2200      	movs	r2, #0
 8006944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006946:	4b1c      	ldr	r3, [pc, #112]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 8006948:	2200      	movs	r2, #0
 800694a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800694c:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 800694e:	220c      	movs	r2, #12
 8006950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006952:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 8006954:	2200      	movs	r2, #0
 8006956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006958:	4b17      	ldr	r3, [pc, #92]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 800695a:	2200      	movs	r2, #0
 800695c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800695e:	4b16      	ldr	r3, [pc, #88]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 8006960:	2200      	movs	r2, #0
 8006962:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006964:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 8006966:	2200      	movs	r2, #0
 8006968:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800696a:	4b13      	ldr	r3, [pc, #76]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 800696c:	2200      	movs	r2, #0
 800696e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006970:	4811      	ldr	r0, [pc, #68]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 8006972:	f008 facd 	bl	800ef10 <HAL_UART_Init>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800697c:	f7fe fac6 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006980:	2100      	movs	r1, #0
 8006982:	480d      	ldr	r0, [pc, #52]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 8006984:	f00a fb67 	bl	8011056 <HAL_UARTEx_SetTxFifoThreshold>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800698e:	f7fe fabd 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006992:	2100      	movs	r1, #0
 8006994:	4808      	ldr	r0, [pc, #32]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 8006996:	f00a fb9c 	bl	80110d2 <HAL_UARTEx_SetRxFifoThreshold>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80069a0:	f7fe fab4 	bl	8004f0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80069a4:	4804      	ldr	r0, [pc, #16]	; (80069b8 <MX_USART3_UART_Init+0x90>)
 80069a6:	f00a fb1d 	bl	8010fe4 <HAL_UARTEx_DisableFifoMode>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80069b0:	f7fe faac 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80069b4:	bf00      	nop
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	24001378 	.word	0x24001378
 80069bc:	40004800 	.word	0x40004800

080069c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b0be      	sub	sp, #248	; 0xf8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	605a      	str	r2, [r3, #4]
 80069d2:	609a      	str	r2, [r3, #8]
 80069d4:	60da      	str	r2, [r3, #12]
 80069d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80069d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069dc:	22bc      	movs	r2, #188	; 0xbc
 80069de:	2100      	movs	r1, #0
 80069e0:	4618      	mov	r0, r3
 80069e2:	f00b ff65 	bl	80128b0 <memset>
  if(uartHandle->Instance==UART4)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4aa1      	ldr	r2, [pc, #644]	; (8006c70 <HAL_UART_MspInit+0x2b0>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	f040 80b7 	bne.w	8006b60 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80069f2:	2302      	movs	r3, #2
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80069f6:	2300      	movs	r3, #0
 80069f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a00:	4618      	mov	r0, r3
 8006a02:	f004 fee7 	bl	800b7d4 <HAL_RCCEx_PeriphCLKConfig>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006a0c:	f7fe fa7e 	bl	8004f0c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006a10:	4b98      	ldr	r3, [pc, #608]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a16:	4a97      	ldr	r2, [pc, #604]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a20:	4b94      	ldr	r3, [pc, #592]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a2e:	4b91      	ldr	r3, [pc, #580]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a34:	4a8f      	ldr	r2, [pc, #572]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006a36:	f043 0308 	orr.w	r3, r3, #8
 8006a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a3e:	4b8d      	ldr	r3, [pc, #564]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	623b      	str	r3, [r7, #32]
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a52:	2302      	movs	r3, #2
 8006a54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006a64:	2308      	movs	r3, #8
 8006a66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a6a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006a6e:	4619      	mov	r1, r3
 8006a70:	4881      	ldr	r0, [pc, #516]	; (8006c78 <HAL_UART_MspInit+0x2b8>)
 8006a72:	f003 fcd7 	bl	800a424 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8006a76:	4b81      	ldr	r3, [pc, #516]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006a78:	4a81      	ldr	r2, [pc, #516]	; (8006c80 <HAL_UART_MspInit+0x2c0>)
 8006a7a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8006a7c:	4b7f      	ldr	r3, [pc, #508]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006a7e:	223f      	movs	r2, #63	; 0x3f
 8006a80:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a82:	4b7e      	ldr	r3, [pc, #504]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a88:	4b7c      	ldr	r3, [pc, #496]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a8e:	4b7b      	ldr	r3, [pc, #492]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a94:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a96:	4b79      	ldr	r3, [pc, #484]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a9c:	4b77      	ldr	r3, [pc, #476]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8006aa2:	4b76      	ldr	r3, [pc, #472]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006aa8:	4b74      	ldr	r3, [pc, #464]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006aae:	4b73      	ldr	r3, [pc, #460]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006ab4:	4b71      	ldr	r3, [pc, #452]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006aba:	4b70      	ldr	r3, [pc, #448]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006ac0:	4b6e      	ldr	r3, [pc, #440]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006ac6:	486d      	ldr	r0, [pc, #436]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006ac8:	f000 fe70 	bl	80077ac <HAL_DMA_Init>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8006ad2:	f7fe fa1b 	bl	8004f0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a68      	ldr	r2, [pc, #416]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006ada:	67da      	str	r2, [r3, #124]	; 0x7c
 8006adc:	4a67      	ldr	r2, [pc, #412]	; (8006c7c <HAL_UART_MspInit+0x2bc>)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006ae2:	4b68      	ldr	r3, [pc, #416]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006ae4:	4a68      	ldr	r2, [pc, #416]	; (8006c88 <HAL_UART_MspInit+0x2c8>)
 8006ae6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006ae8:	4b66      	ldr	r3, [pc, #408]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006aea:	2240      	movs	r2, #64	; 0x40
 8006aec:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006aee:	4b65      	ldr	r3, [pc, #404]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006af0:	2240      	movs	r2, #64	; 0x40
 8006af2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006af4:	4b63      	ldr	r3, [pc, #396]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006afa:	4b62      	ldr	r3, [pc, #392]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b00:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b02:	4b60      	ldr	r3, [pc, #384]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b08:	4b5e      	ldr	r3, [pc, #376]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006b0e:	4b5d      	ldr	r3, [pc, #372]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006b14:	4b5b      	ldr	r3, [pc, #364]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006b1a:	4b5a      	ldr	r3, [pc, #360]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b20:	4b58      	ldr	r3, [pc, #352]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b22:	2203      	movs	r2, #3
 8006b24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006b26:	4b57      	ldr	r3, [pc, #348]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006b2c:	4b55      	ldr	r3, [pc, #340]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006b32:	4854      	ldr	r0, [pc, #336]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b34:	f000 fe3a 	bl	80077ac <HAL_DMA_Init>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8006b3e:	f7fe f9e5 	bl	8004f0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a4f      	ldr	r2, [pc, #316]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b46:	679a      	str	r2, [r3, #120]	; 0x78
 8006b48:	4a4e      	ldr	r2, [pc, #312]	; (8006c84 <HAL_UART_MspInit+0x2c4>)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	2034      	movs	r0, #52	; 0x34
 8006b54:	f000 fbeb 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006b58:	2034      	movs	r0, #52	; 0x34
 8006b5a:	f000 fc02 	bl	8007362 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006b5e:	e20d      	b.n	8006f7c <HAL_UART_MspInit+0x5bc>
  else if(uartHandle->Instance==UART7)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a49      	ldr	r2, [pc, #292]	; (8006c8c <HAL_UART_MspInit+0x2cc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	f040 8098 	bne.w	8006c9c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006b70:	2300      	movs	r3, #0
 8006b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f004 fe2a 	bl	800b7d4 <HAL_RCCEx_PeriphCLKConfig>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8006b86:	f7fe f9c1 	bl	8004f0c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006b8a:	4b3a      	ldr	r3, [pc, #232]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b90:	4a38      	ldr	r2, [pc, #224]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b9a:	4b36      	ldr	r3, [pc, #216]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ba0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ba8:	4b32      	ldr	r3, [pc, #200]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bae:	4a31      	ldr	r2, [pc, #196]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006bb0:	f043 0310 	orr.w	r3, r3, #16
 8006bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006bb8:	4b2e      	ldr	r3, [pc, #184]	; (8006c74 <HAL_UART_MspInit+0x2b4>)
 8006bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bbe:	f003 0310 	and.w	r3, r3, #16
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006bc6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bce:	2302      	movs	r3, #2
 8006bd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006be0:	2307      	movs	r3, #7
 8006be2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006be6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006bea:	4619      	mov	r1, r3
 8006bec:	4828      	ldr	r0, [pc, #160]	; (8006c90 <HAL_UART_MspInit+0x2d0>)
 8006bee:	f003 fc19 	bl	800a424 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8006bf2:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006bf4:	4a28      	ldr	r2, [pc, #160]	; (8006c98 <HAL_UART_MspInit+0x2d8>)
 8006bf6:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006bf8:	4b26      	ldr	r3, [pc, #152]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006bfa:	2250      	movs	r2, #80	; 0x50
 8006bfc:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006bfe:	4b25      	ldr	r3, [pc, #148]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c00:	2240      	movs	r2, #64	; 0x40
 8006c02:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c04:	4b23      	ldr	r3, [pc, #140]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c0a:	4b22      	ldr	r3, [pc, #136]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c10:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c12:	4b20      	ldr	r3, [pc, #128]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c18:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8006c1e:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006c24:	4b1b      	ldr	r3, [pc, #108]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006c2a:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006c30:	4b18      	ldr	r3, [pc, #96]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c32:	2203      	movs	r2, #3
 8006c34:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006c36:	4b17      	ldr	r3, [pc, #92]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006c3c:	4b15      	ldr	r3, [pc, #84]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8006c42:	4814      	ldr	r0, [pc, #80]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c44:	f000 fdb2 	bl	80077ac <HAL_DMA_Init>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8006c4e:	f7fe f95d 	bl	8004f0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a0f      	ldr	r2, [pc, #60]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c56:	679a      	str	r2, [r3, #120]	; 0x78
 8006c58:	4a0e      	ldr	r2, [pc, #56]	; (8006c94 <HAL_UART_MspInit+0x2d4>)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	2052      	movs	r0, #82	; 0x52
 8006c64:	f000 fb63 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006c68:	2052      	movs	r0, #82	; 0x52
 8006c6a:	f000 fb7a 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 8006c6e:	e185      	b.n	8006f7c <HAL_UART_MspInit+0x5bc>
 8006c70:	40004c00 	.word	0x40004c00
 8006c74:	58024400 	.word	0x58024400
 8006c78:	58020c00 	.word	0x58020c00
 8006c7c:	24001408 	.word	0x24001408
 8006c80:	40020058 	.word	0x40020058
 8006c84:	24001480 	.word	0x24001480
 8006c88:	40020070 	.word	0x40020070
 8006c8c:	40007800 	.word	0x40007800
 8006c90:	58021000 	.word	0x58021000
 8006c94:	240014f8 	.word	0x240014f8
 8006c98:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a54      	ldr	r2, [pc, #336]	; (8006df4 <HAL_UART_MspInit+0x434>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	f040 80b4 	bne.w	8006e10 <HAL_UART_MspInit+0x450>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006cac:	2300      	movs	r3, #0
 8006cae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f004 fd8c 	bl	800b7d4 <HAL_RCCEx_PeriphCLKConfig>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8006cc2:	f7fe f923 	bl	8004f0c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006cc6:	4b4c      	ldr	r3, [pc, #304]	; (8006df8 <HAL_UART_MspInit+0x438>)
 8006cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ccc:	4a4a      	ldr	r2, [pc, #296]	; (8006df8 <HAL_UART_MspInit+0x438>)
 8006cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006cd6:	4b48      	ldr	r3, [pc, #288]	; (8006df8 <HAL_UART_MspInit+0x438>)
 8006cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ce4:	4b44      	ldr	r3, [pc, #272]	; (8006df8 <HAL_UART_MspInit+0x438>)
 8006ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cea:	4a43      	ldr	r2, [pc, #268]	; (8006df8 <HAL_UART_MspInit+0x438>)
 8006cec:	f043 0308 	orr.w	r3, r3, #8
 8006cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006cf4:	4b40      	ldr	r3, [pc, #256]	; (8006df8 <HAL_UART_MspInit+0x438>)
 8006cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006d02:	2360      	movs	r3, #96	; 0x60
 8006d04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d14:	2300      	movs	r3, #0
 8006d16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d1a:	2307      	movs	r3, #7
 8006d1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006d24:	4619      	mov	r1, r3
 8006d26:	4835      	ldr	r0, [pc, #212]	; (8006dfc <HAL_UART_MspInit+0x43c>)
 8006d28:	f003 fb7c 	bl	800a424 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006d2c:	4b34      	ldr	r3, [pc, #208]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d2e:	4a35      	ldr	r2, [pc, #212]	; (8006e04 <HAL_UART_MspInit+0x444>)
 8006d30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006d32:	4b33      	ldr	r3, [pc, #204]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d34:	222b      	movs	r2, #43	; 0x2b
 8006d36:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d38:	4b31      	ldr	r3, [pc, #196]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d3e:	4b30      	ldr	r3, [pc, #192]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d44:	4b2e      	ldr	r3, [pc, #184]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d4c:	4b2c      	ldr	r3, [pc, #176]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d52:	4b2b      	ldr	r3, [pc, #172]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006d58:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006d5e:	4b28      	ldr	r3, [pc, #160]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d64:	4b26      	ldr	r3, [pc, #152]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006d6a:	4825      	ldr	r0, [pc, #148]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d6c:	f000 fd1e 	bl	80077ac <HAL_DMA_Init>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8006d76:	f7fe f8c9 	bl	8004f0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d7e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006d80:	4a1f      	ldr	r2, [pc, #124]	; (8006e00 <HAL_UART_MspInit+0x440>)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006d86:	4b20      	ldr	r3, [pc, #128]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006d88:	4a20      	ldr	r2, [pc, #128]	; (8006e0c <HAL_UART_MspInit+0x44c>)
 8006d8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006d8c:	4b1e      	ldr	r3, [pc, #120]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006d8e:	222c      	movs	r2, #44	; 0x2c
 8006d90:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d92:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006d94:	2240      	movs	r2, #64	; 0x40
 8006d96:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d98:	4b1b      	ldr	r3, [pc, #108]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d9e:	4b1a      	ldr	r3, [pc, #104]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006da4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006da6:	4b18      	ldr	r3, [pc, #96]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dac:	4b16      	ldr	r3, [pc, #88]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006db2:	4b15      	ldr	r3, [pc, #84]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006db8:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006dc4:	4810      	ldr	r0, [pc, #64]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006dc6:	f000 fcf1 	bl	80077ac <HAL_DMA_Init>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <HAL_UART_MspInit+0x414>
      Error_Handler();
 8006dd0:	f7fe f89c 	bl	8004f0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a0c      	ldr	r2, [pc, #48]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006dd8:	679a      	str	r2, [r3, #120]	; 0x78
 8006dda:	4a0b      	ldr	r2, [pc, #44]	; (8006e08 <HAL_UART_MspInit+0x448>)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006de0:	2200      	movs	r2, #0
 8006de2:	2100      	movs	r1, #0
 8006de4:	2026      	movs	r0, #38	; 0x26
 8006de6:	f000 faa2 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006dea:	2026      	movs	r0, #38	; 0x26
 8006dec:	f000 fab9 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 8006df0:	e0c4      	b.n	8006f7c <HAL_UART_MspInit+0x5bc>
 8006df2:	bf00      	nop
 8006df4:	40004400 	.word	0x40004400
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	58020c00 	.word	0x58020c00
 8006e00:	24001570 	.word	0x24001570
 8006e04:	40020088 	.word	0x40020088
 8006e08:	240015e8 	.word	0x240015e8
 8006e0c:	400200a0 	.word	0x400200a0
  else if(uartHandle->Instance==USART3)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a5b      	ldr	r2, [pc, #364]	; (8006f84 <HAL_UART_MspInit+0x5c4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	f040 80b0 	bne.w	8006f7c <HAL_UART_MspInit+0x5bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006e20:	2300      	movs	r3, #0
 8006e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f004 fcd2 	bl	800b7d4 <HAL_RCCEx_PeriphCLKConfig>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <HAL_UART_MspInit+0x47a>
      Error_Handler();
 8006e36:	f7fe f869 	bl	8004f0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e3a:	4b53      	ldr	r3, [pc, #332]	; (8006f88 <HAL_UART_MspInit+0x5c8>)
 8006e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e40:	4a51      	ldr	r2, [pc, #324]	; (8006f88 <HAL_UART_MspInit+0x5c8>)
 8006e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006e4a:	4b4f      	ldr	r3, [pc, #316]	; (8006f88 <HAL_UART_MspInit+0x5c8>)
 8006e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e58:	4b4b      	ldr	r3, [pc, #300]	; (8006f88 <HAL_UART_MspInit+0x5c8>)
 8006e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e5e:	4a4a      	ldr	r2, [pc, #296]	; (8006f88 <HAL_UART_MspInit+0x5c8>)
 8006e60:	f043 0308 	orr.w	r3, r3, #8
 8006e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e68:	4b47      	ldr	r3, [pc, #284]	; (8006f88 <HAL_UART_MspInit+0x5c8>)
 8006e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	60bb      	str	r3, [r7, #8]
 8006e74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006e76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e84:	2300      	movs	r3, #0
 8006e86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e90:	2307      	movs	r3, #7
 8006e92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e96:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	483b      	ldr	r0, [pc, #236]	; (8006f8c <HAL_UART_MspInit+0x5cc>)
 8006e9e:	f003 fac1 	bl	800a424 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006ea2:	4b3b      	ldr	r3, [pc, #236]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006ea4:	4a3b      	ldr	r2, [pc, #236]	; (8006f94 <HAL_UART_MspInit+0x5d4>)
 8006ea6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006ea8:	4b39      	ldr	r3, [pc, #228]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006eaa:	222d      	movs	r2, #45	; 0x2d
 8006eac:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006eae:	4b38      	ldr	r3, [pc, #224]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006eb4:	4b36      	ldr	r3, [pc, #216]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006eba:	4b35      	ldr	r3, [pc, #212]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006ebc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ec0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ec2:	4b33      	ldr	r3, [pc, #204]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ec8:	4b31      	ldr	r3, [pc, #196]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006ece:	4b30      	ldr	r3, [pc, #192]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006ed4:	4b2e      	ldr	r3, [pc, #184]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006ed6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006eda:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006edc:	4b2c      	ldr	r3, [pc, #176]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006ee2:	482b      	ldr	r0, [pc, #172]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006ee4:	f000 fc62 	bl	80077ac <HAL_DMA_Init>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <HAL_UART_MspInit+0x532>
      Error_Handler();
 8006eee:	f7fe f80d 	bl	8004f0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a26      	ldr	r2, [pc, #152]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006ef6:	67da      	str	r2, [r3, #124]	; 0x7c
 8006ef8:	4a25      	ldr	r2, [pc, #148]	; (8006f90 <HAL_UART_MspInit+0x5d0>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8006efe:	4b26      	ldr	r3, [pc, #152]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f00:	4a26      	ldr	r2, [pc, #152]	; (8006f9c <HAL_UART_MspInit+0x5dc>)
 8006f02:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006f04:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f06:	222e      	movs	r2, #46	; 0x2e
 8006f08:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f0a:	4b23      	ldr	r3, [pc, #140]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f0c:	2240      	movs	r2, #64	; 0x40
 8006f0e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f10:	4b21      	ldr	r3, [pc, #132]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f16:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f1e:	4b1e      	ldr	r3, [pc, #120]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f24:	4b1c      	ldr	r3, [pc, #112]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006f2a:	4b1b      	ldr	r3, [pc, #108]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f30:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f36:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006f38:	4b17      	ldr	r3, [pc, #92]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006f3e:	4b16      	ldr	r3, [pc, #88]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f40:	2203      	movs	r2, #3
 8006f42:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006f44:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006f4a:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006f50:	4811      	ldr	r0, [pc, #68]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f52:	f000 fc2b 	bl	80077ac <HAL_DMA_Init>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_UART_MspInit+0x5a0>
      Error_Handler();
 8006f5c:	f7fd ffd6 	bl	8004f0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a0d      	ldr	r2, [pc, #52]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f64:	679a      	str	r2, [r3, #120]	; 0x78
 8006f66:	4a0c      	ldr	r2, [pc, #48]	; (8006f98 <HAL_UART_MspInit+0x5d8>)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2100      	movs	r1, #0
 8006f70:	2027      	movs	r0, #39	; 0x27
 8006f72:	f000 f9dc 	bl	800732e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006f76:	2027      	movs	r0, #39	; 0x27
 8006f78:	f000 f9f3 	bl	8007362 <HAL_NVIC_EnableIRQ>
}
 8006f7c:	bf00      	nop
 8006f7e:	37f8      	adds	r7, #248	; 0xf8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40004800 	.word	0x40004800
 8006f88:	58024400 	.word	0x58024400
 8006f8c:	58020c00 	.word	0x58020c00
 8006f90:	24001660 	.word	0x24001660
 8006f94:	40020028 	.word	0x40020028
 8006f98:	240016d8 	.word	0x240016d8
 8006f9c:	40020040 	.word	0x40020040

08006fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006fa4:	f7fe fbf0 	bl	8005788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006fa8:	480c      	ldr	r0, [pc, #48]	; (8006fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006faa:	490d      	ldr	r1, [pc, #52]	; (8006fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006fac:	4a0d      	ldr	r2, [pc, #52]	; (8006fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fb0:	e002      	b.n	8006fb8 <LoopCopyDataInit>

08006fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fb6:	3304      	adds	r3, #4

08006fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fbc:	d3f9      	bcc.n	8006fb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fbe:	4a0a      	ldr	r2, [pc, #40]	; (8006fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006fc0:	4c0a      	ldr	r4, [pc, #40]	; (8006fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8006fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fc4:	e001      	b.n	8006fca <LoopFillZerobss>

08006fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fc8:	3204      	adds	r2, #4

08006fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fcc:	d3fb      	bcc.n	8006fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006fce:	f00b fc4b 	bl	8012868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006fd2:	f7fd fc2d 	bl	8004830 <main>
  bx  lr
 8006fd6:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006fd8:	24001d68 	.word	0x24001d68
  ldr r0, =_sdata
 8006fdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006fe0:	24000414 	.word	0x24000414
  ldr r2, =_sidata
 8006fe4:	080171f4 	.word	0x080171f4
  ldr r2, =_sbss
 8006fe8:	24000414 	.word	0x24000414
  ldr r4, =_ebss
 8006fec:	24001764 	.word	0x24001764

08006ff0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ff0:	e7fe      	b.n	8006ff0 <ADC3_IRQHandler>
	...

08006ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ffa:	2003      	movs	r0, #3
 8006ffc:	f000 f98c 	bl	8007318 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007000:	f004 fa12 	bl	800b428 <HAL_RCC_GetSysClockFreq>
 8007004:	4602      	mov	r2, r0
 8007006:	4b15      	ldr	r3, [pc, #84]	; (800705c <HAL_Init+0x68>)
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	4913      	ldr	r1, [pc, #76]	; (8007060 <HAL_Init+0x6c>)
 8007012:	5ccb      	ldrb	r3, [r1, r3]
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
 800701c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800701e:	4b0f      	ldr	r3, [pc, #60]	; (800705c <HAL_Init+0x68>)
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	4a0e      	ldr	r2, [pc, #56]	; (8007060 <HAL_Init+0x6c>)
 8007028:	5cd3      	ldrb	r3, [r2, r3]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	fa22 f303 	lsr.w	r3, r2, r3
 8007034:	4a0b      	ldr	r2, [pc, #44]	; (8007064 <HAL_Init+0x70>)
 8007036:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007038:	4a0b      	ldr	r2, [pc, #44]	; (8007068 <HAL_Init+0x74>)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800703e:	2000      	movs	r0, #0
 8007040:	f000 f814 	bl	800706c <HAL_InitTick>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e002      	b.n	8007054 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800704e:	f7fe f97f 	bl	8005350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	58024400 	.word	0x58024400
 8007060:	080152f4 	.word	0x080152f4
 8007064:	24000238 	.word	0x24000238
 8007068:	24000234 	.word	0x24000234

0800706c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007074:	4b15      	ldr	r3, [pc, #84]	; (80070cc <HAL_InitTick+0x60>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e021      	b.n	80070c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007080:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <HAL_InitTick+0x64>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	4b11      	ldr	r3, [pc, #68]	; (80070cc <HAL_InitTick+0x60>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	4619      	mov	r1, r3
 800708a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800708e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007092:	fbb2 f3f3 	udiv	r3, r2, r3
 8007096:	4618      	mov	r0, r3
 8007098:	f000 f971 	bl	800737e <HAL_SYSTICK_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e00e      	b.n	80070c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b0f      	cmp	r3, #15
 80070aa:	d80a      	bhi.n	80070c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070ac:	2200      	movs	r2, #0
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b4:	f000 f93b 	bl	800732e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070b8:	4a06      	ldr	r2, [pc, #24]	; (80070d4 <HAL_InitTick+0x68>)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	e000      	b.n	80070c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	24000240 	.word	0x24000240
 80070d0:	24000234 	.word	0x24000234
 80070d4:	2400023c 	.word	0x2400023c

080070d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80070dc:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <HAL_IncTick+0x20>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	4b06      	ldr	r3, [pc, #24]	; (80070fc <HAL_IncTick+0x24>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4413      	add	r3, r2
 80070e8:	4a04      	ldr	r2, [pc, #16]	; (80070fc <HAL_IncTick+0x24>)
 80070ea:	6013      	str	r3, [r2, #0]
}
 80070ec:	bf00      	nop
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	24000240 	.word	0x24000240
 80070fc:	24001750 	.word	0x24001750

08007100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  return uwTick;
 8007104:	4b03      	ldr	r3, [pc, #12]	; (8007114 <HAL_GetTick+0x14>)
 8007106:	681b      	ldr	r3, [r3, #0]
}
 8007108:	4618      	mov	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	24001750 	.word	0x24001750

08007118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007120:	f7ff ffee 	bl	8007100 <HAL_GetTick>
 8007124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007130:	d005      	beq.n	800713e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007132:	4b0a      	ldr	r3, [pc, #40]	; (800715c <HAL_Delay+0x44>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800713e:	bf00      	nop
 8007140:	f7ff ffde 	bl	8007100 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	429a      	cmp	r2, r3
 800714e:	d8f7      	bhi.n	8007140 <HAL_Delay+0x28>
  {
  }
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	24000240 	.word	0x24000240

08007160 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007164:	4b03      	ldr	r3, [pc, #12]	; (8007174 <HAL_GetREVID+0x14>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	0c1b      	lsrs	r3, r3, #16
}
 800716a:	4618      	mov	r0, r3
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	5c001000 	.word	0x5c001000

08007178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007188:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <__NVIC_SetPriorityGrouping+0x40>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007194:	4013      	ands	r3, r2
 8007196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <__NVIC_SetPriorityGrouping+0x44>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071a6:	4a04      	ldr	r2, [pc, #16]	; (80071b8 <__NVIC_SetPriorityGrouping+0x40>)
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	60d3      	str	r3, [r2, #12]
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	e000ed00 	.word	0xe000ed00
 80071bc:	05fa0000 	.word	0x05fa0000

080071c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071c4:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <__NVIC_GetPriorityGrouping+0x18>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	f003 0307 	and.w	r3, r3, #7
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	e000ed00 	.word	0xe000ed00

080071dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	db0b      	blt.n	8007206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ee:	88fb      	ldrh	r3, [r7, #6]
 80071f0:	f003 021f 	and.w	r2, r3, #31
 80071f4:	4907      	ldr	r1, [pc, #28]	; (8007214 <__NVIC_EnableIRQ+0x38>)
 80071f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	2001      	movs	r0, #1
 80071fe:	fa00 f202 	lsl.w	r2, r0, r2
 8007202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	e000e100 	.word	0xe000e100

08007218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	6039      	str	r1, [r7, #0]
 8007222:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007228:	2b00      	cmp	r3, #0
 800722a:	db0a      	blt.n	8007242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	b2da      	uxtb	r2, r3
 8007230:	490c      	ldr	r1, [pc, #48]	; (8007264 <__NVIC_SetPriority+0x4c>)
 8007232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007236:	0112      	lsls	r2, r2, #4
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	440b      	add	r3, r1
 800723c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007240:	e00a      	b.n	8007258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	b2da      	uxtb	r2, r3
 8007246:	4908      	ldr	r1, [pc, #32]	; (8007268 <__NVIC_SetPriority+0x50>)
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	3b04      	subs	r3, #4
 8007250:	0112      	lsls	r2, r2, #4
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	440b      	add	r3, r1
 8007256:	761a      	strb	r2, [r3, #24]
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	e000e100 	.word	0xe000e100
 8007268:	e000ed00 	.word	0xe000ed00

0800726c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800726c:	b480      	push	{r7}
 800726e:	b089      	sub	sp, #36	; 0x24
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f1c3 0307 	rsb	r3, r3, #7
 8007286:	2b04      	cmp	r3, #4
 8007288:	bf28      	it	cs
 800728a:	2304      	movcs	r3, #4
 800728c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3304      	adds	r3, #4
 8007292:	2b06      	cmp	r3, #6
 8007294:	d902      	bls.n	800729c <NVIC_EncodePriority+0x30>
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	3b03      	subs	r3, #3
 800729a:	e000      	b.n	800729e <NVIC_EncodePriority+0x32>
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	fa02 f303 	lsl.w	r3, r2, r3
 80072aa:	43da      	mvns	r2, r3
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	401a      	ands	r2, r3
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	fa01 f303 	lsl.w	r3, r1, r3
 80072be:	43d9      	mvns	r1, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072c4:	4313      	orrs	r3, r2
         );
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3724      	adds	r7, #36	; 0x24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
	...

080072d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3b01      	subs	r3, #1
 80072e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072e4:	d301      	bcc.n	80072ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072e6:	2301      	movs	r3, #1
 80072e8:	e00f      	b.n	800730a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072ea:	4a0a      	ldr	r2, [pc, #40]	; (8007314 <SysTick_Config+0x40>)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072f2:	210f      	movs	r1, #15
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f8:	f7ff ff8e 	bl	8007218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <SysTick_Config+0x40>)
 80072fe:	2200      	movs	r2, #0
 8007300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007302:	4b04      	ldr	r3, [pc, #16]	; (8007314 <SysTick_Config+0x40>)
 8007304:	2207      	movs	r2, #7
 8007306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	e000e010 	.word	0xe000e010

08007318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ff29 	bl	8007178 <__NVIC_SetPriorityGrouping>
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b086      	sub	sp, #24
 8007332:	af00      	add	r7, sp, #0
 8007334:	4603      	mov	r3, r0
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	607a      	str	r2, [r7, #4]
 800733a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800733c:	f7ff ff40 	bl	80071c0 <__NVIC_GetPriorityGrouping>
 8007340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	6978      	ldr	r0, [r7, #20]
 8007348:	f7ff ff90 	bl	800726c <NVIC_EncodePriority>
 800734c:	4602      	mov	r2, r0
 800734e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007352:	4611      	mov	r1, r2
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff ff5f 	bl	8007218 <__NVIC_SetPriority>
}
 800735a:	bf00      	nop
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	4603      	mov	r3, r0
 800736a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800736c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff ff33 	bl	80071dc <__NVIC_EnableIRQ>
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff ffa4 	bl	80072d4 <SysTick_Config>
 800738c:	4603      	mov	r3, r0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800739a:	f000 f802 	bl	80073a2 <HAL_SYSTICK_Callback>
}
 800739e:	bf00      	nop
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80073a2:	b480      	push	{r7}
 80073a4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80073a6:	bf00      	nop
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e054      	b.n	800746c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	7f5b      	ldrb	r3, [r3, #29]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d105      	bne.n	80073d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fb f86e 	bl	80024b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	791b      	ldrb	r3, [r3, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10c      	bne.n	8007400 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a22      	ldr	r2, [pc, #136]	; (8007474 <HAL_CRC_Init+0xc4>)
 80073ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0218 	bic.w	r2, r2, #24
 80073fc:	609a      	str	r2, [r3, #8]
 80073fe:	e00c      	b.n	800741a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6899      	ldr	r1, [r3, #8]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	461a      	mov	r2, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f948 	bl	80076a0 <HAL_CRCEx_Polynomial_Set>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e028      	b.n	800746c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	795b      	ldrb	r3, [r3, #5]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d105      	bne.n	800742e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800742a:	611a      	str	r2, [r3, #16]
 800742c:	e004      	b.n	8007438 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	6912      	ldr	r2, [r2, #16]
 8007436:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695a      	ldr	r2, [r3, #20]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699a      	ldr	r2, [r3, #24]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	04c11db7 	.word	0x04c11db7

08007478 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8007484:	2300      	movs	r3, #0
 8007486:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2202      	movs	r2, #2
 800748c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0201 	orr.w	r2, r2, #1
 800749c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d006      	beq.n	80074b4 <HAL_CRC_Calculate+0x3c>
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d829      	bhi.n	80074fe <HAL_CRC_Calculate+0x86>
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d019      	beq.n	80074e2 <HAL_CRC_Calculate+0x6a>
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d01e      	beq.n	80074f0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80074b2:	e024      	b.n	80074fe <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	e00a      	b.n	80074d0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	441a      	add	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	3301      	adds	r3, #1
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d3f0      	bcc.n	80074ba <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	613b      	str	r3, [r7, #16]
      break;
 80074e0:	e00e      	b.n	8007500 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f812 	bl	8007510 <CRC_Handle_8>
 80074ec:	6138      	str	r0, [r7, #16]
      break;
 80074ee:	e007      	b.n	8007500 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f899 	bl	800762c <CRC_Handle_16>
 80074fa:	6138      	str	r0, [r7, #16]
      break;
 80074fc:	e000      	b.n	8007500 <HAL_CRC_Calculate+0x88>
      break;
 80074fe:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8007506:	693b      	ldr	r3, [r7, #16]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8007510:	b480      	push	{r7}
 8007512:	b089      	sub	sp, #36	; 0x24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800751c:	2300      	movs	r3, #0
 800751e:	61fb      	str	r3, [r7, #28]
 8007520:	e023      	b.n	800756a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	3301      	adds	r3, #1
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	440b      	add	r3, r1
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800753c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	3302      	adds	r3, #2
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	440b      	add	r3, r1
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800754c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	3303      	adds	r3, #3
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	440b      	add	r3, r1
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007560:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	3301      	adds	r3, #1
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	089b      	lsrs	r3, r3, #2
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	429a      	cmp	r2, r3
 8007572:	d3d6      	bcc.n	8007522 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d04d      	beq.n	800761a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f003 0303 	and.w	r3, r3, #3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d107      	bne.n	8007598 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	4413      	add	r3, r2
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d116      	bne.n	80075d0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	4413      	add	r3, r2
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	b21a      	sxth	r2, r3
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	3301      	adds	r3, #1
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	440b      	add	r3, r1
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	b21b      	sxth	r3, r3
 80075be:	4313      	orrs	r3, r2
 80075c0:	b21b      	sxth	r3, r3
 80075c2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	8b7a      	ldrh	r2, [r7, #26]
 80075ce:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d11f      	bne.n	800761a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	4413      	add	r3, r2
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	b21a      	sxth	r2, r3
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	3301      	adds	r3, #1
 80075ee:	68b9      	ldr	r1, [r7, #8]
 80075f0:	440b      	add	r3, r1
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	b21b      	sxth	r3, r3
 80075f6:	4313      	orrs	r3, r2
 80075f8:	b21b      	sxth	r3, r3
 80075fa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	8b7a      	ldrh	r2, [r7, #26]
 8007606:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	3302      	adds	r3, #2
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	4413      	add	r3, r2
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	6812      	ldr	r2, [r2, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3724      	adds	r7, #36	; 0x24
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
 800763c:	e013      	b.n	8007666 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	4413      	add	r3, r2
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	041a      	lsls	r2, r3, #16
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	3302      	adds	r3, #2
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	440b      	add	r3, r1
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	4619      	mov	r1, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	3301      	adds	r3, #1
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	085b      	lsrs	r3, r3, #1
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	429a      	cmp	r2, r3
 800766e:	d3e6      	bcc.n	800763e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d009      	beq.n	800768e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	4413      	add	r3, r2
 8007688:	881a      	ldrh	r2, [r3, #0]
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
}
 8007694:	4618      	mov	r0, r3
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80076b0:	231f      	movs	r3, #31
 80076b2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80076b4:	bf00      	nop
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1e5a      	subs	r2, r3, #1
 80076ba:	613a      	str	r2, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d009      	beq.n	80076d4 <HAL_CRCEx_Polynomial_Set+0x34>
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f0      	beq.n	80076b6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b18      	cmp	r3, #24
 80076d8:	d846      	bhi.n	8007768 <HAL_CRCEx_Polynomial_Set+0xc8>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	0800776f 	.word	0x0800776f
 80076e4:	08007769 	.word	0x08007769
 80076e8:	08007769 	.word	0x08007769
 80076ec:	08007769 	.word	0x08007769
 80076f0:	08007769 	.word	0x08007769
 80076f4:	08007769 	.word	0x08007769
 80076f8:	08007769 	.word	0x08007769
 80076fc:	08007769 	.word	0x08007769
 8007700:	0800775d 	.word	0x0800775d
 8007704:	08007769 	.word	0x08007769
 8007708:	08007769 	.word	0x08007769
 800770c:	08007769 	.word	0x08007769
 8007710:	08007769 	.word	0x08007769
 8007714:	08007769 	.word	0x08007769
 8007718:	08007769 	.word	0x08007769
 800771c:	08007769 	.word	0x08007769
 8007720:	08007751 	.word	0x08007751
 8007724:	08007769 	.word	0x08007769
 8007728:	08007769 	.word	0x08007769
 800772c:	08007769 	.word	0x08007769
 8007730:	08007769 	.word	0x08007769
 8007734:	08007769 	.word	0x08007769
 8007738:	08007769 	.word	0x08007769
 800773c:	08007769 	.word	0x08007769
 8007740:	08007745 	.word	0x08007745
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b06      	cmp	r3, #6
 8007748:	d913      	bls.n	8007772 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800774e:	e010      	b.n	8007772 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b07      	cmp	r3, #7
 8007754:	d90f      	bls.n	8007776 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800775a:	e00c      	b.n	8007776 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b0f      	cmp	r3, #15
 8007760:	d90b      	bls.n	800777a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007766:	e008      	b.n	800777a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	75fb      	strb	r3, [r7, #23]
      break;
 800776c:	e006      	b.n	800777c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800776e:	bf00      	nop
 8007770:	e004      	b.n	800777c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007772:	bf00      	nop
 8007774:	e002      	b.n	800777c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007776:	bf00      	nop
 8007778:	e000      	b.n	800777c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800777a:	bf00      	nop
  }
  if (status == HAL_OK)
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10d      	bne.n	800779e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f023 0118 	bic.w	r1, r3, #24
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	430a      	orrs	r2, r1
 800779c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	371c      	adds	r7, #28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80077b4:	f7ff fca4 	bl	8007100 <HAL_GetTick>
 80077b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e316      	b.n	8007df2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a66      	ldr	r2, [pc, #408]	; (8007964 <HAL_DMA_Init+0x1b8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d04a      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a65      	ldr	r2, [pc, #404]	; (8007968 <HAL_DMA_Init+0x1bc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d045      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a63      	ldr	r2, [pc, #396]	; (800796c <HAL_DMA_Init+0x1c0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d040      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a62      	ldr	r2, [pc, #392]	; (8007970 <HAL_DMA_Init+0x1c4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d03b      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a60      	ldr	r2, [pc, #384]	; (8007974 <HAL_DMA_Init+0x1c8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d036      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a5f      	ldr	r2, [pc, #380]	; (8007978 <HAL_DMA_Init+0x1cc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d031      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a5d      	ldr	r2, [pc, #372]	; (800797c <HAL_DMA_Init+0x1d0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d02c      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a5c      	ldr	r2, [pc, #368]	; (8007980 <HAL_DMA_Init+0x1d4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d027      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a5a      	ldr	r2, [pc, #360]	; (8007984 <HAL_DMA_Init+0x1d8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d022      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a59      	ldr	r2, [pc, #356]	; (8007988 <HAL_DMA_Init+0x1dc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d01d      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a57      	ldr	r2, [pc, #348]	; (800798c <HAL_DMA_Init+0x1e0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d018      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a56      	ldr	r2, [pc, #344]	; (8007990 <HAL_DMA_Init+0x1e4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d013      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a54      	ldr	r2, [pc, #336]	; (8007994 <HAL_DMA_Init+0x1e8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00e      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a53      	ldr	r2, [pc, #332]	; (8007998 <HAL_DMA_Init+0x1ec>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d009      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a51      	ldr	r2, [pc, #324]	; (800799c <HAL_DMA_Init+0x1f0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <HAL_DMA_Init+0xb8>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a50      	ldr	r2, [pc, #320]	; (80079a0 <HAL_DMA_Init+0x1f4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d101      	bne.n	8007868 <HAL_DMA_Init+0xbc>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <HAL_DMA_Init+0xbe>
 8007868:	2300      	movs	r3, #0
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 813b 	beq.w	8007ae6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a37      	ldr	r2, [pc, #220]	; (8007964 <HAL_DMA_Init+0x1b8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d04a      	beq.n	8007920 <HAL_DMA_Init+0x174>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a36      	ldr	r2, [pc, #216]	; (8007968 <HAL_DMA_Init+0x1bc>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d045      	beq.n	8007920 <HAL_DMA_Init+0x174>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a34      	ldr	r2, [pc, #208]	; (800796c <HAL_DMA_Init+0x1c0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d040      	beq.n	8007920 <HAL_DMA_Init+0x174>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a33      	ldr	r2, [pc, #204]	; (8007970 <HAL_DMA_Init+0x1c4>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d03b      	beq.n	8007920 <HAL_DMA_Init+0x174>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a31      	ldr	r2, [pc, #196]	; (8007974 <HAL_DMA_Init+0x1c8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d036      	beq.n	8007920 <HAL_DMA_Init+0x174>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a30      	ldr	r2, [pc, #192]	; (8007978 <HAL_DMA_Init+0x1cc>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d031      	beq.n	8007920 <HAL_DMA_Init+0x174>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a2e      	ldr	r2, [pc, #184]	; (800797c <HAL_DMA_Init+0x1d0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d02c      	beq.n	8007920 <HAL_DMA_Init+0x174>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a2d      	ldr	r2, [pc, #180]	; (8007980 <HAL_DMA_Init+0x1d4>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d027      	beq.n	8007920 <HAL_DMA_Init+0x174>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a2b      	ldr	r2, [pc, #172]	; (8007984 <HAL_DMA_Init+0x1d8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d022      	beq.n	8007920 <HAL_DMA_Init+0x174>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a2a      	ldr	r2, [pc, #168]	; (8007988 <HAL_DMA_Init+0x1dc>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d01d      	beq.n	8007920 <HAL_DMA_Init+0x174>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a28      	ldr	r2, [pc, #160]	; (800798c <HAL_DMA_Init+0x1e0>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d018      	beq.n	8007920 <HAL_DMA_Init+0x174>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a27      	ldr	r2, [pc, #156]	; (8007990 <HAL_DMA_Init+0x1e4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d013      	beq.n	8007920 <HAL_DMA_Init+0x174>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a25      	ldr	r2, [pc, #148]	; (8007994 <HAL_DMA_Init+0x1e8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00e      	beq.n	8007920 <HAL_DMA_Init+0x174>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a24      	ldr	r2, [pc, #144]	; (8007998 <HAL_DMA_Init+0x1ec>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d009      	beq.n	8007920 <HAL_DMA_Init+0x174>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a22      	ldr	r2, [pc, #136]	; (800799c <HAL_DMA_Init+0x1f0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d004      	beq.n	8007920 <HAL_DMA_Init+0x174>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a21      	ldr	r2, [pc, #132]	; (80079a0 <HAL_DMA_Init+0x1f4>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d108      	bne.n	8007932 <HAL_DMA_Init+0x186>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0201 	bic.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e007      	b.n	8007942 <HAL_DMA_Init+0x196>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0201 	bic.w	r2, r2, #1
 8007940:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007942:	e02f      	b.n	80079a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007944:	f7ff fbdc 	bl	8007100 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b05      	cmp	r3, #5
 8007950:	d928      	bls.n	80079a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2220      	movs	r2, #32
 8007956:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2203      	movs	r2, #3
 800795c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e246      	b.n	8007df2 <HAL_DMA_Init+0x646>
 8007964:	40020010 	.word	0x40020010
 8007968:	40020028 	.word	0x40020028
 800796c:	40020040 	.word	0x40020040
 8007970:	40020058 	.word	0x40020058
 8007974:	40020070 	.word	0x40020070
 8007978:	40020088 	.word	0x40020088
 800797c:	400200a0 	.word	0x400200a0
 8007980:	400200b8 	.word	0x400200b8
 8007984:	40020410 	.word	0x40020410
 8007988:	40020428 	.word	0x40020428
 800798c:	40020440 	.word	0x40020440
 8007990:	40020458 	.word	0x40020458
 8007994:	40020470 	.word	0x40020470
 8007998:	40020488 	.word	0x40020488
 800799c:	400204a0 	.word	0x400204a0
 80079a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1c8      	bne.n	8007944 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4b83      	ldr	r3, [pc, #524]	; (8007bcc <HAL_DMA_Init+0x420>)
 80079be:	4013      	ands	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80079ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d107      	bne.n	8007a08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	4313      	orrs	r3, r2
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007a08:	4b71      	ldr	r3, [pc, #452]	; (8007bd0 <HAL_DMA_Init+0x424>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	4b71      	ldr	r3, [pc, #452]	; (8007bd4 <HAL_DMA_Init+0x428>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a14:	d328      	bcc.n	8007a68 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b28      	cmp	r3, #40	; 0x28
 8007a1c:	d903      	bls.n	8007a26 <HAL_DMA_Init+0x27a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b2e      	cmp	r3, #46	; 0x2e
 8007a24:	d917      	bls.n	8007a56 <HAL_DMA_Init+0x2aa>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	2b3e      	cmp	r3, #62	; 0x3e
 8007a2c:	d903      	bls.n	8007a36 <HAL_DMA_Init+0x28a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2b42      	cmp	r3, #66	; 0x42
 8007a34:	d90f      	bls.n	8007a56 <HAL_DMA_Init+0x2aa>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b46      	cmp	r3, #70	; 0x46
 8007a3c:	d903      	bls.n	8007a46 <HAL_DMA_Init+0x29a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b48      	cmp	r3, #72	; 0x48
 8007a44:	d907      	bls.n	8007a56 <HAL_DMA_Init+0x2aa>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b4e      	cmp	r3, #78	; 0x4e
 8007a4c:	d905      	bls.n	8007a5a <HAL_DMA_Init+0x2ae>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b52      	cmp	r3, #82	; 0x52
 8007a54:	d801      	bhi.n	8007a5a <HAL_DMA_Init+0x2ae>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e000      	b.n	8007a5c <HAL_DMA_Init+0x2b0>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a66:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f023 0307 	bic.w	r3, r3, #7
 8007a7e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d117      	bne.n	8007ac2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00e      	beq.n	8007ac2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f002 fb33 	bl	800a110 <DMA_CheckFifoParam>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d008      	beq.n	8007ac2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2240      	movs	r2, #64	; 0x40
 8007ab4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e197      	b.n	8007df2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f002 fa6e 	bl	8009fac <DMA_CalcBaseAndBitshift>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad8:	f003 031f 	and.w	r3, r3, #31
 8007adc:	223f      	movs	r2, #63	; 0x3f
 8007ade:	409a      	lsls	r2, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	609a      	str	r2, [r3, #8]
 8007ae4:	e0cd      	b.n	8007c82 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a3b      	ldr	r2, [pc, #236]	; (8007bd8 <HAL_DMA_Init+0x42c>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d022      	beq.n	8007b36 <HAL_DMA_Init+0x38a>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a39      	ldr	r2, [pc, #228]	; (8007bdc <HAL_DMA_Init+0x430>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d01d      	beq.n	8007b36 <HAL_DMA_Init+0x38a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a38      	ldr	r2, [pc, #224]	; (8007be0 <HAL_DMA_Init+0x434>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d018      	beq.n	8007b36 <HAL_DMA_Init+0x38a>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a36      	ldr	r2, [pc, #216]	; (8007be4 <HAL_DMA_Init+0x438>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d013      	beq.n	8007b36 <HAL_DMA_Init+0x38a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a35      	ldr	r2, [pc, #212]	; (8007be8 <HAL_DMA_Init+0x43c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d00e      	beq.n	8007b36 <HAL_DMA_Init+0x38a>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a33      	ldr	r2, [pc, #204]	; (8007bec <HAL_DMA_Init+0x440>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d009      	beq.n	8007b36 <HAL_DMA_Init+0x38a>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a32      	ldr	r2, [pc, #200]	; (8007bf0 <HAL_DMA_Init+0x444>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d004      	beq.n	8007b36 <HAL_DMA_Init+0x38a>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a30      	ldr	r2, [pc, #192]	; (8007bf4 <HAL_DMA_Init+0x448>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d101      	bne.n	8007b3a <HAL_DMA_Init+0x38e>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e000      	b.n	8007b3c <HAL_DMA_Init+0x390>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8097 	beq.w	8007c70 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a24      	ldr	r2, [pc, #144]	; (8007bd8 <HAL_DMA_Init+0x42c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d021      	beq.n	8007b90 <HAL_DMA_Init+0x3e4>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a22      	ldr	r2, [pc, #136]	; (8007bdc <HAL_DMA_Init+0x430>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d01c      	beq.n	8007b90 <HAL_DMA_Init+0x3e4>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a21      	ldr	r2, [pc, #132]	; (8007be0 <HAL_DMA_Init+0x434>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d017      	beq.n	8007b90 <HAL_DMA_Init+0x3e4>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1f      	ldr	r2, [pc, #124]	; (8007be4 <HAL_DMA_Init+0x438>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d012      	beq.n	8007b90 <HAL_DMA_Init+0x3e4>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a1e      	ldr	r2, [pc, #120]	; (8007be8 <HAL_DMA_Init+0x43c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d00d      	beq.n	8007b90 <HAL_DMA_Init+0x3e4>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1c      	ldr	r2, [pc, #112]	; (8007bec <HAL_DMA_Init+0x440>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d008      	beq.n	8007b90 <HAL_DMA_Init+0x3e4>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <HAL_DMA_Init+0x444>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d003      	beq.n	8007b90 <HAL_DMA_Init+0x3e4>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <HAL_DMA_Init+0x448>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2202      	movs	r2, #2
 8007b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <HAL_DMA_Init+0x44c>)
 8007bae:	4013      	ands	r3, r2
 8007bb0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b40      	cmp	r3, #64	; 0x40
 8007bb8:	d020      	beq.n	8007bfc <HAL_DMA_Init+0x450>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	2b80      	cmp	r3, #128	; 0x80
 8007bc0:	d102      	bne.n	8007bc8 <HAL_DMA_Init+0x41c>
 8007bc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bc6:	e01a      	b.n	8007bfe <HAL_DMA_Init+0x452>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e018      	b.n	8007bfe <HAL_DMA_Init+0x452>
 8007bcc:	fe10803f 	.word	0xfe10803f
 8007bd0:	5c001000 	.word	0x5c001000
 8007bd4:	ffff0000 	.word	0xffff0000
 8007bd8:	58025408 	.word	0x58025408
 8007bdc:	5802541c 	.word	0x5802541c
 8007be0:	58025430 	.word	0x58025430
 8007be4:	58025444 	.word	0x58025444
 8007be8:	58025458 	.word	0x58025458
 8007bec:	5802546c 	.word	0x5802546c
 8007bf0:	58025480 	.word	0x58025480
 8007bf4:	58025494 	.word	0x58025494
 8007bf8:	fffe000f 	.word	0xfffe000f
 8007bfc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	68d2      	ldr	r2, [r2, #12]
 8007c02:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007c14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007c1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007c24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007c2c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	4b6e      	ldr	r3, [pc, #440]	; (8007dfc <HAL_DMA_Init+0x650>)
 8007c44:	4413      	add	r3, r2
 8007c46:	4a6e      	ldr	r2, [pc, #440]	; (8007e00 <HAL_DMA_Init+0x654>)
 8007c48:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4c:	091b      	lsrs	r3, r3, #4
 8007c4e:	009a      	lsls	r2, r3, #2
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f002 f9a9 	bl	8009fac <DMA_CalcBaseAndBitshift>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c62:	f003 031f 	and.w	r3, r3, #31
 8007c66:	2201      	movs	r2, #1
 8007c68:	409a      	lsls	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	e008      	b.n	8007c82 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2240      	movs	r2, #64	; 0x40
 8007c74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2203      	movs	r2, #3
 8007c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e0b7      	b.n	8007df2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a5f      	ldr	r2, [pc, #380]	; (8007e04 <HAL_DMA_Init+0x658>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d072      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a5d      	ldr	r2, [pc, #372]	; (8007e08 <HAL_DMA_Init+0x65c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d06d      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a5c      	ldr	r2, [pc, #368]	; (8007e0c <HAL_DMA_Init+0x660>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d068      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a5a      	ldr	r2, [pc, #360]	; (8007e10 <HAL_DMA_Init+0x664>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d063      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a59      	ldr	r2, [pc, #356]	; (8007e14 <HAL_DMA_Init+0x668>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d05e      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a57      	ldr	r2, [pc, #348]	; (8007e18 <HAL_DMA_Init+0x66c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d059      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a56      	ldr	r2, [pc, #344]	; (8007e1c <HAL_DMA_Init+0x670>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d054      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a54      	ldr	r2, [pc, #336]	; (8007e20 <HAL_DMA_Init+0x674>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d04f      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a53      	ldr	r2, [pc, #332]	; (8007e24 <HAL_DMA_Init+0x678>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d04a      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a51      	ldr	r2, [pc, #324]	; (8007e28 <HAL_DMA_Init+0x67c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d045      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a50      	ldr	r2, [pc, #320]	; (8007e2c <HAL_DMA_Init+0x680>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d040      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a4e      	ldr	r2, [pc, #312]	; (8007e30 <HAL_DMA_Init+0x684>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d03b      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a4d      	ldr	r2, [pc, #308]	; (8007e34 <HAL_DMA_Init+0x688>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d036      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a4b      	ldr	r2, [pc, #300]	; (8007e38 <HAL_DMA_Init+0x68c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d031      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a4a      	ldr	r2, [pc, #296]	; (8007e3c <HAL_DMA_Init+0x690>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d02c      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a48      	ldr	r2, [pc, #288]	; (8007e40 <HAL_DMA_Init+0x694>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d027      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a47      	ldr	r2, [pc, #284]	; (8007e44 <HAL_DMA_Init+0x698>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d022      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a45      	ldr	r2, [pc, #276]	; (8007e48 <HAL_DMA_Init+0x69c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d01d      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a44      	ldr	r2, [pc, #272]	; (8007e4c <HAL_DMA_Init+0x6a0>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d018      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a42      	ldr	r2, [pc, #264]	; (8007e50 <HAL_DMA_Init+0x6a4>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d013      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a41      	ldr	r2, [pc, #260]	; (8007e54 <HAL_DMA_Init+0x6a8>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00e      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a3f      	ldr	r2, [pc, #252]	; (8007e58 <HAL_DMA_Init+0x6ac>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d009      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a3e      	ldr	r2, [pc, #248]	; (8007e5c <HAL_DMA_Init+0x6b0>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d004      	beq.n	8007d72 <HAL_DMA_Init+0x5c6>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a3c      	ldr	r2, [pc, #240]	; (8007e60 <HAL_DMA_Init+0x6b4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d101      	bne.n	8007d76 <HAL_DMA_Init+0x5ca>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e000      	b.n	8007d78 <HAL_DMA_Init+0x5cc>
 8007d76:	2300      	movs	r3, #0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d032      	beq.n	8007de2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f002 fa43 	bl	800a208 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b80      	cmp	r3, #128	; 0x80
 8007d88:	d102      	bne.n	8007d90 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d98:	b2d2      	uxtb	r2, r2
 8007d9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007da4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d010      	beq.n	8007dd0 <HAL_DMA_Init+0x624>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d80c      	bhi.n	8007dd0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f002 fac0 	bl	800a33c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007dcc:	605a      	str	r2, [r3, #4]
 8007dce:	e008      	b.n	8007de2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	a7fdabf8 	.word	0xa7fdabf8
 8007e00:	cccccccd 	.word	0xcccccccd
 8007e04:	40020010 	.word	0x40020010
 8007e08:	40020028 	.word	0x40020028
 8007e0c:	40020040 	.word	0x40020040
 8007e10:	40020058 	.word	0x40020058
 8007e14:	40020070 	.word	0x40020070
 8007e18:	40020088 	.word	0x40020088
 8007e1c:	400200a0 	.word	0x400200a0
 8007e20:	400200b8 	.word	0x400200b8
 8007e24:	40020410 	.word	0x40020410
 8007e28:	40020428 	.word	0x40020428
 8007e2c:	40020440 	.word	0x40020440
 8007e30:	40020458 	.word	0x40020458
 8007e34:	40020470 	.word	0x40020470
 8007e38:	40020488 	.word	0x40020488
 8007e3c:	400204a0 	.word	0x400204a0
 8007e40:	400204b8 	.word	0x400204b8
 8007e44:	58025408 	.word	0x58025408
 8007e48:	5802541c 	.word	0x5802541c
 8007e4c:	58025430 	.word	0x58025430
 8007e50:	58025444 	.word	0x58025444
 8007e54:	58025458 	.word	0x58025458
 8007e58:	5802546c 	.word	0x5802546c
 8007e5c:	58025480 	.word	0x58025480
 8007e60:	58025494 	.word	0x58025494

08007e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e226      	b.n	80082ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d101      	bne.n	8007e8e <HAL_DMA_Start_IT+0x2a>
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e21f      	b.n	80082ce <HAL_DMA_Start_IT+0x46a>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	f040 820a 	bne.w	80082b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a68      	ldr	r2, [pc, #416]	; (8008058 <HAL_DMA_Start_IT+0x1f4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d04a      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a66      	ldr	r2, [pc, #408]	; (800805c <HAL_DMA_Start_IT+0x1f8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d045      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a65      	ldr	r2, [pc, #404]	; (8008060 <HAL_DMA_Start_IT+0x1fc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d040      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a63      	ldr	r2, [pc, #396]	; (8008064 <HAL_DMA_Start_IT+0x200>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d03b      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a62      	ldr	r2, [pc, #392]	; (8008068 <HAL_DMA_Start_IT+0x204>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d036      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a60      	ldr	r2, [pc, #384]	; (800806c <HAL_DMA_Start_IT+0x208>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d031      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a5f      	ldr	r2, [pc, #380]	; (8008070 <HAL_DMA_Start_IT+0x20c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d02c      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a5d      	ldr	r2, [pc, #372]	; (8008074 <HAL_DMA_Start_IT+0x210>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d027      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a5c      	ldr	r2, [pc, #368]	; (8008078 <HAL_DMA_Start_IT+0x214>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d022      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a5a      	ldr	r2, [pc, #360]	; (800807c <HAL_DMA_Start_IT+0x218>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d01d      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a59      	ldr	r2, [pc, #356]	; (8008080 <HAL_DMA_Start_IT+0x21c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d018      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a57      	ldr	r2, [pc, #348]	; (8008084 <HAL_DMA_Start_IT+0x220>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d013      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a56      	ldr	r2, [pc, #344]	; (8008088 <HAL_DMA_Start_IT+0x224>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00e      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a54      	ldr	r2, [pc, #336]	; (800808c <HAL_DMA_Start_IT+0x228>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d009      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a53      	ldr	r2, [pc, #332]	; (8008090 <HAL_DMA_Start_IT+0x22c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d004      	beq.n	8007f52 <HAL_DMA_Start_IT+0xee>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a51      	ldr	r2, [pc, #324]	; (8008094 <HAL_DMA_Start_IT+0x230>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d108      	bne.n	8007f64 <HAL_DMA_Start_IT+0x100>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0201 	bic.w	r2, r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	e007      	b.n	8007f74 <HAL_DMA_Start_IT+0x110>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0201 	bic.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f001 fe6a 	bl	8009c54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a34      	ldr	r2, [pc, #208]	; (8008058 <HAL_DMA_Start_IT+0x1f4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d04a      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a33      	ldr	r2, [pc, #204]	; (800805c <HAL_DMA_Start_IT+0x1f8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d045      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a31      	ldr	r2, [pc, #196]	; (8008060 <HAL_DMA_Start_IT+0x1fc>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d040      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a30      	ldr	r2, [pc, #192]	; (8008064 <HAL_DMA_Start_IT+0x200>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d03b      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a2e      	ldr	r2, [pc, #184]	; (8008068 <HAL_DMA_Start_IT+0x204>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d036      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a2d      	ldr	r2, [pc, #180]	; (800806c <HAL_DMA_Start_IT+0x208>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d031      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a2b      	ldr	r2, [pc, #172]	; (8008070 <HAL_DMA_Start_IT+0x20c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d02c      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a2a      	ldr	r2, [pc, #168]	; (8008074 <HAL_DMA_Start_IT+0x210>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d027      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a28      	ldr	r2, [pc, #160]	; (8008078 <HAL_DMA_Start_IT+0x214>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d022      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a27      	ldr	r2, [pc, #156]	; (800807c <HAL_DMA_Start_IT+0x218>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d01d      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a25      	ldr	r2, [pc, #148]	; (8008080 <HAL_DMA_Start_IT+0x21c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d018      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a24      	ldr	r2, [pc, #144]	; (8008084 <HAL_DMA_Start_IT+0x220>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a22      	ldr	r2, [pc, #136]	; (8008088 <HAL_DMA_Start_IT+0x224>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00e      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a21      	ldr	r2, [pc, #132]	; (800808c <HAL_DMA_Start_IT+0x228>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d009      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <HAL_DMA_Start_IT+0x22c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <HAL_DMA_Start_IT+0x1bc>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a1e      	ldr	r2, [pc, #120]	; (8008094 <HAL_DMA_Start_IT+0x230>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d101      	bne.n	8008024 <HAL_DMA_Start_IT+0x1c0>
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <HAL_DMA_Start_IT+0x1c2>
 8008024:	2300      	movs	r3, #0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d036      	beq.n	8008098 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f023 021e 	bic.w	r2, r3, #30
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0216 	orr.w	r2, r2, #22
 800803c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	2b00      	cmp	r3, #0
 8008044:	d03e      	beq.n	80080c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f042 0208 	orr.w	r2, r2, #8
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e035      	b.n	80080c4 <HAL_DMA_Start_IT+0x260>
 8008058:	40020010 	.word	0x40020010
 800805c:	40020028 	.word	0x40020028
 8008060:	40020040 	.word	0x40020040
 8008064:	40020058 	.word	0x40020058
 8008068:	40020070 	.word	0x40020070
 800806c:	40020088 	.word	0x40020088
 8008070:	400200a0 	.word	0x400200a0
 8008074:	400200b8 	.word	0x400200b8
 8008078:	40020410 	.word	0x40020410
 800807c:	40020428 	.word	0x40020428
 8008080:	40020440 	.word	0x40020440
 8008084:	40020458 	.word	0x40020458
 8008088:	40020470 	.word	0x40020470
 800808c:	40020488 	.word	0x40020488
 8008090:	400204a0 	.word	0x400204a0
 8008094:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f023 020e 	bic.w	r2, r3, #14
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 020a 	orr.w	r2, r2, #10
 80080aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d007      	beq.n	80080c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0204 	orr.w	r2, r2, #4
 80080c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a83      	ldr	r2, [pc, #524]	; (80082d8 <HAL_DMA_Start_IT+0x474>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d072      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a82      	ldr	r2, [pc, #520]	; (80082dc <HAL_DMA_Start_IT+0x478>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d06d      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a80      	ldr	r2, [pc, #512]	; (80082e0 <HAL_DMA_Start_IT+0x47c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d068      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a7f      	ldr	r2, [pc, #508]	; (80082e4 <HAL_DMA_Start_IT+0x480>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d063      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a7d      	ldr	r2, [pc, #500]	; (80082e8 <HAL_DMA_Start_IT+0x484>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d05e      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a7c      	ldr	r2, [pc, #496]	; (80082ec <HAL_DMA_Start_IT+0x488>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d059      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a7a      	ldr	r2, [pc, #488]	; (80082f0 <HAL_DMA_Start_IT+0x48c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d054      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a79      	ldr	r2, [pc, #484]	; (80082f4 <HAL_DMA_Start_IT+0x490>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d04f      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a77      	ldr	r2, [pc, #476]	; (80082f8 <HAL_DMA_Start_IT+0x494>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d04a      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a76      	ldr	r2, [pc, #472]	; (80082fc <HAL_DMA_Start_IT+0x498>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d045      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a74      	ldr	r2, [pc, #464]	; (8008300 <HAL_DMA_Start_IT+0x49c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d040      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a73      	ldr	r2, [pc, #460]	; (8008304 <HAL_DMA_Start_IT+0x4a0>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d03b      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a71      	ldr	r2, [pc, #452]	; (8008308 <HAL_DMA_Start_IT+0x4a4>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d036      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a70      	ldr	r2, [pc, #448]	; (800830c <HAL_DMA_Start_IT+0x4a8>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d031      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a6e      	ldr	r2, [pc, #440]	; (8008310 <HAL_DMA_Start_IT+0x4ac>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d02c      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a6d      	ldr	r2, [pc, #436]	; (8008314 <HAL_DMA_Start_IT+0x4b0>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d027      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a6b      	ldr	r2, [pc, #428]	; (8008318 <HAL_DMA_Start_IT+0x4b4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d022      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a6a      	ldr	r2, [pc, #424]	; (800831c <HAL_DMA_Start_IT+0x4b8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d01d      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a68      	ldr	r2, [pc, #416]	; (8008320 <HAL_DMA_Start_IT+0x4bc>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a67      	ldr	r2, [pc, #412]	; (8008324 <HAL_DMA_Start_IT+0x4c0>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a65      	ldr	r2, [pc, #404]	; (8008328 <HAL_DMA_Start_IT+0x4c4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00e      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a64      	ldr	r2, [pc, #400]	; (800832c <HAL_DMA_Start_IT+0x4c8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a62      	ldr	r2, [pc, #392]	; (8008330 <HAL_DMA_Start_IT+0x4cc>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_DMA_Start_IT+0x350>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a61      	ldr	r2, [pc, #388]	; (8008334 <HAL_DMA_Start_IT+0x4d0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d101      	bne.n	80081b8 <HAL_DMA_Start_IT+0x354>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <HAL_DMA_Start_IT+0x356>
 80081b8:	2300      	movs	r3, #0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d01a      	beq.n	80081f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d007      	beq.n	80081dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d007      	beq.n	80081f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a37      	ldr	r2, [pc, #220]	; (80082d8 <HAL_DMA_Start_IT+0x474>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d04a      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a36      	ldr	r2, [pc, #216]	; (80082dc <HAL_DMA_Start_IT+0x478>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d045      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a34      	ldr	r2, [pc, #208]	; (80082e0 <HAL_DMA_Start_IT+0x47c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d040      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a33      	ldr	r2, [pc, #204]	; (80082e4 <HAL_DMA_Start_IT+0x480>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d03b      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a31      	ldr	r2, [pc, #196]	; (80082e8 <HAL_DMA_Start_IT+0x484>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d036      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a30      	ldr	r2, [pc, #192]	; (80082ec <HAL_DMA_Start_IT+0x488>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d031      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a2e      	ldr	r2, [pc, #184]	; (80082f0 <HAL_DMA_Start_IT+0x48c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d02c      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a2d      	ldr	r2, [pc, #180]	; (80082f4 <HAL_DMA_Start_IT+0x490>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d027      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a2b      	ldr	r2, [pc, #172]	; (80082f8 <HAL_DMA_Start_IT+0x494>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d022      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a2a      	ldr	r2, [pc, #168]	; (80082fc <HAL_DMA_Start_IT+0x498>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d01d      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a28      	ldr	r2, [pc, #160]	; (8008300 <HAL_DMA_Start_IT+0x49c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d018      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a27      	ldr	r2, [pc, #156]	; (8008304 <HAL_DMA_Start_IT+0x4a0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d013      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a25      	ldr	r2, [pc, #148]	; (8008308 <HAL_DMA_Start_IT+0x4a4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00e      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a24      	ldr	r2, [pc, #144]	; (800830c <HAL_DMA_Start_IT+0x4a8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d009      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a22      	ldr	r2, [pc, #136]	; (8008310 <HAL_DMA_Start_IT+0x4ac>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d004      	beq.n	8008294 <HAL_DMA_Start_IT+0x430>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a21      	ldr	r2, [pc, #132]	; (8008314 <HAL_DMA_Start_IT+0x4b0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d108      	bne.n	80082a6 <HAL_DMA_Start_IT+0x442>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0201 	orr.w	r2, r2, #1
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	e012      	b.n	80082cc <HAL_DMA_Start_IT+0x468>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f042 0201 	orr.w	r2, r2, #1
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	e009      	b.n	80082cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	40020010 	.word	0x40020010
 80082dc:	40020028 	.word	0x40020028
 80082e0:	40020040 	.word	0x40020040
 80082e4:	40020058 	.word	0x40020058
 80082e8:	40020070 	.word	0x40020070
 80082ec:	40020088 	.word	0x40020088
 80082f0:	400200a0 	.word	0x400200a0
 80082f4:	400200b8 	.word	0x400200b8
 80082f8:	40020410 	.word	0x40020410
 80082fc:	40020428 	.word	0x40020428
 8008300:	40020440 	.word	0x40020440
 8008304:	40020458 	.word	0x40020458
 8008308:	40020470 	.word	0x40020470
 800830c:	40020488 	.word	0x40020488
 8008310:	400204a0 	.word	0x400204a0
 8008314:	400204b8 	.word	0x400204b8
 8008318:	58025408 	.word	0x58025408
 800831c:	5802541c 	.word	0x5802541c
 8008320:	58025430 	.word	0x58025430
 8008324:	58025444 	.word	0x58025444
 8008328:	58025458 	.word	0x58025458
 800832c:	5802546c 	.word	0x5802546c
 8008330:	58025480 	.word	0x58025480
 8008334:	58025494 	.word	0x58025494

08008338 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008340:	f7fe fede 	bl	8007100 <HAL_GetTick>
 8008344:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e2dc      	b.n	800890a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b02      	cmp	r3, #2
 800835a:	d008      	beq.n	800836e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2280      	movs	r2, #128	; 0x80
 8008360:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e2cd      	b.n	800890a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a76      	ldr	r2, [pc, #472]	; (800854c <HAL_DMA_Abort+0x214>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d04a      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a74      	ldr	r2, [pc, #464]	; (8008550 <HAL_DMA_Abort+0x218>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d045      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a73      	ldr	r2, [pc, #460]	; (8008554 <HAL_DMA_Abort+0x21c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d040      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a71      	ldr	r2, [pc, #452]	; (8008558 <HAL_DMA_Abort+0x220>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d03b      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a70      	ldr	r2, [pc, #448]	; (800855c <HAL_DMA_Abort+0x224>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d036      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a6e      	ldr	r2, [pc, #440]	; (8008560 <HAL_DMA_Abort+0x228>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d031      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a6d      	ldr	r2, [pc, #436]	; (8008564 <HAL_DMA_Abort+0x22c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d02c      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a6b      	ldr	r2, [pc, #428]	; (8008568 <HAL_DMA_Abort+0x230>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d027      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a6a      	ldr	r2, [pc, #424]	; (800856c <HAL_DMA_Abort+0x234>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d022      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a68      	ldr	r2, [pc, #416]	; (8008570 <HAL_DMA_Abort+0x238>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01d      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a67      	ldr	r2, [pc, #412]	; (8008574 <HAL_DMA_Abort+0x23c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d018      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a65      	ldr	r2, [pc, #404]	; (8008578 <HAL_DMA_Abort+0x240>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d013      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a64      	ldr	r2, [pc, #400]	; (800857c <HAL_DMA_Abort+0x244>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00e      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a62      	ldr	r2, [pc, #392]	; (8008580 <HAL_DMA_Abort+0x248>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d009      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a61      	ldr	r2, [pc, #388]	; (8008584 <HAL_DMA_Abort+0x24c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d004      	beq.n	800840e <HAL_DMA_Abort+0xd6>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a5f      	ldr	r2, [pc, #380]	; (8008588 <HAL_DMA_Abort+0x250>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d101      	bne.n	8008412 <HAL_DMA_Abort+0xda>
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <HAL_DMA_Abort+0xdc>
 8008412:	2300      	movs	r3, #0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d013      	beq.n	8008440 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 021e 	bic.w	r2, r2, #30
 8008426:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695a      	ldr	r2, [r3, #20]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008436:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	e00a      	b.n	8008456 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f022 020e 	bic.w	r2, r2, #14
 800844e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a3c      	ldr	r2, [pc, #240]	; (800854c <HAL_DMA_Abort+0x214>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d072      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a3a      	ldr	r2, [pc, #232]	; (8008550 <HAL_DMA_Abort+0x218>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d06d      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a39      	ldr	r2, [pc, #228]	; (8008554 <HAL_DMA_Abort+0x21c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d068      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a37      	ldr	r2, [pc, #220]	; (8008558 <HAL_DMA_Abort+0x220>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d063      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a36      	ldr	r2, [pc, #216]	; (800855c <HAL_DMA_Abort+0x224>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d05e      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a34      	ldr	r2, [pc, #208]	; (8008560 <HAL_DMA_Abort+0x228>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d059      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a33      	ldr	r2, [pc, #204]	; (8008564 <HAL_DMA_Abort+0x22c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d054      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a31      	ldr	r2, [pc, #196]	; (8008568 <HAL_DMA_Abort+0x230>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d04f      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a30      	ldr	r2, [pc, #192]	; (800856c <HAL_DMA_Abort+0x234>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d04a      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a2e      	ldr	r2, [pc, #184]	; (8008570 <HAL_DMA_Abort+0x238>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d045      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a2d      	ldr	r2, [pc, #180]	; (8008574 <HAL_DMA_Abort+0x23c>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d040      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a2b      	ldr	r2, [pc, #172]	; (8008578 <HAL_DMA_Abort+0x240>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d03b      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a2a      	ldr	r2, [pc, #168]	; (800857c <HAL_DMA_Abort+0x244>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d036      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a28      	ldr	r2, [pc, #160]	; (8008580 <HAL_DMA_Abort+0x248>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d031      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a27      	ldr	r2, [pc, #156]	; (8008584 <HAL_DMA_Abort+0x24c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d02c      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a25      	ldr	r2, [pc, #148]	; (8008588 <HAL_DMA_Abort+0x250>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d027      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a24      	ldr	r2, [pc, #144]	; (800858c <HAL_DMA_Abort+0x254>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d022      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a22      	ldr	r2, [pc, #136]	; (8008590 <HAL_DMA_Abort+0x258>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d01d      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a21      	ldr	r2, [pc, #132]	; (8008594 <HAL_DMA_Abort+0x25c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d018      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a1f      	ldr	r2, [pc, #124]	; (8008598 <HAL_DMA_Abort+0x260>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d013      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1e      	ldr	r2, [pc, #120]	; (800859c <HAL_DMA_Abort+0x264>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00e      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1c      	ldr	r2, [pc, #112]	; (80085a0 <HAL_DMA_Abort+0x268>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d009      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1b      	ldr	r2, [pc, #108]	; (80085a4 <HAL_DMA_Abort+0x26c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d004      	beq.n	8008546 <HAL_DMA_Abort+0x20e>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a19      	ldr	r2, [pc, #100]	; (80085a8 <HAL_DMA_Abort+0x270>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d132      	bne.n	80085ac <HAL_DMA_Abort+0x274>
 8008546:	2301      	movs	r3, #1
 8008548:	e031      	b.n	80085ae <HAL_DMA_Abort+0x276>
 800854a:	bf00      	nop
 800854c:	40020010 	.word	0x40020010
 8008550:	40020028 	.word	0x40020028
 8008554:	40020040 	.word	0x40020040
 8008558:	40020058 	.word	0x40020058
 800855c:	40020070 	.word	0x40020070
 8008560:	40020088 	.word	0x40020088
 8008564:	400200a0 	.word	0x400200a0
 8008568:	400200b8 	.word	0x400200b8
 800856c:	40020410 	.word	0x40020410
 8008570:	40020428 	.word	0x40020428
 8008574:	40020440 	.word	0x40020440
 8008578:	40020458 	.word	0x40020458
 800857c:	40020470 	.word	0x40020470
 8008580:	40020488 	.word	0x40020488
 8008584:	400204a0 	.word	0x400204a0
 8008588:	400204b8 	.word	0x400204b8
 800858c:	58025408 	.word	0x58025408
 8008590:	5802541c 	.word	0x5802541c
 8008594:	58025430 	.word	0x58025430
 8008598:	58025444 	.word	0x58025444
 800859c:	58025458 	.word	0x58025458
 80085a0:	5802546c 	.word	0x5802546c
 80085a4:	58025480 	.word	0x58025480
 80085a8:	58025494 	.word	0x58025494
 80085ac:	2300      	movs	r3, #0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d007      	beq.n	80085c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a6d      	ldr	r2, [pc, #436]	; (800877c <HAL_DMA_Abort+0x444>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d04a      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a6b      	ldr	r2, [pc, #428]	; (8008780 <HAL_DMA_Abort+0x448>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d045      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a6a      	ldr	r2, [pc, #424]	; (8008784 <HAL_DMA_Abort+0x44c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d040      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a68      	ldr	r2, [pc, #416]	; (8008788 <HAL_DMA_Abort+0x450>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d03b      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a67      	ldr	r2, [pc, #412]	; (800878c <HAL_DMA_Abort+0x454>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d036      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a65      	ldr	r2, [pc, #404]	; (8008790 <HAL_DMA_Abort+0x458>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d031      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a64      	ldr	r2, [pc, #400]	; (8008794 <HAL_DMA_Abort+0x45c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d02c      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a62      	ldr	r2, [pc, #392]	; (8008798 <HAL_DMA_Abort+0x460>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d027      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a61      	ldr	r2, [pc, #388]	; (800879c <HAL_DMA_Abort+0x464>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d022      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a5f      	ldr	r2, [pc, #380]	; (80087a0 <HAL_DMA_Abort+0x468>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d01d      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a5e      	ldr	r2, [pc, #376]	; (80087a4 <HAL_DMA_Abort+0x46c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d018      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a5c      	ldr	r2, [pc, #368]	; (80087a8 <HAL_DMA_Abort+0x470>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a5b      	ldr	r2, [pc, #364]	; (80087ac <HAL_DMA_Abort+0x474>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00e      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a59      	ldr	r2, [pc, #356]	; (80087b0 <HAL_DMA_Abort+0x478>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a58      	ldr	r2, [pc, #352]	; (80087b4 <HAL_DMA_Abort+0x47c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <HAL_DMA_Abort+0x32a>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a56      	ldr	r2, [pc, #344]	; (80087b8 <HAL_DMA_Abort+0x480>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d108      	bne.n	8008674 <HAL_DMA_Abort+0x33c>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0201 	bic.w	r2, r2, #1
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	e007      	b.n	8008684 <HAL_DMA_Abort+0x34c>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0201 	bic.w	r2, r2, #1
 8008682:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008684:	e013      	b.n	80086ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008686:	f7fe fd3b 	bl	8007100 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b05      	cmp	r3, #5
 8008692:	d90c      	bls.n	80086ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2220      	movs	r2, #32
 8008698:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2203      	movs	r2, #3
 800869e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e12d      	b.n	800890a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e5      	bne.n	8008686 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a2f      	ldr	r2, [pc, #188]	; (800877c <HAL_DMA_Abort+0x444>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d04a      	beq.n	800875a <HAL_DMA_Abort+0x422>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a2d      	ldr	r2, [pc, #180]	; (8008780 <HAL_DMA_Abort+0x448>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d045      	beq.n	800875a <HAL_DMA_Abort+0x422>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a2c      	ldr	r2, [pc, #176]	; (8008784 <HAL_DMA_Abort+0x44c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d040      	beq.n	800875a <HAL_DMA_Abort+0x422>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a2a      	ldr	r2, [pc, #168]	; (8008788 <HAL_DMA_Abort+0x450>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d03b      	beq.n	800875a <HAL_DMA_Abort+0x422>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a29      	ldr	r2, [pc, #164]	; (800878c <HAL_DMA_Abort+0x454>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d036      	beq.n	800875a <HAL_DMA_Abort+0x422>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a27      	ldr	r2, [pc, #156]	; (8008790 <HAL_DMA_Abort+0x458>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d031      	beq.n	800875a <HAL_DMA_Abort+0x422>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a26      	ldr	r2, [pc, #152]	; (8008794 <HAL_DMA_Abort+0x45c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d02c      	beq.n	800875a <HAL_DMA_Abort+0x422>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a24      	ldr	r2, [pc, #144]	; (8008798 <HAL_DMA_Abort+0x460>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d027      	beq.n	800875a <HAL_DMA_Abort+0x422>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a23      	ldr	r2, [pc, #140]	; (800879c <HAL_DMA_Abort+0x464>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d022      	beq.n	800875a <HAL_DMA_Abort+0x422>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a21      	ldr	r2, [pc, #132]	; (80087a0 <HAL_DMA_Abort+0x468>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d01d      	beq.n	800875a <HAL_DMA_Abort+0x422>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a20      	ldr	r2, [pc, #128]	; (80087a4 <HAL_DMA_Abort+0x46c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d018      	beq.n	800875a <HAL_DMA_Abort+0x422>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a1e      	ldr	r2, [pc, #120]	; (80087a8 <HAL_DMA_Abort+0x470>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d013      	beq.n	800875a <HAL_DMA_Abort+0x422>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a1d      	ldr	r2, [pc, #116]	; (80087ac <HAL_DMA_Abort+0x474>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d00e      	beq.n	800875a <HAL_DMA_Abort+0x422>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a1b      	ldr	r2, [pc, #108]	; (80087b0 <HAL_DMA_Abort+0x478>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d009      	beq.n	800875a <HAL_DMA_Abort+0x422>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a1a      	ldr	r2, [pc, #104]	; (80087b4 <HAL_DMA_Abort+0x47c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d004      	beq.n	800875a <HAL_DMA_Abort+0x422>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a18      	ldr	r2, [pc, #96]	; (80087b8 <HAL_DMA_Abort+0x480>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d101      	bne.n	800875e <HAL_DMA_Abort+0x426>
 800875a:	2301      	movs	r3, #1
 800875c:	e000      	b.n	8008760 <HAL_DMA_Abort+0x428>
 800875e:	2300      	movs	r3, #0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d02b      	beq.n	80087bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008768:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800876e:	f003 031f 	and.w	r3, r3, #31
 8008772:	223f      	movs	r2, #63	; 0x3f
 8008774:	409a      	lsls	r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	609a      	str	r2, [r3, #8]
 800877a:	e02a      	b.n	80087d2 <HAL_DMA_Abort+0x49a>
 800877c:	40020010 	.word	0x40020010
 8008780:	40020028 	.word	0x40020028
 8008784:	40020040 	.word	0x40020040
 8008788:	40020058 	.word	0x40020058
 800878c:	40020070 	.word	0x40020070
 8008790:	40020088 	.word	0x40020088
 8008794:	400200a0 	.word	0x400200a0
 8008798:	400200b8 	.word	0x400200b8
 800879c:	40020410 	.word	0x40020410
 80087a0:	40020428 	.word	0x40020428
 80087a4:	40020440 	.word	0x40020440
 80087a8:	40020458 	.word	0x40020458
 80087ac:	40020470 	.word	0x40020470
 80087b0:	40020488 	.word	0x40020488
 80087b4:	400204a0 	.word	0x400204a0
 80087b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087c6:	f003 031f 	and.w	r3, r3, #31
 80087ca:	2201      	movs	r2, #1
 80087cc:	409a      	lsls	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a4f      	ldr	r2, [pc, #316]	; (8008914 <HAL_DMA_Abort+0x5dc>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d072      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a4d      	ldr	r2, [pc, #308]	; (8008918 <HAL_DMA_Abort+0x5e0>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d06d      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a4c      	ldr	r2, [pc, #304]	; (800891c <HAL_DMA_Abort+0x5e4>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d068      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a4a      	ldr	r2, [pc, #296]	; (8008920 <HAL_DMA_Abort+0x5e8>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d063      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a49      	ldr	r2, [pc, #292]	; (8008924 <HAL_DMA_Abort+0x5ec>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d05e      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a47      	ldr	r2, [pc, #284]	; (8008928 <HAL_DMA_Abort+0x5f0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d059      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a46      	ldr	r2, [pc, #280]	; (800892c <HAL_DMA_Abort+0x5f4>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d054      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a44      	ldr	r2, [pc, #272]	; (8008930 <HAL_DMA_Abort+0x5f8>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d04f      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a43      	ldr	r2, [pc, #268]	; (8008934 <HAL_DMA_Abort+0x5fc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d04a      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a41      	ldr	r2, [pc, #260]	; (8008938 <HAL_DMA_Abort+0x600>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d045      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a40      	ldr	r2, [pc, #256]	; (800893c <HAL_DMA_Abort+0x604>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d040      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a3e      	ldr	r2, [pc, #248]	; (8008940 <HAL_DMA_Abort+0x608>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d03b      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a3d      	ldr	r2, [pc, #244]	; (8008944 <HAL_DMA_Abort+0x60c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d036      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a3b      	ldr	r2, [pc, #236]	; (8008948 <HAL_DMA_Abort+0x610>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d031      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a3a      	ldr	r2, [pc, #232]	; (800894c <HAL_DMA_Abort+0x614>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d02c      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a38      	ldr	r2, [pc, #224]	; (8008950 <HAL_DMA_Abort+0x618>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d027      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a37      	ldr	r2, [pc, #220]	; (8008954 <HAL_DMA_Abort+0x61c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d022      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a35      	ldr	r2, [pc, #212]	; (8008958 <HAL_DMA_Abort+0x620>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d01d      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a34      	ldr	r2, [pc, #208]	; (800895c <HAL_DMA_Abort+0x624>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d018      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a32      	ldr	r2, [pc, #200]	; (8008960 <HAL_DMA_Abort+0x628>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d013      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a31      	ldr	r2, [pc, #196]	; (8008964 <HAL_DMA_Abort+0x62c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d00e      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a2f      	ldr	r2, [pc, #188]	; (8008968 <HAL_DMA_Abort+0x630>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d009      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a2e      	ldr	r2, [pc, #184]	; (800896c <HAL_DMA_Abort+0x634>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d004      	beq.n	80088c2 <HAL_DMA_Abort+0x58a>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a2c      	ldr	r2, [pc, #176]	; (8008970 <HAL_DMA_Abort+0x638>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d101      	bne.n	80088c6 <HAL_DMA_Abort+0x58e>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <HAL_DMA_Abort+0x590>
 80088c6:	2300      	movs	r3, #0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d015      	beq.n	80088f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00c      	beq.n	80088f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	40020010 	.word	0x40020010
 8008918:	40020028 	.word	0x40020028
 800891c:	40020040 	.word	0x40020040
 8008920:	40020058 	.word	0x40020058
 8008924:	40020070 	.word	0x40020070
 8008928:	40020088 	.word	0x40020088
 800892c:	400200a0 	.word	0x400200a0
 8008930:	400200b8 	.word	0x400200b8
 8008934:	40020410 	.word	0x40020410
 8008938:	40020428 	.word	0x40020428
 800893c:	40020440 	.word	0x40020440
 8008940:	40020458 	.word	0x40020458
 8008944:	40020470 	.word	0x40020470
 8008948:	40020488 	.word	0x40020488
 800894c:	400204a0 	.word	0x400204a0
 8008950:	400204b8 	.word	0x400204b8
 8008954:	58025408 	.word	0x58025408
 8008958:	5802541c 	.word	0x5802541c
 800895c:	58025430 	.word	0x58025430
 8008960:	58025444 	.word	0x58025444
 8008964:	58025458 	.word	0x58025458
 8008968:	5802546c 	.word	0x5802546c
 800896c:	58025480 	.word	0x58025480
 8008970:	58025494 	.word	0x58025494

08008974 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e237      	b.n	8008df6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d004      	beq.n	800899c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2280      	movs	r2, #128	; 0x80
 8008996:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e22c      	b.n	8008df6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a5c      	ldr	r2, [pc, #368]	; (8008b14 <HAL_DMA_Abort_IT+0x1a0>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d04a      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a5b      	ldr	r2, [pc, #364]	; (8008b18 <HAL_DMA_Abort_IT+0x1a4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d045      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a59      	ldr	r2, [pc, #356]	; (8008b1c <HAL_DMA_Abort_IT+0x1a8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d040      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a58      	ldr	r2, [pc, #352]	; (8008b20 <HAL_DMA_Abort_IT+0x1ac>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d03b      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a56      	ldr	r2, [pc, #344]	; (8008b24 <HAL_DMA_Abort_IT+0x1b0>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d036      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a55      	ldr	r2, [pc, #340]	; (8008b28 <HAL_DMA_Abort_IT+0x1b4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d031      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a53      	ldr	r2, [pc, #332]	; (8008b2c <HAL_DMA_Abort_IT+0x1b8>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d02c      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a52      	ldr	r2, [pc, #328]	; (8008b30 <HAL_DMA_Abort_IT+0x1bc>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d027      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a50      	ldr	r2, [pc, #320]	; (8008b34 <HAL_DMA_Abort_IT+0x1c0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d022      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a4f      	ldr	r2, [pc, #316]	; (8008b38 <HAL_DMA_Abort_IT+0x1c4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d01d      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a4d      	ldr	r2, [pc, #308]	; (8008b3c <HAL_DMA_Abort_IT+0x1c8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d018      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a4c      	ldr	r2, [pc, #304]	; (8008b40 <HAL_DMA_Abort_IT+0x1cc>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d013      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a4a      	ldr	r2, [pc, #296]	; (8008b44 <HAL_DMA_Abort_IT+0x1d0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00e      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a49      	ldr	r2, [pc, #292]	; (8008b48 <HAL_DMA_Abort_IT+0x1d4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d009      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a47      	ldr	r2, [pc, #284]	; (8008b4c <HAL_DMA_Abort_IT+0x1d8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d004      	beq.n	8008a3c <HAL_DMA_Abort_IT+0xc8>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a46      	ldr	r2, [pc, #280]	; (8008b50 <HAL_DMA_Abort_IT+0x1dc>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d101      	bne.n	8008a40 <HAL_DMA_Abort_IT+0xcc>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <HAL_DMA_Abort_IT+0xce>
 8008a40:	2300      	movs	r3, #0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8086 	beq.w	8008b54 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2204      	movs	r2, #4
 8008a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a2f      	ldr	r2, [pc, #188]	; (8008b14 <HAL_DMA_Abort_IT+0x1a0>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d04a      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a2e      	ldr	r2, [pc, #184]	; (8008b18 <HAL_DMA_Abort_IT+0x1a4>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d045      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a2c      	ldr	r2, [pc, #176]	; (8008b1c <HAL_DMA_Abort_IT+0x1a8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d040      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a2b      	ldr	r2, [pc, #172]	; (8008b20 <HAL_DMA_Abort_IT+0x1ac>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d03b      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a29      	ldr	r2, [pc, #164]	; (8008b24 <HAL_DMA_Abort_IT+0x1b0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d036      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a28      	ldr	r2, [pc, #160]	; (8008b28 <HAL_DMA_Abort_IT+0x1b4>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d031      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a26      	ldr	r2, [pc, #152]	; (8008b2c <HAL_DMA_Abort_IT+0x1b8>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d02c      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a25      	ldr	r2, [pc, #148]	; (8008b30 <HAL_DMA_Abort_IT+0x1bc>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d027      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a23      	ldr	r2, [pc, #140]	; (8008b34 <HAL_DMA_Abort_IT+0x1c0>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d022      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a22      	ldr	r2, [pc, #136]	; (8008b38 <HAL_DMA_Abort_IT+0x1c4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d01d      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a20      	ldr	r2, [pc, #128]	; (8008b3c <HAL_DMA_Abort_IT+0x1c8>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d018      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a1f      	ldr	r2, [pc, #124]	; (8008b40 <HAL_DMA_Abort_IT+0x1cc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <HAL_DMA_Abort_IT+0x1d0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00e      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1c      	ldr	r2, [pc, #112]	; (8008b48 <HAL_DMA_Abort_IT+0x1d4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d009      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a1a      	ldr	r2, [pc, #104]	; (8008b4c <HAL_DMA_Abort_IT+0x1d8>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d004      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x17c>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a19      	ldr	r2, [pc, #100]	; (8008b50 <HAL_DMA_Abort_IT+0x1dc>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d108      	bne.n	8008b02 <HAL_DMA_Abort_IT+0x18e>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0201 	bic.w	r2, r2, #1
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	e178      	b.n	8008df4 <HAL_DMA_Abort_IT+0x480>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0201 	bic.w	r2, r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	e16f      	b.n	8008df4 <HAL_DMA_Abort_IT+0x480>
 8008b14:	40020010 	.word	0x40020010
 8008b18:	40020028 	.word	0x40020028
 8008b1c:	40020040 	.word	0x40020040
 8008b20:	40020058 	.word	0x40020058
 8008b24:	40020070 	.word	0x40020070
 8008b28:	40020088 	.word	0x40020088
 8008b2c:	400200a0 	.word	0x400200a0
 8008b30:	400200b8 	.word	0x400200b8
 8008b34:	40020410 	.word	0x40020410
 8008b38:	40020428 	.word	0x40020428
 8008b3c:	40020440 	.word	0x40020440
 8008b40:	40020458 	.word	0x40020458
 8008b44:	40020470 	.word	0x40020470
 8008b48:	40020488 	.word	0x40020488
 8008b4c:	400204a0 	.word	0x400204a0
 8008b50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 020e 	bic.w	r2, r2, #14
 8008b62:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a6c      	ldr	r2, [pc, #432]	; (8008d1c <HAL_DMA_Abort_IT+0x3a8>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d04a      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a6b      	ldr	r2, [pc, #428]	; (8008d20 <HAL_DMA_Abort_IT+0x3ac>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d045      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a69      	ldr	r2, [pc, #420]	; (8008d24 <HAL_DMA_Abort_IT+0x3b0>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d040      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a68      	ldr	r2, [pc, #416]	; (8008d28 <HAL_DMA_Abort_IT+0x3b4>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d03b      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a66      	ldr	r2, [pc, #408]	; (8008d2c <HAL_DMA_Abort_IT+0x3b8>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d036      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a65      	ldr	r2, [pc, #404]	; (8008d30 <HAL_DMA_Abort_IT+0x3bc>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d031      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a63      	ldr	r2, [pc, #396]	; (8008d34 <HAL_DMA_Abort_IT+0x3c0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d02c      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a62      	ldr	r2, [pc, #392]	; (8008d38 <HAL_DMA_Abort_IT+0x3c4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d027      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a60      	ldr	r2, [pc, #384]	; (8008d3c <HAL_DMA_Abort_IT+0x3c8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d022      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a5f      	ldr	r2, [pc, #380]	; (8008d40 <HAL_DMA_Abort_IT+0x3cc>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d01d      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a5d      	ldr	r2, [pc, #372]	; (8008d44 <HAL_DMA_Abort_IT+0x3d0>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d018      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a5c      	ldr	r2, [pc, #368]	; (8008d48 <HAL_DMA_Abort_IT+0x3d4>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d013      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a5a      	ldr	r2, [pc, #360]	; (8008d4c <HAL_DMA_Abort_IT+0x3d8>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00e      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a59      	ldr	r2, [pc, #356]	; (8008d50 <HAL_DMA_Abort_IT+0x3dc>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d009      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a57      	ldr	r2, [pc, #348]	; (8008d54 <HAL_DMA_Abort_IT+0x3e0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d004      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x290>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a56      	ldr	r2, [pc, #344]	; (8008d58 <HAL_DMA_Abort_IT+0x3e4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d108      	bne.n	8008c16 <HAL_DMA_Abort_IT+0x2a2>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 0201 	bic.w	r2, r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	e007      	b.n	8008c26 <HAL_DMA_Abort_IT+0x2b2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 0201 	bic.w	r2, r2, #1
 8008c24:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a3c      	ldr	r2, [pc, #240]	; (8008d1c <HAL_DMA_Abort_IT+0x3a8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d072      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a3a      	ldr	r2, [pc, #232]	; (8008d20 <HAL_DMA_Abort_IT+0x3ac>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d06d      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a39      	ldr	r2, [pc, #228]	; (8008d24 <HAL_DMA_Abort_IT+0x3b0>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d068      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a37      	ldr	r2, [pc, #220]	; (8008d28 <HAL_DMA_Abort_IT+0x3b4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d063      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a36      	ldr	r2, [pc, #216]	; (8008d2c <HAL_DMA_Abort_IT+0x3b8>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d05e      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a34      	ldr	r2, [pc, #208]	; (8008d30 <HAL_DMA_Abort_IT+0x3bc>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d059      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a33      	ldr	r2, [pc, #204]	; (8008d34 <HAL_DMA_Abort_IT+0x3c0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d054      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a31      	ldr	r2, [pc, #196]	; (8008d38 <HAL_DMA_Abort_IT+0x3c4>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d04f      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a30      	ldr	r2, [pc, #192]	; (8008d3c <HAL_DMA_Abort_IT+0x3c8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d04a      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a2e      	ldr	r2, [pc, #184]	; (8008d40 <HAL_DMA_Abort_IT+0x3cc>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d045      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a2d      	ldr	r2, [pc, #180]	; (8008d44 <HAL_DMA_Abort_IT+0x3d0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d040      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a2b      	ldr	r2, [pc, #172]	; (8008d48 <HAL_DMA_Abort_IT+0x3d4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d03b      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a2a      	ldr	r2, [pc, #168]	; (8008d4c <HAL_DMA_Abort_IT+0x3d8>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d036      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a28      	ldr	r2, [pc, #160]	; (8008d50 <HAL_DMA_Abort_IT+0x3dc>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d031      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a27      	ldr	r2, [pc, #156]	; (8008d54 <HAL_DMA_Abort_IT+0x3e0>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d02c      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a25      	ldr	r2, [pc, #148]	; (8008d58 <HAL_DMA_Abort_IT+0x3e4>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d027      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a24      	ldr	r2, [pc, #144]	; (8008d5c <HAL_DMA_Abort_IT+0x3e8>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d022      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a22      	ldr	r2, [pc, #136]	; (8008d60 <HAL_DMA_Abort_IT+0x3ec>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d01d      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a21      	ldr	r2, [pc, #132]	; (8008d64 <HAL_DMA_Abort_IT+0x3f0>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d018      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a1f      	ldr	r2, [pc, #124]	; (8008d68 <HAL_DMA_Abort_IT+0x3f4>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d013      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a1e      	ldr	r2, [pc, #120]	; (8008d6c <HAL_DMA_Abort_IT+0x3f8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d00e      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a1c      	ldr	r2, [pc, #112]	; (8008d70 <HAL_DMA_Abort_IT+0x3fc>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d009      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a1b      	ldr	r2, [pc, #108]	; (8008d74 <HAL_DMA_Abort_IT+0x400>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d004      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x3a2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a19      	ldr	r2, [pc, #100]	; (8008d78 <HAL_DMA_Abort_IT+0x404>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d132      	bne.n	8008d7c <HAL_DMA_Abort_IT+0x408>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e031      	b.n	8008d7e <HAL_DMA_Abort_IT+0x40a>
 8008d1a:	bf00      	nop
 8008d1c:	40020010 	.word	0x40020010
 8008d20:	40020028 	.word	0x40020028
 8008d24:	40020040 	.word	0x40020040
 8008d28:	40020058 	.word	0x40020058
 8008d2c:	40020070 	.word	0x40020070
 8008d30:	40020088 	.word	0x40020088
 8008d34:	400200a0 	.word	0x400200a0
 8008d38:	400200b8 	.word	0x400200b8
 8008d3c:	40020410 	.word	0x40020410
 8008d40:	40020428 	.word	0x40020428
 8008d44:	40020440 	.word	0x40020440
 8008d48:	40020458 	.word	0x40020458
 8008d4c:	40020470 	.word	0x40020470
 8008d50:	40020488 	.word	0x40020488
 8008d54:	400204a0 	.word	0x400204a0
 8008d58:	400204b8 	.word	0x400204b8
 8008d5c:	58025408 	.word	0x58025408
 8008d60:	5802541c 	.word	0x5802541c
 8008d64:	58025430 	.word	0x58025430
 8008d68:	58025444 	.word	0x58025444
 8008d6c:	58025458 	.word	0x58025458
 8008d70:	5802546c 	.word	0x5802546c
 8008d74:	58025480 	.word	0x58025480
 8008d78:	58025494 	.word	0x58025494
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d028      	beq.n	8008dd4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d9c:	f003 031f 	and.w	r3, r3, #31
 8008da0:	2201      	movs	r2, #1
 8008da2:	409a      	lsls	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008db0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00c      	beq.n	8008dd4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008dd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop

08008e00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08a      	sub	sp, #40	; 0x28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008e0c:	4b67      	ldr	r3, [pc, #412]	; (8008fac <HAL_DMA_IRQHandler+0x1ac>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a67      	ldr	r2, [pc, #412]	; (8008fb0 <HAL_DMA_IRQHandler+0x1b0>)
 8008e12:	fba2 2303 	umull	r2, r3, r2, r3
 8008e16:	0a9b      	lsrs	r3, r3, #10
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a5f      	ldr	r2, [pc, #380]	; (8008fb4 <HAL_DMA_IRQHandler+0x1b4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d04a      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a5d      	ldr	r2, [pc, #372]	; (8008fb8 <HAL_DMA_IRQHandler+0x1b8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d045      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a5c      	ldr	r2, [pc, #368]	; (8008fbc <HAL_DMA_IRQHandler+0x1bc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d040      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a5a      	ldr	r2, [pc, #360]	; (8008fc0 <HAL_DMA_IRQHandler+0x1c0>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d03b      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a59      	ldr	r2, [pc, #356]	; (8008fc4 <HAL_DMA_IRQHandler+0x1c4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d036      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a57      	ldr	r2, [pc, #348]	; (8008fc8 <HAL_DMA_IRQHandler+0x1c8>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d031      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a56      	ldr	r2, [pc, #344]	; (8008fcc <HAL_DMA_IRQHandler+0x1cc>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d02c      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a54      	ldr	r2, [pc, #336]	; (8008fd0 <HAL_DMA_IRQHandler+0x1d0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d027      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a53      	ldr	r2, [pc, #332]	; (8008fd4 <HAL_DMA_IRQHandler+0x1d4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d022      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a51      	ldr	r2, [pc, #324]	; (8008fd8 <HAL_DMA_IRQHandler+0x1d8>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d01d      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a50      	ldr	r2, [pc, #320]	; (8008fdc <HAL_DMA_IRQHandler+0x1dc>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d018      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a4e      	ldr	r2, [pc, #312]	; (8008fe0 <HAL_DMA_IRQHandler+0x1e0>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a4d      	ldr	r2, [pc, #308]	; (8008fe4 <HAL_DMA_IRQHandler+0x1e4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00e      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a4b      	ldr	r2, [pc, #300]	; (8008fe8 <HAL_DMA_IRQHandler+0x1e8>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d009      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a4a      	ldr	r2, [pc, #296]	; (8008fec <HAL_DMA_IRQHandler+0x1ec>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d004      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0xd2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a48      	ldr	r2, [pc, #288]	; (8008ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d101      	bne.n	8008ed6 <HAL_DMA_IRQHandler+0xd6>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <HAL_DMA_IRQHandler+0xd8>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 842b 	beq.w	8009734 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee2:	f003 031f 	and.w	r3, r3, #31
 8008ee6:	2208      	movs	r2, #8
 8008ee8:	409a      	lsls	r2, r3
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	4013      	ands	r3, r2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 80a2 	beq.w	8009038 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a2e      	ldr	r2, [pc, #184]	; (8008fb4 <HAL_DMA_IRQHandler+0x1b4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d04a      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a2d      	ldr	r2, [pc, #180]	; (8008fb8 <HAL_DMA_IRQHandler+0x1b8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d045      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a2b      	ldr	r2, [pc, #172]	; (8008fbc <HAL_DMA_IRQHandler+0x1bc>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d040      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a2a      	ldr	r2, [pc, #168]	; (8008fc0 <HAL_DMA_IRQHandler+0x1c0>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d03b      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a28      	ldr	r2, [pc, #160]	; (8008fc4 <HAL_DMA_IRQHandler+0x1c4>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d036      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a27      	ldr	r2, [pc, #156]	; (8008fc8 <HAL_DMA_IRQHandler+0x1c8>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d031      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a25      	ldr	r2, [pc, #148]	; (8008fcc <HAL_DMA_IRQHandler+0x1cc>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d02c      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a24      	ldr	r2, [pc, #144]	; (8008fd0 <HAL_DMA_IRQHandler+0x1d0>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d027      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a22      	ldr	r2, [pc, #136]	; (8008fd4 <HAL_DMA_IRQHandler+0x1d4>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d022      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a21      	ldr	r2, [pc, #132]	; (8008fd8 <HAL_DMA_IRQHandler+0x1d8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d01d      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a1f      	ldr	r2, [pc, #124]	; (8008fdc <HAL_DMA_IRQHandler+0x1dc>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d018      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a1e      	ldr	r2, [pc, #120]	; (8008fe0 <HAL_DMA_IRQHandler+0x1e0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d013      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1c      	ldr	r2, [pc, #112]	; (8008fe4 <HAL_DMA_IRQHandler+0x1e4>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d00e      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a1b      	ldr	r2, [pc, #108]	; (8008fe8 <HAL_DMA_IRQHandler+0x1e8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d009      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a19      	ldr	r2, [pc, #100]	; (8008fec <HAL_DMA_IRQHandler+0x1ec>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d004      	beq.n	8008f94 <HAL_DMA_IRQHandler+0x194>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a18      	ldr	r2, [pc, #96]	; (8008ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d12f      	bne.n	8008ff4 <HAL_DMA_IRQHandler+0x1f4>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bf14      	ite	ne
 8008fa2:	2301      	movne	r3, #1
 8008fa4:	2300      	moveq	r3, #0
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	e02e      	b.n	8009008 <HAL_DMA_IRQHandler+0x208>
 8008faa:	bf00      	nop
 8008fac:	24000234 	.word	0x24000234
 8008fb0:	1b4e81b5 	.word	0x1b4e81b5
 8008fb4:	40020010 	.word	0x40020010
 8008fb8:	40020028 	.word	0x40020028
 8008fbc:	40020040 	.word	0x40020040
 8008fc0:	40020058 	.word	0x40020058
 8008fc4:	40020070 	.word	0x40020070
 8008fc8:	40020088 	.word	0x40020088
 8008fcc:	400200a0 	.word	0x400200a0
 8008fd0:	400200b8 	.word	0x400200b8
 8008fd4:	40020410 	.word	0x40020410
 8008fd8:	40020428 	.word	0x40020428
 8008fdc:	40020440 	.word	0x40020440
 8008fe0:	40020458 	.word	0x40020458
 8008fe4:	40020470 	.word	0x40020470
 8008fe8:	40020488 	.word	0x40020488
 8008fec:	400204a0 	.word	0x400204a0
 8008ff0:	400204b8 	.word	0x400204b8
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bf14      	ite	ne
 8009002:	2301      	movne	r3, #1
 8009004:	2300      	moveq	r3, #0
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d015      	beq.n	8009038 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0204 	bic.w	r2, r2, #4
 800901a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009020:	f003 031f 	and.w	r3, r3, #31
 8009024:	2208      	movs	r2, #8
 8009026:	409a      	lsls	r2, r3
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009030:	f043 0201 	orr.w	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800903c:	f003 031f 	and.w	r3, r3, #31
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	fa22 f303 	lsr.w	r3, r2, r3
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d06e      	beq.n	800912c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a69      	ldr	r2, [pc, #420]	; (80091f8 <HAL_DMA_IRQHandler+0x3f8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d04a      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a67      	ldr	r2, [pc, #412]	; (80091fc <HAL_DMA_IRQHandler+0x3fc>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d045      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a66      	ldr	r2, [pc, #408]	; (8009200 <HAL_DMA_IRQHandler+0x400>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d040      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a64      	ldr	r2, [pc, #400]	; (8009204 <HAL_DMA_IRQHandler+0x404>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d03b      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a63      	ldr	r2, [pc, #396]	; (8009208 <HAL_DMA_IRQHandler+0x408>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d036      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a61      	ldr	r2, [pc, #388]	; (800920c <HAL_DMA_IRQHandler+0x40c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d031      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a60      	ldr	r2, [pc, #384]	; (8009210 <HAL_DMA_IRQHandler+0x410>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d02c      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a5e      	ldr	r2, [pc, #376]	; (8009214 <HAL_DMA_IRQHandler+0x414>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d027      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a5d      	ldr	r2, [pc, #372]	; (8009218 <HAL_DMA_IRQHandler+0x418>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d022      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a5b      	ldr	r2, [pc, #364]	; (800921c <HAL_DMA_IRQHandler+0x41c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d01d      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a5a      	ldr	r2, [pc, #360]	; (8009220 <HAL_DMA_IRQHandler+0x420>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d018      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a58      	ldr	r2, [pc, #352]	; (8009224 <HAL_DMA_IRQHandler+0x424>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d013      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a57      	ldr	r2, [pc, #348]	; (8009228 <HAL_DMA_IRQHandler+0x428>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d00e      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a55      	ldr	r2, [pc, #340]	; (800922c <HAL_DMA_IRQHandler+0x42c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d009      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a54      	ldr	r2, [pc, #336]	; (8009230 <HAL_DMA_IRQHandler+0x430>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d004      	beq.n	80090ee <HAL_DMA_IRQHandler+0x2ee>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a52      	ldr	r2, [pc, #328]	; (8009234 <HAL_DMA_IRQHandler+0x434>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d10a      	bne.n	8009104 <HAL_DMA_IRQHandler+0x304>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bf14      	ite	ne
 80090fc:	2301      	movne	r3, #1
 80090fe:	2300      	moveq	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	e003      	b.n	800910c <HAL_DMA_IRQHandler+0x30c>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2300      	movs	r3, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00d      	beq.n	800912c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009114:	f003 031f 	and.w	r3, r3, #31
 8009118:	2201      	movs	r2, #1
 800911a:	409a      	lsls	r2, r3
 800911c:	6a3b      	ldr	r3, [r7, #32]
 800911e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009124:	f043 0202 	orr.w	r2, r3, #2
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009130:	f003 031f 	and.w	r3, r3, #31
 8009134:	2204      	movs	r2, #4
 8009136:	409a      	lsls	r2, r3
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	4013      	ands	r3, r2
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 808f 	beq.w	8009260 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a2c      	ldr	r2, [pc, #176]	; (80091f8 <HAL_DMA_IRQHandler+0x3f8>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d04a      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a2a      	ldr	r2, [pc, #168]	; (80091fc <HAL_DMA_IRQHandler+0x3fc>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d045      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a29      	ldr	r2, [pc, #164]	; (8009200 <HAL_DMA_IRQHandler+0x400>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d040      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a27      	ldr	r2, [pc, #156]	; (8009204 <HAL_DMA_IRQHandler+0x404>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d03b      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a26      	ldr	r2, [pc, #152]	; (8009208 <HAL_DMA_IRQHandler+0x408>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d036      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a24      	ldr	r2, [pc, #144]	; (800920c <HAL_DMA_IRQHandler+0x40c>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d031      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a23      	ldr	r2, [pc, #140]	; (8009210 <HAL_DMA_IRQHandler+0x410>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d02c      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a21      	ldr	r2, [pc, #132]	; (8009214 <HAL_DMA_IRQHandler+0x414>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d027      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a20      	ldr	r2, [pc, #128]	; (8009218 <HAL_DMA_IRQHandler+0x418>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d022      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a1e      	ldr	r2, [pc, #120]	; (800921c <HAL_DMA_IRQHandler+0x41c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d01d      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a1d      	ldr	r2, [pc, #116]	; (8009220 <HAL_DMA_IRQHandler+0x420>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d018      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a1b      	ldr	r2, [pc, #108]	; (8009224 <HAL_DMA_IRQHandler+0x424>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d013      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a1a      	ldr	r2, [pc, #104]	; (8009228 <HAL_DMA_IRQHandler+0x428>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d00e      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a18      	ldr	r2, [pc, #96]	; (800922c <HAL_DMA_IRQHandler+0x42c>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d009      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a17      	ldr	r2, [pc, #92]	; (8009230 <HAL_DMA_IRQHandler+0x430>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d004      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x3e2>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a15      	ldr	r2, [pc, #84]	; (8009234 <HAL_DMA_IRQHandler+0x434>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d12a      	bne.n	8009238 <HAL_DMA_IRQHandler+0x438>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bf14      	ite	ne
 80091f0:	2301      	movne	r3, #1
 80091f2:	2300      	moveq	r3, #0
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	e023      	b.n	8009240 <HAL_DMA_IRQHandler+0x440>
 80091f8:	40020010 	.word	0x40020010
 80091fc:	40020028 	.word	0x40020028
 8009200:	40020040 	.word	0x40020040
 8009204:	40020058 	.word	0x40020058
 8009208:	40020070 	.word	0x40020070
 800920c:	40020088 	.word	0x40020088
 8009210:	400200a0 	.word	0x400200a0
 8009214:	400200b8 	.word	0x400200b8
 8009218:	40020410 	.word	0x40020410
 800921c:	40020428 	.word	0x40020428
 8009220:	40020440 	.word	0x40020440
 8009224:	40020458 	.word	0x40020458
 8009228:	40020470 	.word	0x40020470
 800922c:	40020488 	.word	0x40020488
 8009230:	400204a0 	.word	0x400204a0
 8009234:	400204b8 	.word	0x400204b8
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2300      	movs	r3, #0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00d      	beq.n	8009260 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009248:	f003 031f 	and.w	r3, r3, #31
 800924c:	2204      	movs	r2, #4
 800924e:	409a      	lsls	r2, r3
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009258:	f043 0204 	orr.w	r2, r3, #4
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009264:	f003 031f 	and.w	r3, r3, #31
 8009268:	2210      	movs	r2, #16
 800926a:	409a      	lsls	r2, r3
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	4013      	ands	r3, r2
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 80a6 	beq.w	80093c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a85      	ldr	r2, [pc, #532]	; (8009490 <HAL_DMA_IRQHandler+0x690>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d04a      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a83      	ldr	r2, [pc, #524]	; (8009494 <HAL_DMA_IRQHandler+0x694>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d045      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a82      	ldr	r2, [pc, #520]	; (8009498 <HAL_DMA_IRQHandler+0x698>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d040      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a80      	ldr	r2, [pc, #512]	; (800949c <HAL_DMA_IRQHandler+0x69c>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d03b      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a7f      	ldr	r2, [pc, #508]	; (80094a0 <HAL_DMA_IRQHandler+0x6a0>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d036      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a7d      	ldr	r2, [pc, #500]	; (80094a4 <HAL_DMA_IRQHandler+0x6a4>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d031      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a7c      	ldr	r2, [pc, #496]	; (80094a8 <HAL_DMA_IRQHandler+0x6a8>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d02c      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a7a      	ldr	r2, [pc, #488]	; (80094ac <HAL_DMA_IRQHandler+0x6ac>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d027      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a79      	ldr	r2, [pc, #484]	; (80094b0 <HAL_DMA_IRQHandler+0x6b0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d022      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a77      	ldr	r2, [pc, #476]	; (80094b4 <HAL_DMA_IRQHandler+0x6b4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d01d      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a76      	ldr	r2, [pc, #472]	; (80094b8 <HAL_DMA_IRQHandler+0x6b8>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d018      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a74      	ldr	r2, [pc, #464]	; (80094bc <HAL_DMA_IRQHandler+0x6bc>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d013      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a73      	ldr	r2, [pc, #460]	; (80094c0 <HAL_DMA_IRQHandler+0x6c0>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d00e      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a71      	ldr	r2, [pc, #452]	; (80094c4 <HAL_DMA_IRQHandler+0x6c4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d009      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a70      	ldr	r2, [pc, #448]	; (80094c8 <HAL_DMA_IRQHandler+0x6c8>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d004      	beq.n	8009316 <HAL_DMA_IRQHandler+0x516>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a6e      	ldr	r2, [pc, #440]	; (80094cc <HAL_DMA_IRQHandler+0x6cc>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d10a      	bne.n	800932c <HAL_DMA_IRQHandler+0x52c>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0308 	and.w	r3, r3, #8
 8009320:	2b00      	cmp	r3, #0
 8009322:	bf14      	ite	ne
 8009324:	2301      	movne	r3, #1
 8009326:	2300      	moveq	r3, #0
 8009328:	b2db      	uxtb	r3, r3
 800932a:	e009      	b.n	8009340 <HAL_DMA_IRQHandler+0x540>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0304 	and.w	r3, r3, #4
 8009336:	2b00      	cmp	r3, #0
 8009338:	bf14      	ite	ne
 800933a:	2301      	movne	r3, #1
 800933c:	2300      	moveq	r3, #0
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b00      	cmp	r3, #0
 8009342:	d03e      	beq.n	80093c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009348:	f003 031f 	and.w	r3, r3, #31
 800934c:	2210      	movs	r2, #16
 800934e:	409a      	lsls	r2, r3
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d018      	beq.n	8009394 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d108      	bne.n	8009382 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	d024      	beq.n	80093c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	4798      	blx	r3
 8009380:	e01f      	b.n	80093c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009386:	2b00      	cmp	r3, #0
 8009388:	d01b      	beq.n	80093c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
 8009392:	e016      	b.n	80093c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d107      	bne.n	80093b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f022 0208 	bic.w	r2, r2, #8
 80093b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c6:	f003 031f 	and.w	r3, r3, #31
 80093ca:	2220      	movs	r2, #32
 80093cc:	409a      	lsls	r2, r3
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	4013      	ands	r3, r2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 8110 	beq.w	80095f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a2c      	ldr	r2, [pc, #176]	; (8009490 <HAL_DMA_IRQHandler+0x690>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d04a      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a2b      	ldr	r2, [pc, #172]	; (8009494 <HAL_DMA_IRQHandler+0x694>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d045      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a29      	ldr	r2, [pc, #164]	; (8009498 <HAL_DMA_IRQHandler+0x698>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d040      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a28      	ldr	r2, [pc, #160]	; (800949c <HAL_DMA_IRQHandler+0x69c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d03b      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a26      	ldr	r2, [pc, #152]	; (80094a0 <HAL_DMA_IRQHandler+0x6a0>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d036      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a25      	ldr	r2, [pc, #148]	; (80094a4 <HAL_DMA_IRQHandler+0x6a4>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d031      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a23      	ldr	r2, [pc, #140]	; (80094a8 <HAL_DMA_IRQHandler+0x6a8>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d02c      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a22      	ldr	r2, [pc, #136]	; (80094ac <HAL_DMA_IRQHandler+0x6ac>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d027      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a20      	ldr	r2, [pc, #128]	; (80094b0 <HAL_DMA_IRQHandler+0x6b0>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d022      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a1f      	ldr	r2, [pc, #124]	; (80094b4 <HAL_DMA_IRQHandler+0x6b4>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d01d      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <HAL_DMA_IRQHandler+0x6b8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d018      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a1c      	ldr	r2, [pc, #112]	; (80094bc <HAL_DMA_IRQHandler+0x6bc>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d013      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a1a      	ldr	r2, [pc, #104]	; (80094c0 <HAL_DMA_IRQHandler+0x6c0>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d00e      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a19      	ldr	r2, [pc, #100]	; (80094c4 <HAL_DMA_IRQHandler+0x6c4>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d009      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a17      	ldr	r2, [pc, #92]	; (80094c8 <HAL_DMA_IRQHandler+0x6c8>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d004      	beq.n	8009478 <HAL_DMA_IRQHandler+0x678>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a16      	ldr	r2, [pc, #88]	; (80094cc <HAL_DMA_IRQHandler+0x6cc>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d12b      	bne.n	80094d0 <HAL_DMA_IRQHandler+0x6d0>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0310 	and.w	r3, r3, #16
 8009482:	2b00      	cmp	r3, #0
 8009484:	bf14      	ite	ne
 8009486:	2301      	movne	r3, #1
 8009488:	2300      	moveq	r3, #0
 800948a:	b2db      	uxtb	r3, r3
 800948c:	e02a      	b.n	80094e4 <HAL_DMA_IRQHandler+0x6e4>
 800948e:	bf00      	nop
 8009490:	40020010 	.word	0x40020010
 8009494:	40020028 	.word	0x40020028
 8009498:	40020040 	.word	0x40020040
 800949c:	40020058 	.word	0x40020058
 80094a0:	40020070 	.word	0x40020070
 80094a4:	40020088 	.word	0x40020088
 80094a8:	400200a0 	.word	0x400200a0
 80094ac:	400200b8 	.word	0x400200b8
 80094b0:	40020410 	.word	0x40020410
 80094b4:	40020428 	.word	0x40020428
 80094b8:	40020440 	.word	0x40020440
 80094bc:	40020458 	.word	0x40020458
 80094c0:	40020470 	.word	0x40020470
 80094c4:	40020488 	.word	0x40020488
 80094c8:	400204a0 	.word	0x400204a0
 80094cc:	400204b8 	.word	0x400204b8
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	bf14      	ite	ne
 80094de:	2301      	movne	r3, #1
 80094e0:	2300      	moveq	r3, #0
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 8087 	beq.w	80095f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ee:	f003 031f 	and.w	r3, r3, #31
 80094f2:	2220      	movs	r2, #32
 80094f4:	409a      	lsls	r2, r3
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b04      	cmp	r3, #4
 8009504:	d139      	bne.n	800957a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0216 	bic.w	r2, r2, #22
 8009514:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	695a      	ldr	r2, [r3, #20]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009524:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d103      	bne.n	8009536 <HAL_DMA_IRQHandler+0x736>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009532:	2b00      	cmp	r3, #0
 8009534:	d007      	beq.n	8009546 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0208 	bic.w	r2, r2, #8
 8009544:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800954a:	f003 031f 	and.w	r3, r3, #31
 800954e:	223f      	movs	r2, #63	; 0x3f
 8009550:	409a      	lsls	r2, r3
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 834a 	beq.w	8009c04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	4798      	blx	r3
          }
          return;
 8009578:	e344      	b.n	8009c04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d018      	beq.n	80095ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d108      	bne.n	80095a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800959a:	2b00      	cmp	r3, #0
 800959c:	d02c      	beq.n	80095f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	4798      	blx	r3
 80095a6:	e027      	b.n	80095f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d023      	beq.n	80095f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	4798      	blx	r3
 80095b8:	e01e      	b.n	80095f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10f      	bne.n	80095e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0210 	bic.w	r2, r2, #16
 80095d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 8306 	beq.w	8009c0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009606:	f003 0301 	and.w	r3, r3, #1
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 8088 	beq.w	8009720 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2204      	movs	r2, #4
 8009614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a7a      	ldr	r2, [pc, #488]	; (8009808 <HAL_DMA_IRQHandler+0xa08>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d04a      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a79      	ldr	r2, [pc, #484]	; (800980c <HAL_DMA_IRQHandler+0xa0c>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d045      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a77      	ldr	r2, [pc, #476]	; (8009810 <HAL_DMA_IRQHandler+0xa10>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d040      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a76      	ldr	r2, [pc, #472]	; (8009814 <HAL_DMA_IRQHandler+0xa14>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d03b      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a74      	ldr	r2, [pc, #464]	; (8009818 <HAL_DMA_IRQHandler+0xa18>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d036      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a73      	ldr	r2, [pc, #460]	; (800981c <HAL_DMA_IRQHandler+0xa1c>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d031      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a71      	ldr	r2, [pc, #452]	; (8009820 <HAL_DMA_IRQHandler+0xa20>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d02c      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a70      	ldr	r2, [pc, #448]	; (8009824 <HAL_DMA_IRQHandler+0xa24>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d027      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a6e      	ldr	r2, [pc, #440]	; (8009828 <HAL_DMA_IRQHandler+0xa28>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d022      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a6d      	ldr	r2, [pc, #436]	; (800982c <HAL_DMA_IRQHandler+0xa2c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d01d      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a6b      	ldr	r2, [pc, #428]	; (8009830 <HAL_DMA_IRQHandler+0xa30>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d018      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a6a      	ldr	r2, [pc, #424]	; (8009834 <HAL_DMA_IRQHandler+0xa34>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d013      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a68      	ldr	r2, [pc, #416]	; (8009838 <HAL_DMA_IRQHandler+0xa38>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d00e      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a67      	ldr	r2, [pc, #412]	; (800983c <HAL_DMA_IRQHandler+0xa3c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d009      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a65      	ldr	r2, [pc, #404]	; (8009840 <HAL_DMA_IRQHandler+0xa40>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d004      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x8b8>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a64      	ldr	r2, [pc, #400]	; (8009844 <HAL_DMA_IRQHandler+0xa44>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d108      	bne.n	80096ca <HAL_DMA_IRQHandler+0x8ca>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0201 	bic.w	r2, r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e007      	b.n	80096da <HAL_DMA_IRQHandler+0x8da>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f022 0201 	bic.w	r2, r2, #1
 80096d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3301      	adds	r3, #1
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d307      	bcc.n	80096f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0301 	and.w	r3, r3, #1
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1f2      	bne.n	80096da <HAL_DMA_IRQHandler+0x8da>
 80096f4:	e000      	b.n	80096f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80096f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2203      	movs	r2, #3
 800970a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800970e:	e003      	b.n	8009718 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 8272 	beq.w	8009c0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	4798      	blx	r3
 8009732:	e26c      	b.n	8009c0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a43      	ldr	r2, [pc, #268]	; (8009848 <HAL_DMA_IRQHandler+0xa48>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d022      	beq.n	8009784 <HAL_DMA_IRQHandler+0x984>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a42      	ldr	r2, [pc, #264]	; (800984c <HAL_DMA_IRQHandler+0xa4c>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d01d      	beq.n	8009784 <HAL_DMA_IRQHandler+0x984>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a40      	ldr	r2, [pc, #256]	; (8009850 <HAL_DMA_IRQHandler+0xa50>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d018      	beq.n	8009784 <HAL_DMA_IRQHandler+0x984>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a3f      	ldr	r2, [pc, #252]	; (8009854 <HAL_DMA_IRQHandler+0xa54>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d013      	beq.n	8009784 <HAL_DMA_IRQHandler+0x984>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a3d      	ldr	r2, [pc, #244]	; (8009858 <HAL_DMA_IRQHandler+0xa58>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d00e      	beq.n	8009784 <HAL_DMA_IRQHandler+0x984>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a3c      	ldr	r2, [pc, #240]	; (800985c <HAL_DMA_IRQHandler+0xa5c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d009      	beq.n	8009784 <HAL_DMA_IRQHandler+0x984>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a3a      	ldr	r2, [pc, #232]	; (8009860 <HAL_DMA_IRQHandler+0xa60>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d004      	beq.n	8009784 <HAL_DMA_IRQHandler+0x984>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a39      	ldr	r2, [pc, #228]	; (8009864 <HAL_DMA_IRQHandler+0xa64>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d101      	bne.n	8009788 <HAL_DMA_IRQHandler+0x988>
 8009784:	2301      	movs	r3, #1
 8009786:	e000      	b.n	800978a <HAL_DMA_IRQHandler+0x98a>
 8009788:	2300      	movs	r3, #0
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 823f 	beq.w	8009c0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800979c:	f003 031f 	and.w	r3, r3, #31
 80097a0:	2204      	movs	r2, #4
 80097a2:	409a      	lsls	r2, r3
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	4013      	ands	r3, r2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 80cd 	beq.w	8009948 <HAL_DMA_IRQHandler+0xb48>
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f003 0304 	and.w	r3, r3, #4
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 80c7 	beq.w	8009948 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097be:	f003 031f 	and.w	r3, r3, #31
 80097c2:	2204      	movs	r2, #4
 80097c4:	409a      	lsls	r2, r3
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d049      	beq.n	8009868 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d109      	bne.n	80097f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 8210 	beq.w	8009c08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097f0:	e20a      	b.n	8009c08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 8206 	beq.w	8009c08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009804:	e200      	b.n	8009c08 <HAL_DMA_IRQHandler+0xe08>
 8009806:	bf00      	nop
 8009808:	40020010 	.word	0x40020010
 800980c:	40020028 	.word	0x40020028
 8009810:	40020040 	.word	0x40020040
 8009814:	40020058 	.word	0x40020058
 8009818:	40020070 	.word	0x40020070
 800981c:	40020088 	.word	0x40020088
 8009820:	400200a0 	.word	0x400200a0
 8009824:	400200b8 	.word	0x400200b8
 8009828:	40020410 	.word	0x40020410
 800982c:	40020428 	.word	0x40020428
 8009830:	40020440 	.word	0x40020440
 8009834:	40020458 	.word	0x40020458
 8009838:	40020470 	.word	0x40020470
 800983c:	40020488 	.word	0x40020488
 8009840:	400204a0 	.word	0x400204a0
 8009844:	400204b8 	.word	0x400204b8
 8009848:	58025408 	.word	0x58025408
 800984c:	5802541c 	.word	0x5802541c
 8009850:	58025430 	.word	0x58025430
 8009854:	58025444 	.word	0x58025444
 8009858:	58025458 	.word	0x58025458
 800985c:	5802546c 	.word	0x5802546c
 8009860:	58025480 	.word	0x58025480
 8009864:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d160      	bne.n	8009934 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a7f      	ldr	r2, [pc, #508]	; (8009a74 <HAL_DMA_IRQHandler+0xc74>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d04a      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a7d      	ldr	r2, [pc, #500]	; (8009a78 <HAL_DMA_IRQHandler+0xc78>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d045      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a7c      	ldr	r2, [pc, #496]	; (8009a7c <HAL_DMA_IRQHandler+0xc7c>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d040      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a7a      	ldr	r2, [pc, #488]	; (8009a80 <HAL_DMA_IRQHandler+0xc80>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d03b      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a79      	ldr	r2, [pc, #484]	; (8009a84 <HAL_DMA_IRQHandler+0xc84>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d036      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a77      	ldr	r2, [pc, #476]	; (8009a88 <HAL_DMA_IRQHandler+0xc88>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d031      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a76      	ldr	r2, [pc, #472]	; (8009a8c <HAL_DMA_IRQHandler+0xc8c>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d02c      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a74      	ldr	r2, [pc, #464]	; (8009a90 <HAL_DMA_IRQHandler+0xc90>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d027      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a73      	ldr	r2, [pc, #460]	; (8009a94 <HAL_DMA_IRQHandler+0xc94>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d022      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a71      	ldr	r2, [pc, #452]	; (8009a98 <HAL_DMA_IRQHandler+0xc98>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d01d      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a70      	ldr	r2, [pc, #448]	; (8009a9c <HAL_DMA_IRQHandler+0xc9c>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d018      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a6e      	ldr	r2, [pc, #440]	; (8009aa0 <HAL_DMA_IRQHandler+0xca0>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d013      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a6d      	ldr	r2, [pc, #436]	; (8009aa4 <HAL_DMA_IRQHandler+0xca4>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d00e      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a6b      	ldr	r2, [pc, #428]	; (8009aa8 <HAL_DMA_IRQHandler+0xca8>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d009      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a6a      	ldr	r2, [pc, #424]	; (8009aac <HAL_DMA_IRQHandler+0xcac>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d004      	beq.n	8009912 <HAL_DMA_IRQHandler+0xb12>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a68      	ldr	r2, [pc, #416]	; (8009ab0 <HAL_DMA_IRQHandler+0xcb0>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d108      	bne.n	8009924 <HAL_DMA_IRQHandler+0xb24>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f022 0208 	bic.w	r2, r2, #8
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	e007      	b.n	8009934 <HAL_DMA_IRQHandler+0xb34>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f022 0204 	bic.w	r2, r2, #4
 8009932:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 8165 	beq.w	8009c08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009946:	e15f      	b.n	8009c08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800994c:	f003 031f 	and.w	r3, r3, #31
 8009950:	2202      	movs	r2, #2
 8009952:	409a      	lsls	r2, r3
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	4013      	ands	r3, r2
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80c5 	beq.w	8009ae8 <HAL_DMA_IRQHandler+0xce8>
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f003 0302 	and.w	r3, r3, #2
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 80bf 	beq.w	8009ae8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800996e:	f003 031f 	and.w	r3, r3, #31
 8009972:	2202      	movs	r2, #2
 8009974:	409a      	lsls	r2, r3
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d018      	beq.n	80099b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d109      	bne.n	80099a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 813a 	beq.w	8009c0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099a0:	e134      	b.n	8009c0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 8130 	beq.w	8009c0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099b4:	e12a      	b.n	8009c0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	f003 0320 	and.w	r3, r3, #32
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f040 8089 	bne.w	8009ad4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a2b      	ldr	r2, [pc, #172]	; (8009a74 <HAL_DMA_IRQHandler+0xc74>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d04a      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a29      	ldr	r2, [pc, #164]	; (8009a78 <HAL_DMA_IRQHandler+0xc78>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d045      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a28      	ldr	r2, [pc, #160]	; (8009a7c <HAL_DMA_IRQHandler+0xc7c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d040      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a26      	ldr	r2, [pc, #152]	; (8009a80 <HAL_DMA_IRQHandler+0xc80>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d03b      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a25      	ldr	r2, [pc, #148]	; (8009a84 <HAL_DMA_IRQHandler+0xc84>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d036      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a23      	ldr	r2, [pc, #140]	; (8009a88 <HAL_DMA_IRQHandler+0xc88>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d031      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a22      	ldr	r2, [pc, #136]	; (8009a8c <HAL_DMA_IRQHandler+0xc8c>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d02c      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a20      	ldr	r2, [pc, #128]	; (8009a90 <HAL_DMA_IRQHandler+0xc90>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d027      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1f      	ldr	r2, [pc, #124]	; (8009a94 <HAL_DMA_IRQHandler+0xc94>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d022      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1d      	ldr	r2, [pc, #116]	; (8009a98 <HAL_DMA_IRQHandler+0xc98>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d01d      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1c      	ldr	r2, [pc, #112]	; (8009a9c <HAL_DMA_IRQHandler+0xc9c>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d018      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a1a      	ldr	r2, [pc, #104]	; (8009aa0 <HAL_DMA_IRQHandler+0xca0>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d013      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a19      	ldr	r2, [pc, #100]	; (8009aa4 <HAL_DMA_IRQHandler+0xca4>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d00e      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a17      	ldr	r2, [pc, #92]	; (8009aa8 <HAL_DMA_IRQHandler+0xca8>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d009      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a16      	ldr	r2, [pc, #88]	; (8009aac <HAL_DMA_IRQHandler+0xcac>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d004      	beq.n	8009a62 <HAL_DMA_IRQHandler+0xc62>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a14      	ldr	r2, [pc, #80]	; (8009ab0 <HAL_DMA_IRQHandler+0xcb0>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d128      	bne.n	8009ab4 <HAL_DMA_IRQHandler+0xcb4>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 0214 	bic.w	r2, r2, #20
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	e027      	b.n	8009ac4 <HAL_DMA_IRQHandler+0xcc4>
 8009a74:	40020010 	.word	0x40020010
 8009a78:	40020028 	.word	0x40020028
 8009a7c:	40020040 	.word	0x40020040
 8009a80:	40020058 	.word	0x40020058
 8009a84:	40020070 	.word	0x40020070
 8009a88:	40020088 	.word	0x40020088
 8009a8c:	400200a0 	.word	0x400200a0
 8009a90:	400200b8 	.word	0x400200b8
 8009a94:	40020410 	.word	0x40020410
 8009a98:	40020428 	.word	0x40020428
 8009a9c:	40020440 	.word	0x40020440
 8009aa0:	40020458 	.word	0x40020458
 8009aa4:	40020470 	.word	0x40020470
 8009aa8:	40020488 	.word	0x40020488
 8009aac:	400204a0 	.word	0x400204a0
 8009ab0:	400204b8 	.word	0x400204b8
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 020a 	bic.w	r2, r2, #10
 8009ac2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 8097 	beq.w	8009c0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009ae6:	e091      	b.n	8009c0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aec:	f003 031f 	and.w	r3, r3, #31
 8009af0:	2208      	movs	r2, #8
 8009af2:	409a      	lsls	r2, r3
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	4013      	ands	r3, r2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 8088 	beq.w	8009c0e <HAL_DMA_IRQHandler+0xe0e>
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f003 0308 	and.w	r3, r3, #8
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 8082 	beq.w	8009c0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a41      	ldr	r2, [pc, #260]	; (8009c14 <HAL_DMA_IRQHandler+0xe14>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d04a      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a3f      	ldr	r2, [pc, #252]	; (8009c18 <HAL_DMA_IRQHandler+0xe18>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d045      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a3e      	ldr	r2, [pc, #248]	; (8009c1c <HAL_DMA_IRQHandler+0xe1c>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d040      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a3c      	ldr	r2, [pc, #240]	; (8009c20 <HAL_DMA_IRQHandler+0xe20>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d03b      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a3b      	ldr	r2, [pc, #236]	; (8009c24 <HAL_DMA_IRQHandler+0xe24>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d036      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a39      	ldr	r2, [pc, #228]	; (8009c28 <HAL_DMA_IRQHandler+0xe28>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d031      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a38      	ldr	r2, [pc, #224]	; (8009c2c <HAL_DMA_IRQHandler+0xe2c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d02c      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a36      	ldr	r2, [pc, #216]	; (8009c30 <HAL_DMA_IRQHandler+0xe30>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d027      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a35      	ldr	r2, [pc, #212]	; (8009c34 <HAL_DMA_IRQHandler+0xe34>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d022      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a33      	ldr	r2, [pc, #204]	; (8009c38 <HAL_DMA_IRQHandler+0xe38>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d01d      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a32      	ldr	r2, [pc, #200]	; (8009c3c <HAL_DMA_IRQHandler+0xe3c>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d018      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a30      	ldr	r2, [pc, #192]	; (8009c40 <HAL_DMA_IRQHandler+0xe40>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d013      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a2f      	ldr	r2, [pc, #188]	; (8009c44 <HAL_DMA_IRQHandler+0xe44>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d00e      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a2d      	ldr	r2, [pc, #180]	; (8009c48 <HAL_DMA_IRQHandler+0xe48>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d009      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a2c      	ldr	r2, [pc, #176]	; (8009c4c <HAL_DMA_IRQHandler+0xe4c>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d004      	beq.n	8009baa <HAL_DMA_IRQHandler+0xdaa>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a2a      	ldr	r2, [pc, #168]	; (8009c50 <HAL_DMA_IRQHandler+0xe50>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d108      	bne.n	8009bbc <HAL_DMA_IRQHandler+0xdbc>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 021c 	bic.w	r2, r2, #28
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	e007      	b.n	8009bcc <HAL_DMA_IRQHandler+0xdcc>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 020e 	bic.w	r2, r2, #14
 8009bca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bd0:	f003 031f 	and.w	r3, r3, #31
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	409a      	lsls	r2, r3
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d009      	beq.n	8009c0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	4798      	blx	r3
 8009c02:	e004      	b.n	8009c0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009c04:	bf00      	nop
 8009c06:	e002      	b.n	8009c0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c08:	bf00      	nop
 8009c0a:	e000      	b.n	8009c0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009c0e:	3728      	adds	r7, #40	; 0x28
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	40020010 	.word	0x40020010
 8009c18:	40020028 	.word	0x40020028
 8009c1c:	40020040 	.word	0x40020040
 8009c20:	40020058 	.word	0x40020058
 8009c24:	40020070 	.word	0x40020070
 8009c28:	40020088 	.word	0x40020088
 8009c2c:	400200a0 	.word	0x400200a0
 8009c30:	400200b8 	.word	0x400200b8
 8009c34:	40020410 	.word	0x40020410
 8009c38:	40020428 	.word	0x40020428
 8009c3c:	40020440 	.word	0x40020440
 8009c40:	40020458 	.word	0x40020458
 8009c44:	40020470 	.word	0x40020470
 8009c48:	40020488 	.word	0x40020488
 8009c4c:	400204a0 	.word	0x400204a0
 8009c50:	400204b8 	.word	0x400204b8

08009c54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a7f      	ldr	r2, [pc, #508]	; (8009e70 <DMA_SetConfig+0x21c>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d072      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a7d      	ldr	r2, [pc, #500]	; (8009e74 <DMA_SetConfig+0x220>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d06d      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a7c      	ldr	r2, [pc, #496]	; (8009e78 <DMA_SetConfig+0x224>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d068      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a7a      	ldr	r2, [pc, #488]	; (8009e7c <DMA_SetConfig+0x228>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d063      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a79      	ldr	r2, [pc, #484]	; (8009e80 <DMA_SetConfig+0x22c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d05e      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a77      	ldr	r2, [pc, #476]	; (8009e84 <DMA_SetConfig+0x230>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d059      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a76      	ldr	r2, [pc, #472]	; (8009e88 <DMA_SetConfig+0x234>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d054      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a74      	ldr	r2, [pc, #464]	; (8009e8c <DMA_SetConfig+0x238>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d04f      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a73      	ldr	r2, [pc, #460]	; (8009e90 <DMA_SetConfig+0x23c>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d04a      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a71      	ldr	r2, [pc, #452]	; (8009e94 <DMA_SetConfig+0x240>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d045      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a70      	ldr	r2, [pc, #448]	; (8009e98 <DMA_SetConfig+0x244>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d040      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a6e      	ldr	r2, [pc, #440]	; (8009e9c <DMA_SetConfig+0x248>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d03b      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a6d      	ldr	r2, [pc, #436]	; (8009ea0 <DMA_SetConfig+0x24c>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d036      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a6b      	ldr	r2, [pc, #428]	; (8009ea4 <DMA_SetConfig+0x250>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d031      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a6a      	ldr	r2, [pc, #424]	; (8009ea8 <DMA_SetConfig+0x254>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d02c      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a68      	ldr	r2, [pc, #416]	; (8009eac <DMA_SetConfig+0x258>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d027      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a67      	ldr	r2, [pc, #412]	; (8009eb0 <DMA_SetConfig+0x25c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d022      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a65      	ldr	r2, [pc, #404]	; (8009eb4 <DMA_SetConfig+0x260>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d01d      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a64      	ldr	r2, [pc, #400]	; (8009eb8 <DMA_SetConfig+0x264>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d018      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a62      	ldr	r2, [pc, #392]	; (8009ebc <DMA_SetConfig+0x268>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d013      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a61      	ldr	r2, [pc, #388]	; (8009ec0 <DMA_SetConfig+0x26c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d00e      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a5f      	ldr	r2, [pc, #380]	; (8009ec4 <DMA_SetConfig+0x270>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d009      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a5e      	ldr	r2, [pc, #376]	; (8009ec8 <DMA_SetConfig+0x274>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d004      	beq.n	8009d5e <DMA_SetConfig+0x10a>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a5c      	ldr	r2, [pc, #368]	; (8009ecc <DMA_SetConfig+0x278>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d101      	bne.n	8009d62 <DMA_SetConfig+0x10e>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e000      	b.n	8009d64 <DMA_SetConfig+0x110>
 8009d62:	2300      	movs	r3, #0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00d      	beq.n	8009d84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009d70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d004      	beq.n	8009d84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009d82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a39      	ldr	r2, [pc, #228]	; (8009e70 <DMA_SetConfig+0x21c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d04a      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a38      	ldr	r2, [pc, #224]	; (8009e74 <DMA_SetConfig+0x220>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d045      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a36      	ldr	r2, [pc, #216]	; (8009e78 <DMA_SetConfig+0x224>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d040      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a35      	ldr	r2, [pc, #212]	; (8009e7c <DMA_SetConfig+0x228>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d03b      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a33      	ldr	r2, [pc, #204]	; (8009e80 <DMA_SetConfig+0x22c>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d036      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a32      	ldr	r2, [pc, #200]	; (8009e84 <DMA_SetConfig+0x230>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d031      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a30      	ldr	r2, [pc, #192]	; (8009e88 <DMA_SetConfig+0x234>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d02c      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a2f      	ldr	r2, [pc, #188]	; (8009e8c <DMA_SetConfig+0x238>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d027      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a2d      	ldr	r2, [pc, #180]	; (8009e90 <DMA_SetConfig+0x23c>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d022      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a2c      	ldr	r2, [pc, #176]	; (8009e94 <DMA_SetConfig+0x240>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d01d      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a2a      	ldr	r2, [pc, #168]	; (8009e98 <DMA_SetConfig+0x244>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d018      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a29      	ldr	r2, [pc, #164]	; (8009e9c <DMA_SetConfig+0x248>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d013      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a27      	ldr	r2, [pc, #156]	; (8009ea0 <DMA_SetConfig+0x24c>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d00e      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a26      	ldr	r2, [pc, #152]	; (8009ea4 <DMA_SetConfig+0x250>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d009      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a24      	ldr	r2, [pc, #144]	; (8009ea8 <DMA_SetConfig+0x254>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d004      	beq.n	8009e24 <DMA_SetConfig+0x1d0>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a23      	ldr	r2, [pc, #140]	; (8009eac <DMA_SetConfig+0x258>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d101      	bne.n	8009e28 <DMA_SetConfig+0x1d4>
 8009e24:	2301      	movs	r3, #1
 8009e26:	e000      	b.n	8009e2a <DMA_SetConfig+0x1d6>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d059      	beq.n	8009ee2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e32:	f003 031f 	and.w	r3, r3, #31
 8009e36:	223f      	movs	r2, #63	; 0x3f
 8009e38:	409a      	lsls	r2, r3
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	2b40      	cmp	r3, #64	; 0x40
 8009e5c:	d138      	bne.n	8009ed0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009e6e:	e086      	b.n	8009f7e <DMA_SetConfig+0x32a>
 8009e70:	40020010 	.word	0x40020010
 8009e74:	40020028 	.word	0x40020028
 8009e78:	40020040 	.word	0x40020040
 8009e7c:	40020058 	.word	0x40020058
 8009e80:	40020070 	.word	0x40020070
 8009e84:	40020088 	.word	0x40020088
 8009e88:	400200a0 	.word	0x400200a0
 8009e8c:	400200b8 	.word	0x400200b8
 8009e90:	40020410 	.word	0x40020410
 8009e94:	40020428 	.word	0x40020428
 8009e98:	40020440 	.word	0x40020440
 8009e9c:	40020458 	.word	0x40020458
 8009ea0:	40020470 	.word	0x40020470
 8009ea4:	40020488 	.word	0x40020488
 8009ea8:	400204a0 	.word	0x400204a0
 8009eac:	400204b8 	.word	0x400204b8
 8009eb0:	58025408 	.word	0x58025408
 8009eb4:	5802541c 	.word	0x5802541c
 8009eb8:	58025430 	.word	0x58025430
 8009ebc:	58025444 	.word	0x58025444
 8009ec0:	58025458 	.word	0x58025458
 8009ec4:	5802546c 	.word	0x5802546c
 8009ec8:	58025480 	.word	0x58025480
 8009ecc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	60da      	str	r2, [r3, #12]
}
 8009ee0:	e04d      	b.n	8009f7e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a29      	ldr	r2, [pc, #164]	; (8009f8c <DMA_SetConfig+0x338>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d022      	beq.n	8009f32 <DMA_SetConfig+0x2de>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a27      	ldr	r2, [pc, #156]	; (8009f90 <DMA_SetConfig+0x33c>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d01d      	beq.n	8009f32 <DMA_SetConfig+0x2de>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a26      	ldr	r2, [pc, #152]	; (8009f94 <DMA_SetConfig+0x340>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d018      	beq.n	8009f32 <DMA_SetConfig+0x2de>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a24      	ldr	r2, [pc, #144]	; (8009f98 <DMA_SetConfig+0x344>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d013      	beq.n	8009f32 <DMA_SetConfig+0x2de>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a23      	ldr	r2, [pc, #140]	; (8009f9c <DMA_SetConfig+0x348>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d00e      	beq.n	8009f32 <DMA_SetConfig+0x2de>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a21      	ldr	r2, [pc, #132]	; (8009fa0 <DMA_SetConfig+0x34c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d009      	beq.n	8009f32 <DMA_SetConfig+0x2de>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a20      	ldr	r2, [pc, #128]	; (8009fa4 <DMA_SetConfig+0x350>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d004      	beq.n	8009f32 <DMA_SetConfig+0x2de>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a1e      	ldr	r2, [pc, #120]	; (8009fa8 <DMA_SetConfig+0x354>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d101      	bne.n	8009f36 <DMA_SetConfig+0x2e2>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e000      	b.n	8009f38 <DMA_SetConfig+0x2e4>
 8009f36:	2300      	movs	r3, #0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d020      	beq.n	8009f7e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f40:	f003 031f 	and.w	r3, r3, #31
 8009f44:	2201      	movs	r2, #1
 8009f46:	409a      	lsls	r2, r3
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	2b40      	cmp	r3, #64	; 0x40
 8009f5a:	d108      	bne.n	8009f6e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	60da      	str	r2, [r3, #12]
}
 8009f6c:	e007      	b.n	8009f7e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	60da      	str	r2, [r3, #12]
}
 8009f7e:	bf00      	nop
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	58025408 	.word	0x58025408
 8009f90:	5802541c 	.word	0x5802541c
 8009f94:	58025430 	.word	0x58025430
 8009f98:	58025444 	.word	0x58025444
 8009f9c:	58025458 	.word	0x58025458
 8009fa0:	5802546c 	.word	0x5802546c
 8009fa4:	58025480 	.word	0x58025480
 8009fa8:	58025494 	.word	0x58025494

08009fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a42      	ldr	r2, [pc, #264]	; (800a0c4 <DMA_CalcBaseAndBitshift+0x118>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d04a      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a41      	ldr	r2, [pc, #260]	; (800a0c8 <DMA_CalcBaseAndBitshift+0x11c>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d045      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a3f      	ldr	r2, [pc, #252]	; (800a0cc <DMA_CalcBaseAndBitshift+0x120>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d040      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a3e      	ldr	r2, [pc, #248]	; (800a0d0 <DMA_CalcBaseAndBitshift+0x124>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d03b      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a3c      	ldr	r2, [pc, #240]	; (800a0d4 <DMA_CalcBaseAndBitshift+0x128>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d036      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a3b      	ldr	r2, [pc, #236]	; (800a0d8 <DMA_CalcBaseAndBitshift+0x12c>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d031      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a39      	ldr	r2, [pc, #228]	; (800a0dc <DMA_CalcBaseAndBitshift+0x130>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d02c      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a38      	ldr	r2, [pc, #224]	; (800a0e0 <DMA_CalcBaseAndBitshift+0x134>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d027      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a36      	ldr	r2, [pc, #216]	; (800a0e4 <DMA_CalcBaseAndBitshift+0x138>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d022      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a35      	ldr	r2, [pc, #212]	; (800a0e8 <DMA_CalcBaseAndBitshift+0x13c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d01d      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a33      	ldr	r2, [pc, #204]	; (800a0ec <DMA_CalcBaseAndBitshift+0x140>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d018      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a32      	ldr	r2, [pc, #200]	; (800a0f0 <DMA_CalcBaseAndBitshift+0x144>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d013      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a30      	ldr	r2, [pc, #192]	; (800a0f4 <DMA_CalcBaseAndBitshift+0x148>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d00e      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a2f      	ldr	r2, [pc, #188]	; (800a0f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d009      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a2d      	ldr	r2, [pc, #180]	; (800a0fc <DMA_CalcBaseAndBitshift+0x150>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d004      	beq.n	800a054 <DMA_CalcBaseAndBitshift+0xa8>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a2c      	ldr	r2, [pc, #176]	; (800a100 <DMA_CalcBaseAndBitshift+0x154>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d101      	bne.n	800a058 <DMA_CalcBaseAndBitshift+0xac>
 800a054:	2301      	movs	r3, #1
 800a056:	e000      	b.n	800a05a <DMA_CalcBaseAndBitshift+0xae>
 800a058:	2300      	movs	r3, #0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d024      	beq.n	800a0a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	3b10      	subs	r3, #16
 800a066:	4a27      	ldr	r2, [pc, #156]	; (800a104 <DMA_CalcBaseAndBitshift+0x158>)
 800a068:	fba2 2303 	umull	r2, r3, r2, r3
 800a06c:	091b      	lsrs	r3, r3, #4
 800a06e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f003 0307 	and.w	r3, r3, #7
 800a076:	4a24      	ldr	r2, [pc, #144]	; (800a108 <DMA_CalcBaseAndBitshift+0x15c>)
 800a078:	5cd3      	ldrb	r3, [r2, r3]
 800a07a:	461a      	mov	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b03      	cmp	r3, #3
 800a084:	d908      	bls.n	800a098 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	4b1f      	ldr	r3, [pc, #124]	; (800a10c <DMA_CalcBaseAndBitshift+0x160>)
 800a08e:	4013      	ands	r3, r2
 800a090:	1d1a      	adds	r2, r3, #4
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	659a      	str	r2, [r3, #88]	; 0x58
 800a096:	e00d      	b.n	800a0b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	4b1b      	ldr	r3, [pc, #108]	; (800a10c <DMA_CalcBaseAndBitshift+0x160>)
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	6593      	str	r3, [r2, #88]	; 0x58
 800a0a6:	e005      	b.n	800a0b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	40020010 	.word	0x40020010
 800a0c8:	40020028 	.word	0x40020028
 800a0cc:	40020040 	.word	0x40020040
 800a0d0:	40020058 	.word	0x40020058
 800a0d4:	40020070 	.word	0x40020070
 800a0d8:	40020088 	.word	0x40020088
 800a0dc:	400200a0 	.word	0x400200a0
 800a0e0:	400200b8 	.word	0x400200b8
 800a0e4:	40020410 	.word	0x40020410
 800a0e8:	40020428 	.word	0x40020428
 800a0ec:	40020440 	.word	0x40020440
 800a0f0:	40020458 	.word	0x40020458
 800a0f4:	40020470 	.word	0x40020470
 800a0f8:	40020488 	.word	0x40020488
 800a0fc:	400204a0 	.word	0x400204a0
 800a100:	400204b8 	.word	0x400204b8
 800a104:	aaaaaaab 	.word	0xaaaaaaab
 800a108:	08015304 	.word	0x08015304
 800a10c:	fffffc00 	.word	0xfffffc00

0800a110 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d120      	bne.n	800a166 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d858      	bhi.n	800a1de <DMA_CheckFifoParam+0xce>
 800a12c:	a201      	add	r2, pc, #4	; (adr r2, 800a134 <DMA_CheckFifoParam+0x24>)
 800a12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a132:	bf00      	nop
 800a134:	0800a145 	.word	0x0800a145
 800a138:	0800a157 	.word	0x0800a157
 800a13c:	0800a145 	.word	0x0800a145
 800a140:	0800a1df 	.word	0x0800a1df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d048      	beq.n	800a1e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a154:	e045      	b.n	800a1e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a15e:	d142      	bne.n	800a1e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a164:	e03f      	b.n	800a1e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a16e:	d123      	bne.n	800a1b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a174:	2b03      	cmp	r3, #3
 800a176:	d838      	bhi.n	800a1ea <DMA_CheckFifoParam+0xda>
 800a178:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <DMA_CheckFifoParam+0x70>)
 800a17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17e:	bf00      	nop
 800a180:	0800a191 	.word	0x0800a191
 800a184:	0800a197 	.word	0x0800a197
 800a188:	0800a191 	.word	0x0800a191
 800a18c:	0800a1a9 	.word	0x0800a1a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	73fb      	strb	r3, [r7, #15]
        break;
 800a194:	e030      	b.n	800a1f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d025      	beq.n	800a1ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a1a6:	e022      	b.n	800a1ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a1b0:	d11f      	bne.n	800a1f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a1b6:	e01c      	b.n	800a1f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d902      	bls.n	800a1c6 <DMA_CheckFifoParam+0xb6>
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d003      	beq.n	800a1cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a1c4:	e018      	b.n	800a1f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	73fb      	strb	r3, [r7, #15]
        break;
 800a1ca:	e015      	b.n	800a1f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00e      	beq.n	800a1f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	73fb      	strb	r3, [r7, #15]
    break;
 800a1dc:	e00b      	b.n	800a1f6 <DMA_CheckFifoParam+0xe6>
        break;
 800a1de:	bf00      	nop
 800a1e0:	e00a      	b.n	800a1f8 <DMA_CheckFifoParam+0xe8>
        break;
 800a1e2:	bf00      	nop
 800a1e4:	e008      	b.n	800a1f8 <DMA_CheckFifoParam+0xe8>
        break;
 800a1e6:	bf00      	nop
 800a1e8:	e006      	b.n	800a1f8 <DMA_CheckFifoParam+0xe8>
        break;
 800a1ea:	bf00      	nop
 800a1ec:	e004      	b.n	800a1f8 <DMA_CheckFifoParam+0xe8>
        break;
 800a1ee:	bf00      	nop
 800a1f0:	e002      	b.n	800a1f8 <DMA_CheckFifoParam+0xe8>
        break;
 800a1f2:	bf00      	nop
 800a1f4:	e000      	b.n	800a1f8 <DMA_CheckFifoParam+0xe8>
    break;
 800a1f6:	bf00      	nop
    }
  }

  return status;
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop

0800a208 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a38      	ldr	r2, [pc, #224]	; (800a2fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d022      	beq.n	800a266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a36      	ldr	r2, [pc, #216]	; (800a300 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d01d      	beq.n	800a266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a35      	ldr	r2, [pc, #212]	; (800a304 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d018      	beq.n	800a266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a33      	ldr	r2, [pc, #204]	; (800a308 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d013      	beq.n	800a266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a32      	ldr	r2, [pc, #200]	; (800a30c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d00e      	beq.n	800a266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a30      	ldr	r2, [pc, #192]	; (800a310 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d009      	beq.n	800a266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a2f      	ldr	r2, [pc, #188]	; (800a314 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d004      	beq.n	800a266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a2d      	ldr	r2, [pc, #180]	; (800a318 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d101      	bne.n	800a26a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a266:	2301      	movs	r3, #1
 800a268:	e000      	b.n	800a26c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a26a:	2300      	movs	r3, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d01a      	beq.n	800a2a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	b2db      	uxtb	r3, r3
 800a276:	3b08      	subs	r3, #8
 800a278:	4a28      	ldr	r2, [pc, #160]	; (800a31c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a27a:	fba2 2303 	umull	r2, r3, r2, r3
 800a27e:	091b      	lsrs	r3, r3, #4
 800a280:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	4b26      	ldr	r3, [pc, #152]	; (800a320 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a286:	4413      	add	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	461a      	mov	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a24      	ldr	r2, [pc, #144]	; (800a324 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a294:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f003 031f 	and.w	r3, r3, #31
 800a29c:	2201      	movs	r2, #1
 800a29e:	409a      	lsls	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a2a4:	e024      	b.n	800a2f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	3b10      	subs	r3, #16
 800a2ae:	4a1e      	ldr	r2, [pc, #120]	; (800a328 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a2b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b4:	091b      	lsrs	r3, r3, #4
 800a2b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	4a1c      	ldr	r2, [pc, #112]	; (800a32c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d806      	bhi.n	800a2ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	4a1b      	ldr	r2, [pc, #108]	; (800a330 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d902      	bls.n	800a2ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	4b18      	ldr	r3, [pc, #96]	; (800a334 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a2d2:	4413      	add	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a16      	ldr	r2, [pc, #88]	; (800a338 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a2e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f003 031f 	and.w	r3, r3, #31
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	409a      	lsls	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a2f0:	bf00      	nop
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr
 800a2fc:	58025408 	.word	0x58025408
 800a300:	5802541c 	.word	0x5802541c
 800a304:	58025430 	.word	0x58025430
 800a308:	58025444 	.word	0x58025444
 800a30c:	58025458 	.word	0x58025458
 800a310:	5802546c 	.word	0x5802546c
 800a314:	58025480 	.word	0x58025480
 800a318:	58025494 	.word	0x58025494
 800a31c:	cccccccd 	.word	0xcccccccd
 800a320:	16009600 	.word	0x16009600
 800a324:	58025880 	.word	0x58025880
 800a328:	aaaaaaab 	.word	0xaaaaaaab
 800a32c:	400204b8 	.word	0x400204b8
 800a330:	4002040f 	.word	0x4002040f
 800a334:	10008200 	.word	0x10008200
 800a338:	40020880 	.word	0x40020880

0800a33c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d04a      	beq.n	800a3e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2b08      	cmp	r3, #8
 800a356:	d847      	bhi.n	800a3e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a25      	ldr	r2, [pc, #148]	; (800a3f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d022      	beq.n	800a3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a24      	ldr	r2, [pc, #144]	; (800a3f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d01d      	beq.n	800a3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a22      	ldr	r2, [pc, #136]	; (800a3fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d018      	beq.n	800a3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a21      	ldr	r2, [pc, #132]	; (800a400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d013      	beq.n	800a3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a1f      	ldr	r2, [pc, #124]	; (800a404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d00e      	beq.n	800a3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a1e      	ldr	r2, [pc, #120]	; (800a408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d009      	beq.n	800a3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a1c      	ldr	r2, [pc, #112]	; (800a40c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d004      	beq.n	800a3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a1b      	ldr	r2, [pc, #108]	; (800a410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d101      	bne.n	800a3ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e000      	b.n	800a3ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00a      	beq.n	800a3c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	4b17      	ldr	r3, [pc, #92]	; (800a414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a15      	ldr	r2, [pc, #84]	; (800a418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a3c4:	671a      	str	r2, [r3, #112]	; 0x70
 800a3c6:	e009      	b.n	800a3dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	4b14      	ldr	r3, [pc, #80]	; (800a41c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a11      	ldr	r2, [pc, #68]	; (800a420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a3da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	409a      	lsls	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a3e8:	bf00      	nop
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	58025408 	.word	0x58025408
 800a3f8:	5802541c 	.word	0x5802541c
 800a3fc:	58025430 	.word	0x58025430
 800a400:	58025444 	.word	0x58025444
 800a404:	58025458 	.word	0x58025458
 800a408:	5802546c 	.word	0x5802546c
 800a40c:	58025480 	.word	0x58025480
 800a410:	58025494 	.word	0x58025494
 800a414:	1600963f 	.word	0x1600963f
 800a418:	58025940 	.word	0x58025940
 800a41c:	1000823f 	.word	0x1000823f
 800a420:	40020940 	.word	0x40020940

0800a424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a424:	b480      	push	{r7}
 800a426:	b089      	sub	sp, #36	; 0x24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a42e:	2300      	movs	r3, #0
 800a430:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a432:	4b89      	ldr	r3, [pc, #548]	; (800a658 <HAL_GPIO_Init+0x234>)
 800a434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a436:	e194      	b.n	800a762 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	2101      	movs	r1, #1
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	fa01 f303 	lsl.w	r3, r1, r3
 800a444:	4013      	ands	r3, r2
 800a446:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f000 8186 	beq.w	800a75c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f003 0303 	and.w	r3, r3, #3
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d005      	beq.n	800a468 <HAL_GPIO_Init+0x44>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f003 0303 	and.w	r3, r3, #3
 800a464:	2b02      	cmp	r3, #2
 800a466:	d130      	bne.n	800a4ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	005b      	lsls	r3, r3, #1
 800a472:	2203      	movs	r2, #3
 800a474:	fa02 f303 	lsl.w	r3, r2, r3
 800a478:	43db      	mvns	r3, r3
 800a47a:	69ba      	ldr	r2, [r7, #24]
 800a47c:	4013      	ands	r3, r2
 800a47e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	68da      	ldr	r2, [r3, #12]
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	005b      	lsls	r3, r3, #1
 800a488:	fa02 f303 	lsl.w	r3, r2, r3
 800a48c:	69ba      	ldr	r2, [r7, #24]
 800a48e:	4313      	orrs	r3, r2
 800a490:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a49e:	2201      	movs	r2, #1
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a6:	43db      	mvns	r3, r3
 800a4a8:	69ba      	ldr	r2, [r7, #24]
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	091b      	lsrs	r3, r3, #4
 800a4b4:	f003 0201 	and.w	r2, r3, #1
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a4be:	69ba      	ldr	r2, [r7, #24]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f003 0303 	and.w	r3, r3, #3
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d017      	beq.n	800a506 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e6:	43db      	mvns	r3, r3
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	689a      	ldr	r2, [r3, #8]
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	69ba      	ldr	r2, [r7, #24]
 800a504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	f003 0303 	and.w	r3, r3, #3
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d123      	bne.n	800a55a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	08da      	lsrs	r2, r3, #3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	3208      	adds	r2, #8
 800a51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	f003 0307 	and.w	r3, r3, #7
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	220f      	movs	r2, #15
 800a52a:	fa02 f303 	lsl.w	r3, r2, r3
 800a52e:	43db      	mvns	r3, r3
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	4013      	ands	r3, r2
 800a534:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	691a      	ldr	r2, [r3, #16]
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	f003 0307 	and.w	r3, r3, #7
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	fa02 f303 	lsl.w	r3, r2, r3
 800a546:	69ba      	ldr	r2, [r7, #24]
 800a548:	4313      	orrs	r3, r2
 800a54a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	08da      	lsrs	r2, r3, #3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3208      	adds	r2, #8
 800a554:	69b9      	ldr	r1, [r7, #24]
 800a556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	2203      	movs	r2, #3
 800a566:	fa02 f303 	lsl.w	r3, r2, r3
 800a56a:	43db      	mvns	r3, r3
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	4013      	ands	r3, r2
 800a570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f003 0203 	and.w	r2, r3, #3
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	fa02 f303 	lsl.w	r3, r2, r3
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	4313      	orrs	r3, r2
 800a586:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 80e0 	beq.w	800a75c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a59c:	4b2f      	ldr	r3, [pc, #188]	; (800a65c <HAL_GPIO_Init+0x238>)
 800a59e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a5a2:	4a2e      	ldr	r2, [pc, #184]	; (800a65c <HAL_GPIO_Init+0x238>)
 800a5a4:	f043 0302 	orr.w	r3, r3, #2
 800a5a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a5ac:	4b2b      	ldr	r3, [pc, #172]	; (800a65c <HAL_GPIO_Init+0x238>)
 800a5ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a5b2:	f003 0302 	and.w	r3, r3, #2
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a5ba:	4a29      	ldr	r2, [pc, #164]	; (800a660 <HAL_GPIO_Init+0x23c>)
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	089b      	lsrs	r3, r3, #2
 800a5c0:	3302      	adds	r3, #2
 800a5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	f003 0303 	and.w	r3, r3, #3
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	220f      	movs	r2, #15
 800a5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d6:	43db      	mvns	r3, r3
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	4013      	ands	r3, r2
 800a5dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4a20      	ldr	r2, [pc, #128]	; (800a664 <HAL_GPIO_Init+0x240>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d052      	beq.n	800a68c <HAL_GPIO_Init+0x268>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a1f      	ldr	r2, [pc, #124]	; (800a668 <HAL_GPIO_Init+0x244>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d031      	beq.n	800a652 <HAL_GPIO_Init+0x22e>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a1e      	ldr	r2, [pc, #120]	; (800a66c <HAL_GPIO_Init+0x248>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d02b      	beq.n	800a64e <HAL_GPIO_Init+0x22a>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a1d      	ldr	r2, [pc, #116]	; (800a670 <HAL_GPIO_Init+0x24c>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d025      	beq.n	800a64a <HAL_GPIO_Init+0x226>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a1c      	ldr	r2, [pc, #112]	; (800a674 <HAL_GPIO_Init+0x250>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d01f      	beq.n	800a646 <HAL_GPIO_Init+0x222>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a1b      	ldr	r2, [pc, #108]	; (800a678 <HAL_GPIO_Init+0x254>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d019      	beq.n	800a642 <HAL_GPIO_Init+0x21e>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a1a      	ldr	r2, [pc, #104]	; (800a67c <HAL_GPIO_Init+0x258>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d013      	beq.n	800a63e <HAL_GPIO_Init+0x21a>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a19      	ldr	r2, [pc, #100]	; (800a680 <HAL_GPIO_Init+0x25c>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d00d      	beq.n	800a63a <HAL_GPIO_Init+0x216>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a18      	ldr	r2, [pc, #96]	; (800a684 <HAL_GPIO_Init+0x260>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d007      	beq.n	800a636 <HAL_GPIO_Init+0x212>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a17      	ldr	r2, [pc, #92]	; (800a688 <HAL_GPIO_Init+0x264>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d101      	bne.n	800a632 <HAL_GPIO_Init+0x20e>
 800a62e:	2309      	movs	r3, #9
 800a630:	e02d      	b.n	800a68e <HAL_GPIO_Init+0x26a>
 800a632:	230a      	movs	r3, #10
 800a634:	e02b      	b.n	800a68e <HAL_GPIO_Init+0x26a>
 800a636:	2308      	movs	r3, #8
 800a638:	e029      	b.n	800a68e <HAL_GPIO_Init+0x26a>
 800a63a:	2307      	movs	r3, #7
 800a63c:	e027      	b.n	800a68e <HAL_GPIO_Init+0x26a>
 800a63e:	2306      	movs	r3, #6
 800a640:	e025      	b.n	800a68e <HAL_GPIO_Init+0x26a>
 800a642:	2305      	movs	r3, #5
 800a644:	e023      	b.n	800a68e <HAL_GPIO_Init+0x26a>
 800a646:	2304      	movs	r3, #4
 800a648:	e021      	b.n	800a68e <HAL_GPIO_Init+0x26a>
 800a64a:	2303      	movs	r3, #3
 800a64c:	e01f      	b.n	800a68e <HAL_GPIO_Init+0x26a>
 800a64e:	2302      	movs	r3, #2
 800a650:	e01d      	b.n	800a68e <HAL_GPIO_Init+0x26a>
 800a652:	2301      	movs	r3, #1
 800a654:	e01b      	b.n	800a68e <HAL_GPIO_Init+0x26a>
 800a656:	bf00      	nop
 800a658:	58000080 	.word	0x58000080
 800a65c:	58024400 	.word	0x58024400
 800a660:	58000400 	.word	0x58000400
 800a664:	58020000 	.word	0x58020000
 800a668:	58020400 	.word	0x58020400
 800a66c:	58020800 	.word	0x58020800
 800a670:	58020c00 	.word	0x58020c00
 800a674:	58021000 	.word	0x58021000
 800a678:	58021400 	.word	0x58021400
 800a67c:	58021800 	.word	0x58021800
 800a680:	58021c00 	.word	0x58021c00
 800a684:	58022000 	.word	0x58022000
 800a688:	58022400 	.word	0x58022400
 800a68c:	2300      	movs	r3, #0
 800a68e:	69fa      	ldr	r2, [r7, #28]
 800a690:	f002 0203 	and.w	r2, r2, #3
 800a694:	0092      	lsls	r2, r2, #2
 800a696:	4093      	lsls	r3, r2
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a69e:	4938      	ldr	r1, [pc, #224]	; (800a780 <HAL_GPIO_Init+0x35c>)
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	089b      	lsrs	r3, r3, #2
 800a6a4:	3302      	adds	r3, #2
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a6ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	43db      	mvns	r3, r3
 800a6b8:	69ba      	ldr	r2, [r7, #24]
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a6d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a6da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	43db      	mvns	r3, r3
 800a6e6:	69ba      	ldr	r2, [r7, #24]
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a6f8:	69ba      	ldr	r2, [r7, #24]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	43db      	mvns	r3, r3
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	4013      	ands	r3, r2
 800a716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	4313      	orrs	r3, r2
 800a72a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	69ba      	ldr	r2, [r7, #24]
 800a730:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	43db      	mvns	r3, r3
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	4013      	ands	r3, r2
 800a740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	4313      	orrs	r3, r2
 800a754:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	3301      	adds	r3, #1
 800a760:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	fa22 f303 	lsr.w	r3, r2, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f47f ae63 	bne.w	800a438 <HAL_GPIO_Init+0x14>
  }
}
 800a772:	bf00      	nop
 800a774:	bf00      	nop
 800a776:	3724      	adds	r7, #36	; 0x24
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr
 800a780:	58000400 	.word	0x58000400

0800a784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	807b      	strh	r3, [r7, #2]
 800a790:	4613      	mov	r3, r2
 800a792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a794:	787b      	ldrb	r3, [r7, #1]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a79a:	887a      	ldrh	r2, [r7, #2]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a7a0:	e003      	b.n	800a7aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a7a2:	887b      	ldrh	r3, [r7, #2]
 800a7a4:	041a      	lsls	r2, r3, #16
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	619a      	str	r2, [r3, #24]
}
 800a7aa:	bf00      	nop
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	4603      	mov	r3, r0
 800a7be:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a7c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a7c8:	88fb      	ldrh	r3, [r7, #6]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d008      	beq.n	800a7e2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a7d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7d4:	88fb      	ldrh	r3, [r7, #6]
 800a7d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a7da:	88fb      	ldrh	r3, [r7, #6]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fa fb67 	bl	8004eb0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a7e2:	bf00      	nop
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a7f4:	4b19      	ldr	r3, [pc, #100]	; (800a85c <HAL_PWREx_ConfigSupply+0x70>)
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f003 0304 	and.w	r3, r3, #4
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	d00a      	beq.n	800a816 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a800:	4b16      	ldr	r3, [pc, #88]	; (800a85c <HAL_PWREx_ConfigSupply+0x70>)
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f003 0307 	and.w	r3, r3, #7
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d001      	beq.n	800a812 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e01f      	b.n	800a852 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	e01d      	b.n	800a852 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a816:	4b11      	ldr	r3, [pc, #68]	; (800a85c <HAL_PWREx_ConfigSupply+0x70>)
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f023 0207 	bic.w	r2, r3, #7
 800a81e:	490f      	ldr	r1, [pc, #60]	; (800a85c <HAL_PWREx_ConfigSupply+0x70>)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4313      	orrs	r3, r2
 800a824:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a826:	f7fc fc6b 	bl	8007100 <HAL_GetTick>
 800a82a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a82c:	e009      	b.n	800a842 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a82e:	f7fc fc67 	bl	8007100 <HAL_GetTick>
 800a832:	4602      	mov	r2, r0
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a83c:	d901      	bls.n	800a842 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e007      	b.n	800a852 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a842:	4b06      	ldr	r3, [pc, #24]	; (800a85c <HAL_PWREx_ConfigSupply+0x70>)
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a84a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a84e:	d1ee      	bne.n	800a82e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	58024800 	.word	0x58024800

0800a860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08c      	sub	sp, #48	; 0x30
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d102      	bne.n	800a874 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	f000 bc1d 	b.w	800b0ae <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 8087 	beq.w	800a990 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a882:	4b99      	ldr	r3, [pc, #612]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a88a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a88c:	4b96      	ldr	r3, [pc, #600]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a890:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	2b10      	cmp	r3, #16
 800a896:	d007      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x48>
 800a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89a:	2b18      	cmp	r3, #24
 800a89c:	d110      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x60>
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	f003 0303 	and.w	r3, r3, #3
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d10b      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8a8:	4b8f      	ldr	r3, [pc, #572]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d06c      	beq.n	800a98e <HAL_RCC_OscConfig+0x12e>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d168      	bne.n	800a98e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e3f6      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8c8:	d106      	bne.n	800a8d8 <HAL_RCC_OscConfig+0x78>
 800a8ca:	4b87      	ldr	r3, [pc, #540]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a86      	ldr	r2, [pc, #536]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a8d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	e02e      	b.n	800a936 <HAL_RCC_OscConfig+0xd6>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10c      	bne.n	800a8fa <HAL_RCC_OscConfig+0x9a>
 800a8e0:	4b81      	ldr	r3, [pc, #516]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a80      	ldr	r2, [pc, #512]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a8e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	4b7e      	ldr	r3, [pc, #504]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a7d      	ldr	r2, [pc, #500]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a8f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	e01d      	b.n	800a936 <HAL_RCC_OscConfig+0xd6>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a902:	d10c      	bne.n	800a91e <HAL_RCC_OscConfig+0xbe>
 800a904:	4b78      	ldr	r3, [pc, #480]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a77      	ldr	r2, [pc, #476]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a90a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a90e:	6013      	str	r3, [r2, #0]
 800a910:	4b75      	ldr	r3, [pc, #468]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a74      	ldr	r2, [pc, #464]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	e00b      	b.n	800a936 <HAL_RCC_OscConfig+0xd6>
 800a91e:	4b72      	ldr	r3, [pc, #456]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a71      	ldr	r2, [pc, #452]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	4b6f      	ldr	r3, [pc, #444]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a6e      	ldr	r2, [pc, #440]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a934:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d013      	beq.n	800a966 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a93e:	f7fc fbdf 	bl	8007100 <HAL_GetTick>
 800a942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a944:	e008      	b.n	800a958 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a946:	f7fc fbdb 	bl	8007100 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	2b64      	cmp	r3, #100	; 0x64
 800a952:	d901      	bls.n	800a958 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e3aa      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a958:	4b63      	ldr	r3, [pc, #396]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d0f0      	beq.n	800a946 <HAL_RCC_OscConfig+0xe6>
 800a964:	e014      	b.n	800a990 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a966:	f7fc fbcb 	bl	8007100 <HAL_GetTick>
 800a96a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a96c:	e008      	b.n	800a980 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a96e:	f7fc fbc7 	bl	8007100 <HAL_GetTick>
 800a972:	4602      	mov	r2, r0
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	2b64      	cmp	r3, #100	; 0x64
 800a97a:	d901      	bls.n	800a980 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a97c:	2303      	movs	r3, #3
 800a97e:	e396      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a980:	4b59      	ldr	r3, [pc, #356]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1f0      	bne.n	800a96e <HAL_RCC_OscConfig+0x10e>
 800a98c:	e000      	b.n	800a990 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a98e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 80cb 	beq.w	800ab34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a99e:	4b52      	ldr	r3, [pc, #328]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9a8:	4b4f      	ldr	r3, [pc, #316]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d007      	beq.n	800a9c4 <HAL_RCC_OscConfig+0x164>
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	2b18      	cmp	r3, #24
 800a9b8:	d156      	bne.n	800aa68 <HAL_RCC_OscConfig+0x208>
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	f003 0303 	and.w	r3, r3, #3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d151      	bne.n	800aa68 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9c4:	4b48      	ldr	r3, [pc, #288]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d005      	beq.n	800a9dc <HAL_RCC_OscConfig+0x17c>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e368      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a9dc:	4b42      	ldr	r3, [pc, #264]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f023 0219 	bic.w	r2, r3, #25
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	493f      	ldr	r1, [pc, #252]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a9ee:	f7fc fb87 	bl	8007100 <HAL_GetTick>
 800a9f2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9f4:	e008      	b.n	800aa08 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9f6:	f7fc fb83 	bl	8007100 <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d901      	bls.n	800aa08 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e352      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa08:	4b37      	ldr	r3, [pc, #220]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0304 	and.w	r3, r3, #4
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d0f0      	beq.n	800a9f6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa14:	f7fc fba4 	bl	8007160 <HAL_GetREVID>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f241 0203 	movw	r2, #4099	; 0x1003
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d817      	bhi.n	800aa52 <HAL_RCC_OscConfig+0x1f2>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	2b40      	cmp	r3, #64	; 0x40
 800aa28:	d108      	bne.n	800aa3c <HAL_RCC_OscConfig+0x1dc>
 800aa2a:	4b2f      	ldr	r3, [pc, #188]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800aa32:	4a2d      	ldr	r2, [pc, #180]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aa34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa38:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa3a:	e07b      	b.n	800ab34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa3c:	4b2a      	ldr	r3, [pc, #168]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	031b      	lsls	r3, r3, #12
 800aa4a:	4927      	ldr	r1, [pc, #156]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa50:	e070      	b.n	800ab34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa52:	4b25      	ldr	r3, [pc, #148]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	061b      	lsls	r3, r3, #24
 800aa60:	4921      	ldr	r1, [pc, #132]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aa62:	4313      	orrs	r3, r2
 800aa64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa66:	e065      	b.n	800ab34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d048      	beq.n	800ab02 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa70:	4b1d      	ldr	r3, [pc, #116]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f023 0219 	bic.w	r2, r3, #25
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	491a      	ldr	r1, [pc, #104]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa82:	f7fc fb3d 	bl	8007100 <HAL_GetTick>
 800aa86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa88:	e008      	b.n	800aa9c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa8a:	f7fc fb39 	bl	8007100 <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d901      	bls.n	800aa9c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e308      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa9c:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 0304 	and.w	r3, r3, #4
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d0f0      	beq.n	800aa8a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aaa8:	f7fc fb5a 	bl	8007160 <HAL_GetREVID>
 800aaac:	4603      	mov	r3, r0
 800aaae:	f241 0203 	movw	r2, #4099	; 0x1003
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d81a      	bhi.n	800aaec <HAL_RCC_OscConfig+0x28c>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	2b40      	cmp	r3, #64	; 0x40
 800aabc:	d108      	bne.n	800aad0 <HAL_RCC_OscConfig+0x270>
 800aabe:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800aac6:	4a08      	ldr	r2, [pc, #32]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aacc:	6053      	str	r3, [r2, #4]
 800aace:	e031      	b.n	800ab34 <HAL_RCC_OscConfig+0x2d4>
 800aad0:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	031b      	lsls	r3, r3, #12
 800aade:	4902      	ldr	r1, [pc, #8]	; (800aae8 <HAL_RCC_OscConfig+0x288>)
 800aae0:	4313      	orrs	r3, r2
 800aae2:	604b      	str	r3, [r1, #4]
 800aae4:	e026      	b.n	800ab34 <HAL_RCC_OscConfig+0x2d4>
 800aae6:	bf00      	nop
 800aae8:	58024400 	.word	0x58024400
 800aaec:	4b9a      	ldr	r3, [pc, #616]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	061b      	lsls	r3, r3, #24
 800aafa:	4997      	ldr	r1, [pc, #604]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800aafc:	4313      	orrs	r3, r2
 800aafe:	604b      	str	r3, [r1, #4]
 800ab00:	e018      	b.n	800ab34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab02:	4b95      	ldr	r3, [pc, #596]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a94      	ldr	r2, [pc, #592]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ab08:	f023 0301 	bic.w	r3, r3, #1
 800ab0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab0e:	f7fc faf7 	bl	8007100 <HAL_GetTick>
 800ab12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab14:	e008      	b.n	800ab28 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab16:	f7fc faf3 	bl	8007100 <HAL_GetTick>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d901      	bls.n	800ab28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ab24:	2303      	movs	r3, #3
 800ab26:	e2c2      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab28:	4b8b      	ldr	r3, [pc, #556]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1f0      	bne.n	800ab16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 80a9 	beq.w	800ac94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab42:	4b85      	ldr	r3, [pc, #532]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab4c:	4b82      	ldr	r3, [pc, #520]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab50:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	2b08      	cmp	r3, #8
 800ab56:	d007      	beq.n	800ab68 <HAL_RCC_OscConfig+0x308>
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	2b18      	cmp	r3, #24
 800ab5c:	d13a      	bne.n	800abd4 <HAL_RCC_OscConfig+0x374>
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f003 0303 	and.w	r3, r3, #3
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d135      	bne.n	800abd4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab68:	4b7b      	ldr	r3, [pc, #492]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d005      	beq.n	800ab80 <HAL_RCC_OscConfig+0x320>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	69db      	ldr	r3, [r3, #28]
 800ab78:	2b80      	cmp	r3, #128	; 0x80
 800ab7a:	d001      	beq.n	800ab80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e296      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab80:	f7fc faee 	bl	8007160 <HAL_GetREVID>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d817      	bhi.n	800abbe <HAL_RCC_OscConfig+0x35e>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	2b20      	cmp	r3, #32
 800ab94:	d108      	bne.n	800aba8 <HAL_RCC_OscConfig+0x348>
 800ab96:	4b70      	ldr	r3, [pc, #448]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ab9e:	4a6e      	ldr	r2, [pc, #440]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800aba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aba4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aba6:	e075      	b.n	800ac94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aba8:	4b6b      	ldr	r3, [pc, #428]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	069b      	lsls	r3, r3, #26
 800abb6:	4968      	ldr	r1, [pc, #416]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800abbc:	e06a      	b.n	800ac94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800abbe:	4b66      	ldr	r3, [pc, #408]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	061b      	lsls	r3, r3, #24
 800abcc:	4962      	ldr	r1, [pc, #392]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800abce:	4313      	orrs	r3, r2
 800abd0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800abd2:	e05f      	b.n	800ac94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d042      	beq.n	800ac62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800abdc:	4b5e      	ldr	r3, [pc, #376]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a5d      	ldr	r2, [pc, #372]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800abe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abe8:	f7fc fa8a 	bl	8007100 <HAL_GetTick>
 800abec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abee:	e008      	b.n	800ac02 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800abf0:	f7fc fa86 	bl	8007100 <HAL_GetTick>
 800abf4:	4602      	mov	r2, r0
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d901      	bls.n	800ac02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e255      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac02:	4b55      	ldr	r3, [pc, #340]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d0f0      	beq.n	800abf0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac0e:	f7fc faa7 	bl	8007160 <HAL_GetREVID>
 800ac12:	4603      	mov	r3, r0
 800ac14:	f241 0203 	movw	r2, #4099	; 0x1003
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d817      	bhi.n	800ac4c <HAL_RCC_OscConfig+0x3ec>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	2b20      	cmp	r3, #32
 800ac22:	d108      	bne.n	800ac36 <HAL_RCC_OscConfig+0x3d6>
 800ac24:	4b4c      	ldr	r3, [pc, #304]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ac2c:	4a4a      	ldr	r2, [pc, #296]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ac2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac32:	6053      	str	r3, [r2, #4]
 800ac34:	e02e      	b.n	800ac94 <HAL_RCC_OscConfig+0x434>
 800ac36:	4b48      	ldr	r3, [pc, #288]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	069b      	lsls	r3, r3, #26
 800ac44:	4944      	ldr	r1, [pc, #272]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ac46:	4313      	orrs	r3, r2
 800ac48:	604b      	str	r3, [r1, #4]
 800ac4a:	e023      	b.n	800ac94 <HAL_RCC_OscConfig+0x434>
 800ac4c:	4b42      	ldr	r3, [pc, #264]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	061b      	lsls	r3, r3, #24
 800ac5a:	493f      	ldr	r1, [pc, #252]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	60cb      	str	r3, [r1, #12]
 800ac60:	e018      	b.n	800ac94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ac62:	4b3d      	ldr	r3, [pc, #244]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a3c      	ldr	r2, [pc, #240]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ac68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac6e:	f7fc fa47 	bl	8007100 <HAL_GetTick>
 800ac72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac74:	e008      	b.n	800ac88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ac76:	f7fc fa43 	bl	8007100 <HAL_GetTick>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d901      	bls.n	800ac88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e212      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac88:	4b33      	ldr	r3, [pc, #204]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1f0      	bne.n	800ac76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0308 	and.w	r3, r3, #8
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d036      	beq.n	800ad0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	695b      	ldr	r3, [r3, #20]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d019      	beq.n	800acdc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aca8:	4b2b      	ldr	r3, [pc, #172]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800acaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acac:	4a2a      	ldr	r2, [pc, #168]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800acae:	f043 0301 	orr.w	r3, r3, #1
 800acb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acb4:	f7fc fa24 	bl	8007100 <HAL_GetTick>
 800acb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800acba:	e008      	b.n	800acce <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800acbc:	f7fc fa20 	bl	8007100 <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d901      	bls.n	800acce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e1ef      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800acce:	4b22      	ldr	r3, [pc, #136]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800acd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0f0      	beq.n	800acbc <HAL_RCC_OscConfig+0x45c>
 800acda:	e018      	b.n	800ad0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800acdc:	4b1e      	ldr	r3, [pc, #120]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800acde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace0:	4a1d      	ldr	r2, [pc, #116]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ace2:	f023 0301 	bic.w	r3, r3, #1
 800ace6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ace8:	f7fc fa0a 	bl	8007100 <HAL_GetTick>
 800acec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800acee:	e008      	b.n	800ad02 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800acf0:	f7fc fa06 	bl	8007100 <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d901      	bls.n	800ad02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e1d5      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ad02:	4b15      	ldr	r3, [pc, #84]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ad04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad06:	f003 0302 	and.w	r3, r3, #2
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1f0      	bne.n	800acf0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 0320 	and.w	r3, r3, #32
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d039      	beq.n	800ad8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d01c      	beq.n	800ad5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ad22:	4b0d      	ldr	r3, [pc, #52]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a0c      	ldr	r2, [pc, #48]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ad28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ad2e:	f7fc f9e7 	bl	8007100 <HAL_GetTick>
 800ad32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ad34:	e008      	b.n	800ad48 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ad36:	f7fc f9e3 	bl	8007100 <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d901      	bls.n	800ad48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e1b2      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ad48:	4b03      	ldr	r3, [pc, #12]	; (800ad58 <HAL_RCC_OscConfig+0x4f8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0f0      	beq.n	800ad36 <HAL_RCC_OscConfig+0x4d6>
 800ad54:	e01b      	b.n	800ad8e <HAL_RCC_OscConfig+0x52e>
 800ad56:	bf00      	nop
 800ad58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad5c:	4b9b      	ldr	r3, [pc, #620]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a9a      	ldr	r2, [pc, #616]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ad62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ad68:	f7fc f9ca 	bl	8007100 <HAL_GetTick>
 800ad6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad6e:	e008      	b.n	800ad82 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ad70:	f7fc f9c6 	bl	8007100 <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d901      	bls.n	800ad82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e195      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad82:	4b92      	ldr	r3, [pc, #584]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1f0      	bne.n	800ad70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 8081 	beq.w	800ae9e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad9c:	4b8c      	ldr	r3, [pc, #560]	; (800afd0 <HAL_RCC_OscConfig+0x770>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a8b      	ldr	r2, [pc, #556]	; (800afd0 <HAL_RCC_OscConfig+0x770>)
 800ada2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ada6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ada8:	f7fc f9aa 	bl	8007100 <HAL_GetTick>
 800adac:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800adae:	e008      	b.n	800adc2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800adb0:	f7fc f9a6 	bl	8007100 <HAL_GetTick>
 800adb4:	4602      	mov	r2, r0
 800adb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	2b64      	cmp	r3, #100	; 0x64
 800adbc:	d901      	bls.n	800adc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800adbe:	2303      	movs	r3, #3
 800adc0:	e175      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800adc2:	4b83      	ldr	r3, [pc, #524]	; (800afd0 <HAL_RCC_OscConfig+0x770>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0f0      	beq.n	800adb0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d106      	bne.n	800ade4 <HAL_RCC_OscConfig+0x584>
 800add6:	4b7d      	ldr	r3, [pc, #500]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800add8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adda:	4a7c      	ldr	r2, [pc, #496]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800addc:	f043 0301 	orr.w	r3, r3, #1
 800ade0:	6713      	str	r3, [r2, #112]	; 0x70
 800ade2:	e02d      	b.n	800ae40 <HAL_RCC_OscConfig+0x5e0>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10c      	bne.n	800ae06 <HAL_RCC_OscConfig+0x5a6>
 800adec:	4b77      	ldr	r3, [pc, #476]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800adee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf0:	4a76      	ldr	r2, [pc, #472]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800adf2:	f023 0301 	bic.w	r3, r3, #1
 800adf6:	6713      	str	r3, [r2, #112]	; 0x70
 800adf8:	4b74      	ldr	r3, [pc, #464]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800adfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adfc:	4a73      	ldr	r2, [pc, #460]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800adfe:	f023 0304 	bic.w	r3, r3, #4
 800ae02:	6713      	str	r3, [r2, #112]	; 0x70
 800ae04:	e01c      	b.n	800ae40 <HAL_RCC_OscConfig+0x5e0>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	2b05      	cmp	r3, #5
 800ae0c:	d10c      	bne.n	800ae28 <HAL_RCC_OscConfig+0x5c8>
 800ae0e:	4b6f      	ldr	r3, [pc, #444]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ae10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae12:	4a6e      	ldr	r2, [pc, #440]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ae14:	f043 0304 	orr.w	r3, r3, #4
 800ae18:	6713      	str	r3, [r2, #112]	; 0x70
 800ae1a:	4b6c      	ldr	r3, [pc, #432]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ae1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1e:	4a6b      	ldr	r2, [pc, #428]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ae20:	f043 0301 	orr.w	r3, r3, #1
 800ae24:	6713      	str	r3, [r2, #112]	; 0x70
 800ae26:	e00b      	b.n	800ae40 <HAL_RCC_OscConfig+0x5e0>
 800ae28:	4b68      	ldr	r3, [pc, #416]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ae2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae2c:	4a67      	ldr	r2, [pc, #412]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ae2e:	f023 0301 	bic.w	r3, r3, #1
 800ae32:	6713      	str	r3, [r2, #112]	; 0x70
 800ae34:	4b65      	ldr	r3, [pc, #404]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ae36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae38:	4a64      	ldr	r2, [pc, #400]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ae3a:	f023 0304 	bic.w	r3, r3, #4
 800ae3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d015      	beq.n	800ae74 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae48:	f7fc f95a 	bl	8007100 <HAL_GetTick>
 800ae4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae4e:	e00a      	b.n	800ae66 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae50:	f7fc f956 	bl	8007100 <HAL_GetTick>
 800ae54:	4602      	mov	r2, r0
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d901      	bls.n	800ae66 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e123      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae66:	4b59      	ldr	r3, [pc, #356]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ae68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae6a:	f003 0302 	and.w	r3, r3, #2
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d0ee      	beq.n	800ae50 <HAL_RCC_OscConfig+0x5f0>
 800ae72:	e014      	b.n	800ae9e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae74:	f7fc f944 	bl	8007100 <HAL_GetTick>
 800ae78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae7a:	e00a      	b.n	800ae92 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae7c:	f7fc f940 	bl	8007100 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d901      	bls.n	800ae92 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e10d      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae92:	4b4e      	ldr	r3, [pc, #312]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800ae94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae96:	f003 0302 	and.w	r3, r3, #2
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1ee      	bne.n	800ae7c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 8102 	beq.w	800b0ac <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aea8:	4b48      	ldr	r3, [pc, #288]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aeb0:	2b18      	cmp	r3, #24
 800aeb2:	f000 80bd 	beq.w	800b030 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	f040 809e 	bne.w	800affc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aec0:	4b42      	ldr	r3, [pc, #264]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a41      	ldr	r2, [pc, #260]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800aec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aeca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aecc:	f7fc f918 	bl	8007100 <HAL_GetTick>
 800aed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aed2:	e008      	b.n	800aee6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aed4:	f7fc f914 	bl	8007100 <HAL_GetTick>
 800aed8:	4602      	mov	r2, r0
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d901      	bls.n	800aee6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e0e3      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aee6:	4b39      	ldr	r3, [pc, #228]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1f0      	bne.n	800aed4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aef2:	4b36      	ldr	r3, [pc, #216]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800aef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aef6:	4b37      	ldr	r3, [pc, #220]	; (800afd4 <HAL_RCC_OscConfig+0x774>)
 800aef8:	4013      	ands	r3, r2
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af02:	0112      	lsls	r2, r2, #4
 800af04:	430a      	orrs	r2, r1
 800af06:	4931      	ldr	r1, [pc, #196]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af08:	4313      	orrs	r3, r2
 800af0a:	628b      	str	r3, [r1, #40]	; 0x28
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af10:	3b01      	subs	r3, #1
 800af12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af1a:	3b01      	subs	r3, #1
 800af1c:	025b      	lsls	r3, r3, #9
 800af1e:	b29b      	uxth	r3, r3
 800af20:	431a      	orrs	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af26:	3b01      	subs	r3, #1
 800af28:	041b      	lsls	r3, r3, #16
 800af2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af2e:	431a      	orrs	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af34:	3b01      	subs	r3, #1
 800af36:	061b      	lsls	r3, r3, #24
 800af38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af3c:	4923      	ldr	r1, [pc, #140]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af3e:	4313      	orrs	r3, r2
 800af40:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800af42:	4b22      	ldr	r3, [pc, #136]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af46:	4a21      	ldr	r2, [pc, #132]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af48:	f023 0301 	bic.w	r3, r3, #1
 800af4c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af4e:	4b1f      	ldr	r3, [pc, #124]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af52:	4b21      	ldr	r3, [pc, #132]	; (800afd8 <HAL_RCC_OscConfig+0x778>)
 800af54:	4013      	ands	r3, r2
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800af5a:	00d2      	lsls	r2, r2, #3
 800af5c:	491b      	ldr	r1, [pc, #108]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af5e:	4313      	orrs	r3, r2
 800af60:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800af62:	4b1a      	ldr	r3, [pc, #104]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af66:	f023 020c 	bic.w	r2, r3, #12
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6e:	4917      	ldr	r1, [pc, #92]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af70:	4313      	orrs	r3, r2
 800af72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800af74:	4b15      	ldr	r3, [pc, #84]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af78:	f023 0202 	bic.w	r2, r3, #2
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af80:	4912      	ldr	r1, [pc, #72]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af82:	4313      	orrs	r3, r2
 800af84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800af86:	4b11      	ldr	r3, [pc, #68]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8a:	4a10      	ldr	r2, [pc, #64]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af92:	4b0e      	ldr	r3, [pc, #56]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af96:	4a0d      	ldr	r2, [pc, #52]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800af98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800af9e:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800afa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa2:	4a0a      	ldr	r2, [pc, #40]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800afa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800afa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800afaa:	4b08      	ldr	r3, [pc, #32]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800afac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afae:	4a07      	ldr	r2, [pc, #28]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800afb0:	f043 0301 	orr.w	r3, r3, #1
 800afb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afb6:	4b05      	ldr	r3, [pc, #20]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a04      	ldr	r2, [pc, #16]	; (800afcc <HAL_RCC_OscConfig+0x76c>)
 800afbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800afc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afc2:	f7fc f89d 	bl	8007100 <HAL_GetTick>
 800afc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afc8:	e011      	b.n	800afee <HAL_RCC_OscConfig+0x78e>
 800afca:	bf00      	nop
 800afcc:	58024400 	.word	0x58024400
 800afd0:	58024800 	.word	0x58024800
 800afd4:	fffffc0c 	.word	0xfffffc0c
 800afd8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afdc:	f7fc f890 	bl	8007100 <HAL_GetTick>
 800afe0:	4602      	mov	r2, r0
 800afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d901      	bls.n	800afee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e05f      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afee:	4b32      	ldr	r3, [pc, #200]	; (800b0b8 <HAL_RCC_OscConfig+0x858>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0f0      	beq.n	800afdc <HAL_RCC_OscConfig+0x77c>
 800affa:	e057      	b.n	800b0ac <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800affc:	4b2e      	ldr	r3, [pc, #184]	; (800b0b8 <HAL_RCC_OscConfig+0x858>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a2d      	ldr	r2, [pc, #180]	; (800b0b8 <HAL_RCC_OscConfig+0x858>)
 800b002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b008:	f7fc f87a 	bl	8007100 <HAL_GetTick>
 800b00c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b00e:	e008      	b.n	800b022 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b010:	f7fc f876 	bl	8007100 <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d901      	bls.n	800b022 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b01e:	2303      	movs	r3, #3
 800b020:	e045      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b022:	4b25      	ldr	r3, [pc, #148]	; (800b0b8 <HAL_RCC_OscConfig+0x858>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1f0      	bne.n	800b010 <HAL_RCC_OscConfig+0x7b0>
 800b02e:	e03d      	b.n	800b0ac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b030:	4b21      	ldr	r3, [pc, #132]	; (800b0b8 <HAL_RCC_OscConfig+0x858>)
 800b032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b034:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b036:	4b20      	ldr	r3, [pc, #128]	; (800b0b8 <HAL_RCC_OscConfig+0x858>)
 800b038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	2b01      	cmp	r3, #1
 800b042:	d031      	beq.n	800b0a8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f003 0203 	and.w	r2, r3, #3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b04e:	429a      	cmp	r2, r3
 800b050:	d12a      	bne.n	800b0a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	091b      	lsrs	r3, r3, #4
 800b056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b05e:	429a      	cmp	r2, r3
 800b060:	d122      	bne.n	800b0a8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b06e:	429a      	cmp	r2, r3
 800b070:	d11a      	bne.n	800b0a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	0a5b      	lsrs	r3, r3, #9
 800b076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b080:	429a      	cmp	r2, r3
 800b082:	d111      	bne.n	800b0a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	0c1b      	lsrs	r3, r3, #16
 800b088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b090:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b092:	429a      	cmp	r2, r3
 800b094:	d108      	bne.n	800b0a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	0e1b      	lsrs	r3, r3, #24
 800b09a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d001      	beq.n	800b0ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e000      	b.n	800b0ae <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3730      	adds	r7, #48	; 0x30
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	58024400 	.word	0x58024400

0800b0bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d101      	bne.n	800b0d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e19c      	b.n	800b40a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b0d0:	4b8a      	ldr	r3, [pc, #552]	; (800b2fc <HAL_RCC_ClockConfig+0x240>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 030f 	and.w	r3, r3, #15
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d910      	bls.n	800b100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0de:	4b87      	ldr	r3, [pc, #540]	; (800b2fc <HAL_RCC_ClockConfig+0x240>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f023 020f 	bic.w	r2, r3, #15
 800b0e6:	4985      	ldr	r1, [pc, #532]	; (800b2fc <HAL_RCC_ClockConfig+0x240>)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0ee:	4b83      	ldr	r3, [pc, #524]	; (800b2fc <HAL_RCC_ClockConfig+0x240>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 030f 	and.w	r3, r3, #15
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d001      	beq.n	800b100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e184      	b.n	800b40a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 0304 	and.w	r3, r3, #4
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d010      	beq.n	800b12e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	691a      	ldr	r2, [r3, #16]
 800b110:	4b7b      	ldr	r3, [pc, #492]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b118:	429a      	cmp	r2, r3
 800b11a:	d908      	bls.n	800b12e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b11c:	4b78      	ldr	r3, [pc, #480]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	4975      	ldr	r1, [pc, #468]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 0308 	and.w	r3, r3, #8
 800b136:	2b00      	cmp	r3, #0
 800b138:	d010      	beq.n	800b15c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	695a      	ldr	r2, [r3, #20]
 800b13e:	4b70      	ldr	r3, [pc, #448]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b146:	429a      	cmp	r2, r3
 800b148:	d908      	bls.n	800b15c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b14a:	4b6d      	ldr	r3, [pc, #436]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b14c:	69db      	ldr	r3, [r3, #28]
 800b14e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	695b      	ldr	r3, [r3, #20]
 800b156:	496a      	ldr	r1, [pc, #424]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 0310 	and.w	r3, r3, #16
 800b164:	2b00      	cmp	r3, #0
 800b166:	d010      	beq.n	800b18a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	699a      	ldr	r2, [r3, #24]
 800b16c:	4b64      	ldr	r3, [pc, #400]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b174:	429a      	cmp	r2, r3
 800b176:	d908      	bls.n	800b18a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b178:	4b61      	ldr	r3, [pc, #388]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b17a:	69db      	ldr	r3, [r3, #28]
 800b17c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	495e      	ldr	r1, [pc, #376]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b186:	4313      	orrs	r3, r2
 800b188:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	2b00      	cmp	r3, #0
 800b194:	d010      	beq.n	800b1b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	69da      	ldr	r2, [r3, #28]
 800b19a:	4b59      	ldr	r3, [pc, #356]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d908      	bls.n	800b1b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b1a6:	4b56      	ldr	r3, [pc, #344]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	69db      	ldr	r3, [r3, #28]
 800b1b2:	4953      	ldr	r1, [pc, #332]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 0302 	and.w	r3, r3, #2
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d010      	beq.n	800b1e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	68da      	ldr	r2, [r3, #12]
 800b1c8:	4b4d      	ldr	r3, [pc, #308]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	f003 030f 	and.w	r3, r3, #15
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d908      	bls.n	800b1e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1d4:	4b4a      	ldr	r3, [pc, #296]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	f023 020f 	bic.w	r2, r3, #15
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	4947      	ldr	r1, [pc, #284]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d055      	beq.n	800b29e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b1f2:	4b43      	ldr	r3, [pc, #268]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	4940      	ldr	r1, [pc, #256]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b200:	4313      	orrs	r3, r2
 800b202:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d107      	bne.n	800b21c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b20c:	4b3c      	ldr	r3, [pc, #240]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d121      	bne.n	800b25c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	e0f6      	b.n	800b40a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	2b03      	cmp	r3, #3
 800b222:	d107      	bne.n	800b234 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b224:	4b36      	ldr	r3, [pc, #216]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d115      	bne.n	800b25c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e0ea      	b.n	800b40a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d107      	bne.n	800b24c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b23c:	4b30      	ldr	r3, [pc, #192]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b244:	2b00      	cmp	r3, #0
 800b246:	d109      	bne.n	800b25c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e0de      	b.n	800b40a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b24c:	4b2c      	ldr	r3, [pc, #176]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d101      	bne.n	800b25c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	e0d6      	b.n	800b40a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b25c:	4b28      	ldr	r3, [pc, #160]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	f023 0207 	bic.w	r2, r3, #7
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	4925      	ldr	r1, [pc, #148]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b26e:	f7fb ff47 	bl	8007100 <HAL_GetTick>
 800b272:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b274:	e00a      	b.n	800b28c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b276:	f7fb ff43 	bl	8007100 <HAL_GetTick>
 800b27a:	4602      	mov	r2, r0
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	f241 3288 	movw	r2, #5000	; 0x1388
 800b284:	4293      	cmp	r3, r2
 800b286:	d901      	bls.n	800b28c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e0be      	b.n	800b40a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b28c:	4b1c      	ldr	r3, [pc, #112]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	00db      	lsls	r3, r3, #3
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d1eb      	bne.n	800b276 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0302 	and.w	r3, r3, #2
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d010      	beq.n	800b2cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68da      	ldr	r2, [r3, #12]
 800b2ae:	4b14      	ldr	r3, [pc, #80]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	f003 030f 	and.w	r3, r3, #15
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d208      	bcs.n	800b2cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2ba:	4b11      	ldr	r3, [pc, #68]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	f023 020f 	bic.w	r2, r3, #15
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	490e      	ldr	r1, [pc, #56]	; (800b300 <HAL_RCC_ClockConfig+0x244>)
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b2cc:	4b0b      	ldr	r3, [pc, #44]	; (800b2fc <HAL_RCC_ClockConfig+0x240>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 030f 	and.w	r3, r3, #15
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d214      	bcs.n	800b304 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2da:	4b08      	ldr	r3, [pc, #32]	; (800b2fc <HAL_RCC_ClockConfig+0x240>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f023 020f 	bic.w	r2, r3, #15
 800b2e2:	4906      	ldr	r1, [pc, #24]	; (800b2fc <HAL_RCC_ClockConfig+0x240>)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2ea:	4b04      	ldr	r3, [pc, #16]	; (800b2fc <HAL_RCC_ClockConfig+0x240>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 030f 	and.w	r3, r3, #15
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d005      	beq.n	800b304 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e086      	b.n	800b40a <HAL_RCC_ClockConfig+0x34e>
 800b2fc:	52002000 	.word	0x52002000
 800b300:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d010      	beq.n	800b332 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	691a      	ldr	r2, [r3, #16]
 800b314:	4b3f      	ldr	r3, [pc, #252]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d208      	bcs.n	800b332 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b320:	4b3c      	ldr	r3, [pc, #240]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	4939      	ldr	r1, [pc, #228]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b32e:	4313      	orrs	r3, r2
 800b330:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0308 	and.w	r3, r3, #8
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d010      	beq.n	800b360 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	695a      	ldr	r2, [r3, #20]
 800b342:	4b34      	ldr	r3, [pc, #208]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b344:	69db      	ldr	r3, [r3, #28]
 800b346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d208      	bcs.n	800b360 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b34e:	4b31      	ldr	r3, [pc, #196]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	492e      	ldr	r1, [pc, #184]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b35c:	4313      	orrs	r3, r2
 800b35e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 0310 	and.w	r3, r3, #16
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d010      	beq.n	800b38e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	699a      	ldr	r2, [r3, #24]
 800b370:	4b28      	ldr	r3, [pc, #160]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b372:	69db      	ldr	r3, [r3, #28]
 800b374:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b378:	429a      	cmp	r2, r3
 800b37a:	d208      	bcs.n	800b38e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b37c:	4b25      	ldr	r3, [pc, #148]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b37e:	69db      	ldr	r3, [r3, #28]
 800b380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	4922      	ldr	r1, [pc, #136]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 0320 	and.w	r3, r3, #32
 800b396:	2b00      	cmp	r3, #0
 800b398:	d010      	beq.n	800b3bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	69da      	ldr	r2, [r3, #28]
 800b39e:	4b1d      	ldr	r3, [pc, #116]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d208      	bcs.n	800b3bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b3aa:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	4917      	ldr	r1, [pc, #92]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b3bc:	f000 f834 	bl	800b428 <HAL_RCC_GetSysClockFreq>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	4b14      	ldr	r3, [pc, #80]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	0a1b      	lsrs	r3, r3, #8
 800b3c8:	f003 030f 	and.w	r3, r3, #15
 800b3cc:	4912      	ldr	r1, [pc, #72]	; (800b418 <HAL_RCC_ClockConfig+0x35c>)
 800b3ce:	5ccb      	ldrb	r3, [r1, r3]
 800b3d0:	f003 031f 	and.w	r3, r3, #31
 800b3d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b3da:	4b0e      	ldr	r3, [pc, #56]	; (800b414 <HAL_RCC_ClockConfig+0x358>)
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	f003 030f 	and.w	r3, r3, #15
 800b3e2:	4a0d      	ldr	r2, [pc, #52]	; (800b418 <HAL_RCC_ClockConfig+0x35c>)
 800b3e4:	5cd3      	ldrb	r3, [r2, r3]
 800b3e6:	f003 031f 	and.w	r3, r3, #31
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b3f0:	4a0a      	ldr	r2, [pc, #40]	; (800b41c <HAL_RCC_ClockConfig+0x360>)
 800b3f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b3f4:	4a0a      	ldr	r2, [pc, #40]	; (800b420 <HAL_RCC_ClockConfig+0x364>)
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b3fa:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <HAL_RCC_ClockConfig+0x368>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fb fe34 	bl	800706c <HAL_InitTick>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b408:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3718      	adds	r7, #24
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	58024400 	.word	0x58024400
 800b418:	080152f4 	.word	0x080152f4
 800b41c:	24000238 	.word	0x24000238
 800b420:	24000234 	.word	0x24000234
 800b424:	2400023c 	.word	0x2400023c

0800b428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b428:	b480      	push	{r7}
 800b42a:	b089      	sub	sp, #36	; 0x24
 800b42c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b42e:	4bb3      	ldr	r3, [pc, #716]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b436:	2b18      	cmp	r3, #24
 800b438:	f200 8155 	bhi.w	800b6e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b43c:	a201      	add	r2, pc, #4	; (adr r2, 800b444 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b442:	bf00      	nop
 800b444:	0800b4a9 	.word	0x0800b4a9
 800b448:	0800b6e7 	.word	0x0800b6e7
 800b44c:	0800b6e7 	.word	0x0800b6e7
 800b450:	0800b6e7 	.word	0x0800b6e7
 800b454:	0800b6e7 	.word	0x0800b6e7
 800b458:	0800b6e7 	.word	0x0800b6e7
 800b45c:	0800b6e7 	.word	0x0800b6e7
 800b460:	0800b6e7 	.word	0x0800b6e7
 800b464:	0800b4cf 	.word	0x0800b4cf
 800b468:	0800b6e7 	.word	0x0800b6e7
 800b46c:	0800b6e7 	.word	0x0800b6e7
 800b470:	0800b6e7 	.word	0x0800b6e7
 800b474:	0800b6e7 	.word	0x0800b6e7
 800b478:	0800b6e7 	.word	0x0800b6e7
 800b47c:	0800b6e7 	.word	0x0800b6e7
 800b480:	0800b6e7 	.word	0x0800b6e7
 800b484:	0800b4d5 	.word	0x0800b4d5
 800b488:	0800b6e7 	.word	0x0800b6e7
 800b48c:	0800b6e7 	.word	0x0800b6e7
 800b490:	0800b6e7 	.word	0x0800b6e7
 800b494:	0800b6e7 	.word	0x0800b6e7
 800b498:	0800b6e7 	.word	0x0800b6e7
 800b49c:	0800b6e7 	.word	0x0800b6e7
 800b4a0:	0800b6e7 	.word	0x0800b6e7
 800b4a4:	0800b4db 	.word	0x0800b4db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a8:	4b94      	ldr	r3, [pc, #592]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 0320 	and.w	r3, r3, #32
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d009      	beq.n	800b4c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4b4:	4b91      	ldr	r3, [pc, #580]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	08db      	lsrs	r3, r3, #3
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	4a90      	ldr	r2, [pc, #576]	; (800b700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b4c6:	e111      	b.n	800b6ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b4c8:	4b8d      	ldr	r3, [pc, #564]	; (800b700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b4ca:	61bb      	str	r3, [r7, #24]
    break;
 800b4cc:	e10e      	b.n	800b6ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b4ce:	4b8d      	ldr	r3, [pc, #564]	; (800b704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b4d0:	61bb      	str	r3, [r7, #24]
    break;
 800b4d2:	e10b      	b.n	800b6ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b4d4:	4b8c      	ldr	r3, [pc, #560]	; (800b708 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b4d6:	61bb      	str	r3, [r7, #24]
    break;
 800b4d8:	e108      	b.n	800b6ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4da:	4b88      	ldr	r3, [pc, #544]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4de:	f003 0303 	and.w	r3, r3, #3
 800b4e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b4e4:	4b85      	ldr	r3, [pc, #532]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e8:	091b      	lsrs	r3, r3, #4
 800b4ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b4f0:	4b82      	ldr	r3, [pc, #520]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b4fa:	4b80      	ldr	r3, [pc, #512]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fe:	08db      	lsrs	r3, r3, #3
 800b500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	fb02 f303 	mul.w	r3, r2, r3
 800b50a:	ee07 3a90 	vmov	s15, r3
 800b50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b512:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 80e1 	beq.w	800b6e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	2b02      	cmp	r3, #2
 800b522:	f000 8083 	beq.w	800b62c <HAL_RCC_GetSysClockFreq+0x204>
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2b02      	cmp	r3, #2
 800b52a:	f200 80a1 	bhi.w	800b670 <HAL_RCC_GetSysClockFreq+0x248>
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <HAL_RCC_GetSysClockFreq+0x114>
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d056      	beq.n	800b5e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b53a:	e099      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b53c:	4b6f      	ldr	r3, [pc, #444]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f003 0320 	and.w	r3, r3, #32
 800b544:	2b00      	cmp	r3, #0
 800b546:	d02d      	beq.n	800b5a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b548:	4b6c      	ldr	r3, [pc, #432]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	08db      	lsrs	r3, r3, #3
 800b54e:	f003 0303 	and.w	r3, r3, #3
 800b552:	4a6b      	ldr	r2, [pc, #428]	; (800b700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b554:	fa22 f303 	lsr.w	r3, r2, r3
 800b558:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	ee07 3a90 	vmov	s15, r3
 800b560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	ee07 3a90 	vmov	s15, r3
 800b56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b572:	4b62      	ldr	r3, [pc, #392]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57a:	ee07 3a90 	vmov	s15, r3
 800b57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b582:	ed97 6a02 	vldr	s12, [r7, #8]
 800b586:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b70c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b59e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b5a2:	e087      	b.n	800b6b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	ee07 3a90 	vmov	s15, r3
 800b5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b710 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b5b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b6:	4b51      	ldr	r3, [pc, #324]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5be:	ee07 3a90 	vmov	s15, r3
 800b5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b70c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5e6:	e065      	b.n	800b6b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	ee07 3a90 	vmov	s15, r3
 800b5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b714 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5fa:	4b40      	ldr	r3, [pc, #256]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b602:	ee07 3a90 	vmov	s15, r3
 800b606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b60a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b60e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b70c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b62a:	e043      	b.n	800b6b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	ee07 3a90 	vmov	s15, r3
 800b632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b636:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b718 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b63e:	4b2f      	ldr	r3, [pc, #188]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b646:	ee07 3a90 	vmov	s15, r3
 800b64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b64e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b652:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b70c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b66a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b66e:	e021      	b.n	800b6b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	ee07 3a90 	vmov	s15, r3
 800b676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b714 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b682:	4b1e      	ldr	r3, [pc, #120]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b68a:	ee07 3a90 	vmov	s15, r3
 800b68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b692:	ed97 6a02 	vldr	s12, [r7, #8]
 800b696:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b70c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b6b4:	4b11      	ldr	r3, [pc, #68]	; (800b6fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b8:	0a5b      	lsrs	r3, r3, #9
 800b6ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6be:	3301      	adds	r3, #1
 800b6c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	ee07 3a90 	vmov	s15, r3
 800b6c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b6cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6d8:	ee17 3a90 	vmov	r3, s15
 800b6dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b6de:	e005      	b.n	800b6ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	61bb      	str	r3, [r7, #24]
    break;
 800b6e4:	e002      	b.n	800b6ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b6e6:	4b07      	ldr	r3, [pc, #28]	; (800b704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b6e8:	61bb      	str	r3, [r7, #24]
    break;
 800b6ea:	bf00      	nop
  }

  return sysclockfreq;
 800b6ec:	69bb      	ldr	r3, [r7, #24]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3724      	adds	r7, #36	; 0x24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	58024400 	.word	0x58024400
 800b700:	03d09000 	.word	0x03d09000
 800b704:	003d0900 	.word	0x003d0900
 800b708:	02dc6c00 	.word	0x02dc6c00
 800b70c:	46000000 	.word	0x46000000
 800b710:	4c742400 	.word	0x4c742400
 800b714:	4a742400 	.word	0x4a742400
 800b718:	4c371b00 	.word	0x4c371b00

0800b71c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b722:	f7ff fe81 	bl	800b428 <HAL_RCC_GetSysClockFreq>
 800b726:	4602      	mov	r2, r0
 800b728:	4b10      	ldr	r3, [pc, #64]	; (800b76c <HAL_RCC_GetHCLKFreq+0x50>)
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	0a1b      	lsrs	r3, r3, #8
 800b72e:	f003 030f 	and.w	r3, r3, #15
 800b732:	490f      	ldr	r1, [pc, #60]	; (800b770 <HAL_RCC_GetHCLKFreq+0x54>)
 800b734:	5ccb      	ldrb	r3, [r1, r3]
 800b736:	f003 031f 	and.w	r3, r3, #31
 800b73a:	fa22 f303 	lsr.w	r3, r2, r3
 800b73e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b740:	4b0a      	ldr	r3, [pc, #40]	; (800b76c <HAL_RCC_GetHCLKFreq+0x50>)
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	f003 030f 	and.w	r3, r3, #15
 800b748:	4a09      	ldr	r2, [pc, #36]	; (800b770 <HAL_RCC_GetHCLKFreq+0x54>)
 800b74a:	5cd3      	ldrb	r3, [r2, r3]
 800b74c:	f003 031f 	and.w	r3, r3, #31
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	fa22 f303 	lsr.w	r3, r2, r3
 800b756:	4a07      	ldr	r2, [pc, #28]	; (800b774 <HAL_RCC_GetHCLKFreq+0x58>)
 800b758:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b75a:	4a07      	ldr	r2, [pc, #28]	; (800b778 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b760:	4b04      	ldr	r3, [pc, #16]	; (800b774 <HAL_RCC_GetHCLKFreq+0x58>)
 800b762:	681b      	ldr	r3, [r3, #0]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3708      	adds	r7, #8
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	58024400 	.word	0x58024400
 800b770:	080152f4 	.word	0x080152f4
 800b774:	24000238 	.word	0x24000238
 800b778:	24000234 	.word	0x24000234

0800b77c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b780:	f7ff ffcc 	bl	800b71c <HAL_RCC_GetHCLKFreq>
 800b784:	4602      	mov	r2, r0
 800b786:	4b06      	ldr	r3, [pc, #24]	; (800b7a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b788:	69db      	ldr	r3, [r3, #28]
 800b78a:	091b      	lsrs	r3, r3, #4
 800b78c:	f003 0307 	and.w	r3, r3, #7
 800b790:	4904      	ldr	r1, [pc, #16]	; (800b7a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b792:	5ccb      	ldrb	r3, [r1, r3]
 800b794:	f003 031f 	and.w	r3, r3, #31
 800b798:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	58024400 	.word	0x58024400
 800b7a4:	080152f4 	.word	0x080152f4

0800b7a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b7ac:	f7ff ffb6 	bl	800b71c <HAL_RCC_GetHCLKFreq>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7b4:	69db      	ldr	r3, [r3, #28]
 800b7b6:	0a1b      	lsrs	r3, r3, #8
 800b7b8:	f003 0307 	and.w	r3, r3, #7
 800b7bc:	4904      	ldr	r1, [pc, #16]	; (800b7d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b7be:	5ccb      	ldrb	r3, [r1, r3]
 800b7c0:	f003 031f 	and.w	r3, r3, #31
 800b7c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	58024400 	.word	0x58024400
 800b7d0:	080152f4 	.word	0x080152f4

0800b7d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b7dc:	2300      	movs	r3, #0
 800b7de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d03f      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7f8:	d02a      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b7fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7fe:	d824      	bhi.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b800:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b804:	d018      	beq.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b80a:	d81e      	bhi.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d003      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b814:	d007      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b816:	e018      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b818:	4ba3      	ldr	r3, [pc, #652]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	4aa2      	ldr	r2, [pc, #648]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b81e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b824:	e015      	b.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3304      	adds	r3, #4
 800b82a:	2102      	movs	r1, #2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f001 f9d5 	bl	800cbdc <RCCEx_PLL2_Config>
 800b832:	4603      	mov	r3, r0
 800b834:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b836:	e00c      	b.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3324      	adds	r3, #36	; 0x24
 800b83c:	2102      	movs	r1, #2
 800b83e:	4618      	mov	r0, r3
 800b840:	f001 fa7e 	bl	800cd40 <RCCEx_PLL3_Config>
 800b844:	4603      	mov	r3, r0
 800b846:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b848:	e003      	b.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	75fb      	strb	r3, [r7, #23]
      break;
 800b84e:	e000      	b.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b850:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b852:	7dfb      	ldrb	r3, [r7, #23]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d109      	bne.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b858:	4b93      	ldr	r3, [pc, #588]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b85a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b85c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b864:	4990      	ldr	r1, [pc, #576]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b866:	4313      	orrs	r3, r2
 800b868:	650b      	str	r3, [r1, #80]	; 0x50
 800b86a:	e001      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d03d      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b880:	2b04      	cmp	r3, #4
 800b882:	d826      	bhi.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b884:	a201      	add	r2, pc, #4	; (adr r2, 800b88c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88a:	bf00      	nop
 800b88c:	0800b8a1 	.word	0x0800b8a1
 800b890:	0800b8af 	.word	0x0800b8af
 800b894:	0800b8c1 	.word	0x0800b8c1
 800b898:	0800b8d9 	.word	0x0800b8d9
 800b89c:	0800b8d9 	.word	0x0800b8d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8a0:	4b81      	ldr	r3, [pc, #516]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a4:	4a80      	ldr	r2, [pc, #512]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b8ac:	e015      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f001 f991 	bl	800cbdc <RCCEx_PLL2_Config>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b8be:	e00c      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3324      	adds	r3, #36	; 0x24
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f001 fa3a 	bl	800cd40 <RCCEx_PLL3_Config>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b8d0:	e003      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	75fb      	strb	r3, [r7, #23]
      break;
 800b8d6:	e000      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b8d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d109      	bne.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b8e0:	4b71      	ldr	r3, [pc, #452]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e4:	f023 0207 	bic.w	r2, r3, #7
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ec:	496e      	ldr	r1, [pc, #440]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	650b      	str	r3, [r1, #80]	; 0x50
 800b8f2:	e001      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b900:	2b00      	cmp	r3, #0
 800b902:	d042      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b90c:	d02b      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b90e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b912:	d825      	bhi.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b914:	2bc0      	cmp	r3, #192	; 0xc0
 800b916:	d028      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b918:	2bc0      	cmp	r3, #192	; 0xc0
 800b91a:	d821      	bhi.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b91c:	2b80      	cmp	r3, #128	; 0x80
 800b91e:	d016      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b920:	2b80      	cmp	r3, #128	; 0x80
 800b922:	d81d      	bhi.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b924:	2b00      	cmp	r3, #0
 800b926:	d002      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b928:	2b40      	cmp	r3, #64	; 0x40
 800b92a:	d007      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b92c:	e018      	b.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b92e:	4b5e      	ldr	r3, [pc, #376]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b932:	4a5d      	ldr	r2, [pc, #372]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b938:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b93a:	e017      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3304      	adds	r3, #4
 800b940:	2100      	movs	r1, #0
 800b942:	4618      	mov	r0, r3
 800b944:	f001 f94a 	bl	800cbdc <RCCEx_PLL2_Config>
 800b948:	4603      	mov	r3, r0
 800b94a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b94c:	e00e      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3324      	adds	r3, #36	; 0x24
 800b952:	2100      	movs	r1, #0
 800b954:	4618      	mov	r0, r3
 800b956:	f001 f9f3 	bl	800cd40 <RCCEx_PLL3_Config>
 800b95a:	4603      	mov	r3, r0
 800b95c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b95e:	e005      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	75fb      	strb	r3, [r7, #23]
      break;
 800b964:	e002      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b966:	bf00      	nop
 800b968:	e000      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b96a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b96c:	7dfb      	ldrb	r3, [r7, #23]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d109      	bne.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b972:	4b4d      	ldr	r3, [pc, #308]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b976:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b97e:	494a      	ldr	r1, [pc, #296]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b980:	4313      	orrs	r3, r2
 800b982:	650b      	str	r3, [r1, #80]	; 0x50
 800b984:	e001      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b992:	2b00      	cmp	r3, #0
 800b994:	d049      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b99c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9a0:	d030      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b9a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9a6:	d82a      	bhi.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b9a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b9ac:	d02c      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b9ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b9b2:	d824      	bhi.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b9b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9b8:	d018      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b9ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9be:	d81e      	bhi.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d003      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b9c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9c8:	d007      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b9ca:	e018      	b.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9cc:	4b36      	ldr	r3, [pc, #216]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d0:	4a35      	ldr	r2, [pc, #212]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b9d8:	e017      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	3304      	adds	r3, #4
 800b9de:	2100      	movs	r1, #0
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 f8fb 	bl	800cbdc <RCCEx_PLL2_Config>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b9ea:	e00e      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3324      	adds	r3, #36	; 0x24
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f001 f9a4 	bl	800cd40 <RCCEx_PLL3_Config>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b9fc:	e005      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	75fb      	strb	r3, [r7, #23]
      break;
 800ba02:	e002      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ba04:	bf00      	nop
 800ba06:	e000      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ba08:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10a      	bne.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ba10:	4b25      	ldr	r3, [pc, #148]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba14:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba1e:	4922      	ldr	r1, [pc, #136]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba20:	4313      	orrs	r3, r2
 800ba22:	658b      	str	r3, [r1, #88]	; 0x58
 800ba24:	e001      	b.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d04b      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba40:	d030      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800ba42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba46:	d82a      	bhi.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ba48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba4c:	d02e      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800ba4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba52:	d824      	bhi.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ba54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba58:	d018      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800ba5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba5e:	d81e      	bhi.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d003      	beq.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ba64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba68:	d007      	beq.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ba6a:	e018      	b.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba6c:	4b0e      	ldr	r3, [pc, #56]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba70:	4a0d      	ldr	r2, [pc, #52]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba78:	e019      	b.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	2100      	movs	r1, #0
 800ba80:	4618      	mov	r0, r3
 800ba82:	f001 f8ab 	bl	800cbdc <RCCEx_PLL2_Config>
 800ba86:	4603      	mov	r3, r0
 800ba88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ba8a:	e010      	b.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	3324      	adds	r3, #36	; 0x24
 800ba90:	2100      	movs	r1, #0
 800ba92:	4618      	mov	r0, r3
 800ba94:	f001 f954 	bl	800cd40 <RCCEx_PLL3_Config>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba9c:	e007      	b.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	75fb      	strb	r3, [r7, #23]
      break;
 800baa2:	e004      	b.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800baa4:	bf00      	nop
 800baa6:	e002      	b.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800baa8:	58024400 	.word	0x58024400
      break;
 800baac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800baae:	7dfb      	ldrb	r3, [r7, #23]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bab4:	4b99      	ldr	r3, [pc, #612]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bac2:	4996      	ldr	r1, [pc, #600]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bac4:	4313      	orrs	r3, r2
 800bac6:	658b      	str	r3, [r1, #88]	; 0x58
 800bac8:	e001      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d032      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bade:	2b30      	cmp	r3, #48	; 0x30
 800bae0:	d01c      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800bae2:	2b30      	cmp	r3, #48	; 0x30
 800bae4:	d817      	bhi.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bae6:	2b20      	cmp	r3, #32
 800bae8:	d00c      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800baea:	2b20      	cmp	r3, #32
 800baec:	d813      	bhi.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d016      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800baf2:	2b10      	cmp	r3, #16
 800baf4:	d10f      	bne.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baf6:	4b89      	ldr	r3, [pc, #548]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800baf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafa:	4a88      	ldr	r2, [pc, #544]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bafc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bb02:	e00e      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	3304      	adds	r3, #4
 800bb08:	2102      	movs	r1, #2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f001 f866 	bl	800cbdc <RCCEx_PLL2_Config>
 800bb10:	4603      	mov	r3, r0
 800bb12:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bb14:	e005      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	75fb      	strb	r3, [r7, #23]
      break;
 800bb1a:	e002      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bb1c:	bf00      	nop
 800bb1e:	e000      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bb20:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d109      	bne.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bb28:	4b7c      	ldr	r3, [pc, #496]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb34:	4979      	ldr	r1, [pc, #484]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb36:	4313      	orrs	r3, r2
 800bb38:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bb3a:	e001      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d047      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb54:	d030      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bb56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb5a:	d82a      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bb5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb60:	d02c      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800bb62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb66:	d824      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bb68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb6c:	d018      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800bb6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb72:	d81e      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800bb78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb7c:	d007      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800bb7e:	e018      	b.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb80:	4b66      	ldr	r3, [pc, #408]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb84:	4a65      	ldr	r2, [pc, #404]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb8c:	e017      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3304      	adds	r3, #4
 800bb92:	2100      	movs	r1, #0
 800bb94:	4618      	mov	r0, r3
 800bb96:	f001 f821 	bl	800cbdc <RCCEx_PLL2_Config>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb9e:	e00e      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	3324      	adds	r3, #36	; 0x24
 800bba4:	2100      	movs	r1, #0
 800bba6:	4618      	mov	r0, r3
 800bba8:	f001 f8ca 	bl	800cd40 <RCCEx_PLL3_Config>
 800bbac:	4603      	mov	r3, r0
 800bbae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bbb0:	e005      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	75fb      	strb	r3, [r7, #23]
      break;
 800bbb6:	e002      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bbb8:	bf00      	nop
 800bbba:	e000      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bbbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d109      	bne.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bbc4:	4b55      	ldr	r3, [pc, #340]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbd0:	4952      	ldr	r1, [pc, #328]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	650b      	str	r3, [r1, #80]	; 0x50
 800bbd6:	e001      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
 800bbda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d049      	beq.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbf0:	d02e      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bbf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbf6:	d828      	bhi.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bbf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bbfc:	d02a      	beq.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800bbfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc02:	d822      	bhi.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bc04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc08:	d026      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800bc0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc0e:	d81c      	bhi.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bc10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc14:	d010      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800bc16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc1a:	d816      	bhi.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d01d      	beq.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x488>
 800bc20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc24:	d111      	bne.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	3304      	adds	r3, #4
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 ffd5 	bl	800cbdc <RCCEx_PLL2_Config>
 800bc32:	4603      	mov	r3, r0
 800bc34:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bc36:	e012      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	3324      	adds	r3, #36	; 0x24
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f001 f87e 	bl	800cd40 <RCCEx_PLL3_Config>
 800bc44:	4603      	mov	r3, r0
 800bc46:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bc48:	e009      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	75fb      	strb	r3, [r7, #23]
      break;
 800bc4e:	e006      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bc50:	bf00      	nop
 800bc52:	e004      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bc54:	bf00      	nop
 800bc56:	e002      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bc58:	bf00      	nop
 800bc5a:	e000      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bc5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc5e:	7dfb      	ldrb	r3, [r7, #23]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d109      	bne.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bc64:	4b2d      	ldr	r3, [pc, #180]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc68:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc70:	492a      	ldr	r1, [pc, #168]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc72:	4313      	orrs	r3, r2
 800bc74:	650b      	str	r3, [r1, #80]	; 0x50
 800bc76:	e001      	b.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d04d      	beq.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc92:	d02e      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bc94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc98:	d828      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc9e:	d02a      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800bca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bca4:	d822      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bca6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcaa:	d026      	beq.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x526>
 800bcac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcb0:	d81c      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bcb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb6:	d010      	beq.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bcb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcbc:	d816      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d01d      	beq.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800bcc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcc6:	d111      	bne.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	3304      	adds	r3, #4
 800bccc:	2101      	movs	r1, #1
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 ff84 	bl	800cbdc <RCCEx_PLL2_Config>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bcd8:	e012      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	3324      	adds	r3, #36	; 0x24
 800bcde:	2101      	movs	r1, #1
 800bce0:	4618      	mov	r0, r3
 800bce2:	f001 f82d 	bl	800cd40 <RCCEx_PLL3_Config>
 800bce6:	4603      	mov	r3, r0
 800bce8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bcea:	e009      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	75fb      	strb	r3, [r7, #23]
      break;
 800bcf0:	e006      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bcf2:	bf00      	nop
 800bcf4:	e004      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bcf6:	bf00      	nop
 800bcf8:	e002      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bcfa:	bf00      	nop
 800bcfc:	e000      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bcfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd00:	7dfb      	ldrb	r3, [r7, #23]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10c      	bne.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bd06:	4b05      	ldr	r3, [pc, #20]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd14:	4901      	ldr	r1, [pc, #4]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd16:	4313      	orrs	r3, r2
 800bd18:	658b      	str	r3, [r1, #88]	; 0x58
 800bd1a:	e003      	b.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800bd1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd20:	7dfb      	ldrb	r3, [r7, #23]
 800bd22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d02f      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd38:	d00e      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800bd3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd3e:	d814      	bhi.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x596>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d015      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800bd44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd48:	d10f      	bne.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd4a:	4baf      	ldr	r3, [pc, #700]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4e:	4aae      	ldr	r2, [pc, #696]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bd56:	e00c      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f000 ff3c 	bl	800cbdc <RCCEx_PLL2_Config>
 800bd64:	4603      	mov	r3, r0
 800bd66:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bd68:	e003      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	75fb      	strb	r3, [r7, #23]
      break;
 800bd6e:	e000      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800bd70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d109      	bne.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd78:	4ba3      	ldr	r3, [pc, #652]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd84:	49a0      	ldr	r1, [pc, #640]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd86:	4313      	orrs	r3, r2
 800bd88:	650b      	str	r3, [r1, #80]	; 0x50
 800bd8a:	e001      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd8c:	7dfb      	ldrb	r3, [r7, #23]
 800bd8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d032      	beq.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d81b      	bhi.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x608>
 800bda4:	a201      	add	r2, pc, #4	; (adr r2, 800bdac <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800bda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdaa:	bf00      	nop
 800bdac:	0800bde3 	.word	0x0800bde3
 800bdb0:	0800bdbd 	.word	0x0800bdbd
 800bdb4:	0800bdcb 	.word	0x0800bdcb
 800bdb8:	0800bde3 	.word	0x0800bde3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdbc:	4b92      	ldr	r3, [pc, #584]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	4a91      	ldr	r2, [pc, #580]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bdc8:	e00c      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	3304      	adds	r3, #4
 800bdce:	2102      	movs	r1, #2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 ff03 	bl	800cbdc <RCCEx_PLL2_Config>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bdda:	e003      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	75fb      	strb	r3, [r7, #23]
      break;
 800bde0:	e000      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bde2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d109      	bne.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bdea:	4b87      	ldr	r3, [pc, #540]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdee:	f023 0203 	bic.w	r2, r3, #3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdf6:	4984      	ldr	r1, [pc, #528]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bdfc:	e001      	b.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdfe:	7dfb      	ldrb	r3, [r7, #23]
 800be00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f000 8086 	beq.w	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be10:	4b7e      	ldr	r3, [pc, #504]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a7d      	ldr	r2, [pc, #500]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800be16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be1c:	f7fb f970 	bl	8007100 <HAL_GetTick>
 800be20:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be22:	e009      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be24:	f7fb f96c 	bl	8007100 <HAL_GetTick>
 800be28:	4602      	mov	r2, r0
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	2b64      	cmp	r3, #100	; 0x64
 800be30:	d902      	bls.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800be32:	2303      	movs	r3, #3
 800be34:	75fb      	strb	r3, [r7, #23]
        break;
 800be36:	e005      	b.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be38:	4b74      	ldr	r3, [pc, #464]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be40:	2b00      	cmp	r3, #0
 800be42:	d0ef      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800be44:	7dfb      	ldrb	r3, [r7, #23]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d166      	bne.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800be4a:	4b6f      	ldr	r3, [pc, #444]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be54:	4053      	eors	r3, r2
 800be56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d013      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be5e:	4b6a      	ldr	r3, [pc, #424]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be66:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be68:	4b67      	ldr	r3, [pc, #412]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be6c:	4a66      	ldr	r2, [pc, #408]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be72:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be74:	4b64      	ldr	r3, [pc, #400]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be78:	4a63      	ldr	r2, [pc, #396]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be7e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800be80:	4a61      	ldr	r2, [pc, #388]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be90:	d115      	bne.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be92:	f7fb f935 	bl	8007100 <HAL_GetTick>
 800be96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be98:	e00b      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be9a:	f7fb f931 	bl	8007100 <HAL_GetTick>
 800be9e:	4602      	mov	r2, r0
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d902      	bls.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	75fb      	strb	r3, [r7, #23]
            break;
 800beb0:	e005      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800beb2:	4b55      	ldr	r3, [pc, #340]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800beb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb6:	f003 0302 	and.w	r3, r3, #2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d0ed      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800bebe:	7dfb      	ldrb	r3, [r7, #23]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d126      	bne.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800beca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bed2:	d10d      	bne.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800bed4:	4b4c      	ldr	r3, [pc, #304]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bee2:	0919      	lsrs	r1, r3, #4
 800bee4:	4b4a      	ldr	r3, [pc, #296]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800bee6:	400b      	ands	r3, r1
 800bee8:	4947      	ldr	r1, [pc, #284]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800beea:	4313      	orrs	r3, r2
 800beec:	610b      	str	r3, [r1, #16]
 800beee:	e005      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800bef0:	4b45      	ldr	r3, [pc, #276]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	4a44      	ldr	r2, [pc, #272]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bef6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800befa:	6113      	str	r3, [r2, #16]
 800befc:	4b42      	ldr	r3, [pc, #264]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800befe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf0a:	493f      	ldr	r1, [pc, #252]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	670b      	str	r3, [r1, #112]	; 0x70
 800bf10:	e004      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	75bb      	strb	r3, [r7, #22]
 800bf16:	e001      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf18:	7dfb      	ldrb	r3, [r7, #23]
 800bf1a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 0301 	and.w	r3, r3, #1
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 8085 	beq.w	800c034 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf2e:	2b28      	cmp	r3, #40	; 0x28
 800bf30:	d866      	bhi.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800bf32:	a201      	add	r2, pc, #4	; (adr r2, 800bf38 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800bf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf38:	0800c015 	.word	0x0800c015
 800bf3c:	0800c001 	.word	0x0800c001
 800bf40:	0800c001 	.word	0x0800c001
 800bf44:	0800c001 	.word	0x0800c001
 800bf48:	0800c001 	.word	0x0800c001
 800bf4c:	0800c001 	.word	0x0800c001
 800bf50:	0800c001 	.word	0x0800c001
 800bf54:	0800c001 	.word	0x0800c001
 800bf58:	0800bfdd 	.word	0x0800bfdd
 800bf5c:	0800c001 	.word	0x0800c001
 800bf60:	0800c001 	.word	0x0800c001
 800bf64:	0800c001 	.word	0x0800c001
 800bf68:	0800c001 	.word	0x0800c001
 800bf6c:	0800c001 	.word	0x0800c001
 800bf70:	0800c001 	.word	0x0800c001
 800bf74:	0800c001 	.word	0x0800c001
 800bf78:	0800bfef 	.word	0x0800bfef
 800bf7c:	0800c001 	.word	0x0800c001
 800bf80:	0800c001 	.word	0x0800c001
 800bf84:	0800c001 	.word	0x0800c001
 800bf88:	0800c001 	.word	0x0800c001
 800bf8c:	0800c001 	.word	0x0800c001
 800bf90:	0800c001 	.word	0x0800c001
 800bf94:	0800c001 	.word	0x0800c001
 800bf98:	0800c015 	.word	0x0800c015
 800bf9c:	0800c001 	.word	0x0800c001
 800bfa0:	0800c001 	.word	0x0800c001
 800bfa4:	0800c001 	.word	0x0800c001
 800bfa8:	0800c001 	.word	0x0800c001
 800bfac:	0800c001 	.word	0x0800c001
 800bfb0:	0800c001 	.word	0x0800c001
 800bfb4:	0800c001 	.word	0x0800c001
 800bfb8:	0800c015 	.word	0x0800c015
 800bfbc:	0800c001 	.word	0x0800c001
 800bfc0:	0800c001 	.word	0x0800c001
 800bfc4:	0800c001 	.word	0x0800c001
 800bfc8:	0800c001 	.word	0x0800c001
 800bfcc:	0800c001 	.word	0x0800c001
 800bfd0:	0800c001 	.word	0x0800c001
 800bfd4:	0800c001 	.word	0x0800c001
 800bfd8:	0800c015 	.word	0x0800c015
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	2101      	movs	r1, #1
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 fdfa 	bl	800cbdc <RCCEx_PLL2_Config>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bfec:	e013      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	3324      	adds	r3, #36	; 0x24
 800bff2:	2101      	movs	r1, #1
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 fea3 	bl	800cd40 <RCCEx_PLL3_Config>
 800bffa:	4603      	mov	r3, r0
 800bffc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bffe:	e00a      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	75fb      	strb	r3, [r7, #23]
      break;
 800c004:	e007      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c006:	bf00      	nop
 800c008:	58024400 	.word	0x58024400
 800c00c:	58024800 	.word	0x58024800
 800c010:	00ffffcf 	.word	0x00ffffcf
      break;
 800c014:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c016:	7dfb      	ldrb	r3, [r7, #23]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d109      	bne.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c01c:	4b96      	ldr	r3, [pc, #600]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c020:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c028:	4993      	ldr	r1, [pc, #588]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c02a:	4313      	orrs	r3, r2
 800c02c:	654b      	str	r3, [r1, #84]	; 0x54
 800c02e:	e001      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c030:	7dfb      	ldrb	r3, [r7, #23]
 800c032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 0302 	and.w	r3, r3, #2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d038      	beq.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c044:	2b05      	cmp	r3, #5
 800c046:	d821      	bhi.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800c048:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800c04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04e:	bf00      	nop
 800c050:	0800c093 	.word	0x0800c093
 800c054:	0800c069 	.word	0x0800c069
 800c058:	0800c07b 	.word	0x0800c07b
 800c05c:	0800c093 	.word	0x0800c093
 800c060:	0800c093 	.word	0x0800c093
 800c064:	0800c093 	.word	0x0800c093
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	3304      	adds	r3, #4
 800c06c:	2101      	movs	r1, #1
 800c06e:	4618      	mov	r0, r3
 800c070:	f000 fdb4 	bl	800cbdc <RCCEx_PLL2_Config>
 800c074:	4603      	mov	r3, r0
 800c076:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c078:	e00c      	b.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	3324      	adds	r3, #36	; 0x24
 800c07e:	2101      	movs	r1, #1
 800c080:	4618      	mov	r0, r3
 800c082:	f000 fe5d 	bl	800cd40 <RCCEx_PLL3_Config>
 800c086:	4603      	mov	r3, r0
 800c088:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c08a:	e003      	b.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	75fb      	strb	r3, [r7, #23]
      break;
 800c090:	e000      	b.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800c092:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c094:	7dfb      	ldrb	r3, [r7, #23]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d109      	bne.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c09a:	4b77      	ldr	r3, [pc, #476]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c09e:	f023 0207 	bic.w	r2, r3, #7
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0a6:	4974      	ldr	r1, [pc, #464]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	654b      	str	r3, [r1, #84]	; 0x54
 800c0ac:	e001      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ae:	7dfb      	ldrb	r3, [r7, #23]
 800c0b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f003 0304 	and.w	r3, r3, #4
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d03a      	beq.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0c4:	2b05      	cmp	r3, #5
 800c0c6:	d821      	bhi.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c0c8:	a201      	add	r2, pc, #4	; (adr r2, 800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ce:	bf00      	nop
 800c0d0:	0800c113 	.word	0x0800c113
 800c0d4:	0800c0e9 	.word	0x0800c0e9
 800c0d8:	0800c0fb 	.word	0x0800c0fb
 800c0dc:	0800c113 	.word	0x0800c113
 800c0e0:	0800c113 	.word	0x0800c113
 800c0e4:	0800c113 	.word	0x0800c113
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	2101      	movs	r1, #1
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 fd74 	bl	800cbdc <RCCEx_PLL2_Config>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c0f8:	e00c      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	3324      	adds	r3, #36	; 0x24
 800c0fe:	2101      	movs	r1, #1
 800c100:	4618      	mov	r0, r3
 800c102:	f000 fe1d 	bl	800cd40 <RCCEx_PLL3_Config>
 800c106:	4603      	mov	r3, r0
 800c108:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c10a:	e003      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	75fb      	strb	r3, [r7, #23]
      break;
 800c110:	e000      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c112:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c114:	7dfb      	ldrb	r3, [r7, #23]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10a      	bne.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c11a:	4b57      	ldr	r3, [pc, #348]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c11e:	f023 0207 	bic.w	r2, r3, #7
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c128:	4953      	ldr	r1, [pc, #332]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c12a:	4313      	orrs	r3, r2
 800c12c:	658b      	str	r3, [r1, #88]	; 0x58
 800c12e:	e001      	b.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c130:	7dfb      	ldrb	r3, [r7, #23]
 800c132:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 0320 	and.w	r3, r3, #32
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d04b      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c14a:	d02e      	beq.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c14c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c150:	d828      	bhi.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c156:	d02a      	beq.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c15c:	d822      	bhi.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c15e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c162:	d026      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c164:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c168:	d81c      	bhi.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c16a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c16e:	d010      	beq.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c174:	d816      	bhi.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c176:	2b00      	cmp	r3, #0
 800c178:	d01d      	beq.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c17a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c17e:	d111      	bne.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	3304      	adds	r3, #4
 800c184:	2100      	movs	r1, #0
 800c186:	4618      	mov	r0, r3
 800c188:	f000 fd28 	bl	800cbdc <RCCEx_PLL2_Config>
 800c18c:	4603      	mov	r3, r0
 800c18e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c190:	e012      	b.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	3324      	adds	r3, #36	; 0x24
 800c196:	2102      	movs	r1, #2
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 fdd1 	bl	800cd40 <RCCEx_PLL3_Config>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c1a2:	e009      	b.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	75fb      	strb	r3, [r7, #23]
      break;
 800c1a8:	e006      	b.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c1aa:	bf00      	nop
 800c1ac:	e004      	b.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c1ae:	bf00      	nop
 800c1b0:	e002      	b.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c1b2:	bf00      	nop
 800c1b4:	e000      	b.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c1b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1b8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10a      	bne.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c1be:	4b2e      	ldr	r3, [pc, #184]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1cc:	492a      	ldr	r1, [pc, #168]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	654b      	str	r3, [r1, #84]	; 0x54
 800c1d2:	e001      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
 800c1d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d04d      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c1ee:	d02e      	beq.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c1f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c1f4:	d828      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c1f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1fa:	d02a      	beq.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c1fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c200:	d822      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c202:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c206:	d026      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c208:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c20c:	d81c      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c20e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c212:	d010      	beq.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c218:	d816      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d01d      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c21e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c222:	d111      	bne.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3304      	adds	r3, #4
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 fcd6 	bl	800cbdc <RCCEx_PLL2_Config>
 800c230:	4603      	mov	r3, r0
 800c232:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c234:	e012      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	3324      	adds	r3, #36	; 0x24
 800c23a:	2102      	movs	r1, #2
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 fd7f 	bl	800cd40 <RCCEx_PLL3_Config>
 800c242:	4603      	mov	r3, r0
 800c244:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c246:	e009      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	75fb      	strb	r3, [r7, #23]
      break;
 800c24c:	e006      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c24e:	bf00      	nop
 800c250:	e004      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c252:	bf00      	nop
 800c254:	e002      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c256:	bf00      	nop
 800c258:	e000      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c25a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10c      	bne.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c262:	4b05      	ldr	r3, [pc, #20]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c266:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c270:	4901      	ldr	r1, [pc, #4]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c272:	4313      	orrs	r3, r2
 800c274:	658b      	str	r3, [r1, #88]	; 0x58
 800c276:	e003      	b.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c27c:	7dfb      	ldrb	r3, [r7, #23]
 800c27e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d04b      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c292:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c296:	d02e      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c298:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c29c:	d828      	bhi.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c29e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2a2:	d02a      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c2a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2a8:	d822      	bhi.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c2aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c2ae:	d026      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c2b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c2b4:	d81c      	bhi.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c2b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2ba:	d010      	beq.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c2bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2c0:	d816      	bhi.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d01d      	beq.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c2c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2ca:	d111      	bne.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 fc82 	bl	800cbdc <RCCEx_PLL2_Config>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c2dc:	e012      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	3324      	adds	r3, #36	; 0x24
 800c2e2:	2102      	movs	r1, #2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 fd2b 	bl	800cd40 <RCCEx_PLL3_Config>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c2ee:	e009      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c2f4:	e006      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c2f6:	bf00      	nop
 800c2f8:	e004      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c2fa:	bf00      	nop
 800c2fc:	e002      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c2fe:	bf00      	nop
 800c300:	e000      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c302:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c304:	7dfb      	ldrb	r3, [r7, #23]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10a      	bne.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c30a:	4b9d      	ldr	r3, [pc, #628]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c30c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c30e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c318:	4999      	ldr	r1, [pc, #612]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c31a:	4313      	orrs	r3, r2
 800c31c:	658b      	str	r3, [r1, #88]	; 0x58
 800c31e:	e001      	b.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c320:	7dfb      	ldrb	r3, [r7, #23]
 800c322:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 0308 	and.w	r3, r3, #8
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d01a      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c33a:	d10a      	bne.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	3324      	adds	r3, #36	; 0x24
 800c340:	2102      	movs	r1, #2
 800c342:	4618      	mov	r0, r3
 800c344:	f000 fcfc 	bl	800cd40 <RCCEx_PLL3_Config>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c352:	4b8b      	ldr	r3, [pc, #556]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c356:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c360:	4987      	ldr	r1, [pc, #540]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c362:	4313      	orrs	r3, r2
 800c364:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 0310 	and.w	r3, r3, #16
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d01a      	beq.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c37c:	d10a      	bne.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	3324      	adds	r3, #36	; 0x24
 800c382:	2102      	movs	r1, #2
 800c384:	4618      	mov	r0, r3
 800c386:	f000 fcdb 	bl	800cd40 <RCCEx_PLL3_Config>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d001      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c390:	2301      	movs	r3, #1
 800c392:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c394:	4b7a      	ldr	r3, [pc, #488]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3a2:	4977      	ldr	r1, [pc, #476]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d034      	beq.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c3ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3be:	d01d      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c3c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3c4:	d817      	bhi.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d003      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c3ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3ce:	d009      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c3d0:	e011      	b.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 fbff 	bl	800cbdc <RCCEx_PLL2_Config>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c3e2:	e00c      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	3324      	adds	r3, #36	; 0x24
 800c3e8:	2102      	movs	r1, #2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 fca8 	bl	800cd40 <RCCEx_PLL3_Config>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c3f4:	e003      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	75fb      	strb	r3, [r7, #23]
      break;
 800c3fa:	e000      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800c3fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3fe:	7dfb      	ldrb	r3, [r7, #23]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10a      	bne.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c404:	4b5e      	ldr	r3, [pc, #376]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c408:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c412:	495b      	ldr	r1, [pc, #364]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c414:	4313      	orrs	r3, r2
 800c416:	658b      	str	r3, [r1, #88]	; 0x58
 800c418:	e001      	b.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
 800c41c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c426:	2b00      	cmp	r3, #0
 800c428:	d033      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c430:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c434:	d01c      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800c436:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c43a:	d816      	bhi.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800c43c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c440:	d003      	beq.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800c442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c446:	d007      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800c448:	e00f      	b.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c44a:	4b4d      	ldr	r3, [pc, #308]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44e:	4a4c      	ldr	r2, [pc, #304]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c454:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c456:	e00c      	b.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	3324      	adds	r3, #36	; 0x24
 800c45c:	2101      	movs	r1, #1
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 fc6e 	bl	800cd40 <RCCEx_PLL3_Config>
 800c464:	4603      	mov	r3, r0
 800c466:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c468:	e003      	b.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	75fb      	strb	r3, [r7, #23]
      break;
 800c46e:	e000      	b.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800c470:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c472:	7dfb      	ldrb	r3, [r7, #23]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10a      	bne.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c478:	4b41      	ldr	r3, [pc, #260]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c47a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c47c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c486:	493e      	ldr	r1, [pc, #248]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c488:	4313      	orrs	r3, r2
 800c48a:	654b      	str	r3, [r1, #84]	; 0x54
 800c48c:	e001      	b.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d029      	beq.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800c4a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4aa:	d007      	beq.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c4ac:	e00f      	b.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4ae:	4b34      	ldr	r3, [pc, #208]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b2:	4a33      	ldr	r2, [pc, #204]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c4ba:	e00b      	b.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	3304      	adds	r3, #4
 800c4c0:	2102      	movs	r1, #2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 fb8a 	bl	800cbdc <RCCEx_PLL2_Config>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c4cc:	e002      	b.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	75fb      	strb	r3, [r7, #23]
      break;
 800c4d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4d4:	7dfb      	ldrb	r3, [r7, #23]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d109      	bne.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c4da:	4b29      	ldr	r3, [pc, #164]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4e6:	4926      	ldr	r1, [pc, #152]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c4ec:	e001      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4ee:	7dfb      	ldrb	r3, [r7, #23]
 800c4f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00a      	beq.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	3324      	adds	r3, #36	; 0x24
 800c502:	2102      	movs	r1, #2
 800c504:	4618      	mov	r0, r3
 800c506:	f000 fc1b 	bl	800cd40 <RCCEx_PLL3_Config>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d033      	beq.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c528:	d017      	beq.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c52a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c52e:	d811      	bhi.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c534:	d013      	beq.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c53a:	d80b      	bhi.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d010      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800c540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c544:	d106      	bne.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c546:	4b0e      	ldr	r3, [pc, #56]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54a:	4a0d      	ldr	r2, [pc, #52]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c54c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c550:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c552:	e007      	b.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	75fb      	strb	r3, [r7, #23]
      break;
 800c558:	e004      	b.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c55a:	bf00      	nop
 800c55c:	e002      	b.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c55e:	bf00      	nop
 800c560:	e000      	b.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c562:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10c      	bne.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c56a:	4b05      	ldr	r3, [pc, #20]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c56e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c576:	4902      	ldr	r1, [pc, #8]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c578:	4313      	orrs	r3, r2
 800c57a:	654b      	str	r3, [r1, #84]	; 0x54
 800c57c:	e004      	b.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800c57e:	bf00      	nop
 800c580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c584:	7dfb      	ldrb	r3, [r7, #23]
 800c586:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c590:	2b00      	cmp	r3, #0
 800c592:	d008      	beq.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c594:	4b31      	ldr	r3, [pc, #196]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c598:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5a0:	492e      	ldr	r1, [pc, #184]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d009      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c5b2:	4b2a      	ldr	r3, [pc, #168]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c5c0:	4926      	ldr	r1, [pc, #152]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d008      	beq.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c5d2:	4b22      	ldr	r3, [pc, #136]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5de:	491f      	ldr	r1, [pc, #124]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00d      	beq.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c5f0:	4b1a      	ldr	r3, [pc, #104]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	4a19      	ldr	r2, [pc, #100]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5fa:	6113      	str	r3, [r2, #16]
 800c5fc:	4b17      	ldr	r3, [pc, #92]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5fe:	691a      	ldr	r2, [r3, #16]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c606:	4915      	ldr	r1, [pc, #84]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c608:	4313      	orrs	r3, r2
 800c60a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	da08      	bge.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c614:	4b11      	ldr	r3, [pc, #68]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c618:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c620:	490e      	ldr	r1, [pc, #56]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c622:	4313      	orrs	r3, r2
 800c624:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d009      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c632:	4b0a      	ldr	r3, [pc, #40]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c636:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c640:	4906      	ldr	r1, [pc, #24]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c642:	4313      	orrs	r3, r2
 800c644:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c646:	7dbb      	ldrb	r3, [r7, #22]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c64c:	2300      	movs	r3, #0
 800c64e:	e000      	b.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c650:	2301      	movs	r3, #1
}
 800c652:	4618      	mov	r0, r3
 800c654:	3718      	adds	r7, #24
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	58024400 	.word	0x58024400

0800c660 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c664:	f7ff f85a 	bl	800b71c <HAL_RCC_GetHCLKFreq>
 800c668:	4602      	mov	r2, r0
 800c66a:	4b06      	ldr	r3, [pc, #24]	; (800c684 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c66c:	6a1b      	ldr	r3, [r3, #32]
 800c66e:	091b      	lsrs	r3, r3, #4
 800c670:	f003 0307 	and.w	r3, r3, #7
 800c674:	4904      	ldr	r1, [pc, #16]	; (800c688 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c676:	5ccb      	ldrb	r3, [r1, r3]
 800c678:	f003 031f 	and.w	r3, r3, #31
 800c67c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c680:	4618      	mov	r0, r3
 800c682:	bd80      	pop	{r7, pc}
 800c684:	58024400 	.word	0x58024400
 800c688:	080152f4 	.word	0x080152f4

0800c68c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b089      	sub	sp, #36	; 0x24
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c694:	4ba1      	ldr	r3, [pc, #644]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c698:	f003 0303 	and.w	r3, r3, #3
 800c69c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c69e:	4b9f      	ldr	r3, [pc, #636]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a2:	0b1b      	lsrs	r3, r3, #12
 800c6a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c6aa:	4b9c      	ldr	r3, [pc, #624]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ae:	091b      	lsrs	r3, r3, #4
 800c6b0:	f003 0301 	and.w	r3, r3, #1
 800c6b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c6b6:	4b99      	ldr	r3, [pc, #612]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ba:	08db      	lsrs	r3, r3, #3
 800c6bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	fb02 f303 	mul.w	r3, r2, r3
 800c6c6:	ee07 3a90 	vmov	s15, r3
 800c6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 8111 	beq.w	800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	f000 8083 	beq.w	800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	f200 80a1 	bhi.w	800c82c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d003      	beq.n	800c6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d056      	beq.n	800c7a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c6f6:	e099      	b.n	800c82c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6f8:	4b88      	ldr	r3, [pc, #544]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 0320 	and.w	r3, r3, #32
 800c700:	2b00      	cmp	r3, #0
 800c702:	d02d      	beq.n	800c760 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c704:	4b85      	ldr	r3, [pc, #532]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	08db      	lsrs	r3, r3, #3
 800c70a:	f003 0303 	and.w	r3, r3, #3
 800c70e:	4a84      	ldr	r2, [pc, #528]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c710:	fa22 f303 	lsr.w	r3, r2, r3
 800c714:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	ee07 3a90 	vmov	s15, r3
 800c71c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	ee07 3a90 	vmov	s15, r3
 800c726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c72e:	4b7b      	ldr	r3, [pc, #492]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c736:	ee07 3a90 	vmov	s15, r3
 800c73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c73e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c742:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c74a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c74e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c75a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c75e:	e087      	b.n	800c870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	ee07 3a90 	vmov	s15, r3
 800c766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c76a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c772:	4b6a      	ldr	r3, [pc, #424]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c77a:	ee07 3a90 	vmov	s15, r3
 800c77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c782:	ed97 6a03 	vldr	s12, [r7, #12]
 800c786:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c79e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7a2:	e065      	b.n	800c870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	ee07 3a90 	vmov	s15, r3
 800c7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7b6:	4b59      	ldr	r3, [pc, #356]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7be:	ee07 3a90 	vmov	s15, r3
 800c7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7e6:	e043      	b.n	800c870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	ee07 3a90 	vmov	s15, r3
 800c7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c7f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7fa:	4b48      	ldr	r3, [pc, #288]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c802:	ee07 3a90 	vmov	s15, r3
 800c806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c80a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c80e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c81a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c81e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c826:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c82a:	e021      	b.n	800c870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	ee07 3a90 	vmov	s15, r3
 800c832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c836:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c83e:	4b37      	ldr	r3, [pc, #220]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c846:	ee07 3a90 	vmov	s15, r3
 800c84a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c84e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c852:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c85a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c85e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c86a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c86e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c870:	4b2a      	ldr	r3, [pc, #168]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c874:	0a5b      	lsrs	r3, r3, #9
 800c876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c87a:	ee07 3a90 	vmov	s15, r3
 800c87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c88a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c88e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c896:	ee17 2a90 	vmov	r2, s15
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c89e:	4b1f      	ldr	r3, [pc, #124]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a2:	0c1b      	lsrs	r3, r3, #16
 800c8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8a8:	ee07 3a90 	vmov	s15, r3
 800c8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8c4:	ee17 2a90 	vmov	r2, s15
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c8cc:	4b13      	ldr	r3, [pc, #76]	; (800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d0:	0e1b      	lsrs	r3, r3, #24
 800c8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8f2:	ee17 2a90 	vmov	r2, s15
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c8fa:	e008      	b.n	800c90e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	609a      	str	r2, [r3, #8]
}
 800c90e:	bf00      	nop
 800c910:	3724      	adds	r7, #36	; 0x24
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	58024400 	.word	0x58024400
 800c920:	03d09000 	.word	0x03d09000
 800c924:	46000000 	.word	0x46000000
 800c928:	4c742400 	.word	0x4c742400
 800c92c:	4a742400 	.word	0x4a742400
 800c930:	4c371b00 	.word	0x4c371b00

0800c934 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c934:	b480      	push	{r7}
 800c936:	b089      	sub	sp, #36	; 0x24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c93c:	4ba1      	ldr	r3, [pc, #644]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c940:	f003 0303 	and.w	r3, r3, #3
 800c944:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c946:	4b9f      	ldr	r3, [pc, #636]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94a:	0d1b      	lsrs	r3, r3, #20
 800c94c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c950:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c952:	4b9c      	ldr	r3, [pc, #624]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c956:	0a1b      	lsrs	r3, r3, #8
 800c958:	f003 0301 	and.w	r3, r3, #1
 800c95c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c95e:	4b99      	ldr	r3, [pc, #612]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c962:	08db      	lsrs	r3, r3, #3
 800c964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c968:	693a      	ldr	r2, [r7, #16]
 800c96a:	fb02 f303 	mul.w	r3, r2, r3
 800c96e:	ee07 3a90 	vmov	s15, r3
 800c972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 8111 	beq.w	800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	2b02      	cmp	r3, #2
 800c986:	f000 8083 	beq.w	800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	f200 80a1 	bhi.w	800cad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d003      	beq.n	800c9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d056      	beq.n	800ca4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c99e:	e099      	b.n	800cad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9a0:	4b88      	ldr	r3, [pc, #544]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 0320 	and.w	r3, r3, #32
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d02d      	beq.n	800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c9ac:	4b85      	ldr	r3, [pc, #532]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	08db      	lsrs	r3, r3, #3
 800c9b2:	f003 0303 	and.w	r3, r3, #3
 800c9b6:	4a84      	ldr	r2, [pc, #528]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c9b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	ee07 3a90 	vmov	s15, r3
 800c9c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	ee07 3a90 	vmov	s15, r3
 800c9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9d6:	4b7b      	ldr	r3, [pc, #492]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9de:	ee07 3a90 	vmov	s15, r3
 800c9e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cbcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ca06:	e087      	b.n	800cb18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ca16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca1a:	4b6a      	ldr	r3, [pc, #424]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca22:	ee07 3a90 	vmov	s15, r3
 800ca26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cbcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca4a:	e065      	b.n	800cb18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	ee07 3a90 	vmov	s15, r3
 800ca52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca5e:	4b59      	ldr	r3, [pc, #356]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca66:	ee07 3a90 	vmov	s15, r3
 800ca6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca72:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cbcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca8e:	e043      	b.n	800cb18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	ee07 3a90 	vmov	s15, r3
 800ca96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ca9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caa2:	4b48      	ldr	r3, [pc, #288]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caaa:	ee07 3a90 	vmov	s15, r3
 800caae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cab6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cbcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cabe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cace:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cad2:	e021      	b.n	800cb18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	ee07 3a90 	vmov	s15, r3
 800cada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cade:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cae6:	4b37      	ldr	r3, [pc, #220]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cafa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cbcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800cb18:	4b2a      	ldr	r3, [pc, #168]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1c:	0a5b      	lsrs	r3, r3, #9
 800cb1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb32:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb3e:	ee17 2a90 	vmov	r2, s15
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800cb46:	4b1f      	ldr	r3, [pc, #124]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb4a:	0c1b      	lsrs	r3, r3, #16
 800cb4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb60:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb6c:	ee17 2a90 	vmov	r2, s15
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cb74:	4b13      	ldr	r3, [pc, #76]	; (800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb78:	0e1b      	lsrs	r3, r3, #24
 800cb7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb7e:	ee07 3a90 	vmov	s15, r3
 800cb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb9a:	ee17 2a90 	vmov	r2, s15
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cba2:	e008      	b.n	800cbb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	609a      	str	r2, [r3, #8]
}
 800cbb6:	bf00      	nop
 800cbb8:	3724      	adds	r7, #36	; 0x24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	58024400 	.word	0x58024400
 800cbc8:	03d09000 	.word	0x03d09000
 800cbcc:	46000000 	.word	0x46000000
 800cbd0:	4c742400 	.word	0x4c742400
 800cbd4:	4a742400 	.word	0x4a742400
 800cbd8:	4c371b00 	.word	0x4c371b00

0800cbdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cbea:	4b53      	ldr	r3, [pc, #332]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbee:	f003 0303 	and.w	r3, r3, #3
 800cbf2:	2b03      	cmp	r3, #3
 800cbf4:	d101      	bne.n	800cbfa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e099      	b.n	800cd2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cbfa:	4b4f      	ldr	r3, [pc, #316]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a4e      	ldr	r2, [pc, #312]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cc00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc06:	f7fa fa7b 	bl	8007100 <HAL_GetTick>
 800cc0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc0c:	e008      	b.n	800cc20 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cc0e:	f7fa fa77 	bl	8007100 <HAL_GetTick>
 800cc12:	4602      	mov	r2, r0
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d901      	bls.n	800cc20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	e086      	b.n	800cd2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc20:	4b45      	ldr	r3, [pc, #276]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1f0      	bne.n	800cc0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cc2c:	4b42      	ldr	r3, [pc, #264]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	031b      	lsls	r3, r3, #12
 800cc3a:	493f      	ldr	r1, [pc, #252]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	628b      	str	r3, [r1, #40]	; 0x28
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	3b01      	subs	r3, #1
 800cc46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	025b      	lsls	r3, r3, #9
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	431a      	orrs	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	041b      	lsls	r3, r3, #16
 800cc5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cc62:	431a      	orrs	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	691b      	ldr	r3, [r3, #16]
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	061b      	lsls	r3, r3, #24
 800cc6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cc70:	4931      	ldr	r1, [pc, #196]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cc72:	4313      	orrs	r3, r2
 800cc74:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cc76:	4b30      	ldr	r3, [pc, #192]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	695b      	ldr	r3, [r3, #20]
 800cc82:	492d      	ldr	r1, [pc, #180]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cc84:	4313      	orrs	r3, r2
 800cc86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cc88:	4b2b      	ldr	r3, [pc, #172]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc8c:	f023 0220 	bic.w	r2, r3, #32
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	4928      	ldr	r1, [pc, #160]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cc96:	4313      	orrs	r3, r2
 800cc98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cc9a:	4b27      	ldr	r3, [pc, #156]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9e:	4a26      	ldr	r2, [pc, #152]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cca0:	f023 0310 	bic.w	r3, r3, #16
 800cca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cca6:	4b24      	ldr	r3, [pc, #144]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccaa:	4b24      	ldr	r3, [pc, #144]	; (800cd3c <RCCEx_PLL2_Config+0x160>)
 800ccac:	4013      	ands	r3, r2
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	69d2      	ldr	r2, [r2, #28]
 800ccb2:	00d2      	lsls	r2, r2, #3
 800ccb4:	4920      	ldr	r1, [pc, #128]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ccba:	4b1f      	ldr	r3, [pc, #124]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800ccbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccbe:	4a1e      	ldr	r2, [pc, #120]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800ccc0:	f043 0310 	orr.w	r3, r3, #16
 800ccc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d106      	bne.n	800ccda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cccc:	4b1a      	ldr	r3, [pc, #104]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800ccce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd0:	4a19      	ldr	r2, [pc, #100]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800ccd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ccd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ccd8:	e00f      	b.n	800ccfa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d106      	bne.n	800ccee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cce0:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce4:	4a14      	ldr	r2, [pc, #80]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ccec:	e005      	b.n	800ccfa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ccee:	4b12      	ldr	r3, [pc, #72]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800ccf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf2:	4a11      	ldr	r2, [pc, #68]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800ccf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ccf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a0e      	ldr	r2, [pc, #56]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cd00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd06:	f7fa f9fb 	bl	8007100 <HAL_GetTick>
 800cd0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd0c:	e008      	b.n	800cd20 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cd0e:	f7fa f9f7 	bl	8007100 <HAL_GetTick>
 800cd12:	4602      	mov	r2, r0
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d901      	bls.n	800cd20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	e006      	b.n	800cd2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd20:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <RCCEx_PLL2_Config+0x15c>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d0f0      	beq.n	800cd0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	58024400 	.word	0x58024400
 800cd3c:	ffff0007 	.word	0xffff0007

0800cd40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd4e:	4b53      	ldr	r3, [pc, #332]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd52:	f003 0303 	and.w	r3, r3, #3
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	d101      	bne.n	800cd5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e099      	b.n	800ce92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cd5e:	4b4f      	ldr	r3, [pc, #316]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4a4e      	ldr	r2, [pc, #312]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cd64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd6a:	f7fa f9c9 	bl	8007100 <HAL_GetTick>
 800cd6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd70:	e008      	b.n	800cd84 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cd72:	f7fa f9c5 	bl	8007100 <HAL_GetTick>
 800cd76:	4602      	mov	r2, r0
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d901      	bls.n	800cd84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd80:	2303      	movs	r3, #3
 800cd82:	e086      	b.n	800ce92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd84:	4b45      	ldr	r3, [pc, #276]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d1f0      	bne.n	800cd72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cd90:	4b42      	ldr	r3, [pc, #264]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	051b      	lsls	r3, r3, #20
 800cd9e:	493f      	ldr	r1, [pc, #252]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cda0:	4313      	orrs	r3, r2
 800cda2:	628b      	str	r3, [r1, #40]	; 0x28
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	3b01      	subs	r3, #1
 800cdb4:	025b      	lsls	r3, r3, #9
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	431a      	orrs	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	041b      	lsls	r3, r3, #16
 800cdc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cdc6:	431a      	orrs	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	061b      	lsls	r3, r3, #24
 800cdd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cdd4:	4931      	ldr	r1, [pc, #196]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cdda:	4b30      	ldr	r3, [pc, #192]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	695b      	ldr	r3, [r3, #20]
 800cde6:	492d      	ldr	r1, [pc, #180]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cde8:	4313      	orrs	r3, r2
 800cdea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cdec:	4b2b      	ldr	r3, [pc, #172]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	699b      	ldr	r3, [r3, #24]
 800cdf8:	4928      	ldr	r1, [pc, #160]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cdfe:	4b27      	ldr	r3, [pc, #156]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce02:	4a26      	ldr	r2, [pc, #152]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce0a:	4b24      	ldr	r3, [pc, #144]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce0e:	4b24      	ldr	r3, [pc, #144]	; (800cea0 <RCCEx_PLL3_Config+0x160>)
 800ce10:	4013      	ands	r3, r2
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	69d2      	ldr	r2, [r2, #28]
 800ce16:	00d2      	lsls	r2, r2, #3
 800ce18:	4920      	ldr	r1, [pc, #128]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ce1e:	4b1f      	ldr	r3, [pc, #124]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce22:	4a1e      	ldr	r2, [pc, #120]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d106      	bne.n	800ce3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ce30:	4b1a      	ldr	r3, [pc, #104]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	4a19      	ldr	r2, [pc, #100]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ce3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce3c:	e00f      	b.n	800ce5e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d106      	bne.n	800ce52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ce44:	4b15      	ldr	r3, [pc, #84]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce48:	4a14      	ldr	r2, [pc, #80]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ce4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce50:	e005      	b.n	800ce5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ce52:	4b12      	ldr	r3, [pc, #72]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce56:	4a11      	ldr	r2, [pc, #68]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ce5e:	4b0f      	ldr	r3, [pc, #60]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a0e      	ldr	r2, [pc, #56]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce6a:	f7fa f949 	bl	8007100 <HAL_GetTick>
 800ce6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ce70:	e008      	b.n	800ce84 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ce72:	f7fa f945 	bl	8007100 <HAL_GetTick>
 800ce76:	4602      	mov	r2, r0
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d901      	bls.n	800ce84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce80:	2303      	movs	r3, #3
 800ce82:	e006      	b.n	800ce92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ce84:	4b05      	ldr	r3, [pc, #20]	; (800ce9c <RCCEx_PLL3_Config+0x15c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d0f0      	beq.n	800ce72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	58024400 	.word	0x58024400
 800cea0:	ffff0007 	.word	0xffff0007

0800cea4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d101      	bne.n	800ceb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	e0f1      	b.n	800d09a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a78      	ldr	r2, [pc, #480]	; (800d0a4 <HAL_SPI_Init+0x200>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d00f      	beq.n	800cee6 <HAL_SPI_Init+0x42>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a77      	ldr	r2, [pc, #476]	; (800d0a8 <HAL_SPI_Init+0x204>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d00a      	beq.n	800cee6 <HAL_SPI_Init+0x42>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a75      	ldr	r2, [pc, #468]	; (800d0ac <HAL_SPI_Init+0x208>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d005      	beq.n	800cee6 <HAL_SPI_Init+0x42>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	2b0f      	cmp	r3, #15
 800cee0:	d901      	bls.n	800cee6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e0d9      	b.n	800d09a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 fba4 	bl	800d634 <SPI_GetPacketSize>
 800ceec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a6c      	ldr	r2, [pc, #432]	; (800d0a4 <HAL_SPI_Init+0x200>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d00c      	beq.n	800cf12 <HAL_SPI_Init+0x6e>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a6a      	ldr	r2, [pc, #424]	; (800d0a8 <HAL_SPI_Init+0x204>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d007      	beq.n	800cf12 <HAL_SPI_Init+0x6e>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a69      	ldr	r2, [pc, #420]	; (800d0ac <HAL_SPI_Init+0x208>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d002      	beq.n	800cf12 <HAL_SPI_Init+0x6e>
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b08      	cmp	r3, #8
 800cf10:	d811      	bhi.n	800cf36 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf16:	4a63      	ldr	r2, [pc, #396]	; (800d0a4 <HAL_SPI_Init+0x200>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d009      	beq.n	800cf30 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a61      	ldr	r2, [pc, #388]	; (800d0a8 <HAL_SPI_Init+0x204>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d004      	beq.n	800cf30 <HAL_SPI_Init+0x8c>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a60      	ldr	r2, [pc, #384]	; (800d0ac <HAL_SPI_Init+0x208>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d104      	bne.n	800cf3a <HAL_SPI_Init+0x96>
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2b10      	cmp	r3, #16
 800cf34:	d901      	bls.n	800cf3a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cf36:	2301      	movs	r3, #1
 800cf38:	e0af      	b.n	800d09a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d106      	bne.n	800cf54 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7f8 f92e 	bl	80051b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2202      	movs	r2, #2
 800cf58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f022 0201 	bic.w	r2, r2, #1
 800cf6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cf76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf80:	d119      	bne.n	800cfb6 <HAL_SPI_Init+0x112>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf8a:	d103      	bne.n	800cf94 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d008      	beq.n	800cfa6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10c      	bne.n	800cfb6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cfa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfa4:	d107      	bne.n	800cfb6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cfb4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	69da      	ldr	r2, [r3, #28]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfbe:	431a      	orrs	r2, r3
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	431a      	orrs	r2, r3
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc8:	ea42 0103 	orr.w	r1, r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	68da      	ldr	r2, [r3, #12]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	430a      	orrs	r2, r1
 800cfd6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	431a      	orrs	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	699b      	ldr	r3, [r3, #24]
 800cfec:	431a      	orrs	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	431a      	orrs	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	695b      	ldr	r3, [r3, #20]
 800cff8:	431a      	orrs	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a1b      	ldr	r3, [r3, #32]
 800cffe:	431a      	orrs	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	431a      	orrs	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d00a:	431a      	orrs	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	431a      	orrs	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d016:	ea42 0103 	orr.w	r1, r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	430a      	orrs	r2, r1
 800d024:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d113      	bne.n	800d056 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d040:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d054:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f022 0201 	bic.w	r2, r2, #1
 800d064:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00a      	beq.n	800d088 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	430a      	orrs	r2, r1
 800d086:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	40013000 	.word	0x40013000
 800d0a8:	40003800 	.word	0x40003800
 800d0ac:	40003c00 	.word	0x40003c00

0800d0b0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b08a      	sub	sp, #40	; 0x28
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	695b      	ldr	r3, [r3, #20]
 800d0c6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d0c8:	6a3a      	ldr	r2, [r7, #32]
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d0e2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	3330      	adds	r3, #48	; 0x30
 800d0ea:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d113      	bne.n	800d11e <HAL_SPI_IRQHandler+0x6e>
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	f003 0320 	and.w	r3, r3, #32
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10e      	bne.n	800d11e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d106:	2b00      	cmp	r3, #0
 800d108:	d009      	beq.n	800d11e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	4798      	blx	r3
    handled = 1UL;
 800d11a:	2301      	movs	r3, #1
 800d11c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10f      	bne.n	800d148 <HAL_SPI_IRQHandler+0x98>
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	f003 0301 	and.w	r3, r3, #1
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00a      	beq.n	800d148 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d105      	bne.n	800d148 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	4798      	blx	r3
    handled = 1UL;
 800d144:	2301      	movs	r3, #1
 800d146:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	f003 0320 	and.w	r3, r3, #32
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10f      	bne.n	800d172 <HAL_SPI_IRQHandler+0xc2>
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	f003 0302 	and.w	r3, r3, #2
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00a      	beq.n	800d172 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d162:	2b00      	cmp	r3, #0
 800d164:	d105      	bne.n	800d172 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	4798      	blx	r3
    handled = 1UL;
 800d16e:	2301      	movs	r3, #1
 800d170:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d174:	2b00      	cmp	r3, #0
 800d176:	f040 816f 	bne.w	800d458 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	f003 0308 	and.w	r3, r3, #8
 800d180:	2b00      	cmp	r3, #0
 800d182:	f000 80a0 	beq.w	800d2c6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	699a      	ldr	r2, [r3, #24]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f042 0208 	orr.w	r2, r2, #8
 800d194:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	699a      	ldr	r2, [r3, #24]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f042 0210 	orr.w	r2, r2, #16
 800d1a4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	699a      	ldr	r2, [r3, #24]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1b4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	691a      	ldr	r2, [r3, #16]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f022 0208 	bic.w	r2, r2, #8
 800d1c4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00f      	beq.n	800d1f0 <HAL_SPI_IRQHandler+0x140>
 800d1d0:	7cfb      	ldrb	r3, [r7, #19]
 800d1d2:	2b04      	cmp	r3, #4
 800d1d4:	d004      	beq.n	800d1e0 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1da:	69db      	ldr	r3, [r3, #28]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d007      	beq.n	800d1f0 <HAL_SPI_IRQHandler+0x140>
 800d1e0:	7cfb      	ldrb	r3, [r7, #19]
 800d1e2:	2b03      	cmp	r3, #3
 800d1e4:	d059      	beq.n	800d29a <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ea:	69db      	ldr	r3, [r3, #28]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d154      	bne.n	800d29a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d13d      	bne.n	800d27a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800d1fe:	e036      	b.n	800d26e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	2b0f      	cmp	r3, #15
 800d206:	d90b      	bls.n	800d220 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d210:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d212:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d218:	1d1a      	adds	r2, r3, #4
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	665a      	str	r2, [r3, #100]	; 0x64
 800d21e:	e01d      	b.n	800d25c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	2b07      	cmp	r3, #7
 800d226:	d90b      	bls.n	800d240 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	8812      	ldrh	r2, [r2, #0]
 800d230:	b292      	uxth	r2, r2
 800d232:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d238:	1c9a      	adds	r2, r3, #2
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	665a      	str	r2, [r3, #100]	; 0x64
 800d23e:	e00d      	b.n	800d25c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d24c:	7812      	ldrb	r2, [r2, #0]
 800d24e:	b2d2      	uxtb	r2, r2
 800d250:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d262:	b29b      	uxth	r3, r3
 800d264:	3b01      	subs	r3, #1
 800d266:	b29a      	uxth	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d274:	b29b      	uxth	r3, r3
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1c2      	bne.n	800d200 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f93a 	bl	800d4f4 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f90a 	bl	800d4ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800d298:	e0e3      	b.n	800d462 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d29a:	7cfb      	ldrb	r3, [r7, #19]
 800d29c:	2b05      	cmp	r3, #5
 800d29e:	d103      	bne.n	800d2a8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 f8f9 	bl	800d498 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d2a6:	e0d9      	b.n	800d45c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d2a8:	7cfb      	ldrb	r3, [r7, #19]
 800d2aa:	2b04      	cmp	r3, #4
 800d2ac:	d103      	bne.n	800d2b6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f8e8 	bl	800d484 <HAL_SPI_RxCpltCallback>
    return;
 800d2b4:	e0d2      	b.n	800d45c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d2b6:	7cfb      	ldrb	r3, [r7, #19]
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	f040 80cf 	bne.w	800d45c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f8d6 	bl	800d470 <HAL_SPI_TxCpltCallback>
    return;
 800d2c4:	e0ca      	b.n	800d45c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00d      	beq.n	800d2ec <HAL_SPI_IRQHandler+0x23c>
 800d2d0:	6a3b      	ldr	r3, [r7, #32]
 800d2d2:	f003 0308 	and.w	r3, r3, #8
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d008      	beq.n	800d2ec <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	699a      	ldr	r2, [r3, #24]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2e8:	619a      	str	r2, [r3, #24]

    return;
 800d2ea:	e0ba      	b.n	800d462 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f000 80b5 	beq.w	800d462 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00f      	beq.n	800d322 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d308:	f043 0204 	orr.w	r2, r3, #4
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	699a      	ldr	r2, [r3, #24]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d320:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00f      	beq.n	800d34c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d332:	f043 0201 	orr.w	r2, r3, #1
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	699a      	ldr	r2, [r3, #24]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d34a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00f      	beq.n	800d376 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d35c:	f043 0208 	orr.w	r2, r3, #8
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	699a      	ldr	r2, [r3, #24]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d374:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	f003 0320 	and.w	r3, r3, #32
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00f      	beq.n	800d3a0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d386:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	699a      	ldr	r2, [r3, #24]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f042 0220 	orr.w	r2, r2, #32
 800d39e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d05a      	beq.n	800d460 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f022 0201 	bic.w	r2, r2, #1
 800d3b8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	6919      	ldr	r1, [r3, #16]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	4b28      	ldr	r3, [pc, #160]	; (800d468 <HAL_SPI_IRQHandler+0x3b8>)
 800d3c6:	400b      	ands	r3, r1
 800d3c8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d3d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d3d4:	d138      	bne.n	800d448 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	689a      	ldr	r2, [r3, #8]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d3e4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d013      	beq.n	800d416 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3f2:	4a1e      	ldr	r2, [pc, #120]	; (800d46c <HAL_SPI_IRQHandler+0x3bc>)
 800d3f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fb faba 	bl	8008974 <HAL_DMA_Abort_IT>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d007      	beq.n	800d416 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d40c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d020      	beq.n	800d460 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d422:	4a12      	ldr	r2, [pc, #72]	; (800d46c <HAL_SPI_IRQHandler+0x3bc>)
 800d424:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fb faa2 	bl	8008974 <HAL_DMA_Abort_IT>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d014      	beq.n	800d460 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d43c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d446:	e00b      	b.n	800d460 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f82b 	bl	800d4ac <HAL_SPI_ErrorCallback>
    return;
 800d456:	e003      	b.n	800d460 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800d458:	bf00      	nop
 800d45a:	e002      	b.n	800d462 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d45c:	bf00      	nop
 800d45e:	e000      	b.n	800d462 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d460:	bf00      	nop
  }
}
 800d462:	3728      	adds	r7, #40	; 0x28
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	fffffc94 	.word	0xfffffc94
 800d46c:	0800d4c1 	.word	0x0800d4c1

0800d470 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d4b4:	bf00      	nop
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7ff ffe0 	bl	800d4ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d4ec:	bf00      	nop
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	695b      	ldr	r3, [r3, #20]
 800d502:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	699a      	ldr	r2, [r3, #24]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f042 0208 	orr.w	r2, r2, #8
 800d512:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	699a      	ldr	r2, [r3, #24]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f042 0210 	orr.w	r2, r2, #16
 800d522:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f022 0201 	bic.w	r2, r2, #1
 800d532:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	6919      	ldr	r1, [r3, #16]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	4b3c      	ldr	r3, [pc, #240]	; (800d630 <SPI_CloseTransfer+0x13c>)
 800d540:	400b      	ands	r3, r1
 800d542:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	689a      	ldr	r2, [r3, #8]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d552:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	2b04      	cmp	r3, #4
 800d55e:	d014      	beq.n	800d58a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f003 0320 	and.w	r3, r3, #32
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00f      	beq.n	800d58a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d570:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	699a      	ldr	r2, [r3, #24]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f042 0220 	orr.w	r2, r2, #32
 800d588:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d590:	b2db      	uxtb	r3, r3
 800d592:	2b03      	cmp	r3, #3
 800d594:	d014      	beq.n	800d5c0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00f      	beq.n	800d5c0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5a6:	f043 0204 	orr.w	r2, r3, #4
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	699a      	ldr	r2, [r3, #24]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5be:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00f      	beq.n	800d5ea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5d0:	f043 0201 	orr.w	r2, r3, #1
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	699a      	ldr	r2, [r3, #24]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5e8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00f      	beq.n	800d614 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5fa:	f043 0208 	orr.w	r2, r3, #8
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	699a      	ldr	r2, [r3, #24]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d612:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d624:	bf00      	nop
 800d626:	3714      	adds	r7, #20
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr
 800d630:	fffffc90 	.word	0xfffffc90

0800d634 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d640:	095b      	lsrs	r3, r3, #5
 800d642:	3301      	adds	r3, #1
 800d644:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	3301      	adds	r3, #1
 800d64c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	3307      	adds	r3, #7
 800d652:	08db      	lsrs	r3, r3, #3
 800d654:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	68fa      	ldr	r2, [r7, #12]
 800d65a:	fb02 f303 	mul.w	r3, r2, r3
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3714      	adds	r7, #20
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr

0800d66a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b082      	sub	sp, #8
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d101      	bne.n	800d67c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d678:	2301      	movs	r3, #1
 800d67a:	e049      	b.n	800d710 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d682:	b2db      	uxtb	r3, r3
 800d684:	2b00      	cmp	r3, #0
 800d686:	d106      	bne.n	800d696 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7f8 fda3 	bl	80061dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2202      	movs	r2, #2
 800d69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	3304      	adds	r3, #4
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	f000 fed3 	bl	800e454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2201      	movs	r2, #1
 800d70a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d70e:	2300      	movs	r3, #0
}
 800d710:	4618      	mov	r0, r3
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d001      	beq.n	800d730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d72c:	2301      	movs	r3, #1
 800d72e:	e054      	b.n	800d7da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2202      	movs	r2, #2
 800d734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68da      	ldr	r2, [r3, #12]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f042 0201 	orr.w	r2, r2, #1
 800d746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4a26      	ldr	r2, [pc, #152]	; (800d7e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d022      	beq.n	800d798 <HAL_TIM_Base_Start_IT+0x80>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d75a:	d01d      	beq.n	800d798 <HAL_TIM_Base_Start_IT+0x80>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a22      	ldr	r2, [pc, #136]	; (800d7ec <HAL_TIM_Base_Start_IT+0xd4>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d018      	beq.n	800d798 <HAL_TIM_Base_Start_IT+0x80>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4a21      	ldr	r2, [pc, #132]	; (800d7f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d013      	beq.n	800d798 <HAL_TIM_Base_Start_IT+0x80>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a1f      	ldr	r2, [pc, #124]	; (800d7f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d00e      	beq.n	800d798 <HAL_TIM_Base_Start_IT+0x80>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a1e      	ldr	r2, [pc, #120]	; (800d7f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d009      	beq.n	800d798 <HAL_TIM_Base_Start_IT+0x80>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a1c      	ldr	r2, [pc, #112]	; (800d7fc <HAL_TIM_Base_Start_IT+0xe4>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d004      	beq.n	800d798 <HAL_TIM_Base_Start_IT+0x80>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4a1b      	ldr	r2, [pc, #108]	; (800d800 <HAL_TIM_Base_Start_IT+0xe8>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d115      	bne.n	800d7c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	689a      	ldr	r2, [r3, #8]
 800d79e:	4b19      	ldr	r3, [pc, #100]	; (800d804 <HAL_TIM_Base_Start_IT+0xec>)
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2b06      	cmp	r3, #6
 800d7a8:	d015      	beq.n	800d7d6 <HAL_TIM_Base_Start_IT+0xbe>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7b0:	d011      	beq.n	800d7d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f042 0201 	orr.w	r2, r2, #1
 800d7c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7c2:	e008      	b.n	800d7d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f042 0201 	orr.w	r2, r2, #1
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	e000      	b.n	800d7d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3714      	adds	r7, #20
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	40010000 	.word	0x40010000
 800d7ec:	40000400 	.word	0x40000400
 800d7f0:	40000800 	.word	0x40000800
 800d7f4:	40000c00 	.word	0x40000c00
 800d7f8:	40010400 	.word	0x40010400
 800d7fc:	40001800 	.word	0x40001800
 800d800:	40014000 	.word	0x40014000
 800d804:	00010007 	.word	0x00010007

0800d808 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	68da      	ldr	r2, [r3, #12]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f022 0201 	bic.w	r2, r2, #1
 800d81e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6a1a      	ldr	r2, [r3, #32]
 800d826:	f241 1311 	movw	r3, #4369	; 0x1111
 800d82a:	4013      	ands	r3, r2
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10f      	bne.n	800d850 <HAL_TIM_Base_Stop_IT+0x48>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	6a1a      	ldr	r2, [r3, #32]
 800d836:	f240 4344 	movw	r3, #1092	; 0x444
 800d83a:	4013      	ands	r3, r2
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d107      	bne.n	800d850 <HAL_TIM_Base_Stop_IT+0x48>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f022 0201 	bic.w	r2, r2, #1
 800d84e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2201      	movs	r2, #1
 800d854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b082      	sub	sp, #8
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d101      	bne.n	800d878 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	e049      	b.n	800d90c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	2b00      	cmp	r3, #0
 800d882:	d106      	bne.n	800d892 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 f841 	bl	800d914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2202      	movs	r2, #2
 800d896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	4610      	mov	r0, r2
 800d8a6:	f000 fdd5 	bl	800e454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2201      	movs	r2, #1
 800d906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d91c:	bf00      	nop
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d109      	bne.n	800d94c <HAL_TIM_PWM_Start+0x24>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b01      	cmp	r3, #1
 800d942:	bf14      	ite	ne
 800d944:	2301      	movne	r3, #1
 800d946:	2300      	moveq	r3, #0
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	e03c      	b.n	800d9c6 <HAL_TIM_PWM_Start+0x9e>
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	2b04      	cmp	r3, #4
 800d950:	d109      	bne.n	800d966 <HAL_TIM_PWM_Start+0x3e>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	bf14      	ite	ne
 800d95e:	2301      	movne	r3, #1
 800d960:	2300      	moveq	r3, #0
 800d962:	b2db      	uxtb	r3, r3
 800d964:	e02f      	b.n	800d9c6 <HAL_TIM_PWM_Start+0x9e>
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	2b08      	cmp	r3, #8
 800d96a:	d109      	bne.n	800d980 <HAL_TIM_PWM_Start+0x58>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d972:	b2db      	uxtb	r3, r3
 800d974:	2b01      	cmp	r3, #1
 800d976:	bf14      	ite	ne
 800d978:	2301      	movne	r3, #1
 800d97a:	2300      	moveq	r3, #0
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	e022      	b.n	800d9c6 <HAL_TIM_PWM_Start+0x9e>
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	2b0c      	cmp	r3, #12
 800d984:	d109      	bne.n	800d99a <HAL_TIM_PWM_Start+0x72>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	2b01      	cmp	r3, #1
 800d990:	bf14      	ite	ne
 800d992:	2301      	movne	r3, #1
 800d994:	2300      	moveq	r3, #0
 800d996:	b2db      	uxtb	r3, r3
 800d998:	e015      	b.n	800d9c6 <HAL_TIM_PWM_Start+0x9e>
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	2b10      	cmp	r3, #16
 800d99e:	d109      	bne.n	800d9b4 <HAL_TIM_PWM_Start+0x8c>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	bf14      	ite	ne
 800d9ac:	2301      	movne	r3, #1
 800d9ae:	2300      	moveq	r3, #0
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	e008      	b.n	800d9c6 <HAL_TIM_PWM_Start+0x9e>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	bf14      	ite	ne
 800d9c0:	2301      	movne	r3, #1
 800d9c2:	2300      	moveq	r3, #0
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d001      	beq.n	800d9ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e0a1      	b.n	800db12 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d104      	bne.n	800d9de <HAL_TIM_PWM_Start+0xb6>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2202      	movs	r2, #2
 800d9d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d9dc:	e023      	b.n	800da26 <HAL_TIM_PWM_Start+0xfe>
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2b04      	cmp	r3, #4
 800d9e2:	d104      	bne.n	800d9ee <HAL_TIM_PWM_Start+0xc6>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d9ec:	e01b      	b.n	800da26 <HAL_TIM_PWM_Start+0xfe>
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	2b08      	cmp	r3, #8
 800d9f2:	d104      	bne.n	800d9fe <HAL_TIM_PWM_Start+0xd6>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2202      	movs	r2, #2
 800d9f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d9fc:	e013      	b.n	800da26 <HAL_TIM_PWM_Start+0xfe>
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2b0c      	cmp	r3, #12
 800da02:	d104      	bne.n	800da0e <HAL_TIM_PWM_Start+0xe6>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2202      	movs	r2, #2
 800da08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da0c:	e00b      	b.n	800da26 <HAL_TIM_PWM_Start+0xfe>
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b10      	cmp	r3, #16
 800da12:	d104      	bne.n	800da1e <HAL_TIM_PWM_Start+0xf6>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2202      	movs	r2, #2
 800da18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da1c:	e003      	b.n	800da26 <HAL_TIM_PWM_Start+0xfe>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2202      	movs	r2, #2
 800da22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	2201      	movs	r2, #1
 800da2c:	6839      	ldr	r1, [r7, #0]
 800da2e:	4618      	mov	r0, r3
 800da30:	f001 f91e 	bl	800ec70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a38      	ldr	r2, [pc, #224]	; (800db1c <HAL_TIM_PWM_Start+0x1f4>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d013      	beq.n	800da66 <HAL_TIM_PWM_Start+0x13e>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a37      	ldr	r2, [pc, #220]	; (800db20 <HAL_TIM_PWM_Start+0x1f8>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d00e      	beq.n	800da66 <HAL_TIM_PWM_Start+0x13e>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a35      	ldr	r2, [pc, #212]	; (800db24 <HAL_TIM_PWM_Start+0x1fc>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d009      	beq.n	800da66 <HAL_TIM_PWM_Start+0x13e>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a34      	ldr	r2, [pc, #208]	; (800db28 <HAL_TIM_PWM_Start+0x200>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d004      	beq.n	800da66 <HAL_TIM_PWM_Start+0x13e>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a32      	ldr	r2, [pc, #200]	; (800db2c <HAL_TIM_PWM_Start+0x204>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d101      	bne.n	800da6a <HAL_TIM_PWM_Start+0x142>
 800da66:	2301      	movs	r3, #1
 800da68:	e000      	b.n	800da6c <HAL_TIM_PWM_Start+0x144>
 800da6a:	2300      	movs	r3, #0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d007      	beq.n	800da80 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a25      	ldr	r2, [pc, #148]	; (800db1c <HAL_TIM_PWM_Start+0x1f4>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d022      	beq.n	800dad0 <HAL_TIM_PWM_Start+0x1a8>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da92:	d01d      	beq.n	800dad0 <HAL_TIM_PWM_Start+0x1a8>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a25      	ldr	r2, [pc, #148]	; (800db30 <HAL_TIM_PWM_Start+0x208>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d018      	beq.n	800dad0 <HAL_TIM_PWM_Start+0x1a8>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a24      	ldr	r2, [pc, #144]	; (800db34 <HAL_TIM_PWM_Start+0x20c>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d013      	beq.n	800dad0 <HAL_TIM_PWM_Start+0x1a8>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a22      	ldr	r2, [pc, #136]	; (800db38 <HAL_TIM_PWM_Start+0x210>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d00e      	beq.n	800dad0 <HAL_TIM_PWM_Start+0x1a8>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a1a      	ldr	r2, [pc, #104]	; (800db20 <HAL_TIM_PWM_Start+0x1f8>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d009      	beq.n	800dad0 <HAL_TIM_PWM_Start+0x1a8>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a1e      	ldr	r2, [pc, #120]	; (800db3c <HAL_TIM_PWM_Start+0x214>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d004      	beq.n	800dad0 <HAL_TIM_PWM_Start+0x1a8>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a16      	ldr	r2, [pc, #88]	; (800db24 <HAL_TIM_PWM_Start+0x1fc>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d115      	bne.n	800dafc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	689a      	ldr	r2, [r3, #8]
 800dad6:	4b1a      	ldr	r3, [pc, #104]	; (800db40 <HAL_TIM_PWM_Start+0x218>)
 800dad8:	4013      	ands	r3, r2
 800dada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2b06      	cmp	r3, #6
 800dae0:	d015      	beq.n	800db0e <HAL_TIM_PWM_Start+0x1e6>
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dae8:	d011      	beq.n	800db0e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f042 0201 	orr.w	r2, r2, #1
 800daf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dafa:	e008      	b.n	800db0e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f042 0201 	orr.w	r2, r2, #1
 800db0a:	601a      	str	r2, [r3, #0]
 800db0c:	e000      	b.n	800db10 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	40010000 	.word	0x40010000
 800db20:	40010400 	.word	0x40010400
 800db24:	40014000 	.word	0x40014000
 800db28:	40014400 	.word	0x40014400
 800db2c:	40014800 	.word	0x40014800
 800db30:	40000400 	.word	0x40000400
 800db34:	40000800 	.word	0x40000800
 800db38:	40000c00 	.word	0x40000c00
 800db3c:	40001800 	.word	0x40001800
 800db40:	00010007 	.word	0x00010007

0800db44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b086      	sub	sp, #24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d101      	bne.n	800db58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	e08f      	b.n	800dc78 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	2b00      	cmp	r3, #0
 800db62:	d106      	bne.n	800db72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f7f8 fca7 	bl	80064c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2202      	movs	r2, #2
 800db76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6899      	ldr	r1, [r3, #8]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	4b3e      	ldr	r3, [pc, #248]	; (800dc80 <HAL_TIM_Encoder_Init+0x13c>)
 800db86:	400b      	ands	r3, r1
 800db88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	3304      	adds	r3, #4
 800db92:	4619      	mov	r1, r3
 800db94:	4610      	mov	r0, r2
 800db96:	f000 fc5d 	bl	800e454 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6a1b      	ldr	r3, [r3, #32]
 800dbb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	697a      	ldr	r2, [r7, #20]
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800dbbc:	693a      	ldr	r2, [r7, #16]
 800dbbe:	4b31      	ldr	r3, [pc, #196]	; (800dc84 <HAL_TIM_Encoder_Init+0x140>)
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	689a      	ldr	r2, [r3, #8]
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	699b      	ldr	r3, [r3, #24]
 800dbcc:	021b      	lsls	r3, r3, #8
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800dbd6:	693a      	ldr	r2, [r7, #16]
 800dbd8:	4b2b      	ldr	r3, [pc, #172]	; (800dc88 <HAL_TIM_Encoder_Init+0x144>)
 800dbda:	4013      	ands	r3, r2
 800dbdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800dbde:	693a      	ldr	r2, [r7, #16]
 800dbe0:	4b2a      	ldr	r3, [pc, #168]	; (800dc8c <HAL_TIM_Encoder_Init+0x148>)
 800dbe2:	4013      	ands	r3, r2
 800dbe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	68da      	ldr	r2, [r3, #12]
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	69db      	ldr	r3, [r3, #28]
 800dbee:	021b      	lsls	r3, r3, #8
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	693a      	ldr	r2, [r7, #16]
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	011a      	lsls	r2, r3, #4
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	6a1b      	ldr	r3, [r3, #32]
 800dc02:	031b      	lsls	r3, r3, #12
 800dc04:	4313      	orrs	r3, r2
 800dc06:	693a      	ldr	r2, [r7, #16]
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800dc12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800dc1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	685a      	ldr	r2, [r3, #4]
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	695b      	ldr	r3, [r3, #20]
 800dc24:	011b      	lsls	r3, r3, #4
 800dc26:	4313      	orrs	r3, r2
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	697a      	ldr	r2, [r7, #20]
 800dc34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	693a      	ldr	r2, [r7, #16]
 800dc3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2201      	movs	r2, #1
 800dc62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2201      	movs	r2, #1
 800dc72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3718      	adds	r7, #24
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	fffebff8 	.word	0xfffebff8
 800dc84:	fffffcfc 	.word	0xfffffcfc
 800dc88:	fffff3f3 	.word	0xfffff3f3
 800dc8c:	ffff0f0f 	.word	0xffff0f0f

0800dc90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dca0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dca8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d110      	bne.n	800dce2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dcc0:	7bfb      	ldrb	r3, [r7, #15]
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d102      	bne.n	800dccc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800dcc6:	7b7b      	ldrb	r3, [r7, #13]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d001      	beq.n	800dcd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800dccc:	2301      	movs	r3, #1
 800dcce:	e069      	b.n	800dda4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2202      	movs	r2, #2
 800dcd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2202      	movs	r2, #2
 800dcdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dce0:	e031      	b.n	800dd46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b04      	cmp	r3, #4
 800dce6:	d110      	bne.n	800dd0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dce8:	7bbb      	ldrb	r3, [r7, #14]
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d102      	bne.n	800dcf4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dcee:	7b3b      	ldrb	r3, [r7, #12]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d001      	beq.n	800dcf8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	e055      	b.n	800dda4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2202      	movs	r2, #2
 800dcfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2202      	movs	r2, #2
 800dd04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd08:	e01d      	b.n	800dd46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dd0a:	7bfb      	ldrb	r3, [r7, #15]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d108      	bne.n	800dd22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dd10:	7bbb      	ldrb	r3, [r7, #14]
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d105      	bne.n	800dd22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dd16:	7b7b      	ldrb	r3, [r7, #13]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d102      	bne.n	800dd22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dd1c:	7b3b      	ldrb	r3, [r7, #12]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d001      	beq.n	800dd26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	e03e      	b.n	800dda4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2202      	movs	r2, #2
 800dd2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2202      	movs	r2, #2
 800dd32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2202      	movs	r2, #2
 800dd3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2202      	movs	r2, #2
 800dd42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d003      	beq.n	800dd54 <HAL_TIM_Encoder_Start+0xc4>
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	2b04      	cmp	r3, #4
 800dd50:	d008      	beq.n	800dd64 <HAL_TIM_Encoder_Start+0xd4>
 800dd52:	e00f      	b.n	800dd74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f000 ff87 	bl	800ec70 <TIM_CCxChannelCmd>
      break;
 800dd62:	e016      	b.n	800dd92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2201      	movs	r2, #1
 800dd6a:	2104      	movs	r1, #4
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 ff7f 	bl	800ec70 <TIM_CCxChannelCmd>
      break;
 800dd72:	e00e      	b.n	800dd92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 ff77 	bl	800ec70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2201      	movs	r2, #1
 800dd88:	2104      	movs	r1, #4
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 ff70 	bl	800ec70 <TIM_CCxChannelCmd>
      break;
 800dd90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f042 0201 	orr.w	r2, r2, #1
 800dda0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3710      	adds	r7, #16
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	f003 0302 	and.w	r3, r3, #2
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	d122      	bne.n	800de08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	f003 0302 	and.w	r3, r3, #2
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	d11b      	bne.n	800de08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f06f 0202 	mvn.w	r2, #2
 800ddd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2201      	movs	r2, #1
 800ddde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	699b      	ldr	r3, [r3, #24]
 800dde6:	f003 0303 	and.w	r3, r3, #3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fb12 	bl	800e418 <HAL_TIM_IC_CaptureCallback>
 800ddf4:	e005      	b.n	800de02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fb04 	bl	800e404 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 fb15 	bl	800e42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	691b      	ldr	r3, [r3, #16]
 800de0e:	f003 0304 	and.w	r3, r3, #4
 800de12:	2b04      	cmp	r3, #4
 800de14:	d122      	bne.n	800de5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	f003 0304 	and.w	r3, r3, #4
 800de20:	2b04      	cmp	r3, #4
 800de22:	d11b      	bne.n	800de5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f06f 0204 	mvn.w	r2, #4
 800de2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2202      	movs	r2, #2
 800de32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	699b      	ldr	r3, [r3, #24]
 800de3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d003      	beq.n	800de4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fae8 	bl	800e418 <HAL_TIM_IC_CaptureCallback>
 800de48:	e005      	b.n	800de56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fada 	bl	800e404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 faeb 	bl	800e42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	f003 0308 	and.w	r3, r3, #8
 800de66:	2b08      	cmp	r3, #8
 800de68:	d122      	bne.n	800deb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	f003 0308 	and.w	r3, r3, #8
 800de74:	2b08      	cmp	r3, #8
 800de76:	d11b      	bne.n	800deb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f06f 0208 	mvn.w	r2, #8
 800de80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2204      	movs	r2, #4
 800de86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	69db      	ldr	r3, [r3, #28]
 800de8e:	f003 0303 	and.w	r3, r3, #3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d003      	beq.n	800de9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 fabe 	bl	800e418 <HAL_TIM_IC_CaptureCallback>
 800de9c:	e005      	b.n	800deaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 fab0 	bl	800e404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fac1 	bl	800e42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	f003 0310 	and.w	r3, r3, #16
 800deba:	2b10      	cmp	r3, #16
 800debc:	d122      	bne.n	800df04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	f003 0310 	and.w	r3, r3, #16
 800dec8:	2b10      	cmp	r3, #16
 800deca:	d11b      	bne.n	800df04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f06f 0210 	mvn.w	r2, #16
 800ded4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2208      	movs	r2, #8
 800deda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	69db      	ldr	r3, [r3, #28]
 800dee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fa94 	bl	800e418 <HAL_TIM_IC_CaptureCallback>
 800def0:	e005      	b.n	800defe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fa86 	bl	800e404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fa97 	bl	800e42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d10e      	bne.n	800df30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	f003 0301 	and.w	r3, r3, #1
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d107      	bne.n	800df30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f06f 0201 	mvn.w	r2, #1
 800df28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7f5 fcb4 	bl	8003898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df3a:	2b80      	cmp	r3, #128	; 0x80
 800df3c:	d10e      	bne.n	800df5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df48:	2b80      	cmp	r3, #128	; 0x80
 800df4a:	d107      	bne.n	800df5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800df54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 ffc6 	bl	800eee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	691b      	ldr	r3, [r3, #16]
 800df62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df6a:	d10e      	bne.n	800df8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df76:	2b80      	cmp	r3, #128	; 0x80
 800df78:	d107      	bne.n	800df8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800df82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 ffb9 	bl	800eefc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df94:	2b40      	cmp	r3, #64	; 0x40
 800df96:	d10e      	bne.n	800dfb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfa2:	2b40      	cmp	r3, #64	; 0x40
 800dfa4:	d107      	bne.n	800dfb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dfae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fa45 	bl	800e440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	691b      	ldr	r3, [r3, #16]
 800dfbc:	f003 0320 	and.w	r3, r3, #32
 800dfc0:	2b20      	cmp	r3, #32
 800dfc2:	d10e      	bne.n	800dfe2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	f003 0320 	and.w	r3, r3, #32
 800dfce:	2b20      	cmp	r3, #32
 800dfd0:	d107      	bne.n	800dfe2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f06f 0220 	mvn.w	r2, #32
 800dfda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 ff79 	bl	800eed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dfe2:	bf00      	nop
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e002:	2b01      	cmp	r3, #1
 800e004:	d101      	bne.n	800e00a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e006:	2302      	movs	r3, #2
 800e008:	e0ff      	b.n	800e20a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2201      	movs	r2, #1
 800e00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2b14      	cmp	r3, #20
 800e016:	f200 80f0 	bhi.w	800e1fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e01a:	a201      	add	r2, pc, #4	; (adr r2, 800e020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e020:	0800e075 	.word	0x0800e075
 800e024:	0800e1fb 	.word	0x0800e1fb
 800e028:	0800e1fb 	.word	0x0800e1fb
 800e02c:	0800e1fb 	.word	0x0800e1fb
 800e030:	0800e0b5 	.word	0x0800e0b5
 800e034:	0800e1fb 	.word	0x0800e1fb
 800e038:	0800e1fb 	.word	0x0800e1fb
 800e03c:	0800e1fb 	.word	0x0800e1fb
 800e040:	0800e0f7 	.word	0x0800e0f7
 800e044:	0800e1fb 	.word	0x0800e1fb
 800e048:	0800e1fb 	.word	0x0800e1fb
 800e04c:	0800e1fb 	.word	0x0800e1fb
 800e050:	0800e137 	.word	0x0800e137
 800e054:	0800e1fb 	.word	0x0800e1fb
 800e058:	0800e1fb 	.word	0x0800e1fb
 800e05c:	0800e1fb 	.word	0x0800e1fb
 800e060:	0800e179 	.word	0x0800e179
 800e064:	0800e1fb 	.word	0x0800e1fb
 800e068:	0800e1fb 	.word	0x0800e1fb
 800e06c:	0800e1fb 	.word	0x0800e1fb
 800e070:	0800e1b9 	.word	0x0800e1b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	68b9      	ldr	r1, [r7, #8]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f000 fa84 	bl	800e588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	699a      	ldr	r2, [r3, #24]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f042 0208 	orr.w	r2, r2, #8
 800e08e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	699a      	ldr	r2, [r3, #24]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f022 0204 	bic.w	r2, r2, #4
 800e09e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	6999      	ldr	r1, [r3, #24]
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	691a      	ldr	r2, [r3, #16]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	430a      	orrs	r2, r1
 800e0b0:	619a      	str	r2, [r3, #24]
      break;
 800e0b2:	e0a5      	b.n	800e200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	68b9      	ldr	r1, [r7, #8]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 faf4 	bl	800e6a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	699a      	ldr	r2, [r3, #24]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	699a      	ldr	r2, [r3, #24]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6999      	ldr	r1, [r3, #24]
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	021a      	lsls	r2, r3, #8
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	430a      	orrs	r2, r1
 800e0f2:	619a      	str	r2, [r3, #24]
      break;
 800e0f4:	e084      	b.n	800e200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68b9      	ldr	r1, [r7, #8]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f000 fb5d 	bl	800e7bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	69da      	ldr	r2, [r3, #28]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f042 0208 	orr.w	r2, r2, #8
 800e110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	69da      	ldr	r2, [r3, #28]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f022 0204 	bic.w	r2, r2, #4
 800e120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	69d9      	ldr	r1, [r3, #28]
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	691a      	ldr	r2, [r3, #16]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	430a      	orrs	r2, r1
 800e132:	61da      	str	r2, [r3, #28]
      break;
 800e134:	e064      	b.n	800e200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68b9      	ldr	r1, [r7, #8]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f000 fbc5 	bl	800e8cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	69da      	ldr	r2, [r3, #28]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	69da      	ldr	r2, [r3, #28]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	69d9      	ldr	r1, [r3, #28]
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	691b      	ldr	r3, [r3, #16]
 800e16c:	021a      	lsls	r2, r3, #8
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	430a      	orrs	r2, r1
 800e174:	61da      	str	r2, [r3, #28]
      break;
 800e176:	e043      	b.n	800e200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	68b9      	ldr	r1, [r7, #8]
 800e17e:	4618      	mov	r0, r3
 800e180:	f000 fc0e 	bl	800e9a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f042 0208 	orr.w	r2, r2, #8
 800e192:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f022 0204 	bic.w	r2, r2, #4
 800e1a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	691a      	ldr	r2, [r3, #16]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	430a      	orrs	r2, r1
 800e1b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e1b6:	e023      	b.n	800e200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	68b9      	ldr	r1, [r7, #8]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f000 fc52 	bl	800ea68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e1d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e1e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	021a      	lsls	r2, r3, #8
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	430a      	orrs	r2, r1
 800e1f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e1f8:	e002      	b.n	800e200 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	75fb      	strb	r3, [r7, #23]
      break;
 800e1fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2200      	movs	r2, #0
 800e204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e208:	7dfb      	ldrb	r3, [r7, #23]
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3718      	adds	r7, #24
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop

0800e214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e21e:	2300      	movs	r3, #0
 800e220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d101      	bne.n	800e230 <HAL_TIM_ConfigClockSource+0x1c>
 800e22c:	2302      	movs	r3, #2
 800e22e:	e0dc      	b.n	800e3ea <HAL_TIM_ConfigClockSource+0x1d6>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2201      	movs	r2, #1
 800e234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2202      	movs	r2, #2
 800e23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e248:	68ba      	ldr	r2, [r7, #8]
 800e24a:	4b6a      	ldr	r3, [pc, #424]	; (800e3f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e24c:	4013      	ands	r3, r2
 800e24e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a64      	ldr	r2, [pc, #400]	; (800e3f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e266:	4293      	cmp	r3, r2
 800e268:	f000 80a9 	beq.w	800e3be <HAL_TIM_ConfigClockSource+0x1aa>
 800e26c:	4a62      	ldr	r2, [pc, #392]	; (800e3f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	f200 80ae 	bhi.w	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e274:	4a61      	ldr	r2, [pc, #388]	; (800e3fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800e276:	4293      	cmp	r3, r2
 800e278:	f000 80a1 	beq.w	800e3be <HAL_TIM_ConfigClockSource+0x1aa>
 800e27c:	4a5f      	ldr	r2, [pc, #380]	; (800e3fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	f200 80a6 	bhi.w	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e284:	4a5e      	ldr	r2, [pc, #376]	; (800e400 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e286:	4293      	cmp	r3, r2
 800e288:	f000 8099 	beq.w	800e3be <HAL_TIM_ConfigClockSource+0x1aa>
 800e28c:	4a5c      	ldr	r2, [pc, #368]	; (800e400 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	f200 809e 	bhi.w	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e294:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e298:	f000 8091 	beq.w	800e3be <HAL_TIM_ConfigClockSource+0x1aa>
 800e29c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e2a0:	f200 8096 	bhi.w	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e2a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2a8:	f000 8089 	beq.w	800e3be <HAL_TIM_ConfigClockSource+0x1aa>
 800e2ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2b0:	f200 808e 	bhi.w	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e2b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2b8:	d03e      	beq.n	800e338 <HAL_TIM_ConfigClockSource+0x124>
 800e2ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2be:	f200 8087 	bhi.w	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e2c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2c6:	f000 8086 	beq.w	800e3d6 <HAL_TIM_ConfigClockSource+0x1c2>
 800e2ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2ce:	d87f      	bhi.n	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e2d0:	2b70      	cmp	r3, #112	; 0x70
 800e2d2:	d01a      	beq.n	800e30a <HAL_TIM_ConfigClockSource+0xf6>
 800e2d4:	2b70      	cmp	r3, #112	; 0x70
 800e2d6:	d87b      	bhi.n	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e2d8:	2b60      	cmp	r3, #96	; 0x60
 800e2da:	d050      	beq.n	800e37e <HAL_TIM_ConfigClockSource+0x16a>
 800e2dc:	2b60      	cmp	r3, #96	; 0x60
 800e2de:	d877      	bhi.n	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e2e0:	2b50      	cmp	r3, #80	; 0x50
 800e2e2:	d03c      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x14a>
 800e2e4:	2b50      	cmp	r3, #80	; 0x50
 800e2e6:	d873      	bhi.n	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e2e8:	2b40      	cmp	r3, #64	; 0x40
 800e2ea:	d058      	beq.n	800e39e <HAL_TIM_ConfigClockSource+0x18a>
 800e2ec:	2b40      	cmp	r3, #64	; 0x40
 800e2ee:	d86f      	bhi.n	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e2f0:	2b30      	cmp	r3, #48	; 0x30
 800e2f2:	d064      	beq.n	800e3be <HAL_TIM_ConfigClockSource+0x1aa>
 800e2f4:	2b30      	cmp	r3, #48	; 0x30
 800e2f6:	d86b      	bhi.n	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e2f8:	2b20      	cmp	r3, #32
 800e2fa:	d060      	beq.n	800e3be <HAL_TIM_ConfigClockSource+0x1aa>
 800e2fc:	2b20      	cmp	r3, #32
 800e2fe:	d867      	bhi.n	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e300:	2b00      	cmp	r3, #0
 800e302:	d05c      	beq.n	800e3be <HAL_TIM_ConfigClockSource+0x1aa>
 800e304:	2b10      	cmp	r3, #16
 800e306:	d05a      	beq.n	800e3be <HAL_TIM_ConfigClockSource+0x1aa>
 800e308:	e062      	b.n	800e3d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6818      	ldr	r0, [r3, #0]
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	6899      	ldr	r1, [r3, #8]
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	f000 fc89 	bl	800ec30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e32c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	609a      	str	r2, [r3, #8]
      break;
 800e336:	e04f      	b.n	800e3d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6818      	ldr	r0, [r3, #0]
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	6899      	ldr	r1, [r3, #8]
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	685a      	ldr	r2, [r3, #4]
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	f000 fc72 	bl	800ec30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	689a      	ldr	r2, [r3, #8]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e35a:	609a      	str	r2, [r3, #8]
      break;
 800e35c:	e03c      	b.n	800e3d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6818      	ldr	r0, [r3, #0]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	6859      	ldr	r1, [r3, #4]
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	461a      	mov	r2, r3
 800e36c:	f000 fbe2 	bl	800eb34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2150      	movs	r1, #80	; 0x50
 800e376:	4618      	mov	r0, r3
 800e378:	f000 fc3c 	bl	800ebf4 <TIM_ITRx_SetConfig>
      break;
 800e37c:	e02c      	b.n	800e3d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6818      	ldr	r0, [r3, #0]
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	6859      	ldr	r1, [r3, #4]
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	461a      	mov	r2, r3
 800e38c:	f000 fc01 	bl	800eb92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2160      	movs	r1, #96	; 0x60
 800e396:	4618      	mov	r0, r3
 800e398:	f000 fc2c 	bl	800ebf4 <TIM_ITRx_SetConfig>
      break;
 800e39c:	e01c      	b.n	800e3d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6818      	ldr	r0, [r3, #0]
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	6859      	ldr	r1, [r3, #4]
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	f000 fbc2 	bl	800eb34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2140      	movs	r1, #64	; 0x40
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f000 fc1c 	bl	800ebf4 <TIM_ITRx_SetConfig>
      break;
 800e3bc:	e00c      	b.n	800e3d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	4610      	mov	r0, r2
 800e3ca:	f000 fc13 	bl	800ebf4 <TIM_ITRx_SetConfig>
      break;
 800e3ce:	e003      	b.n	800e3d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	73fb      	strb	r3, [r7, #15]
      break;
 800e3d4:	e000      	b.n	800e3d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e3d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3710      	adds	r7, #16
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	ffceff88 	.word	0xffceff88
 800e3f8:	00100040 	.word	0x00100040
 800e3fc:	00100030 	.word	0x00100030
 800e400:	00100020 	.word	0x00100020

0800e404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e40c:	bf00      	nop
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e434:	bf00      	nop
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e440:	b480      	push	{r7}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e448:	bf00      	nop
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	4a40      	ldr	r2, [pc, #256]	; (800e568 <TIM_Base_SetConfig+0x114>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d013      	beq.n	800e494 <TIM_Base_SetConfig+0x40>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e472:	d00f      	beq.n	800e494 <TIM_Base_SetConfig+0x40>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4a3d      	ldr	r2, [pc, #244]	; (800e56c <TIM_Base_SetConfig+0x118>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d00b      	beq.n	800e494 <TIM_Base_SetConfig+0x40>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4a3c      	ldr	r2, [pc, #240]	; (800e570 <TIM_Base_SetConfig+0x11c>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d007      	beq.n	800e494 <TIM_Base_SetConfig+0x40>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4a3b      	ldr	r2, [pc, #236]	; (800e574 <TIM_Base_SetConfig+0x120>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	d003      	beq.n	800e494 <TIM_Base_SetConfig+0x40>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	4a3a      	ldr	r2, [pc, #232]	; (800e578 <TIM_Base_SetConfig+0x124>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d108      	bne.n	800e4a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e49a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	4a2f      	ldr	r2, [pc, #188]	; (800e568 <TIM_Base_SetConfig+0x114>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d01f      	beq.n	800e4ee <TIM_Base_SetConfig+0x9a>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4b4:	d01b      	beq.n	800e4ee <TIM_Base_SetConfig+0x9a>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4a2c      	ldr	r2, [pc, #176]	; (800e56c <TIM_Base_SetConfig+0x118>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d017      	beq.n	800e4ee <TIM_Base_SetConfig+0x9a>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	4a2b      	ldr	r2, [pc, #172]	; (800e570 <TIM_Base_SetConfig+0x11c>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d013      	beq.n	800e4ee <TIM_Base_SetConfig+0x9a>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4a2a      	ldr	r2, [pc, #168]	; (800e574 <TIM_Base_SetConfig+0x120>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d00f      	beq.n	800e4ee <TIM_Base_SetConfig+0x9a>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4a29      	ldr	r2, [pc, #164]	; (800e578 <TIM_Base_SetConfig+0x124>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d00b      	beq.n	800e4ee <TIM_Base_SetConfig+0x9a>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	4a28      	ldr	r2, [pc, #160]	; (800e57c <TIM_Base_SetConfig+0x128>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d007      	beq.n	800e4ee <TIM_Base_SetConfig+0x9a>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4a27      	ldr	r2, [pc, #156]	; (800e580 <TIM_Base_SetConfig+0x12c>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d003      	beq.n	800e4ee <TIM_Base_SetConfig+0x9a>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	4a26      	ldr	r2, [pc, #152]	; (800e584 <TIM_Base_SetConfig+0x130>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d108      	bne.n	800e500 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	695b      	ldr	r3, [r3, #20]
 800e50a:	4313      	orrs	r3, r2
 800e50c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	689a      	ldr	r2, [r3, #8]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4a10      	ldr	r2, [pc, #64]	; (800e568 <TIM_Base_SetConfig+0x114>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d00f      	beq.n	800e54c <TIM_Base_SetConfig+0xf8>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4a12      	ldr	r2, [pc, #72]	; (800e578 <TIM_Base_SetConfig+0x124>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d00b      	beq.n	800e54c <TIM_Base_SetConfig+0xf8>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a11      	ldr	r2, [pc, #68]	; (800e57c <TIM_Base_SetConfig+0x128>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d007      	beq.n	800e54c <TIM_Base_SetConfig+0xf8>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a10      	ldr	r2, [pc, #64]	; (800e580 <TIM_Base_SetConfig+0x12c>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d003      	beq.n	800e54c <TIM_Base_SetConfig+0xf8>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4a0f      	ldr	r2, [pc, #60]	; (800e584 <TIM_Base_SetConfig+0x130>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d103      	bne.n	800e554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	691a      	ldr	r2, [r3, #16]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2201      	movs	r2, #1
 800e558:	615a      	str	r2, [r3, #20]
}
 800e55a:	bf00      	nop
 800e55c:	3714      	adds	r7, #20
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop
 800e568:	40010000 	.word	0x40010000
 800e56c:	40000400 	.word	0x40000400
 800e570:	40000800 	.word	0x40000800
 800e574:	40000c00 	.word	0x40000c00
 800e578:	40010400 	.word	0x40010400
 800e57c:	40014000 	.word	0x40014000
 800e580:	40014400 	.word	0x40014400
 800e584:	40014800 	.word	0x40014800

0800e588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e588:	b480      	push	{r7}
 800e58a:	b087      	sub	sp, #28
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6a1b      	ldr	r3, [r3, #32]
 800e596:	f023 0201 	bic.w	r2, r3, #1
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a1b      	ldr	r3, [r3, #32]
 800e5a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	699b      	ldr	r3, [r3, #24]
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	4b37      	ldr	r3, [pc, #220]	; (800e690 <TIM_OC1_SetConfig+0x108>)
 800e5b4:	4013      	ands	r3, r2
 800e5b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f023 0303 	bic.w	r3, r3, #3
 800e5be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	f023 0302 	bic.w	r3, r3, #2
 800e5d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	697a      	ldr	r2, [r7, #20]
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	4a2d      	ldr	r2, [pc, #180]	; (800e694 <TIM_OC1_SetConfig+0x10c>)
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d00f      	beq.n	800e604 <TIM_OC1_SetConfig+0x7c>
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4a2c      	ldr	r2, [pc, #176]	; (800e698 <TIM_OC1_SetConfig+0x110>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d00b      	beq.n	800e604 <TIM_OC1_SetConfig+0x7c>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4a2b      	ldr	r2, [pc, #172]	; (800e69c <TIM_OC1_SetConfig+0x114>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d007      	beq.n	800e604 <TIM_OC1_SetConfig+0x7c>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	4a2a      	ldr	r2, [pc, #168]	; (800e6a0 <TIM_OC1_SetConfig+0x118>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d003      	beq.n	800e604 <TIM_OC1_SetConfig+0x7c>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4a29      	ldr	r2, [pc, #164]	; (800e6a4 <TIM_OC1_SetConfig+0x11c>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d10c      	bne.n	800e61e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	f023 0308 	bic.w	r3, r3, #8
 800e60a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	697a      	ldr	r2, [r7, #20]
 800e612:	4313      	orrs	r3, r2
 800e614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	f023 0304 	bic.w	r3, r3, #4
 800e61c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4a1c      	ldr	r2, [pc, #112]	; (800e694 <TIM_OC1_SetConfig+0x10c>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d00f      	beq.n	800e646 <TIM_OC1_SetConfig+0xbe>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4a1b      	ldr	r2, [pc, #108]	; (800e698 <TIM_OC1_SetConfig+0x110>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d00b      	beq.n	800e646 <TIM_OC1_SetConfig+0xbe>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4a1a      	ldr	r2, [pc, #104]	; (800e69c <TIM_OC1_SetConfig+0x114>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d007      	beq.n	800e646 <TIM_OC1_SetConfig+0xbe>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4a19      	ldr	r2, [pc, #100]	; (800e6a0 <TIM_OC1_SetConfig+0x118>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d003      	beq.n	800e646 <TIM_OC1_SetConfig+0xbe>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a18      	ldr	r2, [pc, #96]	; (800e6a4 <TIM_OC1_SetConfig+0x11c>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d111      	bne.n	800e66a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e64c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	695b      	ldr	r3, [r3, #20]
 800e65a:	693a      	ldr	r2, [r7, #16]
 800e65c:	4313      	orrs	r3, r2
 800e65e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	693a      	ldr	r2, [r7, #16]
 800e666:	4313      	orrs	r3, r2
 800e668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	693a      	ldr	r2, [r7, #16]
 800e66e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	685a      	ldr	r2, [r3, #4]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	697a      	ldr	r2, [r7, #20]
 800e682:	621a      	str	r2, [r3, #32]
}
 800e684:	bf00      	nop
 800e686:	371c      	adds	r7, #28
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr
 800e690:	fffeff8f 	.word	0xfffeff8f
 800e694:	40010000 	.word	0x40010000
 800e698:	40010400 	.word	0x40010400
 800e69c:	40014000 	.word	0x40014000
 800e6a0:	40014400 	.word	0x40014400
 800e6a4:	40014800 	.word	0x40014800

0800e6a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6a1b      	ldr	r3, [r3, #32]
 800e6b6:	f023 0210 	bic.w	r2, r3, #16
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6a1b      	ldr	r3, [r3, #32]
 800e6c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	4b34      	ldr	r3, [pc, #208]	; (800e7a4 <TIM_OC2_SetConfig+0xfc>)
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	021b      	lsls	r3, r3, #8
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	f023 0320 	bic.w	r3, r3, #32
 800e6f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	011b      	lsls	r3, r3, #4
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4a29      	ldr	r2, [pc, #164]	; (800e7a8 <TIM_OC2_SetConfig+0x100>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d003      	beq.n	800e710 <TIM_OC2_SetConfig+0x68>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4a28      	ldr	r2, [pc, #160]	; (800e7ac <TIM_OC2_SetConfig+0x104>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d10d      	bne.n	800e72c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	011b      	lsls	r3, r3, #4
 800e71e:	697a      	ldr	r2, [r7, #20]
 800e720:	4313      	orrs	r3, r2
 800e722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e72a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	4a1e      	ldr	r2, [pc, #120]	; (800e7a8 <TIM_OC2_SetConfig+0x100>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d00f      	beq.n	800e754 <TIM_OC2_SetConfig+0xac>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4a1d      	ldr	r2, [pc, #116]	; (800e7ac <TIM_OC2_SetConfig+0x104>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d00b      	beq.n	800e754 <TIM_OC2_SetConfig+0xac>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	4a1c      	ldr	r2, [pc, #112]	; (800e7b0 <TIM_OC2_SetConfig+0x108>)
 800e740:	4293      	cmp	r3, r2
 800e742:	d007      	beq.n	800e754 <TIM_OC2_SetConfig+0xac>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	4a1b      	ldr	r2, [pc, #108]	; (800e7b4 <TIM_OC2_SetConfig+0x10c>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d003      	beq.n	800e754 <TIM_OC2_SetConfig+0xac>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	4a1a      	ldr	r2, [pc, #104]	; (800e7b8 <TIM_OC2_SetConfig+0x110>)
 800e750:	4293      	cmp	r3, r2
 800e752:	d113      	bne.n	800e77c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e75a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	695b      	ldr	r3, [r3, #20]
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	4313      	orrs	r3, r2
 800e76e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	699b      	ldr	r3, [r3, #24]
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	4313      	orrs	r3, r2
 800e77a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	693a      	ldr	r2, [r7, #16]
 800e780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	685a      	ldr	r2, [r3, #4]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	697a      	ldr	r2, [r7, #20]
 800e794:	621a      	str	r2, [r3, #32]
}
 800e796:	bf00      	nop
 800e798:	371c      	adds	r7, #28
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	feff8fff 	.word	0xfeff8fff
 800e7a8:	40010000 	.word	0x40010000
 800e7ac:	40010400 	.word	0x40010400
 800e7b0:	40014000 	.word	0x40014000
 800e7b4:	40014400 	.word	0x40014400
 800e7b8:	40014800 	.word	0x40014800

0800e7bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b087      	sub	sp, #28
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	69db      	ldr	r3, [r3, #28]
 800e7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	4b33      	ldr	r3, [pc, #204]	; (800e8b4 <TIM_OC3_SetConfig+0xf8>)
 800e7e8:	4013      	ands	r3, r2
 800e7ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f023 0303 	bic.w	r3, r3, #3
 800e7f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	021b      	lsls	r3, r3, #8
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	4313      	orrs	r3, r2
 800e810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	4a28      	ldr	r2, [pc, #160]	; (800e8b8 <TIM_OC3_SetConfig+0xfc>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d003      	beq.n	800e822 <TIM_OC3_SetConfig+0x66>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4a27      	ldr	r2, [pc, #156]	; (800e8bc <TIM_OC3_SetConfig+0x100>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d10d      	bne.n	800e83e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	021b      	lsls	r3, r3, #8
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	4313      	orrs	r3, r2
 800e834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e83c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4a1d      	ldr	r2, [pc, #116]	; (800e8b8 <TIM_OC3_SetConfig+0xfc>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d00f      	beq.n	800e866 <TIM_OC3_SetConfig+0xaa>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4a1c      	ldr	r2, [pc, #112]	; (800e8bc <TIM_OC3_SetConfig+0x100>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d00b      	beq.n	800e866 <TIM_OC3_SetConfig+0xaa>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4a1b      	ldr	r2, [pc, #108]	; (800e8c0 <TIM_OC3_SetConfig+0x104>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d007      	beq.n	800e866 <TIM_OC3_SetConfig+0xaa>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4a1a      	ldr	r2, [pc, #104]	; (800e8c4 <TIM_OC3_SetConfig+0x108>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d003      	beq.n	800e866 <TIM_OC3_SetConfig+0xaa>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4a19      	ldr	r2, [pc, #100]	; (800e8c8 <TIM_OC3_SetConfig+0x10c>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d113      	bne.n	800e88e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e86c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	695b      	ldr	r3, [r3, #20]
 800e87a:	011b      	lsls	r3, r3, #4
 800e87c:	693a      	ldr	r2, [r7, #16]
 800e87e:	4313      	orrs	r3, r2
 800e880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	699b      	ldr	r3, [r3, #24]
 800e886:	011b      	lsls	r3, r3, #4
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	4313      	orrs	r3, r2
 800e88c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	693a      	ldr	r2, [r7, #16]
 800e892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	68fa      	ldr	r2, [r7, #12]
 800e898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	685a      	ldr	r2, [r3, #4]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	697a      	ldr	r2, [r7, #20]
 800e8a6:	621a      	str	r2, [r3, #32]
}
 800e8a8:	bf00      	nop
 800e8aa:	371c      	adds	r7, #28
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr
 800e8b4:	fffeff8f 	.word	0xfffeff8f
 800e8b8:	40010000 	.word	0x40010000
 800e8bc:	40010400 	.word	0x40010400
 800e8c0:	40014000 	.word	0x40014000
 800e8c4:	40014400 	.word	0x40014400
 800e8c8:	40014800 	.word	0x40014800

0800e8cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b087      	sub	sp, #28
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6a1b      	ldr	r3, [r3, #32]
 800e8da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a1b      	ldr	r3, [r3, #32]
 800e8e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	69db      	ldr	r3, [r3, #28]
 800e8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	4b24      	ldr	r3, [pc, #144]	; (800e988 <TIM_OC4_SetConfig+0xbc>)
 800e8f8:	4013      	ands	r3, r2
 800e8fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	021b      	lsls	r3, r3, #8
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	4313      	orrs	r3, r2
 800e90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	689b      	ldr	r3, [r3, #8]
 800e91c:	031b      	lsls	r3, r3, #12
 800e91e:	693a      	ldr	r2, [r7, #16]
 800e920:	4313      	orrs	r3, r2
 800e922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a19      	ldr	r2, [pc, #100]	; (800e98c <TIM_OC4_SetConfig+0xc0>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d00f      	beq.n	800e94c <TIM_OC4_SetConfig+0x80>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4a18      	ldr	r2, [pc, #96]	; (800e990 <TIM_OC4_SetConfig+0xc4>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d00b      	beq.n	800e94c <TIM_OC4_SetConfig+0x80>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4a17      	ldr	r2, [pc, #92]	; (800e994 <TIM_OC4_SetConfig+0xc8>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d007      	beq.n	800e94c <TIM_OC4_SetConfig+0x80>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	4a16      	ldr	r2, [pc, #88]	; (800e998 <TIM_OC4_SetConfig+0xcc>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d003      	beq.n	800e94c <TIM_OC4_SetConfig+0x80>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4a15      	ldr	r2, [pc, #84]	; (800e99c <TIM_OC4_SetConfig+0xd0>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d109      	bne.n	800e960 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	695b      	ldr	r3, [r3, #20]
 800e958:	019b      	lsls	r3, r3, #6
 800e95a:	697a      	ldr	r2, [r7, #20]
 800e95c:	4313      	orrs	r3, r2
 800e95e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	697a      	ldr	r2, [r7, #20]
 800e964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	685a      	ldr	r2, [r3, #4]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	693a      	ldr	r2, [r7, #16]
 800e978:	621a      	str	r2, [r3, #32]
}
 800e97a:	bf00      	nop
 800e97c:	371c      	adds	r7, #28
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	feff8fff 	.word	0xfeff8fff
 800e98c:	40010000 	.word	0x40010000
 800e990:	40010400 	.word	0x40010400
 800e994:	40014000 	.word	0x40014000
 800e998:	40014400 	.word	0x40014400
 800e99c:	40014800 	.word	0x40014800

0800e9a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b087      	sub	sp, #28
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a1b      	ldr	r3, [r3, #32]
 800e9ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6a1b      	ldr	r3, [r3, #32]
 800e9ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	4b21      	ldr	r3, [pc, #132]	; (800ea50 <TIM_OC5_SetConfig+0xb0>)
 800e9cc:	4013      	ands	r3, r2
 800e9ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	68fa      	ldr	r2, [r7, #12]
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e9e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	041b      	lsls	r3, r3, #16
 800e9e8:	693a      	ldr	r2, [r7, #16]
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4a18      	ldr	r2, [pc, #96]	; (800ea54 <TIM_OC5_SetConfig+0xb4>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d00f      	beq.n	800ea16 <TIM_OC5_SetConfig+0x76>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4a17      	ldr	r2, [pc, #92]	; (800ea58 <TIM_OC5_SetConfig+0xb8>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d00b      	beq.n	800ea16 <TIM_OC5_SetConfig+0x76>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	4a16      	ldr	r2, [pc, #88]	; (800ea5c <TIM_OC5_SetConfig+0xbc>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d007      	beq.n	800ea16 <TIM_OC5_SetConfig+0x76>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	4a15      	ldr	r2, [pc, #84]	; (800ea60 <TIM_OC5_SetConfig+0xc0>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d003      	beq.n	800ea16 <TIM_OC5_SetConfig+0x76>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	4a14      	ldr	r2, [pc, #80]	; (800ea64 <TIM_OC5_SetConfig+0xc4>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d109      	bne.n	800ea2a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ea1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	021b      	lsls	r3, r3, #8
 800ea24:	697a      	ldr	r2, [r7, #20]
 800ea26:	4313      	orrs	r3, r2
 800ea28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	697a      	ldr	r2, [r7, #20]
 800ea2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	685a      	ldr	r2, [r3, #4]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	693a      	ldr	r2, [r7, #16]
 800ea42:	621a      	str	r2, [r3, #32]
}
 800ea44:	bf00      	nop
 800ea46:	371c      	adds	r7, #28
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr
 800ea50:	fffeff8f 	.word	0xfffeff8f
 800ea54:	40010000 	.word	0x40010000
 800ea58:	40010400 	.word	0x40010400
 800ea5c:	40014000 	.word	0x40014000
 800ea60:	40014400 	.word	0x40014400
 800ea64:	40014800 	.word	0x40014800

0800ea68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b087      	sub	sp, #28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a1b      	ldr	r3, [r3, #32]
 800ea76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a1b      	ldr	r3, [r3, #32]
 800ea82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	4b22      	ldr	r3, [pc, #136]	; (800eb1c <TIM_OC6_SetConfig+0xb4>)
 800ea94:	4013      	ands	r3, r2
 800ea96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	021b      	lsls	r3, r3, #8
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eaaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	689b      	ldr	r3, [r3, #8]
 800eab0:	051b      	lsls	r3, r3, #20
 800eab2:	693a      	ldr	r2, [r7, #16]
 800eab4:	4313      	orrs	r3, r2
 800eab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4a19      	ldr	r2, [pc, #100]	; (800eb20 <TIM_OC6_SetConfig+0xb8>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d00f      	beq.n	800eae0 <TIM_OC6_SetConfig+0x78>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	4a18      	ldr	r2, [pc, #96]	; (800eb24 <TIM_OC6_SetConfig+0xbc>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d00b      	beq.n	800eae0 <TIM_OC6_SetConfig+0x78>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	4a17      	ldr	r2, [pc, #92]	; (800eb28 <TIM_OC6_SetConfig+0xc0>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d007      	beq.n	800eae0 <TIM_OC6_SetConfig+0x78>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	4a16      	ldr	r2, [pc, #88]	; (800eb2c <TIM_OC6_SetConfig+0xc4>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d003      	beq.n	800eae0 <TIM_OC6_SetConfig+0x78>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	4a15      	ldr	r2, [pc, #84]	; (800eb30 <TIM_OC6_SetConfig+0xc8>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d109      	bne.n	800eaf4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eae6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	695b      	ldr	r3, [r3, #20]
 800eaec:	029b      	lsls	r3, r3, #10
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	697a      	ldr	r2, [r7, #20]
 800eaf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	685a      	ldr	r2, [r3, #4]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	693a      	ldr	r2, [r7, #16]
 800eb0c:	621a      	str	r2, [r3, #32]
}
 800eb0e:	bf00      	nop
 800eb10:	371c      	adds	r7, #28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr
 800eb1a:	bf00      	nop
 800eb1c:	feff8fff 	.word	0xfeff8fff
 800eb20:	40010000 	.word	0x40010000
 800eb24:	40010400 	.word	0x40010400
 800eb28:	40014000 	.word	0x40014000
 800eb2c:	40014400 	.word	0x40014400
 800eb30:	40014800 	.word	0x40014800

0800eb34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b087      	sub	sp, #28
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6a1b      	ldr	r3, [r3, #32]
 800eb44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	f023 0201 	bic.w	r2, r3, #1
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	699b      	ldr	r3, [r3, #24]
 800eb56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eb5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	011b      	lsls	r3, r3, #4
 800eb64:	693a      	ldr	r2, [r7, #16]
 800eb66:	4313      	orrs	r3, r2
 800eb68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	f023 030a 	bic.w	r3, r3, #10
 800eb70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eb72:	697a      	ldr	r2, [r7, #20]
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	693a      	ldr	r2, [r7, #16]
 800eb7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	697a      	ldr	r2, [r7, #20]
 800eb84:	621a      	str	r2, [r3, #32]
}
 800eb86:	bf00      	nop
 800eb88:	371c      	adds	r7, #28
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb92:	b480      	push	{r7}
 800eb94:	b087      	sub	sp, #28
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	60f8      	str	r0, [r7, #12]
 800eb9a:	60b9      	str	r1, [r7, #8]
 800eb9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6a1b      	ldr	r3, [r3, #32]
 800eba2:	f023 0210 	bic.w	r2, r3, #16
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	699b      	ldr	r3, [r3, #24]
 800ebae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6a1b      	ldr	r3, [r3, #32]
 800ebb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ebbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	031b      	lsls	r3, r3, #12
 800ebc2:	697a      	ldr	r2, [r7, #20]
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ebce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	011b      	lsls	r3, r3, #4
 800ebd4:	693a      	ldr	r2, [r7, #16]
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	697a      	ldr	r2, [r7, #20]
 800ebde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	693a      	ldr	r2, [r7, #16]
 800ebe4:	621a      	str	r2, [r3, #32]
}
 800ebe6:	bf00      	nop
 800ebe8:	371c      	adds	r7, #28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	4b09      	ldr	r3, [pc, #36]	; (800ec2c <TIM_ITRx_SetConfig+0x38>)
 800ec08:	4013      	ands	r3, r2
 800ec0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ec0c:	683a      	ldr	r2, [r7, #0]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	4313      	orrs	r3, r2
 800ec12:	f043 0307 	orr.w	r3, r3, #7
 800ec16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	609a      	str	r2, [r3, #8]
}
 800ec1e:	bf00      	nop
 800ec20:	3714      	adds	r7, #20
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop
 800ec2c:	ffcfff8f 	.word	0xffcfff8f

0800ec30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b087      	sub	sp, #28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
 800ec3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ec4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	021a      	lsls	r2, r3, #8
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	431a      	orrs	r2, r3
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	4313      	orrs	r3, r2
 800ec58:	697a      	ldr	r2, [r7, #20]
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	697a      	ldr	r2, [r7, #20]
 800ec62:	609a      	str	r2, [r3, #8]
}
 800ec64:	bf00      	nop
 800ec66:	371c      	adds	r7, #28
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b087      	sub	sp, #28
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	f003 031f 	and.w	r3, r3, #31
 800ec82:	2201      	movs	r2, #1
 800ec84:	fa02 f303 	lsl.w	r3, r2, r3
 800ec88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6a1a      	ldr	r2, [r3, #32]
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	43db      	mvns	r3, r3
 800ec92:	401a      	ands	r2, r3
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6a1a      	ldr	r2, [r3, #32]
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	f003 031f 	and.w	r3, r3, #31
 800eca2:	6879      	ldr	r1, [r7, #4]
 800eca4:	fa01 f303 	lsl.w	r3, r1, r3
 800eca8:	431a      	orrs	r2, r3
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	621a      	str	r2, [r3, #32]
}
 800ecae:	bf00      	nop
 800ecb0:	371c      	adds	r7, #28
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr
	...

0800ecbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d101      	bne.n	800ecd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ecd0:	2302      	movs	r3, #2
 800ecd2:	e06d      	b.n	800edb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2202      	movs	r2, #2
 800ece0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a30      	ldr	r2, [pc, #192]	; (800edbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d004      	beq.n	800ed08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4a2f      	ldr	r2, [pc, #188]	; (800edc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d108      	bne.n	800ed1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ed0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	4313      	orrs	r3, r2
 800ed18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a20      	ldr	r2, [pc, #128]	; (800edbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d022      	beq.n	800ed84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed46:	d01d      	beq.n	800ed84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a1d      	ldr	r2, [pc, #116]	; (800edc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d018      	beq.n	800ed84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4a1c      	ldr	r2, [pc, #112]	; (800edc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d013      	beq.n	800ed84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a1a      	ldr	r2, [pc, #104]	; (800edcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d00e      	beq.n	800ed84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4a15      	ldr	r2, [pc, #84]	; (800edc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d009      	beq.n	800ed84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a16      	ldr	r2, [pc, #88]	; (800edd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d004      	beq.n	800ed84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4a15      	ldr	r2, [pc, #84]	; (800edd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d10c      	bne.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	4313      	orrs	r3, r2
 800ed94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2201      	movs	r2, #1
 800eda2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800edae:	2300      	movs	r3, #0
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3714      	adds	r7, #20
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	40010000 	.word	0x40010000
 800edc0:	40010400 	.word	0x40010400
 800edc4:	40000400 	.word	0x40000400
 800edc8:	40000800 	.word	0x40000800
 800edcc:	40000c00 	.word	0x40000c00
 800edd0:	40001800 	.word	0x40001800
 800edd4:	40014000 	.word	0x40014000

0800edd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ede2:	2300      	movs	r3, #0
 800ede4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edec:	2b01      	cmp	r3, #1
 800edee:	d101      	bne.n	800edf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800edf0:	2302      	movs	r3, #2
 800edf2:	e065      	b.n	800eec0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2201      	movs	r2, #1
 800edf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	4313      	orrs	r3, r2
 800ee08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	689b      	ldr	r3, [r3, #8]
 800ee14:	4313      	orrs	r3, r2
 800ee16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	4313      	orrs	r3, r2
 800ee24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4313      	orrs	r3, r2
 800ee32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	695b      	ldr	r3, [r3, #20]
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	041b      	lsls	r3, r3, #16
 800ee6a:	4313      	orrs	r3, r2
 800ee6c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a16      	ldr	r2, [pc, #88]	; (800eecc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d004      	beq.n	800ee82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4a14      	ldr	r2, [pc, #80]	; (800eed0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d115      	bne.n	800eeae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8c:	051b      	lsls	r3, r3, #20
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	69db      	ldr	r3, [r3, #28]
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	40010000 	.word	0x40010000
 800eed0:	40010400 	.word	0x40010400

0800eed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eedc:	bf00      	nop
 800eede:	370c      	adds	r7, #12
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eef0:	bf00      	nop
 800eef2:	370c      	adds	r7, #12
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr

0800eefc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ef04:	bf00      	nop
 800ef06:	370c      	adds	r7, #12
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d101      	bne.n	800ef22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e042      	b.n	800efa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d106      	bne.n	800ef3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7f7 fd43 	bl	80069c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2224      	movs	r2, #36	; 0x24
 800ef3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f022 0201 	bic.w	r2, r2, #1
 800ef50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fdf8 	bl	800fb48 <UART_SetConfig>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d101      	bne.n	800ef62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e022      	b.n	800efa8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d002      	beq.n	800ef70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f001 fb54 	bl	8010618 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	685a      	ldr	r2, [r3, #4]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ef7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	689a      	ldr	r2, [r3, #8]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ef8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f042 0201 	orr.w	r2, r2, #1
 800ef9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f001 fbdb 	bl	801075c <UART_CheckIdleState>
 800efa6:	4603      	mov	r3, r0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b08a      	sub	sp, #40	; 0x28
 800efb4:	af02      	add	r7, sp, #8
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	603b      	str	r3, [r7, #0]
 800efbc:	4613      	mov	r3, r2
 800efbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efc6:	2b20      	cmp	r3, #32
 800efc8:	f040 8083 	bne.w	800f0d2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d002      	beq.n	800efd8 <HAL_UART_Transmit+0x28>
 800efd2:	88fb      	ldrh	r3, [r7, #6]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800efd8:	2301      	movs	r3, #1
 800efda:	e07b      	b.n	800f0d4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d101      	bne.n	800efea <HAL_UART_Transmit+0x3a>
 800efe6:	2302      	movs	r3, #2
 800efe8:	e074      	b.n	800f0d4 <HAL_UART_Transmit+0x124>
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2201      	movs	r2, #1
 800efee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2221      	movs	r2, #33	; 0x21
 800effe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f002:	f7f8 f87d 	bl	8007100 <HAL_GetTick>
 800f006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	88fa      	ldrh	r2, [r7, #6]
 800f00c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	88fa      	ldrh	r2, [r7, #6]
 800f014:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f020:	d108      	bne.n	800f034 <HAL_UART_Transmit+0x84>
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	691b      	ldr	r3, [r3, #16]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d104      	bne.n	800f034 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f02a:	2300      	movs	r3, #0
 800f02c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	61bb      	str	r3, [r7, #24]
 800f032:	e003      	b.n	800f03c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f038:	2300      	movs	r3, #0
 800f03a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f044:	e02c      	b.n	800f0a0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	2200      	movs	r2, #0
 800f04e:	2180      	movs	r1, #128	; 0x80
 800f050:	68f8      	ldr	r0, [r7, #12]
 800f052:	f001 fbce 	bl	80107f2 <UART_WaitOnFlagUntilTimeout>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f05c:	2303      	movs	r3, #3
 800f05e:	e039      	b.n	800f0d4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d10b      	bne.n	800f07e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	881b      	ldrh	r3, [r3, #0]
 800f06a:	461a      	mov	r2, r3
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	3302      	adds	r3, #2
 800f07a:	61bb      	str	r3, [r7, #24]
 800f07c:	e007      	b.n	800f08e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	781a      	ldrb	r2, [r3, #0]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	3301      	adds	r3, #1
 800f08c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f094:	b29b      	uxth	r3, r3
 800f096:	3b01      	subs	r3, #1
 800f098:	b29a      	uxth	r2, r3
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d1cc      	bne.n	800f046 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	2140      	movs	r1, #64	; 0x40
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f001 fb9b 	bl	80107f2 <UART_WaitOnFlagUntilTimeout>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d001      	beq.n	800f0c6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	e006      	b.n	800f0d4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2220      	movs	r2, #32
 800f0ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	e000      	b.n	800f0d4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f0d2:	2302      	movs	r3, #2
  }
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3720      	adds	r7, #32
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b08a      	sub	sp, #40	; 0x28
 800f0e0:	af02      	add	r7, sp, #8
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	603b      	str	r3, [r7, #0]
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0f2:	2b20      	cmp	r3, #32
 800f0f4:	f040 80c0 	bne.w	800f278 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d002      	beq.n	800f104 <HAL_UART_Receive+0x28>
 800f0fe:	88fb      	ldrh	r3, [r7, #6]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d101      	bne.n	800f108 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f104:	2301      	movs	r3, #1
 800f106:	e0b8      	b.n	800f27a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d101      	bne.n	800f116 <HAL_UART_Receive+0x3a>
 800f112:	2302      	movs	r3, #2
 800f114:	e0b1      	b.n	800f27a <HAL_UART_Receive+0x19e>
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2201      	movs	r2, #1
 800f11a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2222      	movs	r2, #34	; 0x22
 800f12a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2200      	movs	r2, #0
 800f132:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f134:	f7f7 ffe4 	bl	8007100 <HAL_GetTick>
 800f138:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	88fa      	ldrh	r2, [r7, #6]
 800f13e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	88fa      	ldrh	r2, [r7, #6]
 800f146:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	689b      	ldr	r3, [r3, #8]
 800f14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f152:	d10e      	bne.n	800f172 <HAL_UART_Receive+0x96>
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d105      	bne.n	800f168 <HAL_UART_Receive+0x8c>
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f162:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f166:	e02d      	b.n	800f1c4 <HAL_UART_Receive+0xe8>
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	22ff      	movs	r2, #255	; 0xff
 800f16c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f170:	e028      	b.n	800f1c4 <HAL_UART_Receive+0xe8>
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	689b      	ldr	r3, [r3, #8]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d10d      	bne.n	800f196 <HAL_UART_Receive+0xba>
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	691b      	ldr	r3, [r3, #16]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d104      	bne.n	800f18c <HAL_UART_Receive+0xb0>
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	22ff      	movs	r2, #255	; 0xff
 800f186:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f18a:	e01b      	b.n	800f1c4 <HAL_UART_Receive+0xe8>
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	227f      	movs	r2, #127	; 0x7f
 800f190:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f194:	e016      	b.n	800f1c4 <HAL_UART_Receive+0xe8>
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f19e:	d10d      	bne.n	800f1bc <HAL_UART_Receive+0xe0>
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	691b      	ldr	r3, [r3, #16]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d104      	bne.n	800f1b2 <HAL_UART_Receive+0xd6>
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	227f      	movs	r2, #127	; 0x7f
 800f1ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f1b0:	e008      	b.n	800f1c4 <HAL_UART_Receive+0xe8>
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	223f      	movs	r2, #63	; 0x3f
 800f1b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f1ba:	e003      	b.n	800f1c4 <HAL_UART_Receive+0xe8>
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1ca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1d4:	d108      	bne.n	800f1e8 <HAL_UART_Receive+0x10c>
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	691b      	ldr	r3, [r3, #16]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d104      	bne.n	800f1e8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	61bb      	str	r3, [r7, #24]
 800f1e6:	e003      	b.n	800f1f0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f1f8:	e032      	b.n	800f260 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	2200      	movs	r2, #0
 800f202:	2120      	movs	r1, #32
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	f001 faf4 	bl	80107f2 <UART_WaitOnFlagUntilTimeout>
 800f20a:	4603      	mov	r3, r0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d001      	beq.n	800f214 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800f210:	2303      	movs	r3, #3
 800f212:	e032      	b.n	800f27a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d10c      	bne.n	800f234 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f220:	b29a      	uxth	r2, r3
 800f222:	8a7b      	ldrh	r3, [r7, #18]
 800f224:	4013      	ands	r3, r2
 800f226:	b29a      	uxth	r2, r3
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	3302      	adds	r3, #2
 800f230:	61bb      	str	r3, [r7, #24]
 800f232:	e00c      	b.n	800f24e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f23a:	b2da      	uxtb	r2, r3
 800f23c:	8a7b      	ldrh	r3, [r7, #18]
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	4013      	ands	r3, r2
 800f242:	b2da      	uxtb	r2, r3
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	3301      	adds	r3, #1
 800f24c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f254:	b29b      	uxth	r3, r3
 800f256:	3b01      	subs	r3, #1
 800f258:	b29a      	uxth	r2, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f266:	b29b      	uxth	r3, r3
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d1c6      	bne.n	800f1fa <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2220      	movs	r2, #32
 800f270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f274:	2300      	movs	r3, #0
 800f276:	e000      	b.n	800f27a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800f278:	2302      	movs	r3, #2
  }
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3720      	adds	r7, #32
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
	...

0800f284 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b08a      	sub	sp, #40	; 0x28
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	4613      	mov	r3, r2
 800f290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f298:	2b20      	cmp	r3, #32
 800f29a:	d17a      	bne.n	800f392 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d002      	beq.n	800f2a8 <HAL_UART_Transmit_DMA+0x24>
 800f2a2:	88fb      	ldrh	r3, [r7, #6]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d101      	bne.n	800f2ac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	e073      	b.n	800f394 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d101      	bne.n	800f2ba <HAL_UART_Transmit_DMA+0x36>
 800f2b6:	2302      	movs	r3, #2
 800f2b8:	e06c      	b.n	800f394 <HAL_UART_Transmit_DMA+0x110>
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	68ba      	ldr	r2, [r7, #8]
 800f2c6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	88fa      	ldrh	r2, [r7, #6]
 800f2cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	88fa      	ldrh	r2, [r7, #6]
 800f2d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2221      	movs	r2, #33	; 0x21
 800f2e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d02c      	beq.n	800f34a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2f4:	4a29      	ldr	r2, [pc, #164]	; (800f39c <HAL_UART_Transmit_DMA+0x118>)
 800f2f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2fc:	4a28      	ldr	r2, [pc, #160]	; (800f3a0 <HAL_UART_Transmit_DMA+0x11c>)
 800f2fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f304:	4a27      	ldr	r2, [pc, #156]	; (800f3a4 <HAL_UART_Transmit_DMA+0x120>)
 800f306:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f30c:	2200      	movs	r2, #0
 800f30e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f318:	4619      	mov	r1, r3
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	3328      	adds	r3, #40	; 0x28
 800f320:	461a      	mov	r2, r3
 800f322:	88fb      	ldrh	r3, [r7, #6]
 800f324:	f7f8 fd9e 	bl	8007e64 <HAL_DMA_Start_IT>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00d      	beq.n	800f34a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2210      	movs	r2, #16
 800f332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2200      	movs	r2, #0
 800f33a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2220      	movs	r2, #32
 800f342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800f346:	2301      	movs	r3, #1
 800f348:	e024      	b.n	800f394 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2240      	movs	r2, #64	; 0x40
 800f350:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2200      	movs	r2, #0
 800f356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	3308      	adds	r3, #8
 800f360:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	e853 3f00 	ldrex	r3, [r3]
 800f368:	613b      	str	r3, [r7, #16]
   return(result);
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f370:	627b      	str	r3, [r7, #36]	; 0x24
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3308      	adds	r3, #8
 800f378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f37a:	623a      	str	r2, [r7, #32]
 800f37c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f37e:	69f9      	ldr	r1, [r7, #28]
 800f380:	6a3a      	ldr	r2, [r7, #32]
 800f382:	e841 2300 	strex	r3, r2, [r1]
 800f386:	61bb      	str	r3, [r7, #24]
   return(result);
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d1e5      	bne.n	800f35a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	e000      	b.n	800f394 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800f392:	2302      	movs	r3, #2
  }
}
 800f394:	4618      	mov	r0, r3
 800f396:	3728      	adds	r7, #40	; 0x28
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	08010c25 	.word	0x08010c25
 800f3a0:	08010cbb 	.word	0x08010cbb
 800f3a4:	08010e31 	.word	0x08010e31

0800f3a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b0ba      	sub	sp, #232	; 0xe8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	69db      	ldr	r3, [r3, #28]
 800f3b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f3ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f3d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800f3d6:	4013      	ands	r3, r2
 800f3d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f3dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d11b      	bne.n	800f41c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3e8:	f003 0320 	and.w	r3, r3, #32
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d015      	beq.n	800f41c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f3f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3f4:	f003 0320 	and.w	r3, r3, #32
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d105      	bne.n	800f408 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f3fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f404:	2b00      	cmp	r3, #0
 800f406:	d009      	beq.n	800f41c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f000 835a 	beq.w	800fac6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	4798      	blx	r3
      }
      return;
 800f41a:	e354      	b.n	800fac6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f41c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f420:	2b00      	cmp	r3, #0
 800f422:	f000 811f 	beq.w	800f664 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f426:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f42a:	4b8b      	ldr	r3, [pc, #556]	; (800f658 <HAL_UART_IRQHandler+0x2b0>)
 800f42c:	4013      	ands	r3, r2
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d106      	bne.n	800f440 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f432:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f436:	4b89      	ldr	r3, [pc, #548]	; (800f65c <HAL_UART_IRQHandler+0x2b4>)
 800f438:	4013      	ands	r3, r2
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f000 8112 	beq.w	800f664 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f444:	f003 0301 	and.w	r3, r3, #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d011      	beq.n	800f470 <HAL_UART_IRQHandler+0xc8>
 800f44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f454:	2b00      	cmp	r3, #0
 800f456:	d00b      	beq.n	800f470 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2201      	movs	r2, #1
 800f45e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f466:	f043 0201 	orr.w	r2, r3, #1
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f474:	f003 0302 	and.w	r3, r3, #2
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d011      	beq.n	800f4a0 <HAL_UART_IRQHandler+0xf8>
 800f47c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f480:	f003 0301 	and.w	r3, r3, #1
 800f484:	2b00      	cmp	r3, #0
 800f486:	d00b      	beq.n	800f4a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2202      	movs	r2, #2
 800f48e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f496:	f043 0204 	orr.w	r2, r3, #4
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4a4:	f003 0304 	and.w	r3, r3, #4
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d011      	beq.n	800f4d0 <HAL_UART_IRQHandler+0x128>
 800f4ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4b0:	f003 0301 	and.w	r3, r3, #1
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d00b      	beq.n	800f4d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2204      	movs	r2, #4
 800f4be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4c6:	f043 0202 	orr.w	r2, r3, #2
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f4d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4d4:	f003 0308 	and.w	r3, r3, #8
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d017      	beq.n	800f50c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4e0:	f003 0320 	and.w	r3, r3, #32
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d105      	bne.n	800f4f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f4e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f4ec:	4b5a      	ldr	r3, [pc, #360]	; (800f658 <HAL_UART_IRQHandler+0x2b0>)
 800f4ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d00b      	beq.n	800f50c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2208      	movs	r2, #8
 800f4fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f502:	f043 0208 	orr.w	r2, r3, #8
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f514:	2b00      	cmp	r3, #0
 800f516:	d012      	beq.n	800f53e <HAL_UART_IRQHandler+0x196>
 800f518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f51c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00c      	beq.n	800f53e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f52c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f534:	f043 0220 	orr.w	r2, r3, #32
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f544:	2b00      	cmp	r3, #0
 800f546:	f000 82c0 	beq.w	800faca <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f54a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f54e:	f003 0320 	and.w	r3, r3, #32
 800f552:	2b00      	cmp	r3, #0
 800f554:	d013      	beq.n	800f57e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f55a:	f003 0320 	and.w	r3, r3, #32
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d105      	bne.n	800f56e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d007      	beq.n	800f57e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f572:	2b00      	cmp	r3, #0
 800f574:	d003      	beq.n	800f57e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f584:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f592:	2b40      	cmp	r3, #64	; 0x40
 800f594:	d005      	beq.n	800f5a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f59a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d04f      	beq.n	800f642 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f001 fad8 	bl	8010b58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	689b      	ldr	r3, [r3, #8]
 800f5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5b2:	2b40      	cmp	r3, #64	; 0x40
 800f5b4:	d141      	bne.n	800f63a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	3308      	adds	r3, #8
 800f5bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f5c4:	e853 3f00 	ldrex	r3, [r3]
 800f5c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f5cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f5d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	3308      	adds	r3, #8
 800f5de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f5e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f5e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f5ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f5f2:	e841 2300 	strex	r3, r2, [r1]
 800f5f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f5fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d1d9      	bne.n	800f5b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f606:	2b00      	cmp	r3, #0
 800f608:	d013      	beq.n	800f632 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f60e:	4a14      	ldr	r2, [pc, #80]	; (800f660 <HAL_UART_IRQHandler+0x2b8>)
 800f610:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f616:	4618      	mov	r0, r3
 800f618:	f7f9 f9ac 	bl	8008974 <HAL_DMA_Abort_IT>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d017      	beq.n	800f652 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f62c:	4610      	mov	r0, r2
 800f62e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f630:	e00f      	b.n	800f652 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f000 fa7e 	bl	800fb34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f638:	e00b      	b.n	800f652 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 fa7a 	bl	800fb34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f640:	e007      	b.n	800f652 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 fa76 	bl	800fb34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f650:	e23b      	b.n	800faca <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f652:	bf00      	nop
    return;
 800f654:	e239      	b.n	800faca <HAL_UART_IRQHandler+0x722>
 800f656:	bf00      	nop
 800f658:	10000001 	.word	0x10000001
 800f65c:	04000120 	.word	0x04000120
 800f660:	08010eb1 	.word	0x08010eb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f668:	2b01      	cmp	r3, #1
 800f66a:	f040 81ce 	bne.w	800fa0a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f672:	f003 0310 	and.w	r3, r3, #16
 800f676:	2b00      	cmp	r3, #0
 800f678:	f000 81c7 	beq.w	800fa0a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f680:	f003 0310 	and.w	r3, r3, #16
 800f684:	2b00      	cmp	r3, #0
 800f686:	f000 81c0 	beq.w	800fa0a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2210      	movs	r2, #16
 800f690:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	689b      	ldr	r3, [r3, #8]
 800f698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f69c:	2b40      	cmp	r3, #64	; 0x40
 800f69e:	f040 813b 	bne.w	800f918 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4a8b      	ldr	r2, [pc, #556]	; (800f8d8 <HAL_UART_IRQHandler+0x530>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d059      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4a89      	ldr	r2, [pc, #548]	; (800f8dc <HAL_UART_IRQHandler+0x534>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d053      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4a87      	ldr	r2, [pc, #540]	; (800f8e0 <HAL_UART_IRQHandler+0x538>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d04d      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a85      	ldr	r2, [pc, #532]	; (800f8e4 <HAL_UART_IRQHandler+0x53c>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d047      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a83      	ldr	r2, [pc, #524]	; (800f8e8 <HAL_UART_IRQHandler+0x540>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d041      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a81      	ldr	r2, [pc, #516]	; (800f8ec <HAL_UART_IRQHandler+0x544>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d03b      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a7f      	ldr	r2, [pc, #508]	; (800f8f0 <HAL_UART_IRQHandler+0x548>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d035      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4a7d      	ldr	r2, [pc, #500]	; (800f8f4 <HAL_UART_IRQHandler+0x54c>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d02f      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a7b      	ldr	r2, [pc, #492]	; (800f8f8 <HAL_UART_IRQHandler+0x550>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d029      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4a79      	ldr	r2, [pc, #484]	; (800f8fc <HAL_UART_IRQHandler+0x554>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d023      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a77      	ldr	r2, [pc, #476]	; (800f900 <HAL_UART_IRQHandler+0x558>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d01d      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a75      	ldr	r2, [pc, #468]	; (800f904 <HAL_UART_IRQHandler+0x55c>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d017      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a73      	ldr	r2, [pc, #460]	; (800f908 <HAL_UART_IRQHandler+0x560>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d011      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4a71      	ldr	r2, [pc, #452]	; (800f90c <HAL_UART_IRQHandler+0x564>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d00b      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a6f      	ldr	r2, [pc, #444]	; (800f910 <HAL_UART_IRQHandler+0x568>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d005      	beq.n	800f762 <HAL_UART_IRQHandler+0x3ba>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4a6d      	ldr	r2, [pc, #436]	; (800f914 <HAL_UART_IRQHandler+0x56c>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d105      	bne.n	800f76e <HAL_UART_IRQHandler+0x3c6>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	e004      	b.n	800f778 <HAL_UART_IRQHandler+0x3d0>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	b29b      	uxth	r3, r3
 800f778:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f77c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f780:	2b00      	cmp	r3, #0
 800f782:	f000 81a4 	beq.w	800face <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f78c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f790:	429a      	cmp	r2, r3
 800f792:	f080 819c 	bcs.w	800face <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f79c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7a4:	69db      	ldr	r3, [r3, #28]
 800f7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7aa:	f000 8086 	beq.w	800f8ba <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7ba:	e853 3f00 	ldrex	r3, [r3]
 800f7be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f7c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f7c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f7dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f7e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f7e8:	e841 2300 	strex	r3, r2, [r1]
 800f7ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f7f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d1da      	bne.n	800f7ae <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	3308      	adds	r3, #8
 800f7fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f802:	e853 3f00 	ldrex	r3, [r3]
 800f806:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f80a:	f023 0301 	bic.w	r3, r3, #1
 800f80e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	3308      	adds	r3, #8
 800f818:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f81c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f820:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f822:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f824:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f828:	e841 2300 	strex	r3, r2, [r1]
 800f82c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f82e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1e1      	bne.n	800f7f8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	3308      	adds	r3, #8
 800f83a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f83c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f83e:	e853 3f00 	ldrex	r3, [r3]
 800f842:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f84a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3308      	adds	r3, #8
 800f854:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f858:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f85a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f85e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f860:	e841 2300 	strex	r3, r2, [r1]
 800f864:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1e3      	bne.n	800f834 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2220      	movs	r2, #32
 800f870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2200      	movs	r2, #0
 800f878:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f882:	e853 3f00 	ldrex	r3, [r3]
 800f886:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f88a:	f023 0310 	bic.w	r3, r3, #16
 800f88e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	461a      	mov	r2, r3
 800f898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f89c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f89e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8a4:	e841 2300 	strex	r3, r2, [r1]
 800f8a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f8aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d1e4      	bne.n	800f87a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7f8 fd3f 	bl	8008338 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f7f3 fd98 	bl	8003404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f8d4:	e0fb      	b.n	800face <HAL_UART_IRQHandler+0x726>
 800f8d6:	bf00      	nop
 800f8d8:	40020010 	.word	0x40020010
 800f8dc:	40020028 	.word	0x40020028
 800f8e0:	40020040 	.word	0x40020040
 800f8e4:	40020058 	.word	0x40020058
 800f8e8:	40020070 	.word	0x40020070
 800f8ec:	40020088 	.word	0x40020088
 800f8f0:	400200a0 	.word	0x400200a0
 800f8f4:	400200b8 	.word	0x400200b8
 800f8f8:	40020410 	.word	0x40020410
 800f8fc:	40020428 	.word	0x40020428
 800f900:	40020440 	.word	0x40020440
 800f904:	40020458 	.word	0x40020458
 800f908:	40020470 	.word	0x40020470
 800f90c:	40020488 	.word	0x40020488
 800f910:	400204a0 	.word	0x400204a0
 800f914:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f924:	b29b      	uxth	r3, r3
 800f926:	1ad3      	subs	r3, r2, r3
 800f928:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f932:	b29b      	uxth	r3, r3
 800f934:	2b00      	cmp	r3, #0
 800f936:	f000 80cc 	beq.w	800fad2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f93a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f93e:	2b00      	cmp	r3, #0
 800f940:	f000 80c7 	beq.w	800fad2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94c:	e853 3f00 	ldrex	r3, [r3]
 800f950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	461a      	mov	r2, r3
 800f962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f966:	647b      	str	r3, [r7, #68]	; 0x44
 800f968:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f96c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f96e:	e841 2300 	strex	r3, r2, [r1]
 800f972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1e4      	bne.n	800f944 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3308      	adds	r3, #8
 800f980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f984:	e853 3f00 	ldrex	r3, [r3]
 800f988:	623b      	str	r3, [r7, #32]
   return(result);
 800f98a:	6a3a      	ldr	r2, [r7, #32]
 800f98c:	4b54      	ldr	r3, [pc, #336]	; (800fae0 <HAL_UART_IRQHandler+0x738>)
 800f98e:	4013      	ands	r3, r2
 800f990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	3308      	adds	r3, #8
 800f99a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f99e:	633a      	str	r2, [r7, #48]	; 0x30
 800f9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9a6:	e841 2300 	strex	r3, r2, [r1]
 800f9aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d1e3      	bne.n	800f97a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2220      	movs	r2, #32
 800f9b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	e853 3f00 	ldrex	r3, [r3]
 800f9d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f023 0310 	bic.w	r3, r3, #16
 800f9da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f9e8:	61fb      	str	r3, [r7, #28]
 800f9ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ec:	69b9      	ldr	r1, [r7, #24]
 800f9ee:	69fa      	ldr	r2, [r7, #28]
 800f9f0:	e841 2300 	strex	r3, r2, [r1]
 800f9f4:	617b      	str	r3, [r7, #20]
   return(result);
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d1e4      	bne.n	800f9c6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f9fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fa00:	4619      	mov	r1, r3
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7f3 fcfe 	bl	8003404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fa08:	e063      	b.n	800fad2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fa0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00e      	beq.n	800fa34 <HAL_UART_IRQHandler+0x68c>
 800fa16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d008      	beq.n	800fa34 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fa2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f001 fa80 	bl	8010f32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa32:	e051      	b.n	800fad8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fa34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d014      	beq.n	800fa6a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fa40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d105      	bne.n	800fa58 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fa4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d008      	beq.n	800fa6a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d03a      	beq.n	800fad6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	4798      	blx	r3
    }
    return;
 800fa68:	e035      	b.n	800fad6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fa6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d009      	beq.n	800fa8a <HAL_UART_IRQHandler+0x6e2>
 800fa76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d003      	beq.n	800fa8a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f001 fa2a 	bl	8010edc <UART_EndTransmit_IT>
    return;
 800fa88:	e026      	b.n	800fad8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fa8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d009      	beq.n	800faaa <HAL_UART_IRQHandler+0x702>
 800fa96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d003      	beq.n	800faaa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f001 fa59 	bl	8010f5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800faa8:	e016      	b.n	800fad8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800faaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d010      	beq.n	800fad8 <HAL_UART_IRQHandler+0x730>
 800fab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	da0c      	bge.n	800fad8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f001 fa41 	bl	8010f46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fac4:	e008      	b.n	800fad8 <HAL_UART_IRQHandler+0x730>
      return;
 800fac6:	bf00      	nop
 800fac8:	e006      	b.n	800fad8 <HAL_UART_IRQHandler+0x730>
    return;
 800faca:	bf00      	nop
 800facc:	e004      	b.n	800fad8 <HAL_UART_IRQHandler+0x730>
      return;
 800face:	bf00      	nop
 800fad0:	e002      	b.n	800fad8 <HAL_UART_IRQHandler+0x730>
      return;
 800fad2:	bf00      	nop
 800fad4:	e000      	b.n	800fad8 <HAL_UART_IRQHandler+0x730>
    return;
 800fad6:	bf00      	nop
  }
}
 800fad8:	37e8      	adds	r7, #232	; 0xe8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	effffffe 	.word	0xeffffffe

0800fae4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800faec:	bf00      	nop
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fb00:	bf00      	nop
 800fb02:	370c      	adds	r7, #12
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fb14:	bf00      	nop
 800fb16:	370c      	adds	r7, #12
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr

0800fb20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b083      	sub	sp, #12
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fb28:	bf00      	nop
 800fb2a:	370c      	adds	r7, #12
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fb3c:	bf00      	nop
 800fb3e:	370c      	adds	r7, #12
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fb48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fb4c:	b092      	sub	sp, #72	; 0x48
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fb52:	2300      	movs	r3, #0
 800fb54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	689a      	ldr	r2, [r3, #8]
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	691b      	ldr	r3, [r3, #16]
 800fb60:	431a      	orrs	r2, r3
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	695b      	ldr	r3, [r3, #20]
 800fb66:	431a      	orrs	r2, r3
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	69db      	ldr	r3, [r3, #28]
 800fb6c:	4313      	orrs	r3, r2
 800fb6e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	4bbe      	ldr	r3, [pc, #760]	; (800fe70 <UART_SetConfig+0x328>)
 800fb78:	4013      	ands	r3, r2
 800fb7a:	697a      	ldr	r2, [r7, #20]
 800fb7c:	6812      	ldr	r2, [r2, #0]
 800fb7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb80:	430b      	orrs	r3, r1
 800fb82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	68da      	ldr	r2, [r3, #12]
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	430a      	orrs	r2, r1
 800fb98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	699b      	ldr	r3, [r3, #24]
 800fb9e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4ab3      	ldr	r2, [pc, #716]	; (800fe74 <UART_SetConfig+0x32c>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d004      	beq.n	800fbb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	6a1b      	ldr	r3, [r3, #32]
 800fbae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	689a      	ldr	r2, [r3, #8]
 800fbba:	4baf      	ldr	r3, [pc, #700]	; (800fe78 <UART_SetConfig+0x330>)
 800fbbc:	4013      	ands	r3, r2
 800fbbe:	697a      	ldr	r2, [r7, #20]
 800fbc0:	6812      	ldr	r2, [r2, #0]
 800fbc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbc4:	430b      	orrs	r3, r1
 800fbc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbce:	f023 010f 	bic.w	r1, r3, #15
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	430a      	orrs	r2, r1
 800fbdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4aa6      	ldr	r2, [pc, #664]	; (800fe7c <UART_SetConfig+0x334>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d177      	bne.n	800fcd8 <UART_SetConfig+0x190>
 800fbe8:	4ba5      	ldr	r3, [pc, #660]	; (800fe80 <UART_SetConfig+0x338>)
 800fbea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fbf0:	2b28      	cmp	r3, #40	; 0x28
 800fbf2:	d86d      	bhi.n	800fcd0 <UART_SetConfig+0x188>
 800fbf4:	a201      	add	r2, pc, #4	; (adr r2, 800fbfc <UART_SetConfig+0xb4>)
 800fbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbfa:	bf00      	nop
 800fbfc:	0800fca1 	.word	0x0800fca1
 800fc00:	0800fcd1 	.word	0x0800fcd1
 800fc04:	0800fcd1 	.word	0x0800fcd1
 800fc08:	0800fcd1 	.word	0x0800fcd1
 800fc0c:	0800fcd1 	.word	0x0800fcd1
 800fc10:	0800fcd1 	.word	0x0800fcd1
 800fc14:	0800fcd1 	.word	0x0800fcd1
 800fc18:	0800fcd1 	.word	0x0800fcd1
 800fc1c:	0800fca9 	.word	0x0800fca9
 800fc20:	0800fcd1 	.word	0x0800fcd1
 800fc24:	0800fcd1 	.word	0x0800fcd1
 800fc28:	0800fcd1 	.word	0x0800fcd1
 800fc2c:	0800fcd1 	.word	0x0800fcd1
 800fc30:	0800fcd1 	.word	0x0800fcd1
 800fc34:	0800fcd1 	.word	0x0800fcd1
 800fc38:	0800fcd1 	.word	0x0800fcd1
 800fc3c:	0800fcb1 	.word	0x0800fcb1
 800fc40:	0800fcd1 	.word	0x0800fcd1
 800fc44:	0800fcd1 	.word	0x0800fcd1
 800fc48:	0800fcd1 	.word	0x0800fcd1
 800fc4c:	0800fcd1 	.word	0x0800fcd1
 800fc50:	0800fcd1 	.word	0x0800fcd1
 800fc54:	0800fcd1 	.word	0x0800fcd1
 800fc58:	0800fcd1 	.word	0x0800fcd1
 800fc5c:	0800fcb9 	.word	0x0800fcb9
 800fc60:	0800fcd1 	.word	0x0800fcd1
 800fc64:	0800fcd1 	.word	0x0800fcd1
 800fc68:	0800fcd1 	.word	0x0800fcd1
 800fc6c:	0800fcd1 	.word	0x0800fcd1
 800fc70:	0800fcd1 	.word	0x0800fcd1
 800fc74:	0800fcd1 	.word	0x0800fcd1
 800fc78:	0800fcd1 	.word	0x0800fcd1
 800fc7c:	0800fcc1 	.word	0x0800fcc1
 800fc80:	0800fcd1 	.word	0x0800fcd1
 800fc84:	0800fcd1 	.word	0x0800fcd1
 800fc88:	0800fcd1 	.word	0x0800fcd1
 800fc8c:	0800fcd1 	.word	0x0800fcd1
 800fc90:	0800fcd1 	.word	0x0800fcd1
 800fc94:	0800fcd1 	.word	0x0800fcd1
 800fc98:	0800fcd1 	.word	0x0800fcd1
 800fc9c:	0800fcc9 	.word	0x0800fcc9
 800fca0:	2301      	movs	r3, #1
 800fca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fca6:	e222      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fca8:	2304      	movs	r3, #4
 800fcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcae:	e21e      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fcb0:	2308      	movs	r3, #8
 800fcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcb6:	e21a      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fcb8:	2310      	movs	r3, #16
 800fcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcbe:	e216      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fcc0:	2320      	movs	r3, #32
 800fcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcc6:	e212      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fcc8:	2340      	movs	r3, #64	; 0x40
 800fcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcce:	e20e      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fcd0:	2380      	movs	r3, #128	; 0x80
 800fcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcd6:	e20a      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4a69      	ldr	r2, [pc, #420]	; (800fe84 <UART_SetConfig+0x33c>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d130      	bne.n	800fd44 <UART_SetConfig+0x1fc>
 800fce2:	4b67      	ldr	r3, [pc, #412]	; (800fe80 <UART_SetConfig+0x338>)
 800fce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fce6:	f003 0307 	and.w	r3, r3, #7
 800fcea:	2b05      	cmp	r3, #5
 800fcec:	d826      	bhi.n	800fd3c <UART_SetConfig+0x1f4>
 800fcee:	a201      	add	r2, pc, #4	; (adr r2, 800fcf4 <UART_SetConfig+0x1ac>)
 800fcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf4:	0800fd0d 	.word	0x0800fd0d
 800fcf8:	0800fd15 	.word	0x0800fd15
 800fcfc:	0800fd1d 	.word	0x0800fd1d
 800fd00:	0800fd25 	.word	0x0800fd25
 800fd04:	0800fd2d 	.word	0x0800fd2d
 800fd08:	0800fd35 	.word	0x0800fd35
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd12:	e1ec      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd14:	2304      	movs	r3, #4
 800fd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd1a:	e1e8      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd1c:	2308      	movs	r3, #8
 800fd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd22:	e1e4      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd24:	2310      	movs	r3, #16
 800fd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd2a:	e1e0      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd2c:	2320      	movs	r3, #32
 800fd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd32:	e1dc      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd34:	2340      	movs	r3, #64	; 0x40
 800fd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd3a:	e1d8      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd3c:	2380      	movs	r3, #128	; 0x80
 800fd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd42:	e1d4      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4a4f      	ldr	r2, [pc, #316]	; (800fe88 <UART_SetConfig+0x340>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d130      	bne.n	800fdb0 <UART_SetConfig+0x268>
 800fd4e:	4b4c      	ldr	r3, [pc, #304]	; (800fe80 <UART_SetConfig+0x338>)
 800fd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd52:	f003 0307 	and.w	r3, r3, #7
 800fd56:	2b05      	cmp	r3, #5
 800fd58:	d826      	bhi.n	800fda8 <UART_SetConfig+0x260>
 800fd5a:	a201      	add	r2, pc, #4	; (adr r2, 800fd60 <UART_SetConfig+0x218>)
 800fd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd60:	0800fd79 	.word	0x0800fd79
 800fd64:	0800fd81 	.word	0x0800fd81
 800fd68:	0800fd89 	.word	0x0800fd89
 800fd6c:	0800fd91 	.word	0x0800fd91
 800fd70:	0800fd99 	.word	0x0800fd99
 800fd74:	0800fda1 	.word	0x0800fda1
 800fd78:	2300      	movs	r3, #0
 800fd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd7e:	e1b6      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd80:	2304      	movs	r3, #4
 800fd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd86:	e1b2      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd88:	2308      	movs	r3, #8
 800fd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd8e:	e1ae      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd90:	2310      	movs	r3, #16
 800fd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd96:	e1aa      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fd98:	2320      	movs	r3, #32
 800fd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd9e:	e1a6      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fda0:	2340      	movs	r3, #64	; 0x40
 800fda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fda6:	e1a2      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fda8:	2380      	movs	r3, #128	; 0x80
 800fdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdae:	e19e      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4a35      	ldr	r2, [pc, #212]	; (800fe8c <UART_SetConfig+0x344>)
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d130      	bne.n	800fe1c <UART_SetConfig+0x2d4>
 800fdba:	4b31      	ldr	r3, [pc, #196]	; (800fe80 <UART_SetConfig+0x338>)
 800fdbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdbe:	f003 0307 	and.w	r3, r3, #7
 800fdc2:	2b05      	cmp	r3, #5
 800fdc4:	d826      	bhi.n	800fe14 <UART_SetConfig+0x2cc>
 800fdc6:	a201      	add	r2, pc, #4	; (adr r2, 800fdcc <UART_SetConfig+0x284>)
 800fdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdcc:	0800fde5 	.word	0x0800fde5
 800fdd0:	0800fded 	.word	0x0800fded
 800fdd4:	0800fdf5 	.word	0x0800fdf5
 800fdd8:	0800fdfd 	.word	0x0800fdfd
 800fddc:	0800fe05 	.word	0x0800fe05
 800fde0:	0800fe0d 	.word	0x0800fe0d
 800fde4:	2300      	movs	r3, #0
 800fde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdea:	e180      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fdec:	2304      	movs	r3, #4
 800fdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdf2:	e17c      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fdf4:	2308      	movs	r3, #8
 800fdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdfa:	e178      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fdfc:	2310      	movs	r3, #16
 800fdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe02:	e174      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fe04:	2320      	movs	r3, #32
 800fe06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe0a:	e170      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fe0c:	2340      	movs	r3, #64	; 0x40
 800fe0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe12:	e16c      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fe14:	2380      	movs	r3, #128	; 0x80
 800fe16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe1a:	e168      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4a1b      	ldr	r2, [pc, #108]	; (800fe90 <UART_SetConfig+0x348>)
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d142      	bne.n	800feac <UART_SetConfig+0x364>
 800fe26:	4b16      	ldr	r3, [pc, #88]	; (800fe80 <UART_SetConfig+0x338>)
 800fe28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe2a:	f003 0307 	and.w	r3, r3, #7
 800fe2e:	2b05      	cmp	r3, #5
 800fe30:	d838      	bhi.n	800fea4 <UART_SetConfig+0x35c>
 800fe32:	a201      	add	r2, pc, #4	; (adr r2, 800fe38 <UART_SetConfig+0x2f0>)
 800fe34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe38:	0800fe51 	.word	0x0800fe51
 800fe3c:	0800fe59 	.word	0x0800fe59
 800fe40:	0800fe61 	.word	0x0800fe61
 800fe44:	0800fe69 	.word	0x0800fe69
 800fe48:	0800fe95 	.word	0x0800fe95
 800fe4c:	0800fe9d 	.word	0x0800fe9d
 800fe50:	2300      	movs	r3, #0
 800fe52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe56:	e14a      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fe58:	2304      	movs	r3, #4
 800fe5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe5e:	e146      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fe60:	2308      	movs	r3, #8
 800fe62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe66:	e142      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fe68:	2310      	movs	r3, #16
 800fe6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe6e:	e13e      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fe70:	cfff69f3 	.word	0xcfff69f3
 800fe74:	58000c00 	.word	0x58000c00
 800fe78:	11fff4ff 	.word	0x11fff4ff
 800fe7c:	40011000 	.word	0x40011000
 800fe80:	58024400 	.word	0x58024400
 800fe84:	40004400 	.word	0x40004400
 800fe88:	40004800 	.word	0x40004800
 800fe8c:	40004c00 	.word	0x40004c00
 800fe90:	40005000 	.word	0x40005000
 800fe94:	2320      	movs	r3, #32
 800fe96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe9a:	e128      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fe9c:	2340      	movs	r3, #64	; 0x40
 800fe9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fea2:	e124      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fea4:	2380      	movs	r3, #128	; 0x80
 800fea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feaa:	e120      	b.n	80100ee <UART_SetConfig+0x5a6>
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4acb      	ldr	r2, [pc, #812]	; (80101e0 <UART_SetConfig+0x698>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d176      	bne.n	800ffa4 <UART_SetConfig+0x45c>
 800feb6:	4bcb      	ldr	r3, [pc, #812]	; (80101e4 <UART_SetConfig+0x69c>)
 800feb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800febe:	2b28      	cmp	r3, #40	; 0x28
 800fec0:	d86c      	bhi.n	800ff9c <UART_SetConfig+0x454>
 800fec2:	a201      	add	r2, pc, #4	; (adr r2, 800fec8 <UART_SetConfig+0x380>)
 800fec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec8:	0800ff6d 	.word	0x0800ff6d
 800fecc:	0800ff9d 	.word	0x0800ff9d
 800fed0:	0800ff9d 	.word	0x0800ff9d
 800fed4:	0800ff9d 	.word	0x0800ff9d
 800fed8:	0800ff9d 	.word	0x0800ff9d
 800fedc:	0800ff9d 	.word	0x0800ff9d
 800fee0:	0800ff9d 	.word	0x0800ff9d
 800fee4:	0800ff9d 	.word	0x0800ff9d
 800fee8:	0800ff75 	.word	0x0800ff75
 800feec:	0800ff9d 	.word	0x0800ff9d
 800fef0:	0800ff9d 	.word	0x0800ff9d
 800fef4:	0800ff9d 	.word	0x0800ff9d
 800fef8:	0800ff9d 	.word	0x0800ff9d
 800fefc:	0800ff9d 	.word	0x0800ff9d
 800ff00:	0800ff9d 	.word	0x0800ff9d
 800ff04:	0800ff9d 	.word	0x0800ff9d
 800ff08:	0800ff7d 	.word	0x0800ff7d
 800ff0c:	0800ff9d 	.word	0x0800ff9d
 800ff10:	0800ff9d 	.word	0x0800ff9d
 800ff14:	0800ff9d 	.word	0x0800ff9d
 800ff18:	0800ff9d 	.word	0x0800ff9d
 800ff1c:	0800ff9d 	.word	0x0800ff9d
 800ff20:	0800ff9d 	.word	0x0800ff9d
 800ff24:	0800ff9d 	.word	0x0800ff9d
 800ff28:	0800ff85 	.word	0x0800ff85
 800ff2c:	0800ff9d 	.word	0x0800ff9d
 800ff30:	0800ff9d 	.word	0x0800ff9d
 800ff34:	0800ff9d 	.word	0x0800ff9d
 800ff38:	0800ff9d 	.word	0x0800ff9d
 800ff3c:	0800ff9d 	.word	0x0800ff9d
 800ff40:	0800ff9d 	.word	0x0800ff9d
 800ff44:	0800ff9d 	.word	0x0800ff9d
 800ff48:	0800ff8d 	.word	0x0800ff8d
 800ff4c:	0800ff9d 	.word	0x0800ff9d
 800ff50:	0800ff9d 	.word	0x0800ff9d
 800ff54:	0800ff9d 	.word	0x0800ff9d
 800ff58:	0800ff9d 	.word	0x0800ff9d
 800ff5c:	0800ff9d 	.word	0x0800ff9d
 800ff60:	0800ff9d 	.word	0x0800ff9d
 800ff64:	0800ff9d 	.word	0x0800ff9d
 800ff68:	0800ff95 	.word	0x0800ff95
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff72:	e0bc      	b.n	80100ee <UART_SetConfig+0x5a6>
 800ff74:	2304      	movs	r3, #4
 800ff76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff7a:	e0b8      	b.n	80100ee <UART_SetConfig+0x5a6>
 800ff7c:	2308      	movs	r3, #8
 800ff7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff82:	e0b4      	b.n	80100ee <UART_SetConfig+0x5a6>
 800ff84:	2310      	movs	r3, #16
 800ff86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff8a:	e0b0      	b.n	80100ee <UART_SetConfig+0x5a6>
 800ff8c:	2320      	movs	r3, #32
 800ff8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff92:	e0ac      	b.n	80100ee <UART_SetConfig+0x5a6>
 800ff94:	2340      	movs	r3, #64	; 0x40
 800ff96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff9a:	e0a8      	b.n	80100ee <UART_SetConfig+0x5a6>
 800ff9c:	2380      	movs	r3, #128	; 0x80
 800ff9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffa2:	e0a4      	b.n	80100ee <UART_SetConfig+0x5a6>
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4a8f      	ldr	r2, [pc, #572]	; (80101e8 <UART_SetConfig+0x6a0>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d130      	bne.n	8010010 <UART_SetConfig+0x4c8>
 800ffae:	4b8d      	ldr	r3, [pc, #564]	; (80101e4 <UART_SetConfig+0x69c>)
 800ffb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffb2:	f003 0307 	and.w	r3, r3, #7
 800ffb6:	2b05      	cmp	r3, #5
 800ffb8:	d826      	bhi.n	8010008 <UART_SetConfig+0x4c0>
 800ffba:	a201      	add	r2, pc, #4	; (adr r2, 800ffc0 <UART_SetConfig+0x478>)
 800ffbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc0:	0800ffd9 	.word	0x0800ffd9
 800ffc4:	0800ffe1 	.word	0x0800ffe1
 800ffc8:	0800ffe9 	.word	0x0800ffe9
 800ffcc:	0800fff1 	.word	0x0800fff1
 800ffd0:	0800fff9 	.word	0x0800fff9
 800ffd4:	08010001 	.word	0x08010001
 800ffd8:	2300      	movs	r3, #0
 800ffda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffde:	e086      	b.n	80100ee <UART_SetConfig+0x5a6>
 800ffe0:	2304      	movs	r3, #4
 800ffe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffe6:	e082      	b.n	80100ee <UART_SetConfig+0x5a6>
 800ffe8:	2308      	movs	r3, #8
 800ffea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffee:	e07e      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fff0:	2310      	movs	r3, #16
 800fff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fff6:	e07a      	b.n	80100ee <UART_SetConfig+0x5a6>
 800fff8:	2320      	movs	r3, #32
 800fffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fffe:	e076      	b.n	80100ee <UART_SetConfig+0x5a6>
 8010000:	2340      	movs	r3, #64	; 0x40
 8010002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010006:	e072      	b.n	80100ee <UART_SetConfig+0x5a6>
 8010008:	2380      	movs	r3, #128	; 0x80
 801000a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801000e:	e06e      	b.n	80100ee <UART_SetConfig+0x5a6>
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	4a75      	ldr	r2, [pc, #468]	; (80101ec <UART_SetConfig+0x6a4>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d130      	bne.n	801007c <UART_SetConfig+0x534>
 801001a:	4b72      	ldr	r3, [pc, #456]	; (80101e4 <UART_SetConfig+0x69c>)
 801001c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801001e:	f003 0307 	and.w	r3, r3, #7
 8010022:	2b05      	cmp	r3, #5
 8010024:	d826      	bhi.n	8010074 <UART_SetConfig+0x52c>
 8010026:	a201      	add	r2, pc, #4	; (adr r2, 801002c <UART_SetConfig+0x4e4>)
 8010028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801002c:	08010045 	.word	0x08010045
 8010030:	0801004d 	.word	0x0801004d
 8010034:	08010055 	.word	0x08010055
 8010038:	0801005d 	.word	0x0801005d
 801003c:	08010065 	.word	0x08010065
 8010040:	0801006d 	.word	0x0801006d
 8010044:	2300      	movs	r3, #0
 8010046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801004a:	e050      	b.n	80100ee <UART_SetConfig+0x5a6>
 801004c:	2304      	movs	r3, #4
 801004e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010052:	e04c      	b.n	80100ee <UART_SetConfig+0x5a6>
 8010054:	2308      	movs	r3, #8
 8010056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801005a:	e048      	b.n	80100ee <UART_SetConfig+0x5a6>
 801005c:	2310      	movs	r3, #16
 801005e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010062:	e044      	b.n	80100ee <UART_SetConfig+0x5a6>
 8010064:	2320      	movs	r3, #32
 8010066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801006a:	e040      	b.n	80100ee <UART_SetConfig+0x5a6>
 801006c:	2340      	movs	r3, #64	; 0x40
 801006e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010072:	e03c      	b.n	80100ee <UART_SetConfig+0x5a6>
 8010074:	2380      	movs	r3, #128	; 0x80
 8010076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801007a:	e038      	b.n	80100ee <UART_SetConfig+0x5a6>
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4a5b      	ldr	r2, [pc, #364]	; (80101f0 <UART_SetConfig+0x6a8>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d130      	bne.n	80100e8 <UART_SetConfig+0x5a0>
 8010086:	4b57      	ldr	r3, [pc, #348]	; (80101e4 <UART_SetConfig+0x69c>)
 8010088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801008a:	f003 0307 	and.w	r3, r3, #7
 801008e:	2b05      	cmp	r3, #5
 8010090:	d826      	bhi.n	80100e0 <UART_SetConfig+0x598>
 8010092:	a201      	add	r2, pc, #4	; (adr r2, 8010098 <UART_SetConfig+0x550>)
 8010094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010098:	080100b1 	.word	0x080100b1
 801009c:	080100b9 	.word	0x080100b9
 80100a0:	080100c1 	.word	0x080100c1
 80100a4:	080100c9 	.word	0x080100c9
 80100a8:	080100d1 	.word	0x080100d1
 80100ac:	080100d9 	.word	0x080100d9
 80100b0:	2302      	movs	r3, #2
 80100b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100b6:	e01a      	b.n	80100ee <UART_SetConfig+0x5a6>
 80100b8:	2304      	movs	r3, #4
 80100ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100be:	e016      	b.n	80100ee <UART_SetConfig+0x5a6>
 80100c0:	2308      	movs	r3, #8
 80100c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100c6:	e012      	b.n	80100ee <UART_SetConfig+0x5a6>
 80100c8:	2310      	movs	r3, #16
 80100ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100ce:	e00e      	b.n	80100ee <UART_SetConfig+0x5a6>
 80100d0:	2320      	movs	r3, #32
 80100d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100d6:	e00a      	b.n	80100ee <UART_SetConfig+0x5a6>
 80100d8:	2340      	movs	r3, #64	; 0x40
 80100da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100de:	e006      	b.n	80100ee <UART_SetConfig+0x5a6>
 80100e0:	2380      	movs	r3, #128	; 0x80
 80100e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100e6:	e002      	b.n	80100ee <UART_SetConfig+0x5a6>
 80100e8:	2380      	movs	r3, #128	; 0x80
 80100ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	4a3f      	ldr	r2, [pc, #252]	; (80101f0 <UART_SetConfig+0x6a8>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	f040 80f8 	bne.w	80102ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80100fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80100fe:	2b20      	cmp	r3, #32
 8010100:	dc46      	bgt.n	8010190 <UART_SetConfig+0x648>
 8010102:	2b02      	cmp	r3, #2
 8010104:	f2c0 8082 	blt.w	801020c <UART_SetConfig+0x6c4>
 8010108:	3b02      	subs	r3, #2
 801010a:	2b1e      	cmp	r3, #30
 801010c:	d87e      	bhi.n	801020c <UART_SetConfig+0x6c4>
 801010e:	a201      	add	r2, pc, #4	; (adr r2, 8010114 <UART_SetConfig+0x5cc>)
 8010110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010114:	08010197 	.word	0x08010197
 8010118:	0801020d 	.word	0x0801020d
 801011c:	0801019f 	.word	0x0801019f
 8010120:	0801020d 	.word	0x0801020d
 8010124:	0801020d 	.word	0x0801020d
 8010128:	0801020d 	.word	0x0801020d
 801012c:	080101af 	.word	0x080101af
 8010130:	0801020d 	.word	0x0801020d
 8010134:	0801020d 	.word	0x0801020d
 8010138:	0801020d 	.word	0x0801020d
 801013c:	0801020d 	.word	0x0801020d
 8010140:	0801020d 	.word	0x0801020d
 8010144:	0801020d 	.word	0x0801020d
 8010148:	0801020d 	.word	0x0801020d
 801014c:	080101bf 	.word	0x080101bf
 8010150:	0801020d 	.word	0x0801020d
 8010154:	0801020d 	.word	0x0801020d
 8010158:	0801020d 	.word	0x0801020d
 801015c:	0801020d 	.word	0x0801020d
 8010160:	0801020d 	.word	0x0801020d
 8010164:	0801020d 	.word	0x0801020d
 8010168:	0801020d 	.word	0x0801020d
 801016c:	0801020d 	.word	0x0801020d
 8010170:	0801020d 	.word	0x0801020d
 8010174:	0801020d 	.word	0x0801020d
 8010178:	0801020d 	.word	0x0801020d
 801017c:	0801020d 	.word	0x0801020d
 8010180:	0801020d 	.word	0x0801020d
 8010184:	0801020d 	.word	0x0801020d
 8010188:	0801020d 	.word	0x0801020d
 801018c:	080101ff 	.word	0x080101ff
 8010190:	2b40      	cmp	r3, #64	; 0x40
 8010192:	d037      	beq.n	8010204 <UART_SetConfig+0x6bc>
 8010194:	e03a      	b.n	801020c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010196:	f7fc fa63 	bl	800c660 <HAL_RCCEx_GetD3PCLK1Freq>
 801019a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801019c:	e03c      	b.n	8010218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801019e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7fc fa72 	bl	800c68c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80101a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101ac:	e034      	b.n	8010218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101ae:	f107 0318 	add.w	r3, r7, #24
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fc fbbe 	bl	800c934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101bc:	e02c      	b.n	8010218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80101be:	4b09      	ldr	r3, [pc, #36]	; (80101e4 <UART_SetConfig+0x69c>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f003 0320 	and.w	r3, r3, #32
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d016      	beq.n	80101f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80101ca:	4b06      	ldr	r3, [pc, #24]	; (80101e4 <UART_SetConfig+0x69c>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	08db      	lsrs	r3, r3, #3
 80101d0:	f003 0303 	and.w	r3, r3, #3
 80101d4:	4a07      	ldr	r2, [pc, #28]	; (80101f4 <UART_SetConfig+0x6ac>)
 80101d6:	fa22 f303 	lsr.w	r3, r2, r3
 80101da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80101dc:	e01c      	b.n	8010218 <UART_SetConfig+0x6d0>
 80101de:	bf00      	nop
 80101e0:	40011400 	.word	0x40011400
 80101e4:	58024400 	.word	0x58024400
 80101e8:	40007800 	.word	0x40007800
 80101ec:	40007c00 	.word	0x40007c00
 80101f0:	58000c00 	.word	0x58000c00
 80101f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80101f8:	4b9d      	ldr	r3, [pc, #628]	; (8010470 <UART_SetConfig+0x928>)
 80101fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101fc:	e00c      	b.n	8010218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80101fe:	4b9d      	ldr	r3, [pc, #628]	; (8010474 <UART_SetConfig+0x92c>)
 8010200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010202:	e009      	b.n	8010218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801020a:	e005      	b.n	8010218 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801020c:	2300      	movs	r3, #0
 801020e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010210:	2301      	movs	r3, #1
 8010212:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010216:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 81de 	beq.w	80105dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010224:	4a94      	ldr	r2, [pc, #592]	; (8010478 <UART_SetConfig+0x930>)
 8010226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801022a:	461a      	mov	r2, r3
 801022c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801022e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010232:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	685a      	ldr	r2, [r3, #4]
 8010238:	4613      	mov	r3, r2
 801023a:	005b      	lsls	r3, r3, #1
 801023c:	4413      	add	r3, r2
 801023e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010240:	429a      	cmp	r2, r3
 8010242:	d305      	bcc.n	8010250 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801024a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801024c:	429a      	cmp	r2, r3
 801024e:	d903      	bls.n	8010258 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010250:	2301      	movs	r3, #1
 8010252:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010256:	e1c1      	b.n	80105dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801025a:	2200      	movs	r2, #0
 801025c:	60bb      	str	r3, [r7, #8]
 801025e:	60fa      	str	r2, [r7, #12]
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010264:	4a84      	ldr	r2, [pc, #528]	; (8010478 <UART_SetConfig+0x930>)
 8010266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801026a:	b29b      	uxth	r3, r3
 801026c:	2200      	movs	r2, #0
 801026e:	603b      	str	r3, [r7, #0]
 8010270:	607a      	str	r2, [r7, #4]
 8010272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010276:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801027a:	f7f0 f889 	bl	8000390 <__aeabi_uldivmod>
 801027e:	4602      	mov	r2, r0
 8010280:	460b      	mov	r3, r1
 8010282:	4610      	mov	r0, r2
 8010284:	4619      	mov	r1, r3
 8010286:	f04f 0200 	mov.w	r2, #0
 801028a:	f04f 0300 	mov.w	r3, #0
 801028e:	020b      	lsls	r3, r1, #8
 8010290:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010294:	0202      	lsls	r2, r0, #8
 8010296:	6979      	ldr	r1, [r7, #20]
 8010298:	6849      	ldr	r1, [r1, #4]
 801029a:	0849      	lsrs	r1, r1, #1
 801029c:	2000      	movs	r0, #0
 801029e:	460c      	mov	r4, r1
 80102a0:	4605      	mov	r5, r0
 80102a2:	eb12 0804 	adds.w	r8, r2, r4
 80102a6:	eb43 0905 	adc.w	r9, r3, r5
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	469a      	mov	sl, r3
 80102b2:	4693      	mov	fp, r2
 80102b4:	4652      	mov	r2, sl
 80102b6:	465b      	mov	r3, fp
 80102b8:	4640      	mov	r0, r8
 80102ba:	4649      	mov	r1, r9
 80102bc:	f7f0 f868 	bl	8000390 <__aeabi_uldivmod>
 80102c0:	4602      	mov	r2, r0
 80102c2:	460b      	mov	r3, r1
 80102c4:	4613      	mov	r3, r2
 80102c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80102c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80102ce:	d308      	bcc.n	80102e2 <UART_SetConfig+0x79a>
 80102d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102d6:	d204      	bcs.n	80102e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102de:	60da      	str	r2, [r3, #12]
 80102e0:	e17c      	b.n	80105dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80102e2:	2301      	movs	r3, #1
 80102e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80102e8:	e178      	b.n	80105dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	69db      	ldr	r3, [r3, #28]
 80102ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102f2:	f040 80c5 	bne.w	8010480 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80102f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80102fa:	2b20      	cmp	r3, #32
 80102fc:	dc48      	bgt.n	8010390 <UART_SetConfig+0x848>
 80102fe:	2b00      	cmp	r3, #0
 8010300:	db7b      	blt.n	80103fa <UART_SetConfig+0x8b2>
 8010302:	2b20      	cmp	r3, #32
 8010304:	d879      	bhi.n	80103fa <UART_SetConfig+0x8b2>
 8010306:	a201      	add	r2, pc, #4	; (adr r2, 801030c <UART_SetConfig+0x7c4>)
 8010308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801030c:	08010397 	.word	0x08010397
 8010310:	0801039f 	.word	0x0801039f
 8010314:	080103fb 	.word	0x080103fb
 8010318:	080103fb 	.word	0x080103fb
 801031c:	080103a7 	.word	0x080103a7
 8010320:	080103fb 	.word	0x080103fb
 8010324:	080103fb 	.word	0x080103fb
 8010328:	080103fb 	.word	0x080103fb
 801032c:	080103b7 	.word	0x080103b7
 8010330:	080103fb 	.word	0x080103fb
 8010334:	080103fb 	.word	0x080103fb
 8010338:	080103fb 	.word	0x080103fb
 801033c:	080103fb 	.word	0x080103fb
 8010340:	080103fb 	.word	0x080103fb
 8010344:	080103fb 	.word	0x080103fb
 8010348:	080103fb 	.word	0x080103fb
 801034c:	080103c7 	.word	0x080103c7
 8010350:	080103fb 	.word	0x080103fb
 8010354:	080103fb 	.word	0x080103fb
 8010358:	080103fb 	.word	0x080103fb
 801035c:	080103fb 	.word	0x080103fb
 8010360:	080103fb 	.word	0x080103fb
 8010364:	080103fb 	.word	0x080103fb
 8010368:	080103fb 	.word	0x080103fb
 801036c:	080103fb 	.word	0x080103fb
 8010370:	080103fb 	.word	0x080103fb
 8010374:	080103fb 	.word	0x080103fb
 8010378:	080103fb 	.word	0x080103fb
 801037c:	080103fb 	.word	0x080103fb
 8010380:	080103fb 	.word	0x080103fb
 8010384:	080103fb 	.word	0x080103fb
 8010388:	080103fb 	.word	0x080103fb
 801038c:	080103ed 	.word	0x080103ed
 8010390:	2b40      	cmp	r3, #64	; 0x40
 8010392:	d02e      	beq.n	80103f2 <UART_SetConfig+0x8aa>
 8010394:	e031      	b.n	80103fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010396:	f7fb f9f1 	bl	800b77c <HAL_RCC_GetPCLK1Freq>
 801039a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801039c:	e033      	b.n	8010406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801039e:	f7fb fa03 	bl	800b7a8 <HAL_RCC_GetPCLK2Freq>
 80103a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80103a4:	e02f      	b.n	8010406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7fc f96e 	bl	800c68c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80103b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103b4:	e027      	b.n	8010406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103b6:	f107 0318 	add.w	r3, r7, #24
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fc faba 	bl	800c934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103c4:	e01f      	b.n	8010406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103c6:	4b2d      	ldr	r3, [pc, #180]	; (801047c <UART_SetConfig+0x934>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f003 0320 	and.w	r3, r3, #32
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d009      	beq.n	80103e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80103d2:	4b2a      	ldr	r3, [pc, #168]	; (801047c <UART_SetConfig+0x934>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	08db      	lsrs	r3, r3, #3
 80103d8:	f003 0303 	and.w	r3, r3, #3
 80103dc:	4a24      	ldr	r2, [pc, #144]	; (8010470 <UART_SetConfig+0x928>)
 80103de:	fa22 f303 	lsr.w	r3, r2, r3
 80103e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80103e4:	e00f      	b.n	8010406 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80103e6:	4b22      	ldr	r3, [pc, #136]	; (8010470 <UART_SetConfig+0x928>)
 80103e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103ea:	e00c      	b.n	8010406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80103ec:	4b21      	ldr	r3, [pc, #132]	; (8010474 <UART_SetConfig+0x92c>)
 80103ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103f0:	e009      	b.n	8010406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80103f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80103f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103f8:	e005      	b.n	8010406 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80103fa:	2300      	movs	r3, #0
 80103fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80103fe:	2301      	movs	r3, #1
 8010400:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010408:	2b00      	cmp	r3, #0
 801040a:	f000 80e7 	beq.w	80105dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010412:	4a19      	ldr	r2, [pc, #100]	; (8010478 <UART_SetConfig+0x930>)
 8010414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010418:	461a      	mov	r2, r3
 801041a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801041c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010420:	005a      	lsls	r2, r3, #1
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	085b      	lsrs	r3, r3, #1
 8010428:	441a      	add	r2, r3
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010432:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010436:	2b0f      	cmp	r3, #15
 8010438:	d916      	bls.n	8010468 <UART_SetConfig+0x920>
 801043a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010440:	d212      	bcs.n	8010468 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010444:	b29b      	uxth	r3, r3
 8010446:	f023 030f 	bic.w	r3, r3, #15
 801044a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801044c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801044e:	085b      	lsrs	r3, r3, #1
 8010450:	b29b      	uxth	r3, r3
 8010452:	f003 0307 	and.w	r3, r3, #7
 8010456:	b29a      	uxth	r2, r3
 8010458:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801045a:	4313      	orrs	r3, r2
 801045c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010464:	60da      	str	r2, [r3, #12]
 8010466:	e0b9      	b.n	80105dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010468:	2301      	movs	r3, #1
 801046a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801046e:	e0b5      	b.n	80105dc <UART_SetConfig+0xa94>
 8010470:	03d09000 	.word	0x03d09000
 8010474:	003d0900 	.word	0x003d0900
 8010478:	0801530c 	.word	0x0801530c
 801047c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010480:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010484:	2b20      	cmp	r3, #32
 8010486:	dc49      	bgt.n	801051c <UART_SetConfig+0x9d4>
 8010488:	2b00      	cmp	r3, #0
 801048a:	db7c      	blt.n	8010586 <UART_SetConfig+0xa3e>
 801048c:	2b20      	cmp	r3, #32
 801048e:	d87a      	bhi.n	8010586 <UART_SetConfig+0xa3e>
 8010490:	a201      	add	r2, pc, #4	; (adr r2, 8010498 <UART_SetConfig+0x950>)
 8010492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010496:	bf00      	nop
 8010498:	08010523 	.word	0x08010523
 801049c:	0801052b 	.word	0x0801052b
 80104a0:	08010587 	.word	0x08010587
 80104a4:	08010587 	.word	0x08010587
 80104a8:	08010533 	.word	0x08010533
 80104ac:	08010587 	.word	0x08010587
 80104b0:	08010587 	.word	0x08010587
 80104b4:	08010587 	.word	0x08010587
 80104b8:	08010543 	.word	0x08010543
 80104bc:	08010587 	.word	0x08010587
 80104c0:	08010587 	.word	0x08010587
 80104c4:	08010587 	.word	0x08010587
 80104c8:	08010587 	.word	0x08010587
 80104cc:	08010587 	.word	0x08010587
 80104d0:	08010587 	.word	0x08010587
 80104d4:	08010587 	.word	0x08010587
 80104d8:	08010553 	.word	0x08010553
 80104dc:	08010587 	.word	0x08010587
 80104e0:	08010587 	.word	0x08010587
 80104e4:	08010587 	.word	0x08010587
 80104e8:	08010587 	.word	0x08010587
 80104ec:	08010587 	.word	0x08010587
 80104f0:	08010587 	.word	0x08010587
 80104f4:	08010587 	.word	0x08010587
 80104f8:	08010587 	.word	0x08010587
 80104fc:	08010587 	.word	0x08010587
 8010500:	08010587 	.word	0x08010587
 8010504:	08010587 	.word	0x08010587
 8010508:	08010587 	.word	0x08010587
 801050c:	08010587 	.word	0x08010587
 8010510:	08010587 	.word	0x08010587
 8010514:	08010587 	.word	0x08010587
 8010518:	08010579 	.word	0x08010579
 801051c:	2b40      	cmp	r3, #64	; 0x40
 801051e:	d02e      	beq.n	801057e <UART_SetConfig+0xa36>
 8010520:	e031      	b.n	8010586 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010522:	f7fb f92b 	bl	800b77c <HAL_RCC_GetPCLK1Freq>
 8010526:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010528:	e033      	b.n	8010592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801052a:	f7fb f93d 	bl	800b7a8 <HAL_RCC_GetPCLK2Freq>
 801052e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010530:	e02f      	b.n	8010592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010536:	4618      	mov	r0, r3
 8010538:	f7fc f8a8 	bl	800c68c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801053c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801053e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010540:	e027      	b.n	8010592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010542:	f107 0318 	add.w	r3, r7, #24
 8010546:	4618      	mov	r0, r3
 8010548:	f7fc f9f4 	bl	800c934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010550:	e01f      	b.n	8010592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010552:	4b2d      	ldr	r3, [pc, #180]	; (8010608 <UART_SetConfig+0xac0>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f003 0320 	and.w	r3, r3, #32
 801055a:	2b00      	cmp	r3, #0
 801055c:	d009      	beq.n	8010572 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801055e:	4b2a      	ldr	r3, [pc, #168]	; (8010608 <UART_SetConfig+0xac0>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	08db      	lsrs	r3, r3, #3
 8010564:	f003 0303 	and.w	r3, r3, #3
 8010568:	4a28      	ldr	r2, [pc, #160]	; (801060c <UART_SetConfig+0xac4>)
 801056a:	fa22 f303 	lsr.w	r3, r2, r3
 801056e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010570:	e00f      	b.n	8010592 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010572:	4b26      	ldr	r3, [pc, #152]	; (801060c <UART_SetConfig+0xac4>)
 8010574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010576:	e00c      	b.n	8010592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010578:	4b25      	ldr	r3, [pc, #148]	; (8010610 <UART_SetConfig+0xac8>)
 801057a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801057c:	e009      	b.n	8010592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801057e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010584:	e005      	b.n	8010592 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010586:	2300      	movs	r3, #0
 8010588:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801058a:	2301      	movs	r3, #1
 801058c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010590:	bf00      	nop
    }

    if (pclk != 0U)
 8010592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010594:	2b00      	cmp	r3, #0
 8010596:	d021      	beq.n	80105dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801059c:	4a1d      	ldr	r2, [pc, #116]	; (8010614 <UART_SetConfig+0xacc>)
 801059e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105a2:	461a      	mov	r2, r3
 80105a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	085b      	lsrs	r3, r3, #1
 80105b0:	441a      	add	r2, r3
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80105ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80105bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105be:	2b0f      	cmp	r3, #15
 80105c0:	d909      	bls.n	80105d6 <UART_SetConfig+0xa8e>
 80105c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105c8:	d205      	bcs.n	80105d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80105ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	60da      	str	r2, [r3, #12]
 80105d4:	e002      	b.n	80105dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80105d6:	2301      	movs	r3, #1
 80105d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	2201      	movs	r2, #1
 80105e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	2201      	movs	r2, #1
 80105e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	2200      	movs	r2, #0
 80105f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	2200      	movs	r2, #0
 80105f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80105f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3748      	adds	r7, #72	; 0x48
 8010600:	46bd      	mov	sp, r7
 8010602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010606:	bf00      	nop
 8010608:	58024400 	.word	0x58024400
 801060c:	03d09000 	.word	0x03d09000
 8010610:	003d0900 	.word	0x003d0900
 8010614:	0801530c 	.word	0x0801530c

08010618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010618:	b480      	push	{r7}
 801061a:	b083      	sub	sp, #12
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010624:	f003 0301 	and.w	r3, r3, #1
 8010628:	2b00      	cmp	r3, #0
 801062a:	d00a      	beq.n	8010642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	430a      	orrs	r2, r1
 8010640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010646:	f003 0302 	and.w	r3, r3, #2
 801064a:	2b00      	cmp	r3, #0
 801064c:	d00a      	beq.n	8010664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	430a      	orrs	r2, r1
 8010662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010668:	f003 0304 	and.w	r3, r3, #4
 801066c:	2b00      	cmp	r3, #0
 801066e:	d00a      	beq.n	8010686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	430a      	orrs	r2, r1
 8010684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801068a:	f003 0308 	and.w	r3, r3, #8
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00a      	beq.n	80106a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	430a      	orrs	r2, r1
 80106a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106ac:	f003 0310 	and.w	r3, r3, #16
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d00a      	beq.n	80106ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	689b      	ldr	r3, [r3, #8]
 80106ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	430a      	orrs	r2, r1
 80106c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106ce:	f003 0320 	and.w	r3, r3, #32
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d00a      	beq.n	80106ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	430a      	orrs	r2, r1
 80106ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d01a      	beq.n	801072e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	430a      	orrs	r2, r1
 801070c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010716:	d10a      	bne.n	801072e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	430a      	orrs	r2, r1
 801072c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010736:	2b00      	cmp	r3, #0
 8010738:	d00a      	beq.n	8010750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	430a      	orrs	r2, r1
 801074e:	605a      	str	r2, [r3, #4]
  }
}
 8010750:	bf00      	nop
 8010752:	370c      	adds	r7, #12
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b086      	sub	sp, #24
 8010760:	af02      	add	r7, sp, #8
 8010762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801076c:	f7f6 fcc8 	bl	8007100 <HAL_GetTick>
 8010770:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f003 0308 	and.w	r3, r3, #8
 801077c:	2b08      	cmp	r3, #8
 801077e:	d10e      	bne.n	801079e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010784:	9300      	str	r3, [sp, #0]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2200      	movs	r2, #0
 801078a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 f82f 	bl	80107f2 <UART_WaitOnFlagUntilTimeout>
 8010794:	4603      	mov	r3, r0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d001      	beq.n	801079e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801079a:	2303      	movs	r3, #3
 801079c:	e025      	b.n	80107ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f003 0304 	and.w	r3, r3, #4
 80107a8:	2b04      	cmp	r3, #4
 80107aa:	d10e      	bne.n	80107ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80107ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80107b0:	9300      	str	r3, [sp, #0]
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2200      	movs	r2, #0
 80107b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f000 f819 	bl	80107f2 <UART_WaitOnFlagUntilTimeout>
 80107c0:	4603      	mov	r3, r0
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d001      	beq.n	80107ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107c6:	2303      	movs	r3, #3
 80107c8:	e00f      	b.n	80107ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2220      	movs	r2, #32
 80107ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2220      	movs	r2, #32
 80107d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2200      	movs	r2, #0
 80107de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2200      	movs	r2, #0
 80107e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80107e8:	2300      	movs	r3, #0
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3710      	adds	r7, #16
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}

080107f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80107f2:	b580      	push	{r7, lr}
 80107f4:	b09c      	sub	sp, #112	; 0x70
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	60f8      	str	r0, [r7, #12]
 80107fa:	60b9      	str	r1, [r7, #8]
 80107fc:	603b      	str	r3, [r7, #0]
 80107fe:	4613      	mov	r3, r2
 8010800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010802:	e0a9      	b.n	8010958 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801080a:	f000 80a5 	beq.w	8010958 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801080e:	f7f6 fc77 	bl	8007100 <HAL_GetTick>
 8010812:	4602      	mov	r2, r0
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	1ad3      	subs	r3, r2, r3
 8010818:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801081a:	429a      	cmp	r2, r3
 801081c:	d302      	bcc.n	8010824 <UART_WaitOnFlagUntilTimeout+0x32>
 801081e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010820:	2b00      	cmp	r3, #0
 8010822:	d140      	bne.n	80108a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801082c:	e853 3f00 	ldrex	r3, [r3]
 8010830:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010838:	667b      	str	r3, [r7, #100]	; 0x64
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	461a      	mov	r2, r3
 8010840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010844:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801084a:	e841 2300 	strex	r3, r2, [r1]
 801084e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010852:	2b00      	cmp	r3, #0
 8010854:	d1e6      	bne.n	8010824 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	3308      	adds	r3, #8
 801085c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010860:	e853 3f00 	ldrex	r3, [r3]
 8010864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010868:	f023 0301 	bic.w	r3, r3, #1
 801086c:	663b      	str	r3, [r7, #96]	; 0x60
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	3308      	adds	r3, #8
 8010874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010876:	64ba      	str	r2, [r7, #72]	; 0x48
 8010878:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801087c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801087e:	e841 2300 	strex	r3, r2, [r1]
 8010882:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010886:	2b00      	cmp	r3, #0
 8010888:	d1e5      	bne.n	8010856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2220      	movs	r2, #32
 801088e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2220      	movs	r2, #32
 8010896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2200      	movs	r2, #0
 801089e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80108a2:	2303      	movs	r3, #3
 80108a4:	e069      	b.n	801097a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f003 0304 	and.w	r3, r3, #4
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d051      	beq.n	8010958 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	69db      	ldr	r3, [r3, #28]
 80108ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80108be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80108c2:	d149      	bne.n	8010958 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80108cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d6:	e853 3f00 	ldrex	r3, [r3]
 80108da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80108dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80108e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	461a      	mov	r2, r3
 80108ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108ec:	637b      	str	r3, [r7, #52]	; 0x34
 80108ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80108f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108f4:	e841 2300 	strex	r3, r2, [r1]
 80108f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80108fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d1e6      	bne.n	80108ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	3308      	adds	r3, #8
 8010906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	e853 3f00 	ldrex	r3, [r3]
 801090e:	613b      	str	r3, [r7, #16]
   return(result);
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	f023 0301 	bic.w	r3, r3, #1
 8010916:	66bb      	str	r3, [r7, #104]	; 0x68
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	3308      	adds	r3, #8
 801091e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010920:	623a      	str	r2, [r7, #32]
 8010922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010924:	69f9      	ldr	r1, [r7, #28]
 8010926:	6a3a      	ldr	r2, [r7, #32]
 8010928:	e841 2300 	strex	r3, r2, [r1]
 801092c:	61bb      	str	r3, [r7, #24]
   return(result);
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d1e5      	bne.n	8010900 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2220      	movs	r2, #32
 8010938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2220      	movs	r2, #32
 8010940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2220      	movs	r2, #32
 8010948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	2200      	movs	r2, #0
 8010950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010954:	2303      	movs	r3, #3
 8010956:	e010      	b.n	801097a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	69da      	ldr	r2, [r3, #28]
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	4013      	ands	r3, r2
 8010962:	68ba      	ldr	r2, [r7, #8]
 8010964:	429a      	cmp	r2, r3
 8010966:	bf0c      	ite	eq
 8010968:	2301      	moveq	r3, #1
 801096a:	2300      	movne	r3, #0
 801096c:	b2db      	uxtb	r3, r3
 801096e:	461a      	mov	r2, r3
 8010970:	79fb      	ldrb	r3, [r7, #7]
 8010972:	429a      	cmp	r2, r3
 8010974:	f43f af46 	beq.w	8010804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	3770      	adds	r7, #112	; 0x70
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
	...

08010984 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b096      	sub	sp, #88	; 0x58
 8010988:	af00      	add	r7, sp, #0
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	60b9      	str	r1, [r7, #8]
 801098e:	4613      	mov	r3, r2
 8010990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	68ba      	ldr	r2, [r7, #8]
 8010996:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	88fa      	ldrh	r2, [r7, #6]
 801099c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2200      	movs	r2, #0
 80109a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	2222      	movs	r2, #34	; 0x22
 80109ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d02c      	beq.n	8010a12 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109bc:	4a42      	ldr	r2, [pc, #264]	; (8010ac8 <UART_Start_Receive_DMA+0x144>)
 80109be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109c4:	4a41      	ldr	r2, [pc, #260]	; (8010acc <UART_Start_Receive_DMA+0x148>)
 80109c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109cc:	4a40      	ldr	r2, [pc, #256]	; (8010ad0 <UART_Start_Receive_DMA+0x14c>)
 80109ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109d4:	2200      	movs	r2, #0
 80109d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	3324      	adds	r3, #36	; 0x24
 80109e2:	4619      	mov	r1, r3
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109e8:	461a      	mov	r2, r3
 80109ea:	88fb      	ldrh	r3, [r7, #6]
 80109ec:	f7f7 fa3a 	bl	8007e64 <HAL_DMA_Start_IT>
 80109f0:	4603      	mov	r3, r0
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00d      	beq.n	8010a12 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2210      	movs	r2, #16
 80109fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2200      	movs	r2, #0
 8010a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2220      	movs	r2, #32
 8010a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8010a0e:	2301      	movs	r3, #1
 8010a10:	e055      	b.n	8010abe <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2200      	movs	r2, #0
 8010a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	691b      	ldr	r3, [r3, #16]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d018      	beq.n	8010a54 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a2a:	e853 3f00 	ldrex	r3, [r3]
 8010a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a36:	657b      	str	r3, [r7, #84]	; 0x54
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a42:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a48:	e841 2300 	strex	r3, r2, [r1]
 8010a4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d1e6      	bne.n	8010a22 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	3308      	adds	r3, #8
 8010a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5e:	e853 3f00 	ldrex	r3, [r3]
 8010a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a66:	f043 0301 	orr.w	r3, r3, #1
 8010a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	3308      	adds	r3, #8
 8010a72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010a74:	637a      	str	r2, [r7, #52]	; 0x34
 8010a76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a7c:	e841 2300 	strex	r3, r2, [r1]
 8010a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1e5      	bne.n	8010a54 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	3308      	adds	r3, #8
 8010a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	e853 3f00 	ldrex	r3, [r3]
 8010a96:	613b      	str	r3, [r7, #16]
   return(result);
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	3308      	adds	r3, #8
 8010aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010aa8:	623a      	str	r2, [r7, #32]
 8010aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aac:	69f9      	ldr	r1, [r7, #28]
 8010aae:	6a3a      	ldr	r2, [r7, #32]
 8010ab0:	e841 2300 	strex	r3, r2, [r1]
 8010ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8010ab6:	69bb      	ldr	r3, [r7, #24]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d1e5      	bne.n	8010a88 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3758      	adds	r7, #88	; 0x58
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	08010cd7 	.word	0x08010cd7
 8010acc:	08010df9 	.word	0x08010df9
 8010ad0:	08010e31 	.word	0x08010e31

08010ad4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b08f      	sub	sp, #60	; 0x3c
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae2:	6a3b      	ldr	r3, [r7, #32]
 8010ae4:	e853 3f00 	ldrex	r3, [r3]
 8010ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8010aea:	69fb      	ldr	r3, [r7, #28]
 8010aec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010af0:	637b      	str	r3, [r7, #52]	; 0x34
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	461a      	mov	r2, r3
 8010af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010afc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b02:	e841 2300 	strex	r3, r2, [r1]
 8010b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d1e6      	bne.n	8010adc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	3308      	adds	r3, #8
 8010b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	e853 3f00 	ldrex	r3, [r3]
 8010b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010b24:	633b      	str	r3, [r7, #48]	; 0x30
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	3308      	adds	r3, #8
 8010b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b2e:	61ba      	str	r2, [r7, #24]
 8010b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b32:	6979      	ldr	r1, [r7, #20]
 8010b34:	69ba      	ldr	r2, [r7, #24]
 8010b36:	e841 2300 	strex	r3, r2, [r1]
 8010b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d1e5      	bne.n	8010b0e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2220      	movs	r2, #32
 8010b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010b4a:	bf00      	nop
 8010b4c:	373c      	adds	r7, #60	; 0x3c
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr
	...

08010b58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b095      	sub	sp, #84	; 0x54
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b68:	e853 3f00 	ldrex	r3, [r3]
 8010b6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010b74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b7e:	643b      	str	r3, [r7, #64]	; 0x40
 8010b80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b86:	e841 2300 	strex	r3, r2, [r1]
 8010b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1e6      	bne.n	8010b60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	3308      	adds	r3, #8
 8010b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b9a:	6a3b      	ldr	r3, [r7, #32]
 8010b9c:	e853 3f00 	ldrex	r3, [r3]
 8010ba0:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ba2:	69fa      	ldr	r2, [r7, #28]
 8010ba4:	4b1e      	ldr	r3, [pc, #120]	; (8010c20 <UART_EndRxTransfer+0xc8>)
 8010ba6:	4013      	ands	r3, r2
 8010ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	3308      	adds	r3, #8
 8010bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bba:	e841 2300 	strex	r3, r2, [r1]
 8010bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d1e5      	bne.n	8010b92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d118      	bne.n	8010c00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	e853 3f00 	ldrex	r3, [r3]
 8010bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	f023 0310 	bic.w	r3, r3, #16
 8010be2:	647b      	str	r3, [r7, #68]	; 0x44
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	461a      	mov	r2, r3
 8010bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bec:	61bb      	str	r3, [r7, #24]
 8010bee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf0:	6979      	ldr	r1, [r7, #20]
 8010bf2:	69ba      	ldr	r2, [r7, #24]
 8010bf4:	e841 2300 	strex	r3, r2, [r1]
 8010bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d1e6      	bne.n	8010bce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2220      	movs	r2, #32
 8010c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2200      	movs	r2, #0
 8010c12:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010c14:	bf00      	nop
 8010c16:	3754      	adds	r7, #84	; 0x54
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr
 8010c20:	effffffe 	.word	0xeffffffe

08010c24 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b090      	sub	sp, #64	; 0x40
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c30:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	69db      	ldr	r3, [r3, #28]
 8010c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c3a:	d037      	beq.n	8010cac <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	3308      	adds	r3, #8
 8010c4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4e:	e853 3f00 	ldrex	r3, [r3]
 8010c52:	623b      	str	r3, [r7, #32]
   return(result);
 8010c54:	6a3b      	ldr	r3, [r7, #32]
 8010c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	3308      	adds	r3, #8
 8010c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c64:	633a      	str	r2, [r7, #48]	; 0x30
 8010c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c6c:	e841 2300 	strex	r3, r2, [r1]
 8010c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d1e5      	bne.n	8010c44 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	e853 3f00 	ldrex	r3, [r3]
 8010c84:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8010c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	461a      	mov	r2, r3
 8010c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c96:	61fb      	str	r3, [r7, #28]
 8010c98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c9a:	69b9      	ldr	r1, [r7, #24]
 8010c9c:	69fa      	ldr	r2, [r7, #28]
 8010c9e:	e841 2300 	strex	r3, r2, [r1]
 8010ca2:	617b      	str	r3, [r7, #20]
   return(result);
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d1e6      	bne.n	8010c78 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010caa:	e002      	b.n	8010cb2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010cac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cae:	f7fe ff19 	bl	800fae4 <HAL_UART_TxCpltCallback>
}
 8010cb2:	bf00      	nop
 8010cb4:	3740      	adds	r7, #64	; 0x40
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}

08010cba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b084      	sub	sp, #16
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010cc8:	68f8      	ldr	r0, [r7, #12]
 8010cca:	f7fe ff15 	bl	800faf8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cce:	bf00      	nop
 8010cd0:	3710      	adds	r7, #16
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}

08010cd6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010cd6:	b580      	push	{r7, lr}
 8010cd8:	b09c      	sub	sp, #112	; 0x70
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ce2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	69db      	ldr	r3, [r3, #28]
 8010ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cec:	d071      	beq.n	8010dd2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cfe:	e853 3f00 	ldrex	r3, [r3]
 8010d02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	461a      	mov	r2, r3
 8010d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d14:	65bb      	str	r3, [r7, #88]	; 0x58
 8010d16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d1c:	e841 2300 	strex	r3, r2, [r1]
 8010d20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d1e6      	bne.n	8010cf6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	3308      	adds	r3, #8
 8010d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d32:	e853 3f00 	ldrex	r3, [r3]
 8010d36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d3a:	f023 0301 	bic.w	r3, r3, #1
 8010d3e:	667b      	str	r3, [r7, #100]	; 0x64
 8010d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	3308      	adds	r3, #8
 8010d46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010d48:	647a      	str	r2, [r7, #68]	; 0x44
 8010d4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d50:	e841 2300 	strex	r3, r2, [r1]
 8010d54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d1e5      	bne.n	8010d28 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	3308      	adds	r3, #8
 8010d62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d66:	e853 3f00 	ldrex	r3, [r3]
 8010d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8010d6c:	6a3b      	ldr	r3, [r7, #32]
 8010d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d72:	663b      	str	r3, [r7, #96]	; 0x60
 8010d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	3308      	adds	r3, #8
 8010d7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010d7c:	633a      	str	r2, [r7, #48]	; 0x30
 8010d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d84:	e841 2300 	strex	r3, r2, [r1]
 8010d88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d1e5      	bne.n	8010d5c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d92:	2220      	movs	r2, #32
 8010d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d118      	bne.n	8010dd2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	e853 3f00 	ldrex	r3, [r3]
 8010dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	f023 0310 	bic.w	r3, r3, #16
 8010db4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	461a      	mov	r2, r3
 8010dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010dbe:	61fb      	str	r3, [r7, #28]
 8010dc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc2:	69b9      	ldr	r1, [r7, #24]
 8010dc4:	69fa      	ldr	r2, [r7, #28]
 8010dc6:	e841 2300 	strex	r3, r2, [r1]
 8010dca:	617b      	str	r3, [r7, #20]
   return(result);
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d1e6      	bne.n	8010da0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dd6:	2b01      	cmp	r3, #1
 8010dd8:	d107      	bne.n	8010dea <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010de0:	4619      	mov	r1, r3
 8010de2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010de4:	f7f2 fb0e 	bl	8003404 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010de8:	e002      	b.n	8010df0 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010dea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010dec:	f7fe fe8e 	bl	800fb0c <HAL_UART_RxCpltCallback>
}
 8010df0:	bf00      	nop
 8010df2:	3770      	adds	r7, #112	; 0x70
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e04:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d109      	bne.n	8010e22 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010e14:	085b      	lsrs	r3, r3, #1
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	4619      	mov	r1, r3
 8010e1a:	68f8      	ldr	r0, [r7, #12]
 8010e1c:	f7f2 faf2 	bl	8003404 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010e20:	e002      	b.n	8010e28 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010e22:	68f8      	ldr	r0, [r7, #12]
 8010e24:	f7fe fe7c 	bl	800fb20 <HAL_UART_RxHalfCpltCallback>
}
 8010e28:	bf00      	nop
 8010e2a:	3710      	adds	r7, #16
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b086      	sub	sp, #24
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e3c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e44:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e4c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	689b      	ldr	r3, [r3, #8]
 8010e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e58:	2b80      	cmp	r3, #128	; 0x80
 8010e5a:	d109      	bne.n	8010e70 <UART_DMAError+0x40>
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	2b21      	cmp	r3, #33	; 0x21
 8010e60:	d106      	bne.n	8010e70 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	2200      	movs	r2, #0
 8010e66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010e6a:	6978      	ldr	r0, [r7, #20]
 8010e6c:	f7ff fe32 	bl	8010ad4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	689b      	ldr	r3, [r3, #8]
 8010e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e7a:	2b40      	cmp	r3, #64	; 0x40
 8010e7c:	d109      	bne.n	8010e92 <UART_DMAError+0x62>
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2b22      	cmp	r3, #34	; 0x22
 8010e82:	d106      	bne.n	8010e92 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	2200      	movs	r2, #0
 8010e88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010e8c:	6978      	ldr	r0, [r7, #20]
 8010e8e:	f7ff fe63 	bl	8010b58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e98:	f043 0210 	orr.w	r2, r3, #16
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010ea2:	6978      	ldr	r0, [r7, #20]
 8010ea4:	f7fe fe46 	bl	800fb34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ea8:	bf00      	nop
 8010eaa:	3718      	adds	r7, #24
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ebc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f7fe fe30 	bl	800fb34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ed4:	bf00      	nop
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b088      	sub	sp, #32
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	e853 3f00 	ldrex	r3, [r3]
 8010ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ef8:	61fb      	str	r3, [r7, #28]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	461a      	mov	r2, r3
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	61bb      	str	r3, [r7, #24]
 8010f04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f06:	6979      	ldr	r1, [r7, #20]
 8010f08:	69ba      	ldr	r2, [r7, #24]
 8010f0a:	e841 2300 	strex	r3, r2, [r1]
 8010f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d1e6      	bne.n	8010ee4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2220      	movs	r2, #32
 8010f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f7fe fddd 	bl	800fae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f2a:	bf00      	nop
 8010f2c:	3720      	adds	r7, #32
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010f32:	b480      	push	{r7}
 8010f34:	b083      	sub	sp, #12
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010f3a:	bf00      	nop
 8010f3c:	370c      	adds	r7, #12
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr

08010f46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010f46:	b480      	push	{r7}
 8010f48:	b083      	sub	sp, #12
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010f4e:	bf00      	nop
 8010f50:	370c      	adds	r7, #12
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr

08010f5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010f5a:	b480      	push	{r7}
 8010f5c:	b083      	sub	sp, #12
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010f62:	bf00      	nop
 8010f64:	370c      	adds	r7, #12
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr

08010f6e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b084      	sub	sp, #16
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d101      	bne.n	8010f84 <HAL_UARTEx_EnableFifoMode+0x16>
 8010f80:	2302      	movs	r3, #2
 8010f82:	e02b      	b.n	8010fdc <HAL_UARTEx_EnableFifoMode+0x6e>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2201      	movs	r2, #1
 8010f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2224      	movs	r2, #36	; 0x24
 8010f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f022 0201 	bic.w	r2, r2, #1
 8010faa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010fb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010fba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f000 f91f 	bl	8011208 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2220      	movs	r2, #32
 8010fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010fda:	2300      	movs	r3, #0
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d101      	bne.n	8010ffa <HAL_UARTEx_DisableFifoMode+0x16>
 8010ff6:	2302      	movs	r3, #2
 8010ff8:	e027      	b.n	801104a <HAL_UARTEx_DisableFifoMode+0x66>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2224      	movs	r2, #36	; 0x24
 8011006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	681a      	ldr	r2, [r3, #0]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f022 0201 	bic.w	r2, r2, #1
 8011020:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011028:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2200      	movs	r2, #0
 801102e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	68fa      	ldr	r2, [r7, #12]
 8011036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2220      	movs	r2, #32
 801103c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011048:	2300      	movs	r3, #0
}
 801104a:	4618      	mov	r0, r3
 801104c:	3714      	adds	r7, #20
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011056:	b580      	push	{r7, lr}
 8011058:	b084      	sub	sp, #16
 801105a:	af00      	add	r7, sp, #0
 801105c:	6078      	str	r0, [r7, #4]
 801105e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011066:	2b01      	cmp	r3, #1
 8011068:	d101      	bne.n	801106e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801106a:	2302      	movs	r3, #2
 801106c:	e02d      	b.n	80110ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2201      	movs	r2, #1
 8011072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2224      	movs	r2, #36	; 0x24
 801107a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	681a      	ldr	r2, [r3, #0]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	f022 0201 	bic.w	r2, r2, #1
 8011094:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	689b      	ldr	r3, [r3, #8]
 801109c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	683a      	ldr	r2, [r7, #0]
 80110a6:	430a      	orrs	r2, r1
 80110a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 f8ac 	bl	8011208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	68fa      	ldr	r2, [r7, #12]
 80110b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2220      	movs	r2, #32
 80110bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80110c8:	2300      	movs	r3, #0
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}

080110d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110d2:	b580      	push	{r7, lr}
 80110d4:	b084      	sub	sp, #16
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	6078      	str	r0, [r7, #4]
 80110da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80110e2:	2b01      	cmp	r3, #1
 80110e4:	d101      	bne.n	80110ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80110e6:	2302      	movs	r3, #2
 80110e8:	e02d      	b.n	8011146 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2201      	movs	r2, #1
 80110ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2224      	movs	r2, #36	; 0x24
 80110f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f022 0201 	bic.w	r2, r2, #1
 8011110:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	689b      	ldr	r3, [r3, #8]
 8011118:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	683a      	ldr	r2, [r7, #0]
 8011122:	430a      	orrs	r2, r1
 8011124:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 f86e 	bl	8011208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	68fa      	ldr	r2, [r7, #12]
 8011132:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2220      	movs	r2, #32
 8011138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2200      	movs	r2, #0
 8011140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011144:	2300      	movs	r3, #0
}
 8011146:	4618      	mov	r0, r3
 8011148:	3710      	adds	r7, #16
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801114e:	b580      	push	{r7, lr}
 8011150:	b08c      	sub	sp, #48	; 0x30
 8011152:	af00      	add	r7, sp, #0
 8011154:	60f8      	str	r0, [r7, #12]
 8011156:	60b9      	str	r1, [r7, #8]
 8011158:	4613      	mov	r3, r2
 801115a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011162:	2b20      	cmp	r3, #32
 8011164:	d14a      	bne.n	80111fc <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d002      	beq.n	8011172 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 801116c:	88fb      	ldrh	r3, [r7, #6]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	e043      	b.n	80111fe <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801117c:	2b01      	cmp	r3, #1
 801117e:	d101      	bne.n	8011184 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8011180:	2302      	movs	r3, #2
 8011182:	e03c      	b.n	80111fe <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	2201      	movs	r2, #1
 8011188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2201      	movs	r2, #1
 8011190:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8011192:	88fb      	ldrh	r3, [r7, #6]
 8011194:	461a      	mov	r2, r3
 8011196:	68b9      	ldr	r1, [r7, #8]
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	f7ff fbf3 	bl	8010984 <UART_Start_Receive_DMA>
 801119e:	4603      	mov	r3, r0
 80111a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80111a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d124      	bne.n	80111f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d11d      	bne.n	80111f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	2210      	movs	r2, #16
 80111ba:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111c2:	69bb      	ldr	r3, [r7, #24]
 80111c4:	e853 3f00 	ldrex	r3, [r3]
 80111c8:	617b      	str	r3, [r7, #20]
   return(result);
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	f043 0310 	orr.w	r3, r3, #16
 80111d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	461a      	mov	r2, r3
 80111d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111da:	627b      	str	r3, [r7, #36]	; 0x24
 80111dc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111de:	6a39      	ldr	r1, [r7, #32]
 80111e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111e2:	e841 2300 	strex	r3, r2, [r1]
 80111e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d1e6      	bne.n	80111bc <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80111ee:	e002      	b.n	80111f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80111f0:	2301      	movs	r3, #1
 80111f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80111f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111fa:	e000      	b.n	80111fe <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80111fc:	2302      	movs	r3, #2
  }
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3730      	adds	r7, #48	; 0x30
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
	...

08011208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011208:	b480      	push	{r7}
 801120a:	b085      	sub	sp, #20
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011214:	2b00      	cmp	r3, #0
 8011216:	d108      	bne.n	801122a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2201      	movs	r2, #1
 801121c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2201      	movs	r2, #1
 8011224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011228:	e031      	b.n	801128e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801122a:	2310      	movs	r3, #16
 801122c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801122e:	2310      	movs	r3, #16
 8011230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	689b      	ldr	r3, [r3, #8]
 8011238:	0e5b      	lsrs	r3, r3, #25
 801123a:	b2db      	uxtb	r3, r3
 801123c:	f003 0307 	and.w	r3, r3, #7
 8011240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	689b      	ldr	r3, [r3, #8]
 8011248:	0f5b      	lsrs	r3, r3, #29
 801124a:	b2db      	uxtb	r3, r3
 801124c:	f003 0307 	and.w	r3, r3, #7
 8011250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011252:	7bbb      	ldrb	r3, [r7, #14]
 8011254:	7b3a      	ldrb	r2, [r7, #12]
 8011256:	4911      	ldr	r1, [pc, #68]	; (801129c <UARTEx_SetNbDataToProcess+0x94>)
 8011258:	5c8a      	ldrb	r2, [r1, r2]
 801125a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801125e:	7b3a      	ldrb	r2, [r7, #12]
 8011260:	490f      	ldr	r1, [pc, #60]	; (80112a0 <UARTEx_SetNbDataToProcess+0x98>)
 8011262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011264:	fb93 f3f2 	sdiv	r3, r3, r2
 8011268:	b29a      	uxth	r2, r3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011270:	7bfb      	ldrb	r3, [r7, #15]
 8011272:	7b7a      	ldrb	r2, [r7, #13]
 8011274:	4909      	ldr	r1, [pc, #36]	; (801129c <UARTEx_SetNbDataToProcess+0x94>)
 8011276:	5c8a      	ldrb	r2, [r1, r2]
 8011278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801127c:	7b7a      	ldrb	r2, [r7, #13]
 801127e:	4908      	ldr	r1, [pc, #32]	; (80112a0 <UARTEx_SetNbDataToProcess+0x98>)
 8011280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011282:	fb93 f3f2 	sdiv	r3, r3, r2
 8011286:	b29a      	uxth	r2, r3
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801128e:	bf00      	nop
 8011290:	3714      	adds	r7, #20
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	08015324 	.word	0x08015324
 80112a0:	0801532c 	.word	0x0801532c

080112a4 <checkint>:
 80112a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80112a8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80112ac:	429a      	cmp	r2, r3
 80112ae:	b570      	push	{r4, r5, r6, lr}
 80112b0:	dd2a      	ble.n	8011308 <checkint+0x64>
 80112b2:	f240 4333 	movw	r3, #1075	; 0x433
 80112b6:	429a      	cmp	r2, r3
 80112b8:	dc24      	bgt.n	8011304 <checkint+0x60>
 80112ba:	1a9b      	subs	r3, r3, r2
 80112bc:	f1a3 0620 	sub.w	r6, r3, #32
 80112c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112c4:	fa02 f403 	lsl.w	r4, r2, r3
 80112c8:	fa02 f606 	lsl.w	r6, r2, r6
 80112cc:	f1c3 0520 	rsb	r5, r3, #32
 80112d0:	fa22 f505 	lsr.w	r5, r2, r5
 80112d4:	4334      	orrs	r4, r6
 80112d6:	432c      	orrs	r4, r5
 80112d8:	409a      	lsls	r2, r3
 80112da:	ea20 0202 	bic.w	r2, r0, r2
 80112de:	ea21 0404 	bic.w	r4, r1, r4
 80112e2:	4322      	orrs	r2, r4
 80112e4:	f1a3 0420 	sub.w	r4, r3, #32
 80112e8:	f1c3 0220 	rsb	r2, r3, #32
 80112ec:	d10c      	bne.n	8011308 <checkint+0x64>
 80112ee:	40d8      	lsrs	r0, r3
 80112f0:	fa01 f302 	lsl.w	r3, r1, r2
 80112f4:	4318      	orrs	r0, r3
 80112f6:	40e1      	lsrs	r1, r4
 80112f8:	4308      	orrs	r0, r1
 80112fa:	f000 0001 	and.w	r0, r0, #1
 80112fe:	f1d0 0002 	rsbs	r0, r0, #2
 8011302:	bd70      	pop	{r4, r5, r6, pc}
 8011304:	2002      	movs	r0, #2
 8011306:	e7fc      	b.n	8011302 <checkint+0x5e>
 8011308:	2000      	movs	r0, #0
 801130a:	e7fa      	b.n	8011302 <checkint+0x5e>
 801130c:	0000      	movs	r0, r0
	...

08011310 <pow>:
 8011310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011314:	ee10 4a90 	vmov	r4, s1
 8011318:	ed2d 8b0a 	vpush	{d8-d12}
 801131c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011320:	ee11 7a90 	vmov	r7, s3
 8011324:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8011328:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801132c:	429a      	cmp	r2, r3
 801132e:	ee10 6a10 	vmov	r6, s0
 8011332:	ee11 0a10 	vmov	r0, s2
 8011336:	b086      	sub	sp, #24
 8011338:	46d4      	mov	ip, sl
 801133a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801133e:	d806      	bhi.n	801134e <pow+0x3e>
 8011340:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8011344:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011348:	2b7f      	cmp	r3, #127	; 0x7f
 801134a:	f240 8156 	bls.w	80115fa <pow+0x2ea>
 801134e:	1802      	adds	r2, r0, r0
 8011350:	eb47 0107 	adc.w	r1, r7, r7
 8011354:	f06f 0e01 	mvn.w	lr, #1
 8011358:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 801135c:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 8011360:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8011364:	45ce      	cmp	lr, r9
 8011366:	eb73 0808 	sbcs.w	r8, r3, r8
 801136a:	d23f      	bcs.n	80113ec <pow+0xdc>
 801136c:	ea52 0301 	orrs.w	r3, r2, r1
 8011370:	f04f 0300 	mov.w	r3, #0
 8011374:	d10c      	bne.n	8011390 <pow+0x80>
 8011376:	19b6      	adds	r6, r6, r6
 8011378:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801137c:	4164      	adcs	r4, r4
 801137e:	42b3      	cmp	r3, r6
 8011380:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011384:	41a3      	sbcs	r3, r4
 8011386:	f0c0 808c 	bcc.w	80114a2 <pow+0x192>
 801138a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801138e:	e028      	b.n	80113e2 <pow+0xd2>
 8011390:	4da3      	ldr	r5, [pc, #652]	; (8011620 <pow+0x310>)
 8011392:	42ac      	cmp	r4, r5
 8011394:	bf08      	it	eq
 8011396:	429e      	cmpeq	r6, r3
 8011398:	d107      	bne.n	80113aa <pow+0x9a>
 801139a:	1800      	adds	r0, r0, r0
 801139c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80113a0:	417f      	adcs	r7, r7
 80113a2:	4283      	cmp	r3, r0
 80113a4:	4b9f      	ldr	r3, [pc, #636]	; (8011624 <pow+0x314>)
 80113a6:	41bb      	sbcs	r3, r7
 80113a8:	e7ed      	b.n	8011386 <pow+0x76>
 80113aa:	19b6      	adds	r6, r6, r6
 80113ac:	489e      	ldr	r0, [pc, #632]	; (8011628 <pow+0x318>)
 80113ae:	4164      	adcs	r4, r4
 80113b0:	42b3      	cmp	r3, r6
 80113b2:	eb70 0504 	sbcs.w	r5, r0, r4
 80113b6:	d374      	bcc.n	80114a2 <pow+0x192>
 80113b8:	4281      	cmp	r1, r0
 80113ba:	bf08      	it	eq
 80113bc:	429a      	cmpeq	r2, r3
 80113be:	d170      	bne.n	80114a2 <pow+0x192>
 80113c0:	4a9a      	ldr	r2, [pc, #616]	; (801162c <pow+0x31c>)
 80113c2:	4294      	cmp	r4, r2
 80113c4:	bf08      	it	eq
 80113c6:	429e      	cmpeq	r6, r3
 80113c8:	d0df      	beq.n	801138a <pow+0x7a>
 80113ca:	4294      	cmp	r4, r2
 80113cc:	ea6f 0707 	mvn.w	r7, r7
 80113d0:	bf34      	ite	cc
 80113d2:	2400      	movcc	r4, #0
 80113d4:	2401      	movcs	r4, #1
 80113d6:	0fff      	lsrs	r7, r7, #31
 80113d8:	42bc      	cmp	r4, r7
 80113da:	f040 81d9 	bne.w	8011790 <pow+0x480>
 80113de:	ee21 0b01 	vmul.f64	d0, d1, d1
 80113e2:	b006      	add	sp, #24
 80113e4:	ecbd 8b0a 	vpop	{d8-d12}
 80113e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113ec:	eb16 0806 	adds.w	r8, r6, r6
 80113f0:	eb44 0904 	adc.w	r9, r4, r4
 80113f4:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 80113f8:	f169 0200 	sbc.w	r2, r9, #0
 80113fc:	458e      	cmp	lr, r1
 80113fe:	4193      	sbcs	r3, r2
 8011400:	d223      	bcs.n	801144a <pow+0x13a>
 8011402:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011406:	2c00      	cmp	r4, #0
 8011408:	da12      	bge.n	8011430 <pow+0x120>
 801140a:	4639      	mov	r1, r7
 801140c:	f7ff ff4a 	bl	80112a4 <checkint>
 8011410:	2801      	cmp	r0, #1
 8011412:	d10d      	bne.n	8011430 <pow+0x120>
 8011414:	eeb1 0b40 	vneg.f64	d0, d0
 8011418:	ea58 0309 	orrs.w	r3, r8, r9
 801141c:	d10a      	bne.n	8011434 <pow+0x124>
 801141e:	2f00      	cmp	r7, #0
 8011420:	dadf      	bge.n	80113e2 <pow+0xd2>
 8011422:	b006      	add	sp, #24
 8011424:	ecbd 8b0a 	vpop	{d8-d12}
 8011428:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801142c:	f000 bfec 	b.w	8012408 <__math_divzero>
 8011430:	2000      	movs	r0, #0
 8011432:	e7f1      	b.n	8011418 <pow+0x108>
 8011434:	2f00      	cmp	r7, #0
 8011436:	dad4      	bge.n	80113e2 <pow+0xd2>
 8011438:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801143c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011440:	ed8d 7b00 	vstr	d7, [sp]
 8011444:	ed9d 0b00 	vldr	d0, [sp]
 8011448:	e7cb      	b.n	80113e2 <pow+0xd2>
 801144a:	2c00      	cmp	r4, #0
 801144c:	da2c      	bge.n	80114a8 <pow+0x198>
 801144e:	4639      	mov	r1, r7
 8011450:	f7ff ff28 	bl	80112a4 <checkint>
 8011454:	b930      	cbnz	r0, 8011464 <pow+0x154>
 8011456:	b006      	add	sp, #24
 8011458:	ecbd 8b0a 	vpop	{d8-d12}
 801145c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011460:	f000 bfea 	b.w	8012438 <__math_invalid>
 8011464:	2801      	cmp	r0, #1
 8011466:	bf14      	ite	ne
 8011468:	2000      	movne	r0, #0
 801146a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801146e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011472:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011476:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801147a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801147e:	2b7f      	cmp	r3, #127	; 0x7f
 8011480:	d92d      	bls.n	80114de <pow+0x1ce>
 8011482:	4b67      	ldr	r3, [pc, #412]	; (8011620 <pow+0x310>)
 8011484:	2000      	movs	r0, #0
 8011486:	429c      	cmp	r4, r3
 8011488:	bf08      	it	eq
 801148a:	4286      	cmpeq	r6, r0
 801148c:	f43f af7d 	beq.w	801138a <pow+0x7a>
 8011490:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011494:	428a      	cmp	r2, r1
 8011496:	d80c      	bhi.n	80114b2 <pow+0x1a2>
 8011498:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801149c:	42b0      	cmp	r0, r6
 801149e:	41a3      	sbcs	r3, r4
 80114a0:	d204      	bcs.n	80114ac <pow+0x19c>
 80114a2:	ee31 0b00 	vadd.f64	d0, d1, d0
 80114a6:	e79c      	b.n	80113e2 <pow+0xd2>
 80114a8:	2000      	movs	r0, #0
 80114aa:	e7e4      	b.n	8011476 <pow+0x166>
 80114ac:	ee30 0b41 	vsub.f64	d0, d0, d1
 80114b0:	e797      	b.n	80113e2 <pow+0xd2>
 80114b2:	2e01      	cmp	r6, #1
 80114b4:	eb74 0303 	sbcs.w	r3, r4, r3
 80114b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80114bc:	bf34      	ite	cc
 80114be:	2301      	movcc	r3, #1
 80114c0:	2300      	movcs	r3, #0
 80114c2:	4295      	cmp	r5, r2
 80114c4:	bf8c      	ite	hi
 80114c6:	2500      	movhi	r5, #0
 80114c8:	2501      	movls	r5, #1
 80114ca:	42ab      	cmp	r3, r5
 80114cc:	f000 809d 	beq.w	801160a <pow+0x2fa>
 80114d0:	b006      	add	sp, #24
 80114d2:	ecbd 8b0a 	vpop	{d8-d12}
 80114d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114da:	f000 bf8d 	b.w	80123f8 <__math_oflow>
 80114de:	f1bc 0f00 	cmp.w	ip, #0
 80114e2:	d10b      	bne.n	80114fc <pow+0x1ec>
 80114e4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011618 <pow+0x308>
 80114e8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80114ec:	ec53 2b17 	vmov	r2, r3, d7
 80114f0:	ee17 6a10 	vmov	r6, s14
 80114f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80114f8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80114fc:	4b4c      	ldr	r3, [pc, #304]	; (8011630 <pow+0x320>)
 80114fe:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011502:	4423      	add	r3, r4
 8011504:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011508:	1519      	asrs	r1, r3, #20
 801150a:	0d1b      	lsrs	r3, r3, #20
 801150c:	051b      	lsls	r3, r3, #20
 801150e:	eba4 0903 	sub.w	r9, r4, r3
 8011512:	4b48      	ldr	r3, [pc, #288]	; (8011634 <pow+0x324>)
 8011514:	ee04 1a10 	vmov	s8, r1
 8011518:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801151c:	f1b6 0800 	subs.w	r8, r6, #0
 8011520:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011524:	ec49 8b15 	vmov	d5, r8, r9
 8011528:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801152c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011530:	ed93 7b00 	vldr	d7, [r3]
 8011534:	ed93 5b02 	vldr	d5, [r3, #8]
 8011538:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801153c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011540:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011544:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011548:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801154c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011550:	ed93 5b04 	vldr	d5, [r3, #16]
 8011554:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011558:	ee37 7b02 	vadd.f64	d7, d7, d2
 801155c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011560:	ed93 4b08 	vldr	d4, [r3, #32]
 8011564:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011568:	eeb0 9b40 	vmov.f64	d9, d0
 801156c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011570:	ed93 5b06 	vldr	d5, [r3, #24]
 8011574:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011578:	ee26 bb00 	vmul.f64	d11, d6, d0
 801157c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011580:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011584:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011588:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801158c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011590:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011594:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011598:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801159c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80115a0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80115a4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80115a8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80115ac:	eea0 5b04 	vfma.f64	d5, d0, d4
 80115b0:	eeab ab05 	vfma.f64	d10, d11, d5
 80115b4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80115b8:	ee21 7b06 	vmul.f64	d7, d1, d6
 80115bc:	ee17 3a90 	vmov	r3, s15
 80115c0:	eeb0 5b47 	vmov.f64	d5, d7
 80115c4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80115c8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80115cc:	18b2      	adds	r2, r6, r2
 80115ce:	2a3e      	cmp	r2, #62	; 0x3e
 80115d0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80115d4:	ee38 8b46 	vsub.f64	d8, d8, d6
 80115d8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80115dc:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80115e0:	d92b      	bls.n	801163a <pow+0x32a>
 80115e2:	2a00      	cmp	r2, #0
 80115e4:	da0b      	bge.n	80115fe <pow+0x2ee>
 80115e6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80115ea:	ee37 0b00 	vadd.f64	d0, d7, d0
 80115ee:	2800      	cmp	r0, #0
 80115f0:	f43f aef7 	beq.w	80113e2 <pow+0xd2>
 80115f4:	eeb1 0b40 	vneg.f64	d0, d0
 80115f8:	e6f3      	b.n	80113e2 <pow+0xd2>
 80115fa:	2000      	movs	r0, #0
 80115fc:	e77e      	b.n	80114fc <pow+0x1ec>
 80115fe:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011602:	d919      	bls.n	8011638 <pow+0x328>
 8011604:	2b00      	cmp	r3, #0
 8011606:	f6bf af63 	bge.w	80114d0 <pow+0x1c0>
 801160a:	b006      	add	sp, #24
 801160c:	ecbd 8b0a 	vpop	{d8-d12}
 8011610:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011614:	f000 bee8 	b.w	80123e8 <__math_uflow>
 8011618:	00000000 	.word	0x00000000
 801161c:	43300000 	.word	0x43300000
 8011620:	3ff00000 	.word	0x3ff00000
 8011624:	fff00000 	.word	0xfff00000
 8011628:	ffe00000 	.word	0xffe00000
 801162c:	7fe00000 	.word	0x7fe00000
 8011630:	c0196aab 	.word	0xc0196aab
 8011634:	08015338 	.word	0x08015338
 8011638:	2600      	movs	r6, #0
 801163a:	495d      	ldr	r1, [pc, #372]	; (80117b0 <pow+0x4a0>)
 801163c:	ed91 4b02 	vldr	d4, [r1, #8]
 8011640:	ed91 3b00 	vldr	d3, [r1]
 8011644:	eeb0 6b44 	vmov.f64	d6, d4
 8011648:	eea7 6b03 	vfma.f64	d6, d7, d3
 801164c:	ee16 5a10 	vmov	r5, s12
 8011650:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011654:	ed91 4b04 	vldr	d4, [r1, #16]
 8011658:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801165c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011660:	eeb0 0b47 	vmov.f64	d0, d7
 8011664:	ed91 7b06 	vldr	d7, [r1, #24]
 8011668:	18dc      	adds	r4, r3, r3
 801166a:	f104 030f 	add.w	r3, r4, #15
 801166e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011672:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011676:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801167a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801167e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011682:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011686:	ed91 5b08 	vldr	d5, [r1, #32]
 801168a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801168e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011692:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011696:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801169a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801169e:	ee26 6b06 	vmul.f64	d6, d6, d6
 80116a2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80116a6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80116aa:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80116ae:	eea0 5b04 	vfma.f64	d5, d0, d4
 80116b2:	1940      	adds	r0, r0, r5
 80116b4:	2700      	movs	r7, #0
 80116b6:	eb17 020c 	adds.w	r2, r7, ip
 80116ba:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80116be:	eea6 7b05 	vfma.f64	d7, d6, d5
 80116c2:	2e00      	cmp	r6, #0
 80116c4:	d15f      	bne.n	8011786 <pow+0x476>
 80116c6:	42bd      	cmp	r5, r7
 80116c8:	db13      	blt.n	80116f2 <pow+0x3e2>
 80116ca:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80116ce:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80116d2:	4610      	mov	r0, r2
 80116d4:	ec41 0b10 	vmov	d0, r0, r1
 80116d8:	eea7 0b00 	vfma.f64	d0, d7, d0
 80116dc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011798 <pow+0x488>
 80116e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80116e4:	b006      	add	sp, #24
 80116e6:	ecbd 8b0a 	vpop	{d8-d12}
 80116ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116ee:	f000 bebb 	b.w	8012468 <__math_check_oflow>
 80116f2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80116f6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80116fa:	4610      	mov	r0, r2
 80116fc:	ec41 0b15 	vmov	d5, r0, r1
 8011700:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011704:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011708:	ee35 7b06 	vadd.f64	d7, d5, d6
 801170c:	eeb0 3bc7 	vabs.f64	d3, d7
 8011710:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8011714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011718:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80117a0 <pow+0x490>
 801171c:	d52a      	bpl.n	8011774 <pow+0x464>
 801171e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011722:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801172e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8011732:	bf48      	it	mi
 8011734:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011738:	ee37 3b04 	vadd.f64	d3, d7, d4
 801173c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011740:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011744:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011748:	ee37 7b03 	vadd.f64	d7, d7, d3
 801174c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011750:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011758:	d104      	bne.n	8011764 <pow+0x454>
 801175a:	4632      	mov	r2, r6
 801175c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011760:	ec43 2b17 	vmov	d7, r2, r3
 8011764:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011768:	ed9d 6b02 	vldr	d6, [sp, #8]
 801176c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011770:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011774:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011778:	b006      	add	sp, #24
 801177a:	ecbd 8b0a 	vpop	{d8-d12}
 801177e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011782:	f000 be68 	b.w	8012456 <__math_check_uflow>
 8011786:	ec43 2b10 	vmov	d0, r2, r3
 801178a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801178e:	e628      	b.n	80113e2 <pow+0xd2>
 8011790:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80117a8 <pow+0x498>
 8011794:	e625      	b.n	80113e2 <pow+0xd2>
 8011796:	bf00      	nop
 8011798:	00000000 	.word	0x00000000
 801179c:	7f000000 	.word	0x7f000000
 80117a0:	00000000 	.word	0x00000000
 80117a4:	00100000 	.word	0x00100000
	...
 80117b0:	08016520 	.word	0x08016520
 80117b4:	00000000 	.word	0x00000000

080117b8 <cos>:
 80117b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117ba:	eeb0 7b40 	vmov.f64	d7, d0
 80117be:	ee17 3a90 	vmov	r3, s15
 80117c2:	4a21      	ldr	r2, [pc, #132]	; (8011848 <cos+0x90>)
 80117c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117c8:	4293      	cmp	r3, r2
 80117ca:	dc06      	bgt.n	80117da <cos+0x22>
 80117cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011840 <cos+0x88>
 80117d0:	b005      	add	sp, #20
 80117d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80117d6:	f000 ba8f 	b.w	8011cf8 <__kernel_cos>
 80117da:	4a1c      	ldr	r2, [pc, #112]	; (801184c <cos+0x94>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	dd04      	ble.n	80117ea <cos+0x32>
 80117e0:	ee30 0b40 	vsub.f64	d0, d0, d0
 80117e4:	b005      	add	sp, #20
 80117e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80117ea:	4668      	mov	r0, sp
 80117ec:	f000 f89c 	bl	8011928 <__ieee754_rem_pio2>
 80117f0:	f000 0003 	and.w	r0, r0, #3
 80117f4:	2801      	cmp	r0, #1
 80117f6:	d009      	beq.n	801180c <cos+0x54>
 80117f8:	2802      	cmp	r0, #2
 80117fa:	d010      	beq.n	801181e <cos+0x66>
 80117fc:	b9b0      	cbnz	r0, 801182c <cos+0x74>
 80117fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011802:	ed9d 0b00 	vldr	d0, [sp]
 8011806:	f000 fa77 	bl	8011cf8 <__kernel_cos>
 801180a:	e7eb      	b.n	80117e4 <cos+0x2c>
 801180c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011810:	ed9d 0b00 	vldr	d0, [sp]
 8011814:	f000 fd74 	bl	8012300 <__kernel_sin>
 8011818:	eeb1 0b40 	vneg.f64	d0, d0
 801181c:	e7e2      	b.n	80117e4 <cos+0x2c>
 801181e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011822:	ed9d 0b00 	vldr	d0, [sp]
 8011826:	f000 fa67 	bl	8011cf8 <__kernel_cos>
 801182a:	e7f5      	b.n	8011818 <cos+0x60>
 801182c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011830:	ed9d 0b00 	vldr	d0, [sp]
 8011834:	2001      	movs	r0, #1
 8011836:	f000 fd63 	bl	8012300 <__kernel_sin>
 801183a:	e7d3      	b.n	80117e4 <cos+0x2c>
 801183c:	f3af 8000 	nop.w
	...
 8011848:	3fe921fb 	.word	0x3fe921fb
 801184c:	7fefffff 	.word	0x7fefffff

08011850 <sin>:
 8011850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011852:	eeb0 7b40 	vmov.f64	d7, d0
 8011856:	ee17 3a90 	vmov	r3, s15
 801185a:	4a21      	ldr	r2, [pc, #132]	; (80118e0 <sin+0x90>)
 801185c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011860:	4293      	cmp	r3, r2
 8011862:	dc07      	bgt.n	8011874 <sin+0x24>
 8011864:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80118d8 <sin+0x88>
 8011868:	2000      	movs	r0, #0
 801186a:	b005      	add	sp, #20
 801186c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011870:	f000 bd46 	b.w	8012300 <__kernel_sin>
 8011874:	4a1b      	ldr	r2, [pc, #108]	; (80118e4 <sin+0x94>)
 8011876:	4293      	cmp	r3, r2
 8011878:	dd04      	ble.n	8011884 <sin+0x34>
 801187a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801187e:	b005      	add	sp, #20
 8011880:	f85d fb04 	ldr.w	pc, [sp], #4
 8011884:	4668      	mov	r0, sp
 8011886:	f000 f84f 	bl	8011928 <__ieee754_rem_pio2>
 801188a:	f000 0003 	and.w	r0, r0, #3
 801188e:	2801      	cmp	r0, #1
 8011890:	d00a      	beq.n	80118a8 <sin+0x58>
 8011892:	2802      	cmp	r0, #2
 8011894:	d00f      	beq.n	80118b6 <sin+0x66>
 8011896:	b9c0      	cbnz	r0, 80118ca <sin+0x7a>
 8011898:	ed9d 1b02 	vldr	d1, [sp, #8]
 801189c:	ed9d 0b00 	vldr	d0, [sp]
 80118a0:	2001      	movs	r0, #1
 80118a2:	f000 fd2d 	bl	8012300 <__kernel_sin>
 80118a6:	e7ea      	b.n	801187e <sin+0x2e>
 80118a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118ac:	ed9d 0b00 	vldr	d0, [sp]
 80118b0:	f000 fa22 	bl	8011cf8 <__kernel_cos>
 80118b4:	e7e3      	b.n	801187e <sin+0x2e>
 80118b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118ba:	ed9d 0b00 	vldr	d0, [sp]
 80118be:	2001      	movs	r0, #1
 80118c0:	f000 fd1e 	bl	8012300 <__kernel_sin>
 80118c4:	eeb1 0b40 	vneg.f64	d0, d0
 80118c8:	e7d9      	b.n	801187e <sin+0x2e>
 80118ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118ce:	ed9d 0b00 	vldr	d0, [sp]
 80118d2:	f000 fa11 	bl	8011cf8 <__kernel_cos>
 80118d6:	e7f5      	b.n	80118c4 <sin+0x74>
	...
 80118e0:	3fe921fb 	.word	0x3fe921fb
 80118e4:	7fefffff 	.word	0x7fefffff

080118e8 <atan2f>:
 80118e8:	f000 b962 	b.w	8011bb0 <__ieee754_atan2f>

080118ec <sqrtf>:
 80118ec:	b508      	push	{r3, lr}
 80118ee:	ed2d 8b02 	vpush	{d8}
 80118f2:	eeb0 8a40 	vmov.f32	s16, s0
 80118f6:	f000 f9f9 	bl	8011cec <__ieee754_sqrtf>
 80118fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80118fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011902:	d60c      	bvs.n	801191e <sqrtf+0x32>
 8011904:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011924 <sqrtf+0x38>
 8011908:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011910:	d505      	bpl.n	801191e <sqrtf+0x32>
 8011912:	f000 ffa3 	bl	801285c <__errno>
 8011916:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801191a:	2321      	movs	r3, #33	; 0x21
 801191c:	6003      	str	r3, [r0, #0]
 801191e:	ecbd 8b02 	vpop	{d8}
 8011922:	bd08      	pop	{r3, pc}
 8011924:	00000000 	.word	0x00000000

08011928 <__ieee754_rem_pio2>:
 8011928:	b570      	push	{r4, r5, r6, lr}
 801192a:	eeb0 7b40 	vmov.f64	d7, d0
 801192e:	ee17 5a90 	vmov	r5, s15
 8011932:	4b99      	ldr	r3, [pc, #612]	; (8011b98 <__ieee754_rem_pio2+0x270>)
 8011934:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011938:	429e      	cmp	r6, r3
 801193a:	b088      	sub	sp, #32
 801193c:	4604      	mov	r4, r0
 801193e:	dc07      	bgt.n	8011950 <__ieee754_rem_pio2+0x28>
 8011940:	2200      	movs	r2, #0
 8011942:	2300      	movs	r3, #0
 8011944:	ed84 0b00 	vstr	d0, [r4]
 8011948:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801194c:	2000      	movs	r0, #0
 801194e:	e01b      	b.n	8011988 <__ieee754_rem_pio2+0x60>
 8011950:	4b92      	ldr	r3, [pc, #584]	; (8011b9c <__ieee754_rem_pio2+0x274>)
 8011952:	429e      	cmp	r6, r3
 8011954:	dc3b      	bgt.n	80119ce <__ieee754_rem_pio2+0xa6>
 8011956:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801195a:	2d00      	cmp	r5, #0
 801195c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011b58 <__ieee754_rem_pio2+0x230>
 8011960:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8011964:	dd19      	ble.n	801199a <__ieee754_rem_pio2+0x72>
 8011966:	ee30 7b46 	vsub.f64	d7, d0, d6
 801196a:	429e      	cmp	r6, r3
 801196c:	d00e      	beq.n	801198c <__ieee754_rem_pio2+0x64>
 801196e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011b60 <__ieee754_rem_pio2+0x238>
 8011972:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011976:	ee37 7b45 	vsub.f64	d7, d7, d5
 801197a:	ed84 5b00 	vstr	d5, [r4]
 801197e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011982:	ed84 7b02 	vstr	d7, [r4, #8]
 8011986:	2001      	movs	r0, #1
 8011988:	b008      	add	sp, #32
 801198a:	bd70      	pop	{r4, r5, r6, pc}
 801198c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011b68 <__ieee754_rem_pio2+0x240>
 8011990:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011994:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011b70 <__ieee754_rem_pio2+0x248>
 8011998:	e7eb      	b.n	8011972 <__ieee754_rem_pio2+0x4a>
 801199a:	429e      	cmp	r6, r3
 801199c:	ee30 7b06 	vadd.f64	d7, d0, d6
 80119a0:	d00e      	beq.n	80119c0 <__ieee754_rem_pio2+0x98>
 80119a2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011b60 <__ieee754_rem_pio2+0x238>
 80119a6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80119aa:	ee37 7b45 	vsub.f64	d7, d7, d5
 80119ae:	ed84 5b00 	vstr	d5, [r4]
 80119b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80119b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80119be:	e7e3      	b.n	8011988 <__ieee754_rem_pio2+0x60>
 80119c0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011b68 <__ieee754_rem_pio2+0x240>
 80119c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80119c8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011b70 <__ieee754_rem_pio2+0x248>
 80119cc:	e7eb      	b.n	80119a6 <__ieee754_rem_pio2+0x7e>
 80119ce:	4b74      	ldr	r3, [pc, #464]	; (8011ba0 <__ieee754_rem_pio2+0x278>)
 80119d0:	429e      	cmp	r6, r3
 80119d2:	dc70      	bgt.n	8011ab6 <__ieee754_rem_pio2+0x18e>
 80119d4:	f000 fd5c 	bl	8012490 <fabs>
 80119d8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80119dc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011b78 <__ieee754_rem_pio2+0x250>
 80119e0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80119e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80119e8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80119ec:	ee17 0a90 	vmov	r0, s15
 80119f0:	eeb1 4b45 	vneg.f64	d4, d5
 80119f4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011b58 <__ieee754_rem_pio2+0x230>
 80119f8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80119fc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011b60 <__ieee754_rem_pio2+0x238>
 8011a00:	281f      	cmp	r0, #31
 8011a02:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011a06:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011a0a:	dc08      	bgt.n	8011a1e <__ieee754_rem_pio2+0xf6>
 8011a0c:	4b65      	ldr	r3, [pc, #404]	; (8011ba4 <__ieee754_rem_pio2+0x27c>)
 8011a0e:	1e42      	subs	r2, r0, #1
 8011a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a14:	42b3      	cmp	r3, r6
 8011a16:	d002      	beq.n	8011a1e <__ieee754_rem_pio2+0xf6>
 8011a18:	ed84 6b00 	vstr	d6, [r4]
 8011a1c:	e026      	b.n	8011a6c <__ieee754_rem_pio2+0x144>
 8011a1e:	ee16 3a90 	vmov	r3, s13
 8011a22:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011a26:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011a2a:	2b10      	cmp	r3, #16
 8011a2c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011a30:	ddf2      	ble.n	8011a18 <__ieee754_rem_pio2+0xf0>
 8011a32:	eeb0 6b40 	vmov.f64	d6, d0
 8011a36:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011b68 <__ieee754_rem_pio2+0x240>
 8011a3a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011b70 <__ieee754_rem_pio2+0x248>
 8011a3e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8011a42:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011a46:	eea4 0b07 	vfma.f64	d0, d4, d7
 8011a4a:	eeb0 7b40 	vmov.f64	d7, d0
 8011a4e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8011a52:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011a56:	ee13 3a90 	vmov	r3, s7
 8011a5a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011a5e:	1ad3      	subs	r3, r2, r3
 8011a60:	2b31      	cmp	r3, #49	; 0x31
 8011a62:	dc17      	bgt.n	8011a94 <__ieee754_rem_pio2+0x16c>
 8011a64:	eeb0 0b46 	vmov.f64	d0, d6
 8011a68:	ed84 3b00 	vstr	d3, [r4]
 8011a6c:	ed94 6b00 	vldr	d6, [r4]
 8011a70:	2d00      	cmp	r5, #0
 8011a72:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011a76:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011a7a:	ed84 0b02 	vstr	d0, [r4, #8]
 8011a7e:	da83      	bge.n	8011988 <__ieee754_rem_pio2+0x60>
 8011a80:	eeb1 6b46 	vneg.f64	d6, d6
 8011a84:	eeb1 0b40 	vneg.f64	d0, d0
 8011a88:	ed84 6b00 	vstr	d6, [r4]
 8011a8c:	ed84 0b02 	vstr	d0, [r4, #8]
 8011a90:	4240      	negs	r0, r0
 8011a92:	e779      	b.n	8011988 <__ieee754_rem_pio2+0x60>
 8011a94:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8011b80 <__ieee754_rem_pio2+0x258>
 8011a98:	eeb0 0b46 	vmov.f64	d0, d6
 8011a9c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011aa0:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011aa4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8011b88 <__ieee754_rem_pio2+0x260>
 8011aa8:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011aac:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011ab0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011ab4:	e7b0      	b.n	8011a18 <__ieee754_rem_pio2+0xf0>
 8011ab6:	4b3c      	ldr	r3, [pc, #240]	; (8011ba8 <__ieee754_rem_pio2+0x280>)
 8011ab8:	429e      	cmp	r6, r3
 8011aba:	dd06      	ble.n	8011aca <__ieee754_rem_pio2+0x1a2>
 8011abc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011ac0:	ed80 7b02 	vstr	d7, [r0, #8]
 8011ac4:	ed80 7b00 	vstr	d7, [r0]
 8011ac8:	e740      	b.n	801194c <__ieee754_rem_pio2+0x24>
 8011aca:	1532      	asrs	r2, r6, #20
 8011acc:	ee10 0a10 	vmov	r0, s0
 8011ad0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011ad4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011ad8:	ec41 0b17 	vmov	d7, r0, r1
 8011adc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011ae0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011b90 <__ieee754_rem_pio2+0x268>
 8011ae4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011ae8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011aec:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011af0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011af4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011af8:	a902      	add	r1, sp, #8
 8011afa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011afe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011b02:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011b06:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011b0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011b0e:	2603      	movs	r6, #3
 8011b10:	4608      	mov	r0, r1
 8011b12:	ed91 7b04 	vldr	d7, [r1, #16]
 8011b16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b1e:	4633      	mov	r3, r6
 8011b20:	f1a1 0108 	sub.w	r1, r1, #8
 8011b24:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011b28:	d0f3      	beq.n	8011b12 <__ieee754_rem_pio2+0x1ea>
 8011b2a:	4920      	ldr	r1, [pc, #128]	; (8011bac <__ieee754_rem_pio2+0x284>)
 8011b2c:	9101      	str	r1, [sp, #4]
 8011b2e:	2102      	movs	r1, #2
 8011b30:	9100      	str	r1, [sp, #0]
 8011b32:	4621      	mov	r1, r4
 8011b34:	f000 f94c 	bl	8011dd0 <__kernel_rem_pio2>
 8011b38:	2d00      	cmp	r5, #0
 8011b3a:	f6bf af25 	bge.w	8011988 <__ieee754_rem_pio2+0x60>
 8011b3e:	ed94 7b00 	vldr	d7, [r4]
 8011b42:	eeb1 7b47 	vneg.f64	d7, d7
 8011b46:	ed84 7b00 	vstr	d7, [r4]
 8011b4a:	ed94 7b02 	vldr	d7, [r4, #8]
 8011b4e:	eeb1 7b47 	vneg.f64	d7, d7
 8011b52:	ed84 7b02 	vstr	d7, [r4, #8]
 8011b56:	e79b      	b.n	8011a90 <__ieee754_rem_pio2+0x168>
 8011b58:	54400000 	.word	0x54400000
 8011b5c:	3ff921fb 	.word	0x3ff921fb
 8011b60:	1a626331 	.word	0x1a626331
 8011b64:	3dd0b461 	.word	0x3dd0b461
 8011b68:	1a600000 	.word	0x1a600000
 8011b6c:	3dd0b461 	.word	0x3dd0b461
 8011b70:	2e037073 	.word	0x2e037073
 8011b74:	3ba3198a 	.word	0x3ba3198a
 8011b78:	6dc9c883 	.word	0x6dc9c883
 8011b7c:	3fe45f30 	.word	0x3fe45f30
 8011b80:	2e000000 	.word	0x2e000000
 8011b84:	3ba3198a 	.word	0x3ba3198a
 8011b88:	252049c1 	.word	0x252049c1
 8011b8c:	397b839a 	.word	0x397b839a
 8011b90:	00000000 	.word	0x00000000
 8011b94:	41700000 	.word	0x41700000
 8011b98:	3fe921fb 	.word	0x3fe921fb
 8011b9c:	4002d97b 	.word	0x4002d97b
 8011ba0:	413921fb 	.word	0x413921fb
 8011ba4:	08016380 	.word	0x08016380
 8011ba8:	7fefffff 	.word	0x7fefffff
 8011bac:	08016400 	.word	0x08016400

08011bb0 <__ieee754_atan2f>:
 8011bb0:	ee10 2a90 	vmov	r2, s1
 8011bb4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011bb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011bbc:	b510      	push	{r4, lr}
 8011bbe:	eef0 7a40 	vmov.f32	s15, s0
 8011bc2:	dc06      	bgt.n	8011bd2 <__ieee754_atan2f+0x22>
 8011bc4:	ee10 0a10 	vmov	r0, s0
 8011bc8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011bcc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011bd0:	dd04      	ble.n	8011bdc <__ieee754_atan2f+0x2c>
 8011bd2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8011bda:	bd10      	pop	{r4, pc}
 8011bdc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011be0:	d103      	bne.n	8011bea <__ieee754_atan2f+0x3a>
 8011be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011be6:	f000 bd5d 	b.w	80126a4 <atanf>
 8011bea:	1794      	asrs	r4, r2, #30
 8011bec:	f004 0402 	and.w	r4, r4, #2
 8011bf0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011bf4:	b93b      	cbnz	r3, 8011c06 <__ieee754_atan2f+0x56>
 8011bf6:	2c02      	cmp	r4, #2
 8011bf8:	d05c      	beq.n	8011cb4 <__ieee754_atan2f+0x104>
 8011bfa:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011cc8 <__ieee754_atan2f+0x118>
 8011bfe:	2c03      	cmp	r4, #3
 8011c00:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8011c04:	e7e7      	b.n	8011bd6 <__ieee754_atan2f+0x26>
 8011c06:	b939      	cbnz	r1, 8011c18 <__ieee754_atan2f+0x68>
 8011c08:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011ccc <__ieee754_atan2f+0x11c>
 8011c0c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8011cd0 <__ieee754_atan2f+0x120>
 8011c10:	2800      	cmp	r0, #0
 8011c12:	fe67 7a80 	vselge.f32	s15, s15, s0
 8011c16:	e7de      	b.n	8011bd6 <__ieee754_atan2f+0x26>
 8011c18:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011c1c:	d110      	bne.n	8011c40 <__ieee754_atan2f+0x90>
 8011c1e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011c22:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011c26:	d107      	bne.n	8011c38 <__ieee754_atan2f+0x88>
 8011c28:	2c02      	cmp	r4, #2
 8011c2a:	d846      	bhi.n	8011cba <__ieee754_atan2f+0x10a>
 8011c2c:	4b29      	ldr	r3, [pc, #164]	; (8011cd4 <__ieee754_atan2f+0x124>)
 8011c2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011c32:	edd4 7a00 	vldr	s15, [r4]
 8011c36:	e7ce      	b.n	8011bd6 <__ieee754_atan2f+0x26>
 8011c38:	2c02      	cmp	r4, #2
 8011c3a:	d841      	bhi.n	8011cc0 <__ieee754_atan2f+0x110>
 8011c3c:	4b26      	ldr	r3, [pc, #152]	; (8011cd8 <__ieee754_atan2f+0x128>)
 8011c3e:	e7f6      	b.n	8011c2e <__ieee754_atan2f+0x7e>
 8011c40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011c44:	d0e0      	beq.n	8011c08 <__ieee754_atan2f+0x58>
 8011c46:	1a5b      	subs	r3, r3, r1
 8011c48:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8011c4c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011c50:	da1a      	bge.n	8011c88 <__ieee754_atan2f+0xd8>
 8011c52:	2a00      	cmp	r2, #0
 8011c54:	da01      	bge.n	8011c5a <__ieee754_atan2f+0xaa>
 8011c56:	313c      	adds	r1, #60	; 0x3c
 8011c58:	db19      	blt.n	8011c8e <__ieee754_atan2f+0xde>
 8011c5a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011c5e:	f000 fdf5 	bl	801284c <fabsf>
 8011c62:	f000 fd1f 	bl	80126a4 <atanf>
 8011c66:	eef0 7a40 	vmov.f32	s15, s0
 8011c6a:	2c01      	cmp	r4, #1
 8011c6c:	d012      	beq.n	8011c94 <__ieee754_atan2f+0xe4>
 8011c6e:	2c02      	cmp	r4, #2
 8011c70:	d017      	beq.n	8011ca2 <__ieee754_atan2f+0xf2>
 8011c72:	2c00      	cmp	r4, #0
 8011c74:	d0af      	beq.n	8011bd6 <__ieee754_atan2f+0x26>
 8011c76:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8011cdc <__ieee754_atan2f+0x12c>
 8011c7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011c7e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011ce0 <__ieee754_atan2f+0x130>
 8011c82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011c86:	e7a6      	b.n	8011bd6 <__ieee754_atan2f+0x26>
 8011c88:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011ccc <__ieee754_atan2f+0x11c>
 8011c8c:	e7ed      	b.n	8011c6a <__ieee754_atan2f+0xba>
 8011c8e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011ce4 <__ieee754_atan2f+0x134>
 8011c92:	e7ea      	b.n	8011c6a <__ieee754_atan2f+0xba>
 8011c94:	ee17 3a90 	vmov	r3, s15
 8011c98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011c9c:	ee07 3a90 	vmov	s15, r3
 8011ca0:	e799      	b.n	8011bd6 <__ieee754_atan2f+0x26>
 8011ca2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8011cdc <__ieee754_atan2f+0x12c>
 8011ca6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011caa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8011ce0 <__ieee754_atan2f+0x130>
 8011cae:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011cb2:	e790      	b.n	8011bd6 <__ieee754_atan2f+0x26>
 8011cb4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011ce0 <__ieee754_atan2f+0x130>
 8011cb8:	e78d      	b.n	8011bd6 <__ieee754_atan2f+0x26>
 8011cba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011ce8 <__ieee754_atan2f+0x138>
 8011cbe:	e78a      	b.n	8011bd6 <__ieee754_atan2f+0x26>
 8011cc0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011ce4 <__ieee754_atan2f+0x134>
 8011cc4:	e787      	b.n	8011bd6 <__ieee754_atan2f+0x26>
 8011cc6:	bf00      	nop
 8011cc8:	c0490fdb 	.word	0xc0490fdb
 8011ccc:	3fc90fdb 	.word	0x3fc90fdb
 8011cd0:	bfc90fdb 	.word	0xbfc90fdb
 8011cd4:	08016508 	.word	0x08016508
 8011cd8:	08016514 	.word	0x08016514
 8011cdc:	33bbbd2e 	.word	0x33bbbd2e
 8011ce0:	40490fdb 	.word	0x40490fdb
 8011ce4:	00000000 	.word	0x00000000
 8011ce8:	3f490fdb 	.word	0x3f490fdb

08011cec <__ieee754_sqrtf>:
 8011cec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011cf0:	4770      	bx	lr
 8011cf2:	0000      	movs	r0, r0
 8011cf4:	0000      	movs	r0, r0
	...

08011cf8 <__kernel_cos>:
 8011cf8:	ee10 1a90 	vmov	r1, s1
 8011cfc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011d00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011d04:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011d08:	da05      	bge.n	8011d16 <__kernel_cos+0x1e>
 8011d0a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011d0e:	ee17 3a90 	vmov	r3, s15
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d03d      	beq.n	8011d92 <__kernel_cos+0x9a>
 8011d16:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011d1a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011d98 <__kernel_cos+0xa0>
 8011d1e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011da0 <__kernel_cos+0xa8>
 8011d22:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011d26:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011da8 <__kernel_cos+0xb0>
 8011d2a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011d2e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011db0 <__kernel_cos+0xb8>
 8011d32:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011d36:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011db8 <__kernel_cos+0xc0>
 8011d3a:	4b23      	ldr	r3, [pc, #140]	; (8011dc8 <__kernel_cos+0xd0>)
 8011d3c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011d40:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011dc0 <__kernel_cos+0xc8>
 8011d44:	4299      	cmp	r1, r3
 8011d46:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011d4a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011d4e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011d52:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011d56:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8011d5a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011d5e:	dc04      	bgt.n	8011d6a <__kernel_cos+0x72>
 8011d60:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011d64:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011d68:	4770      	bx	lr
 8011d6a:	4b18      	ldr	r3, [pc, #96]	; (8011dcc <__kernel_cos+0xd4>)
 8011d6c:	4299      	cmp	r1, r3
 8011d6e:	dc0d      	bgt.n	8011d8c <__kernel_cos+0x94>
 8011d70:	2200      	movs	r2, #0
 8011d72:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011d76:	ec43 2b15 	vmov	d5, r2, r3
 8011d7a:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011d7e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011d82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d86:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011d8a:	4770      	bx	lr
 8011d8c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011d90:	e7f3      	b.n	8011d7a <__kernel_cos+0x82>
 8011d92:	eeb0 0b44 	vmov.f64	d0, d4
 8011d96:	4770      	bx	lr
 8011d98:	be8838d4 	.word	0xbe8838d4
 8011d9c:	bda8fae9 	.word	0xbda8fae9
 8011da0:	bdb4b1c4 	.word	0xbdb4b1c4
 8011da4:	3e21ee9e 	.word	0x3e21ee9e
 8011da8:	809c52ad 	.word	0x809c52ad
 8011dac:	be927e4f 	.word	0xbe927e4f
 8011db0:	19cb1590 	.word	0x19cb1590
 8011db4:	3efa01a0 	.word	0x3efa01a0
 8011db8:	16c15177 	.word	0x16c15177
 8011dbc:	bf56c16c 	.word	0xbf56c16c
 8011dc0:	5555554c 	.word	0x5555554c
 8011dc4:	3fa55555 	.word	0x3fa55555
 8011dc8:	3fd33332 	.word	0x3fd33332
 8011dcc:	3fe90000 	.word	0x3fe90000

08011dd0 <__kernel_rem_pio2>:
 8011dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd4:	ed2d 8b06 	vpush	{d8-d10}
 8011dd8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8011ddc:	460f      	mov	r7, r1
 8011dde:	9002      	str	r0, [sp, #8]
 8011de0:	49c5      	ldr	r1, [pc, #788]	; (80120f8 <__kernel_rem_pio2+0x328>)
 8011de2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011de4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011de8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8011dec:	9301      	str	r3, [sp, #4]
 8011dee:	f112 0f14 	cmn.w	r2, #20
 8011df2:	bfa8      	it	ge
 8011df4:	2018      	movge	r0, #24
 8011df6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8011dfa:	bfb8      	it	lt
 8011dfc:	2000      	movlt	r0, #0
 8011dfe:	f06f 0417 	mvn.w	r4, #23
 8011e02:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80120e0 <__kernel_rem_pio2+0x310>
 8011e06:	bfa4      	itt	ge
 8011e08:	f1a2 0a03 	subge.w	sl, r2, #3
 8011e0c:	fb9a f0f0 	sdivge	r0, sl, r0
 8011e10:	fb00 4404 	mla	r4, r0, r4, r4
 8011e14:	1a46      	subs	r6, r0, r1
 8011e16:	4414      	add	r4, r2
 8011e18:	eb09 0c01 	add.w	ip, r9, r1
 8011e1c:	ad1a      	add	r5, sp, #104	; 0x68
 8011e1e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011e22:	2200      	movs	r2, #0
 8011e24:	4562      	cmp	r2, ip
 8011e26:	dd10      	ble.n	8011e4a <__kernel_rem_pio2+0x7a>
 8011e28:	9a01      	ldr	r2, [sp, #4]
 8011e2a:	ab1a      	add	r3, sp, #104	; 0x68
 8011e2c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011e30:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011e34:	f04f 0c00 	mov.w	ip, #0
 8011e38:	45cc      	cmp	ip, r9
 8011e3a:	dc26      	bgt.n	8011e8a <__kernel_rem_pio2+0xba>
 8011e3c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80120e0 <__kernel_rem_pio2+0x310>
 8011e40:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011e44:	4616      	mov	r6, r2
 8011e46:	2500      	movs	r5, #0
 8011e48:	e015      	b.n	8011e76 <__kernel_rem_pio2+0xa6>
 8011e4a:	42d6      	cmn	r6, r2
 8011e4c:	d409      	bmi.n	8011e62 <__kernel_rem_pio2+0x92>
 8011e4e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011e52:	ee07 3a90 	vmov	s15, r3
 8011e56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011e5a:	eca5 7b02 	vstmia	r5!, {d7}
 8011e5e:	3201      	adds	r2, #1
 8011e60:	e7e0      	b.n	8011e24 <__kernel_rem_pio2+0x54>
 8011e62:	eeb0 7b46 	vmov.f64	d7, d6
 8011e66:	e7f8      	b.n	8011e5a <__kernel_rem_pio2+0x8a>
 8011e68:	ecb8 5b02 	vldmia	r8!, {d5}
 8011e6c:	ed96 6b00 	vldr	d6, [r6]
 8011e70:	3501      	adds	r5, #1
 8011e72:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011e76:	428d      	cmp	r5, r1
 8011e78:	f1a6 0608 	sub.w	r6, r6, #8
 8011e7c:	ddf4      	ble.n	8011e68 <__kernel_rem_pio2+0x98>
 8011e7e:	ecaa 7b02 	vstmia	sl!, {d7}
 8011e82:	f10c 0c01 	add.w	ip, ip, #1
 8011e86:	3208      	adds	r2, #8
 8011e88:	e7d6      	b.n	8011e38 <__kernel_rem_pio2+0x68>
 8011e8a:	ab06      	add	r3, sp, #24
 8011e8c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80120e8 <__kernel_rem_pio2+0x318>
 8011e90:	ed9f ab97 	vldr	d10, [pc, #604]	; 80120f0 <__kernel_rem_pio2+0x320>
 8011e94:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011e98:	9303      	str	r3, [sp, #12]
 8011e9a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8011e9e:	464d      	mov	r5, r9
 8011ea0:	00eb      	lsls	r3, r5, #3
 8011ea2:	9304      	str	r3, [sp, #16]
 8011ea4:	ab92      	add	r3, sp, #584	; 0x248
 8011ea6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011eaa:	f10d 0b18 	add.w	fp, sp, #24
 8011eae:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011eb0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8011eb4:	465e      	mov	r6, fp
 8011eb6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011eba:	4628      	mov	r0, r5
 8011ebc:	2800      	cmp	r0, #0
 8011ebe:	f1a2 0208 	sub.w	r2, r2, #8
 8011ec2:	dc4c      	bgt.n	8011f5e <__kernel_rem_pio2+0x18e>
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	9105      	str	r1, [sp, #20]
 8011ec8:	f000 fb62 	bl	8012590 <scalbn>
 8011ecc:	eeb0 8b40 	vmov.f64	d8, d0
 8011ed0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011ed4:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011ed8:	f000 fae6 	bl	80124a8 <floor>
 8011edc:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011ee0:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011ee4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011ee8:	2c00      	cmp	r4, #0
 8011eea:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011eee:	ee17 8a90 	vmov	r8, s15
 8011ef2:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011ef6:	9905      	ldr	r1, [sp, #20]
 8011ef8:	dd43      	ble.n	8011f82 <__kernel_rem_pio2+0x1b2>
 8011efa:	1e68      	subs	r0, r5, #1
 8011efc:	ab06      	add	r3, sp, #24
 8011efe:	f1c4 0c18 	rsb	ip, r4, #24
 8011f02:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011f06:	fa46 f20c 	asr.w	r2, r6, ip
 8011f0a:	4490      	add	r8, r2
 8011f0c:	fa02 f20c 	lsl.w	r2, r2, ip
 8011f10:	1ab6      	subs	r6, r6, r2
 8011f12:	f1c4 0217 	rsb	r2, r4, #23
 8011f16:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011f1a:	4116      	asrs	r6, r2
 8011f1c:	2e00      	cmp	r6, #0
 8011f1e:	dd3f      	ble.n	8011fa0 <__kernel_rem_pio2+0x1d0>
 8011f20:	f04f 0c00 	mov.w	ip, #0
 8011f24:	f108 0801 	add.w	r8, r8, #1
 8011f28:	4660      	mov	r0, ip
 8011f2a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011f2e:	4565      	cmp	r5, ip
 8011f30:	dc6e      	bgt.n	8012010 <__kernel_rem_pio2+0x240>
 8011f32:	2c00      	cmp	r4, #0
 8011f34:	dd04      	ble.n	8011f40 <__kernel_rem_pio2+0x170>
 8011f36:	2c01      	cmp	r4, #1
 8011f38:	d07f      	beq.n	801203a <__kernel_rem_pio2+0x26a>
 8011f3a:	2c02      	cmp	r4, #2
 8011f3c:	f000 8087 	beq.w	801204e <__kernel_rem_pio2+0x27e>
 8011f40:	2e02      	cmp	r6, #2
 8011f42:	d12d      	bne.n	8011fa0 <__kernel_rem_pio2+0x1d0>
 8011f44:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011f48:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011f4c:	b340      	cbz	r0, 8011fa0 <__kernel_rem_pio2+0x1d0>
 8011f4e:	4620      	mov	r0, r4
 8011f50:	9105      	str	r1, [sp, #20]
 8011f52:	f000 fb1d 	bl	8012590 <scalbn>
 8011f56:	9905      	ldr	r1, [sp, #20]
 8011f58:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011f5c:	e020      	b.n	8011fa0 <__kernel_rem_pio2+0x1d0>
 8011f5e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011f62:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011f66:	3801      	subs	r0, #1
 8011f68:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011f6c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011f70:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011f74:	eca6 0a01 	vstmia	r6!, {s0}
 8011f78:	ed92 0b00 	vldr	d0, [r2]
 8011f7c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011f80:	e79c      	b.n	8011ebc <__kernel_rem_pio2+0xec>
 8011f82:	d105      	bne.n	8011f90 <__kernel_rem_pio2+0x1c0>
 8011f84:	1e6a      	subs	r2, r5, #1
 8011f86:	ab06      	add	r3, sp, #24
 8011f88:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011f8c:	15f6      	asrs	r6, r6, #23
 8011f8e:	e7c5      	b.n	8011f1c <__kernel_rem_pio2+0x14c>
 8011f90:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011f94:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f9c:	da36      	bge.n	801200c <__kernel_rem_pio2+0x23c>
 8011f9e:	2600      	movs	r6, #0
 8011fa0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa8:	f040 80aa 	bne.w	8012100 <__kernel_rem_pio2+0x330>
 8011fac:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8011fb0:	4658      	mov	r0, fp
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	4548      	cmp	r0, r9
 8011fb6:	da52      	bge.n	801205e <__kernel_rem_pio2+0x28e>
 8011fb8:	2a00      	cmp	r2, #0
 8011fba:	f000 8081 	beq.w	80120c0 <__kernel_rem_pio2+0x2f0>
 8011fbe:	ab06      	add	r3, sp, #24
 8011fc0:	3c18      	subs	r4, #24
 8011fc2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	f000 8087 	beq.w	80120da <__kernel_rem_pio2+0x30a>
 8011fcc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	f000 fadd 	bl	8012590 <scalbn>
 8011fd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011fda:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80120e8 <__kernel_rem_pio2+0x318>
 8011fde:	a96a      	add	r1, sp, #424	; 0x1a8
 8011fe0:	f103 0208 	add.w	r2, r3, #8
 8011fe4:	1888      	adds	r0, r1, r2
 8011fe6:	4659      	mov	r1, fp
 8011fe8:	2900      	cmp	r1, #0
 8011fea:	f280 80b7 	bge.w	801215c <__kernel_rem_pio2+0x38c>
 8011fee:	4659      	mov	r1, fp
 8011ff0:	2900      	cmp	r1, #0
 8011ff2:	f2c0 80d5 	blt.w	80121a0 <__kernel_rem_pio2+0x3d0>
 8011ff6:	a86a      	add	r0, sp, #424	; 0x1a8
 8011ff8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8011ffc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80120e0 <__kernel_rem_pio2+0x310>
 8012000:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80120fc <__kernel_rem_pio2+0x32c>
 8012004:	2400      	movs	r4, #0
 8012006:	ebab 0001 	sub.w	r0, fp, r1
 801200a:	e0be      	b.n	801218a <__kernel_rem_pio2+0x3ba>
 801200c:	2602      	movs	r6, #2
 801200e:	e787      	b.n	8011f20 <__kernel_rem_pio2+0x150>
 8012010:	f8db 2000 	ldr.w	r2, [fp]
 8012014:	b958      	cbnz	r0, 801202e <__kernel_rem_pio2+0x25e>
 8012016:	b122      	cbz	r2, 8012022 <__kernel_rem_pio2+0x252>
 8012018:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801201c:	f8cb 2000 	str.w	r2, [fp]
 8012020:	2201      	movs	r2, #1
 8012022:	f10c 0c01 	add.w	ip, ip, #1
 8012026:	f10b 0b04 	add.w	fp, fp, #4
 801202a:	4610      	mov	r0, r2
 801202c:	e77f      	b.n	8011f2e <__kernel_rem_pio2+0x15e>
 801202e:	ebae 0202 	sub.w	r2, lr, r2
 8012032:	f8cb 2000 	str.w	r2, [fp]
 8012036:	4602      	mov	r2, r0
 8012038:	e7f3      	b.n	8012022 <__kernel_rem_pio2+0x252>
 801203a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801203e:	ab06      	add	r3, sp, #24
 8012040:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012044:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012048:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801204c:	e778      	b.n	8011f40 <__kernel_rem_pio2+0x170>
 801204e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8012052:	ab06      	add	r3, sp, #24
 8012054:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012058:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801205c:	e7f4      	b.n	8012048 <__kernel_rem_pio2+0x278>
 801205e:	ab06      	add	r3, sp, #24
 8012060:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012064:	3801      	subs	r0, #1
 8012066:	431a      	orrs	r2, r3
 8012068:	e7a4      	b.n	8011fb4 <__kernel_rem_pio2+0x1e4>
 801206a:	f10c 0c01 	add.w	ip, ip, #1
 801206e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8012072:	2800      	cmp	r0, #0
 8012074:	d0f9      	beq.n	801206a <__kernel_rem_pio2+0x29a>
 8012076:	9b04      	ldr	r3, [sp, #16]
 8012078:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801207c:	eb0d 0203 	add.w	r2, sp, r3
 8012080:	9b01      	ldr	r3, [sp, #4]
 8012082:	18e8      	adds	r0, r5, r3
 8012084:	ab1a      	add	r3, sp, #104	; 0x68
 8012086:	1c6e      	adds	r6, r5, #1
 8012088:	3a98      	subs	r2, #152	; 0x98
 801208a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801208e:	4465      	add	r5, ip
 8012090:	42b5      	cmp	r5, r6
 8012092:	f6ff af05 	blt.w	8011ea0 <__kernel_rem_pio2+0xd0>
 8012096:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801209a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801209e:	ee07 3a90 	vmov	s15, r3
 80120a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80120a6:	f04f 0c00 	mov.w	ip, #0
 80120aa:	eca0 7b02 	vstmia	r0!, {d7}
 80120ae:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80120e0 <__kernel_rem_pio2+0x310>
 80120b2:	4680      	mov	r8, r0
 80120b4:	458c      	cmp	ip, r1
 80120b6:	dd07      	ble.n	80120c8 <__kernel_rem_pio2+0x2f8>
 80120b8:	eca2 7b02 	vstmia	r2!, {d7}
 80120bc:	3601      	adds	r6, #1
 80120be:	e7e7      	b.n	8012090 <__kernel_rem_pio2+0x2c0>
 80120c0:	9a03      	ldr	r2, [sp, #12]
 80120c2:	f04f 0c01 	mov.w	ip, #1
 80120c6:	e7d2      	b.n	801206e <__kernel_rem_pio2+0x29e>
 80120c8:	ecbe 5b02 	vldmia	lr!, {d5}
 80120cc:	ed38 6b02 	vldmdb	r8!, {d6}
 80120d0:	f10c 0c01 	add.w	ip, ip, #1
 80120d4:	eea5 7b06 	vfma.f64	d7, d5, d6
 80120d8:	e7ec      	b.n	80120b4 <__kernel_rem_pio2+0x2e4>
 80120da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80120de:	e76e      	b.n	8011fbe <__kernel_rem_pio2+0x1ee>
	...
 80120ec:	3e700000 	.word	0x3e700000
 80120f0:	00000000 	.word	0x00000000
 80120f4:	41700000 	.word	0x41700000
 80120f8:	08016dd0 	.word	0x08016dd0
 80120fc:	08016d90 	.word	0x08016d90
 8012100:	4260      	negs	r0, r4
 8012102:	eeb0 0b48 	vmov.f64	d0, d8
 8012106:	f000 fa43 	bl	8012590 <scalbn>
 801210a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80122e8 <__kernel_rem_pio2+0x518>
 801210e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8012112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012116:	db18      	blt.n	801214a <__kernel_rem_pio2+0x37a>
 8012118:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80122f0 <__kernel_rem_pio2+0x520>
 801211c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012120:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012124:	aa06      	add	r2, sp, #24
 8012126:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801212a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801212e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012132:	f105 0b01 	add.w	fp, r5, #1
 8012136:	ee10 3a10 	vmov	r3, s0
 801213a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801213e:	ee17 3a10 	vmov	r3, s14
 8012142:	3418      	adds	r4, #24
 8012144:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8012148:	e740      	b.n	8011fcc <__kernel_rem_pio2+0x1fc>
 801214a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801214e:	aa06      	add	r2, sp, #24
 8012150:	ee10 3a10 	vmov	r3, s0
 8012154:	46ab      	mov	fp, r5
 8012156:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801215a:	e737      	b.n	8011fcc <__kernel_rem_pio2+0x1fc>
 801215c:	ac06      	add	r4, sp, #24
 801215e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8012162:	9401      	str	r4, [sp, #4]
 8012164:	ee07 4a90 	vmov	s15, r4
 8012168:	3901      	subs	r1, #1
 801216a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801216e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012172:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012176:	ed20 7b02 	vstmdb	r0!, {d7}
 801217a:	e735      	b.n	8011fe8 <__kernel_rem_pio2+0x218>
 801217c:	ecbc 5b02 	vldmia	ip!, {d5}
 8012180:	ecb5 6b02 	vldmia	r5!, {d6}
 8012184:	3401      	adds	r4, #1
 8012186:	eea5 7b06 	vfma.f64	d7, d5, d6
 801218a:	454c      	cmp	r4, r9
 801218c:	dc01      	bgt.n	8012192 <__kernel_rem_pio2+0x3c2>
 801218e:	4284      	cmp	r4, r0
 8012190:	ddf4      	ble.n	801217c <__kernel_rem_pio2+0x3ac>
 8012192:	ac42      	add	r4, sp, #264	; 0x108
 8012194:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8012198:	ed80 7b00 	vstr	d7, [r0]
 801219c:	3901      	subs	r1, #1
 801219e:	e727      	b.n	8011ff0 <__kernel_rem_pio2+0x220>
 80121a0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80121a2:	2902      	cmp	r1, #2
 80121a4:	dc0a      	bgt.n	80121bc <__kernel_rem_pio2+0x3ec>
 80121a6:	2900      	cmp	r1, #0
 80121a8:	dc2c      	bgt.n	8012204 <__kernel_rem_pio2+0x434>
 80121aa:	d045      	beq.n	8012238 <__kernel_rem_pio2+0x468>
 80121ac:	f008 0007 	and.w	r0, r8, #7
 80121b0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80121b4:	ecbd 8b06 	vpop	{d8-d10}
 80121b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121bc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80121be:	2a03      	cmp	r2, #3
 80121c0:	d1f4      	bne.n	80121ac <__kernel_rem_pio2+0x3dc>
 80121c2:	aa42      	add	r2, sp, #264	; 0x108
 80121c4:	4413      	add	r3, r2
 80121c6:	461a      	mov	r2, r3
 80121c8:	4619      	mov	r1, r3
 80121ca:	4658      	mov	r0, fp
 80121cc:	2800      	cmp	r0, #0
 80121ce:	f1a1 0108 	sub.w	r1, r1, #8
 80121d2:	dc54      	bgt.n	801227e <__kernel_rem_pio2+0x4ae>
 80121d4:	4659      	mov	r1, fp
 80121d6:	2901      	cmp	r1, #1
 80121d8:	f1a2 0208 	sub.w	r2, r2, #8
 80121dc:	dc5f      	bgt.n	801229e <__kernel_rem_pio2+0x4ce>
 80121de:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80122f8 <__kernel_rem_pio2+0x528>
 80121e2:	3308      	adds	r3, #8
 80121e4:	f1bb 0f01 	cmp.w	fp, #1
 80121e8:	dc69      	bgt.n	80122be <__kernel_rem_pio2+0x4ee>
 80121ea:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80121ee:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80121f2:	2e00      	cmp	r6, #0
 80121f4:	d16a      	bne.n	80122cc <__kernel_rem_pio2+0x4fc>
 80121f6:	ed87 5b00 	vstr	d5, [r7]
 80121fa:	ed87 6b02 	vstr	d6, [r7, #8]
 80121fe:	ed87 7b04 	vstr	d7, [r7, #16]
 8012202:	e7d3      	b.n	80121ac <__kernel_rem_pio2+0x3dc>
 8012204:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80122f8 <__kernel_rem_pio2+0x528>
 8012208:	ab42      	add	r3, sp, #264	; 0x108
 801220a:	441a      	add	r2, r3
 801220c:	465b      	mov	r3, fp
 801220e:	2b00      	cmp	r3, #0
 8012210:	da26      	bge.n	8012260 <__kernel_rem_pio2+0x490>
 8012212:	b35e      	cbz	r6, 801226c <__kernel_rem_pio2+0x49c>
 8012214:	eeb1 7b46 	vneg.f64	d7, d6
 8012218:	ed87 7b00 	vstr	d7, [r7]
 801221c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8012220:	aa44      	add	r2, sp, #272	; 0x110
 8012222:	2301      	movs	r3, #1
 8012224:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012228:	459b      	cmp	fp, r3
 801222a:	da22      	bge.n	8012272 <__kernel_rem_pio2+0x4a2>
 801222c:	b10e      	cbz	r6, 8012232 <__kernel_rem_pio2+0x462>
 801222e:	eeb1 7b47 	vneg.f64	d7, d7
 8012232:	ed87 7b02 	vstr	d7, [r7, #8]
 8012236:	e7b9      	b.n	80121ac <__kernel_rem_pio2+0x3dc>
 8012238:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80122f8 <__kernel_rem_pio2+0x528>
 801223c:	ab42      	add	r3, sp, #264	; 0x108
 801223e:	441a      	add	r2, r3
 8012240:	f1bb 0f00 	cmp.w	fp, #0
 8012244:	da05      	bge.n	8012252 <__kernel_rem_pio2+0x482>
 8012246:	b10e      	cbz	r6, 801224c <__kernel_rem_pio2+0x47c>
 8012248:	eeb1 7b47 	vneg.f64	d7, d7
 801224c:	ed87 7b00 	vstr	d7, [r7]
 8012250:	e7ac      	b.n	80121ac <__kernel_rem_pio2+0x3dc>
 8012252:	ed32 6b02 	vldmdb	r2!, {d6}
 8012256:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801225a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801225e:	e7ef      	b.n	8012240 <__kernel_rem_pio2+0x470>
 8012260:	ed32 7b02 	vldmdb	r2!, {d7}
 8012264:	3b01      	subs	r3, #1
 8012266:	ee36 6b07 	vadd.f64	d6, d6, d7
 801226a:	e7d0      	b.n	801220e <__kernel_rem_pio2+0x43e>
 801226c:	eeb0 7b46 	vmov.f64	d7, d6
 8012270:	e7d2      	b.n	8012218 <__kernel_rem_pio2+0x448>
 8012272:	ecb2 6b02 	vldmia	r2!, {d6}
 8012276:	3301      	adds	r3, #1
 8012278:	ee37 7b06 	vadd.f64	d7, d7, d6
 801227c:	e7d4      	b.n	8012228 <__kernel_rem_pio2+0x458>
 801227e:	ed91 7b00 	vldr	d7, [r1]
 8012282:	ed91 5b02 	vldr	d5, [r1, #8]
 8012286:	3801      	subs	r0, #1
 8012288:	ee37 6b05 	vadd.f64	d6, d7, d5
 801228c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012290:	ed81 6b00 	vstr	d6, [r1]
 8012294:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012298:	ed81 7b02 	vstr	d7, [r1, #8]
 801229c:	e796      	b.n	80121cc <__kernel_rem_pio2+0x3fc>
 801229e:	ed92 7b00 	vldr	d7, [r2]
 80122a2:	ed92 5b02 	vldr	d5, [r2, #8]
 80122a6:	3901      	subs	r1, #1
 80122a8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80122ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80122b0:	ed82 6b00 	vstr	d6, [r2]
 80122b4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80122b8:	ed82 7b02 	vstr	d7, [r2, #8]
 80122bc:	e78b      	b.n	80121d6 <__kernel_rem_pio2+0x406>
 80122be:	ed33 6b02 	vldmdb	r3!, {d6}
 80122c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80122c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80122ca:	e78b      	b.n	80121e4 <__kernel_rem_pio2+0x414>
 80122cc:	eeb1 5b45 	vneg.f64	d5, d5
 80122d0:	eeb1 6b46 	vneg.f64	d6, d6
 80122d4:	ed87 5b00 	vstr	d5, [r7]
 80122d8:	eeb1 7b47 	vneg.f64	d7, d7
 80122dc:	ed87 6b02 	vstr	d6, [r7, #8]
 80122e0:	e78d      	b.n	80121fe <__kernel_rem_pio2+0x42e>
 80122e2:	bf00      	nop
 80122e4:	f3af 8000 	nop.w
 80122e8:	00000000 	.word	0x00000000
 80122ec:	41700000 	.word	0x41700000
 80122f0:	00000000 	.word	0x00000000
 80122f4:	3e700000 	.word	0x3e700000
	...

08012300 <__kernel_sin>:
 8012300:	ee10 3a90 	vmov	r3, s1
 8012304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012308:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801230c:	da04      	bge.n	8012318 <__kernel_sin+0x18>
 801230e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8012312:	ee17 3a90 	vmov	r3, s15
 8012316:	b35b      	cbz	r3, 8012370 <__kernel_sin+0x70>
 8012318:	ee20 6b00 	vmul.f64	d6, d0, d0
 801231c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012320:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012378 <__kernel_sin+0x78>
 8012324:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012380 <__kernel_sin+0x80>
 8012328:	eea6 4b07 	vfma.f64	d4, d6, d7
 801232c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012388 <__kernel_sin+0x88>
 8012330:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012334:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012390 <__kernel_sin+0x90>
 8012338:	eea7 4b06 	vfma.f64	d4, d7, d6
 801233c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012398 <__kernel_sin+0x98>
 8012340:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012344:	b930      	cbnz	r0, 8012354 <__kernel_sin+0x54>
 8012346:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80123a0 <__kernel_sin+0xa0>
 801234a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801234e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8012352:	4770      	bx	lr
 8012354:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012358:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801235c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012360:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8012364:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80123a8 <__kernel_sin+0xa8>
 8012368:	eea5 1b07 	vfma.f64	d1, d5, d7
 801236c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012370:	4770      	bx	lr
 8012372:	bf00      	nop
 8012374:	f3af 8000 	nop.w
 8012378:	5acfd57c 	.word	0x5acfd57c
 801237c:	3de5d93a 	.word	0x3de5d93a
 8012380:	8a2b9ceb 	.word	0x8a2b9ceb
 8012384:	be5ae5e6 	.word	0xbe5ae5e6
 8012388:	57b1fe7d 	.word	0x57b1fe7d
 801238c:	3ec71de3 	.word	0x3ec71de3
 8012390:	19c161d5 	.word	0x19c161d5
 8012394:	bf2a01a0 	.word	0xbf2a01a0
 8012398:	1110f8a6 	.word	0x1110f8a6
 801239c:	3f811111 	.word	0x3f811111
 80123a0:	55555549 	.word	0x55555549
 80123a4:	bfc55555 	.word	0xbfc55555
 80123a8:	55555549 	.word	0x55555549
 80123ac:	3fc55555 	.word	0x3fc55555

080123b0 <with_errno>:
 80123b0:	b513      	push	{r0, r1, r4, lr}
 80123b2:	4604      	mov	r4, r0
 80123b4:	ed8d 0b00 	vstr	d0, [sp]
 80123b8:	f000 fa50 	bl	801285c <__errno>
 80123bc:	ed9d 0b00 	vldr	d0, [sp]
 80123c0:	6004      	str	r4, [r0, #0]
 80123c2:	b002      	add	sp, #8
 80123c4:	bd10      	pop	{r4, pc}

080123c6 <xflow>:
 80123c6:	b082      	sub	sp, #8
 80123c8:	b158      	cbz	r0, 80123e2 <xflow+0x1c>
 80123ca:	eeb1 7b40 	vneg.f64	d7, d0
 80123ce:	ed8d 7b00 	vstr	d7, [sp]
 80123d2:	ed9d 7b00 	vldr	d7, [sp]
 80123d6:	2022      	movs	r0, #34	; 0x22
 80123d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80123dc:	b002      	add	sp, #8
 80123de:	f7ff bfe7 	b.w	80123b0 <with_errno>
 80123e2:	eeb0 7b40 	vmov.f64	d7, d0
 80123e6:	e7f2      	b.n	80123ce <xflow+0x8>

080123e8 <__math_uflow>:
 80123e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80123f0 <__math_uflow+0x8>
 80123ec:	f7ff bfeb 	b.w	80123c6 <xflow>
 80123f0:	00000000 	.word	0x00000000
 80123f4:	10000000 	.word	0x10000000

080123f8 <__math_oflow>:
 80123f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012400 <__math_oflow+0x8>
 80123fc:	f7ff bfe3 	b.w	80123c6 <xflow>
 8012400:	00000000 	.word	0x00000000
 8012404:	70000000 	.word	0x70000000

08012408 <__math_divzero>:
 8012408:	b082      	sub	sp, #8
 801240a:	2800      	cmp	r0, #0
 801240c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012410:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8012414:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012418:	ed8d 7b00 	vstr	d7, [sp]
 801241c:	ed9d 0b00 	vldr	d0, [sp]
 8012420:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012430 <__math_divzero+0x28>
 8012424:	2022      	movs	r0, #34	; 0x22
 8012426:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801242a:	b002      	add	sp, #8
 801242c:	f7ff bfc0 	b.w	80123b0 <with_errno>
	...

08012438 <__math_invalid>:
 8012438:	eeb0 7b40 	vmov.f64	d7, d0
 801243c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012444:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012448:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801244c:	d602      	bvs.n	8012454 <__math_invalid+0x1c>
 801244e:	2021      	movs	r0, #33	; 0x21
 8012450:	f7ff bfae 	b.w	80123b0 <with_errno>
 8012454:	4770      	bx	lr

08012456 <__math_check_uflow>:
 8012456:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245e:	d102      	bne.n	8012466 <__math_check_uflow+0x10>
 8012460:	2022      	movs	r0, #34	; 0x22
 8012462:	f7ff bfa5 	b.w	80123b0 <with_errno>
 8012466:	4770      	bx	lr

08012468 <__math_check_oflow>:
 8012468:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012488 <__math_check_oflow+0x20>
 801246c:	eeb0 7bc0 	vabs.f64	d7, d0
 8012470:	eeb4 7b46 	vcmp.f64	d7, d6
 8012474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012478:	dd02      	ble.n	8012480 <__math_check_oflow+0x18>
 801247a:	2022      	movs	r0, #34	; 0x22
 801247c:	f7ff bf98 	b.w	80123b0 <with_errno>
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	f3af 8000 	nop.w
 8012488:	ffffffff 	.word	0xffffffff
 801248c:	7fefffff 	.word	0x7fefffff

08012490 <fabs>:
 8012490:	ec51 0b10 	vmov	r0, r1, d0
 8012494:	ee10 2a10 	vmov	r2, s0
 8012498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801249c:	ec43 2b10 	vmov	d0, r2, r3
 80124a0:	4770      	bx	lr
 80124a2:	0000      	movs	r0, r0
 80124a4:	0000      	movs	r0, r0
	...

080124a8 <floor>:
 80124a8:	ee10 1a90 	vmov	r1, s1
 80124ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80124b0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80124b4:	2b13      	cmp	r3, #19
 80124b6:	b530      	push	{r4, r5, lr}
 80124b8:	ee10 0a10 	vmov	r0, s0
 80124bc:	ee10 5a10 	vmov	r5, s0
 80124c0:	dc31      	bgt.n	8012526 <floor+0x7e>
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	da15      	bge.n	80124f2 <floor+0x4a>
 80124c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012580 <floor+0xd8>
 80124ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80124ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80124d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d6:	dd07      	ble.n	80124e8 <floor+0x40>
 80124d8:	2900      	cmp	r1, #0
 80124da:	da4e      	bge.n	801257a <floor+0xd2>
 80124dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80124e0:	4318      	orrs	r0, r3
 80124e2:	d001      	beq.n	80124e8 <floor+0x40>
 80124e4:	4928      	ldr	r1, [pc, #160]	; (8012588 <floor+0xe0>)
 80124e6:	2000      	movs	r0, #0
 80124e8:	460b      	mov	r3, r1
 80124ea:	4602      	mov	r2, r0
 80124ec:	ec43 2b10 	vmov	d0, r2, r3
 80124f0:	e020      	b.n	8012534 <floor+0x8c>
 80124f2:	4a26      	ldr	r2, [pc, #152]	; (801258c <floor+0xe4>)
 80124f4:	411a      	asrs	r2, r3
 80124f6:	ea01 0402 	and.w	r4, r1, r2
 80124fa:	4304      	orrs	r4, r0
 80124fc:	d01a      	beq.n	8012534 <floor+0x8c>
 80124fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012580 <floor+0xd8>
 8012502:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012506:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801250e:	ddeb      	ble.n	80124e8 <floor+0x40>
 8012510:	2900      	cmp	r1, #0
 8012512:	bfbe      	ittt	lt
 8012514:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012518:	fa40 f303 	asrlt.w	r3, r0, r3
 801251c:	18c9      	addlt	r1, r1, r3
 801251e:	ea21 0102 	bic.w	r1, r1, r2
 8012522:	2000      	movs	r0, #0
 8012524:	e7e0      	b.n	80124e8 <floor+0x40>
 8012526:	2b33      	cmp	r3, #51	; 0x33
 8012528:	dd05      	ble.n	8012536 <floor+0x8e>
 801252a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801252e:	d101      	bne.n	8012534 <floor+0x8c>
 8012530:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012534:	bd30      	pop	{r4, r5, pc}
 8012536:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801253a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801253e:	40e2      	lsrs	r2, r4
 8012540:	4202      	tst	r2, r0
 8012542:	d0f7      	beq.n	8012534 <floor+0x8c>
 8012544:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012580 <floor+0xd8>
 8012548:	ee30 0b07 	vadd.f64	d0, d0, d7
 801254c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012554:	ddc8      	ble.n	80124e8 <floor+0x40>
 8012556:	2900      	cmp	r1, #0
 8012558:	da02      	bge.n	8012560 <floor+0xb8>
 801255a:	2b14      	cmp	r3, #20
 801255c:	d103      	bne.n	8012566 <floor+0xbe>
 801255e:	3101      	adds	r1, #1
 8012560:	ea20 0002 	bic.w	r0, r0, r2
 8012564:	e7c0      	b.n	80124e8 <floor+0x40>
 8012566:	2401      	movs	r4, #1
 8012568:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801256c:	fa04 f303 	lsl.w	r3, r4, r3
 8012570:	4418      	add	r0, r3
 8012572:	42a8      	cmp	r0, r5
 8012574:	bf38      	it	cc
 8012576:	1909      	addcc	r1, r1, r4
 8012578:	e7f2      	b.n	8012560 <floor+0xb8>
 801257a:	2000      	movs	r0, #0
 801257c:	4601      	mov	r1, r0
 801257e:	e7b3      	b.n	80124e8 <floor+0x40>
 8012580:	8800759c 	.word	0x8800759c
 8012584:	7e37e43c 	.word	0x7e37e43c
 8012588:	bff00000 	.word	0xbff00000
 801258c:	000fffff 	.word	0x000fffff

08012590 <scalbn>:
 8012590:	ee10 1a90 	vmov	r1, s1
 8012594:	b510      	push	{r4, lr}
 8012596:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801259a:	b98c      	cbnz	r4, 80125c0 <scalbn+0x30>
 801259c:	ee10 3a10 	vmov	r3, s0
 80125a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80125a4:	430b      	orrs	r3, r1
 80125a6:	d011      	beq.n	80125cc <scalbn+0x3c>
 80125a8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8012670 <scalbn+0xe0>
 80125ac:	4b3c      	ldr	r3, [pc, #240]	; (80126a0 <scalbn+0x110>)
 80125ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 80125b2:	4298      	cmp	r0, r3
 80125b4:	da0b      	bge.n	80125ce <scalbn+0x3e>
 80125b6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012678 <scalbn+0xe8>
 80125ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 80125be:	e005      	b.n	80125cc <scalbn+0x3c>
 80125c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80125c4:	429c      	cmp	r4, r3
 80125c6:	d107      	bne.n	80125d8 <scalbn+0x48>
 80125c8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80125cc:	bd10      	pop	{r4, pc}
 80125ce:	ee10 1a90 	vmov	r1, s1
 80125d2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80125d6:	3c36      	subs	r4, #54	; 0x36
 80125d8:	4404      	add	r4, r0
 80125da:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80125de:	429c      	cmp	r4, r3
 80125e0:	dd0d      	ble.n	80125fe <scalbn+0x6e>
 80125e2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012680 <scalbn+0xf0>
 80125e6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012688 <scalbn+0xf8>
 80125ea:	eeb0 6b47 	vmov.f64	d6, d7
 80125ee:	ee10 3a90 	vmov	r3, s1
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	fe27 7b05 	vselge.f64	d7, d7, d5
 80125f8:	ee27 0b06 	vmul.f64	d0, d7, d6
 80125fc:	e7e6      	b.n	80125cc <scalbn+0x3c>
 80125fe:	2c00      	cmp	r4, #0
 8012600:	dd0a      	ble.n	8012618 <scalbn+0x88>
 8012602:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012606:	ec53 2b10 	vmov	r2, r3, d0
 801260a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801260e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012612:	ec43 2b10 	vmov	d0, r2, r3
 8012616:	e7d9      	b.n	80125cc <scalbn+0x3c>
 8012618:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801261c:	da19      	bge.n	8012652 <scalbn+0xc2>
 801261e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012622:	4298      	cmp	r0, r3
 8012624:	ee10 3a90 	vmov	r3, s1
 8012628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801262c:	dd09      	ble.n	8012642 <scalbn+0xb2>
 801262e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8012680 <scalbn+0xf0>
 8012632:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012688 <scalbn+0xf8>
 8012636:	eeb0 7b40 	vmov.f64	d7, d0
 801263a:	2b00      	cmp	r3, #0
 801263c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8012640:	e7bb      	b.n	80125ba <scalbn+0x2a>
 8012642:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8012678 <scalbn+0xe8>
 8012646:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8012690 <scalbn+0x100>
 801264a:	eeb0 7b40 	vmov.f64	d7, d0
 801264e:	2b00      	cmp	r3, #0
 8012650:	e7f4      	b.n	801263c <scalbn+0xac>
 8012652:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012656:	ec53 2b10 	vmov	r2, r3, d0
 801265a:	3436      	adds	r4, #54	; 0x36
 801265c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012660:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012664:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012698 <scalbn+0x108>
 8012668:	ec43 2b10 	vmov	d0, r2, r3
 801266c:	e7a5      	b.n	80125ba <scalbn+0x2a>
 801266e:	bf00      	nop
 8012670:	00000000 	.word	0x00000000
 8012674:	43500000 	.word	0x43500000
 8012678:	c2f8f359 	.word	0xc2f8f359
 801267c:	01a56e1f 	.word	0x01a56e1f
 8012680:	8800759c 	.word	0x8800759c
 8012684:	7e37e43c 	.word	0x7e37e43c
 8012688:	8800759c 	.word	0x8800759c
 801268c:	fe37e43c 	.word	0xfe37e43c
 8012690:	c2f8f359 	.word	0xc2f8f359
 8012694:	81a56e1f 	.word	0x81a56e1f
 8012698:	00000000 	.word	0x00000000
 801269c:	3c900000 	.word	0x3c900000
 80126a0:	ffff3cb0 	.word	0xffff3cb0

080126a4 <atanf>:
 80126a4:	b538      	push	{r3, r4, r5, lr}
 80126a6:	ee10 5a10 	vmov	r5, s0
 80126aa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80126ae:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80126b2:	eef0 7a40 	vmov.f32	s15, s0
 80126b6:	db0f      	blt.n	80126d8 <atanf+0x34>
 80126b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80126bc:	dd04      	ble.n	80126c8 <atanf+0x24>
 80126be:	ee70 7a00 	vadd.f32	s15, s0, s0
 80126c2:	eeb0 0a67 	vmov.f32	s0, s15
 80126c6:	bd38      	pop	{r3, r4, r5, pc}
 80126c8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012800 <atanf+0x15c>
 80126cc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8012804 <atanf+0x160>
 80126d0:	2d00      	cmp	r5, #0
 80126d2:	fe77 7a80 	vselgt.f32	s15, s15, s0
 80126d6:	e7f4      	b.n	80126c2 <atanf+0x1e>
 80126d8:	4b4b      	ldr	r3, [pc, #300]	; (8012808 <atanf+0x164>)
 80126da:	429c      	cmp	r4, r3
 80126dc:	dc10      	bgt.n	8012700 <atanf+0x5c>
 80126de:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80126e2:	da0a      	bge.n	80126fa <atanf+0x56>
 80126e4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801280c <atanf+0x168>
 80126e8:	ee30 7a07 	vadd.f32	s14, s0, s14
 80126ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80126f0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80126f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f8:	dce3      	bgt.n	80126c2 <atanf+0x1e>
 80126fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80126fe:	e013      	b.n	8012728 <atanf+0x84>
 8012700:	f000 f8a4 	bl	801284c <fabsf>
 8012704:	4b42      	ldr	r3, [pc, #264]	; (8012810 <atanf+0x16c>)
 8012706:	429c      	cmp	r4, r3
 8012708:	dc4f      	bgt.n	80127aa <atanf+0x106>
 801270a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801270e:	429c      	cmp	r4, r3
 8012710:	dc41      	bgt.n	8012796 <atanf+0xf2>
 8012712:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012716:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801271a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801271e:	2300      	movs	r3, #0
 8012720:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012724:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012728:	1c5a      	adds	r2, r3, #1
 801272a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801272e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8012814 <atanf+0x170>
 8012732:	eddf 5a39 	vldr	s11, [pc, #228]	; 8012818 <atanf+0x174>
 8012736:	ed9f 5a39 	vldr	s10, [pc, #228]	; 801281c <atanf+0x178>
 801273a:	ee66 6a06 	vmul.f32	s13, s12, s12
 801273e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012742:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012820 <atanf+0x17c>
 8012746:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801274a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8012824 <atanf+0x180>
 801274e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012752:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8012828 <atanf+0x184>
 8012756:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801275a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801282c <atanf+0x188>
 801275e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012762:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012830 <atanf+0x18c>
 8012766:	eea6 5a87 	vfma.f32	s10, s13, s14
 801276a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8012834 <atanf+0x190>
 801276e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012772:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8012838 <atanf+0x194>
 8012776:	eea7 5a26 	vfma.f32	s10, s14, s13
 801277a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801283c <atanf+0x198>
 801277e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012782:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012786:	eea5 7a86 	vfma.f32	s14, s11, s12
 801278a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801278e:	d121      	bne.n	80127d4 <atanf+0x130>
 8012790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012794:	e795      	b.n	80126c2 <atanf+0x1e>
 8012796:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801279a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801279e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80127a2:	2301      	movs	r3, #1
 80127a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80127a8:	e7be      	b.n	8012728 <atanf+0x84>
 80127aa:	4b25      	ldr	r3, [pc, #148]	; (8012840 <atanf+0x19c>)
 80127ac:	429c      	cmp	r4, r3
 80127ae:	dc0b      	bgt.n	80127c8 <atanf+0x124>
 80127b0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80127b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127b8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80127bc:	2302      	movs	r3, #2
 80127be:	ee70 6a67 	vsub.f32	s13, s0, s15
 80127c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80127c6:	e7af      	b.n	8012728 <atanf+0x84>
 80127c8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80127cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80127d0:	2303      	movs	r3, #3
 80127d2:	e7a9      	b.n	8012728 <atanf+0x84>
 80127d4:	4a1b      	ldr	r2, [pc, #108]	; (8012844 <atanf+0x1a0>)
 80127d6:	491c      	ldr	r1, [pc, #112]	; (8012848 <atanf+0x1a4>)
 80127d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80127dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80127e0:	ed93 0a00 	vldr	s0, [r3]
 80127e4:	ee37 7a40 	vsub.f32	s14, s14, s0
 80127e8:	ed92 0a00 	vldr	s0, [r2]
 80127ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80127f0:	2d00      	cmp	r5, #0
 80127f2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80127f6:	bfb8      	it	lt
 80127f8:	eef1 7a67 	vneglt.f32	s15, s15
 80127fc:	e761      	b.n	80126c2 <atanf+0x1e>
 80127fe:	bf00      	nop
 8012800:	3fc90fdb 	.word	0x3fc90fdb
 8012804:	bfc90fdb 	.word	0xbfc90fdb
 8012808:	3edfffff 	.word	0x3edfffff
 801280c:	7149f2ca 	.word	0x7149f2ca
 8012810:	3f97ffff 	.word	0x3f97ffff
 8012814:	3c8569d7 	.word	0x3c8569d7
 8012818:	3d4bda59 	.word	0x3d4bda59
 801281c:	bd6ef16b 	.word	0xbd6ef16b
 8012820:	3d886b35 	.word	0x3d886b35
 8012824:	3dba2e6e 	.word	0x3dba2e6e
 8012828:	3e124925 	.word	0x3e124925
 801282c:	3eaaaaab 	.word	0x3eaaaaab
 8012830:	bd15a221 	.word	0xbd15a221
 8012834:	bd9d8795 	.word	0xbd9d8795
 8012838:	bde38e38 	.word	0xbde38e38
 801283c:	be4ccccd 	.word	0xbe4ccccd
 8012840:	401bffff 	.word	0x401bffff
 8012844:	08016de0 	.word	0x08016de0
 8012848:	08016df0 	.word	0x08016df0

0801284c <fabsf>:
 801284c:	ee10 3a10 	vmov	r3, s0
 8012850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012854:	ee00 3a10 	vmov	s0, r3
 8012858:	4770      	bx	lr
	...

0801285c <__errno>:
 801285c:	4b01      	ldr	r3, [pc, #4]	; (8012864 <__errno+0x8>)
 801285e:	6818      	ldr	r0, [r3, #0]
 8012860:	4770      	bx	lr
 8012862:	bf00      	nop
 8012864:	24000244 	.word	0x24000244

08012868 <__libc_init_array>:
 8012868:	b570      	push	{r4, r5, r6, lr}
 801286a:	4d0d      	ldr	r5, [pc, #52]	; (80128a0 <__libc_init_array+0x38>)
 801286c:	4c0d      	ldr	r4, [pc, #52]	; (80128a4 <__libc_init_array+0x3c>)
 801286e:	1b64      	subs	r4, r4, r5
 8012870:	10a4      	asrs	r4, r4, #2
 8012872:	2600      	movs	r6, #0
 8012874:	42a6      	cmp	r6, r4
 8012876:	d109      	bne.n	801288c <__libc_init_array+0x24>
 8012878:	4d0b      	ldr	r5, [pc, #44]	; (80128a8 <__libc_init_array+0x40>)
 801287a:	4c0c      	ldr	r4, [pc, #48]	; (80128ac <__libc_init_array+0x44>)
 801287c:	f002 fd02 	bl	8015284 <_init>
 8012880:	1b64      	subs	r4, r4, r5
 8012882:	10a4      	asrs	r4, r4, #2
 8012884:	2600      	movs	r6, #0
 8012886:	42a6      	cmp	r6, r4
 8012888:	d105      	bne.n	8012896 <__libc_init_array+0x2e>
 801288a:	bd70      	pop	{r4, r5, r6, pc}
 801288c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012890:	4798      	blx	r3
 8012892:	3601      	adds	r6, #1
 8012894:	e7ee      	b.n	8012874 <__libc_init_array+0xc>
 8012896:	f855 3b04 	ldr.w	r3, [r5], #4
 801289a:	4798      	blx	r3
 801289c:	3601      	adds	r6, #1
 801289e:	e7f2      	b.n	8012886 <__libc_init_array+0x1e>
 80128a0:	080171e4 	.word	0x080171e4
 80128a4:	080171e4 	.word	0x080171e4
 80128a8:	080171e4 	.word	0x080171e4
 80128ac:	080171ec 	.word	0x080171ec

080128b0 <memset>:
 80128b0:	4402      	add	r2, r0
 80128b2:	4603      	mov	r3, r0
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d100      	bne.n	80128ba <memset+0xa>
 80128b8:	4770      	bx	lr
 80128ba:	f803 1b01 	strb.w	r1, [r3], #1
 80128be:	e7f9      	b.n	80128b4 <memset+0x4>

080128c0 <__cvt>:
 80128c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128c2:	ed2d 8b02 	vpush	{d8}
 80128c6:	eeb0 8b40 	vmov.f64	d8, d0
 80128ca:	b085      	sub	sp, #20
 80128cc:	4617      	mov	r7, r2
 80128ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80128d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80128d2:	ee18 2a90 	vmov	r2, s17
 80128d6:	f025 0520 	bic.w	r5, r5, #32
 80128da:	2a00      	cmp	r2, #0
 80128dc:	bfb6      	itet	lt
 80128de:	222d      	movlt	r2, #45	; 0x2d
 80128e0:	2200      	movge	r2, #0
 80128e2:	eeb1 8b40 	vneglt.f64	d8, d0
 80128e6:	2d46      	cmp	r5, #70	; 0x46
 80128e8:	460c      	mov	r4, r1
 80128ea:	701a      	strb	r2, [r3, #0]
 80128ec:	d004      	beq.n	80128f8 <__cvt+0x38>
 80128ee:	2d45      	cmp	r5, #69	; 0x45
 80128f0:	d100      	bne.n	80128f4 <__cvt+0x34>
 80128f2:	3401      	adds	r4, #1
 80128f4:	2102      	movs	r1, #2
 80128f6:	e000      	b.n	80128fa <__cvt+0x3a>
 80128f8:	2103      	movs	r1, #3
 80128fa:	ab03      	add	r3, sp, #12
 80128fc:	9301      	str	r3, [sp, #4]
 80128fe:	ab02      	add	r3, sp, #8
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	4622      	mov	r2, r4
 8012904:	4633      	mov	r3, r6
 8012906:	eeb0 0b48 	vmov.f64	d0, d8
 801290a:	f000 fddd 	bl	80134c8 <_dtoa_r>
 801290e:	2d47      	cmp	r5, #71	; 0x47
 8012910:	d101      	bne.n	8012916 <__cvt+0x56>
 8012912:	07fb      	lsls	r3, r7, #31
 8012914:	d51a      	bpl.n	801294c <__cvt+0x8c>
 8012916:	2d46      	cmp	r5, #70	; 0x46
 8012918:	eb00 0204 	add.w	r2, r0, r4
 801291c:	d10c      	bne.n	8012938 <__cvt+0x78>
 801291e:	7803      	ldrb	r3, [r0, #0]
 8012920:	2b30      	cmp	r3, #48	; 0x30
 8012922:	d107      	bne.n	8012934 <__cvt+0x74>
 8012924:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801292c:	bf1c      	itt	ne
 801292e:	f1c4 0401 	rsbne	r4, r4, #1
 8012932:	6034      	strne	r4, [r6, #0]
 8012934:	6833      	ldr	r3, [r6, #0]
 8012936:	441a      	add	r2, r3
 8012938:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012940:	bf08      	it	eq
 8012942:	9203      	streq	r2, [sp, #12]
 8012944:	2130      	movs	r1, #48	; 0x30
 8012946:	9b03      	ldr	r3, [sp, #12]
 8012948:	4293      	cmp	r3, r2
 801294a:	d307      	bcc.n	801295c <__cvt+0x9c>
 801294c:	9b03      	ldr	r3, [sp, #12]
 801294e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012950:	1a1b      	subs	r3, r3, r0
 8012952:	6013      	str	r3, [r2, #0]
 8012954:	b005      	add	sp, #20
 8012956:	ecbd 8b02 	vpop	{d8}
 801295a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801295c:	1c5c      	adds	r4, r3, #1
 801295e:	9403      	str	r4, [sp, #12]
 8012960:	7019      	strb	r1, [r3, #0]
 8012962:	e7f0      	b.n	8012946 <__cvt+0x86>

08012964 <__exponent>:
 8012964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012966:	4603      	mov	r3, r0
 8012968:	2900      	cmp	r1, #0
 801296a:	bfb8      	it	lt
 801296c:	4249      	neglt	r1, r1
 801296e:	f803 2b02 	strb.w	r2, [r3], #2
 8012972:	bfb4      	ite	lt
 8012974:	222d      	movlt	r2, #45	; 0x2d
 8012976:	222b      	movge	r2, #43	; 0x2b
 8012978:	2909      	cmp	r1, #9
 801297a:	7042      	strb	r2, [r0, #1]
 801297c:	dd2a      	ble.n	80129d4 <__exponent+0x70>
 801297e:	f10d 0407 	add.w	r4, sp, #7
 8012982:	46a4      	mov	ip, r4
 8012984:	270a      	movs	r7, #10
 8012986:	46a6      	mov	lr, r4
 8012988:	460a      	mov	r2, r1
 801298a:	fb91 f6f7 	sdiv	r6, r1, r7
 801298e:	fb07 1516 	mls	r5, r7, r6, r1
 8012992:	3530      	adds	r5, #48	; 0x30
 8012994:	2a63      	cmp	r2, #99	; 0x63
 8012996:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801299a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801299e:	4631      	mov	r1, r6
 80129a0:	dcf1      	bgt.n	8012986 <__exponent+0x22>
 80129a2:	3130      	adds	r1, #48	; 0x30
 80129a4:	f1ae 0502 	sub.w	r5, lr, #2
 80129a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80129ac:	1c44      	adds	r4, r0, #1
 80129ae:	4629      	mov	r1, r5
 80129b0:	4561      	cmp	r1, ip
 80129b2:	d30a      	bcc.n	80129ca <__exponent+0x66>
 80129b4:	f10d 0209 	add.w	r2, sp, #9
 80129b8:	eba2 020e 	sub.w	r2, r2, lr
 80129bc:	4565      	cmp	r5, ip
 80129be:	bf88      	it	hi
 80129c0:	2200      	movhi	r2, #0
 80129c2:	4413      	add	r3, r2
 80129c4:	1a18      	subs	r0, r3, r0
 80129c6:	b003      	add	sp, #12
 80129c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80129d2:	e7ed      	b.n	80129b0 <__exponent+0x4c>
 80129d4:	2330      	movs	r3, #48	; 0x30
 80129d6:	3130      	adds	r1, #48	; 0x30
 80129d8:	7083      	strb	r3, [r0, #2]
 80129da:	70c1      	strb	r1, [r0, #3]
 80129dc:	1d03      	adds	r3, r0, #4
 80129de:	e7f1      	b.n	80129c4 <__exponent+0x60>

080129e0 <_printf_float>:
 80129e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e4:	b08b      	sub	sp, #44	; 0x2c
 80129e6:	460c      	mov	r4, r1
 80129e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80129ec:	4616      	mov	r6, r2
 80129ee:	461f      	mov	r7, r3
 80129f0:	4605      	mov	r5, r0
 80129f2:	f001 fc8f 	bl	8014314 <_localeconv_r>
 80129f6:	f8d0 b000 	ldr.w	fp, [r0]
 80129fa:	4658      	mov	r0, fp
 80129fc:	f7ed fc70 	bl	80002e0 <strlen>
 8012a00:	2300      	movs	r3, #0
 8012a02:	9308      	str	r3, [sp, #32]
 8012a04:	f8d8 3000 	ldr.w	r3, [r8]
 8012a08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012a0c:	6822      	ldr	r2, [r4, #0]
 8012a0e:	3307      	adds	r3, #7
 8012a10:	f023 0307 	bic.w	r3, r3, #7
 8012a14:	f103 0108 	add.w	r1, r3, #8
 8012a18:	f8c8 1000 	str.w	r1, [r8]
 8012a1c:	4682      	mov	sl, r0
 8012a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012a22:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8012a26:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012c88 <_printf_float+0x2a8>
 8012a2a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012a2e:	eeb0 6bc0 	vabs.f64	d6, d0
 8012a32:	eeb4 6b47 	vcmp.f64	d6, d7
 8012a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3a:	dd24      	ble.n	8012a86 <_printf_float+0xa6>
 8012a3c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a44:	d502      	bpl.n	8012a4c <_printf_float+0x6c>
 8012a46:	232d      	movs	r3, #45	; 0x2d
 8012a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a4c:	4b90      	ldr	r3, [pc, #576]	; (8012c90 <_printf_float+0x2b0>)
 8012a4e:	4891      	ldr	r0, [pc, #580]	; (8012c94 <_printf_float+0x2b4>)
 8012a50:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012a54:	bf94      	ite	ls
 8012a56:	4698      	movls	r8, r3
 8012a58:	4680      	movhi	r8, r0
 8012a5a:	2303      	movs	r3, #3
 8012a5c:	6123      	str	r3, [r4, #16]
 8012a5e:	f022 0204 	bic.w	r2, r2, #4
 8012a62:	2300      	movs	r3, #0
 8012a64:	6022      	str	r2, [r4, #0]
 8012a66:	9304      	str	r3, [sp, #16]
 8012a68:	9700      	str	r7, [sp, #0]
 8012a6a:	4633      	mov	r3, r6
 8012a6c:	aa09      	add	r2, sp, #36	; 0x24
 8012a6e:	4621      	mov	r1, r4
 8012a70:	4628      	mov	r0, r5
 8012a72:	f000 f9d3 	bl	8012e1c <_printf_common>
 8012a76:	3001      	adds	r0, #1
 8012a78:	f040 808a 	bne.w	8012b90 <_printf_float+0x1b0>
 8012a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a80:	b00b      	add	sp, #44	; 0x2c
 8012a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a86:	eeb4 0b40 	vcmp.f64	d0, d0
 8012a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a8e:	d709      	bvc.n	8012aa4 <_printf_float+0xc4>
 8012a90:	ee10 3a90 	vmov	r3, s1
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	bfbc      	itt	lt
 8012a98:	232d      	movlt	r3, #45	; 0x2d
 8012a9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012a9e:	487e      	ldr	r0, [pc, #504]	; (8012c98 <_printf_float+0x2b8>)
 8012aa0:	4b7e      	ldr	r3, [pc, #504]	; (8012c9c <_printf_float+0x2bc>)
 8012aa2:	e7d5      	b.n	8012a50 <_printf_float+0x70>
 8012aa4:	6863      	ldr	r3, [r4, #4]
 8012aa6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012aaa:	9104      	str	r1, [sp, #16]
 8012aac:	1c59      	adds	r1, r3, #1
 8012aae:	d13c      	bne.n	8012b2a <_printf_float+0x14a>
 8012ab0:	2306      	movs	r3, #6
 8012ab2:	6063      	str	r3, [r4, #4]
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	9303      	str	r3, [sp, #12]
 8012ab8:	ab08      	add	r3, sp, #32
 8012aba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012abe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012ac2:	ab07      	add	r3, sp, #28
 8012ac4:	6861      	ldr	r1, [r4, #4]
 8012ac6:	9300      	str	r3, [sp, #0]
 8012ac8:	6022      	str	r2, [r4, #0]
 8012aca:	f10d 031b 	add.w	r3, sp, #27
 8012ace:	4628      	mov	r0, r5
 8012ad0:	f7ff fef6 	bl	80128c0 <__cvt>
 8012ad4:	9b04      	ldr	r3, [sp, #16]
 8012ad6:	9907      	ldr	r1, [sp, #28]
 8012ad8:	2b47      	cmp	r3, #71	; 0x47
 8012ada:	4680      	mov	r8, r0
 8012adc:	d108      	bne.n	8012af0 <_printf_float+0x110>
 8012ade:	1cc8      	adds	r0, r1, #3
 8012ae0:	db02      	blt.n	8012ae8 <_printf_float+0x108>
 8012ae2:	6863      	ldr	r3, [r4, #4]
 8012ae4:	4299      	cmp	r1, r3
 8012ae6:	dd41      	ble.n	8012b6c <_printf_float+0x18c>
 8012ae8:	f1a9 0902 	sub.w	r9, r9, #2
 8012aec:	fa5f f989 	uxtb.w	r9, r9
 8012af0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012af4:	d820      	bhi.n	8012b38 <_printf_float+0x158>
 8012af6:	3901      	subs	r1, #1
 8012af8:	464a      	mov	r2, r9
 8012afa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012afe:	9107      	str	r1, [sp, #28]
 8012b00:	f7ff ff30 	bl	8012964 <__exponent>
 8012b04:	9a08      	ldr	r2, [sp, #32]
 8012b06:	9004      	str	r0, [sp, #16]
 8012b08:	1813      	adds	r3, r2, r0
 8012b0a:	2a01      	cmp	r2, #1
 8012b0c:	6123      	str	r3, [r4, #16]
 8012b0e:	dc02      	bgt.n	8012b16 <_printf_float+0x136>
 8012b10:	6822      	ldr	r2, [r4, #0]
 8012b12:	07d2      	lsls	r2, r2, #31
 8012b14:	d501      	bpl.n	8012b1a <_printf_float+0x13a>
 8012b16:	3301      	adds	r3, #1
 8012b18:	6123      	str	r3, [r4, #16]
 8012b1a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d0a2      	beq.n	8012a68 <_printf_float+0x88>
 8012b22:	232d      	movs	r3, #45	; 0x2d
 8012b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b28:	e79e      	b.n	8012a68 <_printf_float+0x88>
 8012b2a:	9904      	ldr	r1, [sp, #16]
 8012b2c:	2947      	cmp	r1, #71	; 0x47
 8012b2e:	d1c1      	bne.n	8012ab4 <_printf_float+0xd4>
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d1bf      	bne.n	8012ab4 <_printf_float+0xd4>
 8012b34:	2301      	movs	r3, #1
 8012b36:	e7bc      	b.n	8012ab2 <_printf_float+0xd2>
 8012b38:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012b3c:	d118      	bne.n	8012b70 <_printf_float+0x190>
 8012b3e:	2900      	cmp	r1, #0
 8012b40:	6863      	ldr	r3, [r4, #4]
 8012b42:	dd0b      	ble.n	8012b5c <_printf_float+0x17c>
 8012b44:	6121      	str	r1, [r4, #16]
 8012b46:	b913      	cbnz	r3, 8012b4e <_printf_float+0x16e>
 8012b48:	6822      	ldr	r2, [r4, #0]
 8012b4a:	07d0      	lsls	r0, r2, #31
 8012b4c:	d502      	bpl.n	8012b54 <_printf_float+0x174>
 8012b4e:	3301      	adds	r3, #1
 8012b50:	440b      	add	r3, r1
 8012b52:	6123      	str	r3, [r4, #16]
 8012b54:	2300      	movs	r3, #0
 8012b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8012b58:	9304      	str	r3, [sp, #16]
 8012b5a:	e7de      	b.n	8012b1a <_printf_float+0x13a>
 8012b5c:	b913      	cbnz	r3, 8012b64 <_printf_float+0x184>
 8012b5e:	6822      	ldr	r2, [r4, #0]
 8012b60:	07d2      	lsls	r2, r2, #31
 8012b62:	d501      	bpl.n	8012b68 <_printf_float+0x188>
 8012b64:	3302      	adds	r3, #2
 8012b66:	e7f4      	b.n	8012b52 <_printf_float+0x172>
 8012b68:	2301      	movs	r3, #1
 8012b6a:	e7f2      	b.n	8012b52 <_printf_float+0x172>
 8012b6c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012b70:	9b08      	ldr	r3, [sp, #32]
 8012b72:	4299      	cmp	r1, r3
 8012b74:	db05      	blt.n	8012b82 <_printf_float+0x1a2>
 8012b76:	6823      	ldr	r3, [r4, #0]
 8012b78:	6121      	str	r1, [r4, #16]
 8012b7a:	07d8      	lsls	r0, r3, #31
 8012b7c:	d5ea      	bpl.n	8012b54 <_printf_float+0x174>
 8012b7e:	1c4b      	adds	r3, r1, #1
 8012b80:	e7e7      	b.n	8012b52 <_printf_float+0x172>
 8012b82:	2900      	cmp	r1, #0
 8012b84:	bfd4      	ite	le
 8012b86:	f1c1 0202 	rsble	r2, r1, #2
 8012b8a:	2201      	movgt	r2, #1
 8012b8c:	4413      	add	r3, r2
 8012b8e:	e7e0      	b.n	8012b52 <_printf_float+0x172>
 8012b90:	6823      	ldr	r3, [r4, #0]
 8012b92:	055a      	lsls	r2, r3, #21
 8012b94:	d407      	bmi.n	8012ba6 <_printf_float+0x1c6>
 8012b96:	6923      	ldr	r3, [r4, #16]
 8012b98:	4642      	mov	r2, r8
 8012b9a:	4631      	mov	r1, r6
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	47b8      	blx	r7
 8012ba0:	3001      	adds	r0, #1
 8012ba2:	d12a      	bne.n	8012bfa <_printf_float+0x21a>
 8012ba4:	e76a      	b.n	8012a7c <_printf_float+0x9c>
 8012ba6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012baa:	f240 80e2 	bls.w	8012d72 <_printf_float+0x392>
 8012bae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012bb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bba:	d133      	bne.n	8012c24 <_printf_float+0x244>
 8012bbc:	4a38      	ldr	r2, [pc, #224]	; (8012ca0 <_printf_float+0x2c0>)
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	4631      	mov	r1, r6
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	47b8      	blx	r7
 8012bc6:	3001      	adds	r0, #1
 8012bc8:	f43f af58 	beq.w	8012a7c <_printf_float+0x9c>
 8012bcc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	db02      	blt.n	8012bda <_printf_float+0x1fa>
 8012bd4:	6823      	ldr	r3, [r4, #0]
 8012bd6:	07d8      	lsls	r0, r3, #31
 8012bd8:	d50f      	bpl.n	8012bfa <_printf_float+0x21a>
 8012bda:	4653      	mov	r3, sl
 8012bdc:	465a      	mov	r2, fp
 8012bde:	4631      	mov	r1, r6
 8012be0:	4628      	mov	r0, r5
 8012be2:	47b8      	blx	r7
 8012be4:	3001      	adds	r0, #1
 8012be6:	f43f af49 	beq.w	8012a7c <_printf_float+0x9c>
 8012bea:	f04f 0800 	mov.w	r8, #0
 8012bee:	f104 091a 	add.w	r9, r4, #26
 8012bf2:	9b08      	ldr	r3, [sp, #32]
 8012bf4:	3b01      	subs	r3, #1
 8012bf6:	4543      	cmp	r3, r8
 8012bf8:	dc09      	bgt.n	8012c0e <_printf_float+0x22e>
 8012bfa:	6823      	ldr	r3, [r4, #0]
 8012bfc:	079b      	lsls	r3, r3, #30
 8012bfe:	f100 8108 	bmi.w	8012e12 <_printf_float+0x432>
 8012c02:	68e0      	ldr	r0, [r4, #12]
 8012c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c06:	4298      	cmp	r0, r3
 8012c08:	bfb8      	it	lt
 8012c0a:	4618      	movlt	r0, r3
 8012c0c:	e738      	b.n	8012a80 <_printf_float+0xa0>
 8012c0e:	2301      	movs	r3, #1
 8012c10:	464a      	mov	r2, r9
 8012c12:	4631      	mov	r1, r6
 8012c14:	4628      	mov	r0, r5
 8012c16:	47b8      	blx	r7
 8012c18:	3001      	adds	r0, #1
 8012c1a:	f43f af2f 	beq.w	8012a7c <_printf_float+0x9c>
 8012c1e:	f108 0801 	add.w	r8, r8, #1
 8012c22:	e7e6      	b.n	8012bf2 <_printf_float+0x212>
 8012c24:	9b07      	ldr	r3, [sp, #28]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	dc3c      	bgt.n	8012ca4 <_printf_float+0x2c4>
 8012c2a:	4a1d      	ldr	r2, [pc, #116]	; (8012ca0 <_printf_float+0x2c0>)
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	4631      	mov	r1, r6
 8012c30:	4628      	mov	r0, r5
 8012c32:	47b8      	blx	r7
 8012c34:	3001      	adds	r0, #1
 8012c36:	f43f af21 	beq.w	8012a7c <_printf_float+0x9c>
 8012c3a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012c3e:	4313      	orrs	r3, r2
 8012c40:	d102      	bne.n	8012c48 <_printf_float+0x268>
 8012c42:	6823      	ldr	r3, [r4, #0]
 8012c44:	07d9      	lsls	r1, r3, #31
 8012c46:	d5d8      	bpl.n	8012bfa <_printf_float+0x21a>
 8012c48:	4653      	mov	r3, sl
 8012c4a:	465a      	mov	r2, fp
 8012c4c:	4631      	mov	r1, r6
 8012c4e:	4628      	mov	r0, r5
 8012c50:	47b8      	blx	r7
 8012c52:	3001      	adds	r0, #1
 8012c54:	f43f af12 	beq.w	8012a7c <_printf_float+0x9c>
 8012c58:	f04f 0900 	mov.w	r9, #0
 8012c5c:	f104 0a1a 	add.w	sl, r4, #26
 8012c60:	9b07      	ldr	r3, [sp, #28]
 8012c62:	425b      	negs	r3, r3
 8012c64:	454b      	cmp	r3, r9
 8012c66:	dc01      	bgt.n	8012c6c <_printf_float+0x28c>
 8012c68:	9b08      	ldr	r3, [sp, #32]
 8012c6a:	e795      	b.n	8012b98 <_printf_float+0x1b8>
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	4652      	mov	r2, sl
 8012c70:	4631      	mov	r1, r6
 8012c72:	4628      	mov	r0, r5
 8012c74:	47b8      	blx	r7
 8012c76:	3001      	adds	r0, #1
 8012c78:	f43f af00 	beq.w	8012a7c <_printf_float+0x9c>
 8012c7c:	f109 0901 	add.w	r9, r9, #1
 8012c80:	e7ee      	b.n	8012c60 <_printf_float+0x280>
 8012c82:	bf00      	nop
 8012c84:	f3af 8000 	nop.w
 8012c88:	ffffffff 	.word	0xffffffff
 8012c8c:	7fefffff 	.word	0x7fefffff
 8012c90:	08016e04 	.word	0x08016e04
 8012c94:	08016e08 	.word	0x08016e08
 8012c98:	08016e10 	.word	0x08016e10
 8012c9c:	08016e0c 	.word	0x08016e0c
 8012ca0:	08016e14 	.word	0x08016e14
 8012ca4:	9a08      	ldr	r2, [sp, #32]
 8012ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	bfa8      	it	ge
 8012cac:	461a      	movge	r2, r3
 8012cae:	2a00      	cmp	r2, #0
 8012cb0:	4691      	mov	r9, r2
 8012cb2:	dc38      	bgt.n	8012d26 <_printf_float+0x346>
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	9305      	str	r3, [sp, #20]
 8012cb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012cbc:	f104 021a 	add.w	r2, r4, #26
 8012cc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012cc2:	9905      	ldr	r1, [sp, #20]
 8012cc4:	9304      	str	r3, [sp, #16]
 8012cc6:	eba3 0309 	sub.w	r3, r3, r9
 8012cca:	428b      	cmp	r3, r1
 8012ccc:	dc33      	bgt.n	8012d36 <_printf_float+0x356>
 8012cce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	db3c      	blt.n	8012d50 <_printf_float+0x370>
 8012cd6:	6823      	ldr	r3, [r4, #0]
 8012cd8:	07da      	lsls	r2, r3, #31
 8012cda:	d439      	bmi.n	8012d50 <_printf_float+0x370>
 8012cdc:	9b08      	ldr	r3, [sp, #32]
 8012cde:	9a04      	ldr	r2, [sp, #16]
 8012ce0:	9907      	ldr	r1, [sp, #28]
 8012ce2:	1a9a      	subs	r2, r3, r2
 8012ce4:	eba3 0901 	sub.w	r9, r3, r1
 8012ce8:	4591      	cmp	r9, r2
 8012cea:	bfa8      	it	ge
 8012cec:	4691      	movge	r9, r2
 8012cee:	f1b9 0f00 	cmp.w	r9, #0
 8012cf2:	dc35      	bgt.n	8012d60 <_printf_float+0x380>
 8012cf4:	f04f 0800 	mov.w	r8, #0
 8012cf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012cfc:	f104 0a1a 	add.w	sl, r4, #26
 8012d00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012d04:	1a9b      	subs	r3, r3, r2
 8012d06:	eba3 0309 	sub.w	r3, r3, r9
 8012d0a:	4543      	cmp	r3, r8
 8012d0c:	f77f af75 	ble.w	8012bfa <_printf_float+0x21a>
 8012d10:	2301      	movs	r3, #1
 8012d12:	4652      	mov	r2, sl
 8012d14:	4631      	mov	r1, r6
 8012d16:	4628      	mov	r0, r5
 8012d18:	47b8      	blx	r7
 8012d1a:	3001      	adds	r0, #1
 8012d1c:	f43f aeae 	beq.w	8012a7c <_printf_float+0x9c>
 8012d20:	f108 0801 	add.w	r8, r8, #1
 8012d24:	e7ec      	b.n	8012d00 <_printf_float+0x320>
 8012d26:	4613      	mov	r3, r2
 8012d28:	4631      	mov	r1, r6
 8012d2a:	4642      	mov	r2, r8
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	47b8      	blx	r7
 8012d30:	3001      	adds	r0, #1
 8012d32:	d1bf      	bne.n	8012cb4 <_printf_float+0x2d4>
 8012d34:	e6a2      	b.n	8012a7c <_printf_float+0x9c>
 8012d36:	2301      	movs	r3, #1
 8012d38:	4631      	mov	r1, r6
 8012d3a:	4628      	mov	r0, r5
 8012d3c:	9204      	str	r2, [sp, #16]
 8012d3e:	47b8      	blx	r7
 8012d40:	3001      	adds	r0, #1
 8012d42:	f43f ae9b 	beq.w	8012a7c <_printf_float+0x9c>
 8012d46:	9b05      	ldr	r3, [sp, #20]
 8012d48:	9a04      	ldr	r2, [sp, #16]
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	9305      	str	r3, [sp, #20]
 8012d4e:	e7b7      	b.n	8012cc0 <_printf_float+0x2e0>
 8012d50:	4653      	mov	r3, sl
 8012d52:	465a      	mov	r2, fp
 8012d54:	4631      	mov	r1, r6
 8012d56:	4628      	mov	r0, r5
 8012d58:	47b8      	blx	r7
 8012d5a:	3001      	adds	r0, #1
 8012d5c:	d1be      	bne.n	8012cdc <_printf_float+0x2fc>
 8012d5e:	e68d      	b.n	8012a7c <_printf_float+0x9c>
 8012d60:	9a04      	ldr	r2, [sp, #16]
 8012d62:	464b      	mov	r3, r9
 8012d64:	4442      	add	r2, r8
 8012d66:	4631      	mov	r1, r6
 8012d68:	4628      	mov	r0, r5
 8012d6a:	47b8      	blx	r7
 8012d6c:	3001      	adds	r0, #1
 8012d6e:	d1c1      	bne.n	8012cf4 <_printf_float+0x314>
 8012d70:	e684      	b.n	8012a7c <_printf_float+0x9c>
 8012d72:	9a08      	ldr	r2, [sp, #32]
 8012d74:	2a01      	cmp	r2, #1
 8012d76:	dc01      	bgt.n	8012d7c <_printf_float+0x39c>
 8012d78:	07db      	lsls	r3, r3, #31
 8012d7a:	d537      	bpl.n	8012dec <_printf_float+0x40c>
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	4642      	mov	r2, r8
 8012d80:	4631      	mov	r1, r6
 8012d82:	4628      	mov	r0, r5
 8012d84:	47b8      	blx	r7
 8012d86:	3001      	adds	r0, #1
 8012d88:	f43f ae78 	beq.w	8012a7c <_printf_float+0x9c>
 8012d8c:	4653      	mov	r3, sl
 8012d8e:	465a      	mov	r2, fp
 8012d90:	4631      	mov	r1, r6
 8012d92:	4628      	mov	r0, r5
 8012d94:	47b8      	blx	r7
 8012d96:	3001      	adds	r0, #1
 8012d98:	f43f ae70 	beq.w	8012a7c <_printf_float+0x9c>
 8012d9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012da0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da8:	d01b      	beq.n	8012de2 <_printf_float+0x402>
 8012daa:	9b08      	ldr	r3, [sp, #32]
 8012dac:	f108 0201 	add.w	r2, r8, #1
 8012db0:	3b01      	subs	r3, #1
 8012db2:	4631      	mov	r1, r6
 8012db4:	4628      	mov	r0, r5
 8012db6:	47b8      	blx	r7
 8012db8:	3001      	adds	r0, #1
 8012dba:	d10e      	bne.n	8012dda <_printf_float+0x3fa>
 8012dbc:	e65e      	b.n	8012a7c <_printf_float+0x9c>
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	464a      	mov	r2, r9
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	47b8      	blx	r7
 8012dc8:	3001      	adds	r0, #1
 8012dca:	f43f ae57 	beq.w	8012a7c <_printf_float+0x9c>
 8012dce:	f108 0801 	add.w	r8, r8, #1
 8012dd2:	9b08      	ldr	r3, [sp, #32]
 8012dd4:	3b01      	subs	r3, #1
 8012dd6:	4543      	cmp	r3, r8
 8012dd8:	dcf1      	bgt.n	8012dbe <_printf_float+0x3de>
 8012dda:	9b04      	ldr	r3, [sp, #16]
 8012ddc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012de0:	e6db      	b.n	8012b9a <_printf_float+0x1ba>
 8012de2:	f04f 0800 	mov.w	r8, #0
 8012de6:	f104 091a 	add.w	r9, r4, #26
 8012dea:	e7f2      	b.n	8012dd2 <_printf_float+0x3f2>
 8012dec:	2301      	movs	r3, #1
 8012dee:	4642      	mov	r2, r8
 8012df0:	e7df      	b.n	8012db2 <_printf_float+0x3d2>
 8012df2:	2301      	movs	r3, #1
 8012df4:	464a      	mov	r2, r9
 8012df6:	4631      	mov	r1, r6
 8012df8:	4628      	mov	r0, r5
 8012dfa:	47b8      	blx	r7
 8012dfc:	3001      	adds	r0, #1
 8012dfe:	f43f ae3d 	beq.w	8012a7c <_printf_float+0x9c>
 8012e02:	f108 0801 	add.w	r8, r8, #1
 8012e06:	68e3      	ldr	r3, [r4, #12]
 8012e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e0a:	1a5b      	subs	r3, r3, r1
 8012e0c:	4543      	cmp	r3, r8
 8012e0e:	dcf0      	bgt.n	8012df2 <_printf_float+0x412>
 8012e10:	e6f7      	b.n	8012c02 <_printf_float+0x222>
 8012e12:	f04f 0800 	mov.w	r8, #0
 8012e16:	f104 0919 	add.w	r9, r4, #25
 8012e1a:	e7f4      	b.n	8012e06 <_printf_float+0x426>

08012e1c <_printf_common>:
 8012e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e20:	4616      	mov	r6, r2
 8012e22:	4699      	mov	r9, r3
 8012e24:	688a      	ldr	r2, [r1, #8]
 8012e26:	690b      	ldr	r3, [r1, #16]
 8012e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e2c:	4293      	cmp	r3, r2
 8012e2e:	bfb8      	it	lt
 8012e30:	4613      	movlt	r3, r2
 8012e32:	6033      	str	r3, [r6, #0]
 8012e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e38:	4607      	mov	r7, r0
 8012e3a:	460c      	mov	r4, r1
 8012e3c:	b10a      	cbz	r2, 8012e42 <_printf_common+0x26>
 8012e3e:	3301      	adds	r3, #1
 8012e40:	6033      	str	r3, [r6, #0]
 8012e42:	6823      	ldr	r3, [r4, #0]
 8012e44:	0699      	lsls	r1, r3, #26
 8012e46:	bf42      	ittt	mi
 8012e48:	6833      	ldrmi	r3, [r6, #0]
 8012e4a:	3302      	addmi	r3, #2
 8012e4c:	6033      	strmi	r3, [r6, #0]
 8012e4e:	6825      	ldr	r5, [r4, #0]
 8012e50:	f015 0506 	ands.w	r5, r5, #6
 8012e54:	d106      	bne.n	8012e64 <_printf_common+0x48>
 8012e56:	f104 0a19 	add.w	sl, r4, #25
 8012e5a:	68e3      	ldr	r3, [r4, #12]
 8012e5c:	6832      	ldr	r2, [r6, #0]
 8012e5e:	1a9b      	subs	r3, r3, r2
 8012e60:	42ab      	cmp	r3, r5
 8012e62:	dc26      	bgt.n	8012eb2 <_printf_common+0x96>
 8012e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012e68:	1e13      	subs	r3, r2, #0
 8012e6a:	6822      	ldr	r2, [r4, #0]
 8012e6c:	bf18      	it	ne
 8012e6e:	2301      	movne	r3, #1
 8012e70:	0692      	lsls	r2, r2, #26
 8012e72:	d42b      	bmi.n	8012ecc <_printf_common+0xb0>
 8012e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e78:	4649      	mov	r1, r9
 8012e7a:	4638      	mov	r0, r7
 8012e7c:	47c0      	blx	r8
 8012e7e:	3001      	adds	r0, #1
 8012e80:	d01e      	beq.n	8012ec0 <_printf_common+0xa4>
 8012e82:	6823      	ldr	r3, [r4, #0]
 8012e84:	68e5      	ldr	r5, [r4, #12]
 8012e86:	6832      	ldr	r2, [r6, #0]
 8012e88:	f003 0306 	and.w	r3, r3, #6
 8012e8c:	2b04      	cmp	r3, #4
 8012e8e:	bf08      	it	eq
 8012e90:	1aad      	subeq	r5, r5, r2
 8012e92:	68a3      	ldr	r3, [r4, #8]
 8012e94:	6922      	ldr	r2, [r4, #16]
 8012e96:	bf0c      	ite	eq
 8012e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e9c:	2500      	movne	r5, #0
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	bfc4      	itt	gt
 8012ea2:	1a9b      	subgt	r3, r3, r2
 8012ea4:	18ed      	addgt	r5, r5, r3
 8012ea6:	2600      	movs	r6, #0
 8012ea8:	341a      	adds	r4, #26
 8012eaa:	42b5      	cmp	r5, r6
 8012eac:	d11a      	bne.n	8012ee4 <_printf_common+0xc8>
 8012eae:	2000      	movs	r0, #0
 8012eb0:	e008      	b.n	8012ec4 <_printf_common+0xa8>
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	4652      	mov	r2, sl
 8012eb6:	4649      	mov	r1, r9
 8012eb8:	4638      	mov	r0, r7
 8012eba:	47c0      	blx	r8
 8012ebc:	3001      	adds	r0, #1
 8012ebe:	d103      	bne.n	8012ec8 <_printf_common+0xac>
 8012ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ec8:	3501      	adds	r5, #1
 8012eca:	e7c6      	b.n	8012e5a <_printf_common+0x3e>
 8012ecc:	18e1      	adds	r1, r4, r3
 8012ece:	1c5a      	adds	r2, r3, #1
 8012ed0:	2030      	movs	r0, #48	; 0x30
 8012ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ed6:	4422      	add	r2, r4
 8012ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ee0:	3302      	adds	r3, #2
 8012ee2:	e7c7      	b.n	8012e74 <_printf_common+0x58>
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	4622      	mov	r2, r4
 8012ee8:	4649      	mov	r1, r9
 8012eea:	4638      	mov	r0, r7
 8012eec:	47c0      	blx	r8
 8012eee:	3001      	adds	r0, #1
 8012ef0:	d0e6      	beq.n	8012ec0 <_printf_common+0xa4>
 8012ef2:	3601      	adds	r6, #1
 8012ef4:	e7d9      	b.n	8012eaa <_printf_common+0x8e>
	...

08012ef8 <_printf_i>:
 8012ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012efc:	7e0f      	ldrb	r7, [r1, #24]
 8012efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012f00:	2f78      	cmp	r7, #120	; 0x78
 8012f02:	4691      	mov	r9, r2
 8012f04:	4680      	mov	r8, r0
 8012f06:	460c      	mov	r4, r1
 8012f08:	469a      	mov	sl, r3
 8012f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012f0e:	d807      	bhi.n	8012f20 <_printf_i+0x28>
 8012f10:	2f62      	cmp	r7, #98	; 0x62
 8012f12:	d80a      	bhi.n	8012f2a <_printf_i+0x32>
 8012f14:	2f00      	cmp	r7, #0
 8012f16:	f000 80d8 	beq.w	80130ca <_printf_i+0x1d2>
 8012f1a:	2f58      	cmp	r7, #88	; 0x58
 8012f1c:	f000 80a3 	beq.w	8013066 <_printf_i+0x16e>
 8012f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012f28:	e03a      	b.n	8012fa0 <_printf_i+0xa8>
 8012f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012f2e:	2b15      	cmp	r3, #21
 8012f30:	d8f6      	bhi.n	8012f20 <_printf_i+0x28>
 8012f32:	a101      	add	r1, pc, #4	; (adr r1, 8012f38 <_printf_i+0x40>)
 8012f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f38:	08012f91 	.word	0x08012f91
 8012f3c:	08012fa5 	.word	0x08012fa5
 8012f40:	08012f21 	.word	0x08012f21
 8012f44:	08012f21 	.word	0x08012f21
 8012f48:	08012f21 	.word	0x08012f21
 8012f4c:	08012f21 	.word	0x08012f21
 8012f50:	08012fa5 	.word	0x08012fa5
 8012f54:	08012f21 	.word	0x08012f21
 8012f58:	08012f21 	.word	0x08012f21
 8012f5c:	08012f21 	.word	0x08012f21
 8012f60:	08012f21 	.word	0x08012f21
 8012f64:	080130b1 	.word	0x080130b1
 8012f68:	08012fd5 	.word	0x08012fd5
 8012f6c:	08013093 	.word	0x08013093
 8012f70:	08012f21 	.word	0x08012f21
 8012f74:	08012f21 	.word	0x08012f21
 8012f78:	080130d3 	.word	0x080130d3
 8012f7c:	08012f21 	.word	0x08012f21
 8012f80:	08012fd5 	.word	0x08012fd5
 8012f84:	08012f21 	.word	0x08012f21
 8012f88:	08012f21 	.word	0x08012f21
 8012f8c:	0801309b 	.word	0x0801309b
 8012f90:	682b      	ldr	r3, [r5, #0]
 8012f92:	1d1a      	adds	r2, r3, #4
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	602a      	str	r2, [r5, #0]
 8012f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	e0a3      	b.n	80130ec <_printf_i+0x1f4>
 8012fa4:	6820      	ldr	r0, [r4, #0]
 8012fa6:	6829      	ldr	r1, [r5, #0]
 8012fa8:	0606      	lsls	r6, r0, #24
 8012faa:	f101 0304 	add.w	r3, r1, #4
 8012fae:	d50a      	bpl.n	8012fc6 <_printf_i+0xce>
 8012fb0:	680e      	ldr	r6, [r1, #0]
 8012fb2:	602b      	str	r3, [r5, #0]
 8012fb4:	2e00      	cmp	r6, #0
 8012fb6:	da03      	bge.n	8012fc0 <_printf_i+0xc8>
 8012fb8:	232d      	movs	r3, #45	; 0x2d
 8012fba:	4276      	negs	r6, r6
 8012fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fc0:	485e      	ldr	r0, [pc, #376]	; (801313c <_printf_i+0x244>)
 8012fc2:	230a      	movs	r3, #10
 8012fc4:	e019      	b.n	8012ffa <_printf_i+0x102>
 8012fc6:	680e      	ldr	r6, [r1, #0]
 8012fc8:	602b      	str	r3, [r5, #0]
 8012fca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012fce:	bf18      	it	ne
 8012fd0:	b236      	sxthne	r6, r6
 8012fd2:	e7ef      	b.n	8012fb4 <_printf_i+0xbc>
 8012fd4:	682b      	ldr	r3, [r5, #0]
 8012fd6:	6820      	ldr	r0, [r4, #0]
 8012fd8:	1d19      	adds	r1, r3, #4
 8012fda:	6029      	str	r1, [r5, #0]
 8012fdc:	0601      	lsls	r1, r0, #24
 8012fde:	d501      	bpl.n	8012fe4 <_printf_i+0xec>
 8012fe0:	681e      	ldr	r6, [r3, #0]
 8012fe2:	e002      	b.n	8012fea <_printf_i+0xf2>
 8012fe4:	0646      	lsls	r6, r0, #25
 8012fe6:	d5fb      	bpl.n	8012fe0 <_printf_i+0xe8>
 8012fe8:	881e      	ldrh	r6, [r3, #0]
 8012fea:	4854      	ldr	r0, [pc, #336]	; (801313c <_printf_i+0x244>)
 8012fec:	2f6f      	cmp	r7, #111	; 0x6f
 8012fee:	bf0c      	ite	eq
 8012ff0:	2308      	moveq	r3, #8
 8012ff2:	230a      	movne	r3, #10
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ffa:	6865      	ldr	r5, [r4, #4]
 8012ffc:	60a5      	str	r5, [r4, #8]
 8012ffe:	2d00      	cmp	r5, #0
 8013000:	bfa2      	ittt	ge
 8013002:	6821      	ldrge	r1, [r4, #0]
 8013004:	f021 0104 	bicge.w	r1, r1, #4
 8013008:	6021      	strge	r1, [r4, #0]
 801300a:	b90e      	cbnz	r6, 8013010 <_printf_i+0x118>
 801300c:	2d00      	cmp	r5, #0
 801300e:	d04d      	beq.n	80130ac <_printf_i+0x1b4>
 8013010:	4615      	mov	r5, r2
 8013012:	fbb6 f1f3 	udiv	r1, r6, r3
 8013016:	fb03 6711 	mls	r7, r3, r1, r6
 801301a:	5dc7      	ldrb	r7, [r0, r7]
 801301c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013020:	4637      	mov	r7, r6
 8013022:	42bb      	cmp	r3, r7
 8013024:	460e      	mov	r6, r1
 8013026:	d9f4      	bls.n	8013012 <_printf_i+0x11a>
 8013028:	2b08      	cmp	r3, #8
 801302a:	d10b      	bne.n	8013044 <_printf_i+0x14c>
 801302c:	6823      	ldr	r3, [r4, #0]
 801302e:	07de      	lsls	r6, r3, #31
 8013030:	d508      	bpl.n	8013044 <_printf_i+0x14c>
 8013032:	6923      	ldr	r3, [r4, #16]
 8013034:	6861      	ldr	r1, [r4, #4]
 8013036:	4299      	cmp	r1, r3
 8013038:	bfde      	ittt	le
 801303a:	2330      	movle	r3, #48	; 0x30
 801303c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013040:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013044:	1b52      	subs	r2, r2, r5
 8013046:	6122      	str	r2, [r4, #16]
 8013048:	f8cd a000 	str.w	sl, [sp]
 801304c:	464b      	mov	r3, r9
 801304e:	aa03      	add	r2, sp, #12
 8013050:	4621      	mov	r1, r4
 8013052:	4640      	mov	r0, r8
 8013054:	f7ff fee2 	bl	8012e1c <_printf_common>
 8013058:	3001      	adds	r0, #1
 801305a:	d14c      	bne.n	80130f6 <_printf_i+0x1fe>
 801305c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013060:	b004      	add	sp, #16
 8013062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013066:	4835      	ldr	r0, [pc, #212]	; (801313c <_printf_i+0x244>)
 8013068:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801306c:	6829      	ldr	r1, [r5, #0]
 801306e:	6823      	ldr	r3, [r4, #0]
 8013070:	f851 6b04 	ldr.w	r6, [r1], #4
 8013074:	6029      	str	r1, [r5, #0]
 8013076:	061d      	lsls	r5, r3, #24
 8013078:	d514      	bpl.n	80130a4 <_printf_i+0x1ac>
 801307a:	07df      	lsls	r7, r3, #31
 801307c:	bf44      	itt	mi
 801307e:	f043 0320 	orrmi.w	r3, r3, #32
 8013082:	6023      	strmi	r3, [r4, #0]
 8013084:	b91e      	cbnz	r6, 801308e <_printf_i+0x196>
 8013086:	6823      	ldr	r3, [r4, #0]
 8013088:	f023 0320 	bic.w	r3, r3, #32
 801308c:	6023      	str	r3, [r4, #0]
 801308e:	2310      	movs	r3, #16
 8013090:	e7b0      	b.n	8012ff4 <_printf_i+0xfc>
 8013092:	6823      	ldr	r3, [r4, #0]
 8013094:	f043 0320 	orr.w	r3, r3, #32
 8013098:	6023      	str	r3, [r4, #0]
 801309a:	2378      	movs	r3, #120	; 0x78
 801309c:	4828      	ldr	r0, [pc, #160]	; (8013140 <_printf_i+0x248>)
 801309e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80130a2:	e7e3      	b.n	801306c <_printf_i+0x174>
 80130a4:	0659      	lsls	r1, r3, #25
 80130a6:	bf48      	it	mi
 80130a8:	b2b6      	uxthmi	r6, r6
 80130aa:	e7e6      	b.n	801307a <_printf_i+0x182>
 80130ac:	4615      	mov	r5, r2
 80130ae:	e7bb      	b.n	8013028 <_printf_i+0x130>
 80130b0:	682b      	ldr	r3, [r5, #0]
 80130b2:	6826      	ldr	r6, [r4, #0]
 80130b4:	6961      	ldr	r1, [r4, #20]
 80130b6:	1d18      	adds	r0, r3, #4
 80130b8:	6028      	str	r0, [r5, #0]
 80130ba:	0635      	lsls	r5, r6, #24
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	d501      	bpl.n	80130c4 <_printf_i+0x1cc>
 80130c0:	6019      	str	r1, [r3, #0]
 80130c2:	e002      	b.n	80130ca <_printf_i+0x1d2>
 80130c4:	0670      	lsls	r0, r6, #25
 80130c6:	d5fb      	bpl.n	80130c0 <_printf_i+0x1c8>
 80130c8:	8019      	strh	r1, [r3, #0]
 80130ca:	2300      	movs	r3, #0
 80130cc:	6123      	str	r3, [r4, #16]
 80130ce:	4615      	mov	r5, r2
 80130d0:	e7ba      	b.n	8013048 <_printf_i+0x150>
 80130d2:	682b      	ldr	r3, [r5, #0]
 80130d4:	1d1a      	adds	r2, r3, #4
 80130d6:	602a      	str	r2, [r5, #0]
 80130d8:	681d      	ldr	r5, [r3, #0]
 80130da:	6862      	ldr	r2, [r4, #4]
 80130dc:	2100      	movs	r1, #0
 80130de:	4628      	mov	r0, r5
 80130e0:	f7ed f906 	bl	80002f0 <memchr>
 80130e4:	b108      	cbz	r0, 80130ea <_printf_i+0x1f2>
 80130e6:	1b40      	subs	r0, r0, r5
 80130e8:	6060      	str	r0, [r4, #4]
 80130ea:	6863      	ldr	r3, [r4, #4]
 80130ec:	6123      	str	r3, [r4, #16]
 80130ee:	2300      	movs	r3, #0
 80130f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130f4:	e7a8      	b.n	8013048 <_printf_i+0x150>
 80130f6:	6923      	ldr	r3, [r4, #16]
 80130f8:	462a      	mov	r2, r5
 80130fa:	4649      	mov	r1, r9
 80130fc:	4640      	mov	r0, r8
 80130fe:	47d0      	blx	sl
 8013100:	3001      	adds	r0, #1
 8013102:	d0ab      	beq.n	801305c <_printf_i+0x164>
 8013104:	6823      	ldr	r3, [r4, #0]
 8013106:	079b      	lsls	r3, r3, #30
 8013108:	d413      	bmi.n	8013132 <_printf_i+0x23a>
 801310a:	68e0      	ldr	r0, [r4, #12]
 801310c:	9b03      	ldr	r3, [sp, #12]
 801310e:	4298      	cmp	r0, r3
 8013110:	bfb8      	it	lt
 8013112:	4618      	movlt	r0, r3
 8013114:	e7a4      	b.n	8013060 <_printf_i+0x168>
 8013116:	2301      	movs	r3, #1
 8013118:	4632      	mov	r2, r6
 801311a:	4649      	mov	r1, r9
 801311c:	4640      	mov	r0, r8
 801311e:	47d0      	blx	sl
 8013120:	3001      	adds	r0, #1
 8013122:	d09b      	beq.n	801305c <_printf_i+0x164>
 8013124:	3501      	adds	r5, #1
 8013126:	68e3      	ldr	r3, [r4, #12]
 8013128:	9903      	ldr	r1, [sp, #12]
 801312a:	1a5b      	subs	r3, r3, r1
 801312c:	42ab      	cmp	r3, r5
 801312e:	dcf2      	bgt.n	8013116 <_printf_i+0x21e>
 8013130:	e7eb      	b.n	801310a <_printf_i+0x212>
 8013132:	2500      	movs	r5, #0
 8013134:	f104 0619 	add.w	r6, r4, #25
 8013138:	e7f5      	b.n	8013126 <_printf_i+0x22e>
 801313a:	bf00      	nop
 801313c:	08016e16 	.word	0x08016e16
 8013140:	08016e27 	.word	0x08016e27

08013144 <_puts_r>:
 8013144:	b570      	push	{r4, r5, r6, lr}
 8013146:	460e      	mov	r6, r1
 8013148:	4605      	mov	r5, r0
 801314a:	b118      	cbz	r0, 8013154 <_puts_r+0x10>
 801314c:	6983      	ldr	r3, [r0, #24]
 801314e:	b90b      	cbnz	r3, 8013154 <_puts_r+0x10>
 8013150:	f001 f842 	bl	80141d8 <__sinit>
 8013154:	69ab      	ldr	r3, [r5, #24]
 8013156:	68ac      	ldr	r4, [r5, #8]
 8013158:	b913      	cbnz	r3, 8013160 <_puts_r+0x1c>
 801315a:	4628      	mov	r0, r5
 801315c:	f001 f83c 	bl	80141d8 <__sinit>
 8013160:	4b2c      	ldr	r3, [pc, #176]	; (8013214 <_puts_r+0xd0>)
 8013162:	429c      	cmp	r4, r3
 8013164:	d120      	bne.n	80131a8 <_puts_r+0x64>
 8013166:	686c      	ldr	r4, [r5, #4]
 8013168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801316a:	07db      	lsls	r3, r3, #31
 801316c:	d405      	bmi.n	801317a <_puts_r+0x36>
 801316e:	89a3      	ldrh	r3, [r4, #12]
 8013170:	0598      	lsls	r0, r3, #22
 8013172:	d402      	bmi.n	801317a <_puts_r+0x36>
 8013174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013176:	f001 f8d2 	bl	801431e <__retarget_lock_acquire_recursive>
 801317a:	89a3      	ldrh	r3, [r4, #12]
 801317c:	0719      	lsls	r1, r3, #28
 801317e:	d51d      	bpl.n	80131bc <_puts_r+0x78>
 8013180:	6923      	ldr	r3, [r4, #16]
 8013182:	b1db      	cbz	r3, 80131bc <_puts_r+0x78>
 8013184:	3e01      	subs	r6, #1
 8013186:	68a3      	ldr	r3, [r4, #8]
 8013188:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801318c:	3b01      	subs	r3, #1
 801318e:	60a3      	str	r3, [r4, #8]
 8013190:	bb39      	cbnz	r1, 80131e2 <_puts_r+0x9e>
 8013192:	2b00      	cmp	r3, #0
 8013194:	da38      	bge.n	8013208 <_puts_r+0xc4>
 8013196:	4622      	mov	r2, r4
 8013198:	210a      	movs	r1, #10
 801319a:	4628      	mov	r0, r5
 801319c:	f000 f848 	bl	8013230 <__swbuf_r>
 80131a0:	3001      	adds	r0, #1
 80131a2:	d011      	beq.n	80131c8 <_puts_r+0x84>
 80131a4:	250a      	movs	r5, #10
 80131a6:	e011      	b.n	80131cc <_puts_r+0x88>
 80131a8:	4b1b      	ldr	r3, [pc, #108]	; (8013218 <_puts_r+0xd4>)
 80131aa:	429c      	cmp	r4, r3
 80131ac:	d101      	bne.n	80131b2 <_puts_r+0x6e>
 80131ae:	68ac      	ldr	r4, [r5, #8]
 80131b0:	e7da      	b.n	8013168 <_puts_r+0x24>
 80131b2:	4b1a      	ldr	r3, [pc, #104]	; (801321c <_puts_r+0xd8>)
 80131b4:	429c      	cmp	r4, r3
 80131b6:	bf08      	it	eq
 80131b8:	68ec      	ldreq	r4, [r5, #12]
 80131ba:	e7d5      	b.n	8013168 <_puts_r+0x24>
 80131bc:	4621      	mov	r1, r4
 80131be:	4628      	mov	r0, r5
 80131c0:	f000 f888 	bl	80132d4 <__swsetup_r>
 80131c4:	2800      	cmp	r0, #0
 80131c6:	d0dd      	beq.n	8013184 <_puts_r+0x40>
 80131c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80131cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131ce:	07da      	lsls	r2, r3, #31
 80131d0:	d405      	bmi.n	80131de <_puts_r+0x9a>
 80131d2:	89a3      	ldrh	r3, [r4, #12]
 80131d4:	059b      	lsls	r3, r3, #22
 80131d6:	d402      	bmi.n	80131de <_puts_r+0x9a>
 80131d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131da:	f001 f8a1 	bl	8014320 <__retarget_lock_release_recursive>
 80131de:	4628      	mov	r0, r5
 80131e0:	bd70      	pop	{r4, r5, r6, pc}
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	da04      	bge.n	80131f0 <_puts_r+0xac>
 80131e6:	69a2      	ldr	r2, [r4, #24]
 80131e8:	429a      	cmp	r2, r3
 80131ea:	dc06      	bgt.n	80131fa <_puts_r+0xb6>
 80131ec:	290a      	cmp	r1, #10
 80131ee:	d004      	beq.n	80131fa <_puts_r+0xb6>
 80131f0:	6823      	ldr	r3, [r4, #0]
 80131f2:	1c5a      	adds	r2, r3, #1
 80131f4:	6022      	str	r2, [r4, #0]
 80131f6:	7019      	strb	r1, [r3, #0]
 80131f8:	e7c5      	b.n	8013186 <_puts_r+0x42>
 80131fa:	4622      	mov	r2, r4
 80131fc:	4628      	mov	r0, r5
 80131fe:	f000 f817 	bl	8013230 <__swbuf_r>
 8013202:	3001      	adds	r0, #1
 8013204:	d1bf      	bne.n	8013186 <_puts_r+0x42>
 8013206:	e7df      	b.n	80131c8 <_puts_r+0x84>
 8013208:	6823      	ldr	r3, [r4, #0]
 801320a:	250a      	movs	r5, #10
 801320c:	1c5a      	adds	r2, r3, #1
 801320e:	6022      	str	r2, [r4, #0]
 8013210:	701d      	strb	r5, [r3, #0]
 8013212:	e7db      	b.n	80131cc <_puts_r+0x88>
 8013214:	08016ee8 	.word	0x08016ee8
 8013218:	08016f08 	.word	0x08016f08
 801321c:	08016ec8 	.word	0x08016ec8

08013220 <puts>:
 8013220:	4b02      	ldr	r3, [pc, #8]	; (801322c <puts+0xc>)
 8013222:	4601      	mov	r1, r0
 8013224:	6818      	ldr	r0, [r3, #0]
 8013226:	f7ff bf8d 	b.w	8013144 <_puts_r>
 801322a:	bf00      	nop
 801322c:	24000244 	.word	0x24000244

08013230 <__swbuf_r>:
 8013230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013232:	460e      	mov	r6, r1
 8013234:	4614      	mov	r4, r2
 8013236:	4605      	mov	r5, r0
 8013238:	b118      	cbz	r0, 8013242 <__swbuf_r+0x12>
 801323a:	6983      	ldr	r3, [r0, #24]
 801323c:	b90b      	cbnz	r3, 8013242 <__swbuf_r+0x12>
 801323e:	f000 ffcb 	bl	80141d8 <__sinit>
 8013242:	4b21      	ldr	r3, [pc, #132]	; (80132c8 <__swbuf_r+0x98>)
 8013244:	429c      	cmp	r4, r3
 8013246:	d12b      	bne.n	80132a0 <__swbuf_r+0x70>
 8013248:	686c      	ldr	r4, [r5, #4]
 801324a:	69a3      	ldr	r3, [r4, #24]
 801324c:	60a3      	str	r3, [r4, #8]
 801324e:	89a3      	ldrh	r3, [r4, #12]
 8013250:	071a      	lsls	r2, r3, #28
 8013252:	d52f      	bpl.n	80132b4 <__swbuf_r+0x84>
 8013254:	6923      	ldr	r3, [r4, #16]
 8013256:	b36b      	cbz	r3, 80132b4 <__swbuf_r+0x84>
 8013258:	6923      	ldr	r3, [r4, #16]
 801325a:	6820      	ldr	r0, [r4, #0]
 801325c:	1ac0      	subs	r0, r0, r3
 801325e:	6963      	ldr	r3, [r4, #20]
 8013260:	b2f6      	uxtb	r6, r6
 8013262:	4283      	cmp	r3, r0
 8013264:	4637      	mov	r7, r6
 8013266:	dc04      	bgt.n	8013272 <__swbuf_r+0x42>
 8013268:	4621      	mov	r1, r4
 801326a:	4628      	mov	r0, r5
 801326c:	f000 ff20 	bl	80140b0 <_fflush_r>
 8013270:	bb30      	cbnz	r0, 80132c0 <__swbuf_r+0x90>
 8013272:	68a3      	ldr	r3, [r4, #8]
 8013274:	3b01      	subs	r3, #1
 8013276:	60a3      	str	r3, [r4, #8]
 8013278:	6823      	ldr	r3, [r4, #0]
 801327a:	1c5a      	adds	r2, r3, #1
 801327c:	6022      	str	r2, [r4, #0]
 801327e:	701e      	strb	r6, [r3, #0]
 8013280:	6963      	ldr	r3, [r4, #20]
 8013282:	3001      	adds	r0, #1
 8013284:	4283      	cmp	r3, r0
 8013286:	d004      	beq.n	8013292 <__swbuf_r+0x62>
 8013288:	89a3      	ldrh	r3, [r4, #12]
 801328a:	07db      	lsls	r3, r3, #31
 801328c:	d506      	bpl.n	801329c <__swbuf_r+0x6c>
 801328e:	2e0a      	cmp	r6, #10
 8013290:	d104      	bne.n	801329c <__swbuf_r+0x6c>
 8013292:	4621      	mov	r1, r4
 8013294:	4628      	mov	r0, r5
 8013296:	f000 ff0b 	bl	80140b0 <_fflush_r>
 801329a:	b988      	cbnz	r0, 80132c0 <__swbuf_r+0x90>
 801329c:	4638      	mov	r0, r7
 801329e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132a0:	4b0a      	ldr	r3, [pc, #40]	; (80132cc <__swbuf_r+0x9c>)
 80132a2:	429c      	cmp	r4, r3
 80132a4:	d101      	bne.n	80132aa <__swbuf_r+0x7a>
 80132a6:	68ac      	ldr	r4, [r5, #8]
 80132a8:	e7cf      	b.n	801324a <__swbuf_r+0x1a>
 80132aa:	4b09      	ldr	r3, [pc, #36]	; (80132d0 <__swbuf_r+0xa0>)
 80132ac:	429c      	cmp	r4, r3
 80132ae:	bf08      	it	eq
 80132b0:	68ec      	ldreq	r4, [r5, #12]
 80132b2:	e7ca      	b.n	801324a <__swbuf_r+0x1a>
 80132b4:	4621      	mov	r1, r4
 80132b6:	4628      	mov	r0, r5
 80132b8:	f000 f80c 	bl	80132d4 <__swsetup_r>
 80132bc:	2800      	cmp	r0, #0
 80132be:	d0cb      	beq.n	8013258 <__swbuf_r+0x28>
 80132c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80132c4:	e7ea      	b.n	801329c <__swbuf_r+0x6c>
 80132c6:	bf00      	nop
 80132c8:	08016ee8 	.word	0x08016ee8
 80132cc:	08016f08 	.word	0x08016f08
 80132d0:	08016ec8 	.word	0x08016ec8

080132d4 <__swsetup_r>:
 80132d4:	4b32      	ldr	r3, [pc, #200]	; (80133a0 <__swsetup_r+0xcc>)
 80132d6:	b570      	push	{r4, r5, r6, lr}
 80132d8:	681d      	ldr	r5, [r3, #0]
 80132da:	4606      	mov	r6, r0
 80132dc:	460c      	mov	r4, r1
 80132de:	b125      	cbz	r5, 80132ea <__swsetup_r+0x16>
 80132e0:	69ab      	ldr	r3, [r5, #24]
 80132e2:	b913      	cbnz	r3, 80132ea <__swsetup_r+0x16>
 80132e4:	4628      	mov	r0, r5
 80132e6:	f000 ff77 	bl	80141d8 <__sinit>
 80132ea:	4b2e      	ldr	r3, [pc, #184]	; (80133a4 <__swsetup_r+0xd0>)
 80132ec:	429c      	cmp	r4, r3
 80132ee:	d10f      	bne.n	8013310 <__swsetup_r+0x3c>
 80132f0:	686c      	ldr	r4, [r5, #4]
 80132f2:	89a3      	ldrh	r3, [r4, #12]
 80132f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132f8:	0719      	lsls	r1, r3, #28
 80132fa:	d42c      	bmi.n	8013356 <__swsetup_r+0x82>
 80132fc:	06dd      	lsls	r5, r3, #27
 80132fe:	d411      	bmi.n	8013324 <__swsetup_r+0x50>
 8013300:	2309      	movs	r3, #9
 8013302:	6033      	str	r3, [r6, #0]
 8013304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013308:	81a3      	strh	r3, [r4, #12]
 801330a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801330e:	e03e      	b.n	801338e <__swsetup_r+0xba>
 8013310:	4b25      	ldr	r3, [pc, #148]	; (80133a8 <__swsetup_r+0xd4>)
 8013312:	429c      	cmp	r4, r3
 8013314:	d101      	bne.n	801331a <__swsetup_r+0x46>
 8013316:	68ac      	ldr	r4, [r5, #8]
 8013318:	e7eb      	b.n	80132f2 <__swsetup_r+0x1e>
 801331a:	4b24      	ldr	r3, [pc, #144]	; (80133ac <__swsetup_r+0xd8>)
 801331c:	429c      	cmp	r4, r3
 801331e:	bf08      	it	eq
 8013320:	68ec      	ldreq	r4, [r5, #12]
 8013322:	e7e6      	b.n	80132f2 <__swsetup_r+0x1e>
 8013324:	0758      	lsls	r0, r3, #29
 8013326:	d512      	bpl.n	801334e <__swsetup_r+0x7a>
 8013328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801332a:	b141      	cbz	r1, 801333e <__swsetup_r+0x6a>
 801332c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013330:	4299      	cmp	r1, r3
 8013332:	d002      	beq.n	801333a <__swsetup_r+0x66>
 8013334:	4630      	mov	r0, r6
 8013336:	f001 fc09 	bl	8014b4c <_free_r>
 801333a:	2300      	movs	r3, #0
 801333c:	6363      	str	r3, [r4, #52]	; 0x34
 801333e:	89a3      	ldrh	r3, [r4, #12]
 8013340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013344:	81a3      	strh	r3, [r4, #12]
 8013346:	2300      	movs	r3, #0
 8013348:	6063      	str	r3, [r4, #4]
 801334a:	6923      	ldr	r3, [r4, #16]
 801334c:	6023      	str	r3, [r4, #0]
 801334e:	89a3      	ldrh	r3, [r4, #12]
 8013350:	f043 0308 	orr.w	r3, r3, #8
 8013354:	81a3      	strh	r3, [r4, #12]
 8013356:	6923      	ldr	r3, [r4, #16]
 8013358:	b94b      	cbnz	r3, 801336e <__swsetup_r+0x9a>
 801335a:	89a3      	ldrh	r3, [r4, #12]
 801335c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013364:	d003      	beq.n	801336e <__swsetup_r+0x9a>
 8013366:	4621      	mov	r1, r4
 8013368:	4630      	mov	r0, r6
 801336a:	f000 ffff 	bl	801436c <__smakebuf_r>
 801336e:	89a0      	ldrh	r0, [r4, #12]
 8013370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013374:	f010 0301 	ands.w	r3, r0, #1
 8013378:	d00a      	beq.n	8013390 <__swsetup_r+0xbc>
 801337a:	2300      	movs	r3, #0
 801337c:	60a3      	str	r3, [r4, #8]
 801337e:	6963      	ldr	r3, [r4, #20]
 8013380:	425b      	negs	r3, r3
 8013382:	61a3      	str	r3, [r4, #24]
 8013384:	6923      	ldr	r3, [r4, #16]
 8013386:	b943      	cbnz	r3, 801339a <__swsetup_r+0xc6>
 8013388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801338c:	d1ba      	bne.n	8013304 <__swsetup_r+0x30>
 801338e:	bd70      	pop	{r4, r5, r6, pc}
 8013390:	0781      	lsls	r1, r0, #30
 8013392:	bf58      	it	pl
 8013394:	6963      	ldrpl	r3, [r4, #20]
 8013396:	60a3      	str	r3, [r4, #8]
 8013398:	e7f4      	b.n	8013384 <__swsetup_r+0xb0>
 801339a:	2000      	movs	r0, #0
 801339c:	e7f7      	b.n	801338e <__swsetup_r+0xba>
 801339e:	bf00      	nop
 80133a0:	24000244 	.word	0x24000244
 80133a4:	08016ee8 	.word	0x08016ee8
 80133a8:	08016f08 	.word	0x08016f08
 80133ac:	08016ec8 	.word	0x08016ec8

080133b0 <quorem>:
 80133b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b4:	6903      	ldr	r3, [r0, #16]
 80133b6:	690c      	ldr	r4, [r1, #16]
 80133b8:	42a3      	cmp	r3, r4
 80133ba:	4607      	mov	r7, r0
 80133bc:	f2c0 8081 	blt.w	80134c2 <quorem+0x112>
 80133c0:	3c01      	subs	r4, #1
 80133c2:	f101 0814 	add.w	r8, r1, #20
 80133c6:	f100 0514 	add.w	r5, r0, #20
 80133ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80133ce:	9301      	str	r3, [sp, #4]
 80133d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80133d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80133d8:	3301      	adds	r3, #1
 80133da:	429a      	cmp	r2, r3
 80133dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80133e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80133e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80133e8:	d331      	bcc.n	801344e <quorem+0x9e>
 80133ea:	f04f 0e00 	mov.w	lr, #0
 80133ee:	4640      	mov	r0, r8
 80133f0:	46ac      	mov	ip, r5
 80133f2:	46f2      	mov	sl, lr
 80133f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80133f8:	b293      	uxth	r3, r2
 80133fa:	fb06 e303 	mla	r3, r6, r3, lr
 80133fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013402:	b29b      	uxth	r3, r3
 8013404:	ebaa 0303 	sub.w	r3, sl, r3
 8013408:	f8dc a000 	ldr.w	sl, [ip]
 801340c:	0c12      	lsrs	r2, r2, #16
 801340e:	fa13 f38a 	uxtah	r3, r3, sl
 8013412:	fb06 e202 	mla	r2, r6, r2, lr
 8013416:	9300      	str	r3, [sp, #0]
 8013418:	9b00      	ldr	r3, [sp, #0]
 801341a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801341e:	b292      	uxth	r2, r2
 8013420:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013428:	f8bd 3000 	ldrh.w	r3, [sp]
 801342c:	4581      	cmp	r9, r0
 801342e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013432:	f84c 3b04 	str.w	r3, [ip], #4
 8013436:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801343a:	d2db      	bcs.n	80133f4 <quorem+0x44>
 801343c:	f855 300b 	ldr.w	r3, [r5, fp]
 8013440:	b92b      	cbnz	r3, 801344e <quorem+0x9e>
 8013442:	9b01      	ldr	r3, [sp, #4]
 8013444:	3b04      	subs	r3, #4
 8013446:	429d      	cmp	r5, r3
 8013448:	461a      	mov	r2, r3
 801344a:	d32e      	bcc.n	80134aa <quorem+0xfa>
 801344c:	613c      	str	r4, [r7, #16]
 801344e:	4638      	mov	r0, r7
 8013450:	f001 fa64 	bl	801491c <__mcmp>
 8013454:	2800      	cmp	r0, #0
 8013456:	db24      	blt.n	80134a2 <quorem+0xf2>
 8013458:	3601      	adds	r6, #1
 801345a:	4628      	mov	r0, r5
 801345c:	f04f 0c00 	mov.w	ip, #0
 8013460:	f858 2b04 	ldr.w	r2, [r8], #4
 8013464:	f8d0 e000 	ldr.w	lr, [r0]
 8013468:	b293      	uxth	r3, r2
 801346a:	ebac 0303 	sub.w	r3, ip, r3
 801346e:	0c12      	lsrs	r2, r2, #16
 8013470:	fa13 f38e 	uxtah	r3, r3, lr
 8013474:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801347c:	b29b      	uxth	r3, r3
 801347e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013482:	45c1      	cmp	r9, r8
 8013484:	f840 3b04 	str.w	r3, [r0], #4
 8013488:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801348c:	d2e8      	bcs.n	8013460 <quorem+0xb0>
 801348e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013496:	b922      	cbnz	r2, 80134a2 <quorem+0xf2>
 8013498:	3b04      	subs	r3, #4
 801349a:	429d      	cmp	r5, r3
 801349c:	461a      	mov	r2, r3
 801349e:	d30a      	bcc.n	80134b6 <quorem+0x106>
 80134a0:	613c      	str	r4, [r7, #16]
 80134a2:	4630      	mov	r0, r6
 80134a4:	b003      	add	sp, #12
 80134a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134aa:	6812      	ldr	r2, [r2, #0]
 80134ac:	3b04      	subs	r3, #4
 80134ae:	2a00      	cmp	r2, #0
 80134b0:	d1cc      	bne.n	801344c <quorem+0x9c>
 80134b2:	3c01      	subs	r4, #1
 80134b4:	e7c7      	b.n	8013446 <quorem+0x96>
 80134b6:	6812      	ldr	r2, [r2, #0]
 80134b8:	3b04      	subs	r3, #4
 80134ba:	2a00      	cmp	r2, #0
 80134bc:	d1f0      	bne.n	80134a0 <quorem+0xf0>
 80134be:	3c01      	subs	r4, #1
 80134c0:	e7eb      	b.n	801349a <quorem+0xea>
 80134c2:	2000      	movs	r0, #0
 80134c4:	e7ee      	b.n	80134a4 <quorem+0xf4>
	...

080134c8 <_dtoa_r>:
 80134c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134cc:	ed2d 8b02 	vpush	{d8}
 80134d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80134d2:	b091      	sub	sp, #68	; 0x44
 80134d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80134d8:	ec59 8b10 	vmov	r8, r9, d0
 80134dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80134de:	9106      	str	r1, [sp, #24]
 80134e0:	4606      	mov	r6, r0
 80134e2:	9208      	str	r2, [sp, #32]
 80134e4:	930c      	str	r3, [sp, #48]	; 0x30
 80134e6:	b975      	cbnz	r5, 8013506 <_dtoa_r+0x3e>
 80134e8:	2010      	movs	r0, #16
 80134ea:	f000 ff7f 	bl	80143ec <malloc>
 80134ee:	4602      	mov	r2, r0
 80134f0:	6270      	str	r0, [r6, #36]	; 0x24
 80134f2:	b920      	cbnz	r0, 80134fe <_dtoa_r+0x36>
 80134f4:	4baa      	ldr	r3, [pc, #680]	; (80137a0 <_dtoa_r+0x2d8>)
 80134f6:	21ea      	movs	r1, #234	; 0xea
 80134f8:	48aa      	ldr	r0, [pc, #680]	; (80137a4 <_dtoa_r+0x2dc>)
 80134fa:	f001 fc6d 	bl	8014dd8 <__assert_func>
 80134fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013502:	6005      	str	r5, [r0, #0]
 8013504:	60c5      	str	r5, [r0, #12]
 8013506:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013508:	6819      	ldr	r1, [r3, #0]
 801350a:	b151      	cbz	r1, 8013522 <_dtoa_r+0x5a>
 801350c:	685a      	ldr	r2, [r3, #4]
 801350e:	604a      	str	r2, [r1, #4]
 8013510:	2301      	movs	r3, #1
 8013512:	4093      	lsls	r3, r2
 8013514:	608b      	str	r3, [r1, #8]
 8013516:	4630      	mov	r0, r6
 8013518:	f000 ffbe 	bl	8014498 <_Bfree>
 801351c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801351e:	2200      	movs	r2, #0
 8013520:	601a      	str	r2, [r3, #0]
 8013522:	f1b9 0300 	subs.w	r3, r9, #0
 8013526:	bfbb      	ittet	lt
 8013528:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801352c:	9303      	strlt	r3, [sp, #12]
 801352e:	2300      	movge	r3, #0
 8013530:	2201      	movlt	r2, #1
 8013532:	bfac      	ite	ge
 8013534:	6023      	strge	r3, [r4, #0]
 8013536:	6022      	strlt	r2, [r4, #0]
 8013538:	4b9b      	ldr	r3, [pc, #620]	; (80137a8 <_dtoa_r+0x2e0>)
 801353a:	9c03      	ldr	r4, [sp, #12]
 801353c:	43a3      	bics	r3, r4
 801353e:	d11c      	bne.n	801357a <_dtoa_r+0xb2>
 8013540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013542:	f242 730f 	movw	r3, #9999	; 0x270f
 8013546:	6013      	str	r3, [r2, #0]
 8013548:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801354c:	ea53 0308 	orrs.w	r3, r3, r8
 8013550:	f000 84fd 	beq.w	8013f4e <_dtoa_r+0xa86>
 8013554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013556:	b963      	cbnz	r3, 8013572 <_dtoa_r+0xaa>
 8013558:	4b94      	ldr	r3, [pc, #592]	; (80137ac <_dtoa_r+0x2e4>)
 801355a:	e01f      	b.n	801359c <_dtoa_r+0xd4>
 801355c:	4b94      	ldr	r3, [pc, #592]	; (80137b0 <_dtoa_r+0x2e8>)
 801355e:	9301      	str	r3, [sp, #4]
 8013560:	3308      	adds	r3, #8
 8013562:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013564:	6013      	str	r3, [r2, #0]
 8013566:	9801      	ldr	r0, [sp, #4]
 8013568:	b011      	add	sp, #68	; 0x44
 801356a:	ecbd 8b02 	vpop	{d8}
 801356e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013572:	4b8e      	ldr	r3, [pc, #568]	; (80137ac <_dtoa_r+0x2e4>)
 8013574:	9301      	str	r3, [sp, #4]
 8013576:	3303      	adds	r3, #3
 8013578:	e7f3      	b.n	8013562 <_dtoa_r+0x9a>
 801357a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801357e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013586:	d10b      	bne.n	80135a0 <_dtoa_r+0xd8>
 8013588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801358a:	2301      	movs	r3, #1
 801358c:	6013      	str	r3, [r2, #0]
 801358e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013590:	2b00      	cmp	r3, #0
 8013592:	f000 84d9 	beq.w	8013f48 <_dtoa_r+0xa80>
 8013596:	4887      	ldr	r0, [pc, #540]	; (80137b4 <_dtoa_r+0x2ec>)
 8013598:	6018      	str	r0, [r3, #0]
 801359a:	1e43      	subs	r3, r0, #1
 801359c:	9301      	str	r3, [sp, #4]
 801359e:	e7e2      	b.n	8013566 <_dtoa_r+0x9e>
 80135a0:	a90f      	add	r1, sp, #60	; 0x3c
 80135a2:	aa0e      	add	r2, sp, #56	; 0x38
 80135a4:	4630      	mov	r0, r6
 80135a6:	eeb0 0b48 	vmov.f64	d0, d8
 80135aa:	f001 fa5d 	bl	8014a68 <__d2b>
 80135ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80135b2:	4605      	mov	r5, r0
 80135b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80135b6:	2900      	cmp	r1, #0
 80135b8:	d046      	beq.n	8013648 <_dtoa_r+0x180>
 80135ba:	ee18 4a90 	vmov	r4, s17
 80135be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80135c2:	ec53 2b18 	vmov	r2, r3, d8
 80135c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80135ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80135ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80135d2:	2400      	movs	r4, #0
 80135d4:	ec43 2b16 	vmov	d6, r2, r3
 80135d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80135dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013788 <_dtoa_r+0x2c0>
 80135e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80135e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8013790 <_dtoa_r+0x2c8>
 80135e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80135ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013798 <_dtoa_r+0x2d0>
 80135f0:	ee07 1a90 	vmov	s15, r1
 80135f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80135f8:	eeb0 7b46 	vmov.f64	d7, d6
 80135fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013600:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013604:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801360c:	ee16 ba90 	vmov	fp, s13
 8013610:	940a      	str	r4, [sp, #40]	; 0x28
 8013612:	d508      	bpl.n	8013626 <_dtoa_r+0x15e>
 8013614:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013618:	eeb4 6b47 	vcmp.f64	d6, d7
 801361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013620:	bf18      	it	ne
 8013622:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8013626:	f1bb 0f16 	cmp.w	fp, #22
 801362a:	d82f      	bhi.n	801368c <_dtoa_r+0x1c4>
 801362c:	4b62      	ldr	r3, [pc, #392]	; (80137b8 <_dtoa_r+0x2f0>)
 801362e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013632:	ed93 7b00 	vldr	d7, [r3]
 8013636:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801363a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801363e:	d501      	bpl.n	8013644 <_dtoa_r+0x17c>
 8013640:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013644:	2300      	movs	r3, #0
 8013646:	e022      	b.n	801368e <_dtoa_r+0x1c6>
 8013648:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801364a:	4401      	add	r1, r0
 801364c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8013650:	2b20      	cmp	r3, #32
 8013652:	bfc1      	itttt	gt
 8013654:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013658:	fa04 f303 	lslgt.w	r3, r4, r3
 801365c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8013660:	fa28 f804 	lsrgt.w	r8, r8, r4
 8013664:	bfd6      	itet	le
 8013666:	f1c3 0320 	rsble	r3, r3, #32
 801366a:	ea43 0808 	orrgt.w	r8, r3, r8
 801366e:	fa08 f803 	lslle.w	r8, r8, r3
 8013672:	ee07 8a90 	vmov	s15, r8
 8013676:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801367a:	3901      	subs	r1, #1
 801367c:	ee17 4a90 	vmov	r4, s15
 8013680:	ec53 2b17 	vmov	r2, r3, d7
 8013684:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8013688:	2401      	movs	r4, #1
 801368a:	e7a3      	b.n	80135d4 <_dtoa_r+0x10c>
 801368c:	2301      	movs	r3, #1
 801368e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013690:	1a43      	subs	r3, r0, r1
 8013692:	1e5a      	subs	r2, r3, #1
 8013694:	bf45      	ittet	mi
 8013696:	f1c3 0301 	rsbmi	r3, r3, #1
 801369a:	9304      	strmi	r3, [sp, #16]
 801369c:	2300      	movpl	r3, #0
 801369e:	2300      	movmi	r3, #0
 80136a0:	9205      	str	r2, [sp, #20]
 80136a2:	bf54      	ite	pl
 80136a4:	9304      	strpl	r3, [sp, #16]
 80136a6:	9305      	strmi	r3, [sp, #20]
 80136a8:	f1bb 0f00 	cmp.w	fp, #0
 80136ac:	db18      	blt.n	80136e0 <_dtoa_r+0x218>
 80136ae:	9b05      	ldr	r3, [sp, #20]
 80136b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80136b4:	445b      	add	r3, fp
 80136b6:	9305      	str	r3, [sp, #20]
 80136b8:	2300      	movs	r3, #0
 80136ba:	9a06      	ldr	r2, [sp, #24]
 80136bc:	2a09      	cmp	r2, #9
 80136be:	d849      	bhi.n	8013754 <_dtoa_r+0x28c>
 80136c0:	2a05      	cmp	r2, #5
 80136c2:	bfc4      	itt	gt
 80136c4:	3a04      	subgt	r2, #4
 80136c6:	9206      	strgt	r2, [sp, #24]
 80136c8:	9a06      	ldr	r2, [sp, #24]
 80136ca:	f1a2 0202 	sub.w	r2, r2, #2
 80136ce:	bfcc      	ite	gt
 80136d0:	2400      	movgt	r4, #0
 80136d2:	2401      	movle	r4, #1
 80136d4:	2a03      	cmp	r2, #3
 80136d6:	d848      	bhi.n	801376a <_dtoa_r+0x2a2>
 80136d8:	e8df f002 	tbb	[pc, r2]
 80136dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80136e0:	9b04      	ldr	r3, [sp, #16]
 80136e2:	2200      	movs	r2, #0
 80136e4:	eba3 030b 	sub.w	r3, r3, fp
 80136e8:	9304      	str	r3, [sp, #16]
 80136ea:	9209      	str	r2, [sp, #36]	; 0x24
 80136ec:	f1cb 0300 	rsb	r3, fp, #0
 80136f0:	e7e3      	b.n	80136ba <_dtoa_r+0x1f2>
 80136f2:	2200      	movs	r2, #0
 80136f4:	9207      	str	r2, [sp, #28]
 80136f6:	9a08      	ldr	r2, [sp, #32]
 80136f8:	2a00      	cmp	r2, #0
 80136fa:	dc39      	bgt.n	8013770 <_dtoa_r+0x2a8>
 80136fc:	f04f 0a01 	mov.w	sl, #1
 8013700:	46d1      	mov	r9, sl
 8013702:	4652      	mov	r2, sl
 8013704:	f8cd a020 	str.w	sl, [sp, #32]
 8013708:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801370a:	2100      	movs	r1, #0
 801370c:	6079      	str	r1, [r7, #4]
 801370e:	2004      	movs	r0, #4
 8013710:	f100 0c14 	add.w	ip, r0, #20
 8013714:	4594      	cmp	ip, r2
 8013716:	6879      	ldr	r1, [r7, #4]
 8013718:	d92f      	bls.n	801377a <_dtoa_r+0x2b2>
 801371a:	4630      	mov	r0, r6
 801371c:	930d      	str	r3, [sp, #52]	; 0x34
 801371e:	f000 fe7b 	bl	8014418 <_Balloc>
 8013722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013724:	9001      	str	r0, [sp, #4]
 8013726:	4602      	mov	r2, r0
 8013728:	2800      	cmp	r0, #0
 801372a:	d149      	bne.n	80137c0 <_dtoa_r+0x2f8>
 801372c:	4b23      	ldr	r3, [pc, #140]	; (80137bc <_dtoa_r+0x2f4>)
 801372e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013732:	e6e1      	b.n	80134f8 <_dtoa_r+0x30>
 8013734:	2201      	movs	r2, #1
 8013736:	e7dd      	b.n	80136f4 <_dtoa_r+0x22c>
 8013738:	2200      	movs	r2, #0
 801373a:	9207      	str	r2, [sp, #28]
 801373c:	9a08      	ldr	r2, [sp, #32]
 801373e:	eb0b 0a02 	add.w	sl, fp, r2
 8013742:	f10a 0901 	add.w	r9, sl, #1
 8013746:	464a      	mov	r2, r9
 8013748:	2a01      	cmp	r2, #1
 801374a:	bfb8      	it	lt
 801374c:	2201      	movlt	r2, #1
 801374e:	e7db      	b.n	8013708 <_dtoa_r+0x240>
 8013750:	2201      	movs	r2, #1
 8013752:	e7f2      	b.n	801373a <_dtoa_r+0x272>
 8013754:	2401      	movs	r4, #1
 8013756:	2200      	movs	r2, #0
 8013758:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801375c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013760:	2100      	movs	r1, #0
 8013762:	46d1      	mov	r9, sl
 8013764:	2212      	movs	r2, #18
 8013766:	9108      	str	r1, [sp, #32]
 8013768:	e7ce      	b.n	8013708 <_dtoa_r+0x240>
 801376a:	2201      	movs	r2, #1
 801376c:	9207      	str	r2, [sp, #28]
 801376e:	e7f5      	b.n	801375c <_dtoa_r+0x294>
 8013770:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013774:	46d1      	mov	r9, sl
 8013776:	4652      	mov	r2, sl
 8013778:	e7c6      	b.n	8013708 <_dtoa_r+0x240>
 801377a:	3101      	adds	r1, #1
 801377c:	6079      	str	r1, [r7, #4]
 801377e:	0040      	lsls	r0, r0, #1
 8013780:	e7c6      	b.n	8013710 <_dtoa_r+0x248>
 8013782:	bf00      	nop
 8013784:	f3af 8000 	nop.w
 8013788:	636f4361 	.word	0x636f4361
 801378c:	3fd287a7 	.word	0x3fd287a7
 8013790:	8b60c8b3 	.word	0x8b60c8b3
 8013794:	3fc68a28 	.word	0x3fc68a28
 8013798:	509f79fb 	.word	0x509f79fb
 801379c:	3fd34413 	.word	0x3fd34413
 80137a0:	08016e45 	.word	0x08016e45
 80137a4:	08016e5c 	.word	0x08016e5c
 80137a8:	7ff00000 	.word	0x7ff00000
 80137ac:	08016e41 	.word	0x08016e41
 80137b0:	08016e38 	.word	0x08016e38
 80137b4:	08016e15 	.word	0x08016e15
 80137b8:	08016fb0 	.word	0x08016fb0
 80137bc:	08016eb7 	.word	0x08016eb7
 80137c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80137c2:	9901      	ldr	r1, [sp, #4]
 80137c4:	6011      	str	r1, [r2, #0]
 80137c6:	f1b9 0f0e 	cmp.w	r9, #14
 80137ca:	d86c      	bhi.n	80138a6 <_dtoa_r+0x3de>
 80137cc:	2c00      	cmp	r4, #0
 80137ce:	d06a      	beq.n	80138a6 <_dtoa_r+0x3de>
 80137d0:	f1bb 0f00 	cmp.w	fp, #0
 80137d4:	f340 80a0 	ble.w	8013918 <_dtoa_r+0x450>
 80137d8:	49c1      	ldr	r1, [pc, #772]	; (8013ae0 <_dtoa_r+0x618>)
 80137da:	f00b 020f 	and.w	r2, fp, #15
 80137de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80137e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80137e6:	ed92 7b00 	vldr	d7, [r2]
 80137ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80137ee:	f000 8087 	beq.w	8013900 <_dtoa_r+0x438>
 80137f2:	4abc      	ldr	r2, [pc, #752]	; (8013ae4 <_dtoa_r+0x61c>)
 80137f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80137f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80137fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013800:	f001 010f 	and.w	r1, r1, #15
 8013804:	2203      	movs	r2, #3
 8013806:	48b7      	ldr	r0, [pc, #732]	; (8013ae4 <_dtoa_r+0x61c>)
 8013808:	2900      	cmp	r1, #0
 801380a:	d17b      	bne.n	8013904 <_dtoa_r+0x43c>
 801380c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013810:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013814:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801381a:	2900      	cmp	r1, #0
 801381c:	f000 80a2 	beq.w	8013964 <_dtoa_r+0x49c>
 8013820:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013824:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013828:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013830:	f140 8098 	bpl.w	8013964 <_dtoa_r+0x49c>
 8013834:	f1b9 0f00 	cmp.w	r9, #0
 8013838:	f000 8094 	beq.w	8013964 <_dtoa_r+0x49c>
 801383c:	f1ba 0f00 	cmp.w	sl, #0
 8013840:	dd2f      	ble.n	80138a2 <_dtoa_r+0x3da>
 8013842:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013846:	ee27 7b06 	vmul.f64	d7, d7, d6
 801384a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801384e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8013852:	3201      	adds	r2, #1
 8013854:	4650      	mov	r0, sl
 8013856:	ed9d 6b02 	vldr	d6, [sp, #8]
 801385a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801385e:	ee07 2a90 	vmov	s15, r2
 8013862:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013866:	eea7 5b06 	vfma.f64	d5, d7, d6
 801386a:	ee15 4a90 	vmov	r4, s11
 801386e:	ec52 1b15 	vmov	r1, r2, d5
 8013872:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013876:	2800      	cmp	r0, #0
 8013878:	d177      	bne.n	801396a <_dtoa_r+0x4a2>
 801387a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801387e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013882:	ec42 1b17 	vmov	d7, r1, r2
 8013886:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801388a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388e:	f300 8263 	bgt.w	8013d58 <_dtoa_r+0x890>
 8013892:	eeb1 7b47 	vneg.f64	d7, d7
 8013896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801389a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801389e:	f100 8258 	bmi.w	8013d52 <_dtoa_r+0x88a>
 80138a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80138a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80138a8:	2a00      	cmp	r2, #0
 80138aa:	f2c0 811d 	blt.w	8013ae8 <_dtoa_r+0x620>
 80138ae:	f1bb 0f0e 	cmp.w	fp, #14
 80138b2:	f300 8119 	bgt.w	8013ae8 <_dtoa_r+0x620>
 80138b6:	4b8a      	ldr	r3, [pc, #552]	; (8013ae0 <_dtoa_r+0x618>)
 80138b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80138bc:	ed93 6b00 	vldr	d6, [r3]
 80138c0:	9b08      	ldr	r3, [sp, #32]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	f280 80b7 	bge.w	8013a36 <_dtoa_r+0x56e>
 80138c8:	f1b9 0f00 	cmp.w	r9, #0
 80138cc:	f300 80b3 	bgt.w	8013a36 <_dtoa_r+0x56e>
 80138d0:	f040 823f 	bne.w	8013d52 <_dtoa_r+0x88a>
 80138d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80138d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80138dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80138e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80138e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e8:	464c      	mov	r4, r9
 80138ea:	464f      	mov	r7, r9
 80138ec:	f280 8215 	bge.w	8013d1a <_dtoa_r+0x852>
 80138f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80138f4:	2331      	movs	r3, #49	; 0x31
 80138f6:	f808 3b01 	strb.w	r3, [r8], #1
 80138fa:	f10b 0b01 	add.w	fp, fp, #1
 80138fe:	e211      	b.n	8013d24 <_dtoa_r+0x85c>
 8013900:	2202      	movs	r2, #2
 8013902:	e780      	b.n	8013806 <_dtoa_r+0x33e>
 8013904:	07cc      	lsls	r4, r1, #31
 8013906:	d504      	bpl.n	8013912 <_dtoa_r+0x44a>
 8013908:	ed90 6b00 	vldr	d6, [r0]
 801390c:	3201      	adds	r2, #1
 801390e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013912:	1049      	asrs	r1, r1, #1
 8013914:	3008      	adds	r0, #8
 8013916:	e777      	b.n	8013808 <_dtoa_r+0x340>
 8013918:	d022      	beq.n	8013960 <_dtoa_r+0x498>
 801391a:	f1cb 0100 	rsb	r1, fp, #0
 801391e:	4a70      	ldr	r2, [pc, #448]	; (8013ae0 <_dtoa_r+0x618>)
 8013920:	f001 000f 	and.w	r0, r1, #15
 8013924:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013928:	ed92 7b00 	vldr	d7, [r2]
 801392c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013930:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013934:	486b      	ldr	r0, [pc, #428]	; (8013ae4 <_dtoa_r+0x61c>)
 8013936:	1109      	asrs	r1, r1, #4
 8013938:	2400      	movs	r4, #0
 801393a:	2202      	movs	r2, #2
 801393c:	b929      	cbnz	r1, 801394a <_dtoa_r+0x482>
 801393e:	2c00      	cmp	r4, #0
 8013940:	f43f af6a 	beq.w	8013818 <_dtoa_r+0x350>
 8013944:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013948:	e766      	b.n	8013818 <_dtoa_r+0x350>
 801394a:	07cf      	lsls	r7, r1, #31
 801394c:	d505      	bpl.n	801395a <_dtoa_r+0x492>
 801394e:	ed90 6b00 	vldr	d6, [r0]
 8013952:	3201      	adds	r2, #1
 8013954:	2401      	movs	r4, #1
 8013956:	ee27 7b06 	vmul.f64	d7, d7, d6
 801395a:	1049      	asrs	r1, r1, #1
 801395c:	3008      	adds	r0, #8
 801395e:	e7ed      	b.n	801393c <_dtoa_r+0x474>
 8013960:	2202      	movs	r2, #2
 8013962:	e759      	b.n	8013818 <_dtoa_r+0x350>
 8013964:	465f      	mov	r7, fp
 8013966:	4648      	mov	r0, r9
 8013968:	e775      	b.n	8013856 <_dtoa_r+0x38e>
 801396a:	ec42 1b17 	vmov	d7, r1, r2
 801396e:	4a5c      	ldr	r2, [pc, #368]	; (8013ae0 <_dtoa_r+0x618>)
 8013970:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013974:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013978:	9a01      	ldr	r2, [sp, #4]
 801397a:	1814      	adds	r4, r2, r0
 801397c:	9a07      	ldr	r2, [sp, #28]
 801397e:	b352      	cbz	r2, 80139d6 <_dtoa_r+0x50e>
 8013980:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013984:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013988:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801398c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013990:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013994:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013998:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801399c:	ee14 2a90 	vmov	r2, s9
 80139a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80139a4:	3230      	adds	r2, #48	; 0x30
 80139a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80139aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80139ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139b2:	f808 2b01 	strb.w	r2, [r8], #1
 80139b6:	d439      	bmi.n	8013a2c <_dtoa_r+0x564>
 80139b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80139bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80139c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139c4:	d472      	bmi.n	8013aac <_dtoa_r+0x5e4>
 80139c6:	45a0      	cmp	r8, r4
 80139c8:	f43f af6b 	beq.w	80138a2 <_dtoa_r+0x3da>
 80139cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80139d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80139d4:	e7e0      	b.n	8013998 <_dtoa_r+0x4d0>
 80139d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80139da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80139de:	4621      	mov	r1, r4
 80139e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80139e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80139e8:	ee14 2a90 	vmov	r2, s9
 80139ec:	3230      	adds	r2, #48	; 0x30
 80139ee:	f808 2b01 	strb.w	r2, [r8], #1
 80139f2:	45a0      	cmp	r8, r4
 80139f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80139f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80139fc:	d118      	bne.n	8013a30 <_dtoa_r+0x568>
 80139fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013a02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013a06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0e:	dc4d      	bgt.n	8013aac <_dtoa_r+0x5e4>
 8013a10:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013a14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a1c:	f57f af41 	bpl.w	80138a2 <_dtoa_r+0x3da>
 8013a20:	4688      	mov	r8, r1
 8013a22:	3901      	subs	r1, #1
 8013a24:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013a28:	2b30      	cmp	r3, #48	; 0x30
 8013a2a:	d0f9      	beq.n	8013a20 <_dtoa_r+0x558>
 8013a2c:	46bb      	mov	fp, r7
 8013a2e:	e02a      	b.n	8013a86 <_dtoa_r+0x5be>
 8013a30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013a34:	e7d6      	b.n	80139e4 <_dtoa_r+0x51c>
 8013a36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a3a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013a3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013a42:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013a46:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013a4a:	ee15 3a10 	vmov	r3, s10
 8013a4e:	3330      	adds	r3, #48	; 0x30
 8013a50:	f808 3b01 	strb.w	r3, [r8], #1
 8013a54:	9b01      	ldr	r3, [sp, #4]
 8013a56:	eba8 0303 	sub.w	r3, r8, r3
 8013a5a:	4599      	cmp	r9, r3
 8013a5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013a60:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013a64:	d133      	bne.n	8013ace <_dtoa_r+0x606>
 8013a66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013a6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a72:	dc1a      	bgt.n	8013aaa <_dtoa_r+0x5e2>
 8013a74:	eeb4 7b46 	vcmp.f64	d7, d6
 8013a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a7c:	d103      	bne.n	8013a86 <_dtoa_r+0x5be>
 8013a7e:	ee15 3a10 	vmov	r3, s10
 8013a82:	07d9      	lsls	r1, r3, #31
 8013a84:	d411      	bmi.n	8013aaa <_dtoa_r+0x5e2>
 8013a86:	4629      	mov	r1, r5
 8013a88:	4630      	mov	r0, r6
 8013a8a:	f000 fd05 	bl	8014498 <_Bfree>
 8013a8e:	2300      	movs	r3, #0
 8013a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a92:	f888 3000 	strb.w	r3, [r8]
 8013a96:	f10b 0301 	add.w	r3, fp, #1
 8013a9a:	6013      	str	r3, [r2, #0]
 8013a9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	f43f ad61 	beq.w	8013566 <_dtoa_r+0x9e>
 8013aa4:	f8c3 8000 	str.w	r8, [r3]
 8013aa8:	e55d      	b.n	8013566 <_dtoa_r+0x9e>
 8013aaa:	465f      	mov	r7, fp
 8013aac:	4643      	mov	r3, r8
 8013aae:	4698      	mov	r8, r3
 8013ab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013ab4:	2a39      	cmp	r2, #57	; 0x39
 8013ab6:	d106      	bne.n	8013ac6 <_dtoa_r+0x5fe>
 8013ab8:	9a01      	ldr	r2, [sp, #4]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d1f7      	bne.n	8013aae <_dtoa_r+0x5e6>
 8013abe:	9901      	ldr	r1, [sp, #4]
 8013ac0:	2230      	movs	r2, #48	; 0x30
 8013ac2:	3701      	adds	r7, #1
 8013ac4:	700a      	strb	r2, [r1, #0]
 8013ac6:	781a      	ldrb	r2, [r3, #0]
 8013ac8:	3201      	adds	r2, #1
 8013aca:	701a      	strb	r2, [r3, #0]
 8013acc:	e7ae      	b.n	8013a2c <_dtoa_r+0x564>
 8013ace:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013ad2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ada:	d1b2      	bne.n	8013a42 <_dtoa_r+0x57a>
 8013adc:	e7d3      	b.n	8013a86 <_dtoa_r+0x5be>
 8013ade:	bf00      	nop
 8013ae0:	08016fb0 	.word	0x08016fb0
 8013ae4:	08016f88 	.word	0x08016f88
 8013ae8:	9907      	ldr	r1, [sp, #28]
 8013aea:	2900      	cmp	r1, #0
 8013aec:	f000 80d0 	beq.w	8013c90 <_dtoa_r+0x7c8>
 8013af0:	9906      	ldr	r1, [sp, #24]
 8013af2:	2901      	cmp	r1, #1
 8013af4:	f300 80b4 	bgt.w	8013c60 <_dtoa_r+0x798>
 8013af8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013afa:	2900      	cmp	r1, #0
 8013afc:	f000 80ac 	beq.w	8013c58 <_dtoa_r+0x790>
 8013b00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013b04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013b08:	461c      	mov	r4, r3
 8013b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8013b0c:	9b04      	ldr	r3, [sp, #16]
 8013b0e:	4413      	add	r3, r2
 8013b10:	9304      	str	r3, [sp, #16]
 8013b12:	9b05      	ldr	r3, [sp, #20]
 8013b14:	2101      	movs	r1, #1
 8013b16:	4413      	add	r3, r2
 8013b18:	4630      	mov	r0, r6
 8013b1a:	9305      	str	r3, [sp, #20]
 8013b1c:	f000 fd74 	bl	8014608 <__i2b>
 8013b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b22:	4607      	mov	r7, r0
 8013b24:	f1b8 0f00 	cmp.w	r8, #0
 8013b28:	dd0d      	ble.n	8013b46 <_dtoa_r+0x67e>
 8013b2a:	9a05      	ldr	r2, [sp, #20]
 8013b2c:	2a00      	cmp	r2, #0
 8013b2e:	dd0a      	ble.n	8013b46 <_dtoa_r+0x67e>
 8013b30:	4542      	cmp	r2, r8
 8013b32:	9904      	ldr	r1, [sp, #16]
 8013b34:	bfa8      	it	ge
 8013b36:	4642      	movge	r2, r8
 8013b38:	1a89      	subs	r1, r1, r2
 8013b3a:	9104      	str	r1, [sp, #16]
 8013b3c:	9905      	ldr	r1, [sp, #20]
 8013b3e:	eba8 0802 	sub.w	r8, r8, r2
 8013b42:	1a8a      	subs	r2, r1, r2
 8013b44:	9205      	str	r2, [sp, #20]
 8013b46:	b303      	cbz	r3, 8013b8a <_dtoa_r+0x6c2>
 8013b48:	9a07      	ldr	r2, [sp, #28]
 8013b4a:	2a00      	cmp	r2, #0
 8013b4c:	f000 80a5 	beq.w	8013c9a <_dtoa_r+0x7d2>
 8013b50:	2c00      	cmp	r4, #0
 8013b52:	dd13      	ble.n	8013b7c <_dtoa_r+0x6b4>
 8013b54:	4639      	mov	r1, r7
 8013b56:	4622      	mov	r2, r4
 8013b58:	4630      	mov	r0, r6
 8013b5a:	930d      	str	r3, [sp, #52]	; 0x34
 8013b5c:	f000 fe14 	bl	8014788 <__pow5mult>
 8013b60:	462a      	mov	r2, r5
 8013b62:	4601      	mov	r1, r0
 8013b64:	4607      	mov	r7, r0
 8013b66:	4630      	mov	r0, r6
 8013b68:	f000 fd64 	bl	8014634 <__multiply>
 8013b6c:	4629      	mov	r1, r5
 8013b6e:	900a      	str	r0, [sp, #40]	; 0x28
 8013b70:	4630      	mov	r0, r6
 8013b72:	f000 fc91 	bl	8014498 <_Bfree>
 8013b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b7a:	4615      	mov	r5, r2
 8013b7c:	1b1a      	subs	r2, r3, r4
 8013b7e:	d004      	beq.n	8013b8a <_dtoa_r+0x6c2>
 8013b80:	4629      	mov	r1, r5
 8013b82:	4630      	mov	r0, r6
 8013b84:	f000 fe00 	bl	8014788 <__pow5mult>
 8013b88:	4605      	mov	r5, r0
 8013b8a:	2101      	movs	r1, #1
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	f000 fd3b 	bl	8014608 <__i2b>
 8013b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	4604      	mov	r4, r0
 8013b98:	f340 8081 	ble.w	8013c9e <_dtoa_r+0x7d6>
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	4601      	mov	r1, r0
 8013ba0:	4630      	mov	r0, r6
 8013ba2:	f000 fdf1 	bl	8014788 <__pow5mult>
 8013ba6:	9b06      	ldr	r3, [sp, #24]
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	4604      	mov	r4, r0
 8013bac:	dd7a      	ble.n	8013ca4 <_dtoa_r+0x7dc>
 8013bae:	2300      	movs	r3, #0
 8013bb0:	930a      	str	r3, [sp, #40]	; 0x28
 8013bb2:	6922      	ldr	r2, [r4, #16]
 8013bb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013bb8:	6910      	ldr	r0, [r2, #16]
 8013bba:	f000 fcd5 	bl	8014568 <__hi0bits>
 8013bbe:	f1c0 0020 	rsb	r0, r0, #32
 8013bc2:	9b05      	ldr	r3, [sp, #20]
 8013bc4:	4418      	add	r0, r3
 8013bc6:	f010 001f 	ands.w	r0, r0, #31
 8013bca:	f000 808c 	beq.w	8013ce6 <_dtoa_r+0x81e>
 8013bce:	f1c0 0220 	rsb	r2, r0, #32
 8013bd2:	2a04      	cmp	r2, #4
 8013bd4:	f340 8085 	ble.w	8013ce2 <_dtoa_r+0x81a>
 8013bd8:	f1c0 001c 	rsb	r0, r0, #28
 8013bdc:	9b04      	ldr	r3, [sp, #16]
 8013bde:	4403      	add	r3, r0
 8013be0:	9304      	str	r3, [sp, #16]
 8013be2:	9b05      	ldr	r3, [sp, #20]
 8013be4:	4403      	add	r3, r0
 8013be6:	4480      	add	r8, r0
 8013be8:	9305      	str	r3, [sp, #20]
 8013bea:	9b04      	ldr	r3, [sp, #16]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	dd05      	ble.n	8013bfc <_dtoa_r+0x734>
 8013bf0:	4629      	mov	r1, r5
 8013bf2:	461a      	mov	r2, r3
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	f000 fe21 	bl	801483c <__lshift>
 8013bfa:	4605      	mov	r5, r0
 8013bfc:	9b05      	ldr	r3, [sp, #20]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	dd05      	ble.n	8013c0e <_dtoa_r+0x746>
 8013c02:	4621      	mov	r1, r4
 8013c04:	461a      	mov	r2, r3
 8013c06:	4630      	mov	r0, r6
 8013c08:	f000 fe18 	bl	801483c <__lshift>
 8013c0c:	4604      	mov	r4, r0
 8013c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d06a      	beq.n	8013cea <_dtoa_r+0x822>
 8013c14:	4621      	mov	r1, r4
 8013c16:	4628      	mov	r0, r5
 8013c18:	f000 fe80 	bl	801491c <__mcmp>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	da64      	bge.n	8013cea <_dtoa_r+0x822>
 8013c20:	2300      	movs	r3, #0
 8013c22:	4629      	mov	r1, r5
 8013c24:	220a      	movs	r2, #10
 8013c26:	4630      	mov	r0, r6
 8013c28:	f000 fc58 	bl	80144dc <__multadd>
 8013c2c:	9b07      	ldr	r3, [sp, #28]
 8013c2e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013c32:	4605      	mov	r5, r0
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	f000 8191 	beq.w	8013f5c <_dtoa_r+0xa94>
 8013c3a:	4639      	mov	r1, r7
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	220a      	movs	r2, #10
 8013c40:	4630      	mov	r0, r6
 8013c42:	f000 fc4b 	bl	80144dc <__multadd>
 8013c46:	f1ba 0f00 	cmp.w	sl, #0
 8013c4a:	4607      	mov	r7, r0
 8013c4c:	f300 808d 	bgt.w	8013d6a <_dtoa_r+0x8a2>
 8013c50:	9b06      	ldr	r3, [sp, #24]
 8013c52:	2b02      	cmp	r3, #2
 8013c54:	dc50      	bgt.n	8013cf8 <_dtoa_r+0x830>
 8013c56:	e088      	b.n	8013d6a <_dtoa_r+0x8a2>
 8013c58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013c5e:	e751      	b.n	8013b04 <_dtoa_r+0x63c>
 8013c60:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8013c64:	42a3      	cmp	r3, r4
 8013c66:	bfbf      	itttt	lt
 8013c68:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8013c6a:	1ae3      	sublt	r3, r4, r3
 8013c6c:	18d2      	addlt	r2, r2, r3
 8013c6e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013c70:	bfb6      	itet	lt
 8013c72:	4623      	movlt	r3, r4
 8013c74:	1b1c      	subge	r4, r3, r4
 8013c76:	2400      	movlt	r4, #0
 8013c78:	f1b9 0f00 	cmp.w	r9, #0
 8013c7c:	bfb5      	itete	lt
 8013c7e:	9a04      	ldrlt	r2, [sp, #16]
 8013c80:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013c84:	eba2 0809 	sublt.w	r8, r2, r9
 8013c88:	464a      	movge	r2, r9
 8013c8a:	bfb8      	it	lt
 8013c8c:	2200      	movlt	r2, #0
 8013c8e:	e73c      	b.n	8013b0a <_dtoa_r+0x642>
 8013c90:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013c94:	9f07      	ldr	r7, [sp, #28]
 8013c96:	461c      	mov	r4, r3
 8013c98:	e744      	b.n	8013b24 <_dtoa_r+0x65c>
 8013c9a:	461a      	mov	r2, r3
 8013c9c:	e770      	b.n	8013b80 <_dtoa_r+0x6b8>
 8013c9e:	9b06      	ldr	r3, [sp, #24]
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	dc18      	bgt.n	8013cd6 <_dtoa_r+0x80e>
 8013ca4:	9b02      	ldr	r3, [sp, #8]
 8013ca6:	b9b3      	cbnz	r3, 8013cd6 <_dtoa_r+0x80e>
 8013ca8:	9b03      	ldr	r3, [sp, #12]
 8013caa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013cae:	b9a2      	cbnz	r2, 8013cda <_dtoa_r+0x812>
 8013cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013cb4:	0d12      	lsrs	r2, r2, #20
 8013cb6:	0512      	lsls	r2, r2, #20
 8013cb8:	b18a      	cbz	r2, 8013cde <_dtoa_r+0x816>
 8013cba:	9b04      	ldr	r3, [sp, #16]
 8013cbc:	3301      	adds	r3, #1
 8013cbe:	9304      	str	r3, [sp, #16]
 8013cc0:	9b05      	ldr	r3, [sp, #20]
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	9305      	str	r3, [sp, #20]
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8013cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	f47f af70 	bne.w	8013bb2 <_dtoa_r+0x6ea>
 8013cd2:	2001      	movs	r0, #1
 8013cd4:	e775      	b.n	8013bc2 <_dtoa_r+0x6fa>
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	e7f6      	b.n	8013cc8 <_dtoa_r+0x800>
 8013cda:	9b02      	ldr	r3, [sp, #8]
 8013cdc:	e7f4      	b.n	8013cc8 <_dtoa_r+0x800>
 8013cde:	920a      	str	r2, [sp, #40]	; 0x28
 8013ce0:	e7f3      	b.n	8013cca <_dtoa_r+0x802>
 8013ce2:	d082      	beq.n	8013bea <_dtoa_r+0x722>
 8013ce4:	4610      	mov	r0, r2
 8013ce6:	301c      	adds	r0, #28
 8013ce8:	e778      	b.n	8013bdc <_dtoa_r+0x714>
 8013cea:	f1b9 0f00 	cmp.w	r9, #0
 8013cee:	dc37      	bgt.n	8013d60 <_dtoa_r+0x898>
 8013cf0:	9b06      	ldr	r3, [sp, #24]
 8013cf2:	2b02      	cmp	r3, #2
 8013cf4:	dd34      	ble.n	8013d60 <_dtoa_r+0x898>
 8013cf6:	46ca      	mov	sl, r9
 8013cf8:	f1ba 0f00 	cmp.w	sl, #0
 8013cfc:	d10d      	bne.n	8013d1a <_dtoa_r+0x852>
 8013cfe:	4621      	mov	r1, r4
 8013d00:	4653      	mov	r3, sl
 8013d02:	2205      	movs	r2, #5
 8013d04:	4630      	mov	r0, r6
 8013d06:	f000 fbe9 	bl	80144dc <__multadd>
 8013d0a:	4601      	mov	r1, r0
 8013d0c:	4604      	mov	r4, r0
 8013d0e:	4628      	mov	r0, r5
 8013d10:	f000 fe04 	bl	801491c <__mcmp>
 8013d14:	2800      	cmp	r0, #0
 8013d16:	f73f adeb 	bgt.w	80138f0 <_dtoa_r+0x428>
 8013d1a:	9b08      	ldr	r3, [sp, #32]
 8013d1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013d20:	ea6f 0b03 	mvn.w	fp, r3
 8013d24:	f04f 0900 	mov.w	r9, #0
 8013d28:	4621      	mov	r1, r4
 8013d2a:	4630      	mov	r0, r6
 8013d2c:	f000 fbb4 	bl	8014498 <_Bfree>
 8013d30:	2f00      	cmp	r7, #0
 8013d32:	f43f aea8 	beq.w	8013a86 <_dtoa_r+0x5be>
 8013d36:	f1b9 0f00 	cmp.w	r9, #0
 8013d3a:	d005      	beq.n	8013d48 <_dtoa_r+0x880>
 8013d3c:	45b9      	cmp	r9, r7
 8013d3e:	d003      	beq.n	8013d48 <_dtoa_r+0x880>
 8013d40:	4649      	mov	r1, r9
 8013d42:	4630      	mov	r0, r6
 8013d44:	f000 fba8 	bl	8014498 <_Bfree>
 8013d48:	4639      	mov	r1, r7
 8013d4a:	4630      	mov	r0, r6
 8013d4c:	f000 fba4 	bl	8014498 <_Bfree>
 8013d50:	e699      	b.n	8013a86 <_dtoa_r+0x5be>
 8013d52:	2400      	movs	r4, #0
 8013d54:	4627      	mov	r7, r4
 8013d56:	e7e0      	b.n	8013d1a <_dtoa_r+0x852>
 8013d58:	46bb      	mov	fp, r7
 8013d5a:	4604      	mov	r4, r0
 8013d5c:	4607      	mov	r7, r0
 8013d5e:	e5c7      	b.n	80138f0 <_dtoa_r+0x428>
 8013d60:	9b07      	ldr	r3, [sp, #28]
 8013d62:	46ca      	mov	sl, r9
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f000 8100 	beq.w	8013f6a <_dtoa_r+0xaa2>
 8013d6a:	f1b8 0f00 	cmp.w	r8, #0
 8013d6e:	dd05      	ble.n	8013d7c <_dtoa_r+0x8b4>
 8013d70:	4639      	mov	r1, r7
 8013d72:	4642      	mov	r2, r8
 8013d74:	4630      	mov	r0, r6
 8013d76:	f000 fd61 	bl	801483c <__lshift>
 8013d7a:	4607      	mov	r7, r0
 8013d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d05d      	beq.n	8013e3e <_dtoa_r+0x976>
 8013d82:	6879      	ldr	r1, [r7, #4]
 8013d84:	4630      	mov	r0, r6
 8013d86:	f000 fb47 	bl	8014418 <_Balloc>
 8013d8a:	4680      	mov	r8, r0
 8013d8c:	b928      	cbnz	r0, 8013d9a <_dtoa_r+0x8d2>
 8013d8e:	4b82      	ldr	r3, [pc, #520]	; (8013f98 <_dtoa_r+0xad0>)
 8013d90:	4602      	mov	r2, r0
 8013d92:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013d96:	f7ff bbaf 	b.w	80134f8 <_dtoa_r+0x30>
 8013d9a:	693a      	ldr	r2, [r7, #16]
 8013d9c:	3202      	adds	r2, #2
 8013d9e:	0092      	lsls	r2, r2, #2
 8013da0:	f107 010c 	add.w	r1, r7, #12
 8013da4:	300c      	adds	r0, #12
 8013da6:	f000 fb29 	bl	80143fc <memcpy>
 8013daa:	2201      	movs	r2, #1
 8013dac:	4641      	mov	r1, r8
 8013dae:	4630      	mov	r0, r6
 8013db0:	f000 fd44 	bl	801483c <__lshift>
 8013db4:	9b01      	ldr	r3, [sp, #4]
 8013db6:	3301      	adds	r3, #1
 8013db8:	9304      	str	r3, [sp, #16]
 8013dba:	9b01      	ldr	r3, [sp, #4]
 8013dbc:	4453      	add	r3, sl
 8013dbe:	9308      	str	r3, [sp, #32]
 8013dc0:	9b02      	ldr	r3, [sp, #8]
 8013dc2:	f003 0301 	and.w	r3, r3, #1
 8013dc6:	46b9      	mov	r9, r7
 8013dc8:	9307      	str	r3, [sp, #28]
 8013dca:	4607      	mov	r7, r0
 8013dcc:	9b04      	ldr	r3, [sp, #16]
 8013dce:	4621      	mov	r1, r4
 8013dd0:	3b01      	subs	r3, #1
 8013dd2:	4628      	mov	r0, r5
 8013dd4:	9302      	str	r3, [sp, #8]
 8013dd6:	f7ff faeb 	bl	80133b0 <quorem>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	3330      	adds	r3, #48	; 0x30
 8013dde:	9005      	str	r0, [sp, #20]
 8013de0:	4649      	mov	r1, r9
 8013de2:	4628      	mov	r0, r5
 8013de4:	9309      	str	r3, [sp, #36]	; 0x24
 8013de6:	f000 fd99 	bl	801491c <__mcmp>
 8013dea:	463a      	mov	r2, r7
 8013dec:	4682      	mov	sl, r0
 8013dee:	4621      	mov	r1, r4
 8013df0:	4630      	mov	r0, r6
 8013df2:	f000 fdaf 	bl	8014954 <__mdiff>
 8013df6:	68c2      	ldr	r2, [r0, #12]
 8013df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dfa:	4680      	mov	r8, r0
 8013dfc:	bb0a      	cbnz	r2, 8013e42 <_dtoa_r+0x97a>
 8013dfe:	4601      	mov	r1, r0
 8013e00:	4628      	mov	r0, r5
 8013e02:	f000 fd8b 	bl	801491c <__mcmp>
 8013e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e08:	4602      	mov	r2, r0
 8013e0a:	4641      	mov	r1, r8
 8013e0c:	4630      	mov	r0, r6
 8013e0e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013e12:	f000 fb41 	bl	8014498 <_Bfree>
 8013e16:	9b06      	ldr	r3, [sp, #24]
 8013e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e1a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013e1e:	ea43 0102 	orr.w	r1, r3, r2
 8013e22:	9b07      	ldr	r3, [sp, #28]
 8013e24:	430b      	orrs	r3, r1
 8013e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e28:	d10d      	bne.n	8013e46 <_dtoa_r+0x97e>
 8013e2a:	2b39      	cmp	r3, #57	; 0x39
 8013e2c:	d029      	beq.n	8013e82 <_dtoa_r+0x9ba>
 8013e2e:	f1ba 0f00 	cmp.w	sl, #0
 8013e32:	dd01      	ble.n	8013e38 <_dtoa_r+0x970>
 8013e34:	9b05      	ldr	r3, [sp, #20]
 8013e36:	3331      	adds	r3, #49	; 0x31
 8013e38:	9a02      	ldr	r2, [sp, #8]
 8013e3a:	7013      	strb	r3, [r2, #0]
 8013e3c:	e774      	b.n	8013d28 <_dtoa_r+0x860>
 8013e3e:	4638      	mov	r0, r7
 8013e40:	e7b8      	b.n	8013db4 <_dtoa_r+0x8ec>
 8013e42:	2201      	movs	r2, #1
 8013e44:	e7e1      	b.n	8013e0a <_dtoa_r+0x942>
 8013e46:	f1ba 0f00 	cmp.w	sl, #0
 8013e4a:	db06      	blt.n	8013e5a <_dtoa_r+0x992>
 8013e4c:	9906      	ldr	r1, [sp, #24]
 8013e4e:	ea41 0a0a 	orr.w	sl, r1, sl
 8013e52:	9907      	ldr	r1, [sp, #28]
 8013e54:	ea5a 0101 	orrs.w	r1, sl, r1
 8013e58:	d120      	bne.n	8013e9c <_dtoa_r+0x9d4>
 8013e5a:	2a00      	cmp	r2, #0
 8013e5c:	ddec      	ble.n	8013e38 <_dtoa_r+0x970>
 8013e5e:	4629      	mov	r1, r5
 8013e60:	2201      	movs	r2, #1
 8013e62:	4630      	mov	r0, r6
 8013e64:	9304      	str	r3, [sp, #16]
 8013e66:	f000 fce9 	bl	801483c <__lshift>
 8013e6a:	4621      	mov	r1, r4
 8013e6c:	4605      	mov	r5, r0
 8013e6e:	f000 fd55 	bl	801491c <__mcmp>
 8013e72:	2800      	cmp	r0, #0
 8013e74:	9b04      	ldr	r3, [sp, #16]
 8013e76:	dc02      	bgt.n	8013e7e <_dtoa_r+0x9b6>
 8013e78:	d1de      	bne.n	8013e38 <_dtoa_r+0x970>
 8013e7a:	07da      	lsls	r2, r3, #31
 8013e7c:	d5dc      	bpl.n	8013e38 <_dtoa_r+0x970>
 8013e7e:	2b39      	cmp	r3, #57	; 0x39
 8013e80:	d1d8      	bne.n	8013e34 <_dtoa_r+0x96c>
 8013e82:	9a02      	ldr	r2, [sp, #8]
 8013e84:	2339      	movs	r3, #57	; 0x39
 8013e86:	7013      	strb	r3, [r2, #0]
 8013e88:	4643      	mov	r3, r8
 8013e8a:	4698      	mov	r8, r3
 8013e8c:	3b01      	subs	r3, #1
 8013e8e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013e92:	2a39      	cmp	r2, #57	; 0x39
 8013e94:	d051      	beq.n	8013f3a <_dtoa_r+0xa72>
 8013e96:	3201      	adds	r2, #1
 8013e98:	701a      	strb	r2, [r3, #0]
 8013e9a:	e745      	b.n	8013d28 <_dtoa_r+0x860>
 8013e9c:	2a00      	cmp	r2, #0
 8013e9e:	dd03      	ble.n	8013ea8 <_dtoa_r+0x9e0>
 8013ea0:	2b39      	cmp	r3, #57	; 0x39
 8013ea2:	d0ee      	beq.n	8013e82 <_dtoa_r+0x9ba>
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	e7c7      	b.n	8013e38 <_dtoa_r+0x970>
 8013ea8:	9a04      	ldr	r2, [sp, #16]
 8013eaa:	9908      	ldr	r1, [sp, #32]
 8013eac:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013eb0:	428a      	cmp	r2, r1
 8013eb2:	d02b      	beq.n	8013f0c <_dtoa_r+0xa44>
 8013eb4:	4629      	mov	r1, r5
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	220a      	movs	r2, #10
 8013eba:	4630      	mov	r0, r6
 8013ebc:	f000 fb0e 	bl	80144dc <__multadd>
 8013ec0:	45b9      	cmp	r9, r7
 8013ec2:	4605      	mov	r5, r0
 8013ec4:	f04f 0300 	mov.w	r3, #0
 8013ec8:	f04f 020a 	mov.w	r2, #10
 8013ecc:	4649      	mov	r1, r9
 8013ece:	4630      	mov	r0, r6
 8013ed0:	d107      	bne.n	8013ee2 <_dtoa_r+0xa1a>
 8013ed2:	f000 fb03 	bl	80144dc <__multadd>
 8013ed6:	4681      	mov	r9, r0
 8013ed8:	4607      	mov	r7, r0
 8013eda:	9b04      	ldr	r3, [sp, #16]
 8013edc:	3301      	adds	r3, #1
 8013ede:	9304      	str	r3, [sp, #16]
 8013ee0:	e774      	b.n	8013dcc <_dtoa_r+0x904>
 8013ee2:	f000 fafb 	bl	80144dc <__multadd>
 8013ee6:	4639      	mov	r1, r7
 8013ee8:	4681      	mov	r9, r0
 8013eea:	2300      	movs	r3, #0
 8013eec:	220a      	movs	r2, #10
 8013eee:	4630      	mov	r0, r6
 8013ef0:	f000 faf4 	bl	80144dc <__multadd>
 8013ef4:	4607      	mov	r7, r0
 8013ef6:	e7f0      	b.n	8013eda <_dtoa_r+0xa12>
 8013ef8:	f1ba 0f00 	cmp.w	sl, #0
 8013efc:	9a01      	ldr	r2, [sp, #4]
 8013efe:	bfcc      	ite	gt
 8013f00:	46d0      	movgt	r8, sl
 8013f02:	f04f 0801 	movle.w	r8, #1
 8013f06:	4490      	add	r8, r2
 8013f08:	f04f 0900 	mov.w	r9, #0
 8013f0c:	4629      	mov	r1, r5
 8013f0e:	2201      	movs	r2, #1
 8013f10:	4630      	mov	r0, r6
 8013f12:	9302      	str	r3, [sp, #8]
 8013f14:	f000 fc92 	bl	801483c <__lshift>
 8013f18:	4621      	mov	r1, r4
 8013f1a:	4605      	mov	r5, r0
 8013f1c:	f000 fcfe 	bl	801491c <__mcmp>
 8013f20:	2800      	cmp	r0, #0
 8013f22:	dcb1      	bgt.n	8013e88 <_dtoa_r+0x9c0>
 8013f24:	d102      	bne.n	8013f2c <_dtoa_r+0xa64>
 8013f26:	9b02      	ldr	r3, [sp, #8]
 8013f28:	07db      	lsls	r3, r3, #31
 8013f2a:	d4ad      	bmi.n	8013e88 <_dtoa_r+0x9c0>
 8013f2c:	4643      	mov	r3, r8
 8013f2e:	4698      	mov	r8, r3
 8013f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f34:	2a30      	cmp	r2, #48	; 0x30
 8013f36:	d0fa      	beq.n	8013f2e <_dtoa_r+0xa66>
 8013f38:	e6f6      	b.n	8013d28 <_dtoa_r+0x860>
 8013f3a:	9a01      	ldr	r2, [sp, #4]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d1a4      	bne.n	8013e8a <_dtoa_r+0x9c2>
 8013f40:	f10b 0b01 	add.w	fp, fp, #1
 8013f44:	2331      	movs	r3, #49	; 0x31
 8013f46:	e778      	b.n	8013e3a <_dtoa_r+0x972>
 8013f48:	4b14      	ldr	r3, [pc, #80]	; (8013f9c <_dtoa_r+0xad4>)
 8013f4a:	f7ff bb27 	b.w	801359c <_dtoa_r+0xd4>
 8013f4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	f47f ab03 	bne.w	801355c <_dtoa_r+0x94>
 8013f56:	4b12      	ldr	r3, [pc, #72]	; (8013fa0 <_dtoa_r+0xad8>)
 8013f58:	f7ff bb20 	b.w	801359c <_dtoa_r+0xd4>
 8013f5c:	f1ba 0f00 	cmp.w	sl, #0
 8013f60:	dc03      	bgt.n	8013f6a <_dtoa_r+0xaa2>
 8013f62:	9b06      	ldr	r3, [sp, #24]
 8013f64:	2b02      	cmp	r3, #2
 8013f66:	f73f aec7 	bgt.w	8013cf8 <_dtoa_r+0x830>
 8013f6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013f6e:	4621      	mov	r1, r4
 8013f70:	4628      	mov	r0, r5
 8013f72:	f7ff fa1d 	bl	80133b0 <quorem>
 8013f76:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013f7a:	f808 3b01 	strb.w	r3, [r8], #1
 8013f7e:	9a01      	ldr	r2, [sp, #4]
 8013f80:	eba8 0202 	sub.w	r2, r8, r2
 8013f84:	4592      	cmp	sl, r2
 8013f86:	ddb7      	ble.n	8013ef8 <_dtoa_r+0xa30>
 8013f88:	4629      	mov	r1, r5
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	220a      	movs	r2, #10
 8013f8e:	4630      	mov	r0, r6
 8013f90:	f000 faa4 	bl	80144dc <__multadd>
 8013f94:	4605      	mov	r5, r0
 8013f96:	e7ea      	b.n	8013f6e <_dtoa_r+0xaa6>
 8013f98:	08016eb7 	.word	0x08016eb7
 8013f9c:	08016e14 	.word	0x08016e14
 8013fa0:	08016e38 	.word	0x08016e38

08013fa4 <__sflush_r>:
 8013fa4:	898a      	ldrh	r2, [r1, #12]
 8013fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013faa:	4605      	mov	r5, r0
 8013fac:	0710      	lsls	r0, r2, #28
 8013fae:	460c      	mov	r4, r1
 8013fb0:	d458      	bmi.n	8014064 <__sflush_r+0xc0>
 8013fb2:	684b      	ldr	r3, [r1, #4]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	dc05      	bgt.n	8013fc4 <__sflush_r+0x20>
 8013fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	dc02      	bgt.n	8013fc4 <__sflush_r+0x20>
 8013fbe:	2000      	movs	r0, #0
 8013fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013fc6:	2e00      	cmp	r6, #0
 8013fc8:	d0f9      	beq.n	8013fbe <__sflush_r+0x1a>
 8013fca:	2300      	movs	r3, #0
 8013fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013fd0:	682f      	ldr	r7, [r5, #0]
 8013fd2:	602b      	str	r3, [r5, #0]
 8013fd4:	d032      	beq.n	801403c <__sflush_r+0x98>
 8013fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013fd8:	89a3      	ldrh	r3, [r4, #12]
 8013fda:	075a      	lsls	r2, r3, #29
 8013fdc:	d505      	bpl.n	8013fea <__sflush_r+0x46>
 8013fde:	6863      	ldr	r3, [r4, #4]
 8013fe0:	1ac0      	subs	r0, r0, r3
 8013fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013fe4:	b10b      	cbz	r3, 8013fea <__sflush_r+0x46>
 8013fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013fe8:	1ac0      	subs	r0, r0, r3
 8013fea:	2300      	movs	r3, #0
 8013fec:	4602      	mov	r2, r0
 8013fee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ff0:	6a21      	ldr	r1, [r4, #32]
 8013ff2:	4628      	mov	r0, r5
 8013ff4:	47b0      	blx	r6
 8013ff6:	1c43      	adds	r3, r0, #1
 8013ff8:	89a3      	ldrh	r3, [r4, #12]
 8013ffa:	d106      	bne.n	801400a <__sflush_r+0x66>
 8013ffc:	6829      	ldr	r1, [r5, #0]
 8013ffe:	291d      	cmp	r1, #29
 8014000:	d82c      	bhi.n	801405c <__sflush_r+0xb8>
 8014002:	4a2a      	ldr	r2, [pc, #168]	; (80140ac <__sflush_r+0x108>)
 8014004:	40ca      	lsrs	r2, r1
 8014006:	07d6      	lsls	r6, r2, #31
 8014008:	d528      	bpl.n	801405c <__sflush_r+0xb8>
 801400a:	2200      	movs	r2, #0
 801400c:	6062      	str	r2, [r4, #4]
 801400e:	04d9      	lsls	r1, r3, #19
 8014010:	6922      	ldr	r2, [r4, #16]
 8014012:	6022      	str	r2, [r4, #0]
 8014014:	d504      	bpl.n	8014020 <__sflush_r+0x7c>
 8014016:	1c42      	adds	r2, r0, #1
 8014018:	d101      	bne.n	801401e <__sflush_r+0x7a>
 801401a:	682b      	ldr	r3, [r5, #0]
 801401c:	b903      	cbnz	r3, 8014020 <__sflush_r+0x7c>
 801401e:	6560      	str	r0, [r4, #84]	; 0x54
 8014020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014022:	602f      	str	r7, [r5, #0]
 8014024:	2900      	cmp	r1, #0
 8014026:	d0ca      	beq.n	8013fbe <__sflush_r+0x1a>
 8014028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801402c:	4299      	cmp	r1, r3
 801402e:	d002      	beq.n	8014036 <__sflush_r+0x92>
 8014030:	4628      	mov	r0, r5
 8014032:	f000 fd8b 	bl	8014b4c <_free_r>
 8014036:	2000      	movs	r0, #0
 8014038:	6360      	str	r0, [r4, #52]	; 0x34
 801403a:	e7c1      	b.n	8013fc0 <__sflush_r+0x1c>
 801403c:	6a21      	ldr	r1, [r4, #32]
 801403e:	2301      	movs	r3, #1
 8014040:	4628      	mov	r0, r5
 8014042:	47b0      	blx	r6
 8014044:	1c41      	adds	r1, r0, #1
 8014046:	d1c7      	bne.n	8013fd8 <__sflush_r+0x34>
 8014048:	682b      	ldr	r3, [r5, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d0c4      	beq.n	8013fd8 <__sflush_r+0x34>
 801404e:	2b1d      	cmp	r3, #29
 8014050:	d001      	beq.n	8014056 <__sflush_r+0xb2>
 8014052:	2b16      	cmp	r3, #22
 8014054:	d101      	bne.n	801405a <__sflush_r+0xb6>
 8014056:	602f      	str	r7, [r5, #0]
 8014058:	e7b1      	b.n	8013fbe <__sflush_r+0x1a>
 801405a:	89a3      	ldrh	r3, [r4, #12]
 801405c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014060:	81a3      	strh	r3, [r4, #12]
 8014062:	e7ad      	b.n	8013fc0 <__sflush_r+0x1c>
 8014064:	690f      	ldr	r7, [r1, #16]
 8014066:	2f00      	cmp	r7, #0
 8014068:	d0a9      	beq.n	8013fbe <__sflush_r+0x1a>
 801406a:	0793      	lsls	r3, r2, #30
 801406c:	680e      	ldr	r6, [r1, #0]
 801406e:	bf08      	it	eq
 8014070:	694b      	ldreq	r3, [r1, #20]
 8014072:	600f      	str	r7, [r1, #0]
 8014074:	bf18      	it	ne
 8014076:	2300      	movne	r3, #0
 8014078:	eba6 0807 	sub.w	r8, r6, r7
 801407c:	608b      	str	r3, [r1, #8]
 801407e:	f1b8 0f00 	cmp.w	r8, #0
 8014082:	dd9c      	ble.n	8013fbe <__sflush_r+0x1a>
 8014084:	6a21      	ldr	r1, [r4, #32]
 8014086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014088:	4643      	mov	r3, r8
 801408a:	463a      	mov	r2, r7
 801408c:	4628      	mov	r0, r5
 801408e:	47b0      	blx	r6
 8014090:	2800      	cmp	r0, #0
 8014092:	dc06      	bgt.n	80140a2 <__sflush_r+0xfe>
 8014094:	89a3      	ldrh	r3, [r4, #12]
 8014096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801409a:	81a3      	strh	r3, [r4, #12]
 801409c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140a0:	e78e      	b.n	8013fc0 <__sflush_r+0x1c>
 80140a2:	4407      	add	r7, r0
 80140a4:	eba8 0800 	sub.w	r8, r8, r0
 80140a8:	e7e9      	b.n	801407e <__sflush_r+0xda>
 80140aa:	bf00      	nop
 80140ac:	20400001 	.word	0x20400001

080140b0 <_fflush_r>:
 80140b0:	b538      	push	{r3, r4, r5, lr}
 80140b2:	690b      	ldr	r3, [r1, #16]
 80140b4:	4605      	mov	r5, r0
 80140b6:	460c      	mov	r4, r1
 80140b8:	b913      	cbnz	r3, 80140c0 <_fflush_r+0x10>
 80140ba:	2500      	movs	r5, #0
 80140bc:	4628      	mov	r0, r5
 80140be:	bd38      	pop	{r3, r4, r5, pc}
 80140c0:	b118      	cbz	r0, 80140ca <_fflush_r+0x1a>
 80140c2:	6983      	ldr	r3, [r0, #24]
 80140c4:	b90b      	cbnz	r3, 80140ca <_fflush_r+0x1a>
 80140c6:	f000 f887 	bl	80141d8 <__sinit>
 80140ca:	4b14      	ldr	r3, [pc, #80]	; (801411c <_fflush_r+0x6c>)
 80140cc:	429c      	cmp	r4, r3
 80140ce:	d11b      	bne.n	8014108 <_fflush_r+0x58>
 80140d0:	686c      	ldr	r4, [r5, #4]
 80140d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d0ef      	beq.n	80140ba <_fflush_r+0xa>
 80140da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80140dc:	07d0      	lsls	r0, r2, #31
 80140de:	d404      	bmi.n	80140ea <_fflush_r+0x3a>
 80140e0:	0599      	lsls	r1, r3, #22
 80140e2:	d402      	bmi.n	80140ea <_fflush_r+0x3a>
 80140e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140e6:	f000 f91a 	bl	801431e <__retarget_lock_acquire_recursive>
 80140ea:	4628      	mov	r0, r5
 80140ec:	4621      	mov	r1, r4
 80140ee:	f7ff ff59 	bl	8013fa4 <__sflush_r>
 80140f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140f4:	07da      	lsls	r2, r3, #31
 80140f6:	4605      	mov	r5, r0
 80140f8:	d4e0      	bmi.n	80140bc <_fflush_r+0xc>
 80140fa:	89a3      	ldrh	r3, [r4, #12]
 80140fc:	059b      	lsls	r3, r3, #22
 80140fe:	d4dd      	bmi.n	80140bc <_fflush_r+0xc>
 8014100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014102:	f000 f90d 	bl	8014320 <__retarget_lock_release_recursive>
 8014106:	e7d9      	b.n	80140bc <_fflush_r+0xc>
 8014108:	4b05      	ldr	r3, [pc, #20]	; (8014120 <_fflush_r+0x70>)
 801410a:	429c      	cmp	r4, r3
 801410c:	d101      	bne.n	8014112 <_fflush_r+0x62>
 801410e:	68ac      	ldr	r4, [r5, #8]
 8014110:	e7df      	b.n	80140d2 <_fflush_r+0x22>
 8014112:	4b04      	ldr	r3, [pc, #16]	; (8014124 <_fflush_r+0x74>)
 8014114:	429c      	cmp	r4, r3
 8014116:	bf08      	it	eq
 8014118:	68ec      	ldreq	r4, [r5, #12]
 801411a:	e7da      	b.n	80140d2 <_fflush_r+0x22>
 801411c:	08016ee8 	.word	0x08016ee8
 8014120:	08016f08 	.word	0x08016f08
 8014124:	08016ec8 	.word	0x08016ec8

08014128 <std>:
 8014128:	2300      	movs	r3, #0
 801412a:	b510      	push	{r4, lr}
 801412c:	4604      	mov	r4, r0
 801412e:	e9c0 3300 	strd	r3, r3, [r0]
 8014132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014136:	6083      	str	r3, [r0, #8]
 8014138:	8181      	strh	r1, [r0, #12]
 801413a:	6643      	str	r3, [r0, #100]	; 0x64
 801413c:	81c2      	strh	r2, [r0, #14]
 801413e:	6183      	str	r3, [r0, #24]
 8014140:	4619      	mov	r1, r3
 8014142:	2208      	movs	r2, #8
 8014144:	305c      	adds	r0, #92	; 0x5c
 8014146:	f7fe fbb3 	bl	80128b0 <memset>
 801414a:	4b05      	ldr	r3, [pc, #20]	; (8014160 <std+0x38>)
 801414c:	6263      	str	r3, [r4, #36]	; 0x24
 801414e:	4b05      	ldr	r3, [pc, #20]	; (8014164 <std+0x3c>)
 8014150:	62a3      	str	r3, [r4, #40]	; 0x28
 8014152:	4b05      	ldr	r3, [pc, #20]	; (8014168 <std+0x40>)
 8014154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014156:	4b05      	ldr	r3, [pc, #20]	; (801416c <std+0x44>)
 8014158:	6224      	str	r4, [r4, #32]
 801415a:	6323      	str	r3, [r4, #48]	; 0x30
 801415c:	bd10      	pop	{r4, pc}
 801415e:	bf00      	nop
 8014160:	08014d2d 	.word	0x08014d2d
 8014164:	08014d4f 	.word	0x08014d4f
 8014168:	08014d87 	.word	0x08014d87
 801416c:	08014dab 	.word	0x08014dab

08014170 <_cleanup_r>:
 8014170:	4901      	ldr	r1, [pc, #4]	; (8014178 <_cleanup_r+0x8>)
 8014172:	f000 b8af 	b.w	80142d4 <_fwalk_reent>
 8014176:	bf00      	nop
 8014178:	080140b1 	.word	0x080140b1

0801417c <__sfmoreglue>:
 801417c:	b570      	push	{r4, r5, r6, lr}
 801417e:	2268      	movs	r2, #104	; 0x68
 8014180:	1e4d      	subs	r5, r1, #1
 8014182:	4355      	muls	r5, r2
 8014184:	460e      	mov	r6, r1
 8014186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801418a:	f000 fd4b 	bl	8014c24 <_malloc_r>
 801418e:	4604      	mov	r4, r0
 8014190:	b140      	cbz	r0, 80141a4 <__sfmoreglue+0x28>
 8014192:	2100      	movs	r1, #0
 8014194:	e9c0 1600 	strd	r1, r6, [r0]
 8014198:	300c      	adds	r0, #12
 801419a:	60a0      	str	r0, [r4, #8]
 801419c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80141a0:	f7fe fb86 	bl	80128b0 <memset>
 80141a4:	4620      	mov	r0, r4
 80141a6:	bd70      	pop	{r4, r5, r6, pc}

080141a8 <__sfp_lock_acquire>:
 80141a8:	4801      	ldr	r0, [pc, #4]	; (80141b0 <__sfp_lock_acquire+0x8>)
 80141aa:	f000 b8b8 	b.w	801431e <__retarget_lock_acquire_recursive>
 80141ae:	bf00      	nop
 80141b0:	24001755 	.word	0x24001755

080141b4 <__sfp_lock_release>:
 80141b4:	4801      	ldr	r0, [pc, #4]	; (80141bc <__sfp_lock_release+0x8>)
 80141b6:	f000 b8b3 	b.w	8014320 <__retarget_lock_release_recursive>
 80141ba:	bf00      	nop
 80141bc:	24001755 	.word	0x24001755

080141c0 <__sinit_lock_acquire>:
 80141c0:	4801      	ldr	r0, [pc, #4]	; (80141c8 <__sinit_lock_acquire+0x8>)
 80141c2:	f000 b8ac 	b.w	801431e <__retarget_lock_acquire_recursive>
 80141c6:	bf00      	nop
 80141c8:	24001756 	.word	0x24001756

080141cc <__sinit_lock_release>:
 80141cc:	4801      	ldr	r0, [pc, #4]	; (80141d4 <__sinit_lock_release+0x8>)
 80141ce:	f000 b8a7 	b.w	8014320 <__retarget_lock_release_recursive>
 80141d2:	bf00      	nop
 80141d4:	24001756 	.word	0x24001756

080141d8 <__sinit>:
 80141d8:	b510      	push	{r4, lr}
 80141da:	4604      	mov	r4, r0
 80141dc:	f7ff fff0 	bl	80141c0 <__sinit_lock_acquire>
 80141e0:	69a3      	ldr	r3, [r4, #24]
 80141e2:	b11b      	cbz	r3, 80141ec <__sinit+0x14>
 80141e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141e8:	f7ff bff0 	b.w	80141cc <__sinit_lock_release>
 80141ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80141f0:	6523      	str	r3, [r4, #80]	; 0x50
 80141f2:	4b13      	ldr	r3, [pc, #76]	; (8014240 <__sinit+0x68>)
 80141f4:	4a13      	ldr	r2, [pc, #76]	; (8014244 <__sinit+0x6c>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80141fa:	42a3      	cmp	r3, r4
 80141fc:	bf04      	itt	eq
 80141fe:	2301      	moveq	r3, #1
 8014200:	61a3      	streq	r3, [r4, #24]
 8014202:	4620      	mov	r0, r4
 8014204:	f000 f820 	bl	8014248 <__sfp>
 8014208:	6060      	str	r0, [r4, #4]
 801420a:	4620      	mov	r0, r4
 801420c:	f000 f81c 	bl	8014248 <__sfp>
 8014210:	60a0      	str	r0, [r4, #8]
 8014212:	4620      	mov	r0, r4
 8014214:	f000 f818 	bl	8014248 <__sfp>
 8014218:	2200      	movs	r2, #0
 801421a:	60e0      	str	r0, [r4, #12]
 801421c:	2104      	movs	r1, #4
 801421e:	6860      	ldr	r0, [r4, #4]
 8014220:	f7ff ff82 	bl	8014128 <std>
 8014224:	68a0      	ldr	r0, [r4, #8]
 8014226:	2201      	movs	r2, #1
 8014228:	2109      	movs	r1, #9
 801422a:	f7ff ff7d 	bl	8014128 <std>
 801422e:	68e0      	ldr	r0, [r4, #12]
 8014230:	2202      	movs	r2, #2
 8014232:	2112      	movs	r1, #18
 8014234:	f7ff ff78 	bl	8014128 <std>
 8014238:	2301      	movs	r3, #1
 801423a:	61a3      	str	r3, [r4, #24]
 801423c:	e7d2      	b.n	80141e4 <__sinit+0xc>
 801423e:	bf00      	nop
 8014240:	08016e00 	.word	0x08016e00
 8014244:	08014171 	.word	0x08014171

08014248 <__sfp>:
 8014248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801424a:	4607      	mov	r7, r0
 801424c:	f7ff ffac 	bl	80141a8 <__sfp_lock_acquire>
 8014250:	4b1e      	ldr	r3, [pc, #120]	; (80142cc <__sfp+0x84>)
 8014252:	681e      	ldr	r6, [r3, #0]
 8014254:	69b3      	ldr	r3, [r6, #24]
 8014256:	b913      	cbnz	r3, 801425e <__sfp+0x16>
 8014258:	4630      	mov	r0, r6
 801425a:	f7ff ffbd 	bl	80141d8 <__sinit>
 801425e:	3648      	adds	r6, #72	; 0x48
 8014260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014264:	3b01      	subs	r3, #1
 8014266:	d503      	bpl.n	8014270 <__sfp+0x28>
 8014268:	6833      	ldr	r3, [r6, #0]
 801426a:	b30b      	cbz	r3, 80142b0 <__sfp+0x68>
 801426c:	6836      	ldr	r6, [r6, #0]
 801426e:	e7f7      	b.n	8014260 <__sfp+0x18>
 8014270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014274:	b9d5      	cbnz	r5, 80142ac <__sfp+0x64>
 8014276:	4b16      	ldr	r3, [pc, #88]	; (80142d0 <__sfp+0x88>)
 8014278:	60e3      	str	r3, [r4, #12]
 801427a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801427e:	6665      	str	r5, [r4, #100]	; 0x64
 8014280:	f000 f84c 	bl	801431c <__retarget_lock_init_recursive>
 8014284:	f7ff ff96 	bl	80141b4 <__sfp_lock_release>
 8014288:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801428c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014290:	6025      	str	r5, [r4, #0]
 8014292:	61a5      	str	r5, [r4, #24]
 8014294:	2208      	movs	r2, #8
 8014296:	4629      	mov	r1, r5
 8014298:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801429c:	f7fe fb08 	bl	80128b0 <memset>
 80142a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80142a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80142a8:	4620      	mov	r0, r4
 80142aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142ac:	3468      	adds	r4, #104	; 0x68
 80142ae:	e7d9      	b.n	8014264 <__sfp+0x1c>
 80142b0:	2104      	movs	r1, #4
 80142b2:	4638      	mov	r0, r7
 80142b4:	f7ff ff62 	bl	801417c <__sfmoreglue>
 80142b8:	4604      	mov	r4, r0
 80142ba:	6030      	str	r0, [r6, #0]
 80142bc:	2800      	cmp	r0, #0
 80142be:	d1d5      	bne.n	801426c <__sfp+0x24>
 80142c0:	f7ff ff78 	bl	80141b4 <__sfp_lock_release>
 80142c4:	230c      	movs	r3, #12
 80142c6:	603b      	str	r3, [r7, #0]
 80142c8:	e7ee      	b.n	80142a8 <__sfp+0x60>
 80142ca:	bf00      	nop
 80142cc:	08016e00 	.word	0x08016e00
 80142d0:	ffff0001 	.word	0xffff0001

080142d4 <_fwalk_reent>:
 80142d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142d8:	4606      	mov	r6, r0
 80142da:	4688      	mov	r8, r1
 80142dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80142e0:	2700      	movs	r7, #0
 80142e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80142e6:	f1b9 0901 	subs.w	r9, r9, #1
 80142ea:	d505      	bpl.n	80142f8 <_fwalk_reent+0x24>
 80142ec:	6824      	ldr	r4, [r4, #0]
 80142ee:	2c00      	cmp	r4, #0
 80142f0:	d1f7      	bne.n	80142e2 <_fwalk_reent+0xe>
 80142f2:	4638      	mov	r0, r7
 80142f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142f8:	89ab      	ldrh	r3, [r5, #12]
 80142fa:	2b01      	cmp	r3, #1
 80142fc:	d907      	bls.n	801430e <_fwalk_reent+0x3a>
 80142fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014302:	3301      	adds	r3, #1
 8014304:	d003      	beq.n	801430e <_fwalk_reent+0x3a>
 8014306:	4629      	mov	r1, r5
 8014308:	4630      	mov	r0, r6
 801430a:	47c0      	blx	r8
 801430c:	4307      	orrs	r7, r0
 801430e:	3568      	adds	r5, #104	; 0x68
 8014310:	e7e9      	b.n	80142e6 <_fwalk_reent+0x12>
	...

08014314 <_localeconv_r>:
 8014314:	4800      	ldr	r0, [pc, #0]	; (8014318 <_localeconv_r+0x4>)
 8014316:	4770      	bx	lr
 8014318:	24000398 	.word	0x24000398

0801431c <__retarget_lock_init_recursive>:
 801431c:	4770      	bx	lr

0801431e <__retarget_lock_acquire_recursive>:
 801431e:	4770      	bx	lr

08014320 <__retarget_lock_release_recursive>:
 8014320:	4770      	bx	lr

08014322 <__swhatbuf_r>:
 8014322:	b570      	push	{r4, r5, r6, lr}
 8014324:	460e      	mov	r6, r1
 8014326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801432a:	2900      	cmp	r1, #0
 801432c:	b096      	sub	sp, #88	; 0x58
 801432e:	4614      	mov	r4, r2
 8014330:	461d      	mov	r5, r3
 8014332:	da08      	bge.n	8014346 <__swhatbuf_r+0x24>
 8014334:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014338:	2200      	movs	r2, #0
 801433a:	602a      	str	r2, [r5, #0]
 801433c:	061a      	lsls	r2, r3, #24
 801433e:	d410      	bmi.n	8014362 <__swhatbuf_r+0x40>
 8014340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014344:	e00e      	b.n	8014364 <__swhatbuf_r+0x42>
 8014346:	466a      	mov	r2, sp
 8014348:	f000 fd86 	bl	8014e58 <_fstat_r>
 801434c:	2800      	cmp	r0, #0
 801434e:	dbf1      	blt.n	8014334 <__swhatbuf_r+0x12>
 8014350:	9a01      	ldr	r2, [sp, #4]
 8014352:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014356:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801435a:	425a      	negs	r2, r3
 801435c:	415a      	adcs	r2, r3
 801435e:	602a      	str	r2, [r5, #0]
 8014360:	e7ee      	b.n	8014340 <__swhatbuf_r+0x1e>
 8014362:	2340      	movs	r3, #64	; 0x40
 8014364:	2000      	movs	r0, #0
 8014366:	6023      	str	r3, [r4, #0]
 8014368:	b016      	add	sp, #88	; 0x58
 801436a:	bd70      	pop	{r4, r5, r6, pc}

0801436c <__smakebuf_r>:
 801436c:	898b      	ldrh	r3, [r1, #12]
 801436e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014370:	079d      	lsls	r5, r3, #30
 8014372:	4606      	mov	r6, r0
 8014374:	460c      	mov	r4, r1
 8014376:	d507      	bpl.n	8014388 <__smakebuf_r+0x1c>
 8014378:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801437c:	6023      	str	r3, [r4, #0]
 801437e:	6123      	str	r3, [r4, #16]
 8014380:	2301      	movs	r3, #1
 8014382:	6163      	str	r3, [r4, #20]
 8014384:	b002      	add	sp, #8
 8014386:	bd70      	pop	{r4, r5, r6, pc}
 8014388:	ab01      	add	r3, sp, #4
 801438a:	466a      	mov	r2, sp
 801438c:	f7ff ffc9 	bl	8014322 <__swhatbuf_r>
 8014390:	9900      	ldr	r1, [sp, #0]
 8014392:	4605      	mov	r5, r0
 8014394:	4630      	mov	r0, r6
 8014396:	f000 fc45 	bl	8014c24 <_malloc_r>
 801439a:	b948      	cbnz	r0, 80143b0 <__smakebuf_r+0x44>
 801439c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143a0:	059a      	lsls	r2, r3, #22
 80143a2:	d4ef      	bmi.n	8014384 <__smakebuf_r+0x18>
 80143a4:	f023 0303 	bic.w	r3, r3, #3
 80143a8:	f043 0302 	orr.w	r3, r3, #2
 80143ac:	81a3      	strh	r3, [r4, #12]
 80143ae:	e7e3      	b.n	8014378 <__smakebuf_r+0xc>
 80143b0:	4b0d      	ldr	r3, [pc, #52]	; (80143e8 <__smakebuf_r+0x7c>)
 80143b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80143b4:	89a3      	ldrh	r3, [r4, #12]
 80143b6:	6020      	str	r0, [r4, #0]
 80143b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143bc:	81a3      	strh	r3, [r4, #12]
 80143be:	9b00      	ldr	r3, [sp, #0]
 80143c0:	6163      	str	r3, [r4, #20]
 80143c2:	9b01      	ldr	r3, [sp, #4]
 80143c4:	6120      	str	r0, [r4, #16]
 80143c6:	b15b      	cbz	r3, 80143e0 <__smakebuf_r+0x74>
 80143c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143cc:	4630      	mov	r0, r6
 80143ce:	f000 fd55 	bl	8014e7c <_isatty_r>
 80143d2:	b128      	cbz	r0, 80143e0 <__smakebuf_r+0x74>
 80143d4:	89a3      	ldrh	r3, [r4, #12]
 80143d6:	f023 0303 	bic.w	r3, r3, #3
 80143da:	f043 0301 	orr.w	r3, r3, #1
 80143de:	81a3      	strh	r3, [r4, #12]
 80143e0:	89a0      	ldrh	r0, [r4, #12]
 80143e2:	4305      	orrs	r5, r0
 80143e4:	81a5      	strh	r5, [r4, #12]
 80143e6:	e7cd      	b.n	8014384 <__smakebuf_r+0x18>
 80143e8:	08014171 	.word	0x08014171

080143ec <malloc>:
 80143ec:	4b02      	ldr	r3, [pc, #8]	; (80143f8 <malloc+0xc>)
 80143ee:	4601      	mov	r1, r0
 80143f0:	6818      	ldr	r0, [r3, #0]
 80143f2:	f000 bc17 	b.w	8014c24 <_malloc_r>
 80143f6:	bf00      	nop
 80143f8:	24000244 	.word	0x24000244

080143fc <memcpy>:
 80143fc:	440a      	add	r2, r1
 80143fe:	4291      	cmp	r1, r2
 8014400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014404:	d100      	bne.n	8014408 <memcpy+0xc>
 8014406:	4770      	bx	lr
 8014408:	b510      	push	{r4, lr}
 801440a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801440e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014412:	4291      	cmp	r1, r2
 8014414:	d1f9      	bne.n	801440a <memcpy+0xe>
 8014416:	bd10      	pop	{r4, pc}

08014418 <_Balloc>:
 8014418:	b570      	push	{r4, r5, r6, lr}
 801441a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801441c:	4604      	mov	r4, r0
 801441e:	460d      	mov	r5, r1
 8014420:	b976      	cbnz	r6, 8014440 <_Balloc+0x28>
 8014422:	2010      	movs	r0, #16
 8014424:	f7ff ffe2 	bl	80143ec <malloc>
 8014428:	4602      	mov	r2, r0
 801442a:	6260      	str	r0, [r4, #36]	; 0x24
 801442c:	b920      	cbnz	r0, 8014438 <_Balloc+0x20>
 801442e:	4b18      	ldr	r3, [pc, #96]	; (8014490 <_Balloc+0x78>)
 8014430:	4818      	ldr	r0, [pc, #96]	; (8014494 <_Balloc+0x7c>)
 8014432:	2166      	movs	r1, #102	; 0x66
 8014434:	f000 fcd0 	bl	8014dd8 <__assert_func>
 8014438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801443c:	6006      	str	r6, [r0, #0]
 801443e:	60c6      	str	r6, [r0, #12]
 8014440:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014442:	68f3      	ldr	r3, [r6, #12]
 8014444:	b183      	cbz	r3, 8014468 <_Balloc+0x50>
 8014446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801444e:	b9b8      	cbnz	r0, 8014480 <_Balloc+0x68>
 8014450:	2101      	movs	r1, #1
 8014452:	fa01 f605 	lsl.w	r6, r1, r5
 8014456:	1d72      	adds	r2, r6, #5
 8014458:	0092      	lsls	r2, r2, #2
 801445a:	4620      	mov	r0, r4
 801445c:	f000 fb60 	bl	8014b20 <_calloc_r>
 8014460:	b160      	cbz	r0, 801447c <_Balloc+0x64>
 8014462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014466:	e00e      	b.n	8014486 <_Balloc+0x6e>
 8014468:	2221      	movs	r2, #33	; 0x21
 801446a:	2104      	movs	r1, #4
 801446c:	4620      	mov	r0, r4
 801446e:	f000 fb57 	bl	8014b20 <_calloc_r>
 8014472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014474:	60f0      	str	r0, [r6, #12]
 8014476:	68db      	ldr	r3, [r3, #12]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d1e4      	bne.n	8014446 <_Balloc+0x2e>
 801447c:	2000      	movs	r0, #0
 801447e:	bd70      	pop	{r4, r5, r6, pc}
 8014480:	6802      	ldr	r2, [r0, #0]
 8014482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014486:	2300      	movs	r3, #0
 8014488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801448c:	e7f7      	b.n	801447e <_Balloc+0x66>
 801448e:	bf00      	nop
 8014490:	08016e45 	.word	0x08016e45
 8014494:	08016f28 	.word	0x08016f28

08014498 <_Bfree>:
 8014498:	b570      	push	{r4, r5, r6, lr}
 801449a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801449c:	4605      	mov	r5, r0
 801449e:	460c      	mov	r4, r1
 80144a0:	b976      	cbnz	r6, 80144c0 <_Bfree+0x28>
 80144a2:	2010      	movs	r0, #16
 80144a4:	f7ff ffa2 	bl	80143ec <malloc>
 80144a8:	4602      	mov	r2, r0
 80144aa:	6268      	str	r0, [r5, #36]	; 0x24
 80144ac:	b920      	cbnz	r0, 80144b8 <_Bfree+0x20>
 80144ae:	4b09      	ldr	r3, [pc, #36]	; (80144d4 <_Bfree+0x3c>)
 80144b0:	4809      	ldr	r0, [pc, #36]	; (80144d8 <_Bfree+0x40>)
 80144b2:	218a      	movs	r1, #138	; 0x8a
 80144b4:	f000 fc90 	bl	8014dd8 <__assert_func>
 80144b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80144bc:	6006      	str	r6, [r0, #0]
 80144be:	60c6      	str	r6, [r0, #12]
 80144c0:	b13c      	cbz	r4, 80144d2 <_Bfree+0x3a>
 80144c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80144c4:	6862      	ldr	r2, [r4, #4]
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80144cc:	6021      	str	r1, [r4, #0]
 80144ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80144d2:	bd70      	pop	{r4, r5, r6, pc}
 80144d4:	08016e45 	.word	0x08016e45
 80144d8:	08016f28 	.word	0x08016f28

080144dc <__multadd>:
 80144dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144e0:	690d      	ldr	r5, [r1, #16]
 80144e2:	4607      	mov	r7, r0
 80144e4:	460c      	mov	r4, r1
 80144e6:	461e      	mov	r6, r3
 80144e8:	f101 0c14 	add.w	ip, r1, #20
 80144ec:	2000      	movs	r0, #0
 80144ee:	f8dc 3000 	ldr.w	r3, [ip]
 80144f2:	b299      	uxth	r1, r3
 80144f4:	fb02 6101 	mla	r1, r2, r1, r6
 80144f8:	0c1e      	lsrs	r6, r3, #16
 80144fa:	0c0b      	lsrs	r3, r1, #16
 80144fc:	fb02 3306 	mla	r3, r2, r6, r3
 8014500:	b289      	uxth	r1, r1
 8014502:	3001      	adds	r0, #1
 8014504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014508:	4285      	cmp	r5, r0
 801450a:	f84c 1b04 	str.w	r1, [ip], #4
 801450e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014512:	dcec      	bgt.n	80144ee <__multadd+0x12>
 8014514:	b30e      	cbz	r6, 801455a <__multadd+0x7e>
 8014516:	68a3      	ldr	r3, [r4, #8]
 8014518:	42ab      	cmp	r3, r5
 801451a:	dc19      	bgt.n	8014550 <__multadd+0x74>
 801451c:	6861      	ldr	r1, [r4, #4]
 801451e:	4638      	mov	r0, r7
 8014520:	3101      	adds	r1, #1
 8014522:	f7ff ff79 	bl	8014418 <_Balloc>
 8014526:	4680      	mov	r8, r0
 8014528:	b928      	cbnz	r0, 8014536 <__multadd+0x5a>
 801452a:	4602      	mov	r2, r0
 801452c:	4b0c      	ldr	r3, [pc, #48]	; (8014560 <__multadd+0x84>)
 801452e:	480d      	ldr	r0, [pc, #52]	; (8014564 <__multadd+0x88>)
 8014530:	21b5      	movs	r1, #181	; 0xb5
 8014532:	f000 fc51 	bl	8014dd8 <__assert_func>
 8014536:	6922      	ldr	r2, [r4, #16]
 8014538:	3202      	adds	r2, #2
 801453a:	f104 010c 	add.w	r1, r4, #12
 801453e:	0092      	lsls	r2, r2, #2
 8014540:	300c      	adds	r0, #12
 8014542:	f7ff ff5b 	bl	80143fc <memcpy>
 8014546:	4621      	mov	r1, r4
 8014548:	4638      	mov	r0, r7
 801454a:	f7ff ffa5 	bl	8014498 <_Bfree>
 801454e:	4644      	mov	r4, r8
 8014550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014554:	3501      	adds	r5, #1
 8014556:	615e      	str	r6, [r3, #20]
 8014558:	6125      	str	r5, [r4, #16]
 801455a:	4620      	mov	r0, r4
 801455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014560:	08016eb7 	.word	0x08016eb7
 8014564:	08016f28 	.word	0x08016f28

08014568 <__hi0bits>:
 8014568:	0c03      	lsrs	r3, r0, #16
 801456a:	041b      	lsls	r3, r3, #16
 801456c:	b9d3      	cbnz	r3, 80145a4 <__hi0bits+0x3c>
 801456e:	0400      	lsls	r0, r0, #16
 8014570:	2310      	movs	r3, #16
 8014572:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014576:	bf04      	itt	eq
 8014578:	0200      	lsleq	r0, r0, #8
 801457a:	3308      	addeq	r3, #8
 801457c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014580:	bf04      	itt	eq
 8014582:	0100      	lsleq	r0, r0, #4
 8014584:	3304      	addeq	r3, #4
 8014586:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801458a:	bf04      	itt	eq
 801458c:	0080      	lsleq	r0, r0, #2
 801458e:	3302      	addeq	r3, #2
 8014590:	2800      	cmp	r0, #0
 8014592:	db05      	blt.n	80145a0 <__hi0bits+0x38>
 8014594:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014598:	f103 0301 	add.w	r3, r3, #1
 801459c:	bf08      	it	eq
 801459e:	2320      	moveq	r3, #32
 80145a0:	4618      	mov	r0, r3
 80145a2:	4770      	bx	lr
 80145a4:	2300      	movs	r3, #0
 80145a6:	e7e4      	b.n	8014572 <__hi0bits+0xa>

080145a8 <__lo0bits>:
 80145a8:	6803      	ldr	r3, [r0, #0]
 80145aa:	f013 0207 	ands.w	r2, r3, #7
 80145ae:	4601      	mov	r1, r0
 80145b0:	d00b      	beq.n	80145ca <__lo0bits+0x22>
 80145b2:	07da      	lsls	r2, r3, #31
 80145b4:	d423      	bmi.n	80145fe <__lo0bits+0x56>
 80145b6:	0798      	lsls	r0, r3, #30
 80145b8:	bf49      	itett	mi
 80145ba:	085b      	lsrmi	r3, r3, #1
 80145bc:	089b      	lsrpl	r3, r3, #2
 80145be:	2001      	movmi	r0, #1
 80145c0:	600b      	strmi	r3, [r1, #0]
 80145c2:	bf5c      	itt	pl
 80145c4:	600b      	strpl	r3, [r1, #0]
 80145c6:	2002      	movpl	r0, #2
 80145c8:	4770      	bx	lr
 80145ca:	b298      	uxth	r0, r3
 80145cc:	b9a8      	cbnz	r0, 80145fa <__lo0bits+0x52>
 80145ce:	0c1b      	lsrs	r3, r3, #16
 80145d0:	2010      	movs	r0, #16
 80145d2:	b2da      	uxtb	r2, r3
 80145d4:	b90a      	cbnz	r2, 80145da <__lo0bits+0x32>
 80145d6:	3008      	adds	r0, #8
 80145d8:	0a1b      	lsrs	r3, r3, #8
 80145da:	071a      	lsls	r2, r3, #28
 80145dc:	bf04      	itt	eq
 80145de:	091b      	lsreq	r3, r3, #4
 80145e0:	3004      	addeq	r0, #4
 80145e2:	079a      	lsls	r2, r3, #30
 80145e4:	bf04      	itt	eq
 80145e6:	089b      	lsreq	r3, r3, #2
 80145e8:	3002      	addeq	r0, #2
 80145ea:	07da      	lsls	r2, r3, #31
 80145ec:	d403      	bmi.n	80145f6 <__lo0bits+0x4e>
 80145ee:	085b      	lsrs	r3, r3, #1
 80145f0:	f100 0001 	add.w	r0, r0, #1
 80145f4:	d005      	beq.n	8014602 <__lo0bits+0x5a>
 80145f6:	600b      	str	r3, [r1, #0]
 80145f8:	4770      	bx	lr
 80145fa:	4610      	mov	r0, r2
 80145fc:	e7e9      	b.n	80145d2 <__lo0bits+0x2a>
 80145fe:	2000      	movs	r0, #0
 8014600:	4770      	bx	lr
 8014602:	2020      	movs	r0, #32
 8014604:	4770      	bx	lr
	...

08014608 <__i2b>:
 8014608:	b510      	push	{r4, lr}
 801460a:	460c      	mov	r4, r1
 801460c:	2101      	movs	r1, #1
 801460e:	f7ff ff03 	bl	8014418 <_Balloc>
 8014612:	4602      	mov	r2, r0
 8014614:	b928      	cbnz	r0, 8014622 <__i2b+0x1a>
 8014616:	4b05      	ldr	r3, [pc, #20]	; (801462c <__i2b+0x24>)
 8014618:	4805      	ldr	r0, [pc, #20]	; (8014630 <__i2b+0x28>)
 801461a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801461e:	f000 fbdb 	bl	8014dd8 <__assert_func>
 8014622:	2301      	movs	r3, #1
 8014624:	6144      	str	r4, [r0, #20]
 8014626:	6103      	str	r3, [r0, #16]
 8014628:	bd10      	pop	{r4, pc}
 801462a:	bf00      	nop
 801462c:	08016eb7 	.word	0x08016eb7
 8014630:	08016f28 	.word	0x08016f28

08014634 <__multiply>:
 8014634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014638:	4691      	mov	r9, r2
 801463a:	690a      	ldr	r2, [r1, #16]
 801463c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014640:	429a      	cmp	r2, r3
 8014642:	bfb8      	it	lt
 8014644:	460b      	movlt	r3, r1
 8014646:	460c      	mov	r4, r1
 8014648:	bfbc      	itt	lt
 801464a:	464c      	movlt	r4, r9
 801464c:	4699      	movlt	r9, r3
 801464e:	6927      	ldr	r7, [r4, #16]
 8014650:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014654:	68a3      	ldr	r3, [r4, #8]
 8014656:	6861      	ldr	r1, [r4, #4]
 8014658:	eb07 060a 	add.w	r6, r7, sl
 801465c:	42b3      	cmp	r3, r6
 801465e:	b085      	sub	sp, #20
 8014660:	bfb8      	it	lt
 8014662:	3101      	addlt	r1, #1
 8014664:	f7ff fed8 	bl	8014418 <_Balloc>
 8014668:	b930      	cbnz	r0, 8014678 <__multiply+0x44>
 801466a:	4602      	mov	r2, r0
 801466c:	4b44      	ldr	r3, [pc, #272]	; (8014780 <__multiply+0x14c>)
 801466e:	4845      	ldr	r0, [pc, #276]	; (8014784 <__multiply+0x150>)
 8014670:	f240 115d 	movw	r1, #349	; 0x15d
 8014674:	f000 fbb0 	bl	8014dd8 <__assert_func>
 8014678:	f100 0514 	add.w	r5, r0, #20
 801467c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014680:	462b      	mov	r3, r5
 8014682:	2200      	movs	r2, #0
 8014684:	4543      	cmp	r3, r8
 8014686:	d321      	bcc.n	80146cc <__multiply+0x98>
 8014688:	f104 0314 	add.w	r3, r4, #20
 801468c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014690:	f109 0314 	add.w	r3, r9, #20
 8014694:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014698:	9202      	str	r2, [sp, #8]
 801469a:	1b3a      	subs	r2, r7, r4
 801469c:	3a15      	subs	r2, #21
 801469e:	f022 0203 	bic.w	r2, r2, #3
 80146a2:	3204      	adds	r2, #4
 80146a4:	f104 0115 	add.w	r1, r4, #21
 80146a8:	428f      	cmp	r7, r1
 80146aa:	bf38      	it	cc
 80146ac:	2204      	movcc	r2, #4
 80146ae:	9201      	str	r2, [sp, #4]
 80146b0:	9a02      	ldr	r2, [sp, #8]
 80146b2:	9303      	str	r3, [sp, #12]
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d80c      	bhi.n	80146d2 <__multiply+0x9e>
 80146b8:	2e00      	cmp	r6, #0
 80146ba:	dd03      	ble.n	80146c4 <__multiply+0x90>
 80146bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d05a      	beq.n	801477a <__multiply+0x146>
 80146c4:	6106      	str	r6, [r0, #16]
 80146c6:	b005      	add	sp, #20
 80146c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146cc:	f843 2b04 	str.w	r2, [r3], #4
 80146d0:	e7d8      	b.n	8014684 <__multiply+0x50>
 80146d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80146d6:	f1ba 0f00 	cmp.w	sl, #0
 80146da:	d024      	beq.n	8014726 <__multiply+0xf2>
 80146dc:	f104 0e14 	add.w	lr, r4, #20
 80146e0:	46a9      	mov	r9, r5
 80146e2:	f04f 0c00 	mov.w	ip, #0
 80146e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80146ea:	f8d9 1000 	ldr.w	r1, [r9]
 80146ee:	fa1f fb82 	uxth.w	fp, r2
 80146f2:	b289      	uxth	r1, r1
 80146f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80146f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80146fc:	f8d9 2000 	ldr.w	r2, [r9]
 8014700:	4461      	add	r1, ip
 8014702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014706:	fb0a c20b 	mla	r2, sl, fp, ip
 801470a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801470e:	b289      	uxth	r1, r1
 8014710:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014714:	4577      	cmp	r7, lr
 8014716:	f849 1b04 	str.w	r1, [r9], #4
 801471a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801471e:	d8e2      	bhi.n	80146e6 <__multiply+0xb2>
 8014720:	9a01      	ldr	r2, [sp, #4]
 8014722:	f845 c002 	str.w	ip, [r5, r2]
 8014726:	9a03      	ldr	r2, [sp, #12]
 8014728:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801472c:	3304      	adds	r3, #4
 801472e:	f1b9 0f00 	cmp.w	r9, #0
 8014732:	d020      	beq.n	8014776 <__multiply+0x142>
 8014734:	6829      	ldr	r1, [r5, #0]
 8014736:	f104 0c14 	add.w	ip, r4, #20
 801473a:	46ae      	mov	lr, r5
 801473c:	f04f 0a00 	mov.w	sl, #0
 8014740:	f8bc b000 	ldrh.w	fp, [ip]
 8014744:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014748:	fb09 220b 	mla	r2, r9, fp, r2
 801474c:	4492      	add	sl, r2
 801474e:	b289      	uxth	r1, r1
 8014750:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014754:	f84e 1b04 	str.w	r1, [lr], #4
 8014758:	f85c 2b04 	ldr.w	r2, [ip], #4
 801475c:	f8be 1000 	ldrh.w	r1, [lr]
 8014760:	0c12      	lsrs	r2, r2, #16
 8014762:	fb09 1102 	mla	r1, r9, r2, r1
 8014766:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801476a:	4567      	cmp	r7, ip
 801476c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014770:	d8e6      	bhi.n	8014740 <__multiply+0x10c>
 8014772:	9a01      	ldr	r2, [sp, #4]
 8014774:	50a9      	str	r1, [r5, r2]
 8014776:	3504      	adds	r5, #4
 8014778:	e79a      	b.n	80146b0 <__multiply+0x7c>
 801477a:	3e01      	subs	r6, #1
 801477c:	e79c      	b.n	80146b8 <__multiply+0x84>
 801477e:	bf00      	nop
 8014780:	08016eb7 	.word	0x08016eb7
 8014784:	08016f28 	.word	0x08016f28

08014788 <__pow5mult>:
 8014788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801478c:	4615      	mov	r5, r2
 801478e:	f012 0203 	ands.w	r2, r2, #3
 8014792:	4606      	mov	r6, r0
 8014794:	460f      	mov	r7, r1
 8014796:	d007      	beq.n	80147a8 <__pow5mult+0x20>
 8014798:	4c25      	ldr	r4, [pc, #148]	; (8014830 <__pow5mult+0xa8>)
 801479a:	3a01      	subs	r2, #1
 801479c:	2300      	movs	r3, #0
 801479e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80147a2:	f7ff fe9b 	bl	80144dc <__multadd>
 80147a6:	4607      	mov	r7, r0
 80147a8:	10ad      	asrs	r5, r5, #2
 80147aa:	d03d      	beq.n	8014828 <__pow5mult+0xa0>
 80147ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80147ae:	b97c      	cbnz	r4, 80147d0 <__pow5mult+0x48>
 80147b0:	2010      	movs	r0, #16
 80147b2:	f7ff fe1b 	bl	80143ec <malloc>
 80147b6:	4602      	mov	r2, r0
 80147b8:	6270      	str	r0, [r6, #36]	; 0x24
 80147ba:	b928      	cbnz	r0, 80147c8 <__pow5mult+0x40>
 80147bc:	4b1d      	ldr	r3, [pc, #116]	; (8014834 <__pow5mult+0xac>)
 80147be:	481e      	ldr	r0, [pc, #120]	; (8014838 <__pow5mult+0xb0>)
 80147c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80147c4:	f000 fb08 	bl	8014dd8 <__assert_func>
 80147c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80147cc:	6004      	str	r4, [r0, #0]
 80147ce:	60c4      	str	r4, [r0, #12]
 80147d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80147d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80147d8:	b94c      	cbnz	r4, 80147ee <__pow5mult+0x66>
 80147da:	f240 2171 	movw	r1, #625	; 0x271
 80147de:	4630      	mov	r0, r6
 80147e0:	f7ff ff12 	bl	8014608 <__i2b>
 80147e4:	2300      	movs	r3, #0
 80147e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80147ea:	4604      	mov	r4, r0
 80147ec:	6003      	str	r3, [r0, #0]
 80147ee:	f04f 0900 	mov.w	r9, #0
 80147f2:	07eb      	lsls	r3, r5, #31
 80147f4:	d50a      	bpl.n	801480c <__pow5mult+0x84>
 80147f6:	4639      	mov	r1, r7
 80147f8:	4622      	mov	r2, r4
 80147fa:	4630      	mov	r0, r6
 80147fc:	f7ff ff1a 	bl	8014634 <__multiply>
 8014800:	4639      	mov	r1, r7
 8014802:	4680      	mov	r8, r0
 8014804:	4630      	mov	r0, r6
 8014806:	f7ff fe47 	bl	8014498 <_Bfree>
 801480a:	4647      	mov	r7, r8
 801480c:	106d      	asrs	r5, r5, #1
 801480e:	d00b      	beq.n	8014828 <__pow5mult+0xa0>
 8014810:	6820      	ldr	r0, [r4, #0]
 8014812:	b938      	cbnz	r0, 8014824 <__pow5mult+0x9c>
 8014814:	4622      	mov	r2, r4
 8014816:	4621      	mov	r1, r4
 8014818:	4630      	mov	r0, r6
 801481a:	f7ff ff0b 	bl	8014634 <__multiply>
 801481e:	6020      	str	r0, [r4, #0]
 8014820:	f8c0 9000 	str.w	r9, [r0]
 8014824:	4604      	mov	r4, r0
 8014826:	e7e4      	b.n	80147f2 <__pow5mult+0x6a>
 8014828:	4638      	mov	r0, r7
 801482a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801482e:	bf00      	nop
 8014830:	08017078 	.word	0x08017078
 8014834:	08016e45 	.word	0x08016e45
 8014838:	08016f28 	.word	0x08016f28

0801483c <__lshift>:
 801483c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014840:	460c      	mov	r4, r1
 8014842:	6849      	ldr	r1, [r1, #4]
 8014844:	6923      	ldr	r3, [r4, #16]
 8014846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801484a:	68a3      	ldr	r3, [r4, #8]
 801484c:	4607      	mov	r7, r0
 801484e:	4691      	mov	r9, r2
 8014850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014854:	f108 0601 	add.w	r6, r8, #1
 8014858:	42b3      	cmp	r3, r6
 801485a:	db0b      	blt.n	8014874 <__lshift+0x38>
 801485c:	4638      	mov	r0, r7
 801485e:	f7ff fddb 	bl	8014418 <_Balloc>
 8014862:	4605      	mov	r5, r0
 8014864:	b948      	cbnz	r0, 801487a <__lshift+0x3e>
 8014866:	4602      	mov	r2, r0
 8014868:	4b2a      	ldr	r3, [pc, #168]	; (8014914 <__lshift+0xd8>)
 801486a:	482b      	ldr	r0, [pc, #172]	; (8014918 <__lshift+0xdc>)
 801486c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014870:	f000 fab2 	bl	8014dd8 <__assert_func>
 8014874:	3101      	adds	r1, #1
 8014876:	005b      	lsls	r3, r3, #1
 8014878:	e7ee      	b.n	8014858 <__lshift+0x1c>
 801487a:	2300      	movs	r3, #0
 801487c:	f100 0114 	add.w	r1, r0, #20
 8014880:	f100 0210 	add.w	r2, r0, #16
 8014884:	4618      	mov	r0, r3
 8014886:	4553      	cmp	r3, sl
 8014888:	db37      	blt.n	80148fa <__lshift+0xbe>
 801488a:	6920      	ldr	r0, [r4, #16]
 801488c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014890:	f104 0314 	add.w	r3, r4, #20
 8014894:	f019 091f 	ands.w	r9, r9, #31
 8014898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801489c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80148a0:	d02f      	beq.n	8014902 <__lshift+0xc6>
 80148a2:	f1c9 0e20 	rsb	lr, r9, #32
 80148a6:	468a      	mov	sl, r1
 80148a8:	f04f 0c00 	mov.w	ip, #0
 80148ac:	681a      	ldr	r2, [r3, #0]
 80148ae:	fa02 f209 	lsl.w	r2, r2, r9
 80148b2:	ea42 020c 	orr.w	r2, r2, ip
 80148b6:	f84a 2b04 	str.w	r2, [sl], #4
 80148ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80148be:	4298      	cmp	r0, r3
 80148c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80148c4:	d8f2      	bhi.n	80148ac <__lshift+0x70>
 80148c6:	1b03      	subs	r3, r0, r4
 80148c8:	3b15      	subs	r3, #21
 80148ca:	f023 0303 	bic.w	r3, r3, #3
 80148ce:	3304      	adds	r3, #4
 80148d0:	f104 0215 	add.w	r2, r4, #21
 80148d4:	4290      	cmp	r0, r2
 80148d6:	bf38      	it	cc
 80148d8:	2304      	movcc	r3, #4
 80148da:	f841 c003 	str.w	ip, [r1, r3]
 80148de:	f1bc 0f00 	cmp.w	ip, #0
 80148e2:	d001      	beq.n	80148e8 <__lshift+0xac>
 80148e4:	f108 0602 	add.w	r6, r8, #2
 80148e8:	3e01      	subs	r6, #1
 80148ea:	4638      	mov	r0, r7
 80148ec:	612e      	str	r6, [r5, #16]
 80148ee:	4621      	mov	r1, r4
 80148f0:	f7ff fdd2 	bl	8014498 <_Bfree>
 80148f4:	4628      	mov	r0, r5
 80148f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80148fe:	3301      	adds	r3, #1
 8014900:	e7c1      	b.n	8014886 <__lshift+0x4a>
 8014902:	3904      	subs	r1, #4
 8014904:	f853 2b04 	ldr.w	r2, [r3], #4
 8014908:	f841 2f04 	str.w	r2, [r1, #4]!
 801490c:	4298      	cmp	r0, r3
 801490e:	d8f9      	bhi.n	8014904 <__lshift+0xc8>
 8014910:	e7ea      	b.n	80148e8 <__lshift+0xac>
 8014912:	bf00      	nop
 8014914:	08016eb7 	.word	0x08016eb7
 8014918:	08016f28 	.word	0x08016f28

0801491c <__mcmp>:
 801491c:	b530      	push	{r4, r5, lr}
 801491e:	6902      	ldr	r2, [r0, #16]
 8014920:	690c      	ldr	r4, [r1, #16]
 8014922:	1b12      	subs	r2, r2, r4
 8014924:	d10e      	bne.n	8014944 <__mcmp+0x28>
 8014926:	f100 0314 	add.w	r3, r0, #20
 801492a:	3114      	adds	r1, #20
 801492c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014930:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014934:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014938:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801493c:	42a5      	cmp	r5, r4
 801493e:	d003      	beq.n	8014948 <__mcmp+0x2c>
 8014940:	d305      	bcc.n	801494e <__mcmp+0x32>
 8014942:	2201      	movs	r2, #1
 8014944:	4610      	mov	r0, r2
 8014946:	bd30      	pop	{r4, r5, pc}
 8014948:	4283      	cmp	r3, r0
 801494a:	d3f3      	bcc.n	8014934 <__mcmp+0x18>
 801494c:	e7fa      	b.n	8014944 <__mcmp+0x28>
 801494e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014952:	e7f7      	b.n	8014944 <__mcmp+0x28>

08014954 <__mdiff>:
 8014954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014958:	460c      	mov	r4, r1
 801495a:	4606      	mov	r6, r0
 801495c:	4611      	mov	r1, r2
 801495e:	4620      	mov	r0, r4
 8014960:	4690      	mov	r8, r2
 8014962:	f7ff ffdb 	bl	801491c <__mcmp>
 8014966:	1e05      	subs	r5, r0, #0
 8014968:	d110      	bne.n	801498c <__mdiff+0x38>
 801496a:	4629      	mov	r1, r5
 801496c:	4630      	mov	r0, r6
 801496e:	f7ff fd53 	bl	8014418 <_Balloc>
 8014972:	b930      	cbnz	r0, 8014982 <__mdiff+0x2e>
 8014974:	4b3a      	ldr	r3, [pc, #232]	; (8014a60 <__mdiff+0x10c>)
 8014976:	4602      	mov	r2, r0
 8014978:	f240 2132 	movw	r1, #562	; 0x232
 801497c:	4839      	ldr	r0, [pc, #228]	; (8014a64 <__mdiff+0x110>)
 801497e:	f000 fa2b 	bl	8014dd8 <__assert_func>
 8014982:	2301      	movs	r3, #1
 8014984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801498c:	bfa4      	itt	ge
 801498e:	4643      	movge	r3, r8
 8014990:	46a0      	movge	r8, r4
 8014992:	4630      	mov	r0, r6
 8014994:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014998:	bfa6      	itte	ge
 801499a:	461c      	movge	r4, r3
 801499c:	2500      	movge	r5, #0
 801499e:	2501      	movlt	r5, #1
 80149a0:	f7ff fd3a 	bl	8014418 <_Balloc>
 80149a4:	b920      	cbnz	r0, 80149b0 <__mdiff+0x5c>
 80149a6:	4b2e      	ldr	r3, [pc, #184]	; (8014a60 <__mdiff+0x10c>)
 80149a8:	4602      	mov	r2, r0
 80149aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80149ae:	e7e5      	b.n	801497c <__mdiff+0x28>
 80149b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80149b4:	6926      	ldr	r6, [r4, #16]
 80149b6:	60c5      	str	r5, [r0, #12]
 80149b8:	f104 0914 	add.w	r9, r4, #20
 80149bc:	f108 0514 	add.w	r5, r8, #20
 80149c0:	f100 0e14 	add.w	lr, r0, #20
 80149c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80149c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80149cc:	f108 0210 	add.w	r2, r8, #16
 80149d0:	46f2      	mov	sl, lr
 80149d2:	2100      	movs	r1, #0
 80149d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80149d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80149dc:	fa1f f883 	uxth.w	r8, r3
 80149e0:	fa11 f18b 	uxtah	r1, r1, fp
 80149e4:	0c1b      	lsrs	r3, r3, #16
 80149e6:	eba1 0808 	sub.w	r8, r1, r8
 80149ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80149ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80149f2:	fa1f f888 	uxth.w	r8, r8
 80149f6:	1419      	asrs	r1, r3, #16
 80149f8:	454e      	cmp	r6, r9
 80149fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80149fe:	f84a 3b04 	str.w	r3, [sl], #4
 8014a02:	d8e7      	bhi.n	80149d4 <__mdiff+0x80>
 8014a04:	1b33      	subs	r3, r6, r4
 8014a06:	3b15      	subs	r3, #21
 8014a08:	f023 0303 	bic.w	r3, r3, #3
 8014a0c:	3304      	adds	r3, #4
 8014a0e:	3415      	adds	r4, #21
 8014a10:	42a6      	cmp	r6, r4
 8014a12:	bf38      	it	cc
 8014a14:	2304      	movcc	r3, #4
 8014a16:	441d      	add	r5, r3
 8014a18:	4473      	add	r3, lr
 8014a1a:	469e      	mov	lr, r3
 8014a1c:	462e      	mov	r6, r5
 8014a1e:	4566      	cmp	r6, ip
 8014a20:	d30e      	bcc.n	8014a40 <__mdiff+0xec>
 8014a22:	f10c 0203 	add.w	r2, ip, #3
 8014a26:	1b52      	subs	r2, r2, r5
 8014a28:	f022 0203 	bic.w	r2, r2, #3
 8014a2c:	3d03      	subs	r5, #3
 8014a2e:	45ac      	cmp	ip, r5
 8014a30:	bf38      	it	cc
 8014a32:	2200      	movcc	r2, #0
 8014a34:	441a      	add	r2, r3
 8014a36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014a3a:	b17b      	cbz	r3, 8014a5c <__mdiff+0x108>
 8014a3c:	6107      	str	r7, [r0, #16]
 8014a3e:	e7a3      	b.n	8014988 <__mdiff+0x34>
 8014a40:	f856 8b04 	ldr.w	r8, [r6], #4
 8014a44:	fa11 f288 	uxtah	r2, r1, r8
 8014a48:	1414      	asrs	r4, r2, #16
 8014a4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014a4e:	b292      	uxth	r2, r2
 8014a50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014a54:	f84e 2b04 	str.w	r2, [lr], #4
 8014a58:	1421      	asrs	r1, r4, #16
 8014a5a:	e7e0      	b.n	8014a1e <__mdiff+0xca>
 8014a5c:	3f01      	subs	r7, #1
 8014a5e:	e7ea      	b.n	8014a36 <__mdiff+0xe2>
 8014a60:	08016eb7 	.word	0x08016eb7
 8014a64:	08016f28 	.word	0x08016f28

08014a68 <__d2b>:
 8014a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a6c:	4689      	mov	r9, r1
 8014a6e:	2101      	movs	r1, #1
 8014a70:	ec57 6b10 	vmov	r6, r7, d0
 8014a74:	4690      	mov	r8, r2
 8014a76:	f7ff fccf 	bl	8014418 <_Balloc>
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	b930      	cbnz	r0, 8014a8c <__d2b+0x24>
 8014a7e:	4602      	mov	r2, r0
 8014a80:	4b25      	ldr	r3, [pc, #148]	; (8014b18 <__d2b+0xb0>)
 8014a82:	4826      	ldr	r0, [pc, #152]	; (8014b1c <__d2b+0xb4>)
 8014a84:	f240 310a 	movw	r1, #778	; 0x30a
 8014a88:	f000 f9a6 	bl	8014dd8 <__assert_func>
 8014a8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014a94:	bb35      	cbnz	r5, 8014ae4 <__d2b+0x7c>
 8014a96:	2e00      	cmp	r6, #0
 8014a98:	9301      	str	r3, [sp, #4]
 8014a9a:	d028      	beq.n	8014aee <__d2b+0x86>
 8014a9c:	4668      	mov	r0, sp
 8014a9e:	9600      	str	r6, [sp, #0]
 8014aa0:	f7ff fd82 	bl	80145a8 <__lo0bits>
 8014aa4:	9900      	ldr	r1, [sp, #0]
 8014aa6:	b300      	cbz	r0, 8014aea <__d2b+0x82>
 8014aa8:	9a01      	ldr	r2, [sp, #4]
 8014aaa:	f1c0 0320 	rsb	r3, r0, #32
 8014aae:	fa02 f303 	lsl.w	r3, r2, r3
 8014ab2:	430b      	orrs	r3, r1
 8014ab4:	40c2      	lsrs	r2, r0
 8014ab6:	6163      	str	r3, [r4, #20]
 8014ab8:	9201      	str	r2, [sp, #4]
 8014aba:	9b01      	ldr	r3, [sp, #4]
 8014abc:	61a3      	str	r3, [r4, #24]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	bf14      	ite	ne
 8014ac2:	2202      	movne	r2, #2
 8014ac4:	2201      	moveq	r2, #1
 8014ac6:	6122      	str	r2, [r4, #16]
 8014ac8:	b1d5      	cbz	r5, 8014b00 <__d2b+0x98>
 8014aca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014ace:	4405      	add	r5, r0
 8014ad0:	f8c9 5000 	str.w	r5, [r9]
 8014ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014ad8:	f8c8 0000 	str.w	r0, [r8]
 8014adc:	4620      	mov	r0, r4
 8014ade:	b003      	add	sp, #12
 8014ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014ae8:	e7d5      	b.n	8014a96 <__d2b+0x2e>
 8014aea:	6161      	str	r1, [r4, #20]
 8014aec:	e7e5      	b.n	8014aba <__d2b+0x52>
 8014aee:	a801      	add	r0, sp, #4
 8014af0:	f7ff fd5a 	bl	80145a8 <__lo0bits>
 8014af4:	9b01      	ldr	r3, [sp, #4]
 8014af6:	6163      	str	r3, [r4, #20]
 8014af8:	2201      	movs	r2, #1
 8014afa:	6122      	str	r2, [r4, #16]
 8014afc:	3020      	adds	r0, #32
 8014afe:	e7e3      	b.n	8014ac8 <__d2b+0x60>
 8014b00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014b04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014b08:	f8c9 0000 	str.w	r0, [r9]
 8014b0c:	6918      	ldr	r0, [r3, #16]
 8014b0e:	f7ff fd2b 	bl	8014568 <__hi0bits>
 8014b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014b16:	e7df      	b.n	8014ad8 <__d2b+0x70>
 8014b18:	08016eb7 	.word	0x08016eb7
 8014b1c:	08016f28 	.word	0x08016f28

08014b20 <_calloc_r>:
 8014b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b22:	fba1 2402 	umull	r2, r4, r1, r2
 8014b26:	b94c      	cbnz	r4, 8014b3c <_calloc_r+0x1c>
 8014b28:	4611      	mov	r1, r2
 8014b2a:	9201      	str	r2, [sp, #4]
 8014b2c:	f000 f87a 	bl	8014c24 <_malloc_r>
 8014b30:	9a01      	ldr	r2, [sp, #4]
 8014b32:	4605      	mov	r5, r0
 8014b34:	b930      	cbnz	r0, 8014b44 <_calloc_r+0x24>
 8014b36:	4628      	mov	r0, r5
 8014b38:	b003      	add	sp, #12
 8014b3a:	bd30      	pop	{r4, r5, pc}
 8014b3c:	220c      	movs	r2, #12
 8014b3e:	6002      	str	r2, [r0, #0]
 8014b40:	2500      	movs	r5, #0
 8014b42:	e7f8      	b.n	8014b36 <_calloc_r+0x16>
 8014b44:	4621      	mov	r1, r4
 8014b46:	f7fd feb3 	bl	80128b0 <memset>
 8014b4a:	e7f4      	b.n	8014b36 <_calloc_r+0x16>

08014b4c <_free_r>:
 8014b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b4e:	2900      	cmp	r1, #0
 8014b50:	d044      	beq.n	8014bdc <_free_r+0x90>
 8014b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b56:	9001      	str	r0, [sp, #4]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8014b5e:	bfb8      	it	lt
 8014b60:	18e4      	addlt	r4, r4, r3
 8014b62:	f000 f9bf 	bl	8014ee4 <__malloc_lock>
 8014b66:	4a1e      	ldr	r2, [pc, #120]	; (8014be0 <_free_r+0x94>)
 8014b68:	9801      	ldr	r0, [sp, #4]
 8014b6a:	6813      	ldr	r3, [r2, #0]
 8014b6c:	b933      	cbnz	r3, 8014b7c <_free_r+0x30>
 8014b6e:	6063      	str	r3, [r4, #4]
 8014b70:	6014      	str	r4, [r2, #0]
 8014b72:	b003      	add	sp, #12
 8014b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b78:	f000 b9ba 	b.w	8014ef0 <__malloc_unlock>
 8014b7c:	42a3      	cmp	r3, r4
 8014b7e:	d908      	bls.n	8014b92 <_free_r+0x46>
 8014b80:	6825      	ldr	r5, [r4, #0]
 8014b82:	1961      	adds	r1, r4, r5
 8014b84:	428b      	cmp	r3, r1
 8014b86:	bf01      	itttt	eq
 8014b88:	6819      	ldreq	r1, [r3, #0]
 8014b8a:	685b      	ldreq	r3, [r3, #4]
 8014b8c:	1949      	addeq	r1, r1, r5
 8014b8e:	6021      	streq	r1, [r4, #0]
 8014b90:	e7ed      	b.n	8014b6e <_free_r+0x22>
 8014b92:	461a      	mov	r2, r3
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	b10b      	cbz	r3, 8014b9c <_free_r+0x50>
 8014b98:	42a3      	cmp	r3, r4
 8014b9a:	d9fa      	bls.n	8014b92 <_free_r+0x46>
 8014b9c:	6811      	ldr	r1, [r2, #0]
 8014b9e:	1855      	adds	r5, r2, r1
 8014ba0:	42a5      	cmp	r5, r4
 8014ba2:	d10b      	bne.n	8014bbc <_free_r+0x70>
 8014ba4:	6824      	ldr	r4, [r4, #0]
 8014ba6:	4421      	add	r1, r4
 8014ba8:	1854      	adds	r4, r2, r1
 8014baa:	42a3      	cmp	r3, r4
 8014bac:	6011      	str	r1, [r2, #0]
 8014bae:	d1e0      	bne.n	8014b72 <_free_r+0x26>
 8014bb0:	681c      	ldr	r4, [r3, #0]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	6053      	str	r3, [r2, #4]
 8014bb6:	4421      	add	r1, r4
 8014bb8:	6011      	str	r1, [r2, #0]
 8014bba:	e7da      	b.n	8014b72 <_free_r+0x26>
 8014bbc:	d902      	bls.n	8014bc4 <_free_r+0x78>
 8014bbe:	230c      	movs	r3, #12
 8014bc0:	6003      	str	r3, [r0, #0]
 8014bc2:	e7d6      	b.n	8014b72 <_free_r+0x26>
 8014bc4:	6825      	ldr	r5, [r4, #0]
 8014bc6:	1961      	adds	r1, r4, r5
 8014bc8:	428b      	cmp	r3, r1
 8014bca:	bf04      	itt	eq
 8014bcc:	6819      	ldreq	r1, [r3, #0]
 8014bce:	685b      	ldreq	r3, [r3, #4]
 8014bd0:	6063      	str	r3, [r4, #4]
 8014bd2:	bf04      	itt	eq
 8014bd4:	1949      	addeq	r1, r1, r5
 8014bd6:	6021      	streq	r1, [r4, #0]
 8014bd8:	6054      	str	r4, [r2, #4]
 8014bda:	e7ca      	b.n	8014b72 <_free_r+0x26>
 8014bdc:	b003      	add	sp, #12
 8014bde:	bd30      	pop	{r4, r5, pc}
 8014be0:	24001758 	.word	0x24001758

08014be4 <sbrk_aligned>:
 8014be4:	b570      	push	{r4, r5, r6, lr}
 8014be6:	4e0e      	ldr	r6, [pc, #56]	; (8014c20 <sbrk_aligned+0x3c>)
 8014be8:	460c      	mov	r4, r1
 8014bea:	6831      	ldr	r1, [r6, #0]
 8014bec:	4605      	mov	r5, r0
 8014bee:	b911      	cbnz	r1, 8014bf6 <sbrk_aligned+0x12>
 8014bf0:	f000 f88c 	bl	8014d0c <_sbrk_r>
 8014bf4:	6030      	str	r0, [r6, #0]
 8014bf6:	4621      	mov	r1, r4
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	f000 f887 	bl	8014d0c <_sbrk_r>
 8014bfe:	1c43      	adds	r3, r0, #1
 8014c00:	d00a      	beq.n	8014c18 <sbrk_aligned+0x34>
 8014c02:	1cc4      	adds	r4, r0, #3
 8014c04:	f024 0403 	bic.w	r4, r4, #3
 8014c08:	42a0      	cmp	r0, r4
 8014c0a:	d007      	beq.n	8014c1c <sbrk_aligned+0x38>
 8014c0c:	1a21      	subs	r1, r4, r0
 8014c0e:	4628      	mov	r0, r5
 8014c10:	f000 f87c 	bl	8014d0c <_sbrk_r>
 8014c14:	3001      	adds	r0, #1
 8014c16:	d101      	bne.n	8014c1c <sbrk_aligned+0x38>
 8014c18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	bd70      	pop	{r4, r5, r6, pc}
 8014c20:	2400175c 	.word	0x2400175c

08014c24 <_malloc_r>:
 8014c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c28:	1ccd      	adds	r5, r1, #3
 8014c2a:	f025 0503 	bic.w	r5, r5, #3
 8014c2e:	3508      	adds	r5, #8
 8014c30:	2d0c      	cmp	r5, #12
 8014c32:	bf38      	it	cc
 8014c34:	250c      	movcc	r5, #12
 8014c36:	2d00      	cmp	r5, #0
 8014c38:	4607      	mov	r7, r0
 8014c3a:	db01      	blt.n	8014c40 <_malloc_r+0x1c>
 8014c3c:	42a9      	cmp	r1, r5
 8014c3e:	d905      	bls.n	8014c4c <_malloc_r+0x28>
 8014c40:	230c      	movs	r3, #12
 8014c42:	603b      	str	r3, [r7, #0]
 8014c44:	2600      	movs	r6, #0
 8014c46:	4630      	mov	r0, r6
 8014c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c4c:	4e2e      	ldr	r6, [pc, #184]	; (8014d08 <_malloc_r+0xe4>)
 8014c4e:	f000 f949 	bl	8014ee4 <__malloc_lock>
 8014c52:	6833      	ldr	r3, [r6, #0]
 8014c54:	461c      	mov	r4, r3
 8014c56:	bb34      	cbnz	r4, 8014ca6 <_malloc_r+0x82>
 8014c58:	4629      	mov	r1, r5
 8014c5a:	4638      	mov	r0, r7
 8014c5c:	f7ff ffc2 	bl	8014be4 <sbrk_aligned>
 8014c60:	1c43      	adds	r3, r0, #1
 8014c62:	4604      	mov	r4, r0
 8014c64:	d14d      	bne.n	8014d02 <_malloc_r+0xde>
 8014c66:	6834      	ldr	r4, [r6, #0]
 8014c68:	4626      	mov	r6, r4
 8014c6a:	2e00      	cmp	r6, #0
 8014c6c:	d140      	bne.n	8014cf0 <_malloc_r+0xcc>
 8014c6e:	6823      	ldr	r3, [r4, #0]
 8014c70:	4631      	mov	r1, r6
 8014c72:	4638      	mov	r0, r7
 8014c74:	eb04 0803 	add.w	r8, r4, r3
 8014c78:	f000 f848 	bl	8014d0c <_sbrk_r>
 8014c7c:	4580      	cmp	r8, r0
 8014c7e:	d13a      	bne.n	8014cf6 <_malloc_r+0xd2>
 8014c80:	6821      	ldr	r1, [r4, #0]
 8014c82:	3503      	adds	r5, #3
 8014c84:	1a6d      	subs	r5, r5, r1
 8014c86:	f025 0503 	bic.w	r5, r5, #3
 8014c8a:	3508      	adds	r5, #8
 8014c8c:	2d0c      	cmp	r5, #12
 8014c8e:	bf38      	it	cc
 8014c90:	250c      	movcc	r5, #12
 8014c92:	4629      	mov	r1, r5
 8014c94:	4638      	mov	r0, r7
 8014c96:	f7ff ffa5 	bl	8014be4 <sbrk_aligned>
 8014c9a:	3001      	adds	r0, #1
 8014c9c:	d02b      	beq.n	8014cf6 <_malloc_r+0xd2>
 8014c9e:	6823      	ldr	r3, [r4, #0]
 8014ca0:	442b      	add	r3, r5
 8014ca2:	6023      	str	r3, [r4, #0]
 8014ca4:	e00e      	b.n	8014cc4 <_malloc_r+0xa0>
 8014ca6:	6822      	ldr	r2, [r4, #0]
 8014ca8:	1b52      	subs	r2, r2, r5
 8014caa:	d41e      	bmi.n	8014cea <_malloc_r+0xc6>
 8014cac:	2a0b      	cmp	r2, #11
 8014cae:	d916      	bls.n	8014cde <_malloc_r+0xba>
 8014cb0:	1961      	adds	r1, r4, r5
 8014cb2:	42a3      	cmp	r3, r4
 8014cb4:	6025      	str	r5, [r4, #0]
 8014cb6:	bf18      	it	ne
 8014cb8:	6059      	strne	r1, [r3, #4]
 8014cba:	6863      	ldr	r3, [r4, #4]
 8014cbc:	bf08      	it	eq
 8014cbe:	6031      	streq	r1, [r6, #0]
 8014cc0:	5162      	str	r2, [r4, r5]
 8014cc2:	604b      	str	r3, [r1, #4]
 8014cc4:	4638      	mov	r0, r7
 8014cc6:	f104 060b 	add.w	r6, r4, #11
 8014cca:	f000 f911 	bl	8014ef0 <__malloc_unlock>
 8014cce:	f026 0607 	bic.w	r6, r6, #7
 8014cd2:	1d23      	adds	r3, r4, #4
 8014cd4:	1af2      	subs	r2, r6, r3
 8014cd6:	d0b6      	beq.n	8014c46 <_malloc_r+0x22>
 8014cd8:	1b9b      	subs	r3, r3, r6
 8014cda:	50a3      	str	r3, [r4, r2]
 8014cdc:	e7b3      	b.n	8014c46 <_malloc_r+0x22>
 8014cde:	6862      	ldr	r2, [r4, #4]
 8014ce0:	42a3      	cmp	r3, r4
 8014ce2:	bf0c      	ite	eq
 8014ce4:	6032      	streq	r2, [r6, #0]
 8014ce6:	605a      	strne	r2, [r3, #4]
 8014ce8:	e7ec      	b.n	8014cc4 <_malloc_r+0xa0>
 8014cea:	4623      	mov	r3, r4
 8014cec:	6864      	ldr	r4, [r4, #4]
 8014cee:	e7b2      	b.n	8014c56 <_malloc_r+0x32>
 8014cf0:	4634      	mov	r4, r6
 8014cf2:	6876      	ldr	r6, [r6, #4]
 8014cf4:	e7b9      	b.n	8014c6a <_malloc_r+0x46>
 8014cf6:	230c      	movs	r3, #12
 8014cf8:	603b      	str	r3, [r7, #0]
 8014cfa:	4638      	mov	r0, r7
 8014cfc:	f000 f8f8 	bl	8014ef0 <__malloc_unlock>
 8014d00:	e7a1      	b.n	8014c46 <_malloc_r+0x22>
 8014d02:	6025      	str	r5, [r4, #0]
 8014d04:	e7de      	b.n	8014cc4 <_malloc_r+0xa0>
 8014d06:	bf00      	nop
 8014d08:	24001758 	.word	0x24001758

08014d0c <_sbrk_r>:
 8014d0c:	b538      	push	{r3, r4, r5, lr}
 8014d0e:	4d06      	ldr	r5, [pc, #24]	; (8014d28 <_sbrk_r+0x1c>)
 8014d10:	2300      	movs	r3, #0
 8014d12:	4604      	mov	r4, r0
 8014d14:	4608      	mov	r0, r1
 8014d16:	602b      	str	r3, [r5, #0]
 8014d18:	f7f0 fd00 	bl	800571c <_sbrk>
 8014d1c:	1c43      	adds	r3, r0, #1
 8014d1e:	d102      	bne.n	8014d26 <_sbrk_r+0x1a>
 8014d20:	682b      	ldr	r3, [r5, #0]
 8014d22:	b103      	cbz	r3, 8014d26 <_sbrk_r+0x1a>
 8014d24:	6023      	str	r3, [r4, #0]
 8014d26:	bd38      	pop	{r3, r4, r5, pc}
 8014d28:	24001760 	.word	0x24001760

08014d2c <__sread>:
 8014d2c:	b510      	push	{r4, lr}
 8014d2e:	460c      	mov	r4, r1
 8014d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d34:	f000 fa3c 	bl	80151b0 <_read_r>
 8014d38:	2800      	cmp	r0, #0
 8014d3a:	bfab      	itete	ge
 8014d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8014d40:	181b      	addge	r3, r3, r0
 8014d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014d46:	bfac      	ite	ge
 8014d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8014d4a:	81a3      	strhlt	r3, [r4, #12]
 8014d4c:	bd10      	pop	{r4, pc}

08014d4e <__swrite>:
 8014d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d52:	461f      	mov	r7, r3
 8014d54:	898b      	ldrh	r3, [r1, #12]
 8014d56:	05db      	lsls	r3, r3, #23
 8014d58:	4605      	mov	r5, r0
 8014d5a:	460c      	mov	r4, r1
 8014d5c:	4616      	mov	r6, r2
 8014d5e:	d505      	bpl.n	8014d6c <__swrite+0x1e>
 8014d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d64:	2302      	movs	r3, #2
 8014d66:	2200      	movs	r2, #0
 8014d68:	f000 f898 	bl	8014e9c <_lseek_r>
 8014d6c:	89a3      	ldrh	r3, [r4, #12]
 8014d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d76:	81a3      	strh	r3, [r4, #12]
 8014d78:	4632      	mov	r2, r6
 8014d7a:	463b      	mov	r3, r7
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d82:	f000 b817 	b.w	8014db4 <_write_r>

08014d86 <__sseek>:
 8014d86:	b510      	push	{r4, lr}
 8014d88:	460c      	mov	r4, r1
 8014d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d8e:	f000 f885 	bl	8014e9c <_lseek_r>
 8014d92:	1c43      	adds	r3, r0, #1
 8014d94:	89a3      	ldrh	r3, [r4, #12]
 8014d96:	bf15      	itete	ne
 8014d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8014d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014da2:	81a3      	strheq	r3, [r4, #12]
 8014da4:	bf18      	it	ne
 8014da6:	81a3      	strhne	r3, [r4, #12]
 8014da8:	bd10      	pop	{r4, pc}

08014daa <__sclose>:
 8014daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dae:	f000 b831 	b.w	8014e14 <_close_r>
	...

08014db4 <_write_r>:
 8014db4:	b538      	push	{r3, r4, r5, lr}
 8014db6:	4d07      	ldr	r5, [pc, #28]	; (8014dd4 <_write_r+0x20>)
 8014db8:	4604      	mov	r4, r0
 8014dba:	4608      	mov	r0, r1
 8014dbc:	4611      	mov	r1, r2
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	602a      	str	r2, [r5, #0]
 8014dc2:	461a      	mov	r2, r3
 8014dc4:	f7f0 fc59 	bl	800567a <_write>
 8014dc8:	1c43      	adds	r3, r0, #1
 8014dca:	d102      	bne.n	8014dd2 <_write_r+0x1e>
 8014dcc:	682b      	ldr	r3, [r5, #0]
 8014dce:	b103      	cbz	r3, 8014dd2 <_write_r+0x1e>
 8014dd0:	6023      	str	r3, [r4, #0]
 8014dd2:	bd38      	pop	{r3, r4, r5, pc}
 8014dd4:	24001760 	.word	0x24001760

08014dd8 <__assert_func>:
 8014dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014dda:	4614      	mov	r4, r2
 8014ddc:	461a      	mov	r2, r3
 8014dde:	4b09      	ldr	r3, [pc, #36]	; (8014e04 <__assert_func+0x2c>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	4605      	mov	r5, r0
 8014de4:	68d8      	ldr	r0, [r3, #12]
 8014de6:	b14c      	cbz	r4, 8014dfc <__assert_func+0x24>
 8014de8:	4b07      	ldr	r3, [pc, #28]	; (8014e08 <__assert_func+0x30>)
 8014dea:	9100      	str	r1, [sp, #0]
 8014dec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014df0:	4906      	ldr	r1, [pc, #24]	; (8014e0c <__assert_func+0x34>)
 8014df2:	462b      	mov	r3, r5
 8014df4:	f000 f81e 	bl	8014e34 <fiprintf>
 8014df8:	f000 f9f9 	bl	80151ee <abort>
 8014dfc:	4b04      	ldr	r3, [pc, #16]	; (8014e10 <__assert_func+0x38>)
 8014dfe:	461c      	mov	r4, r3
 8014e00:	e7f3      	b.n	8014dea <__assert_func+0x12>
 8014e02:	bf00      	nop
 8014e04:	24000244 	.word	0x24000244
 8014e08:	08017084 	.word	0x08017084
 8014e0c:	08017091 	.word	0x08017091
 8014e10:	080170bf 	.word	0x080170bf

08014e14 <_close_r>:
 8014e14:	b538      	push	{r3, r4, r5, lr}
 8014e16:	4d06      	ldr	r5, [pc, #24]	; (8014e30 <_close_r+0x1c>)
 8014e18:	2300      	movs	r3, #0
 8014e1a:	4604      	mov	r4, r0
 8014e1c:	4608      	mov	r0, r1
 8014e1e:	602b      	str	r3, [r5, #0]
 8014e20:	f7f0 fc47 	bl	80056b2 <_close>
 8014e24:	1c43      	adds	r3, r0, #1
 8014e26:	d102      	bne.n	8014e2e <_close_r+0x1a>
 8014e28:	682b      	ldr	r3, [r5, #0]
 8014e2a:	b103      	cbz	r3, 8014e2e <_close_r+0x1a>
 8014e2c:	6023      	str	r3, [r4, #0]
 8014e2e:	bd38      	pop	{r3, r4, r5, pc}
 8014e30:	24001760 	.word	0x24001760

08014e34 <fiprintf>:
 8014e34:	b40e      	push	{r1, r2, r3}
 8014e36:	b503      	push	{r0, r1, lr}
 8014e38:	4601      	mov	r1, r0
 8014e3a:	ab03      	add	r3, sp, #12
 8014e3c:	4805      	ldr	r0, [pc, #20]	; (8014e54 <fiprintf+0x20>)
 8014e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e42:	6800      	ldr	r0, [r0, #0]
 8014e44:	9301      	str	r3, [sp, #4]
 8014e46:	f000 f883 	bl	8014f50 <_vfiprintf_r>
 8014e4a:	b002      	add	sp, #8
 8014e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e50:	b003      	add	sp, #12
 8014e52:	4770      	bx	lr
 8014e54:	24000244 	.word	0x24000244

08014e58 <_fstat_r>:
 8014e58:	b538      	push	{r3, r4, r5, lr}
 8014e5a:	4d07      	ldr	r5, [pc, #28]	; (8014e78 <_fstat_r+0x20>)
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	4604      	mov	r4, r0
 8014e60:	4608      	mov	r0, r1
 8014e62:	4611      	mov	r1, r2
 8014e64:	602b      	str	r3, [r5, #0]
 8014e66:	f7f0 fc30 	bl	80056ca <_fstat>
 8014e6a:	1c43      	adds	r3, r0, #1
 8014e6c:	d102      	bne.n	8014e74 <_fstat_r+0x1c>
 8014e6e:	682b      	ldr	r3, [r5, #0]
 8014e70:	b103      	cbz	r3, 8014e74 <_fstat_r+0x1c>
 8014e72:	6023      	str	r3, [r4, #0]
 8014e74:	bd38      	pop	{r3, r4, r5, pc}
 8014e76:	bf00      	nop
 8014e78:	24001760 	.word	0x24001760

08014e7c <_isatty_r>:
 8014e7c:	b538      	push	{r3, r4, r5, lr}
 8014e7e:	4d06      	ldr	r5, [pc, #24]	; (8014e98 <_isatty_r+0x1c>)
 8014e80:	2300      	movs	r3, #0
 8014e82:	4604      	mov	r4, r0
 8014e84:	4608      	mov	r0, r1
 8014e86:	602b      	str	r3, [r5, #0]
 8014e88:	f7f0 fc2f 	bl	80056ea <_isatty>
 8014e8c:	1c43      	adds	r3, r0, #1
 8014e8e:	d102      	bne.n	8014e96 <_isatty_r+0x1a>
 8014e90:	682b      	ldr	r3, [r5, #0]
 8014e92:	b103      	cbz	r3, 8014e96 <_isatty_r+0x1a>
 8014e94:	6023      	str	r3, [r4, #0]
 8014e96:	bd38      	pop	{r3, r4, r5, pc}
 8014e98:	24001760 	.word	0x24001760

08014e9c <_lseek_r>:
 8014e9c:	b538      	push	{r3, r4, r5, lr}
 8014e9e:	4d07      	ldr	r5, [pc, #28]	; (8014ebc <_lseek_r+0x20>)
 8014ea0:	4604      	mov	r4, r0
 8014ea2:	4608      	mov	r0, r1
 8014ea4:	4611      	mov	r1, r2
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	602a      	str	r2, [r5, #0]
 8014eaa:	461a      	mov	r2, r3
 8014eac:	f7f0 fc28 	bl	8005700 <_lseek>
 8014eb0:	1c43      	adds	r3, r0, #1
 8014eb2:	d102      	bne.n	8014eba <_lseek_r+0x1e>
 8014eb4:	682b      	ldr	r3, [r5, #0]
 8014eb6:	b103      	cbz	r3, 8014eba <_lseek_r+0x1e>
 8014eb8:	6023      	str	r3, [r4, #0]
 8014eba:	bd38      	pop	{r3, r4, r5, pc}
 8014ebc:	24001760 	.word	0x24001760

08014ec0 <__ascii_mbtowc>:
 8014ec0:	b082      	sub	sp, #8
 8014ec2:	b901      	cbnz	r1, 8014ec6 <__ascii_mbtowc+0x6>
 8014ec4:	a901      	add	r1, sp, #4
 8014ec6:	b142      	cbz	r2, 8014eda <__ascii_mbtowc+0x1a>
 8014ec8:	b14b      	cbz	r3, 8014ede <__ascii_mbtowc+0x1e>
 8014eca:	7813      	ldrb	r3, [r2, #0]
 8014ecc:	600b      	str	r3, [r1, #0]
 8014ece:	7812      	ldrb	r2, [r2, #0]
 8014ed0:	1e10      	subs	r0, r2, #0
 8014ed2:	bf18      	it	ne
 8014ed4:	2001      	movne	r0, #1
 8014ed6:	b002      	add	sp, #8
 8014ed8:	4770      	bx	lr
 8014eda:	4610      	mov	r0, r2
 8014edc:	e7fb      	b.n	8014ed6 <__ascii_mbtowc+0x16>
 8014ede:	f06f 0001 	mvn.w	r0, #1
 8014ee2:	e7f8      	b.n	8014ed6 <__ascii_mbtowc+0x16>

08014ee4 <__malloc_lock>:
 8014ee4:	4801      	ldr	r0, [pc, #4]	; (8014eec <__malloc_lock+0x8>)
 8014ee6:	f7ff ba1a 	b.w	801431e <__retarget_lock_acquire_recursive>
 8014eea:	bf00      	nop
 8014eec:	24001754 	.word	0x24001754

08014ef0 <__malloc_unlock>:
 8014ef0:	4801      	ldr	r0, [pc, #4]	; (8014ef8 <__malloc_unlock+0x8>)
 8014ef2:	f7ff ba15 	b.w	8014320 <__retarget_lock_release_recursive>
 8014ef6:	bf00      	nop
 8014ef8:	24001754 	.word	0x24001754

08014efc <__sfputc_r>:
 8014efc:	6893      	ldr	r3, [r2, #8]
 8014efe:	3b01      	subs	r3, #1
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	b410      	push	{r4}
 8014f04:	6093      	str	r3, [r2, #8]
 8014f06:	da08      	bge.n	8014f1a <__sfputc_r+0x1e>
 8014f08:	6994      	ldr	r4, [r2, #24]
 8014f0a:	42a3      	cmp	r3, r4
 8014f0c:	db01      	blt.n	8014f12 <__sfputc_r+0x16>
 8014f0e:	290a      	cmp	r1, #10
 8014f10:	d103      	bne.n	8014f1a <__sfputc_r+0x1e>
 8014f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f16:	f7fe b98b 	b.w	8013230 <__swbuf_r>
 8014f1a:	6813      	ldr	r3, [r2, #0]
 8014f1c:	1c58      	adds	r0, r3, #1
 8014f1e:	6010      	str	r0, [r2, #0]
 8014f20:	7019      	strb	r1, [r3, #0]
 8014f22:	4608      	mov	r0, r1
 8014f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f28:	4770      	bx	lr

08014f2a <__sfputs_r>:
 8014f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f2c:	4606      	mov	r6, r0
 8014f2e:	460f      	mov	r7, r1
 8014f30:	4614      	mov	r4, r2
 8014f32:	18d5      	adds	r5, r2, r3
 8014f34:	42ac      	cmp	r4, r5
 8014f36:	d101      	bne.n	8014f3c <__sfputs_r+0x12>
 8014f38:	2000      	movs	r0, #0
 8014f3a:	e007      	b.n	8014f4c <__sfputs_r+0x22>
 8014f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f40:	463a      	mov	r2, r7
 8014f42:	4630      	mov	r0, r6
 8014f44:	f7ff ffda 	bl	8014efc <__sfputc_r>
 8014f48:	1c43      	adds	r3, r0, #1
 8014f4a:	d1f3      	bne.n	8014f34 <__sfputs_r+0xa>
 8014f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014f50 <_vfiprintf_r>:
 8014f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f54:	460d      	mov	r5, r1
 8014f56:	b09d      	sub	sp, #116	; 0x74
 8014f58:	4614      	mov	r4, r2
 8014f5a:	4698      	mov	r8, r3
 8014f5c:	4606      	mov	r6, r0
 8014f5e:	b118      	cbz	r0, 8014f68 <_vfiprintf_r+0x18>
 8014f60:	6983      	ldr	r3, [r0, #24]
 8014f62:	b90b      	cbnz	r3, 8014f68 <_vfiprintf_r+0x18>
 8014f64:	f7ff f938 	bl	80141d8 <__sinit>
 8014f68:	4b89      	ldr	r3, [pc, #548]	; (8015190 <_vfiprintf_r+0x240>)
 8014f6a:	429d      	cmp	r5, r3
 8014f6c:	d11b      	bne.n	8014fa6 <_vfiprintf_r+0x56>
 8014f6e:	6875      	ldr	r5, [r6, #4]
 8014f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f72:	07d9      	lsls	r1, r3, #31
 8014f74:	d405      	bmi.n	8014f82 <_vfiprintf_r+0x32>
 8014f76:	89ab      	ldrh	r3, [r5, #12]
 8014f78:	059a      	lsls	r2, r3, #22
 8014f7a:	d402      	bmi.n	8014f82 <_vfiprintf_r+0x32>
 8014f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f7e:	f7ff f9ce 	bl	801431e <__retarget_lock_acquire_recursive>
 8014f82:	89ab      	ldrh	r3, [r5, #12]
 8014f84:	071b      	lsls	r3, r3, #28
 8014f86:	d501      	bpl.n	8014f8c <_vfiprintf_r+0x3c>
 8014f88:	692b      	ldr	r3, [r5, #16]
 8014f8a:	b9eb      	cbnz	r3, 8014fc8 <_vfiprintf_r+0x78>
 8014f8c:	4629      	mov	r1, r5
 8014f8e:	4630      	mov	r0, r6
 8014f90:	f7fe f9a0 	bl	80132d4 <__swsetup_r>
 8014f94:	b1c0      	cbz	r0, 8014fc8 <_vfiprintf_r+0x78>
 8014f96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f98:	07dc      	lsls	r4, r3, #31
 8014f9a:	d50e      	bpl.n	8014fba <_vfiprintf_r+0x6a>
 8014f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fa0:	b01d      	add	sp, #116	; 0x74
 8014fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fa6:	4b7b      	ldr	r3, [pc, #492]	; (8015194 <_vfiprintf_r+0x244>)
 8014fa8:	429d      	cmp	r5, r3
 8014faa:	d101      	bne.n	8014fb0 <_vfiprintf_r+0x60>
 8014fac:	68b5      	ldr	r5, [r6, #8]
 8014fae:	e7df      	b.n	8014f70 <_vfiprintf_r+0x20>
 8014fb0:	4b79      	ldr	r3, [pc, #484]	; (8015198 <_vfiprintf_r+0x248>)
 8014fb2:	429d      	cmp	r5, r3
 8014fb4:	bf08      	it	eq
 8014fb6:	68f5      	ldreq	r5, [r6, #12]
 8014fb8:	e7da      	b.n	8014f70 <_vfiprintf_r+0x20>
 8014fba:	89ab      	ldrh	r3, [r5, #12]
 8014fbc:	0598      	lsls	r0, r3, #22
 8014fbe:	d4ed      	bmi.n	8014f9c <_vfiprintf_r+0x4c>
 8014fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014fc2:	f7ff f9ad 	bl	8014320 <__retarget_lock_release_recursive>
 8014fc6:	e7e9      	b.n	8014f9c <_vfiprintf_r+0x4c>
 8014fc8:	2300      	movs	r3, #0
 8014fca:	9309      	str	r3, [sp, #36]	; 0x24
 8014fcc:	2320      	movs	r3, #32
 8014fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014fd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8014fd6:	2330      	movs	r3, #48	; 0x30
 8014fd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801519c <_vfiprintf_r+0x24c>
 8014fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014fe0:	f04f 0901 	mov.w	r9, #1
 8014fe4:	4623      	mov	r3, r4
 8014fe6:	469a      	mov	sl, r3
 8014fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fec:	b10a      	cbz	r2, 8014ff2 <_vfiprintf_r+0xa2>
 8014fee:	2a25      	cmp	r2, #37	; 0x25
 8014ff0:	d1f9      	bne.n	8014fe6 <_vfiprintf_r+0x96>
 8014ff2:	ebba 0b04 	subs.w	fp, sl, r4
 8014ff6:	d00b      	beq.n	8015010 <_vfiprintf_r+0xc0>
 8014ff8:	465b      	mov	r3, fp
 8014ffa:	4622      	mov	r2, r4
 8014ffc:	4629      	mov	r1, r5
 8014ffe:	4630      	mov	r0, r6
 8015000:	f7ff ff93 	bl	8014f2a <__sfputs_r>
 8015004:	3001      	adds	r0, #1
 8015006:	f000 80aa 	beq.w	801515e <_vfiprintf_r+0x20e>
 801500a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801500c:	445a      	add	r2, fp
 801500e:	9209      	str	r2, [sp, #36]	; 0x24
 8015010:	f89a 3000 	ldrb.w	r3, [sl]
 8015014:	2b00      	cmp	r3, #0
 8015016:	f000 80a2 	beq.w	801515e <_vfiprintf_r+0x20e>
 801501a:	2300      	movs	r3, #0
 801501c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015024:	f10a 0a01 	add.w	sl, sl, #1
 8015028:	9304      	str	r3, [sp, #16]
 801502a:	9307      	str	r3, [sp, #28]
 801502c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015030:	931a      	str	r3, [sp, #104]	; 0x68
 8015032:	4654      	mov	r4, sl
 8015034:	2205      	movs	r2, #5
 8015036:	f814 1b01 	ldrb.w	r1, [r4], #1
 801503a:	4858      	ldr	r0, [pc, #352]	; (801519c <_vfiprintf_r+0x24c>)
 801503c:	f7eb f958 	bl	80002f0 <memchr>
 8015040:	9a04      	ldr	r2, [sp, #16]
 8015042:	b9d8      	cbnz	r0, 801507c <_vfiprintf_r+0x12c>
 8015044:	06d1      	lsls	r1, r2, #27
 8015046:	bf44      	itt	mi
 8015048:	2320      	movmi	r3, #32
 801504a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801504e:	0713      	lsls	r3, r2, #28
 8015050:	bf44      	itt	mi
 8015052:	232b      	movmi	r3, #43	; 0x2b
 8015054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015058:	f89a 3000 	ldrb.w	r3, [sl]
 801505c:	2b2a      	cmp	r3, #42	; 0x2a
 801505e:	d015      	beq.n	801508c <_vfiprintf_r+0x13c>
 8015060:	9a07      	ldr	r2, [sp, #28]
 8015062:	4654      	mov	r4, sl
 8015064:	2000      	movs	r0, #0
 8015066:	f04f 0c0a 	mov.w	ip, #10
 801506a:	4621      	mov	r1, r4
 801506c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015070:	3b30      	subs	r3, #48	; 0x30
 8015072:	2b09      	cmp	r3, #9
 8015074:	d94e      	bls.n	8015114 <_vfiprintf_r+0x1c4>
 8015076:	b1b0      	cbz	r0, 80150a6 <_vfiprintf_r+0x156>
 8015078:	9207      	str	r2, [sp, #28]
 801507a:	e014      	b.n	80150a6 <_vfiprintf_r+0x156>
 801507c:	eba0 0308 	sub.w	r3, r0, r8
 8015080:	fa09 f303 	lsl.w	r3, r9, r3
 8015084:	4313      	orrs	r3, r2
 8015086:	9304      	str	r3, [sp, #16]
 8015088:	46a2      	mov	sl, r4
 801508a:	e7d2      	b.n	8015032 <_vfiprintf_r+0xe2>
 801508c:	9b03      	ldr	r3, [sp, #12]
 801508e:	1d19      	adds	r1, r3, #4
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	9103      	str	r1, [sp, #12]
 8015094:	2b00      	cmp	r3, #0
 8015096:	bfbb      	ittet	lt
 8015098:	425b      	neglt	r3, r3
 801509a:	f042 0202 	orrlt.w	r2, r2, #2
 801509e:	9307      	strge	r3, [sp, #28]
 80150a0:	9307      	strlt	r3, [sp, #28]
 80150a2:	bfb8      	it	lt
 80150a4:	9204      	strlt	r2, [sp, #16]
 80150a6:	7823      	ldrb	r3, [r4, #0]
 80150a8:	2b2e      	cmp	r3, #46	; 0x2e
 80150aa:	d10c      	bne.n	80150c6 <_vfiprintf_r+0x176>
 80150ac:	7863      	ldrb	r3, [r4, #1]
 80150ae:	2b2a      	cmp	r3, #42	; 0x2a
 80150b0:	d135      	bne.n	801511e <_vfiprintf_r+0x1ce>
 80150b2:	9b03      	ldr	r3, [sp, #12]
 80150b4:	1d1a      	adds	r2, r3, #4
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	9203      	str	r2, [sp, #12]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	bfb8      	it	lt
 80150be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80150c2:	3402      	adds	r4, #2
 80150c4:	9305      	str	r3, [sp, #20]
 80150c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80151ac <_vfiprintf_r+0x25c>
 80150ca:	7821      	ldrb	r1, [r4, #0]
 80150cc:	2203      	movs	r2, #3
 80150ce:	4650      	mov	r0, sl
 80150d0:	f7eb f90e 	bl	80002f0 <memchr>
 80150d4:	b140      	cbz	r0, 80150e8 <_vfiprintf_r+0x198>
 80150d6:	2340      	movs	r3, #64	; 0x40
 80150d8:	eba0 000a 	sub.w	r0, r0, sl
 80150dc:	fa03 f000 	lsl.w	r0, r3, r0
 80150e0:	9b04      	ldr	r3, [sp, #16]
 80150e2:	4303      	orrs	r3, r0
 80150e4:	3401      	adds	r4, #1
 80150e6:	9304      	str	r3, [sp, #16]
 80150e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150ec:	482c      	ldr	r0, [pc, #176]	; (80151a0 <_vfiprintf_r+0x250>)
 80150ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150f2:	2206      	movs	r2, #6
 80150f4:	f7eb f8fc 	bl	80002f0 <memchr>
 80150f8:	2800      	cmp	r0, #0
 80150fa:	d03f      	beq.n	801517c <_vfiprintf_r+0x22c>
 80150fc:	4b29      	ldr	r3, [pc, #164]	; (80151a4 <_vfiprintf_r+0x254>)
 80150fe:	bb1b      	cbnz	r3, 8015148 <_vfiprintf_r+0x1f8>
 8015100:	9b03      	ldr	r3, [sp, #12]
 8015102:	3307      	adds	r3, #7
 8015104:	f023 0307 	bic.w	r3, r3, #7
 8015108:	3308      	adds	r3, #8
 801510a:	9303      	str	r3, [sp, #12]
 801510c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801510e:	443b      	add	r3, r7
 8015110:	9309      	str	r3, [sp, #36]	; 0x24
 8015112:	e767      	b.n	8014fe4 <_vfiprintf_r+0x94>
 8015114:	fb0c 3202 	mla	r2, ip, r2, r3
 8015118:	460c      	mov	r4, r1
 801511a:	2001      	movs	r0, #1
 801511c:	e7a5      	b.n	801506a <_vfiprintf_r+0x11a>
 801511e:	2300      	movs	r3, #0
 8015120:	3401      	adds	r4, #1
 8015122:	9305      	str	r3, [sp, #20]
 8015124:	4619      	mov	r1, r3
 8015126:	f04f 0c0a 	mov.w	ip, #10
 801512a:	4620      	mov	r0, r4
 801512c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015130:	3a30      	subs	r2, #48	; 0x30
 8015132:	2a09      	cmp	r2, #9
 8015134:	d903      	bls.n	801513e <_vfiprintf_r+0x1ee>
 8015136:	2b00      	cmp	r3, #0
 8015138:	d0c5      	beq.n	80150c6 <_vfiprintf_r+0x176>
 801513a:	9105      	str	r1, [sp, #20]
 801513c:	e7c3      	b.n	80150c6 <_vfiprintf_r+0x176>
 801513e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015142:	4604      	mov	r4, r0
 8015144:	2301      	movs	r3, #1
 8015146:	e7f0      	b.n	801512a <_vfiprintf_r+0x1da>
 8015148:	ab03      	add	r3, sp, #12
 801514a:	9300      	str	r3, [sp, #0]
 801514c:	462a      	mov	r2, r5
 801514e:	4b16      	ldr	r3, [pc, #88]	; (80151a8 <_vfiprintf_r+0x258>)
 8015150:	a904      	add	r1, sp, #16
 8015152:	4630      	mov	r0, r6
 8015154:	f7fd fc44 	bl	80129e0 <_printf_float>
 8015158:	4607      	mov	r7, r0
 801515a:	1c78      	adds	r0, r7, #1
 801515c:	d1d6      	bne.n	801510c <_vfiprintf_r+0x1bc>
 801515e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015160:	07d9      	lsls	r1, r3, #31
 8015162:	d405      	bmi.n	8015170 <_vfiprintf_r+0x220>
 8015164:	89ab      	ldrh	r3, [r5, #12]
 8015166:	059a      	lsls	r2, r3, #22
 8015168:	d402      	bmi.n	8015170 <_vfiprintf_r+0x220>
 801516a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801516c:	f7ff f8d8 	bl	8014320 <__retarget_lock_release_recursive>
 8015170:	89ab      	ldrh	r3, [r5, #12]
 8015172:	065b      	lsls	r3, r3, #25
 8015174:	f53f af12 	bmi.w	8014f9c <_vfiprintf_r+0x4c>
 8015178:	9809      	ldr	r0, [sp, #36]	; 0x24
 801517a:	e711      	b.n	8014fa0 <_vfiprintf_r+0x50>
 801517c:	ab03      	add	r3, sp, #12
 801517e:	9300      	str	r3, [sp, #0]
 8015180:	462a      	mov	r2, r5
 8015182:	4b09      	ldr	r3, [pc, #36]	; (80151a8 <_vfiprintf_r+0x258>)
 8015184:	a904      	add	r1, sp, #16
 8015186:	4630      	mov	r0, r6
 8015188:	f7fd feb6 	bl	8012ef8 <_printf_i>
 801518c:	e7e4      	b.n	8015158 <_vfiprintf_r+0x208>
 801518e:	bf00      	nop
 8015190:	08016ee8 	.word	0x08016ee8
 8015194:	08016f08 	.word	0x08016f08
 8015198:	08016ec8 	.word	0x08016ec8
 801519c:	080170ca 	.word	0x080170ca
 80151a0:	080170d4 	.word	0x080170d4
 80151a4:	080129e1 	.word	0x080129e1
 80151a8:	08014f2b 	.word	0x08014f2b
 80151ac:	080170d0 	.word	0x080170d0

080151b0 <_read_r>:
 80151b0:	b538      	push	{r3, r4, r5, lr}
 80151b2:	4d07      	ldr	r5, [pc, #28]	; (80151d0 <_read_r+0x20>)
 80151b4:	4604      	mov	r4, r0
 80151b6:	4608      	mov	r0, r1
 80151b8:	4611      	mov	r1, r2
 80151ba:	2200      	movs	r2, #0
 80151bc:	602a      	str	r2, [r5, #0]
 80151be:	461a      	mov	r2, r3
 80151c0:	f7f0 fa3e 	bl	8005640 <_read>
 80151c4:	1c43      	adds	r3, r0, #1
 80151c6:	d102      	bne.n	80151ce <_read_r+0x1e>
 80151c8:	682b      	ldr	r3, [r5, #0]
 80151ca:	b103      	cbz	r3, 80151ce <_read_r+0x1e>
 80151cc:	6023      	str	r3, [r4, #0]
 80151ce:	bd38      	pop	{r3, r4, r5, pc}
 80151d0:	24001760 	.word	0x24001760

080151d4 <__ascii_wctomb>:
 80151d4:	b149      	cbz	r1, 80151ea <__ascii_wctomb+0x16>
 80151d6:	2aff      	cmp	r2, #255	; 0xff
 80151d8:	bf85      	ittet	hi
 80151da:	238a      	movhi	r3, #138	; 0x8a
 80151dc:	6003      	strhi	r3, [r0, #0]
 80151de:	700a      	strbls	r2, [r1, #0]
 80151e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80151e4:	bf98      	it	ls
 80151e6:	2001      	movls	r0, #1
 80151e8:	4770      	bx	lr
 80151ea:	4608      	mov	r0, r1
 80151ec:	4770      	bx	lr

080151ee <abort>:
 80151ee:	b508      	push	{r3, lr}
 80151f0:	2006      	movs	r0, #6
 80151f2:	f000 f82b 	bl	801524c <raise>
 80151f6:	2001      	movs	r0, #1
 80151f8:	f7f0 fa18 	bl	800562c <_exit>

080151fc <_raise_r>:
 80151fc:	291f      	cmp	r1, #31
 80151fe:	b538      	push	{r3, r4, r5, lr}
 8015200:	4604      	mov	r4, r0
 8015202:	460d      	mov	r5, r1
 8015204:	d904      	bls.n	8015210 <_raise_r+0x14>
 8015206:	2316      	movs	r3, #22
 8015208:	6003      	str	r3, [r0, #0]
 801520a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801520e:	bd38      	pop	{r3, r4, r5, pc}
 8015210:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015212:	b112      	cbz	r2, 801521a <_raise_r+0x1e>
 8015214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015218:	b94b      	cbnz	r3, 801522e <_raise_r+0x32>
 801521a:	4620      	mov	r0, r4
 801521c:	f000 f830 	bl	8015280 <_getpid_r>
 8015220:	462a      	mov	r2, r5
 8015222:	4601      	mov	r1, r0
 8015224:	4620      	mov	r0, r4
 8015226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801522a:	f000 b817 	b.w	801525c <_kill_r>
 801522e:	2b01      	cmp	r3, #1
 8015230:	d00a      	beq.n	8015248 <_raise_r+0x4c>
 8015232:	1c59      	adds	r1, r3, #1
 8015234:	d103      	bne.n	801523e <_raise_r+0x42>
 8015236:	2316      	movs	r3, #22
 8015238:	6003      	str	r3, [r0, #0]
 801523a:	2001      	movs	r0, #1
 801523c:	e7e7      	b.n	801520e <_raise_r+0x12>
 801523e:	2400      	movs	r4, #0
 8015240:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015244:	4628      	mov	r0, r5
 8015246:	4798      	blx	r3
 8015248:	2000      	movs	r0, #0
 801524a:	e7e0      	b.n	801520e <_raise_r+0x12>

0801524c <raise>:
 801524c:	4b02      	ldr	r3, [pc, #8]	; (8015258 <raise+0xc>)
 801524e:	4601      	mov	r1, r0
 8015250:	6818      	ldr	r0, [r3, #0]
 8015252:	f7ff bfd3 	b.w	80151fc <_raise_r>
 8015256:	bf00      	nop
 8015258:	24000244 	.word	0x24000244

0801525c <_kill_r>:
 801525c:	b538      	push	{r3, r4, r5, lr}
 801525e:	4d07      	ldr	r5, [pc, #28]	; (801527c <_kill_r+0x20>)
 8015260:	2300      	movs	r3, #0
 8015262:	4604      	mov	r4, r0
 8015264:	4608      	mov	r0, r1
 8015266:	4611      	mov	r1, r2
 8015268:	602b      	str	r3, [r5, #0]
 801526a:	f7f0 f9cf 	bl	800560c <_kill>
 801526e:	1c43      	adds	r3, r0, #1
 8015270:	d102      	bne.n	8015278 <_kill_r+0x1c>
 8015272:	682b      	ldr	r3, [r5, #0]
 8015274:	b103      	cbz	r3, 8015278 <_kill_r+0x1c>
 8015276:	6023      	str	r3, [r4, #0]
 8015278:	bd38      	pop	{r3, r4, r5, pc}
 801527a:	bf00      	nop
 801527c:	24001760 	.word	0x24001760

08015280 <_getpid_r>:
 8015280:	f7f0 b9bc 	b.w	80055fc <_getpid>

08015284 <_init>:
 8015284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015286:	bf00      	nop
 8015288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801528a:	bc08      	pop	{r3}
 801528c:	469e      	mov	lr, r3
 801528e:	4770      	bx	lr

08015290 <_fini>:
 8015290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015292:	bf00      	nop
 8015294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015296:	bc08      	pop	{r3}
 8015298:	469e      	mov	lr, r3
 801529a:	4770      	bx	lr
